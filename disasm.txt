
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 64 41 02 c0       	mov    eax,0xc0024164
c0000025:	3d 64 41 02 c0       	cmp    eax,0xc0024164
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 64 41 02 c0       	push   0xc0024164
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 64 41 02 c0       	mov    eax,0xc0024164
c0000051:	2d 64 41 02 c0       	sub    eax,0xc0024164
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 64 41 02 c0       	push   0xc0024164
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb bc 03 02 c0       	mov    ebx,0xc00203bc
c0000097:	81 eb b8 03 02 c0    	sub    ebx,0xc00203b8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be b8 03 02 c0       	mov    esi,0xc00203b8
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 64 41 02 c0       	push   0xc0024164
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 64 41 02 c0       	push   0xc0024164
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 07 56 01 00       	call   c00158b4 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 e5 55 01 00       	call   c00158b4 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 f2 5a 01 00       	call   c0015de0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 b1 61 01 00       	call   c00164a8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 4b 12 01 00       	jmp    c00115ca <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 c0 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfc40],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 c0 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc40],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 c0 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc40],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 c0 03 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfc40],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 c0 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc40],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 c4 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfb3c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 ae 7c 01 00       	jmp    c0019a50 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 d8 7c 01 00       	jmp    c0019a90 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 f9 7c 01 00       	jmp    c0019ad0 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 20 06 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf9e0]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 20 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf9e0]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 84 2d 02 c0       	mov    edx,0xc0022d84
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba dc 04 02 c0       	mov    edx,0xc00204dc
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 e2 04 02 c0       	mov    eax,0xc00204e2
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf a0 05 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfa60]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 eb 04 02 c0       	mov    eax,0xc00204eb
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 20 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf9e0]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 70 05 02 c0       	mov    eax,0xc0020570
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 60 05 02 c0       	mov    ebx,0xc0020560
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 40 05 02 c0       	mov    eax,0xc0020540
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 50 05 02 c0       	mov    eax,0xc0020550
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba f2 04 02 c0       	mov    edx,0xc00204f2
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba fe 04 02 c0       	mov    edx,0xc00204fe
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 12 05 02 c0       	mov    edx,0xc0020512
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 40 09 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020940
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 40 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020940
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 40 07 02 c0       	mov    eax,0xc0020740
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 80 06 02 c0       	mov    eax,0xc0020680
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 40 06 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf9c0]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 40 0a 02 c0       	push   0xc0020a40
c000611b:	e8 cc 42 01 00       	call   c001a3ec <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 4e 0a 02 c0       	push   0xc0020a4e
c0006153:	e8 94 42 01 00       	call   c001a3ec <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 fd 41 01 00       	call   c001a390 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 5d 0a 02 c0       	push   0xc0020a5d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 60 0a 02 c0       	push   0xc0020a60
c0006812:	e8 d5 3b 01 00       	call   c001a3ec <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 e9 3b 01 00       	call   c001a408 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 65 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a65
c000682c:	e8 bb 3b 01 00       	call   c001a3ec <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 cb 3b 01 00       	call   c001a408 <iso_kprintfd>
c000683d:	c7 04 24 6b 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a6b
c0006844:	e8 a3 3b 01 00       	call   c001a3ec <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 b3 3b 01 00       	call   c001a408 <iso_kprintfd>
c0006855:	c7 04 24 71 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a71
c000685c:	e8 8b 3b 01 00       	call   c001a3ec <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 9b 3b 01 00       	call   c001a408 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 5d 0a 02 c0       	push   0xc0020a5d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 7a 0a 02 c0       	push   0xc0020a7a
c0006a31:	e8 b6 39 01 00       	call   c001a3ec <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 85 0a 02 c0       	push   0xc0020a85
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 8c 0a 02 c0       	push   0xc0020a8c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 93 0a 02 c0       	push   0xc0020a93
c0006b48:	e8 9f 38 01 00       	call   c001a3ec <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 9e 0a 02 c0       	push   0xc0020a9e
c0006b63:	e8 84 38 01 00       	call   c001a3ec <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 8e a1 00 00       	call   c0010e00 <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 23 5e 00 00       	call   c000caa4 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 af 0a 02 c0       	push   0xc0020aaf
c0006cb2:	e8 28 a2 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 c8 0a 02 c0       	push   0xc0020ac8
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 2d ef 00 00       	call   c0015c0c <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 3c f1 00 00       	call   c0015e30 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 18 69 01 c0       	push   0xc0016918
c0006d03:	52                   	push   edx
c0006d04:	e8 27 f1 00 00       	call   c0015e30 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d11:	68 c4 0b 02 c0       	push   0xc0020bc4
c0006d16:	e8 c4 a1 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d22:	e8 71 aa 00 00       	call   c0011798 <KeInitRand()>
c0006d27:	e8 0f 00 01 00       	call   c0016d3b <Vm::initialise8086()>
c0006d2c:	e8 b9 4a 00 00       	call   c000b7ea <Fs::initVFS()>
c0006d31:	c7 04 24 d5 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ad5
c0006d38:	e8 a2 a1 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 c4 0b 02 c0       	push   0xc0020bc4
c0006d5c:	e8 7e a1 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c0006d61:	e8 a8 46 00 00       	call   c000b40e <KeInitialiseSymlinks()>
c0006d66:	e8 d7 a6 00 00       	call   c0011442 <KeLoadSystemEnv()>
c0006d6b:	e8 34 a9 00 00       	call   c00116a4 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 ef 0a 02 c0       	push   0xc0020aef
c0006d7a:	68 f8 0a 02 c0       	push   0xc0020af8
c0006d7f:	e8 a4 d0 00 00       	call   c0013e28 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 78 56 00 00       	call   c000c404 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 e8 0b 02 c0 	mov    DWORD PTR [esp],0xc0020be8
c0006d93:	e8 47 a1 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 f8 5c 00 00       	call   c000caa2 <Device::loadDriversForAll()>
c0006daa:	c7 04 24 00 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b00
c0006db1:	e8 29 a1 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 11 0b 02 c0       	push   0xc0020b11
c0006dc5:	e8 55 e8 00 00       	call   c001561f <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 7d ea 00 00       	call   c0015850 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 b4 f4 00 00       	call   c0016294 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 2d 0b 02 c0       	push   0xc0020b2d
c0006df5:	50                   	push   eax
c0006df6:	e8 23 5d 00 00       	call   c000cb1e <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba 34 0c 02 c0       	mov    edx,0xc0020c34
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 c1 84 01 00       	call   c001f3b6 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 e5 93 00 00       	call   c0010318 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 be 93 00 00       	call   c0010318 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 9c 93 00 00       	call   c0010318 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 7a 93 00 00       	call   c0010318 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 87 92 00 00       	call   c0010294 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 62 92 00 00       	call   c0010294 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 20 83 01 00       	call   c001f370 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 6e 7f 01 00       	call   c001efe0 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 78 92 00 00       	call   c0010318 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 36 0b 02 c0       	push   0xc0020b36
c00070e2:	e8 f8 a4 00 00       	call   c00115df <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 3c 0b 02 c0       	push   0xc0020b3c
c000711e:	e8 bc a4 00 00       	call   c00115df <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 c5 8b 00 00       	jmp    c000fd30 <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071be:	68 42 0b 02 c0       	push   0xc0020b42
c00071c3:	0f 94 05 c0 35 02 c0 	sete   BYTE PTR ds:0xc00235c0
c00071ca:	e8 10 9d 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 bf 86 00 00       	call   c000f8a4 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 92 57 00 00       	call   c000c986 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 5a 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b5a
c000720d:	e8 cd 9c 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 a8 91 00 00       	call   c00103d0 <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 4f 57 00 00       	call   c000c986 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 08 0c 02 c0       	push   0xc0020c08
c0007254:	e8 86 9c 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c0007259:	e8 1a 0d 01 00       	call   c0017f78 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 74 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b74
c0007265:	e8 75 9c 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 e6 ec 00 00       	call   c0015f5c <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 8f 0b 02 c0       	push   0xc0020b8f
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 a0 0b 02 c0       	push   0xc0020ba0
c00072ed:	e8 ed a2 00 00       	call   c00115df <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 ad 0b 02 c0       	push   0xc0020bad
c0007302:	e8 d8 a2 00 00       	call   c00115df <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 b7 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020bb7
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 be a2 00 00       	jmp    c00115df <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073b1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 31 07 01 00       	call   c0017c44 <HalSystemIdle()>
c0007513:	e8 5a 84 01 00       	call   c001f972 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007615:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000761a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 70 f0 01 c0       	push   0xc001f070
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 80 f0 01 c0       	push   0xc001f080
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 8a f0 01 c0       	push   0xc001f08a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 94 f0 01 c0       	push   0xc001f094
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 9e f0 01 c0       	push   0xc001f09e
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 a8 f0 01 c0       	push   0xc001f0a8
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 b2 f0 01 c0       	push   0xc001f0b2
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 bc f0 01 c0       	push   0xc001f0bc
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 c6 f0 01 c0       	push   0xc001f0c6
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 ce f0 01 c0       	push   0xc001f0ce
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 d8 f0 01 c0       	push   0xc001f0d8
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 e0 f0 01 c0       	push   0xc001f0e0
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 e8 f0 01 c0       	push   0xc001f0e8
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 f0 f0 01 c0       	push   0xc001f0f0
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 0a f1 01 c0       	push   0xc001f10a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 12 f1 01 c0       	push   0xc001f112
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 1c f1 01 c0       	push   0xc001f11c
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 26 f1 01 c0       	push   0xc001f126
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 30 f1 01 c0       	push   0xc001f130
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 ca f1 01 c0       	push   0xc001f1ca
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 d1 f1 01 c0       	push   0xc001f1d1
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 bc f1 01 c0       	push   0xc001f1bc
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 c3 f1 01 c0       	push   0xc001f1c3
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 3a f1 01 c0       	push   0xc001f13a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 44 f1 01 c0       	push   0xc001f144
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 4e f1 01 c0       	push   0xc001f14e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 58 f1 01 c0       	push   0xc001f158
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 62 f1 01 c0       	push   0xc001f162
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 6c f1 01 c0       	push   0xc001f16c
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 76 f1 01 c0       	push   0xc001f176
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 80 f1 01 c0       	push   0xc001f180
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 8a f1 01 c0       	push   0xc001f18a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 94 f1 01 c0       	push   0xc001f194
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 9e f1 01 c0       	push   0xc001f19e
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 a8 f1 01 c0       	push   0xc001f1a8
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 b2 f1 01 c0       	push   0xc001f1b2
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 0c f3 01 c0       	push   0xc001f30c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 16 f3 01 c0       	push   0xc001f316
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 20 f3 01 c0       	push   0xc001f320
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 2a f3 01 c0       	push   0xc001f32a
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 34 f3 01 c0       	push   0xc001f334
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 3e f3 01 c0       	push   0xc001f33e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 48 f3 01 c0       	push   0xc001f348
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 52 f3 01 c0       	push   0xc001f352
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 c6 f0 01 c0       	push   0xc001f0c6
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 b4 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235b4
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079ba:	8b 3d b4 35 02 c0    	mov    edi,DWORD PTR ds:0xc00235b4
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 b4 35 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00235b4,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 b4 35 02 c0       	mov    eax,ds:0xc00235b4
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 58 0c 02 c0       	push   0xc0020c58
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 88 0c 02 c0       	push   0xc0020c88
c0007a27:	e8 b3 9b 00 00       	call   c00115df <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 8d 0c 02 c0       	push   0xc0020c8d
c0007a3d:	e8 9d 9b 00 00       	call   c00115df <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 94 0c 02 c0       	push   0xc0020c94
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 fa 92 00 00       	call   c0010e63 <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 23 92 00 00       	call   c0010dad <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007b9b:	e8 6a 7d 01 00       	call   c001f90a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 ac 0c 02 c0       	push   0xc0020cac
c0007c31:	e8 a9 99 00 00       	call   c00115df <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007c75:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 ac 0c 02 c0       	push   0xc0020cac
c0007ca2:	e8 38 99 00 00       	call   c00115df <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 b8 35 02 c0    	mov    esi,DWORD PTR ds:0xc00235b8
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d b8 35 02 c0    	mov    ebx,DWORD PTR ds:0xc00235b8
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 b8 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235b8
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 51 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d51
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 32 98 00 00       	jmp    c00115df <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 d4 0c 02 c0       	push   0xc0020cd4
c0007e31:	e8 a9 97 00 00       	call   c00115df <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e58:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 67 0d 02 c0       	push   0xc0020d67
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 04 0d 02 c0       	push   0xc0020d04
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 28 0d 02 c0       	push   0xc0020d28
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 8d 0d 02 c0       	push   0xc0020d8d
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 7f 0d 02 c0       	push   0xc0020d7f
c000813c:	e8 9e 94 00 00       	call   c00115df <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba ec 0d 02 c0       	mov    edx,0xc0020dec
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 a9 0d 02 c0       	push   0xc0020da9
c0008311:	e8 c9 92 00 00       	call   c00115df <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000835a:	e8 21 dd 00 00       	call   c0016080 <schedule()>
c000835f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 f9 73 01 00       	call   c001f7f0 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 c6 0d 02 c0       	push   0xc0020dc6
c000840c:	e8 ce 91 00 00       	call   c00115df <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba ec 0d 02 c0       	mov    edx,0xc0020dec
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 34 0e 02 c0       	mov    edx,0xc0020e34
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 6a 53 00 00       	call   c000d860 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 1c 09 01 00       	call   c0018e38 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d e0 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca20]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d e0 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca20]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 98 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb68]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 70 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb90]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 4e 06 01 00       	call   c0018ccc <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 ab 06 01 00       	jmp    c0018dd4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 00 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e00
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 69 8e 00 00       	jmp    c00115df <KePanic(char const*)>
c0008776:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 d8 3a 00 00       	jmp    c000c3ab <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be 0e 0e 02 c0       	mov    esi,0xc0020e0e
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 b2 01 01 00       	call   c0018dd4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 34 0e 02 c0       	mov    edx,0xc0020e34
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 1f 0e 02 c0       	push   0xc0020e1f
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 25 0e 02 c0       	push   0xc0020e25
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba fc 0e 02 c0       	mov    edx,0xc0020efc
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 20 36 02 c0       	mov    eax,ds:0xc0023620
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 20 36 02 c0    	mov    DWORD PTR ds:0xc0023620,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 6f 02 c0       	push   0xc0026f98
c00091fc:	e8 d7 67 01 00       	call   c001f9d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba 18 0f 02 c0       	mov    edx,0xc0020f18
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba fc 0e 02 c0       	mov    edx,0xc0020efc
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 6f 02 c0       	push   0xc0026f98
c00093d0:	e8 d7 66 01 00       	call   c001faac <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 6f 02 c0       	push   0xc0026f98
c00093e4:	e8 cb 66 01 00       	call   c001fab4 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 6f 02 c0       	push   0xc0026f98
c0009402:	e8 d1 65 01 00       	call   c001f9d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 d4 0e 02 c0       	push   0xc0020ed4
c000942c:	e8 ae 81 00 00       	call   c00115df <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba 18 0f 02 c0       	mov    edx,0xc0020f18
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 6f 02 c0       	push   0xc0026f98
c00094d1:	e8 d6 65 01 00       	call   c001faac <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 6f 02 c0       	push   0xc0026f98
c00094ee:	e8 63 66 01 00       	call   c001fb56 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 6f 02 c0       	push   0xc0026f98
c0009570:	e8 21 64 01 00       	call   c001f996 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 b0 35 02 c0       	push   0xc00235b0
c0009580:	68 98 6f 02 c0       	push   0xc0026f98
c0009585:	68 94 f9 01 c0       	push   0xc001f994
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 28 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023628
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 28 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023628
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 24 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023624
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 24 36 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023624,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 24 36 02 c0    	mov    DWORD PTR ds:0xc0023624,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 2c 0f 02 c0       	push   0xc0020f2c
c0009689:	e8 51 7f 00 00       	call   c00115df <KePanic(char const*)>
c000968e:	8b 35 24 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023624
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 24 36 02 c0    	mov    DWORD PTR ds:0xc0023624,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 24 36 02 c0       	mov    eax,ds:0xc0023624
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 24 36 02 c0    	mov    DWORD PTR ds:0xc0023624,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 24 36 02 c0       	mov    ds:0xc0023624,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 2c 36 02 c0    	mov    edx,DWORD PTR ds:0xc002362c
c000975f:	8b 0d 34 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023634
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 2c 36 02 c0    	mov    ecx,DWORD PTR ds:0xc002362c
c000977a:	a1 30 36 02 c0       	mov    eax,ds:0xc0023630
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 30 36 02 c0    	cmp    DWORD PTR ds:0xc0023630,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 c0 11 02 c0       	push   0xc00211c0
c00097c0:	e8 1a 7e 00 00       	call   c00115df <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 d7 11 02 c0       	push   0xc00211d7
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 30 36 02 c0    	mov    DWORD PTR ds:0xc0023630,ebx
c0009864:	c6 05 38 36 02 c0 43 	mov    BYTE PTR ds:0xc0023638,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 34 36 02 c0       	mov    ds:0xc0023634,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 2c 36 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002362c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 30 36 02 c0       	mov    eax,ds:0xc0023630
c0009896:	f7 35 2c 36 02 c0    	div    DWORD PTR ds:0xc002362c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 4c 0f 02 c0       	push   0xc0020f4c
c00098d1:	e8 09 7d 00 00       	call   c00115df <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 ee 11 02 c0       	push   0xc00211ee
c00099a3:	e8 37 7c 00 00       	call   c00115df <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 70 0f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020f70
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 d4 7b 00 00       	jmp    c00115df <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 0a 12 02 c0       	push   0xc002120a
c0009a18:	e8 c2 7b 00 00       	call   c00115df <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 26 12 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021226
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 78 7b 00 00       	jmp    c00115df <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 94 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f94
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b26:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d10:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 b8 0f 02 c0       	push   0xc0020fb8
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 20 10 02 c0       	push   0xc0021020
c0009dad:	e8 2d 78 00 00       	call   c00115df <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 44 10 02 c0       	push   0xc0021044
c0009e99:	e8 41 77 00 00       	call   c00115df <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 70 10 02 c0       	push   0xc0021070
c0009fed:	e8 ed 75 00 00       	call   c00115df <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 f6 29 00 00       	call   c000cc1a <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 40 12 02 c0       	push   0xc0021240
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 2c 36 02 c0       	mov    eax,ds:0xc002362c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 38 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023638
c000a2fd:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a304:	50                   	push   eax
c000a305:	e8 ca 3a 00 00       	call   c000ddd4 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 2c 36 02 c0    	cmp    DWORD PTR ds:0xc002362c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 94 10 02 c0       	push   0xc0021094
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a36f:	c7 44 24 50 4e 12 02 c0 	mov    DWORD PTR [esp+0x50],0xc002124e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 71 12 02 c0       	push   0xc0021271
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 5f 12 02 c0       	push   0xc002125f
c000a3db:	e8 ff 71 00 00       	call   c00115df <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 71 12 02 c0       	push   0xc0021271
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 2c 36 02 c0    	mov    edx,DWORD PTR ds:0xc002362c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 38 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023638
c000a47a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a481:	50                   	push   eax
c000a482:	e8 e1 38 00 00       	call   c000dd68 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 2c 36 02 c0    	cmp    DWORD PTR ds:0xc002362c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 84 12 02 c0       	push   0xc0021284
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 c4 10 02 c0       	push   0xc00210c4
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 e4 10 02 c0       	push   0xc00210e4
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 44 11 02 c0 	mov    DWORD PTR [esp],0xc0021144
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 99 12 02 c0       	push   0xc0021299
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 ad 12 02 c0       	push   0xc00212ad
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 c0 12 02 c0       	push   0xc00212c0
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 50 02 c0       	push   0xc0025000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 50 02 c0       	push   0xc0025000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 cd 12 02 c0       	push   0xc00212cd
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 e6 12 02 c0       	push   0xc00212e6
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 e6 12 02 c0       	push   0xc00212e6
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 ee 12 02 c0 	mov    DWORD PTR [esp],0xc00212ee
c000a7f8:	e8 e2 6d 00 00       	call   c00115df <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 06 13 02 c0       	push   0xc0021306
c000a80a:	e8 d0 6d 00 00       	call   c00115df <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be 0f 0e 02 c0       	mov    esi,0xc0020e0f
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 0e 0e 02 c0       	mov    al,ds:0xc0020e0e
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 1c 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdece4]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 6c 14 02 c0       	push   0xc002146c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 80 14 02 c0       	push   0xc0021480
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 8a 14 02 c0       	push   0xc002148a
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 94 14 02 c0       	push   0xc0021494
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 d8 15 02 c0       	push   0xc00215d8
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 9e 14 02 c0       	push   0xc002149e
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 f8 15 02 c0       	push   0xc00215f8
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 b3 14 02 c0       	push   0xc00214b3
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 cd 14 02 c0       	push   0xc00214cd
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 40 36 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc9c0]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 20 16 02 c0       	push   0xc0021620
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 d8 15 02 c0       	push   0xc00215d8
c000abb4:	e8 26 6a 00 00       	call   c00115df <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 68 16 02 c0       	push   0xc0021668
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 68 16 02 c0       	push   0xc0021668
c000abe3:	e8 f7 69 00 00       	call   c00115df <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 d8 14 02 c0       	push   0xc00214d8
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 d8 14 02 c0       	push   0xc00214d8
c000ac0f:	e8 cb 69 00 00       	call   c00115df <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 f5 14 02 c0       	push   0xc00214f5
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 f5 14 02 c0       	push   0xc00214f5
c000ac3b:	e8 9f 69 00 00       	call   c00115df <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 88 16 02 c0       	push   0xc0021688
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 88 16 02 c0       	push   0xc0021688
c000ac67:	e8 73 69 00 00       	call   c00115df <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 ac 16 02 c0       	push   0xc00216ac
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 ac 16 02 c0       	push   0xc00216ac
c000ac93:	e8 47 69 00 00       	call   c00115df <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 11 15 02 c0       	push   0xc0021511
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 11 15 02 c0       	push   0xc0021511
c000acbf:	e8 1b 69 00 00       	call   c00115df <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 2d 15 02 c0       	push   0xc002152d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 2d 15 02 c0       	push   0xc002152d
c000aceb:	e8 ef 68 00 00       	call   c00115df <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 cc 16 02 c0       	push   0xc00216cc
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 cc 16 02 c0       	push   0xc00216cc
c000ad17:	e8 c3 68 00 00       	call   c00115df <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 f0 16 02 c0       	push   0xc00216f0
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 f0 16 02 c0       	push   0xc00216f0
c000ad43:	e8 97 68 00 00       	call   c00115df <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiIsHashInTable(unsigned short)>:
c000ad50:	0f b7 d0             	movzx  edx,ax
c000ad53:	83 e0 07             	and    eax,0x7
c000ad56:	c1 fa 03             	sar    edx,0x3
c000ad59:	88 c1                	mov    cl,al
c000ad5b:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad62:	d3 fa                	sar    edx,cl
c000ad64:	89 d0                	mov    eax,edx
c000ad66:	83 e0 01             	and    eax,0x1
c000ad69:	c3                   	ret    

c000ad6a <KiSetHashInTable(unsigned short, bool)>:
c000ad6a:	56                   	push   esi
c000ad6b:	53                   	push   ebx
c000ad6c:	0f b7 d8             	movzx  ebx,ax
c000ad6f:	83 e0 07             	and    eax,0x7
c000ad72:	c1 fb 03             	sar    ebx,0x3
c000ad75:	89 c1                	mov    ecx,eax
c000ad77:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad7e:	b8 01 00 00 00       	mov    eax,0x1
c000ad83:	d3 e0                	shl    eax,cl
c000ad85:	84 d2                	test   dl,dl
c000ad87:	74 04                	je     c000ad8d <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad89:	09 f0                	or     eax,esi
c000ad8b:	eb 04                	jmp    c000ad91 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad8d:	f7 d0                	not    eax
c000ad8f:	21 f0                	and    eax,esi
c000ad91:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad97:	5b                   	pop    ebx
c000ad98:	5e                   	pop    esi
c000ad99:	c3                   	ret    

c000ad9a <KiFlushSymlinkChanges()>:
c000ad9a:	57                   	push   edi
c000ad9b:	56                   	push   esi
c000ad9c:	53                   	push   ebx
c000ad9d:	83 ec 1c             	sub    esp,0x1c
c000ada0:	68 14 01 00 00       	push   0x114
c000ada5:	e8 0c cd ff ff       	call   c0007ab6 <malloc>
c000adaa:	83 c4 0c             	add    esp,0xc
c000adad:	89 c3                	mov    ebx,eax
c000adaf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000adb5:	68 0f 17 02 c0       	push   0xc002170f
c000adba:	50                   	push   eax
c000adbb:	e8 4c 0d 00 00       	call   c000bb0c <File::File(char const*, Process*)>
c000adc0:	83 c4 10             	add    esp,0x10
c000adc3:	85 db                	test   ebx,ebx
c000adc5:	75 10                	jne    c000add7 <KiFlushSymlinkChanges()+0x3d>
c000adc7:	83 ec 0c             	sub    esp,0xc
c000adca:	68 2d 17 02 c0       	push   0xc002172d
c000adcf:	e8 0b 68 00 00       	call   c00115df <KePanic(char const*)>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	50                   	push   eax
c000add8:	50                   	push   eax
c000add9:	6a 06                	push   0x6
c000addb:	53                   	push   ebx
c000addc:	e8 49 0d 00 00       	call   c000bb2a <File::open(FileOpenMode)>
c000ade1:	83 c4 10             	add    esp,0x10
c000ade4:	85 c0                	test   eax,eax
c000ade6:	74 10                	je     c000adf8 <KiFlushSymlinkChanges()+0x5e>
c000ade8:	83 ec 0c             	sub    esp,0xc
c000adeb:	68 47 17 02 c0       	push   0xc0021747
c000adf0:	e8 ea 67 00 00       	call   c00115df <KePanic(char const*)>
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	31 f6                	xor    esi,esi
c000adfa:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae00:	7e 70                	jle    c000ae72 <KiFlushSymlinkChanges()+0xd8>
c000ae02:	83 ec 0c             	sub    esp,0xc
c000ae05:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae07:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae0b:	89 f0                	mov    eax,esi
c000ae0d:	57                   	push   edi
c000ae0e:	c1 e0 08             	shl    eax,0x8
c000ae11:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae16:	50                   	push   eax
c000ae17:	6a 00                	push   0x0
c000ae19:	68 00 01 00 00       	push   0x100
c000ae1e:	53                   	push   ebx
c000ae1f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae22:	83 c4 20             	add    esp,0x20
c000ae25:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae2d:	74 10                	je     c000ae3f <KiFlushSymlinkChanges()+0xa5>
c000ae2f:	83 ec 0c             	sub    esp,0xc
c000ae32:	68 61 17 02 c0       	push   0xc0021761
c000ae37:	e8 a3 67 00 00       	call   c00115df <KePanic(char const*)>
c000ae3c:	83 c4 10             	add    esp,0x10
c000ae3f:	83 ec 0c             	sub    esp,0xc
c000ae42:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae44:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae4b:	57                   	push   edi
c000ae4c:	52                   	push   edx
c000ae4d:	6a 00                	push   0x0
c000ae4f:	6a 08                	push   0x8
c000ae51:	53                   	push   ebx
c000ae52:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae55:	83 c4 20             	add    esp,0x20
c000ae58:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae5d:	74 10                	je     c000ae6f <KiFlushSymlinkChanges()+0xd5>
c000ae5f:	83 ec 0c             	sub    esp,0xc
c000ae62:	68 7b 17 02 c0       	push   0xc002177b
c000ae67:	e8 73 67 00 00       	call   c00115df <KePanic(char const*)>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	46                   	inc    esi
c000ae70:	eb 88                	jmp    c000adfa <KiFlushSymlinkChanges()+0x60>
c000ae72:	83 ec 0c             	sub    esp,0xc
c000ae75:	53                   	push   ebx
c000ae76:	e8 0d 0d 00 00       	call   c000bb88 <File::close()>
c000ae7b:	83 c4 10             	add    esp,0x10
c000ae7e:	85 db                	test   ebx,ebx
c000ae80:	74 0c                	je     c000ae8e <KiFlushSymlinkChanges()+0xf4>
c000ae82:	83 ec 0c             	sub    esp,0xc
c000ae85:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae87:	53                   	push   ebx
c000ae88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae8b:	83 c4 10             	add    esp,0x10
c000ae8e:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae98:	83 c4 10             	add    esp,0x10
c000ae9b:	5b                   	pop    ebx
c000ae9c:	5e                   	pop    esi
c000ae9d:	5f                   	pop    edi
c000ae9e:	c3                   	ret    

c000ae9f <KiDeinitialiseSymlinks(void*)>:
c000ae9f:	e9 f6 fe ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>

c000aea4 <KiGetSymlinkHash(char const*)>:
c000aea4:	53                   	push   ebx
c000aea5:	89 c3                	mov    ebx,eax
c000aea7:	83 ec 14             	sub    esp,0x14
c000aeaa:	50                   	push   eax
c000aeab:	e8 c0 56 ff ff       	call   c0000570 <strlen>
c000aeb0:	5a                   	pop    edx
c000aeb1:	59                   	pop    ecx
c000aeb2:	50                   	push   eax
c000aeb3:	53                   	push   ebx
c000aeb4:	e8 a8 60 00 00       	call   c0010f61 <KeCalculateCRC32(unsigned char*, int)>
c000aeb9:	83 c4 18             	add    esp,0x18
c000aebc:	89 c2                	mov    edx,eax
c000aebe:	5b                   	pop    ebx
c000aebf:	c1 ea 10             	shr    edx,0x10
c000aec2:	31 d0                	xor    eax,edx
c000aec4:	c3                   	ret    

c000aec5 <KiCreateSymlinkID()>:
c000aec5:	55                   	push   ebp
c000aec6:	57                   	push   edi
c000aec7:	56                   	push   esi
c000aec8:	53                   	push   ebx
c000aec9:	31 db                	xor    ebx,ebx
c000aecb:	83 ec 1c             	sub    esp,0x1c
c000aece:	e8 5a 68 00 00       	call   c001172d <KeRand()>
c000aed3:	43                   	inc    ebx
c000aed4:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aeda:	31 d2                	xor    edx,edx
c000aedc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aedf:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000aee3:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aee9:	c1 e0 1b             	shl    eax,0x1b
c000aeec:	89 d7                	mov    edi,edx
c000aeee:	89 c6                	mov    esi,eax
c000aef0:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000aef4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aefc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af02:	75 10                	jne    c000af14 <KiCreateSymlinkID()+0x4f>
c000af04:	83 ec 0c             	sub    esp,0xc
c000af07:	68 95 17 02 c0       	push   0xc0021795
c000af0c:	e8 ce 66 00 00       	call   c00115df <KePanic(char const*)>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af18:	75 04                	jne    c000af1e <KiCreateSymlinkID()+0x59>
c000af1a:	39 f5                	cmp    ebp,esi
c000af1c:	74 b0                	je     c000aece <KiCreateSymlinkID()+0x9>
c000af1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af26:	31 f0                	xor    eax,esi
c000af28:	83 c4 1c             	add    esp,0x1c
c000af2b:	31 fa                	xor    edx,edi
c000af2d:	5b                   	pop    ebx
c000af2e:	5e                   	pop    esi
c000af2f:	5f                   	pop    edi
c000af30:	5d                   	pop    ebp
c000af31:	c3                   	ret    

c000af32 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af32:	53                   	push   ebx
c000af33:	83 ec 0c             	sub    esp,0xc
c000af36:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af3a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af42:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af47:	68 00 01 00 00       	push   0x100
c000af4c:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af53:	6a 00                	push   0x0
c000af55:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af5c:	c1 e0 08             	shl    eax,0x8
c000af5f:	05 00 70 02 c0       	add    eax,0xc0027000
c000af64:	50                   	push   eax
c000af65:	e8 86 55 ff ff       	call   c00004f0 <memset>
c000af6a:	58                   	pop    eax
c000af6b:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af70:	5a                   	pop    edx
c000af71:	c1 e0 08             	shl    eax,0x8
c000af74:	53                   	push   ebx
c000af75:	05 00 70 02 c0       	add    eax,0xc0027000
c000af7a:	50                   	push   eax
c000af7b:	e8 c0 56 ff ff       	call   c0000640 <strcpy>
c000af80:	89 d8                	mov    eax,ebx
c000af82:	e8 1d ff ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000af87:	ba 01 00 00 00       	mov    edx,0x1
c000af8c:	0f b7 c0             	movzx  eax,ax
c000af8f:	e8 d6 fd ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000af94:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af99:	83 c4 10             	add    esp,0x10
c000af9c:	40                   	inc    eax
c000af9d:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afa2:	83 f8 03             	cmp    eax,0x3
c000afa5:	7e 09                	jle    c000afb0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000afa7:	83 c4 08             	add    esp,0x8
c000afaa:	5b                   	pop    ebx
c000afab:	e9 ea fd ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>
c000afb0:	83 c4 08             	add    esp,0x8
c000afb3:	5b                   	pop    ebx
c000afb4:	c3                   	ret    

c000afb5 <KiIsSymlinkRegistered(char const*)>:
c000afb5:	55                   	push   ebp
c000afb6:	57                   	push   edi
c000afb7:	56                   	push   esi
c000afb8:	53                   	push   ebx
c000afb9:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000afbf:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000afc6:	89 f0                	mov    eax,esi
c000afc8:	e8 d7 fe ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000afcd:	0f b7 c0             	movzx  eax,ax
c000afd0:	e8 7b fd ff ff       	call   c000ad50 <KiIsHashInTable(unsigned short)>
c000afd5:	31 d2                	xor    edx,edx
c000afd7:	88 c1                	mov    cl,al
c000afd9:	31 c0                	xor    eax,eax
c000afdb:	84 c9                	test   cl,cl
c000afdd:	0f 84 3d 01 00 00    	je     c000b120 <KiIsSymlinkRegistered(char const*)+0x16b>
c000afe3:	31 db                	xor    ebx,ebx
c000afe5:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000afeb:	7e 30                	jle    c000b01d <KiIsSymlinkRegistered(char const*)+0x68>
c000afed:	89 d8                	mov    eax,ebx
c000afef:	57                   	push   edi
c000aff0:	c1 e0 08             	shl    eax,0x8
c000aff3:	57                   	push   edi
c000aff4:	05 00 70 02 c0       	add    eax,0xc0027000
c000aff9:	50                   	push   eax
c000affa:	56                   	push   esi
c000affb:	e8 50 57 ff ff       	call   c0000750 <strcmp>
c000b000:	83 c4 10             	add    esp,0x10
c000b003:	85 c0                	test   eax,eax
c000b005:	75 13                	jne    c000b01a <KiIsSymlinkRegistered(char const*)+0x65>
c000b007:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b00e:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b015:	e9 06 01 00 00       	jmp    c000b120 <KiIsSymlinkRegistered(char const*)+0x16b>
c000b01a:	43                   	inc    ebx
c000b01b:	eb c8                	jmp    c000afe5 <KiIsSymlinkRegistered(char const*)+0x30>
c000b01d:	83 ec 0c             	sub    esp,0xc
c000b020:	68 14 01 00 00       	push   0x114
c000b025:	e8 8c ca ff ff       	call   c0007ab6 <malloc>
c000b02a:	83 c4 0c             	add    esp,0xc
c000b02d:	89 c3                	mov    ebx,eax
c000b02f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b035:	68 0f 17 02 c0       	push   0xc002170f
c000b03a:	50                   	push   eax
c000b03b:	e8 cc 0a 00 00       	call   c000bb0c <File::File(char const*, Process*)>
c000b040:	83 c4 10             	add    esp,0x10
c000b043:	85 db                	test   ebx,ebx
c000b045:	75 12                	jne    c000b059 <KiIsSymlinkRegistered(char const*)+0xa4>
c000b047:	83 ec 0c             	sub    esp,0xc
c000b04a:	68 9e 17 02 c0       	push   0xc002179e
c000b04f:	e8 8b 65 00 00       	call   c00115df <KePanic(char const*)>
c000b054:	83 c4 10             	add    esp,0x10
c000b057:	eb 10                	jmp    c000b069 <KiIsSymlinkRegistered(char const*)+0xb4>
c000b059:	83 ec 0c             	sub    esp,0xc
c000b05c:	53                   	push   ebx
c000b05d:	e8 8c 0d 00 00       	call   c000bdee <File::exists()>
c000b062:	83 c4 10             	add    esp,0x10
c000b065:	84 c0                	test   al,al
c000b067:	74 de                	je     c000b047 <KiIsSymlinkRegistered(char const*)+0x92>
c000b069:	51                   	push   ecx
c000b06a:	51                   	push   ecx
c000b06b:	6a 01                	push   0x1
c000b06d:	53                   	push   ebx
c000b06e:	e8 b7 0a 00 00       	call   c000bb2a <File::open(FileOpenMode)>
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	85 c0                	test   eax,eax
c000b078:	74 10                	je     c000b08a <KiIsSymlinkRegistered(char const*)+0xd5>
c000b07a:	83 ec 0c             	sub    esp,0xc
c000b07d:	68 b9 17 02 c0       	push   0xc00217b9
c000b082:	e8 58 65 00 00       	call   c00115df <KePanic(char const*)>
c000b087:	83 c4 10             	add    esp,0x10
c000b08a:	83 ec 0c             	sub    esp,0xc
c000b08d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b08f:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b093:	55                   	push   ebp
c000b094:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b098:	57                   	push   edi
c000b099:	6a 00                	push   0x0
c000b09b:	68 00 01 00 00       	push   0x100
c000b0a0:	53                   	push   ebx
c000b0a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0a4:	83 c4 20             	add    esp,0x20
c000b0a7:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0af:	75 57                	jne    c000b108 <KiIsSymlinkRegistered(char const*)+0x153>
c000b0b1:	83 ec 0c             	sub    esp,0xc
c000b0b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0b6:	55                   	push   ebp
c000b0b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b0bb:	52                   	push   edx
c000b0bc:	6a 00                	push   0x0
c000b0be:	6a 08                	push   0x8
c000b0c0:	53                   	push   ebx
c000b0c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0c4:	83 c4 20             	add    esp,0x20
c000b0c7:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b0cc:	75 3a                	jne    c000b108 <KiIsSymlinkRegistered(char const*)+0x153>
c000b0ce:	52                   	push   edx
c000b0cf:	52                   	push   edx
c000b0d0:	57                   	push   edi
c000b0d1:	56                   	push   esi
c000b0d2:	e8 79 56 ff ff       	call   c0000750 <strcmp>
c000b0d7:	83 c4 10             	add    esp,0x10
c000b0da:	85 c0                	test   eax,eax
c000b0dc:	75 ac                	jne    c000b08a <KiIsSymlinkRegistered(char const*)+0xd5>
c000b0de:	50                   	push   eax
c000b0df:	50                   	push   eax
c000b0e0:	57                   	push   edi
c000b0e1:	68 d4 17 02 c0       	push   0xc00217d4
c000b0e6:	e8 5a f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b0eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0ee:	e8 95 0a 00 00       	call   c000bb88 <File::close()>
c000b0f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b103:	83 c4 10             	add    esp,0x10
c000b106:	eb 18                	jmp    c000b120 <KiIsSymlinkRegistered(char const*)+0x16b>
c000b108:	83 ec 0c             	sub    esp,0xc
c000b10b:	53                   	push   ebx
c000b10c:	e8 77 0a 00 00       	call   c000bb88 <File::close()>
c000b111:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b113:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b116:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b119:	83 c4 10             	add    esp,0x10
c000b11c:	31 c0                	xor    eax,eax
c000b11e:	31 d2                	xor    edx,edx
c000b120:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b126:	5b                   	pop    ebx
c000b127:	5e                   	pop    esi
c000b128:	5f                   	pop    edi
c000b129:	5d                   	pop    ebp
c000b12a:	c3                   	ret    

c000b12b <KeDereferenceSymlink(char const*, char*)>:
c000b12b:	55                   	push   ebp
c000b12c:	57                   	push   edi
c000b12d:	56                   	push   esi
c000b12e:	53                   	push   ebx
c000b12f:	83 ec 48             	sub    esp,0x48
c000b132:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b136:	56                   	push   esi
c000b137:	e8 79 fe ff ff       	call   c000afb5 <KiIsSymlinkRegistered(char const*)>
c000b13c:	83 c4 10             	add    esp,0x10
c000b13f:	89 c7                	mov    edi,eax
c000b141:	89 d0                	mov    eax,edx
c000b143:	09 f8                	or     eax,edi
c000b145:	75 07                	jne    c000b14e <KeDereferenceSymlink(char const*, char*)+0x23>
c000b147:	31 c0                	xor    eax,eax
c000b149:	e9 7c 01 00 00       	jmp    c000b2ca <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b14e:	83 ec 0c             	sub    esp,0xc
c000b151:	89 d5                	mov    ebp,edx
c000b153:	68 14 01 00 00       	push   0x114
c000b158:	e8 59 c9 ff ff       	call   c0007ab6 <malloc>
c000b15d:	83 c4 0c             	add    esp,0xc
c000b160:	89 c3                	mov    ebx,eax
c000b162:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b168:	56                   	push   esi
c000b169:	50                   	push   eax
c000b16a:	e8 9d 09 00 00       	call   c000bb0c <File::File(char const*, Process*)>
c000b16f:	83 c4 10             	add    esp,0x10
c000b172:	85 db                	test   ebx,ebx
c000b174:	0f 84 32 01 00 00    	je     c000b2ac <KeDereferenceSymlink(char const*, char*)+0x181>
c000b17a:	56                   	push   esi
c000b17b:	56                   	push   esi
c000b17c:	6a 01                	push   0x1
c000b17e:	53                   	push   ebx
c000b17f:	e8 a6 09 00 00       	call   c000bb2a <File::open(FileOpenMode)>
c000b184:	83 c4 10             	add    esp,0x10
c000b187:	85 c0                	test   eax,eax
c000b189:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b18b:	74 09                	je     c000b196 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b18d:	83 ec 0c             	sub    esp,0xc
c000b190:	53                   	push   ebx
c000b191:	e9 10 01 00 00       	jmp    c000b2a6 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b196:	83 ec 0c             	sub    esp,0xc
c000b199:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b19d:	56                   	push   esi
c000b19e:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b1a2:	52                   	push   edx
c000b1a3:	6a 00                	push   0x0
c000b1a5:	6a 08                	push   0x8
c000b1a7:	53                   	push   ebx
c000b1a8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1ab:	83 c4 20             	add    esp,0x20
c000b1ae:	85 c0                	test   eax,eax
c000b1b0:	0f 85 e2 00 00 00    	jne    c000b298 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b1b6:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b1bb:	0f 85 d7 00 00 00    	jne    c000b298 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b1c1:	83 ec 0c             	sub    esp,0xc
c000b1c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1c6:	56                   	push   esi
c000b1c7:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b1cb:	52                   	push   edx
c000b1cc:	6a 00                	push   0x0
c000b1ce:	6a 08                	push   0x8
c000b1d0:	53                   	push   ebx
c000b1d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1d4:	83 c4 20             	add    esp,0x20
c000b1d7:	85 c0                	test   eax,eax
c000b1d9:	0f 85 b9 00 00 00    	jne    c000b298 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b1df:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b1e4:	0f 85 ae 00 00 00    	jne    c000b298 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b1ea:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b1ee:	0f 85 53 ff ff ff    	jne    c000b147 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b1f4:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b1f8:	0f 85 49 ff ff ff    	jne    c000b147 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b1fe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b206:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b20e:	51                   	push   ecx
c000b20f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b213:	50                   	push   eax
c000b214:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b218:	50                   	push   eax
c000b219:	53                   	push   ebx
c000b21a:	e8 0d 0c 00 00       	call   c000be2c <File::stat(unsigned long long*, bool*)>
c000b21f:	83 c4 10             	add    esp,0x10
c000b222:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b227:	75 6f                	jne    c000b298 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b229:	31 c9                	xor    ecx,ecx
c000b22b:	bf 0f 00 00 00       	mov    edi,0xf
c000b230:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b234:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b238:	39 c7                	cmp    edi,eax
c000b23a:	89 cf                	mov    edi,ecx
c000b23c:	19 d7                	sbb    edi,edx
c000b23e:	73 58                	jae    c000b298 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b240:	83 c0 f0             	add    eax,0xfffffff0
c000b243:	bf ff 00 00 00       	mov    edi,0xff
c000b248:	83 d2 ff             	adc    edx,0xffffffff
c000b24b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b24f:	39 c7                	cmp    edi,eax
c000b251:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b255:	19 d1                	sbb    ecx,edx
c000b257:	72 53                	jb     c000b2ac <KeDereferenceSymlink(char const*, char*)+0x181>
c000b259:	40                   	inc    eax
c000b25a:	52                   	push   edx
c000b25b:	50                   	push   eax
c000b25c:	6a 00                	push   0x0
c000b25e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b262:	e8 89 52 ff ff       	call   c00004f0 <memset>
c000b267:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b269:	89 34 24             	mov    DWORD PTR [esp],esi
c000b26c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b270:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b274:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b278:	53                   	push   ebx
c000b279:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b27c:	83 c4 20             	add    esp,0x20
c000b27f:	85 c0                	test   eax,eax
c000b281:	75 15                	jne    c000b298 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b283:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b287:	89 c7                	mov    edi,eax
c000b289:	c1 ff 1f             	sar    edi,0x1f
c000b28c:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b290:	75 06                	jne    c000b298 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b292:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b296:	74 19                	je     c000b2b1 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b298:	83 ec 0c             	sub    esp,0xc
c000b29b:	53                   	push   ebx
c000b29c:	e8 e7 08 00 00       	call   c000bb88 <File::close()>
c000b2a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	83 c8 ff             	or     eax,0xffffffff
c000b2af:	eb 19                	jmp    c000b2ca <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b2b1:	83 ec 0c             	sub    esp,0xc
c000b2b4:	53                   	push   ebx
c000b2b5:	e8 ce 08 00 00       	call   c000bb88 <File::close()>
c000b2ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2c2:	83 c4 10             	add    esp,0x10
c000b2c5:	b8 01 00 00 00       	mov    eax,0x1
c000b2ca:	83 c4 3c             	add    esp,0x3c
c000b2cd:	5b                   	pop    ebx
c000b2ce:	5e                   	pop    esi
c000b2cf:	5f                   	pop    edi
c000b2d0:	5d                   	pop    ebp
c000b2d1:	c3                   	ret    

c000b2d2 <KeCreateSymlink(char const*, char const*)>:
c000b2d2:	55                   	push   ebp
c000b2d3:	57                   	push   edi
c000b2d4:	56                   	push   esi
c000b2d5:	53                   	push   ebx
c000b2d6:	83 ec 38             	sub    esp,0x38
c000b2d9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b2dd:	68 14 01 00 00       	push   0x114
c000b2e2:	e8 cf c7 ff ff       	call   c0007ab6 <malloc>
c000b2e7:	6a 00                	push   0x0
c000b2e9:	89 c3                	mov    ebx,eax
c000b2eb:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b2f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b2f5:	50                   	push   eax
c000b2f6:	e8 33 07 00 00       	call   c000ba2e <File::File(char const*, Process*, bool)>
c000b2fb:	83 c4 20             	add    esp,0x20
c000b2fe:	b8 01 00 00 00       	mov    eax,0x1
c000b303:	85 db                	test   ebx,ebx
c000b305:	0f 84 fb 00 00 00    	je     c000b406 <KeCreateSymlink(char const*, char const*)+0x134>
c000b30b:	52                   	push   edx
c000b30c:	52                   	push   edx
c000b30d:	6a 12                	push   0x12
c000b30f:	53                   	push   ebx
c000b310:	e8 15 08 00 00       	call   c000bb2a <File::open(FileOpenMode)>
c000b315:	83 c4 10             	add    esp,0x10
c000b318:	85 c0                	test   eax,eax
c000b31a:	74 0b                	je     c000b327 <KeCreateSymlink(char const*, char const*)+0x55>
c000b31c:	83 ec 0c             	sub    esp,0xc
c000b31f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b321:	53                   	push   ebx
c000b322:	e9 d4 00 00 00       	jmp    c000b3fb <KeCreateSymlink(char const*, char const*)+0x129>
c000b327:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b32b:	be eb 17 02 c0       	mov    esi,0xc00217eb
c000b330:	b9 09 00 00 00       	mov    ecx,0x9
c000b335:	fc                   	cld    
c000b336:	83 ec 0c             	sub    esp,0xc
c000b339:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b33b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b33f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b341:	56                   	push   esi
c000b342:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b346:	52                   	push   edx
c000b347:	6a 00                	push   0x0
c000b349:	6a 08                	push   0x8
c000b34b:	53                   	push   ebx
c000b34c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b34f:	83 c4 20             	add    esp,0x20
c000b352:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b357:	0f 85 90 00 00 00    	jne    c000b3ed <KeCreateSymlink(char const*, char const*)+0x11b>
c000b35d:	85 c0                	test   eax,eax
c000b35f:	0f 85 88 00 00 00    	jne    c000b3ed <KeCreateSymlink(char const*, char const*)+0x11b>
c000b365:	e8 5b fb ff ff       	call   c000aec5 <KiCreateSymlinkID()>
c000b36a:	83 ec 0c             	sub    esp,0xc
c000b36d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b371:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b375:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b377:	56                   	push   esi
c000b378:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b37c:	52                   	push   edx
c000b37d:	6a 00                	push   0x0
c000b37f:	6a 08                	push   0x8
c000b381:	53                   	push   ebx
c000b382:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b385:	83 c4 20             	add    esp,0x20
c000b388:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b38d:	75 5e                	jne    c000b3ed <KeCreateSymlink(char const*, char const*)+0x11b>
c000b38f:	85 c0                	test   eax,eax
c000b391:	75 5a                	jne    c000b3ed <KeCreateSymlink(char const*, char const*)+0x11b>
c000b393:	83 ec 0c             	sub    esp,0xc
c000b396:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b398:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b39b:	55                   	push   ebp
c000b39c:	e8 cf 51 ff ff       	call   c0000570 <strlen>
c000b3a1:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3a4:	31 d2                	xor    edx,edx
c000b3a6:	55                   	push   ebp
c000b3a7:	52                   	push   edx
c000b3a8:	50                   	push   eax
c000b3a9:	53                   	push   ebx
c000b3aa:	ff d7                	call   edi
c000b3ac:	83 c4 14             	add    esp,0x14
c000b3af:	89 c6                	mov    esi,eax
c000b3b1:	55                   	push   ebp
c000b3b2:	e8 b9 51 ff ff       	call   c0000570 <strlen>
c000b3b7:	83 c4 10             	add    esp,0x10
c000b3ba:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b3be:	75 2d                	jne    c000b3ed <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3c0:	85 f6                	test   esi,esi
c000b3c2:	75 29                	jne    c000b3ed <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3c4:	50                   	push   eax
c000b3c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3cd:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b3d1:	e8 5c fb ff ff       	call   c000af32 <KeRegisterSymlink(char const*, unsigned long long)>
c000b3d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3d9:	e8 aa 07 00 00       	call   c000bb88 <File::close()>
c000b3de:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3e6:	83 c4 10             	add    esp,0x10
c000b3e9:	31 c0                	xor    eax,eax
c000b3eb:	eb 19                	jmp    c000b406 <KeCreateSymlink(char const*, char const*)+0x134>
c000b3ed:	83 ec 0c             	sub    esp,0xc
c000b3f0:	53                   	push   ebx
c000b3f1:	e8 92 07 00 00       	call   c000bb88 <File::close()>
c000b3f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3fe:	83 c4 10             	add    esp,0x10
c000b401:	b8 01 00 00 00       	mov    eax,0x1
c000b406:	83 c4 2c             	add    esp,0x2c
c000b409:	5b                   	pop    ebx
c000b40a:	5e                   	pop    esi
c000b40b:	5f                   	pop    edi
c000b40c:	5d                   	pop    ebp
c000b40d:	c3                   	ret    

c000b40e <KeInitialiseSymlinks()>:
c000b40e:	57                   	push   edi
c000b40f:	56                   	push   esi
c000b410:	53                   	push   ebx
c000b411:	81 ec 14 01 00 00    	sub    esp,0x114
c000b417:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b421:	68 00 20 00 00       	push   0x2000
c000b426:	6a 00                	push   0x0
c000b428:	68 00 74 02 c0       	push   0xc0027400
c000b42d:	e8 be 50 ff ff       	call   c00004f0 <memset>
c000b432:	5f                   	pop    edi
c000b433:	58                   	pop    eax
c000b434:	6a 00                	push   0x0
c000b436:	68 9f ae 00 c0       	push   0xc000ae9f
c000b43b:	e8 8c 59 00 00       	call   c0010dcc <KeRegisterAtexit(void (*)(void*), void*)>
c000b440:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b447:	e8 6a c6 ff ff       	call   c0007ab6 <malloc>
c000b44c:	83 c4 0c             	add    esp,0xc
c000b44f:	89 c3                	mov    ebx,eax
c000b451:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b457:	68 0f 17 02 c0       	push   0xc002170f
c000b45c:	50                   	push   eax
c000b45d:	e8 aa 06 00 00       	call   c000bb0c <File::File(char const*, Process*)>
c000b462:	83 c4 10             	add    esp,0x10
c000b465:	85 db                	test   ebx,ebx
c000b467:	75 10                	jne    c000b479 <KeInitialiseSymlinks()+0x6b>
c000b469:	83 ec 0c             	sub    esp,0xc
c000b46c:	68 f4 17 02 c0       	push   0xc00217f4
c000b471:	e8 69 61 00 00       	call   c00115df <KePanic(char const*)>
c000b476:	83 c4 10             	add    esp,0x10
c000b479:	83 ec 0c             	sub    esp,0xc
c000b47c:	53                   	push   ebx
c000b47d:	e8 6c 09 00 00       	call   c000bdee <File::exists()>
c000b482:	83 c4 10             	add    esp,0x10
c000b485:	84 c0                	test   al,al
c000b487:	75 3a                	jne    c000b4c3 <KeInitialiseSymlinks()+0xb5>
c000b489:	56                   	push   esi
c000b48a:	56                   	push   esi
c000b48b:	6a 12                	push   0x12
c000b48d:	53                   	push   ebx
c000b48e:	e8 97 06 00 00       	call   c000bb2a <File::open(FileOpenMode)>
c000b493:	83 c4 10             	add    esp,0x10
c000b496:	85 c0                	test   eax,eax
c000b498:	74 10                	je     c000b4aa <KeInitialiseSymlinks()+0x9c>
c000b49a:	83 ec 0c             	sub    esp,0xc
c000b49d:	68 11 18 02 c0       	push   0xc0021811
c000b4a2:	e8 38 61 00 00       	call   c00115df <KePanic(char const*)>
c000b4a7:	83 c4 10             	add    esp,0x10
c000b4aa:	83 ec 0c             	sub    esp,0xc
c000b4ad:	53                   	push   ebx
c000b4ae:	e8 d5 06 00 00       	call   c000bb88 <File::close()>
c000b4b3:	83 c4 10             	add    esp,0x10
c000b4b6:	85 db                	test   ebx,ebx
c000b4b8:	0f 84 a5 00 00 00    	je     c000b563 <KeInitialiseSymlinks()+0x155>
c000b4be:	e9 94 00 00 00       	jmp    c000b557 <KeInitialiseSymlinks()+0x149>
c000b4c3:	51                   	push   ecx
c000b4c4:	51                   	push   ecx
c000b4c5:	6a 01                	push   0x1
c000b4c7:	53                   	push   ebx
c000b4c8:	e8 5d 06 00 00       	call   c000bb2a <File::open(FileOpenMode)>
c000b4cd:	83 c4 10             	add    esp,0x10
c000b4d0:	85 c0                	test   eax,eax
c000b4d2:	74 10                	je     c000b4e4 <KeInitialiseSymlinks()+0xd6>
c000b4d4:	83 ec 0c             	sub    esp,0xc
c000b4d7:	68 2e 18 02 c0       	push   0xc002182e
c000b4dc:	e8 fe 60 00 00       	call   c00115df <KePanic(char const*)>
c000b4e1:	83 c4 10             	add    esp,0x10
c000b4e4:	83 ec 0c             	sub    esp,0xc
c000b4e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4e9:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b4ed:	57                   	push   edi
c000b4ee:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b4f2:	56                   	push   esi
c000b4f3:	6a 00                	push   0x0
c000b4f5:	68 00 01 00 00       	push   0x100
c000b4fa:	53                   	push   ebx
c000b4fb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b4fe:	83 c4 20             	add    esp,0x20
c000b501:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b509:	75 40                	jne    c000b54b <KeInitialiseSymlinks()+0x13d>
c000b50b:	83 ec 0c             	sub    esp,0xc
c000b50e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b510:	57                   	push   edi
c000b511:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b515:	52                   	push   edx
c000b516:	6a 00                	push   0x0
c000b518:	6a 08                	push   0x8
c000b51a:	53                   	push   ebx
c000b51b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b51e:	83 c4 20             	add    esp,0x20
c000b521:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b526:	75 23                	jne    c000b54b <KeInitialiseSymlinks()+0x13d>
c000b528:	52                   	push   edx
c000b529:	52                   	push   edx
c000b52a:	56                   	push   esi
c000b52b:	68 49 18 02 c0       	push   0xc0021849
c000b530:	e8 10 f4 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b535:	89 f0                	mov    eax,esi
c000b537:	e8 68 f9 ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000b53c:	ba 01 00 00 00       	mov    edx,0x1
c000b541:	0f b7 c0             	movzx  eax,ax
c000b544:	e8 21 f8 ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000b549:	eb 96                	jmp    c000b4e1 <KeInitialiseSymlinks()+0xd3>
c000b54b:	83 ec 0c             	sub    esp,0xc
c000b54e:	53                   	push   ebx
c000b54f:	e8 34 06 00 00       	call   c000bb88 <File::close()>
c000b554:	83 c4 10             	add    esp,0x10
c000b557:	83 ec 0c             	sub    esp,0xc
c000b55a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b55c:	53                   	push   ebx
c000b55d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	50                   	push   eax
c000b564:	50                   	push   eax
c000b565:	68 81 18 02 c0       	push   0xc0021881
c000b56a:	68 8f 18 02 c0       	push   0xc002188f
c000b56f:	e8 5e fd ff ff       	call   c000b2d2 <KeCreateSymlink(char const*, char const*)>
c000b574:	81 c4 20 01 00 00    	add    esp,0x120
c000b57a:	5b                   	pop    ebx
c000b57b:	5e                   	pop    esi
c000b57c:	5f                   	pop    edi
c000b57d:	c3                   	ret    

c000b57e <File::read(unsigned long long, void*, int*)>:
c000b57e:	53                   	push   ebx
c000b57f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b583:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b587:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b58e:	83 f8 19             	cmp    eax,0x19
c000b591:	77 35                	ja     c000b5c8 <File::read(unsigned long long, void*, int*)+0x4a>
c000b593:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b59a:	85 c0                	test   eax,eax
c000b59c:	74 2a                	je     c000b5c8 <File::read(unsigned long long, void*, int*)+0x4a>
c000b59e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5a4:	85 c0                	test   eax,eax
c000b5a6:	74 20                	je     c000b5c8 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5ac:	74 21                	je     c000b5cf <File::read(unsigned long long, void*, int*)+0x51>
c000b5ae:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5b0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5b4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b5ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c2:	5b                   	pop    ebx
c000b5c3:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b5c6:	ff e0                	jmp    eax
c000b5c8:	b8 0b 00 00 00       	mov    eax,0xb
c000b5cd:	eb 05                	jmp    c000b5d4 <File::read(unsigned long long, void*, int*)+0x56>
c000b5cf:	b8 05 00 00 00       	mov    eax,0x5
c000b5d4:	5b                   	pop    ebx
c000b5d5:	c3                   	ret    

c000b5d6 <File::write(unsigned long long, void*, int*)>:
c000b5d6:	53                   	push   ebx
c000b5d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5db:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5df:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5e6:	83 f8 19             	cmp    eax,0x19
c000b5e9:	77 35                	ja     c000b620 <File::write(unsigned long long, void*, int*)+0x4a>
c000b5eb:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5f2:	85 c0                	test   eax,eax
c000b5f4:	74 2a                	je     c000b620 <File::write(unsigned long long, void*, int*)+0x4a>
c000b5f6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5fc:	85 c0                	test   eax,eax
c000b5fe:	74 20                	je     c000b620 <File::write(unsigned long long, void*, int*)+0x4a>
c000b600:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b604:	74 21                	je     c000b627 <File::write(unsigned long long, void*, int*)+0x51>
c000b606:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b608:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b60c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b612:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b616:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b61a:	5b                   	pop    ebx
c000b61b:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b61e:	ff e0                	jmp    eax
c000b620:	b8 0b 00 00 00       	mov    eax,0xb
c000b625:	eb 05                	jmp    c000b62c <File::write(unsigned long long, void*, int*)+0x56>
c000b627:	b8 05 00 00 00       	mov    eax,0x5
c000b62c:	5b                   	pop    ebx
c000b62d:	c3                   	ret    

c000b62e <Directory::read(unsigned long long, void*, int*)>:
c000b62e:	53                   	push   ebx
c000b62f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b633:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b637:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b63e:	83 f8 19             	cmp    eax,0x19
c000b641:	77 35                	ja     c000b678 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b643:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b64a:	85 c0                	test   eax,eax
c000b64c:	74 2a                	je     c000b678 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b64e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b654:	85 c0                	test   eax,eax
c000b656:	74 20                	je     c000b678 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b658:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b65c:	74 21                	je     c000b67f <Directory::read(unsigned long long, void*, int*)+0x51>
c000b65e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b660:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b664:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b66a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b66e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b672:	5b                   	pop    ebx
c000b673:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b676:	ff e0                	jmp    eax
c000b678:	b8 0b 00 00 00       	mov    eax,0xb
c000b67d:	eb 05                	jmp    c000b684 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b67f:	b8 05 00 00 00       	mov    eax,0x5
c000b684:	5b                   	pop    ebx
c000b685:	c3                   	ret    

c000b686 <Directory::write(unsigned long long, void*, int*)>:
c000b686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b68a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b691:	b8 0b 00 00 00       	mov    eax,0xb
c000b696:	83 fa 19             	cmp    edx,0x19
c000b699:	77 18                	ja     c000b6b3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b69b:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b6a2:	85 d2                	test   edx,edx
c000b6a4:	74 0d                	je     c000b6b3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6a6:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b6ad:	19 c0                	sbb    eax,eax
c000b6af:	83 e0 0a             	and    eax,0xa
c000b6b2:	40                   	inc    eax
c000b6b3:	c3                   	ret    

c000b6b4 <File::isAtty()>:
c000b6b4:	31 c0                	xor    eax,eax
c000b6b6:	c3                   	ret    
c000b6b7:	90                   	nop

c000b6b8 <Directory::isAtty()>:
c000b6b8:	31 c0                	xor    eax,eax
c000b6ba:	c3                   	ret    
c000b6bb:	90                   	nop

c000b6bc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b6bc:	b8 0a 00 00 00       	mov    eax,0xa
c000b6c1:	c3                   	ret    

c000b6c2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b6c2:	b8 0a 00 00 00       	mov    eax,0xa
c000b6c7:	c3                   	ret    

c000b6c8 <Filesystem::allocateSwapfile(char const*, int)>:
c000b6c8:	31 c0                	xor    eax,eax
c000b6ca:	31 d2                	xor    edx,edx
c000b6cc:	c3                   	ret    
c000b6cd:	90                   	nop

c000b6ce <File::~File()>:
c000b6ce:	83 ec 0c             	sub    esp,0xc
c000b6d1:	ba 64 19 02 c0       	mov    edx,0xc0021964
c000b6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6da:	89 10                	mov    DWORD PTR [eax],edx
c000b6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e0:	83 ec 0c             	sub    esp,0xc
c000b6e3:	50                   	push   eax
c000b6e4:	e8 bb dc ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b6e9:	83 c4 10             	add    esp,0x10
c000b6ec:	90                   	nop
c000b6ed:	83 c4 0c             	add    esp,0xc
c000b6f0:	c3                   	ret    
c000b6f1:	90                   	nop

c000b6f2 <File::~File()>:
c000b6f2:	83 ec 0c             	sub    esp,0xc
c000b6f5:	83 ec 0c             	sub    esp,0xc
c000b6f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fc:	e8 cd ff ff ff       	call   c000b6ce <File::~File()>
c000b701:	83 c4 10             	add    esp,0x10
c000b704:	83 ec 08             	sub    esp,0x8
c000b707:	68 14 01 00 00       	push   0x114
c000b70c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b710:	e8 03 f1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b715:	83 c4 10             	add    esp,0x10
c000b718:	83 c4 0c             	add    esp,0xc
c000b71b:	c3                   	ret    

c000b71c <Directory::~Directory()>:
c000b71c:	83 ec 0c             	sub    esp,0xc
c000b71f:	ba 80 19 02 c0       	mov    edx,0xc0021980
c000b724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b728:	89 10                	mov    DWORD PTR [eax],edx
c000b72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b72e:	83 ec 0c             	sub    esp,0xc
c000b731:	50                   	push   eax
c000b732:	e8 6d dc ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b737:	83 c4 10             	add    esp,0x10
c000b73a:	90                   	nop
c000b73b:	83 c4 0c             	add    esp,0xc
c000b73e:	c3                   	ret    
c000b73f:	90                   	nop

c000b740 <Directory::~Directory()>:
c000b740:	83 ec 0c             	sub    esp,0xc
c000b743:	83 ec 0c             	sub    esp,0xc
c000b746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b74a:	e8 cd ff ff ff       	call   c000b71c <Directory::~Directory()>
c000b74f:	83 c4 10             	add    esp,0x10
c000b752:	83 ec 08             	sub    esp,0x8
c000b755:	68 14 01 00 00       	push   0x114
c000b75a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b75e:	e8 b5 f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b763:	83 c4 10             	add    esp,0x10
c000b766:	83 c4 0c             	add    esp,0xc
c000b769:	c3                   	ret    

c000b76a <Filesystem::Filesystem()>:
c000b76a:	ba f8 18 02 c0       	mov    edx,0xc00218f8
c000b76f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b773:	89 10                	mov    DWORD PTR [eax],edx
c000b775:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b77b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b77f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b786:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b78b:	90                   	nop
c000b78c:	c3                   	ret    
c000b78d:	90                   	nop

c000b78e <Filesystem::~Filesystem()>:
c000b78e:	ba f8 18 02 c0       	mov    edx,0xc00218f8
c000b793:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b797:	89 10                	mov    DWORD PTR [eax],edx
c000b799:	90                   	nop
c000b79a:	c3                   	ret    
c000b79b:	90                   	nop

c000b79c <Filesystem::~Filesystem()>:
c000b79c:	83 ec 0c             	sub    esp,0xc
c000b79f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7a3:	e8 e6 ff ff ff       	call   c000b78e <Filesystem::~Filesystem()>
c000b7a8:	83 c4 04             	add    esp,0x4
c000b7ab:	83 ec 08             	sub    esp,0x8
c000b7ae:	6a 08                	push   0x8
c000b7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b4:	e8 5f f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b7b9:	83 c4 10             	add    esp,0x10
c000b7bc:	83 c4 0c             	add    esp,0xc
c000b7bf:	c3                   	ret    

c000b7c0 <Fs::getcwd(Process*, char*, int)>:
c000b7c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b7c4:	31 c0                	xor    eax,eax
c000b7c6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b7c9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b7cd:	7d 15                	jge    c000b7e4 <Fs::getcwd(Process*, char*, int)+0x24>
c000b7cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7d3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b7da:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b7dd:	84 c9                	test   cl,cl
c000b7df:	74 06                	je     c000b7e7 <Fs::getcwd(Process*, char*, int)+0x27>
c000b7e1:	40                   	inc    eax
c000b7e2:	eb e2                	jmp    c000b7c6 <Fs::getcwd(Process*, char*, int)+0x6>
c000b7e4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b7e7:	31 c0                	xor    eax,eax
c000b7e9:	c3                   	ret    

c000b7ea <Fs::initVFS()>:
c000b7ea:	83 ec 18             	sub    esp,0x18
c000b7ed:	6a 08                	push   0x8
c000b7ef:	e8 c2 c2 ff ff       	call   c0007ab6 <malloc>
c000b7f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7f7:	e8 f0 e3 00 00       	call   c0019bec <FAT::FAT()>
c000b7fc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b803:	e8 ae c2 ff ff       	call   c0007ab6 <malloc>
c000b808:	89 04 24             	mov    DWORD PTR [esp],eax
c000b80b:	e8 08 f3 00 00       	call   c001ab18 <ISO9660::ISO9660()>
c000b810:	83 c4 1c             	add    esp,0x1c
c000b813:	c3                   	ret    

c000b814 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b814:	55                   	push   ebp
c000b815:	57                   	push   edi
c000b816:	56                   	push   esi
c000b817:	53                   	push   ebx
c000b818:	81 ec 10 04 00 00    	sub    esp,0x410
c000b81e:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b825:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b82c:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b834:	68 00 04 00 00       	push   0x400
c000b839:	6a 00                	push   0x0
c000b83b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b83f:	57                   	push   edi
c000b840:	e8 ab 4c ff ff       	call   c00004f0 <memset>
c000b845:	83 c4 10             	add    esp,0x10
c000b848:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b84c:	75 0b                	jne    c000b859 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b84e:	50                   	push   eax
c000b84f:	50                   	push   eax
c000b850:	55                   	push   ebp
c000b851:	57                   	push   edi
c000b852:	e8 e9 4d ff ff       	call   c0000640 <strcpy>
c000b857:	eb 51                	jmp    c000b8aa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b859:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b85d:	83 f8 5c             	cmp    eax,0x5c
c000b860:	74 05                	je     c000b867 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b862:	83 f8 2f             	cmp    eax,0x2f
c000b865:	75 1e                	jne    c000b885 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b867:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b86e:	8a 00                	mov    al,BYTE PTR [eax]
c000b870:	3c 60                	cmp    al,0x60
c000b872:	7e 03                	jle    c000b877 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b874:	83 e8 20             	sub    eax,0x20
c000b877:	88 04 24             	mov    BYTE PTR [esp],al
c000b87a:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b881:	50                   	push   eax
c000b882:	50                   	push   eax
c000b883:	eb 1e                	jmp    c000b8a3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b885:	50                   	push   eax
c000b886:	50                   	push   eax
c000b887:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b88e:	57                   	push   edi
c000b88f:	e8 ac 4d ff ff       	call   c0000640 <strcpy>
c000b894:	58                   	pop    eax
c000b895:	5a                   	pop    edx
c000b896:	68 a3 28 02 c0       	push   0xc00228a3
c000b89b:	57                   	push   edi
c000b89c:	e8 9f 4f ff ff       	call   c0000840 <strcat>
c000b8a1:	59                   	pop    ecx
c000b8a2:	58                   	pop    eax
c000b8a3:	55                   	push   ebp
c000b8a4:	57                   	push   edi
c000b8a5:	e8 96 4f ff ff       	call   c0000840 <strcat>
c000b8aa:	83 c4 10             	add    esp,0x10
c000b8ad:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b8b0:	3c 60                	cmp    al,0x60
c000b8b2:	7e 03                	jle    c000b8b7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b8b4:	83 e8 20             	sub    eax,0x20
c000b8b7:	88 04 24             	mov    BYTE PTR [esp],al
c000b8ba:	88 06                	mov    BYTE PTR [esi],al
c000b8bc:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b8c3:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b8c9:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b8cd:	bf 03 00 00 00       	mov    edi,0x3
c000b8d2:	b8 03 00 00 00       	mov    eax,0x3
c000b8d7:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b8db:	89 e9                	mov    ecx,ebp
c000b8dd:	85 ed                	test   ebp,ebp
c000b8df:	0f 84 97 00 00 00    	je     c000b97c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b8e5:	8d 57 01             	lea    edx,[edi+0x1]
c000b8e8:	83 fd 5c             	cmp    ebp,0x5c
c000b8eb:	74 05                	je     c000b8f2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b8ed:	83 fd 2f             	cmp    ebp,0x2f
c000b8f0:	75 12                	jne    c000b904 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b8f2:	89 c5                	mov    ebp,eax
c000b8f4:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b8f9:	74 09                	je     c000b904 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b8fb:	40                   	inc    eax
c000b8fc:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b900:	89 d7                	mov    edi,edx
c000b902:	eb d3                	jmp    c000b8d7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b904:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b909:	0f be e9             	movsx  ebp,cl
c000b90c:	75 5e                	jne    c000b96c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b90e:	83 fd 2e             	cmp    ebp,0x2e
c000b911:	75 59                	jne    c000b96c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b913:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b917:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b91c:	74 18                	je     c000b936 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b91e:	83 fd 2e             	cmp    ebp,0x2e
c000b921:	74 53                	je     c000b976 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b923:	89 fa                	mov    edx,edi
c000b925:	42                   	inc    edx
c000b926:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b92a:	83 f9 2f             	cmp    ecx,0x2f
c000b92d:	74 f6                	je     c000b925 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b92f:	83 f9 5c             	cmp    ecx,0x5c
c000b932:	74 f1                	je     c000b925 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b934:	eb ca                	jmp    c000b900 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b936:	83 fd 2e             	cmp    ebp,0x2e
c000b939:	74 3b                	je     c000b976 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b93b:	83 f8 03             	cmp    eax,0x3
c000b93e:	74 c0                	je     c000b900 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b940:	42                   	inc    edx
c000b941:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b945:	83 f9 5c             	cmp    ecx,0x5c
c000b948:	74 f6                	je     c000b940 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b94a:	83 f9 2f             	cmp    ecx,0x2f
c000b94d:	74 f1                	je     c000b940 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b94f:	48                   	dec    eax
c000b950:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b954:	75 06                	jne    c000b95c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b956:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b95a:	eb f3                	jmp    c000b94f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b95c:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b960:	74 07                	je     c000b969 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b962:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b966:	48                   	dec    eax
c000b967:	eb f3                	jmp    c000b95c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b969:	40                   	inc    eax
c000b96a:	eb 94                	jmp    c000b900 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b96c:	83 fd 5c             	cmp    ebp,0x5c
c000b96f:	74 8f                	je     c000b900 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b971:	83 fd 2f             	cmp    ebp,0x2f
c000b974:	74 8a                	je     c000b900 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b976:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b979:	40                   	inc    eax
c000b97a:	eb 84                	jmp    c000b900 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b97c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b980:	83 ec 0c             	sub    esp,0xc
c000b983:	56                   	push   esi
c000b984:	e8 e7 4b ff ff       	call   c0000570 <strlen>
c000b989:	83 c4 10             	add    esp,0x10
c000b98c:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b991:	74 17                	je     c000b9aa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b993:	83 ec 0c             	sub    esp,0xc
c000b996:	56                   	push   esi
c000b997:	e8 d4 4b ff ff       	call   c0000570 <strlen>
c000b99c:	83 c4 10             	add    esp,0x10
c000b99f:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b9a4:	74 04                	je     c000b9aa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b9a6:	31 ff                	xor    edi,edi
c000b9a8:	eb 5c                	jmp    c000ba06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000b9aa:	83 ec 0c             	sub    esp,0xc
c000b9ad:	56                   	push   esi
c000b9ae:	e8 bd 4b ff ff       	call   c0000570 <strlen>
c000b9b3:	83 c4 10             	add    esp,0x10
c000b9b6:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000b9bb:	74 e9                	je     c000b9a6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000b9bd:	83 ec 0c             	sub    esp,0xc
c000b9c0:	56                   	push   esi
c000b9c1:	e8 aa 4b ff ff       	call   c0000570 <strlen>
c000b9c6:	83 c4 10             	add    esp,0x10
c000b9c9:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b9ce:	eb b0                	jmp    c000b980 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000b9d0:	52                   	push   edx
c000b9d1:	52                   	push   edx
c000b9d2:	56                   	push   esi
c000b9d3:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000b9d7:	55                   	push   ebp
c000b9d8:	e8 63 4c ff ff       	call   c0000640 <strcpy>
c000b9dd:	59                   	pop    ecx
c000b9de:	58                   	pop    eax
c000b9df:	56                   	push   esi
c000b9e0:	55                   	push   ebp
c000b9e1:	e8 45 f7 ff ff       	call   c000b12b <KeDereferenceSymlink(char const*, char*)>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	48                   	dec    eax
c000b9ea:	75 37                	jne    c000ba23 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000b9ec:	50                   	push   eax
c000b9ed:	56                   	push   esi
c000b9ee:	55                   	push   ebp
c000b9ef:	68 ad 18 02 c0       	push   0xc00218ad
c000b9f4:	e8 4c ef ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b9f9:	83 c4 10             	add    esp,0x10
c000b9fc:	8d 47 01             	lea    eax,[edi+0x1]
c000b9ff:	83 ff 14             	cmp    edi,0x14
c000ba02:	74 08                	je     c000ba0c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000ba04:	89 c7                	mov    edi,eax
c000ba06:	85 db                	test   ebx,ebx
c000ba08:	75 c6                	jne    c000b9d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000ba0a:	eb 17                	jmp    c000ba23 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000ba0c:	83 ec 0c             	sub    esp,0xc
c000ba0f:	bf 15 00 00 00       	mov    edi,0x15
c000ba14:	68 c8 18 02 c0       	push   0xc00218c8
c000ba19:	e8 c1 5b 00 00       	call   c00115df <KePanic(char const*)>
c000ba1e:	83 c4 10             	add    esp,0x10
c000ba21:	eb e3                	jmp    c000ba06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000ba23:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ba29:	5b                   	pop    ebx
c000ba2a:	5e                   	pop    esi
c000ba2b:	5f                   	pop    edi
c000ba2c:	5d                   	pop    ebp
c000ba2d:	c3                   	ret    

c000ba2e <File::File(char const*, Process*, bool)>:
c000ba2e:	83 ec 1c             	sub    esp,0x1c
c000ba31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba35:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba3d:	83 ec 08             	sub    esp,0x8
c000ba40:	6a 00                	push   0x0
c000ba42:	50                   	push   eax
c000ba43:	e8 76 d7 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000ba48:	83 c4 10             	add    esp,0x10
c000ba4b:	ba 64 19 02 c0       	mov    edx,0xc0021964
c000ba50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba54:	89 10                	mov    DWORD PTR [eax],edx
c000ba56:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ba5b:	85 c0                	test   eax,eax
c000ba5d:	74 0f                	je     c000ba6e <File::File(char const*, Process*, bool)+0x40>
c000ba5f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ba64:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000ba68:	74 04                	je     c000ba6e <File::File(char const*, Process*, bool)+0x40>
c000ba6a:	b0 01                	mov    al,0x1
c000ba6c:	eb 02                	jmp    c000ba70 <File::File(char const*, Process*, bool)+0x42>
c000ba6e:	b0 00                	mov    al,0x0
c000ba70:	0f b6 c0             	movzx  eax,al
c000ba73:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba77:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000ba7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ba81:	83 c2 0d             	add    edx,0xd
c000ba84:	50                   	push   eax
c000ba85:	51                   	push   ecx
c000ba86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba8a:	52                   	push   edx
c000ba8b:	e8 84 fd ff ff       	call   c000b814 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000ba90:	83 c4 10             	add    esp,0x10
c000ba93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba97:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ba9a:	83 e8 41             	sub    eax,0x41
c000ba9d:	88 c2                	mov    dl,al
c000ba9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baa3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000baa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baad:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000babb:	0f b6 c0             	movzx  eax,al
c000babe:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bac5:	85 c0                	test   eax,eax
c000bac7:	74 3e                	je     c000bb07 <File::File(char const*, Process*, bool)+0xd9>
c000bac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bacd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bad3:	0f b6 c0             	movzx  eax,al
c000bad6:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000badd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bae3:	85 c0                	test   eax,eax
c000bae5:	75 20                	jne    c000bb07 <File::File(char const*, Process*, bool)+0xd9>
c000bae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baeb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000baf1:	0f b6 c0             	movzx  eax,al
c000baf4:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bafb:	83 ec 0c             	sub    esp,0xc
c000bafe:	50                   	push   eax
c000baff:	e8 a2 21 00 00       	call   c000dca6 <LogicalDisk::mount()>
c000bb04:	83 c4 10             	add    esp,0x10
c000bb07:	90                   	nop
c000bb08:	83 c4 1c             	add    esp,0x1c
c000bb0b:	c3                   	ret    

c000bb0c <File::File(char const*, Process*)>:
c000bb0c:	83 ec 0c             	sub    esp,0xc
c000bb0f:	6a 01                	push   0x1
c000bb11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb1d:	e8 0c ff ff ff       	call   c000ba2e <File::File(char const*, Process*, bool)>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	90                   	nop
c000bb26:	83 c4 0c             	add    esp,0xc
c000bb29:	c3                   	ret    

c000bb2a <File::open(FileOpenMode)>:
c000bb2a:	53                   	push   ebx
c000bb2b:	b8 0b 00 00 00       	mov    eax,0xb
c000bb30:	83 ec 08             	sub    esp,0x8
c000bb33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb37:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb3e:	83 fa 19             	cmp    edx,0x19
c000bb41:	77 40                	ja     c000bb83 <File::open(FileOpenMode)+0x59>
c000bb43:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb4a:	85 d2                	test   edx,edx
c000bb4c:	74 35                	je     c000bb83 <File::open(FileOpenMode)+0x59>
c000bb4e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb54:	85 d2                	test   edx,edx
c000bb56:	74 2b                	je     c000bb83 <File::open(FileOpenMode)+0x59>
c000bb58:	b8 06 00 00 00       	mov    eax,0x6
c000bb5d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bb61:	75 20                	jne    c000bb83 <File::open(FileOpenMode)+0x59>
c000bb63:	8b 02                	mov    eax,DWORD PTR [edx]
c000bb65:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bb6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb6f:	51                   	push   ecx
c000bb70:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bb73:	51                   	push   ecx
c000bb74:	52                   	push   edx
c000bb75:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bb78:	83 c4 10             	add    esp,0x10
c000bb7b:	85 c0                	test   eax,eax
c000bb7d:	75 04                	jne    c000bb83 <File::open(FileOpenMode)+0x59>
c000bb7f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bb83:	83 c4 08             	add    esp,0x8
c000bb86:	5b                   	pop    ebx
c000bb87:	c3                   	ret    

c000bb88 <File::close()>:
c000bb88:	53                   	push   ebx
c000bb89:	b8 0b 00 00 00       	mov    eax,0xb
c000bb8e:	83 ec 08             	sub    esp,0x8
c000bb91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb95:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb9c:	83 f9 19             	cmp    ecx,0x19
c000bb9f:	77 41                	ja     c000bbe2 <File::close()+0x5a>
c000bba1:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bba8:	85 db                	test   ebx,ebx
c000bbaa:	74 36                	je     c000bbe2 <File::close()+0x5a>
c000bbac:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bbb3:	74 2d                	je     c000bbe2 <File::close()+0x5a>
c000bbb5:	b8 05 00 00 00       	mov    eax,0x5
c000bbba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbbe:	74 22                	je     c000bbe2 <File::close()+0x5a>
c000bbc0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bbc4:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bbcb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bbd1:	53                   	push   ebx
c000bbd2:	53                   	push   ebx
c000bbd3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bbd5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bbdb:	50                   	push   eax
c000bbdc:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bbdf:	83 c4 10             	add    esp,0x10
c000bbe2:	83 c4 08             	add    esp,0x8
c000bbe5:	5b                   	pop    ebx
c000bbe6:	c3                   	ret    
c000bbe7:	90                   	nop

c000bbe8 <File::seek(unsigned long long)>:
c000bbe8:	56                   	push   esi
c000bbe9:	53                   	push   ebx
c000bbea:	b8 0b 00 00 00       	mov    eax,0xb
c000bbef:	51                   	push   ecx
c000bbf0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bbf4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bbf8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bbff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc03:	83 fa 19             	cmp    edx,0x19
c000bc06:	77 31                	ja     c000bc39 <File::seek(unsigned long long)+0x51>
c000bc08:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc0f:	85 d2                	test   edx,edx
c000bc11:	74 26                	je     c000bc39 <File::seek(unsigned long long)+0x51>
c000bc13:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc19:	85 d2                	test   edx,edx
c000bc1b:	74 1c                	je     c000bc39 <File::seek(unsigned long long)+0x51>
c000bc1d:	b8 05 00 00 00       	mov    eax,0x5
c000bc22:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc26:	74 11                	je     c000bc39 <File::seek(unsigned long long)+0x51>
c000bc28:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc2a:	53                   	push   ebx
c000bc2b:	51                   	push   ecx
c000bc2c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc32:	52                   	push   edx
c000bc33:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	5a                   	pop    edx
c000bc3a:	5b                   	pop    ebx
c000bc3b:	5e                   	pop    esi
c000bc3c:	c3                   	ret    
c000bc3d:	90                   	nop

c000bc3e <File::truncate(unsigned long long)>:
c000bc3e:	56                   	push   esi
c000bc3f:	53                   	push   ebx
c000bc40:	b8 0b 00 00 00       	mov    eax,0xb
c000bc45:	51                   	push   ecx
c000bc46:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc4a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc4e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc55:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc59:	83 fa 19             	cmp    edx,0x19
c000bc5c:	77 31                	ja     c000bc8f <File::truncate(unsigned long long)+0x51>
c000bc5e:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc65:	85 d2                	test   edx,edx
c000bc67:	74 26                	je     c000bc8f <File::truncate(unsigned long long)+0x51>
c000bc69:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc6f:	85 d2                	test   edx,edx
c000bc71:	74 1c                	je     c000bc8f <File::truncate(unsigned long long)+0x51>
c000bc73:	b8 05 00 00 00       	mov    eax,0x5
c000bc78:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc7c:	74 11                	je     c000bc8f <File::truncate(unsigned long long)+0x51>
c000bc7e:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc80:	53                   	push   ebx
c000bc81:	51                   	push   ecx
c000bc82:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc88:	52                   	push   edx
c000bc89:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bc8c:	83 c4 10             	add    esp,0x10
c000bc8f:	5a                   	pop    edx
c000bc90:	5b                   	pop    ebx
c000bc91:	5e                   	pop    esi
c000bc92:	c3                   	ret    
c000bc93:	90                   	nop

c000bc94 <File::tell(unsigned long long*)>:
c000bc94:	83 ec 0c             	sub    esp,0xc
c000bc97:	b8 0b 00 00 00       	mov    eax,0xb
c000bc9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bca0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bca7:	83 fa 19             	cmp    edx,0x19
c000bcaa:	77 34                	ja     c000bce0 <File::tell(unsigned long long*)+0x4c>
c000bcac:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcb3:	85 d2                	test   edx,edx
c000bcb5:	74 29                	je     c000bce0 <File::tell(unsigned long long*)+0x4c>
c000bcb7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcbd:	85 d2                	test   edx,edx
c000bcbf:	74 1f                	je     c000bce0 <File::tell(unsigned long long*)+0x4c>
c000bcc1:	b8 05 00 00 00       	mov    eax,0x5
c000bcc6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bcca:	74 14                	je     c000bce0 <File::tell(unsigned long long*)+0x4c>
c000bccc:	50                   	push   eax
c000bccd:	8b 02                	mov    eax,DWORD PTR [edx]
c000bccf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bcd3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bcd9:	52                   	push   edx
c000bcda:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bcdd:	83 c4 10             	add    esp,0x10
c000bce0:	83 c4 0c             	add    esp,0xc
c000bce3:	c3                   	ret    

c000bce4 <File::rewind()>:
c000bce4:	83 ec 10             	sub    esp,0x10
c000bce7:	6a 00                	push   0x0
c000bce9:	6a 00                	push   0x0
c000bceb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcef:	e8 f4 fe ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c000bcf4:	83 c4 1c             	add    esp,0x1c
c000bcf7:	c3                   	ret    

c000bcf8 <File::unlink()>:
c000bcf8:	83 ec 0c             	sub    esp,0xc
c000bcfb:	b8 0b 00 00 00       	mov    eax,0xb
c000bd00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd04:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd0b:	83 f9 19             	cmp    ecx,0x19
c000bd0e:	77 2f                	ja     c000bd3f <File::unlink()+0x47>
c000bd10:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd17:	85 c9                	test   ecx,ecx
c000bd19:	74 24                	je     c000bd3f <File::unlink()+0x47>
c000bd1b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd21:	85 c9                	test   ecx,ecx
c000bd23:	74 1a                	je     c000bd3f <File::unlink()+0x47>
c000bd25:	b8 06 00 00 00       	mov    eax,0x6
c000bd2a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd2e:	75 0f                	jne    c000bd3f <File::unlink()+0x47>
c000bd30:	83 c2 0d             	add    edx,0xd
c000bd33:	50                   	push   eax
c000bd34:	50                   	push   eax
c000bd35:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd37:	52                   	push   edx
c000bd38:	51                   	push   ecx
c000bd39:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd3c:	83 c4 10             	add    esp,0x10
c000bd3f:	83 c4 0c             	add    esp,0xc
c000bd42:	c3                   	ret    
c000bd43:	90                   	nop

c000bd44 <File::rename(char const*)>:
c000bd44:	83 ec 0c             	sub    esp,0xc
c000bd47:	b8 0b 00 00 00       	mov    eax,0xb
c000bd4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd50:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd57:	83 f9 19             	cmp    ecx,0x19
c000bd5a:	77 32                	ja     c000bd8e <File::rename(char const*)+0x4a>
c000bd5c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd63:	85 c9                	test   ecx,ecx
c000bd65:	74 27                	je     c000bd8e <File::rename(char const*)+0x4a>
c000bd67:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd6d:	85 c9                	test   ecx,ecx
c000bd6f:	74 1d                	je     c000bd8e <File::rename(char const*)+0x4a>
c000bd71:	b8 06 00 00 00       	mov    eax,0x6
c000bd76:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd7a:	75 12                	jne    c000bd8e <File::rename(char const*)+0x4a>
c000bd7c:	83 c2 0d             	add    edx,0xd
c000bd7f:	50                   	push   eax
c000bd80:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd86:	52                   	push   edx
c000bd87:	51                   	push   ecx
c000bd88:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bd8b:	83 c4 10             	add    esp,0x10
c000bd8e:	83 c4 0c             	add    esp,0xc
c000bd91:	c3                   	ret    

c000bd92 <File::chfatattr(unsigned char, unsigned char)>:
c000bd92:	57                   	push   edi
c000bd93:	b8 0b 00 00 00       	mov    eax,0xb
c000bd98:	56                   	push   esi
c000bd99:	53                   	push   ebx
c000bd9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd9e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bda2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bda9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdad:	83 f9 19             	cmp    ecx,0x19
c000bdb0:	77 37                	ja     c000bde9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdb2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdb9:	85 c9                	test   ecx,ecx
c000bdbb:	74 2c                	je     c000bde9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdbd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdc3:	85 c9                	test   ecx,ecx
c000bdc5:	74 22                	je     c000bde9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdc7:	b8 06 00 00 00       	mov    eax,0x6
c000bdcc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdd0:	75 17                	jne    c000bde9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdd2:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bdd4:	89 f0                	mov    eax,esi
c000bdd6:	83 c2 0d             	add    edx,0xd
c000bdd9:	0f b6 f0             	movzx  esi,al
c000bddc:	0f b6 db             	movzx  ebx,bl
c000bddf:	56                   	push   esi
c000bde0:	53                   	push   ebx
c000bde1:	52                   	push   edx
c000bde2:	51                   	push   ecx
c000bde3:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bde6:	83 c4 10             	add    esp,0x10
c000bde9:	5b                   	pop    ebx
c000bdea:	5e                   	pop    esi
c000bdeb:	5f                   	pop    edi
c000bdec:	c3                   	ret    
c000bded:	90                   	nop

c000bdee <File::exists()>:
c000bdee:	83 ec 0c             	sub    esp,0xc
c000bdf1:	31 c0                	xor    eax,eax
c000bdf3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdf7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdfe:	83 f9 19             	cmp    ecx,0x19
c000be01:	77 24                	ja     c000be27 <File::exists()+0x39>
c000be03:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be0a:	85 c9                	test   ecx,ecx
c000be0c:	74 19                	je     c000be27 <File::exists()+0x39>
c000be0e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be14:	85 c9                	test   ecx,ecx
c000be16:	74 0f                	je     c000be27 <File::exists()+0x39>
c000be18:	83 c2 0d             	add    edx,0xd
c000be1b:	50                   	push   eax
c000be1c:	50                   	push   eax
c000be1d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be1f:	52                   	push   edx
c000be20:	51                   	push   ecx
c000be21:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be24:	83 c4 10             	add    esp,0x10
c000be27:	83 c4 0c             	add    esp,0xc
c000be2a:	c3                   	ret    
c000be2b:	90                   	nop

c000be2c <File::stat(unsigned long long*, bool*)>:
c000be2c:	56                   	push   esi
c000be2d:	53                   	push   ebx
c000be2e:	50                   	push   eax
c000be2f:	b8 0b 00 00 00       	mov    eax,0xb
c000be34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be38:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be3c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be47:	83 f9 19             	cmp    ecx,0x19
c000be4a:	77 3d                	ja     c000be89 <File::stat(unsigned long long*, bool*)+0x5d>
c000be4c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be53:	85 c9                	test   ecx,ecx
c000be55:	74 32                	je     c000be89 <File::stat(unsigned long long*, bool*)+0x5d>
c000be57:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be5d:	85 c9                	test   ecx,ecx
c000be5f:	74 28                	je     c000be89 <File::stat(unsigned long long*, bool*)+0x5d>
c000be61:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be63:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be67:	74 13                	je     c000be7c <File::stat(unsigned long long*, bool*)+0x50>
c000be69:	83 ec 04             	sub    esp,0x4
c000be6c:	56                   	push   esi
c000be6d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000be73:	51                   	push   ecx
c000be74:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000be77:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000be7a:	eb 0a                	jmp    c000be86 <File::stat(unsigned long long*, bool*)+0x5a>
c000be7c:	53                   	push   ebx
c000be7d:	83 c2 0d             	add    edx,0xd
c000be80:	56                   	push   esi
c000be81:	52                   	push   edx
c000be82:	51                   	push   ecx
c000be83:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	5a                   	pop    edx
c000be8a:	5b                   	pop    ebx
c000be8b:	5e                   	pop    esi
c000be8c:	c3                   	ret    

c000be8d <Fs::setcwd(Process*, char*)>:
c000be8d:	55                   	push   ebp
c000be8e:	57                   	push   edi
c000be8f:	56                   	push   esi
c000be90:	53                   	push   ebx
c000be91:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000be97:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000be9e:	6a 00                	push   0x0
c000bea0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bea6:	57                   	push   edi
c000bea7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000beae:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000beb2:	56                   	push   esi
c000beb3:	e8 5c f9 ff ff       	call   c000b814 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000beb8:	89 34 24             	mov    DWORD PTR [esp],esi
c000bebb:	e8 b0 46 ff ff       	call   c0000570 <strlen>
c000bec0:	83 c4 10             	add    esp,0x10
c000bec3:	83 f8 02             	cmp    eax,0x2
c000bec6:	77 15                	ja     c000bedd <Fs::setcwd(Process*, char*)+0x50>
c000bec8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000becd:	83 eb 41             	sub    ebx,0x41
c000bed0:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bed7:	85 c0                	test   eax,eax
c000bed9:	75 1c                	jne    c000bef7 <Fs::setcwd(Process*, char*)+0x6a>
c000bedb:	eb 2f                	jmp    c000bf0c <Fs::setcwd(Process*, char*)+0x7f>
c000bedd:	83 ec 0c             	sub    esp,0xc
c000bee0:	56                   	push   esi
c000bee1:	e8 8a 46 ff ff       	call   c0000570 <strlen>
c000bee6:	83 c4 10             	add    esp,0x10
c000bee9:	83 f8 03             	cmp    eax,0x3
c000beec:	75 57                	jne    c000bf45 <Fs::setcwd(Process*, char*)+0xb8>
c000beee:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bef3:	75 50                	jne    c000bf45 <Fs::setcwd(Process*, char*)+0xb8>
c000bef5:	eb d1                	jmp    c000bec8 <Fs::setcwd(Process*, char*)+0x3b>
c000bef7:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000befe:	75 0c                	jne    c000bf0c <Fs::setcwd(Process*, char*)+0x7f>
c000bf00:	83 ec 0c             	sub    esp,0xc
c000bf03:	50                   	push   eax
c000bf04:	e8 9d 1d 00 00       	call   c000dca6 <LogicalDisk::mount()>
c000bf09:	83 c4 10             	add    esp,0x10
c000bf0c:	b8 03 00 00 00       	mov    eax,0x3
c000bf11:	83 fb 19             	cmp    ebx,0x19
c000bf14:	0f 87 c6 00 00 00    	ja     c000bfe0 <Fs::setcwd(Process*, char*)+0x153>
c000bf1a:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf21:	b8 05 00 00 00       	mov    eax,0x5
c000bf26:	85 d2                	test   edx,edx
c000bf28:	0f 84 b2 00 00 00    	je     c000bfe0 <Fs::setcwd(Process*, char*)+0x153>
c000bf2e:	b8 06 00 00 00       	mov    eax,0x6
c000bf33:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf3a:	0f 85 92 00 00 00    	jne    c000bfd2 <Fs::setcwd(Process*, char*)+0x145>
c000bf40:	e9 9b 00 00 00       	jmp    c000bfe0 <Fs::setcwd(Process*, char*)+0x153>
c000bf45:	83 ec 0c             	sub    esp,0xc
c000bf48:	68 14 01 00 00       	push   0x114
c000bf4d:	e8 64 bb ff ff       	call   c0007ab6 <malloc>
c000bf52:	83 c4 0c             	add    esp,0xc
c000bf55:	89 c3                	mov    ebx,eax
c000bf57:	55                   	push   ebp
c000bf58:	56                   	push   esi
c000bf59:	50                   	push   eax
c000bf5a:	e8 ad fb ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c000bf5f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bf64:	83 c4 0c             	add    esp,0xc
c000bf67:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bf6b:	50                   	push   eax
c000bf6c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bf70:	50                   	push   eax
c000bf71:	53                   	push   ebx
c000bf72:	e8 b5 fe ff ff       	call   c000be2c <File::stat(unsigned long long*, bool*)>
c000bf77:	83 c4 10             	add    esp,0x10
c000bf7a:	83 f8 02             	cmp    eax,0x2
c000bf7d:	74 27                	je     c000bfa6 <Fs::setcwd(Process*, char*)+0x119>
c000bf7f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf84:	75 1c                	jne    c000bfa2 <Fs::setcwd(Process*, char*)+0x115>
c000bf86:	b8 02 00 00 00       	mov    eax,0x2
c000bf8b:	85 db                	test   ebx,ebx
c000bf8d:	74 51                	je     c000bfe0 <Fs::setcwd(Process*, char*)+0x153>
c000bf8f:	83 ec 0c             	sub    esp,0xc
c000bf92:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf94:	53                   	push   ebx
c000bf95:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bf98:	83 c4 10             	add    esp,0x10
c000bf9b:	b8 02 00 00 00       	mov    eax,0x2
c000bfa0:	eb 3e                	jmp    c000bfe0 <Fs::setcwd(Process*, char*)+0x153>
c000bfa2:	85 c0                	test   eax,eax
c000bfa4:	74 1c                	je     c000bfc2 <Fs::setcwd(Process*, char*)+0x135>
c000bfa6:	b8 01 00 00 00       	mov    eax,0x1
c000bfab:	85 db                	test   ebx,ebx
c000bfad:	74 31                	je     c000bfe0 <Fs::setcwd(Process*, char*)+0x153>
c000bfaf:	83 ec 0c             	sub    esp,0xc
c000bfb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfb4:	53                   	push   ebx
c000bfb5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfb8:	83 c4 10             	add    esp,0x10
c000bfbb:	b8 01 00 00 00       	mov    eax,0x1
c000bfc0:	eb 1e                	jmp    c000bfe0 <Fs::setcwd(Process*, char*)+0x153>
c000bfc2:	85 db                	test   ebx,ebx
c000bfc4:	74 0c                	je     c000bfd2 <Fs::setcwd(Process*, char*)+0x145>
c000bfc6:	83 ec 0c             	sub    esp,0xc
c000bfc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfcb:	53                   	push   ebx
c000bfcc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfcf:	83 c4 10             	add    esp,0x10
c000bfd2:	50                   	push   eax
c000bfd3:	50                   	push   eax
c000bfd4:	56                   	push   esi
c000bfd5:	57                   	push   edi
c000bfd6:	e8 65 46 ff ff       	call   c0000640 <strcpy>
c000bfdb:	83 c4 10             	add    esp,0x10
c000bfde:	31 c0                	xor    eax,eax
c000bfe0:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bfe6:	5b                   	pop    ebx
c000bfe7:	5e                   	pop    esi
c000bfe8:	5f                   	pop    edi
c000bfe9:	5d                   	pop    ebp
c000bfea:	c3                   	ret    
c000bfeb:	90                   	nop

c000bfec <Directory::Directory(char const*, Process*)>:
c000bfec:	83 ec 0c             	sub    esp,0xc
c000bfef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bff3:	83 ec 08             	sub    esp,0x8
c000bff6:	6a 00                	push   0x0
c000bff8:	50                   	push   eax
c000bff9:	e8 c0 d1 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bffe:	83 c4 10             	add    esp,0x10
c000c001:	ba 80 19 02 c0       	mov    edx,0xc0021980
c000c006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c00a:	89 10                	mov    DWORD PTR [eax],edx
c000c00c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c011:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c015:	0f 95 c0             	setne  al
c000c018:	0f b6 c0             	movzx  eax,al
c000c01b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c01f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c025:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c029:	83 c2 0d             	add    edx,0xd
c000c02c:	50                   	push   eax
c000c02d:	51                   	push   ecx
c000c02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c032:	52                   	push   edx
c000c033:	e8 dc f7 ff ff       	call   c000b814 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c038:	83 c4 10             	add    esp,0x10
c000c03b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c03f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c042:	83 e8 41             	sub    eax,0x41
c000c045:	88 c2                	mov    dl,al
c000c047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c04b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c055:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c05d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c063:	0f b6 c0             	movzx  eax,al
c000c066:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c06d:	85 c0                	test   eax,eax
c000c06f:	74 3e                	je     c000c0af <Directory::Directory(char const*, Process*)+0xc3>
c000c071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c075:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c07b:	0f b6 c0             	movzx  eax,al
c000c07e:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c085:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c08b:	85 c0                	test   eax,eax
c000c08d:	75 20                	jne    c000c0af <Directory::Directory(char const*, Process*)+0xc3>
c000c08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c093:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c099:	0f b6 c0             	movzx  eax,al
c000c09c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0a3:	83 ec 0c             	sub    esp,0xc
c000c0a6:	50                   	push   eax
c000c0a7:	e8 fa 1b 00 00       	call   c000dca6 <LogicalDisk::mount()>
c000c0ac:	83 c4 10             	add    esp,0x10
c000c0af:	90                   	nop
c000c0b0:	83 c4 0c             	add    esp,0xc
c000c0b3:	c3                   	ret    

c000c0b4 <Directory::open()>:
c000c0b4:	53                   	push   ebx
c000c0b5:	b8 0b 00 00 00       	mov    eax,0xb
c000c0ba:	83 ec 08             	sub    esp,0x8
c000c0bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0c1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c0c8:	83 fa 19             	cmp    edx,0x19
c000c0cb:	77 3d                	ja     c000c10a <Directory::open()+0x56>
c000c0cd:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c0d4:	85 d2                	test   edx,edx
c000c0d6:	74 32                	je     c000c10a <Directory::open()+0x56>
c000c0d8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c0de:	85 d2                	test   edx,edx
c000c0e0:	74 28                	je     c000c10a <Directory::open()+0x56>
c000c0e2:	b8 06 00 00 00       	mov    eax,0x6
c000c0e7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c0eb:	75 1d                	jne    c000c10a <Directory::open()+0x56>
c000c0ed:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c0f3:	50                   	push   eax
c000c0f4:	8b 02                	mov    eax,DWORD PTR [edx]
c000c0f6:	51                   	push   ecx
c000c0f7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c0fa:	51                   	push   ecx
c000c0fb:	52                   	push   edx
c000c0fc:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c0ff:	83 c4 10             	add    esp,0x10
c000c102:	85 c0                	test   eax,eax
c000c104:	75 04                	jne    c000c10a <Directory::open()+0x56>
c000c106:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c10a:	83 c4 08             	add    esp,0x8
c000c10d:	5b                   	pop    ebx
c000c10e:	c3                   	ret    
c000c10f:	90                   	nop

c000c110 <Directory::close()>:
c000c110:	53                   	push   ebx
c000c111:	b8 0b 00 00 00       	mov    eax,0xb
c000c116:	83 ec 08             	sub    esp,0x8
c000c119:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c11d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c124:	83 f9 19             	cmp    ecx,0x19
c000c127:	77 41                	ja     c000c16a <Directory::close()+0x5a>
c000c129:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c130:	85 db                	test   ebx,ebx
c000c132:	74 36                	je     c000c16a <Directory::close()+0x5a>
c000c134:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c13b:	74 2d                	je     c000c16a <Directory::close()+0x5a>
c000c13d:	b8 05 00 00 00       	mov    eax,0x5
c000c142:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c146:	74 22                	je     c000c16a <Directory::close()+0x5a>
c000c148:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c14c:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c153:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c159:	53                   	push   ebx
c000c15a:	53                   	push   ebx
c000c15b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c15d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c163:	50                   	push   eax
c000c164:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c167:	83 c4 10             	add    esp,0x10
c000c16a:	83 c4 08             	add    esp,0x8
c000c16d:	5b                   	pop    ebx
c000c16e:	c3                   	ret    
c000c16f:	90                   	nop

c000c170 <Directory::unlink()>:
c000c170:	83 ec 0c             	sub    esp,0xc
c000c173:	b8 0b 00 00 00       	mov    eax,0xb
c000c178:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c17c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c183:	83 f9 19             	cmp    ecx,0x19
c000c186:	77 2f                	ja     c000c1b7 <Directory::unlink()+0x47>
c000c188:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c18f:	85 c9                	test   ecx,ecx
c000c191:	74 24                	je     c000c1b7 <Directory::unlink()+0x47>
c000c193:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c199:	85 c9                	test   ecx,ecx
c000c19b:	74 1a                	je     c000c1b7 <Directory::unlink()+0x47>
c000c19d:	b8 06 00 00 00       	mov    eax,0x6
c000c1a2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1a6:	75 0f                	jne    c000c1b7 <Directory::unlink()+0x47>
c000c1a8:	83 c2 0d             	add    edx,0xd
c000c1ab:	50                   	push   eax
c000c1ac:	50                   	push   eax
c000c1ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1af:	52                   	push   edx
c000c1b0:	51                   	push   ecx
c000c1b1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c1b4:	83 c4 10             	add    esp,0x10
c000c1b7:	83 c4 0c             	add    esp,0xc
c000c1ba:	c3                   	ret    
c000c1bb:	90                   	nop

c000c1bc <Directory::rename(char const*)>:
c000c1bc:	83 ec 0c             	sub    esp,0xc
c000c1bf:	b8 0b 00 00 00       	mov    eax,0xb
c000c1c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1cf:	83 f9 19             	cmp    ecx,0x19
c000c1d2:	77 32                	ja     c000c206 <Directory::rename(char const*)+0x4a>
c000c1d4:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1db:	85 c9                	test   ecx,ecx
c000c1dd:	74 27                	je     c000c206 <Directory::rename(char const*)+0x4a>
c000c1df:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1e5:	85 c9                	test   ecx,ecx
c000c1e7:	74 1d                	je     c000c206 <Directory::rename(char const*)+0x4a>
c000c1e9:	b8 06 00 00 00       	mov    eax,0x6
c000c1ee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1f2:	75 12                	jne    c000c206 <Directory::rename(char const*)+0x4a>
c000c1f4:	83 c2 0d             	add    edx,0xd
c000c1f7:	50                   	push   eax
c000c1f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1fe:	52                   	push   edx
c000c1ff:	51                   	push   ecx
c000c200:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c203:	83 c4 10             	add    esp,0x10
c000c206:	83 c4 0c             	add    esp,0xc
c000c209:	c3                   	ret    

c000c20a <Directory::exists()>:
c000c20a:	83 ec 0c             	sub    esp,0xc
c000c20d:	31 c0                	xor    eax,eax
c000c20f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c213:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c21a:	83 f9 19             	cmp    ecx,0x19
c000c21d:	77 24                	ja     c000c243 <Directory::exists()+0x39>
c000c21f:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c226:	85 c9                	test   ecx,ecx
c000c228:	74 19                	je     c000c243 <Directory::exists()+0x39>
c000c22a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c230:	85 c9                	test   ecx,ecx
c000c232:	74 0f                	je     c000c243 <Directory::exists()+0x39>
c000c234:	83 c2 0d             	add    edx,0xd
c000c237:	50                   	push   eax
c000c238:	50                   	push   eax
c000c239:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c23b:	52                   	push   edx
c000c23c:	51                   	push   ecx
c000c23d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c240:	83 c4 10             	add    esp,0x10
c000c243:	83 c4 0c             	add    esp,0xc
c000c246:	c3                   	ret    
c000c247:	90                   	nop

c000c248 <Directory::read(dirent*)>:
c000c248:	83 ec 1c             	sub    esp,0x1c
c000c24b:	b8 0b 00 00 00       	mov    eax,0xb
c000c250:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c254:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c25b:	83 f9 19             	cmp    ecx,0x19
c000c25e:	77 30                	ja     c000c290 <Directory::read(dirent*)+0x48>
c000c260:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c267:	85 c9                	test   ecx,ecx
c000c269:	74 25                	je     c000c290 <Directory::read(dirent*)+0x48>
c000c26b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c272:	74 1c                	je     c000c290 <Directory::read(dirent*)+0x48>
c000c274:	83 ec 0c             	sub    esp,0xc
c000c277:	8b 02                	mov    eax,DWORD PTR [edx]
c000c279:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c27d:	51                   	push   ecx
c000c27e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c282:	6a 00                	push   0x0
c000c284:	68 10 01 00 00       	push   0x110
c000c289:	52                   	push   edx
c000c28a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c28d:	83 c4 20             	add    esp,0x20
c000c290:	83 c4 1c             	add    esp,0x1c
c000c293:	c3                   	ret    

c000c294 <Directory::create()>:
c000c294:	83 ec 0c             	sub    esp,0xc
c000c297:	b8 0b 00 00 00       	mov    eax,0xb
c000c29c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2a7:	83 f9 19             	cmp    ecx,0x19
c000c2aa:	77 2f                	ja     c000c2db <Directory::create()+0x47>
c000c2ac:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2b3:	85 c9                	test   ecx,ecx
c000c2b5:	74 24                	je     c000c2db <Directory::create()+0x47>
c000c2b7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2bd:	85 c9                	test   ecx,ecx
c000c2bf:	74 1a                	je     c000c2db <Directory::create()+0x47>
c000c2c1:	b8 06 00 00 00       	mov    eax,0x6
c000c2c6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c2ca:	75 0f                	jne    c000c2db <Directory::create()+0x47>
c000c2cc:	83 c2 0d             	add    edx,0xd
c000c2cf:	50                   	push   eax
c000c2d0:	50                   	push   eax
c000c2d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2d3:	52                   	push   edx
c000c2d4:	51                   	push   ecx
c000c2d5:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c2d8:	83 c4 10             	add    esp,0x10
c000c2db:	83 c4 0c             	add    esp,0xc
c000c2de:	c3                   	ret    
c000c2df:	90                   	nop

c000c2e0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c2e0:	b8 0a 00 00 00       	mov    eax,0xa
c000c2e5:	c3                   	ret    
c000c2e6:	66 90                	xchg   ax,ax

c000c2e8 <Bus::Bus(char const*)>:
c000c2e8:	83 ec 0c             	sub    esp,0xc
c000c2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2ef:	83 ec 08             	sub    esp,0x8
c000c2f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2f6:	50                   	push   eax
c000c2f7:	e8 22 08 00 00       	call   c000cb1e <Device::Device(char const*)>
c000c2fc:	83 c4 10             	add    esp,0x10
c000c2ff:	ba 9c 19 02 c0       	mov    edx,0xc002199c
c000c304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c308:	89 10                	mov    DWORD PTR [eax],edx
c000c30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c30e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c318:	90                   	nop
c000c319:	83 c4 0c             	add    esp,0xc
c000c31c:	c3                   	ret    
c000c31d:	90                   	nop
c000c31e:	66 90                	xchg   ax,ax

c000c320 <Bus::~Bus()>:
c000c320:	83 ec 0c             	sub    esp,0xc
c000c323:	ba 9c 19 02 c0       	mov    edx,0xc002199c
c000c328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c32c:	89 10                	mov    DWORD PTR [eax],edx
c000c32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c332:	83 ec 0c             	sub    esp,0xc
c000c335:	50                   	push   eax
c000c336:	e8 4d 05 00 00       	call   c000c888 <Device::~Device()>
c000c33b:	83 c4 10             	add    esp,0x10
c000c33e:	90                   	nop
c000c33f:	83 c4 0c             	add    esp,0xc
c000c342:	c3                   	ret    
c000c343:	90                   	nop

c000c344 <Bus::~Bus()>:
c000c344:	83 ec 0c             	sub    esp,0xc
c000c347:	83 ec 0c             	sub    esp,0xc
c000c34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c34e:	e8 cd ff ff ff       	call   c000c320 <Bus::~Bus()>
c000c353:	83 c4 10             	add    esp,0x10
c000c356:	83 ec 08             	sub    esp,0x8
c000c359:	68 58 01 00 00       	push   0x158
c000c35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c362:	e8 b1 e4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c367:	83 c4 10             	add    esp,0x10
c000c36a:	83 c4 0c             	add    esp,0xc
c000c36d:	c3                   	ret    

c000c36e <beepThread(void*)>:
c000c36e:	83 ec 0c             	sub    esp,0xc
c000c371:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c376:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c37a:	48                   	dec    eax
c000c37b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c380:	75 01                	jne    c000c383 <beepThread(void*)+0x15>
c000c382:	fb                   	sti    
c000c383:	83 ec 0c             	sub    esp,0xc
c000c386:	6b c2 0a             	imul   eax,edx,0xa
c000c389:	50                   	push   eax
c000c38a:	e8 21 a0 00 00       	call   c00163b0 <milliTenthSleep(unsigned int)>
c000c38f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c396:	e8 70 bf 00 00       	call   c001830b <HalMakeBeep(int)>
c000c39b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c3a3:	83 c4 1c             	add    esp,0x1c
c000c3a6:	e9 e9 9e 00 00       	jmp    c0016294 <blockTask(TaskState)>

c000c3ab <Krnl::beep(int, int, bool)>:
c000c3ab:	56                   	push   esi
c000c3ac:	53                   	push   ebx
c000c3ad:	83 ec 10             	sub    esp,0x10
c000c3b0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c3b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c3b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3bc:	e8 4a bf 00 00       	call   c001830b <HalMakeBeep(int)>
c000c3c1:	83 c4 10             	add    esp,0x10
c000c3c4:	89 f0                	mov    eax,esi
c000c3c6:	84 c0                	test   al,al
c000c3c8:	74 1e                	je     c000c3e8 <Krnl::beep(int, int, bool)+0x3d>
c000c3ca:	83 ec 0c             	sub    esp,0xc
c000c3cd:	6b db 0a             	imul   ebx,ebx,0xa
c000c3d0:	53                   	push   ebx
c000c3d1:	e8 da 9f 00 00       	call   c00163b0 <milliTenthSleep(unsigned int)>
c000c3d6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c3de:	83 c4 14             	add    esp,0x14
c000c3e1:	5b                   	pop    ebx
c000c3e2:	5e                   	pop    esi
c000c3e3:	e9 23 bf 00 00       	jmp    c001830b <HalMakeBeep(int)>
c000c3e8:	68 e6 00 00 00       	push   0xe6
c000c3ed:	53                   	push   ebx
c000c3ee:	68 6e c3 00 c0       	push   0xc000c36e
c000c3f3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c3f9:	e8 32 9a 00 00       	call   c0015e30 <Process::createThread(void (*)(void*), void*, int)>
c000c3fe:	83 c4 14             	add    esp,0x14
c000c401:	5b                   	pop    ebx
c000c402:	5e                   	pop    esi
c000c403:	c3                   	ret    

c000c404 <User::loadClockSettings(int)>:
c000c404:	53                   	push   ebx
c000c405:	83 ec 14             	sub    esp,0x14
c000c408:	68 14 01 00 00       	push   0x114
c000c40d:	e8 a4 b6 ff ff       	call   c0007ab6 <malloc>
c000c412:	83 c4 0c             	add    esp,0xc
c000c415:	89 c3                	mov    ebx,eax
c000c417:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c41d:	68 c0 19 02 c0       	push   0xc00219c0
c000c422:	50                   	push   eax
c000c423:	e8 e4 f6 ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c000c428:	58                   	pop    eax
c000c429:	5a                   	pop    edx
c000c42a:	6a 01                	push   0x1
c000c42c:	53                   	push   ebx
c000c42d:	e8 f8 f6 ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c000c432:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c435:	e8 4e f7 ff ff       	call   c000bb88 <File::close()>
c000c43a:	83 c4 10             	add    esp,0x10
c000c43d:	85 db                	test   ebx,ebx
c000c43f:	74 0f                	je     c000c450 <User::loadClockSettings(int)+0x4c>
c000c441:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c443:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c447:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c44a:	83 c4 08             	add    esp,0x8
c000c44d:	5b                   	pop    ebx
c000c44e:	ff e0                	jmp    eax
c000c450:	83 c4 08             	add    esp,0x8
c000c453:	5b                   	pop    ebx
c000c454:	c3                   	ret    
c000c455:	90                   	nop

c000c456 <Clock::Clock(char const*)>:
c000c456:	83 ec 0c             	sub    esp,0xc
c000c459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c45d:	83 ec 08             	sub    esp,0x8
c000c460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c464:	50                   	push   eax
c000c465:	e8 b4 06 00 00       	call   c000cb1e <Device::Device(char const*)>
c000c46a:	83 c4 10             	add    esp,0x10
c000c46d:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c000c472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c476:	89 10                	mov    DWORD PTR [eax],edx
c000c478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c47c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c486:	90                   	nop
c000c487:	83 c4 0c             	add    esp,0xc
c000c48a:	c3                   	ret    
c000c48b:	90                   	nop

c000c48c <Clock::~Clock()>:
c000c48c:	83 ec 0c             	sub    esp,0xc
c000c48f:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c000c494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c498:	89 10                	mov    DWORD PTR [eax],edx
c000c49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c49e:	83 ec 0c             	sub    esp,0xc
c000c4a1:	50                   	push   eax
c000c4a2:	e8 e1 03 00 00       	call   c000c888 <Device::~Device()>
c000c4a7:	83 c4 10             	add    esp,0x10
c000c4aa:	90                   	nop
c000c4ab:	83 c4 0c             	add    esp,0xc
c000c4ae:	c3                   	ret    
c000c4af:	90                   	nop

c000c4b0 <Clock::~Clock()>:
c000c4b0:	83 ec 0c             	sub    esp,0xc
c000c4b3:	83 ec 0c             	sub    esp,0xc
c000c4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ba:	e8 cd ff ff ff       	call   c000c48c <Clock::~Clock()>
c000c4bf:	83 c4 10             	add    esp,0x10
c000c4c2:	83 ec 08             	sub    esp,0x8
c000c4c5:	68 58 01 00 00       	push   0x158
c000c4ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ce:	e8 45 e3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c4d3:	83 c4 10             	add    esp,0x10
c000c4d6:	83 c4 0c             	add    esp,0xc
c000c4d9:	c3                   	ret    

c000c4da <Clock::timeInSecondsLocal()>:
c000c4da:	53                   	push   ebx
c000c4db:	83 ec 14             	sub    esp,0x14
c000c4de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c4e2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c4e4:	50                   	push   eax
c000c4e5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c4e8:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c4ef:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c4f5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c4fb:	89 cb                	mov    ebx,ecx
c000c4fd:	c1 fb 1f             	sar    ebx,0x1f
c000c500:	01 c8                	add    eax,ecx
c000c502:	11 da                	adc    edx,ebx
c000c504:	83 c4 10             	add    esp,0x10
c000c507:	31 c9                	xor    ecx,ecx
c000c509:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c510:	74 05                	je     c000c517 <Clock::timeInSecondsLocal()+0x3d>
c000c512:	b9 08 07 00 00       	mov    ecx,0x708
c000c517:	31 db                	xor    ebx,ebx
c000c519:	01 c8                	add    eax,ecx
c000c51b:	11 da                	adc    edx,ebx
c000c51d:	83 c4 08             	add    esp,0x8
c000c520:	5b                   	pop    ebx
c000c521:	c3                   	ret    

c000c522 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c522:	57                   	push   edi
c000c523:	56                   	push   esi
c000c524:	53                   	push   ebx
c000c525:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c529:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c52d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c52f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c533:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c536:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c53d:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c543:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c549:	99                   	cdq    
c000c54a:	29 c6                	sub    esi,eax
c000c54c:	19 d7                	sbb    edi,edx
c000c54e:	89 f0                	mov    eax,esi
c000c550:	89 fa                	mov    edx,edi
c000c552:	31 f6                	xor    esi,esi
c000c554:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c55b:	74 05                	je     c000c562 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c55d:	be 08 07 00 00       	mov    esi,0x708
c000c562:	31 ff                	xor    edi,edi
c000c564:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c568:	29 f0                	sub    eax,esi
c000c56a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c56e:	19 fa                	sbb    edx,edi
c000c570:	89 d8                	mov    eax,ebx
c000c572:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c576:	5b                   	pop    ebx
c000c577:	5e                   	pop    esi
c000c578:	5f                   	pop    edi
c000c579:	ff e0                	jmp    eax

c000c57b <datetimeToSeconds(datetime_t)>:
c000c57b:	55                   	push   ebp
c000c57c:	57                   	push   edi
c000c57d:	56                   	push   esi
c000c57e:	53                   	push   ebx
c000c57f:	83 ec 0c             	sub    esp,0xc
c000c582:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c586:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c58a:	89 d6                	mov    esi,edx
c000c58c:	0f b6 c7             	movzx  eax,bh
c000c58f:	c1 ee 10             	shr    esi,0x10
c000c592:	6b e8 3c             	imul   ebp,eax,0x3c
c000c595:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c59b:	0f b6 ce             	movzx  ecx,dh
c000c59e:	89 df                	mov    edi,ebx
c000c5a0:	49                   	dec    ecx
c000c5a1:	c1 ef 10             	shr    edi,0x10
c000c5a4:	0f b6 db             	movzx  ebx,bl
c000c5a7:	89 f8                	mov    eax,edi
c000c5a9:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c5af:	0f b6 f8             	movzx  edi,al
c000c5b2:	0f b6 d2             	movzx  edx,dl
c000c5b5:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c5b9:	01 d8                	add    eax,ebx
c000c5bb:	0f b7 de             	movzx  ebx,si
c000c5be:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5c1:	c1 f8 1f             	sar    eax,0x1f
c000c5c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c5c8:	0f b6 c1             	movzx  eax,cl
c000c5cb:	8b 0c 85 20 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde5e0]
c000c5d2:	83 f8 01             	cmp    eax,0x1
c000c5d5:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c5d9:	76 27                	jbe    c000c602 <datetimeToSeconds(datetime_t)+0x87>
c000c5db:	83 e6 03             	and    esi,0x3
c000c5de:	75 22                	jne    c000c602 <datetimeToSeconds(datetime_t)+0x87>
c000c5e0:	31 d2                	xor    edx,edx
c000c5e2:	be 64 00 00 00       	mov    esi,0x64
c000c5e7:	89 d8                	mov    eax,ebx
c000c5e9:	f7 f6                	div    esi
c000c5eb:	85 d2                	test   edx,edx
c000c5ed:	75 12                	jne    c000c601 <datetimeToSeconds(datetime_t)+0x86>
c000c5ef:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c5f5:	be 90 01 00 00       	mov    esi,0x190
c000c5fa:	99                   	cdq    
c000c5fb:	f7 fe                	idiv   esi
c000c5fd:	85 d2                	test   edx,edx
c000c5ff:	75 01                	jne    c000c602 <datetimeToSeconds(datetime_t)+0x87>
c000c601:	41                   	inc    ecx
c000c602:	83 fb 46             	cmp    ebx,0x46
c000c605:	76 48                	jbe    c000c64f <datetimeToSeconds(datetime_t)+0xd4>
c000c607:	be 46 00 00 00       	mov    esi,0x46
c000c60c:	bf 64 00 00 00       	mov    edi,0x64
c000c611:	bd 90 01 00 00       	mov    ebp,0x190
c000c616:	b8 6d 01 00 00       	mov    eax,0x16d
c000c61b:	f7 c6 03 00 00 00    	test   esi,0x3
c000c621:	75 23                	jne    c000c646 <datetimeToSeconds(datetime_t)+0xcb>
c000c623:	89 f0                	mov    eax,esi
c000c625:	99                   	cdq    
c000c626:	f7 ff                	idiv   edi
c000c628:	b8 6e 01 00 00       	mov    eax,0x16e
c000c62d:	85 d2                	test   edx,edx
c000c62f:	75 15                	jne    c000c646 <datetimeToSeconds(datetime_t)+0xcb>
c000c631:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c637:	99                   	cdq    
c000c638:	f7 fd                	idiv   ebp
c000c63a:	83 fa 01             	cmp    edx,0x1
c000c63d:	19 c0                	sbb    eax,eax
c000c63f:	f7 d0                	not    eax
c000c641:	05 6e 01 00 00       	add    eax,0x16e
c000c646:	01 c1                	add    ecx,eax
c000c648:	46                   	inc    esi
c000c649:	39 de                	cmp    esi,ebx
c000c64b:	7c c9                	jl     c000c616 <datetimeToSeconds(datetime_t)+0x9b>
c000c64d:	eb 34                	jmp    c000c683 <datetimeToSeconds(datetime_t)+0x108>
c000c64f:	74 32                	je     c000c683 <datetimeToSeconds(datetime_t)+0x108>
c000c651:	b8 45 00 00 00       	mov    eax,0x45
c000c656:	89 c2                	mov    edx,eax
c000c658:	83 e2 03             	and    edx,0x3
c000c65b:	39 d8                	cmp    eax,ebx
c000c65d:	7e 0f                	jle    c000c66e <datetimeToSeconds(datetime_t)+0xf3>
c000c65f:	83 fa 01             	cmp    edx,0x1
c000c662:	19 d2                	sbb    edx,edx
c000c664:	48                   	dec    eax
c000c665:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c66c:	eb e8                	jmp    c000c656 <datetimeToSeconds(datetime_t)+0xdb>
c000c66e:	b8 6d 01 00 00       	mov    eax,0x16d
c000c673:	85 d2                	test   edx,edx
c000c675:	75 0a                	jne    c000c681 <datetimeToSeconds(datetime_t)+0x106>
c000c677:	83 fb 01             	cmp    ebx,0x1
c000c67a:	19 c0                	sbb    eax,eax
c000c67c:	05 6e 01 00 00       	add    eax,0x16e
c000c681:	29 c1                	sub    ecx,eax
c000c683:	b8 80 51 01 00       	mov    eax,0x15180
c000c688:	f7 e9                	imul   ecx
c000c68a:	03 04 24             	add    eax,DWORD PTR [esp]
c000c68d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c691:	83 c4 0c             	add    esp,0xc
c000c694:	5b                   	pop    ebx
c000c695:	5e                   	pop    esi
c000c696:	5f                   	pop    edi
c000c697:	5d                   	pop    ebp
c000c698:	c3                   	ret    
c000c699:	90                   	nop

c000c69a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c69a:	57                   	push   edi
c000c69b:	56                   	push   esi
c000c69c:	53                   	push   ebx
c000c69d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c6a1:	8b 06                	mov    eax,DWORD PTR [esi]
c000c6a3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c6a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6ae:	e8 c8 fe ff ff       	call   c000c57b <datetimeToSeconds(datetime_t)>
c000c6b3:	59                   	pop    ecx
c000c6b4:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c6bb:	5b                   	pop    ebx
c000c6bc:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c6c2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c6c8:	89 cb                	mov    ebx,ecx
c000c6ca:	c1 fb 1f             	sar    ebx,0x1f
c000c6cd:	29 c8                	sub    eax,ecx
c000c6cf:	19 da                	sbb    edx,ebx
c000c6d1:	31 c9                	xor    ecx,ecx
c000c6d3:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c6da:	74 05                	je     c000c6e1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c6dc:	b9 08 07 00 00       	mov    ecx,0x708
c000c6e1:	31 db                	xor    ebx,ebx
c000c6e3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c6e7:	29 c8                	sub    eax,ecx
c000c6e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6ed:	19 da                	sbb    edx,ebx
c000c6ef:	89 f8                	mov    eax,edi
c000c6f1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6f5:	5b                   	pop    ebx
c000c6f6:	5e                   	pop    esi
c000c6f7:	5f                   	pop    edi
c000c6f8:	ff e0                	jmp    eax

c000c6fa <secondsToDatetime(unsigned long long)>:
c000c6fa:	55                   	push   ebp
c000c6fb:	57                   	push   edi
c000c6fc:	56                   	push   esi
c000c6fd:	53                   	push   ebx
c000c6fe:	83 ec 1c             	sub    esp,0x1c
c000c701:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c705:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c709:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c70d:	6a 00                	push   0x0
c000c70f:	68 80 51 01 00       	push   0x15180
c000c714:	55                   	push   ebp
c000c715:	57                   	push   edi
c000c716:	e8 d5 2f 01 00       	call   c001f6f0 <__udivdi3>
c000c71b:	83 c4 10             	add    esp,0x10
c000c71e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c724:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c728:	6a 00                	push   0x0
c000c72a:	68 80 51 01 00       	push   0x15180
c000c72f:	55                   	push   ebp
c000c730:	57                   	push   edi
c000c731:	bf 10 0e 00 00       	mov    edi,0xe10
c000c736:	e8 b5 30 01 00       	call   c001f7f0 <__umoddi3>
c000c73b:	83 c4 10             	add    esp,0x10
c000c73e:	99                   	cdq    
c000c73f:	f7 ff                	idiv   edi
c000c741:	bf 3c 00 00 00       	mov    edi,0x3c
c000c746:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c749:	89 d0                	mov    eax,edx
c000c74b:	99                   	cdq    
c000c74c:	f7 ff                	idiv   edi
c000c74e:	85 db                	test   ebx,ebx
c000c750:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c753:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c756:	79 11                	jns    c000c769 <secondsToDatetime(unsigned long long)+0x6f>
c000c758:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c75c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c762:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c767:	eb 07                	jmp    c000c770 <secondsToDatetime(unsigned long long)+0x76>
c000c769:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c76e:	89 d8                	mov    eax,ebx
c000c770:	bf b4 05 00 00       	mov    edi,0x5b4
c000c775:	99                   	cdq    
c000c776:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c77b:	f7 f9                	idiv   ecx
c000c77d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c782:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c786:	31 d2                	xor    edx,edx
c000c788:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c790:	01 c3                	add    ebx,eax
c000c792:	89 d8                	mov    eax,ebx
c000c794:	f7 f1                	div    ecx
c000c796:	31 d2                	xor    edx,edx
c000c798:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c79b:	89 d8                	mov    eax,ebx
c000c79d:	f7 f7                	div    edi
c000c79f:	31 d2                	xor    edx,edx
c000c7a1:	29 c1                	sub    ecx,eax
c000c7a3:	89 d8                	mov    eax,ebx
c000c7a5:	f7 f5                	div    ebp
c000c7a7:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c7ac:	29 c1                	sub    ecx,eax
c000c7ae:	31 d2                	xor    edx,edx
c000c7b0:	89 c8                	mov    eax,ecx
c000c7b2:	f7 f5                	div    ebp
c000c7b4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c7b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7bd:	31 d2                	xor    edx,edx
c000c7bf:	89 c8                	mov    eax,ecx
c000c7c1:	f7 f5                	div    ebp
c000c7c3:	31 d2                	xor    edx,edx
c000c7c5:	01 c3                	add    ebx,eax
c000c7c7:	89 c8                	mov    eax,ecx
c000c7c9:	f7 f7                	div    edi
c000c7cb:	bf 99 00 00 00       	mov    edi,0x99
c000c7d0:	29 c3                	sub    ebx,eax
c000c7d2:	31 d2                	xor    edx,edx
c000c7d4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c7dc:	29 c3                	sub    ebx,eax
c000c7de:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c7e1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c7e4:	bb 05 00 00 00       	mov    ebx,0x5
c000c7e9:	83 c1 02             	add    ecx,0x2
c000c7ec:	89 c8                	mov    eax,ecx
c000c7ee:	f7 f7                	div    edi
c000c7f0:	31 d2                	xor    edx,edx
c000c7f2:	89 c7                	mov    edi,eax
c000c7f4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c7fa:	83 c0 02             	add    eax,0x2
c000c7fd:	f7 f3                	div    ebx
c000c7ff:	89 eb                	mov    ebx,ebp
c000c801:	29 c3                	sub    ebx,eax
c000c803:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c809:	88 1e                	mov    BYTE PTR [esi],bl
c000c80b:	19 c0                	sbb    eax,eax
c000c80d:	31 d2                	xor    edx,edx
c000c80f:	83 e0 0c             	and    eax,0xc
c000c812:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c816:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c81e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c822:	83 f9 01             	cmp    ecx,0x1
c000c825:	0f 96 c2             	setbe  dl
c000c828:	41                   	inc    ecx
c000c829:	01 d0                	add    eax,edx
c000c82b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c82e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c832:	83 c4 1c             	add    esp,0x1c
c000c835:	89 f0                	mov    eax,esi
c000c837:	5b                   	pop    ebx
c000c838:	5e                   	pop    esi
c000c839:	5f                   	pop    edi
c000c83a:	5d                   	pop    ebp
c000c83b:	c2 04 00             	ret    0x4

c000c83e <Clock::timeInDatetimeLocal()>:
c000c83e:	53                   	push   ebx
c000c83f:	83 ec 14             	sub    esp,0x14
c000c842:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c846:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c84a:	e8 8b fc ff ff       	call   c000c4da <Clock::timeInSecondsLocal()>
c000c84f:	83 c4 0c             	add    esp,0xc
c000c852:	52                   	push   edx
c000c853:	50                   	push   eax
c000c854:	53                   	push   ebx
c000c855:	e8 a0 fe ff ff       	call   c000c6fa <secondsToDatetime(unsigned long long)>
c000c85a:	89 d8                	mov    eax,ebx
c000c85c:	83 c4 14             	add    esp,0x14
c000c85f:	5b                   	pop    ebx
c000c860:	c2 04 00             	ret    0x4
c000c863:	90                   	nop

c000c864 <Device::hibernate()>:
c000c864:	c3                   	ret    
c000c865:	90                   	nop

c000c866 <Device::wake()>:
c000c866:	c3                   	ret    
c000c867:	90                   	nop

c000c868 <Device::detect()>:
c000c868:	c3                   	ret    
c000c869:	90                   	nop

c000c86a <Device::disableLegacy()>:
c000c86a:	c3                   	ret    
c000c86b:	90                   	nop

c000c86c <Device::powerSaving(PowerSavingLevel)>:
c000c86c:	c3                   	ret    
c000c86d:	90                   	nop

c000c86e <DriverlessDevice::close(int, int, void*)>:
c000c86e:	31 c0                	xor    eax,eax
c000c870:	c3                   	ret    
c000c871:	90                   	nop

c000c872 <DriverlessDevice::detect()>:
c000c872:	c3                   	ret    
c000c873:	90                   	nop

c000c874 <DriverlessDevice::open(int, int, void*)>:
c000c874:	83 ec 18             	sub    esp,0x18
c000c877:	68 50 1a 02 c0       	push   0xc0021a50
c000c87c:	e8 5e 4d 00 00       	call   c00115df <KePanic(char const*)>
c000c881:	83 c8 ff             	or     eax,0xffffffff
c000c884:	83 c4 1c             	add    esp,0x1c
c000c887:	c3                   	ret    

c000c888 <Device::~Device()>:
c000c888:	ba b0 1a 02 c0       	mov    edx,0xc0021ab0
c000c88d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c891:	89 10                	mov    DWORD PTR [eax],edx
c000c893:	90                   	nop
c000c894:	c3                   	ret    
c000c895:	90                   	nop

c000c896 <Device::~Device()>:
c000c896:	83 ec 0c             	sub    esp,0xc
c000c899:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c89d:	e8 e6 ff ff ff       	call   c000c888 <Device::~Device()>
c000c8a2:	83 c4 04             	add    esp,0x4
c000c8a5:	83 ec 08             	sub    esp,0x8
c000c8a8:	68 58 01 00 00       	push   0x158
c000c8ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8b1:	e8 62 df ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c8b6:	83 c4 10             	add    esp,0x10
c000c8b9:	83 c4 0c             	add    esp,0xc
c000c8bc:	c3                   	ret    
c000c8bd:	90                   	nop

c000c8be <Device::findAndLoadDriver()>:
c000c8be:	c7 44 24 04 6e 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a6e
c000c8c6:	e9 7a e0 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c8cb:	90                   	nop

c000c8cc <Device::preOpenPCI(PCIDeviceInfo)>:
c000c8cc:	57                   	push   edi
c000c8cd:	b9 09 00 00 00       	mov    ecx,0x9
c000c8d2:	56                   	push   esi
c000c8d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c8d7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c8db:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c8e5:	81 c7 18 01 00 00    	add    edi,0x118
c000c8eb:	fc                   	cld    
c000c8ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c8ee:	5e                   	pop    esi
c000c8ef:	5f                   	pop    edi
c000c8f0:	c3                   	ret    
c000c8f1:	90                   	nop

c000c8f2 <Device::preOpenACPI(void*, char*, char*)>:
c000c8f2:	57                   	push   edi
c000c8f3:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c8f8:	56                   	push   esi
c000c8f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c8fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c901:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c90b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c911:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c917:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c91b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c91d:	b9 0e 00 00 00       	mov    ecx,0xe
c000c922:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c928:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c92c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c92e:	5e                   	pop    esi
c000c92f:	5f                   	pop    edi
c000c930:	c3                   	ret    
c000c931:	90                   	nop

c000c932 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c932:	53                   	push   ebx
c000c933:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c937:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c93b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c93f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c943:	0f b6 c0             	movzx  eax,al
c000c946:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c94a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c94e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c952:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c956:	5b                   	pop    ebx
c000c957:	e9 a8 05 00 00       	jmp    c000cf04 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c95c <Device::getParent()>:
c000c95c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c960:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c966:	c3                   	ret    
c000c967:	90                   	nop

c000c968 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c968:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c96c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c970:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c975:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c979:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c97d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c981:	e9 e6 06 00 00       	jmp    c000d06c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c986 <Device::addChild(Device*)>:
c000c986:	53                   	push   ebx
c000c987:	83 ec 08             	sub    esp,0x8
c000c98a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c98e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c992:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c998:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c99e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c9a0:	85 d2                	test   edx,edx
c000c9a2:	74 04                	je     c000c9a8 <Device::addChild(Device*)+0x22>
c000c9a4:	89 d3                	mov    ebx,edx
c000c9a6:	eb f6                	jmp    c000c99e <Device::addChild(Device*)+0x18>
c000c9a8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c9ab:	83 ec 0c             	sub    esp,0xc
c000c9ae:	6a 08                	push   0x8
c000c9b0:	e8 01 b1 ff ff       	call   c0007ab6 <malloc>
c000c9b5:	89 03                	mov    DWORD PTR [ebx],eax
c000c9b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9c4:	83 c4 18             	add    esp,0x18
c000c9c7:	5b                   	pop    ebx
c000c9c8:	c3                   	ret    
c000c9c9:	90                   	nop

c000c9ca <Device::removeAllChildren()>:
c000c9ca:	56                   	push   esi
c000c9cb:	53                   	push   ebx
c000c9cc:	52                   	push   edx
c000c9cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c9d1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c9d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c9da:	74 17                	je     c000c9f3 <Device::removeAllChildren()+0x29>
c000c9dc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c9df:	85 c0                	test   eax,eax
c000c9e1:	74 0c                	je     c000c9ef <Device::removeAllChildren()+0x25>
c000c9e3:	83 ec 0c             	sub    esp,0xc
c000c9e6:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9e8:	50                   	push   eax
c000c9e9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c9ec:	83 c4 10             	add    esp,0x10
c000c9ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c9f1:	eb e4                	jmp    c000c9d7 <Device::removeAllChildren()+0xd>
c000c9f3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c9f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9ff:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca0c:	58                   	pop    eax
c000ca0d:	5b                   	pop    ebx
c000ca0e:	5e                   	pop    esi
c000ca0f:	c3                   	ret    

c000ca10 <Device::hibernateAll()>:
c000ca10:	53                   	push   ebx
c000ca11:	83 ec 14             	sub    esp,0x14
c000ca14:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca18:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca1a:	53                   	push   ebx
c000ca1b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca1e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca2a:	74 0f                	je     c000ca3b <Device::hibernateAll()+0x2b>
c000ca2c:	83 ec 0c             	sub    esp,0xc
c000ca2f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca32:	e8 d9 ff ff ff       	call   c000ca10 <Device::hibernateAll()>
c000ca37:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca39:	eb e9                	jmp    c000ca24 <Device::hibernateAll()+0x14>
c000ca3b:	83 c4 08             	add    esp,0x8
c000ca3e:	5b                   	pop    ebx
c000ca3f:	c3                   	ret    

c000ca40 <Device::wakeAll()>:
c000ca40:	53                   	push   ebx
c000ca41:	83 ec 14             	sub    esp,0x14
c000ca44:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca48:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca4a:	53                   	push   ebx
c000ca4b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca4e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca54:	83 c4 10             	add    esp,0x10
c000ca57:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca5a:	74 0f                	je     c000ca6b <Device::wakeAll()+0x2b>
c000ca5c:	83 ec 0c             	sub    esp,0xc
c000ca5f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca62:	e8 d9 ff ff ff       	call   c000ca40 <Device::wakeAll()>
c000ca67:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca69:	eb e9                	jmp    c000ca54 <Device::wakeAll()+0x14>
c000ca6b:	83 c4 08             	add    esp,0x8
c000ca6e:	5b                   	pop    ebx
c000ca6f:	c3                   	ret    

c000ca70 <Device::detectAll()>:
c000ca70:	53                   	push   ebx
c000ca71:	83 ec 14             	sub    esp,0x14
c000ca74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca78:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca7a:	53                   	push   ebx
c000ca7b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ca7e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca84:	83 c4 10             	add    esp,0x10
c000ca87:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca8a:	74 0f                	je     c000ca9b <Device::detectAll()+0x2b>
c000ca8c:	83 ec 0c             	sub    esp,0xc
c000ca8f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca92:	e8 d9 ff ff ff       	call   c000ca70 <Device::detectAll()>
c000ca97:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca99:	eb e9                	jmp    c000ca84 <Device::detectAll()+0x14>
c000ca9b:	83 c4 08             	add    esp,0x8
c000ca9e:	5b                   	pop    ebx
c000ca9f:	c3                   	ret    

c000caa0 <Device::disableLegacyAll()>:
c000caa0:	c3                   	ret    
c000caa1:	90                   	nop

c000caa2 <Device::loadDriversForAll()>:
c000caa2:	c3                   	ret    
c000caa3:	90                   	nop

c000caa4 <Device::closeAll()>:
c000caa4:	53                   	push   ebx
c000caa5:	83 ec 08             	sub    esp,0x8
c000caa8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000caac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caae:	6a 00                	push   0x0
c000cab0:	6a 00                	push   0x0
c000cab2:	6a 00                	push   0x0
c000cab4:	53                   	push   ebx
c000cab5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cab8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cabe:	83 c4 10             	add    esp,0x10
c000cac1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cac4:	74 0f                	je     c000cad5 <Device::closeAll()+0x31>
c000cac6:	83 ec 0c             	sub    esp,0xc
c000cac9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cacc:	e8 d3 ff ff ff       	call   c000caa4 <Device::closeAll()>
c000cad1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cad3:	eb e9                	jmp    c000cabe <Device::closeAll()+0x1a>
c000cad5:	83 c4 08             	add    esp,0x8
c000cad8:	5b                   	pop    ebx
c000cad9:	c3                   	ret    

c000cada <Device::powerSavingAll(PowerSavingLevel)>:
c000cada:	56                   	push   esi
c000cadb:	53                   	push   ebx
c000cadc:	83 ec 0c             	sub    esp,0xc
c000cadf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cae3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cae7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cae9:	56                   	push   esi
c000caea:	53                   	push   ebx
c000caeb:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000caee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000caf4:	83 c4 10             	add    esp,0x10
c000caf7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cafa:	74 0f                	je     c000cb0b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cafc:	52                   	push   edx
c000cafd:	52                   	push   edx
c000cafe:	56                   	push   esi
c000caff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb02:	e8 d3 ff ff ff       	call   c000cada <Device::powerSavingAll(PowerSavingLevel)>
c000cb07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb09:	eb e9                	jmp    c000caf4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb0b:	58                   	pop    eax
c000cb0c:	5b                   	pop    ebx
c000cb0d:	5e                   	pop    esi
c000cb0e:	c3                   	ret    
c000cb0f:	90                   	nop

c000cb10 <Device::setName(char const*)>:
c000cb10:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb18:	e9 23 3b ff ff       	jmp    c0000640 <strcpy>
c000cb1d:	90                   	nop

c000cb1e <Device::Device(char const*)>:
c000cb1e:	83 ec 1c             	sub    esp,0x1c
c000cb21:	ba b0 1a 02 c0       	mov    edx,0xc0021ab0
c000cb26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb2a:	89 10                	mov    DWORD PTR [eax],edx
c000cb2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb30:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb3e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb4c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cb56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb5a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cb64:	83 ec 08             	sub    esp,0x8
c000cb67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6f:	e8 9c ff ff ff       	call   c000cb10 <Device::setName(char const*)>
c000cb74:	83 c4 10             	add    esp,0x10
c000cb77:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cb7f:	83 ec 0c             	sub    esp,0xc
c000cb82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb86:	e8 2b af ff ff       	call   c0007ab6 <malloc>
c000cb8b:	83 c4 10             	add    esp,0x10
c000cb8e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cb94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb9b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cb9f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cba5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbaf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbca:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cbd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbd5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cbdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbee:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cbf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbfc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc0a:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc14:	90                   	nop
c000cc15:	83 c4 1c             	add    esp,0x1c
c000cc18:	c3                   	ret    
c000cc19:	90                   	nop

c000cc1a <Device::getName()>:
c000cc1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc1e:	05 d0 00 00 00       	add    eax,0xd0
c000cc23:	c3                   	ret    

c000cc24 <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc24:	83 ec 0c             	sub    esp,0xc
c000cc27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc2b:	83 ec 08             	sub    esp,0x8
c000cc2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc32:	50                   	push   eax
c000cc33:	e8 e6 fe ff ff       	call   c000cb1e <Device::Device(char const*)>
c000cc38:	83 c4 10             	add    esp,0x10
c000cc3b:	ba dc 1a 02 c0       	mov    edx,0xc0021adc
c000cc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc44:	89 10                	mov    DWORD PTR [eax],edx
c000cc46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc4a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cc54:	90                   	nop
c000cc55:	83 c4 0c             	add    esp,0xc
c000cc58:	c3                   	ret    
c000cc59:	90                   	nop

c000cc5a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cc5a:	57                   	push   edi
c000cc5b:	56                   	push   esi
c000cc5c:	53                   	push   ebx
c000cc5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc61:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cc65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc69:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cc6f:	75 0c                	jne    c000cc7d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cc71:	52                   	push   edx
c000cc72:	52                   	push   edx
c000cc73:	53                   	push   ebx
c000cc74:	56                   	push   esi
c000cc75:	e8 28 2f 01 00       	call   c001fba2 <LinkedList<Device>::addElement(Device*)>
c000cc7a:	83 c4 10             	add    esp,0x10
c000cc7d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cc83:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cc86:	74 12                	je     c000cc9a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cc88:	50                   	push   eax
c000cc89:	57                   	push   edi
c000cc8a:	56                   	push   esi
c000cc8b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cc8e:	e8 c7 ff ff ff       	call   c000cc5a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cc93:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cc95:	83 c4 10             	add    esp,0x10
c000cc98:	eb e9                	jmp    c000cc83 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cc9a:	5b                   	pop    ebx
c000cc9b:	5e                   	pop    esi
c000cc9c:	5f                   	pop    edi
c000cc9d:	c3                   	ret    

c000cc9e <getDevicesOfType(DeviceType)>:
c000cc9e:	53                   	push   ebx
c000cc9f:	83 ec 14             	sub    esp,0x14
c000cca2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cca6:	53                   	push   ebx
c000cca7:	e8 d2 2f 01 00       	call   c001fc7e <LinkedList<Device>::LinkedList()>
c000ccac:	83 c4 0c             	add    esp,0xc
c000ccaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ccb3:	53                   	push   ebx
c000ccb4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000ccba:	e8 9b ff ff ff       	call   c000cc5a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ccbf:	89 d8                	mov    eax,ebx
c000ccc1:	83 c4 18             	add    esp,0x18
c000ccc4:	5b                   	pop    ebx
c000ccc5:	c2 04 00             	ret    0x4

c000ccc8 <HardDiskController::HardDiskController(char const*)>:
c000ccc8:	83 ec 0c             	sub    esp,0xc
c000cccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cccf:	83 ec 08             	sub    esp,0x8
c000ccd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd6:	50                   	push   eax
c000ccd7:	e8 42 fe ff ff       	call   c000cb1e <Device::Device(char const*)>
c000ccdc:	83 c4 10             	add    esp,0x10
c000ccdf:	ba 08 1b 02 c0       	mov    edx,0xc0021b08
c000cce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce8:	89 10                	mov    DWORD PTR [eax],edx
c000ccea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccee:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ccf8:	90                   	nop
c000ccf9:	83 c4 0c             	add    esp,0xc
c000ccfc:	c3                   	ret    
c000ccfd:	90                   	nop
c000ccfe:	66 90                	xchg   ax,ax

c000cd00 <HardDiskController::~HardDiskController()>:
c000cd00:	83 ec 0c             	sub    esp,0xc
c000cd03:	ba 08 1b 02 c0       	mov    edx,0xc0021b08
c000cd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd0c:	89 10                	mov    DWORD PTR [eax],edx
c000cd0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd12:	83 ec 0c             	sub    esp,0xc
c000cd15:	50                   	push   eax
c000cd16:	e8 6d fb ff ff       	call   c000c888 <Device::~Device()>
c000cd1b:	83 c4 10             	add    esp,0x10
c000cd1e:	90                   	nop
c000cd1f:	83 c4 0c             	add    esp,0xc
c000cd22:	c3                   	ret    
c000cd23:	90                   	nop

c000cd24 <HardDiskController::~HardDiskController()>:
c000cd24:	83 ec 0c             	sub    esp,0xc
c000cd27:	83 ec 0c             	sub    esp,0xc
c000cd2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd2e:	e8 cd ff ff ff       	call   c000cd00 <HardDiskController::~HardDiskController()>
c000cd33:	83 c4 10             	add    esp,0x10
c000cd36:	83 ec 08             	sub    esp,0x8
c000cd39:	68 58 01 00 00       	push   0x158
c000cd3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd42:	e8 d1 da ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cd47:	83 c4 10             	add    esp,0x10
c000cd4a:	83 c4 0c             	add    esp,0xc
c000cd4d:	c3                   	ret    

c000cd4e <PhysicalDisk::eject()>:
c000cd4e:	83 c8 ff             	or     eax,0xffffffff
c000cd51:	c3                   	ret    

c000cd52 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cd52:	83 ec 0c             	sub    esp,0xc
c000cd55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd59:	83 ec 08             	sub    esp,0x8
c000cd5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd60:	50                   	push   eax
c000cd61:	e8 b8 fd ff ff       	call   c000cb1e <Device::Device(char const*)>
c000cd66:	83 c4 10             	add    esp,0x10
c000cd69:	ba 34 1b 02 c0       	mov    edx,0xc0021b34
c000cd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd72:	89 10                	mov    DWORD PTR [eax],edx
c000cd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd78:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd83:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd8e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd9c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cda0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cdb4:	90                   	nop
c000cdb5:	83 c4 0c             	add    esp,0xc
c000cdb8:	c3                   	ret    
c000cdb9:	90                   	nop

c000cdba <PhysicalDisk::startCache()>:
c000cdba:	56                   	push   esi
c000cdbb:	53                   	push   ebx
c000cdbc:	83 ec 10             	sub    esp,0x10
c000cdbf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cdc3:	6a 44                	push   0x44
c000cdc5:	e8 ec ac ff ff       	call   c0007ab6 <malloc>
c000cdca:	89 c6                	mov    esi,eax
c000cdcc:	58                   	pop    eax
c000cdcd:	5a                   	pop    edx
c000cdce:	53                   	push   ebx
c000cdcf:	56                   	push   esi
c000cdd0:	e8 7b 17 00 00       	call   c000e550 <VCache::VCache(PhysicalDisk*)>
c000cdd5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cddb:	83 c4 14             	add    esp,0x14
c000cdde:	5b                   	pop    ebx
c000cddf:	5e                   	pop    esi
c000cde0:	c3                   	ret    
c000cde1:	90                   	nop

c000cde2 <PhysicalDisk::~PhysicalDisk()>:
c000cde2:	83 ec 0c             	sub    esp,0xc
c000cde5:	ba 34 1b 02 c0       	mov    edx,0xc0021b34
c000cdea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdee:	89 10                	mov    DWORD PTR [eax],edx
c000cdf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf4:	83 ec 0c             	sub    esp,0xc
c000cdf7:	50                   	push   eax
c000cdf8:	e8 8b fa ff ff       	call   c000c888 <Device::~Device()>
c000cdfd:	83 c4 10             	add    esp,0x10
c000ce00:	90                   	nop
c000ce01:	83 c4 0c             	add    esp,0xc
c000ce04:	c3                   	ret    
c000ce05:	90                   	nop

c000ce06 <PhysicalDisk::~PhysicalDisk()>:
c000ce06:	83 ec 0c             	sub    esp,0xc
c000ce09:	83 ec 0c             	sub    esp,0xc
c000ce0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce10:	e8 cd ff ff ff       	call   c000cde2 <PhysicalDisk::~PhysicalDisk()>
c000ce15:	83 c4 10             	add    esp,0x10
c000ce18:	83 ec 08             	sub    esp,0x8
c000ce1b:	68 6c 01 00 00       	push   0x16c
c000ce20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce24:	e8 ef d9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ce29:	83 c4 10             	add    esp,0x10
c000ce2c:	83 c4 0c             	add    esp,0xc
c000ce2f:	c3                   	ret    

c000ce30 <int_handler>:
c000ce30:	55                   	push   ebp
c000ce31:	57                   	push   edi
c000ce32:	56                   	push   esi
c000ce33:	53                   	push   ebx
c000ce34:	83 ec 0c             	sub    esp,0xc
c000ce37:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce3b:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce42:	74 0b                	je     c000ce4f <int_handler+0x1f>
c000ce44:	fa                   	cli    
c000ce45:	f4                   	hlt    
c000ce46:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce4d:	75 f5                	jne    c000ce44 <int_handler+0x14>
c000ce4f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ce52:	8d 46 e0             	lea    eax,[esi-0x20]
c000ce55:	83 f8 17             	cmp    eax,0x17
c000ce58:	76 40                	jbe    c000ce9a <int_handler+0x6a>
c000ce5a:	c1 e6 04             	shl    esi,0x4
c000ce5d:	31 db                	xor    ebx,ebx
c000ce5f:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000ce65:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000ce6b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ce6f:	85 c0                	test   eax,eax
c000ce71:	74 13                	je     c000ce86 <int_handler+0x56>
c000ce73:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000ce76:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ce7a:	74 2c                	je     c000cea8 <int_handler+0x78>
c000ce7c:	83 ec 08             	sub    esp,0x8
c000ce7f:	52                   	push   edx
c000ce80:	57                   	push   edi
c000ce81:	ff d0                	call   eax
c000ce83:	83 c4 10             	add    esp,0x10
c000ce86:	83 c3 01             	add    ebx,0x1
c000ce89:	83 fb 04             	cmp    ebx,0x4
c000ce8c:	75 dd                	jne    c000ce6b <int_handler+0x3b>
c000ce8e:	83 c4 0c             	add    esp,0xc
c000ce91:	31 c0                	xor    eax,eax
c000ce93:	5b                   	pop    ebx
c000ce94:	31 d2                	xor    edx,edx
c000ce96:	5e                   	pop    esi
c000ce97:	5f                   	pop    edi
c000ce98:	5d                   	pop    ebp
c000ce99:	c3                   	ret    
c000ce9a:	83 ec 0c             	sub    esp,0xc
c000ce9d:	50                   	push   eax
c000ce9e:	e8 a5 b4 00 00       	call   c0018348 <HalEndOfInterrupt(int)>
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	eb b2                	jmp    c000ce5a <int_handler+0x2a>
c000cea8:	83 ec 08             	sub    esp,0x8
c000ceab:	52                   	push   edx
c000ceac:	57                   	push   edi
c000cead:	ff d0                	call   eax
c000ceaf:	83 c4 10             	add    esp,0x10
c000ceb2:	83 c4 0c             	add    esp,0xc
c000ceb5:	5b                   	pop    ebx
c000ceb6:	5e                   	pop    esi
c000ceb7:	5f                   	pop    edi
c000ceb8:	5d                   	pop    ebp
c000ceb9:	c3                   	ret    

c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ceba:	56                   	push   esi
c000cebb:	31 c0                	xor    eax,eax
c000cebd:	53                   	push   ebx
c000cebe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cec2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cec6:	89 ca                	mov    edx,ecx
c000cec8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cecc:	c1 e2 04             	shl    edx,0x4
c000cecf:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000ced7:	74 17                	je     c000cef0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000ced9:	83 c0 01             	add    eax,0x1
c000cedc:	83 f8 04             	cmp    eax,0x4
c000cedf:	75 ee                	jne    c000cecf <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cee1:	c7 44 24 0c 64 1b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021b64
c000cee9:	5b                   	pop    ebx
c000ceea:	5e                   	pop    esi
c000ceeb:	e9 ef 46 00 00       	jmp    c00115df <KePanic(char const*)>
c000cef0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cef3:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cefa:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf01:	5b                   	pop    ebx
c000cf02:	5e                   	pop    esi
c000cf03:	c3                   	ret    

c000cf04 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf04:	57                   	push   edi
c000cf05:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf0b:	56                   	push   esi
c000cf0c:	53                   	push   ebx
c000cf0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cf11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cf15:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf1c:	74 54                	je     c000cf72 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cf1e:	89 c7                	mov    edi,eax
c000cf20:	84 c0                	test   al,al
c000cf22:	74 1d                	je     c000cf41 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cf24:	83 fe 0f             	cmp    esi,0xf
c000cf27:	0f 8f d5 00 00 00    	jg     c000d002 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cf2d:	0f b6 b6 68 36 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc998]
c000cf34:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf3c:	d1 ef                	shr    edi,1
c000cf3e:	83 e7 01             	and    edi,0x1
c000cf41:	83 ec 08             	sub    esp,0x8
c000cf44:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf49:	31 db                	xor    ebx,ebx
c000cf4b:	50                   	push   eax
c000cf4c:	68 71 1b 02 c0       	push   0xc0021b71
c000cf51:	e8 ef d9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cf56:	83 c4 10             	add    esp,0x10
c000cf59:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf5e:	85 c0                	test   eax,eax
c000cf60:	7f 55                	jg     c000cfb7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cf62:	83 ec 0c             	sub    esp,0xc
c000cf65:	68 88 1b 02 c0       	push   0xc0021b88
c000cf6a:	e8 70 46 00 00       	call   c00115df <KePanic(char const*)>
c000cf6f:	83 c4 10             	add    esp,0x10
c000cf72:	8d 7e 20             	lea    edi,[esi+0x20]
c000cf75:	89 f8                	mov    eax,edi
c000cf77:	31 d2                	xor    edx,edx
c000cf79:	c1 e0 04             	shl    eax,0x4
c000cf7c:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cf83:	85 c9                	test   ecx,ecx
c000cf85:	0f 84 8e 00 00 00    	je     c000d019 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cf8b:	83 c2 01             	add    edx,0x1
c000cf8e:	83 fa 04             	cmp    edx,0x4
c000cf91:	75 e9                	jne    c000cf7c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cf93:	83 ec 0c             	sub    esp,0xc
c000cf96:	68 dc 1b 02 c0       	push   0xc0021bdc
c000cf9b:	e8 3f 46 00 00       	call   c00115df <KePanic(char const*)>
c000cfa0:	83 c4 10             	add    esp,0x10
c000cfa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cfa8:	5b                   	pop    ebx
c000cfa9:	5e                   	pop    esi
c000cfaa:	5f                   	pop    edi
c000cfab:	c3                   	ret    
c000cfac:	83 c3 01             	add    ebx,0x1
c000cfaf:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000cfb5:	7e ab                	jle    c000cf62 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cfb7:	83 ec 08             	sub    esp,0x8
c000cfba:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000cfc1:	56                   	push   esi
c000cfc2:	50                   	push   eax
c000cfc3:	e8 0a 1b 01 00       	call   c001ead2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cfc8:	83 c4 10             	add    esp,0x10
c000cfcb:	84 c0                	test   al,al
c000cfcd:	74 dd                	je     c000cfac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cfcf:	83 ec 04             	sub    esp,0x4
c000cfd2:	89 f8                	mov    eax,edi
c000cfd4:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000cfdb:	0f b6 f8             	movzx  edi,al
c000cfde:	57                   	push   edi
c000cfdf:	8d 7e 20             	lea    edi,[esi+0x20]
c000cfe2:	6a 00                	push   0x0
c000cfe4:	89 f8                	mov    eax,edi
c000cfe6:	0f b6 c0             	movzx  eax,al
c000cfe9:	50                   	push   eax
c000cfea:	89 f0                	mov    eax,esi
c000cfec:	6a 00                	push   0x0
c000cfee:	0f b6 c0             	movzx  eax,al
c000cff1:	6a 00                	push   0x0
c000cff3:	50                   	push   eax
c000cff4:	53                   	push   ebx
c000cff5:	e8 44 1c 01 00       	call   c001ec3e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cffa:	83 c4 20             	add    esp,0x20
c000cffd:	e9 73 ff ff ff       	jmp    c000cf75 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000d002:	83 ec 0c             	sub    esp,0xc
c000d005:	31 ff                	xor    edi,edi
c000d007:	68 a4 1b 02 c0       	push   0xc0021ba4
c000d00c:	e8 ce 45 00 00       	call   c00115df <KePanic(char const*)>
c000d011:	83 c4 10             	add    esp,0x10
c000d014:	e9 28 ff ff ff       	jmp    c000cf41 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000d019:	8d 04 ba             	lea    eax,[edx+edi*4]
c000d01c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d020:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d027:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d02b:	5b                   	pop    ebx
c000d02c:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d033:	89 f0                	mov    eax,esi
c000d035:	5e                   	pop    esi
c000d036:	5f                   	pop    edi
c000d037:	c3                   	ret    

c000d038 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d038:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d03c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d040:	c1 e0 04             	shl    eax,0x4
c000d043:	8d 50 10             	lea    edx,[eax+0x10]
c000d046:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d04c:	74 08                	je     c000d056 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d04e:	83 c0 04             	add    eax,0x4
c000d051:	39 d0                	cmp    eax,edx
c000d053:	75 f1                	jne    c000d046 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d055:	c3                   	ret    
c000d056:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d060:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d06a:	eb e2                	jmp    c000d04e <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d06c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d06c:	53                   	push   ebx
c000d06d:	83 ec 08             	sub    esp,0x8
c000d070:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d074:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d079:	74 0e                	je     c000d089 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d07b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d080:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d087:	75 37                	jne    c000d0c0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d08d:	83 c0 20             	add    eax,0x20
c000d090:	c1 e0 04             	shl    eax,0x4
c000d093:	8d 50 10             	lea    edx,[eax+0x10]
c000d096:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000d09c:	74 0c                	je     c000d0aa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d09e:	83 c0 04             	add    eax,0x4
c000d0a1:	39 d0                	cmp    eax,edx
c000d0a3:	75 f1                	jne    c000d096 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d0a5:	83 c4 08             	add    esp,0x8
c000d0a8:	5b                   	pop    ebx
c000d0a9:	c3                   	ret    
c000d0aa:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0b4:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0be:	eb de                	jmp    c000d09e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d0c0:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d0c5:	7f 11                	jg     c000d0d8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000d0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0cb:	0f b6 80 68 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc998]
c000d0d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0d6:	eb b1                	jmp    c000d089 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d0d8:	83 ec 0c             	sub    esp,0xc
c000d0db:	68 95 1b 02 c0       	push   0xc0021b95
c000d0e0:	e8 fa 44 00 00       	call   c00115df <KePanic(char const*)>
c000d0e5:	83 c4 10             	add    esp,0x10
c000d0e8:	eb 9f                	jmp    c000d089 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d0ea <setupINTS()>:
c000d0ea:	31 c0                	xor    eax,eax
c000d0ec:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0f6:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d100:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000d10a:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000d114:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000d11e:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000d128:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000d132:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000d13c:	83 c0 10             	add    eax,0x10
c000d13f:	3d 00 10 00 00       	cmp    eax,0x1000
c000d144:	75 a6                	jne    c000d0ec <setupINTS()+0x2>
c000d146:	c3                   	ret    

c000d147 <convertLegacyIRQNumber(int)>:
c000d147:	83 ec 0c             	sub    esp,0xc
c000d14a:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d154:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d15b:	74 0c                	je     c000d169 <convertLegacyIRQNumber(int)+0x22>
c000d15d:	83 f8 0f             	cmp    eax,0xf
c000d160:	7f 0b                	jg     c000d16d <convertLegacyIRQNumber(int)+0x26>
c000d162:	0f b6 80 68 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc998]
c000d169:	83 c4 0c             	add    esp,0xc
c000d16c:	c3                   	ret    
c000d16d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d171:	83 ec 0c             	sub    esp,0xc
c000d174:	68 a4 1b 02 c0       	push   0xc0021ba4
c000d179:	e8 61 44 00 00       	call   c00115df <KePanic(char const*)>
c000d17e:	83 c4 10             	add    esp,0x10
c000d181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d185:	83 c4 0c             	add    esp,0xc
c000d188:	c3                   	ret    
c000d189:	90                   	nop

c000d18a <startGUI(void*)>:
c000d18a:	55                   	push   ebp
c000d18b:	89 e5                	mov    ebp,esp
c000d18d:	53                   	push   ebx
c000d18e:	83 ec 04             	sub    esp,0x4
c000d191:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d196:	83 e8 01             	sub    eax,0x1
c000d199:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d19e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1a3:	85 c0                	test   eax,eax
c000d1a5:	75 01                	jne    c000d1a8 <startGUI(void*)+0x1e>
c000d1a7:	fb                   	sti    
c000d1a8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1ae:	83 ec 08             	sub    esp,0x8
c000d1b1:	6a 01                	push   0x1
c000d1b3:	68 01 1c 02 c0       	push   0xc0021c01
c000d1b8:	e8 62 84 00 00       	call   c001561f <Thr::loadDLL(char const*, bool)>
c000d1bd:	83 c4 10             	add    esp,0x10
c000d1c0:	83 ec 08             	sub    esp,0x8
c000d1c3:	53                   	push   ebx
c000d1c4:	50                   	push   eax
c000d1c5:	e8 86 86 00 00       	call   c0015850 <Thr::executeDLL(unsigned long, void*)>
c000d1ca:	83 c4 10             	add    esp,0x10
c000d1cd:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1d3:	83 ec 08             	sub    esp,0x8
c000d1d6:	6a 01                	push   0x1
c000d1d8:	68 1b 1c 02 c0       	push   0xc0021c1b
c000d1dd:	e8 3d 84 00 00       	call   c001561f <Thr::loadDLL(char const*, bool)>
c000d1e2:	83 c4 10             	add    esp,0x10
c000d1e5:	83 ec 08             	sub    esp,0x8
c000d1e8:	53                   	push   ebx
c000d1e9:	50                   	push   eax
c000d1ea:	e8 61 86 00 00       	call   c0015850 <Thr::executeDLL(unsigned long, void*)>
c000d1ef:	83 c4 10             	add    esp,0x10
c000d1f2:	90                   	nop
c000d1f3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d1f6:	c9                   	leave  
c000d1f7:	c3                   	ret    

c000d1f8 <startGUIVESA(void*)>:
c000d1f8:	55                   	push   ebp
c000d1f9:	89 e5                	mov    ebp,esp
c000d1fb:	53                   	push   ebx
c000d1fc:	83 ec 04             	sub    esp,0x4
c000d1ff:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d204:	83 e8 01             	sub    eax,0x1
c000d207:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d20c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d211:	85 c0                	test   eax,eax
c000d213:	75 01                	jne    c000d216 <startGUIVESA(void*)+0x1e>
c000d215:	fb                   	sti    
c000d216:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d21c:	83 ec 08             	sub    esp,0x8
c000d21f:	6a 01                	push   0x1
c000d221:	68 39 1c 02 c0       	push   0xc0021c39
c000d226:	e8 f4 83 00 00       	call   c001561f <Thr::loadDLL(char const*, bool)>
c000d22b:	83 c4 10             	add    esp,0x10
c000d22e:	83 ec 08             	sub    esp,0x8
c000d231:	53                   	push   ebx
c000d232:	50                   	push   eax
c000d233:	e8 18 86 00 00       	call   c0015850 <Thr::executeDLL(unsigned long, void*)>
c000d238:	83 c4 10             	add    esp,0x10
c000d23b:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d241:	83 ec 08             	sub    esp,0x8
c000d244:	6a 01                	push   0x1
c000d246:	68 1b 1c 02 c0       	push   0xc0021c1b
c000d24b:	e8 cf 83 00 00       	call   c001561f <Thr::loadDLL(char const*, bool)>
c000d250:	83 c4 10             	add    esp,0x10
c000d253:	83 ec 08             	sub    esp,0x8
c000d256:	53                   	push   ebx
c000d257:	50                   	push   eax
c000d258:	e8 f3 85 00 00       	call   c0015850 <Thr::executeDLL(unsigned long, void*)>
c000d25d:	83 c4 10             	add    esp,0x10
c000d260:	90                   	nop
c000d261:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d264:	c9                   	leave  
c000d265:	c3                   	ret    

c000d266 <sendKeyToTerminal(unsigned char)>:
c000d266:	55                   	push   ebp
c000d267:	89 e5                	mov    ebp,esp
c000d269:	83 ec 28             	sub    esp,0x28
c000d26c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d26f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d272:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d277:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d27b:	83 ec 08             	sub    esp,0x8
c000d27e:	52                   	push   edx
c000d27f:	50                   	push   eax
c000d280:	e8 31 bb ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d285:	83 c4 10             	add    esp,0x10
c000d288:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d28c:	83 f8 0a             	cmp    eax,0xa
c000d28f:	74 16                	je     c000d2a7 <sendKeyToTerminal(unsigned char)+0x41>
c000d291:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d295:	83 f8 03             	cmp    eax,0x3
c000d298:	74 0d                	je     c000d2a7 <sendKeyToTerminal(unsigned char)+0x41>
c000d29a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d29e:	83 f8 1c             	cmp    eax,0x1c
c000d2a1:	0f 85 97 00 00 00    	jne    c000d33e <sendKeyToTerminal(unsigned char)+0xd8>
c000d2a7:	fa                   	cli    
c000d2a8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2ad:	83 c0 01             	add    eax,0x1
c000d2b0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2b5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2ba:	83 c0 01             	add    eax,0x1
c000d2bd:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d2c2:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d2c7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d2ca:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d2d4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d2d8:	74 1f                	je     c000d2f9 <sendKeyToTerminal(unsigned char)+0x93>
c000d2da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d2dd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d2e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d2e3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d2e6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d2e9:	83 ec 0c             	sub    esp,0xc
c000d2ec:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d2ef:	e8 a4 92 00 00       	call   c0016598 <unblockTask(ThreadControlBlock*)>
c000d2f4:	83 c4 10             	add    esp,0x10
c000d2f7:	eb db                	jmp    c000d2d4 <sendKeyToTerminal(unsigned char)+0x6e>
c000d2f9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2fe:	83 e8 01             	sub    eax,0x1
c000d301:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d306:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d30b:	85 c0                	test   eax,eax
c000d30d:	75 18                	jne    c000d327 <sendKeyToTerminal(unsigned char)+0xc1>
c000d30f:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d314:	85 c0                	test   eax,eax
c000d316:	74 0f                	je     c000d327 <sendKeyToTerminal(unsigned char)+0xc1>
c000d318:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d322:	e8 59 8d 00 00       	call   c0016080 <schedule()>
c000d327:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d32c:	83 e8 01             	sub    eax,0x1
c000d32f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d334:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d339:	85 c0                	test   eax,eax
c000d33b:	75 01                	jne    c000d33e <sendKeyToTerminal(unsigned char)+0xd8>
c000d33d:	fb                   	sti    
c000d33e:	90                   	nop
c000d33f:	c9                   	leave  
c000d340:	c3                   	ret    

c000d341 <sendKeyboardToken(KeyboardToken)>:
c000d341:	55                   	push   ebp
c000d342:	89 e5                	mov    ebp,esp
c000d344:	83 ec 18             	sub    esp,0x18
c000d347:	e8 e3 42 00 00       	call   c001162f <KeUserIOReceived()>
c000d34c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d34f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d352:	0f b7 c0             	movzx  eax,ax
c000d355:	83 f2 01             	xor    edx,0x1
c000d358:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d35e:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d363:	85 c0                	test   eax,eax
c000d365:	74 24                	je     c000d38b <sendKeyboardToken(KeyboardToken)+0x4a>
c000d367:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d36d:	83 ec 04             	sub    esp,0x4
c000d370:	68 40 b4 02 c0       	push   0xc002b440
c000d375:	83 ec 08             	sub    esp,0x8
c000d378:	89 e2                	mov    edx,esp
c000d37a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d37d:	89 02                	mov    DWORD PTR [edx],eax
c000d37f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d382:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d386:	ff d1                	call   ecx
c000d388:	83 c4 10             	add    esp,0x10
c000d38b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d38f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d392:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d397:	0f b6 d2             	movzx  edx,dl
c000d39a:	0f b6 c0             	movzx  eax,al
c000d39d:	39 c2                	cmp    edx,eax
c000d39f:	74 1c                	je     c000d3bd <sendKeyboardToken(KeyboardToken)+0x7c>
c000d3a1:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d3a4:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d3a9:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3ae:	0f b6 c0             	movzx  eax,al
c000d3b1:	83 ec 0c             	sub    esp,0xc
c000d3b4:	50                   	push   eax
c000d3b5:	e8 48 b1 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d3ba:	83 c4 10             	add    esp,0x10
c000d3bd:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d3c0:	0f b6 c0             	movzx  eax,al
c000d3c3:	85 c0                	test   eax,eax
c000d3c5:	0f 84 da 00 00 00    	je     c000d4a5 <sendKeyboardToken(KeyboardToken)+0x164>
c000d3cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ce:	0f b7 c0             	movzx  eax,ax
c000d3d1:	3d 18 03 00 00       	cmp    eax,0x318
c000d3d6:	75 06                	jne    c000d3de <sendKeyboardToken(KeyboardToken)+0x9d>
c000d3d8:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d3de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e1:	0f b7 c0             	movzx  eax,ax
c000d3e4:	3d 19 03 00 00       	cmp    eax,0x319
c000d3e9:	75 06                	jne    c000d3f1 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d3eb:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d3f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f4:	0f b7 c0             	movzx  eax,ax
c000d3f7:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d3fc:	75 06                	jne    c000d404 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d3fe:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d407:	0f b7 c0             	movzx  eax,ax
c000d40a:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d40f:	75 06                	jne    c000d417 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d411:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d417:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d41a:	0f b7 c0             	movzx  eax,ax
c000d41d:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d422:	75 06                	jne    c000d42a <sendKeyboardToken(KeyboardToken)+0xe9>
c000d424:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d42a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d42d:	0f b7 c0             	movzx  eax,ax
c000d430:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d435:	75 06                	jne    c000d43d <sendKeyboardToken(KeyboardToken)+0xfc>
c000d437:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d43d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d440:	0f b7 c0             	movzx  eax,ax
c000d443:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d448:	75 06                	jne    c000d450 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d44a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d453:	0f b7 c0             	movzx  eax,ax
c000d456:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d45b:	75 06                	jne    c000d463 <sendKeyboardToken(KeyboardToken)+0x122>
c000d45d:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d466:	0f b7 c0             	movzx  eax,ax
c000d469:	3d 20 03 00 00       	cmp    eax,0x320
c000d46e:	75 06                	jne    c000d476 <sendKeyboardToken(KeyboardToken)+0x135>
c000d470:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d479:	0f b7 c0             	movzx  eax,ax
c000d47c:	3d 21 03 00 00       	cmp    eax,0x321
c000d481:	75 06                	jne    c000d489 <sendKeyboardToken(KeyboardToken)+0x148>
c000d483:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d48c:	0f b7 c0             	movzx  eax,ax
c000d48f:	3d 22 03 00 00       	cmp    eax,0x322
c000d494:	0f 85 f1 00 00 00    	jne    c000d58b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d49a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d4a0:	e9 e6 00 00 00       	jmp    c000d58b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a8:	0f b7 c0             	movzx  eax,ax
c000d4ab:	3d 18 03 00 00       	cmp    eax,0x318
c000d4b0:	75 0a                	jne    c000d4bc <sendKeyboardToken(KeyboardToken)+0x17b>
c000d4b2:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d4b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4bf:	0f b7 c0             	movzx  eax,ax
c000d4c2:	3d 19 03 00 00       	cmp    eax,0x319
c000d4c7:	75 0a                	jne    c000d4d3 <sendKeyboardToken(KeyboardToken)+0x192>
c000d4c9:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d4cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d6:	0f b7 c0             	movzx  eax,ax
c000d4d9:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d4de:	75 0a                	jne    c000d4ea <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d4e0:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d4e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ed:	0f b7 c0             	movzx  eax,ax
c000d4f0:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d4f5:	75 0a                	jne    c000d501 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d4f7:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d4fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d504:	0f b7 c0             	movzx  eax,ax
c000d507:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d50c:	75 0a                	jne    c000d518 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d50e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d514:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d51b:	0f b7 c0             	movzx  eax,ax
c000d51e:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d523:	75 0a                	jne    c000d52f <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d525:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d52b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d52f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d532:	0f b7 c0             	movzx  eax,ax
c000d535:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d53a:	75 0a                	jne    c000d546 <sendKeyboardToken(KeyboardToken)+0x205>
c000d53c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d542:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d549:	0f b7 c0             	movzx  eax,ax
c000d54c:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d551:	75 0a                	jne    c000d55d <sendKeyboardToken(KeyboardToken)+0x21c>
c000d553:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d559:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d55d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d560:	0f b7 c0             	movzx  eax,ax
c000d563:	3d 20 03 00 00       	cmp    eax,0x320
c000d568:	75 0a                	jne    c000d574 <sendKeyboardToken(KeyboardToken)+0x233>
c000d56a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d570:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d577:	0f b7 c0             	movzx  eax,ax
c000d57a:	3d 21 03 00 00       	cmp    eax,0x321
c000d57f:	75 0a                	jne    c000d58b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d581:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d587:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d58b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58e:	0f b7 c0             	movzx  eax,ax
c000d591:	3d 00 02 00 00       	cmp    eax,0x200
c000d596:	75 2f                	jne    c000d5c7 <sendKeyboardToken(KeyboardToken)+0x286>
c000d598:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d59d:	83 f0 01             	xor    eax,0x1
c000d5a0:	0f b6 c0             	movzx  eax,al
c000d5a3:	85 c0                	test   eax,eax
c000d5a5:	74 20                	je     c000d5c7 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5a7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5ac:	6a 01                	push   0x1
c000d5ae:	6a 00                	push   0x0
c000d5b0:	68 8a d1 00 c0       	push   0xc000d18a
c000d5b5:	50                   	push   eax
c000d5b6:	e8 75 88 00 00       	call   c0015e30 <Process::createThread(void (*)(void*), void*, int)>
c000d5bb:	83 c4 10             	add    esp,0x10
c000d5be:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d5c5:	eb 3a                	jmp    c000d601 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ca:	0f b7 c0             	movzx  eax,ax
c000d5cd:	3d 01 02 00 00       	cmp    eax,0x201
c000d5d2:	75 2d                	jne    c000d601 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5d4:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5d9:	83 f0 01             	xor    eax,0x1
c000d5dc:	0f b6 c0             	movzx  eax,al
c000d5df:	85 c0                	test   eax,eax
c000d5e1:	74 1e                	je     c000d601 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5e3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5e8:	6a 01                	push   0x1
c000d5ea:	6a 00                	push   0x0
c000d5ec:	68 f8 d1 00 c0       	push   0xc000d1f8
c000d5f1:	50                   	push   eax
c000d5f2:	e8 39 88 00 00       	call   c0015e30 <Process::createThread(void (*)(void*), void*, int)>
c000d5f7:	83 c4 10             	add    esp,0x10
c000d5fa:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d604:	0f b7 c0             	movzx  eax,ax
c000d607:	3d 25 03 00 00       	cmp    eax,0x325
c000d60c:	75 06                	jne    c000d614 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d60e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d617:	0f b7 c0             	movzx  eax,ax
c000d61a:	3d 24 03 00 00       	cmp    eax,0x324
c000d61f:	75 06                	jne    c000d627 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d621:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d62a:	0f b7 c0             	movzx  eax,ax
c000d62d:	3d 23 03 00 00       	cmp    eax,0x323
c000d632:	75 06                	jne    c000d63a <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d634:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d63a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d63d:	0f b7 c0             	movzx  eax,ax
c000d640:	3d 26 03 00 00       	cmp    eax,0x326
c000d645:	75 06                	jne    c000d64d <sendKeyboardToken(KeyboardToken)+0x30c>
c000d647:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d64d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d650:	0f b7 c0             	movzx  eax,ax
c000d653:	3d 27 03 00 00       	cmp    eax,0x327
c000d658:	75 06                	jne    c000d660 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d65a:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d663:	0f b7 c0             	movzx  eax,ax
c000d666:	3d 22 03 00 00       	cmp    eax,0x322
c000d66b:	75 06                	jne    c000d673 <sendKeyboardToken(KeyboardToken)+0x332>
c000d66d:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d673:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d677:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d67a:	83 f0 01             	xor    eax,0x1
c000d67d:	0f b6 c0             	movzx  eax,al
c000d680:	85 c0                	test   eax,eax
c000d682:	74 7c                	je     c000d700 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d684:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d689:	0f b6 c0             	movzx  eax,al
c000d68c:	85 c0                	test   eax,eax
c000d68e:	74 43                	je     c000d6d3 <sendKeyboardToken(KeyboardToken)+0x392>
c000d690:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d694:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d698:	85 c0                	test   eax,eax
c000d69a:	74 2b                	je     c000d6c7 <sendKeyboardToken(KeyboardToken)+0x386>
c000d69c:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d6a2:	89 d0                	mov    eax,edx
c000d6a4:	c1 e0 02             	shl    eax,0x2
c000d6a7:	01 d0                	add    eax,edx
c000d6a9:	01 c0                	add    eax,eax
c000d6ab:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6b3:	0f b7 c0             	movzx  eax,ax
c000d6b6:	8d 50 d0             	lea    edx,[eax-0x30]
c000d6b9:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6be:	01 d0                	add    eax,edx
c000d6c0:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6c5:	eb 71                	jmp    c000d738 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6c7:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d6d1:	eb 65                	jmp    c000d738 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6d3:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6d8:	85 c0                	test   eax,eax
c000d6da:	74 18                	je     c000d6f4 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d6dc:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6e1:	0f b6 c0             	movzx  eax,al
c000d6e4:	83 ec 0c             	sub    esp,0xc
c000d6e7:	50                   	push   eax
c000d6e8:	e8 79 fb ff ff       	call   c000d266 <sendKeyToTerminal(unsigned char)>
c000d6ed:	83 c4 10             	add    esp,0x10
c000d6f0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6f4:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d6fe:	eb 38                	jmp    c000d738 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d703:	0f b7 c0             	movzx  eax,ax
c000d706:	3d 01 01 00 00       	cmp    eax,0x101
c000d70b:	75 2b                	jne    c000d738 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d70d:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d712:	85 c0                	test   eax,eax
c000d714:	74 18                	je     c000d72e <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d716:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d71b:	0f b6 c0             	movzx  eax,al
c000d71e:	83 ec 0c             	sub    esp,0xc
c000d721:	50                   	push   eax
c000d722:	e8 3f fb ff ff       	call   c000d266 <sendKeyToTerminal(unsigned char)>
c000d727:	83 c4 10             	add    esp,0x10
c000d72a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d72e:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d738:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d73b:	83 f0 01             	xor    eax,0x1
c000d73e:	0f b6 c0             	movzx  eax,al
c000d741:	85 c0                	test   eax,eax
c000d743:	74 5a                	je     c000d79f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d745:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d748:	83 f0 01             	xor    eax,0x1
c000d74b:	0f b6 c0             	movzx  eax,al
c000d74e:	85 c0                	test   eax,eax
c000d750:	74 4d                	je     c000d79f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d752:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d757:	83 f0 01             	xor    eax,0x1
c000d75a:	0f b6 c0             	movzx  eax,al
c000d75d:	85 c0                	test   eax,eax
c000d75f:	74 3e                	je     c000d79f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d764:	0f b7 c0             	movzx  eax,ax
c000d767:	83 f8 1f             	cmp    eax,0x1f
c000d76a:	76 0b                	jbe    c000d777 <sendKeyboardToken(KeyboardToken)+0x436>
c000d76c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d76f:	0f b7 c0             	movzx  eax,ax
c000d772:	83 f8 7e             	cmp    eax,0x7e
c000d775:	76 16                	jbe    c000d78d <sendKeyboardToken(KeyboardToken)+0x44c>
c000d777:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d77a:	0f b7 c0             	movzx  eax,ax
c000d77d:	83 f8 0a             	cmp    eax,0xa
c000d780:	74 0b                	je     c000d78d <sendKeyboardToken(KeyboardToken)+0x44c>
c000d782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d785:	0f b7 c0             	movzx  eax,ax
c000d788:	83 f8 08             	cmp    eax,0x8
c000d78b:	75 12                	jne    c000d79f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d78d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d790:	0f b6 c0             	movzx  eax,al
c000d793:	83 ec 0c             	sub    esp,0xc
c000d796:	50                   	push   eax
c000d797:	e8 ca fa ff ff       	call   c000d266 <sendKeyToTerminal(unsigned char)>
c000d79c:	83 c4 10             	add    esp,0x10
c000d79f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7a2:	83 f0 01             	xor    eax,0x1
c000d7a5:	0f b6 c0             	movzx  eax,al
c000d7a8:	85 c0                	test   eax,eax
c000d7aa:	74 5d                	je     c000d809 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7ac:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7af:	83 f0 01             	xor    eax,0x1
c000d7b2:	0f b6 c0             	movzx  eax,al
c000d7b5:	85 c0                	test   eax,eax
c000d7b7:	74 50                	je     c000d809 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7b9:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7be:	0f b6 c0             	movzx  eax,al
c000d7c1:	85 c0                	test   eax,eax
c000d7c3:	74 44                	je     c000d809 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c8:	0f b7 c0             	movzx  eax,ax
c000d7cb:	83 f8 3f             	cmp    eax,0x3f
c000d7ce:	76 39                	jbe    c000d809 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d3:	0f b7 c0             	movzx  eax,ax
c000d7d6:	83 f8 7f             	cmp    eax,0x7f
c000d7d9:	77 2e                	ja     c000d809 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7de:	88 c2                	mov    dl,al
c000d7e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7e3:	0f b7 c0             	movzx  eax,ax
c000d7e6:	83 f8 5f             	cmp    eax,0x5f
c000d7e9:	76 04                	jbe    c000d7ef <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d7eb:	b0 20                	mov    al,0x20
c000d7ed:	eb 02                	jmp    c000d7f1 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d7ef:	b0 00                	mov    al,0x0
c000d7f1:	89 d1                	mov    ecx,edx
c000d7f3:	29 c1                	sub    ecx,eax
c000d7f5:	89 c8                	mov    eax,ecx
c000d7f7:	83 e8 40             	sub    eax,0x40
c000d7fa:	0f b6 c0             	movzx  eax,al
c000d7fd:	83 ec 0c             	sub    esp,0xc
c000d800:	50                   	push   eax
c000d801:	e8 60 fa ff ff       	call   c000d266 <sendKeyToTerminal(unsigned char)>
c000d806:	83 c4 10             	add    esp,0x10
c000d809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d80c:	0f b7 c0             	movzx  eax,ax
c000d80f:	3d 00 03 00 00       	cmp    eax,0x300
c000d814:	75 12                	jne    c000d828 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d816:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d819:	83 f0 01             	xor    eax,0x1
c000d81c:	0f b6 c0             	movzx  eax,al
c000d81f:	85 c0                	test   eax,eax
c000d821:	74 05                	je     c000d828 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d823:	e8 db ac ff ff       	call   c0008503 <doTerminalCycle()>
c000d828:	90                   	nop
c000d829:	c9                   	leave  
c000d82a:	c3                   	ret    

c000d82b <clearInternalKeybuffer(VgaText*)>:
c000d82b:	55                   	push   ebp
c000d82c:	89 e5                	mov    ebp,esp
c000d82e:	83 ec 08             	sub    esp,0x8
c000d831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d834:	05 02 01 00 00       	add    eax,0x102
c000d839:	83 ec 0c             	sub    esp,0xc
c000d83c:	50                   	push   eax
c000d83d:	e8 2e 2d ff ff       	call   c0000570 <strlen>
c000d842:	83 c4 10             	add    esp,0x10
c000d845:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d848:	81 c2 02 01 00 00    	add    edx,0x102
c000d84e:	83 ec 04             	sub    esp,0x4
c000d851:	50                   	push   eax
c000d852:	6a 00                	push   0x0
c000d854:	52                   	push   edx
c000d855:	e8 96 2c ff ff       	call   c00004f0 <memset>
c000d85a:	83 c4 10             	add    esp,0x10
c000d85d:	90                   	nop
c000d85e:	c9                   	leave  
c000d85f:	c3                   	ret    

c000d860 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d860:	55                   	push   ebp
c000d861:	89 e5                	mov    ebp,esp
c000d863:	83 ec 18             	sub    esp,0x18
c000d866:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d86b:	85 c0                	test   eax,eax
c000d86d:	74 2a                	je     c000d899 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d86f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d875:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d87b:	83 ec 04             	sub    esp,0x4
c000d87e:	68 40 b4 02 c0       	push   0xc002b440
c000d883:	83 ec 08             	sub    esp,0x8
c000d886:	89 e2                	mov    edx,esp
c000d888:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d88b:	89 02                	mov    DWORD PTR [edx],eax
c000d88d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d890:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d894:	ff d1                	call   ecx
c000d896:	83 c4 10             	add    esp,0x10
c000d899:	fb                   	sti    
c000d89a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d8a1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d8a5:	0f 84 0d 01 00 00    	je     c000d9b8 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d8ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8ae:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d8b4:	0f be c0             	movsx  eax,al
c000d8b7:	85 c0                	test   eax,eax
c000d8b9:	75 2c                	jne    c000d8e7 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d8bb:	fa                   	cli    
c000d8bc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8c1:	83 c0 01             	add    eax,0x1
c000d8c4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d8c9:	e8 b2 87 00 00       	call   c0016080 <schedule()>
c000d8ce:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8d3:	83 e8 01             	sub    eax,0x1
c000d8d6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d8db:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8e0:	85 c0                	test   eax,eax
c000d8e2:	75 c7                	jne    c000d8ab <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d8e4:	fb                   	sti    
c000d8e5:	eb c4                	jmp    c000d8ab <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d8e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d8ea:	8d 50 01             	lea    edx,[eax+0x1]
c000d8ed:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d8f0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8f3:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d8f9:	88 10                	mov    BYTE PTR [eax],dl
c000d8fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8fe:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d904:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d907:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d90b:	83 f8 03             	cmp    eax,0x3
c000d90e:	75 1e                	jne    c000d92e <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d910:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d915:	8b 00                	mov    eax,DWORD PTR [eax]
c000d917:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d91a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d920:	83 ec 08             	sub    esp,0x8
c000d923:	6a 02                	push   0x2
c000d925:	50                   	push   eax
c000d926:	e8 57 41 00 00       	call   c0011a82 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d92b:	83 c4 10             	add    esp,0x10
c000d92e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d932:	83 f8 1c             	cmp    eax,0x1c
c000d935:	75 1e                	jne    c000d955 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d937:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d93c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d93e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d941:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d947:	83 ec 08             	sub    esp,0x8
c000d94a:	6a 09                	push   0x9
c000d94c:	50                   	push   eax
c000d94d:	e8 30 41 00 00       	call   c0011a82 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d952:	83 c4 10             	add    esp,0x10
c000d955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d958:	05 02 01 00 00       	add    eax,0x102
c000d95d:	83 ec 0c             	sub    esp,0xc
c000d960:	50                   	push   eax
c000d961:	e8 0a 2c ff ff       	call   c0000570 <strlen>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d96c:	81 c2 02 01 00 00    	add    edx,0x102
c000d972:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d975:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d978:	81 c2 02 01 00 00    	add    edx,0x102
c000d97e:	83 ec 04             	sub    esp,0x4
c000d981:	50                   	push   eax
c000d982:	51                   	push   ecx
c000d983:	52                   	push   edx
c000d984:	e8 47 2a ff ff       	call   c00003d0 <memmove>
c000d989:	83 c4 10             	add    esp,0x10
c000d98c:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d990:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d994:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d998:	83 f8 0a             	cmp    eax,0xa
c000d99b:	74 16                	je     c000d9b3 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d99d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9a1:	83 f8 03             	cmp    eax,0x3
c000d9a4:	74 0d                	je     c000d9b3 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9a6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9aa:	83 f8 1c             	cmp    eax,0x1c
c000d9ad:	0f 85 ee fe ff ff    	jne    c000d8a1 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d9b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9b6:	eb 03                	jmp    c000d9bb <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d9b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9bb:	c9                   	leave  
c000d9bc:	c3                   	ret    
c000d9bd:	90                   	nop

c000d9be <Keyboard::Keyboard(char const*)>:
c000d9be:	83 ec 0c             	sub    esp,0xc
c000d9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c5:	83 ec 08             	sub    esp,0x8
c000d9c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9cc:	50                   	push   eax
c000d9cd:	e8 4c f1 ff ff       	call   c000cb1e <Device::Device(char const*)>
c000d9d2:	83 c4 10             	add    esp,0x10
c000d9d5:	ba 5c 1c 02 c0       	mov    edx,0xc0021c5c
c000d9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9de:	89 10                	mov    DWORD PTR [eax],edx
c000d9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9e4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d9ee:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000d9f5:	90                   	nop
c000d9f6:	83 c4 0c             	add    esp,0xc
c000d9f9:	c3                   	ret    

c000d9fa <Keyboard::~Keyboard()>:
c000d9fa:	83 ec 0c             	sub    esp,0xc
c000d9fd:	ba 5c 1c 02 c0       	mov    edx,0xc0021c5c
c000da02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da06:	89 10                	mov    DWORD PTR [eax],edx
c000da08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da0c:	83 ec 0c             	sub    esp,0xc
c000da0f:	50                   	push   eax
c000da10:	e8 73 ee ff ff       	call   c000c888 <Device::~Device()>
c000da15:	83 c4 10             	add    esp,0x10
c000da18:	90                   	nop
c000da19:	83 c4 0c             	add    esp,0xc
c000da1c:	c3                   	ret    
c000da1d:	90                   	nop

c000da1e <Keyboard::~Keyboard()>:
c000da1e:	83 ec 0c             	sub    esp,0xc
c000da21:	83 ec 0c             	sub    esp,0xc
c000da24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da28:	e8 cd ff ff ff       	call   c000d9fa <Keyboard::~Keyboard()>
c000da2d:	83 c4 10             	add    esp,0x10
c000da30:	83 ec 08             	sub    esp,0x8
c000da33:	68 5c 01 00 00       	push   0x15c
c000da38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da3c:	e8 d7 cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000da41:	83 c4 10             	add    esp,0x10
c000da44:	83 c4 0c             	add    esp,0xc
c000da47:	c3                   	ret    

c000da48 <LogicalDisk::close(int, int, void*)>:
c000da48:	83 c8 ff             	or     eax,0xffffffff
c000da4b:	c3                   	ret    

c000da4c <LogicalDisk::~LogicalDisk()>:
c000da4c:	83 ec 0c             	sub    esp,0xc
c000da4f:	ba d4 1c 02 c0       	mov    edx,0xc0021cd4
c000da54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da58:	89 10                	mov    DWORD PTR [eax],edx
c000da5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da5e:	83 ec 0c             	sub    esp,0xc
c000da61:	50                   	push   eax
c000da62:	e8 21 ee ff ff       	call   c000c888 <Device::~Device()>
c000da67:	83 c4 10             	add    esp,0x10
c000da6a:	90                   	nop
c000da6b:	83 c4 0c             	add    esp,0xc
c000da6e:	c3                   	ret    
c000da6f:	90                   	nop

c000da70 <LogicalDisk::~LogicalDisk()>:
c000da70:	83 ec 0c             	sub    esp,0xc
c000da73:	83 ec 0c             	sub    esp,0xc
c000da76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da7a:	e8 cd ff ff ff       	call   c000da4c <LogicalDisk::~LogicalDisk()>
c000da7f:	83 c4 10             	add    esp,0x10
c000da82:	83 ec 08             	sub    esp,0x8
c000da85:	68 78 01 00 00       	push   0x178
c000da8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da8e:	e8 85 cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000da93:	83 c4 10             	add    esp,0x10
c000da96:	83 c4 0c             	add    esp,0xc
c000da99:	c3                   	ret    

c000da9a <LogicalDisk::open(int, int, void*)>:
c000da9a:	83 ec 18             	sub    esp,0x18
c000da9d:	68 88 1c 02 c0       	push   0xc0021c88
c000daa2:	e8 38 3b 00 00       	call   c00115df <KePanic(char const*)>
c000daa7:	83 c8 ff             	or     eax,0xffffffff
c000daaa:	83 c4 1c             	add    esp,0x1c
c000daad:	c3                   	ret    

c000daae <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000daae:	53                   	push   ebx
c000daaf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dab3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dab7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dabb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000dac1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000dac7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000dacd:	77 10                	ja     c000dadf <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000dacf:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000dad5:	89 d3                	mov    ebx,edx
c000dad7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000dadd:	72 05                	jb     c000dae4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000dadf:	83 c8 ff             	or     eax,0xffffffff
c000dae2:	89 c2                	mov    edx,eax
c000dae4:	5b                   	pop    ebx
c000dae5:	c3                   	ret    

c000dae6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000dae6:	56                   	push   esi
c000dae7:	83 c8 ff             	or     eax,0xffffffff
c000daea:	53                   	push   ebx
c000daeb:	89 c2                	mov    edx,eax
c000daed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000daf1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000daf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000daf9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000daff:	77 27                	ja     c000db28 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db01:	89 d8                	mov    eax,ebx
c000db03:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db09:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db0f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db14:	89 c2                	mov    edx,eax
c000db16:	73 10                	jae    c000db28 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db18:	89 c8                	mov    eax,ecx
c000db1a:	89 da                	mov    edx,ebx
c000db1c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db22:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db28:	5b                   	pop    ebx
c000db29:	5e                   	pop    esi
c000db2a:	c3                   	ret    
c000db2b:	90                   	nop

c000db2c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db2c:	83 ec 1c             	sub    esp,0x1c
c000db2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db43:	89 04 24             	mov    DWORD PTR [esp],eax
c000db46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db52:	83 ec 08             	sub    esp,0x8
c000db55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db59:	50                   	push   eax
c000db5a:	e8 bf ef ff ff       	call   c000cb1e <Device::Device(char const*)>
c000db5f:	83 c4 10             	add    esp,0x10
c000db62:	ba d4 1c 02 c0       	mov    edx,0xc0021cd4
c000db67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db6b:	89 10                	mov    DWORD PTR [eax],edx
c000db6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db71:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000db78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db7c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000db83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db87:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000db8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db92:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000db9c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dba0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dba4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dba8:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dbae:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dbb4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbb8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dbbb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dbbf:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dbc5:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dbcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbcf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dbd3:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dbd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbdd:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dbe7:	90                   	nop
c000dbe8:	83 c4 1c             	add    esp,0x1c
c000dbeb:	c3                   	ret    

c000dbec <LogicalDisk::assignDriveLetter()>:
c000dbec:	55                   	push   ebp
c000dbed:	57                   	push   edi
c000dbee:	56                   	push   esi
c000dbef:	53                   	push   ebx
c000dbf0:	83 ec 14             	sub    esp,0x14
c000dbf3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dbf7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dbfd:	b0 41                	mov    al,0x41
c000dbff:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc05:	84 d2                	test   dl,dl
c000dc07:	75 02                	jne    c000dc0b <LogicalDisk::assignDriveLetter()+0x1f>
c000dc09:	b0 43                	mov    al,0x43
c000dc0b:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc11:	0f b6 ca             	movzx  ecx,dl
c000dc14:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc18:	0f be e8             	movsx  ebp,al
c000dc1b:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc21:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc25:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc29:	3c 43                	cmp    al,0x43
c000dc2b:	75 10                	jne    c000dc3d <LogicalDisk::assignDriveLetter()+0x51>
c000dc2d:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc34:	75 5a                	jne    c000dc90 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc36:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc3b:	75 53                	jne    c000dc90 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc3d:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc40:	ba 01 00 00 00       	mov    edx,0x1
c000dc45:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc48:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dc4b:	d3 e2                	shl    edx,cl
c000dc4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc51:	89 d7                	mov    edi,edx
c000dc53:	89 d6                	mov    esi,edx
c000dc55:	c1 ff 1f             	sar    edi,0x1f
c000dc58:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dc5c:	21 f9                	and    ecx,edi
c000dc5e:	09 d1                	or     ecx,edx
c000dc60:	75 2e                	jne    c000dc90 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc62:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dc66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc6a:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dc70:	09 f2                	or     edx,esi
c000dc72:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc75:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dc7b:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dc82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc86:	09 fa                	or     edx,edi
c000dc88:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dc8e:	eb 0d                	jmp    c000dc9d <LogicalDisk::assignDriveLetter()+0xb1>
c000dc90:	8d 50 01             	lea    edx,[eax+0x1]
c000dc93:	45                   	inc    ebp
c000dc94:	88 d0                	mov    al,dl
c000dc96:	80 fa 5b             	cmp    dl,0x5b
c000dc99:	75 8e                	jne    c000dc29 <LogicalDisk::assignDriveLetter()+0x3d>
c000dc9b:	31 c0                	xor    eax,eax
c000dc9d:	83 c4 14             	add    esp,0x14
c000dca0:	5b                   	pop    ebx
c000dca1:	5e                   	pop    esi
c000dca2:	5f                   	pop    edi
c000dca3:	5d                   	pop    ebp
c000dca4:	c3                   	ret    
c000dca5:	90                   	nop

c000dca6 <LogicalDisk::mount()>:
c000dca6:	56                   	push   esi
c000dca7:	53                   	push   ebx
c000dca8:	53                   	push   ebx
c000dca9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dcad:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dcb3:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dcbd:	85 db                	test   ebx,ebx
c000dcbf:	74 27                	je     c000dce8 <LogicalDisk::mount()+0x42>
c000dcc1:	51                   	push   ecx
c000dcc2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dcc9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dccb:	83 e8 41             	sub    eax,0x41
c000dcce:	50                   	push   eax
c000dccf:	56                   	push   esi
c000dcd0:	53                   	push   ebx
c000dcd1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dcd4:	83 c4 10             	add    esp,0x10
c000dcd7:	84 c0                	test   al,al
c000dcd9:	74 08                	je     c000dce3 <LogicalDisk::mount()+0x3d>
c000dcdb:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dce1:	eb 07                	jmp    c000dcea <LogicalDisk::mount()+0x44>
c000dce3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dce6:	eb d5                	jmp    c000dcbd <LogicalDisk::mount()+0x17>
c000dce8:	31 c0                	xor    eax,eax
c000dcea:	5a                   	pop    edx
c000dceb:	5b                   	pop    ebx
c000dcec:	5e                   	pop    esi
c000dced:	c3                   	ret    

c000dcee <LogicalDisk::unmount()>:
c000dcee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcf2:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dcfc:	c3                   	ret    
c000dcfd:	90                   	nop

c000dcfe <LogicalDisk::eject()>:
c000dcfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd02:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd08:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd0e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd11:	90                   	nop

c000dd12 <LogicalDisk::unassignDriveLetter()>:
c000dd12:	57                   	push   edi
c000dd13:	56                   	push   esi
c000dd14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd18:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd1f:	85 c9                	test   ecx,ecx
c000dd21:	75 0f                	jne    c000dd32 <LogicalDisk::unassignDriveLetter()+0x20>
c000dd23:	c7 44 24 0c ac 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021cac
c000dd2b:	5e                   	pop    esi
c000dd2c:	5f                   	pop    edi
c000dd2d:	e9 ad 38 00 00       	jmp    c00115df <KePanic(char const*)>
c000dd32:	83 e9 41             	sub    ecx,0x41
c000dd35:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd3c:	b8 01 00 00 00       	mov    eax,0x1
c000dd41:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dd4c:	d3 e0                	shl    eax,cl
c000dd4e:	89 c7                	mov    edi,eax
c000dd50:	f7 d0                	not    eax
c000dd52:	c1 ff 1f             	sar    edi,0x1f
c000dd55:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dd5b:	89 fe                	mov    esi,edi
c000dd5d:	f7 d6                	not    esi
c000dd5f:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000dd65:	5e                   	pop    esi
c000dd66:	5f                   	pop    edi
c000dd67:	c3                   	ret    

c000dd68 <LogicalDisk::read(unsigned long long, int, void*)>:
c000dd68:	57                   	push   edi
c000dd69:	56                   	push   esi
c000dd6a:	53                   	push   ebx
c000dd6b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dd6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd73:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dd77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dd7b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dd81:	77 41                	ja     c000ddc4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000dd83:	99                   	cdq    
c000dd84:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dd8a:	01 c8                	add    eax,ecx
c000dd8c:	11 da                	adc    edx,ebx
c000dd8e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dd94:	19 d7                	sbb    edi,edx
c000dd96:	72 33                	jb     c000ddcb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000dd98:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dd9e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dda4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dda8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ddac:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ddb2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ddb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddbc:	5b                   	pop    ebx
c000ddbd:	5e                   	pop    esi
c000ddbe:	5f                   	pop    edi
c000ddbf:	e9 c6 0a 00 00       	jmp    c000e88a <VCache::read(unsigned long long, int, void*)>
c000ddc4:	b8 05 00 00 00       	mov    eax,0x5
c000ddc9:	eb 05                	jmp    c000ddd0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ddcb:	b8 07 00 00 00       	mov    eax,0x7
c000ddd0:	5b                   	pop    ebx
c000ddd1:	5e                   	pop    esi
c000ddd2:	5f                   	pop    edi
c000ddd3:	c3                   	ret    

c000ddd4 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ddd4:	57                   	push   edi
c000ddd5:	56                   	push   esi
c000ddd6:	53                   	push   ebx
c000ddd7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dddb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dddf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dde3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dde7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dded:	77 41                	ja     c000de30 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ddef:	99                   	cdq    
c000ddf0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddf6:	01 c8                	add    eax,ecx
c000ddf8:	11 da                	adc    edx,ebx
c000ddfa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de00:	19 d7                	sbb    edi,edx
c000de02:	72 33                	jb     c000de37 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de04:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de0a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de10:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de14:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de18:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de1e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de28:	5b                   	pop    ebx
c000de29:	5e                   	pop    esi
c000de2a:	5f                   	pop    edi
c000de2b:	e9 6c 09 00 00       	jmp    c000e79c <VCache::write(unsigned long long, int, void*)>
c000de30:	b8 05 00 00 00       	mov    eax,0x5
c000de35:	eb 05                	jmp    c000de3c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de37:	b8 07 00 00 00       	mov    eax,0x7
c000de3c:	5b                   	pop    ebx
c000de3d:	5e                   	pop    esi
c000de3e:	5f                   	pop    edi
c000de3f:	c3                   	ret    

c000de40 <Mouse::Mouse(char const*)>:
c000de40:	83 ec 0c             	sub    esp,0xc
c000de43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de47:	83 ec 08             	sub    esp,0x8
c000de4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de4e:	50                   	push   eax
c000de4f:	e8 ca ec ff ff       	call   c000cb1e <Device::Device(char const*)>
c000de54:	83 c4 10             	add    esp,0x10
c000de57:	ba 00 1d 02 c0       	mov    edx,0xc0021d00
c000de5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de60:	89 10                	mov    DWORD PTR [eax],edx
c000de62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de66:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000de70:	90                   	nop
c000de71:	83 c4 0c             	add    esp,0xc
c000de74:	c3                   	ret    
c000de75:	90                   	nop
c000de76:	66 90                	xchg   ax,ax

c000de78 <Mouse::~Mouse()>:
c000de78:	83 ec 0c             	sub    esp,0xc
c000de7b:	ba 00 1d 02 c0       	mov    edx,0xc0021d00
c000de80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de84:	89 10                	mov    DWORD PTR [eax],edx
c000de86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de8a:	83 ec 0c             	sub    esp,0xc
c000de8d:	50                   	push   eax
c000de8e:	e8 f5 e9 ff ff       	call   c000c888 <Device::~Device()>
c000de93:	83 c4 10             	add    esp,0x10
c000de96:	90                   	nop
c000de97:	83 c4 0c             	add    esp,0xc
c000de9a:	c3                   	ret    
c000de9b:	90                   	nop

c000de9c <Mouse::~Mouse()>:
c000de9c:	83 ec 0c             	sub    esp,0xc
c000de9f:	83 ec 0c             	sub    esp,0xc
c000dea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dea6:	e8 cd ff ff ff       	call   c000de78 <Mouse::~Mouse()>
c000deab:	83 c4 10             	add    esp,0x10
c000deae:	83 ec 08             	sub    esp,0x8
c000deb1:	68 58 01 00 00       	push   0x158
c000deb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deba:	e8 59 c9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000debf:	83 c4 10             	add    esp,0x10
c000dec2:	83 c4 0c             	add    esp,0xc
c000dec5:	c3                   	ret    

c000dec6 <NIC::getMAC()>:
c000dec6:	31 c0                	xor    eax,eax
c000dec8:	31 d2                	xor    edx,edx
c000deca:	c3                   	ret    
c000decb:	90                   	nop

c000decc <NIC::write(int, unsigned char*, int*)>:
c000decc:	b8 01 00 00 00       	mov    eax,0x1
c000ded1:	c3                   	ret    

c000ded2 <NIC::NIC(char const*)>:
c000ded2:	83 ec 0c             	sub    esp,0xc
c000ded5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded9:	83 ec 08             	sub    esp,0x8
c000dedc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dee0:	50                   	push   eax
c000dee1:	e8 38 ec ff ff       	call   c000cb1e <Device::Device(char const*)>
c000dee6:	83 c4 10             	add    esp,0x10
c000dee9:	ba 2c 1d 02 c0       	mov    edx,0xc0021d2c
c000deee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def2:	89 10                	mov    DWORD PTR [eax],edx
c000def4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df02:	90                   	nop
c000df03:	83 c4 0c             	add    esp,0xc
c000df06:	c3                   	ret    
c000df07:	90                   	nop

c000df08 <NIC::~NIC()>:
c000df08:	83 ec 0c             	sub    esp,0xc
c000df0b:	ba 2c 1d 02 c0       	mov    edx,0xc0021d2c
c000df10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df14:	89 10                	mov    DWORD PTR [eax],edx
c000df16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df1a:	83 ec 0c             	sub    esp,0xc
c000df1d:	50                   	push   eax
c000df1e:	e8 65 e9 ff ff       	call   c000c888 <Device::~Device()>
c000df23:	83 c4 10             	add    esp,0x10
c000df26:	90                   	nop
c000df27:	83 c4 0c             	add    esp,0xc
c000df2a:	c3                   	ret    
c000df2b:	90                   	nop

c000df2c <NIC::~NIC()>:
c000df2c:	83 ec 0c             	sub    esp,0xc
c000df2f:	83 ec 0c             	sub    esp,0xc
c000df32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df36:	e8 cd ff ff ff       	call   c000df08 <NIC::~NIC()>
c000df3b:	83 c4 10             	add    esp,0x10
c000df3e:	83 ec 08             	sub    esp,0x8
c000df41:	68 58 01 00 00       	push   0x158
c000df46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df4a:	e8 c9 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	83 c4 0c             	add    esp,0xc
c000df55:	c3                   	ret    

c000df56 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000df56:	55                   	push   ebp
c000df57:	57                   	push   edi
c000df58:	56                   	push   esi
c000df59:	53                   	push   ebx
c000df5a:	81 ec 28 01 00 00    	sub    esp,0x128
c000df60:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000df67:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000df6e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000df75:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000df7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df80:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df84:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000df8b:	e8 8a ec ff ff       	call   c000cc1a <Device::getName()>
c000df90:	5a                   	pop    edx
c000df91:	59                   	pop    ecx
c000df92:	50                   	push   eax
c000df93:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000df97:	55                   	push   ebp
c000df98:	e8 a3 26 ff ff       	call   c0000640 <strcpy>
c000df9d:	5b                   	pop    ebx
c000df9e:	58                   	pop    eax
c000df9f:	68 58 1d 02 c0       	push   0xc0021d58
c000dfa4:	55                   	push   ebp
c000dfa5:	e8 96 28 ff ff       	call   c0000840 <strcat>
c000dfaa:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dfb1:	e8 00 9b ff ff       	call   c0007ab6 <malloc>
c000dfb6:	83 c4 0c             	add    esp,0xc
c000dfb9:	89 c3                	mov    ebx,eax
c000dfbb:	57                   	push   edi
c000dfbc:	56                   	push   esi
c000dfbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfc5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dfcc:	55                   	push   ebp
c000dfcd:	50                   	push   eax
c000dfce:	e8 59 fb ff ff       	call   c000db2c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dfd3:	83 c4 14             	add    esp,0x14
c000dfd6:	53                   	push   ebx
c000dfd7:	e8 10 fc ff ff       	call   c000dbec <LogicalDisk::assignDriveLetter()>
c000dfdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dfdf:	e8 c2 fc ff ff       	call   c000dca6 <LogicalDisk::mount()>
c000dfe4:	58                   	pop    eax
c000dfe5:	5a                   	pop    edx
c000dfe6:	53                   	push   ebx
c000dfe7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfee:	e8 93 e9 ff ff       	call   c000c986 <Device::addChild(Device*)>
c000dff3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dff9:	5b                   	pop    ebx
c000dffa:	5e                   	pop    esi
c000dffb:	5f                   	pop    edi
c000dffc:	5d                   	pop    ebp
c000dffd:	c3                   	ret    

c000dffe <createPartitionsForDisk(PhysicalDisk*)>:
c000dffe:	55                   	push   ebp
c000dfff:	57                   	push   edi
c000e000:	56                   	push   esi
c000e001:	53                   	push   ebx
c000e002:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e008:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e00f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e015:	3d 00 02 00 00       	cmp    eax,0x200
c000e01a:	74 27                	je     c000e043 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e01c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e022:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e028:	83 ec 10             	sub    esp,0x10
c000e02b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e02f:	99                   	cdq    
c000e030:	c1 e6 0a             	shl    esi,0xa
c000e033:	52                   	push   edx
c000e034:	89 fd                	mov    ebp,edi
c000e036:	50                   	push   eax
c000e037:	55                   	push   ebp
c000e038:	56                   	push   esi
c000e039:	e8 b2 16 01 00       	call   c001f6f0 <__udivdi3>
c000e03e:	e9 b9 00 00 00       	jmp    c000e0fc <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e043:	83 ec 0c             	sub    esp,0xc
c000e046:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e048:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e04c:	56                   	push   esi
c000e04d:	6a 01                	push   0x1
c000e04f:	6a 00                	push   0x0
c000e051:	6a 00                	push   0x0
c000e053:	53                   	push   ebx
c000e054:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e062:	75 0a                	jne    c000e06e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e064:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e06c:	74 2c                	je     c000e09a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e06e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e074:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e07a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e080:	83 ec 10             	sub    esp,0x10
c000e083:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e087:	89 f7                	mov    edi,esi
c000e089:	c1 e0 0a             	shl    eax,0xa
c000e08c:	c1 ff 1f             	sar    edi,0x1f
c000e08f:	57                   	push   edi
c000e090:	56                   	push   esi
c000e091:	52                   	push   edx
c000e092:	50                   	push   eax
c000e093:	e8 58 16 01 00       	call   c001f6f0 <__udivdi3>
c000e098:	eb 62                	jmp    c000e0fc <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e09a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e0a1:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e0a8:	89 cf                	mov    edi,ecx
c000e0aa:	83 e2 7f             	and    edx,0x7f
c000e0ad:	83 e7 7f             	and    edi,0x7f
c000e0b0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e0b7:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e0ba:	83 e0 7f             	and    eax,0x7f
c000e0bd:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e0c0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e0c7:	83 e0 7f             	and    eax,0x7f
c000e0ca:	01 d0                	add    eax,edx
c000e0cc:	89 c5                	mov    ebp,eax
c000e0ce:	84 c0                	test   al,al
c000e0d0:	74 41                	je     c000e113 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e0d2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0d8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0de:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0e4:	83 ec 10             	sub    esp,0x10
c000e0e7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0eb:	89 f7                	mov    edi,esi
c000e0ed:	c1 e0 0a             	shl    eax,0xa
c000e0f0:	c1 ff 1f             	sar    edi,0x1f
c000e0f3:	57                   	push   edi
c000e0f4:	56                   	push   esi
c000e0f5:	52                   	push   edx
c000e0f6:	50                   	push   eax
c000e0f7:	e8 f4 15 01 00       	call   c001f6f0 <__udivdi3>
c000e0fc:	83 c4 14             	add    esp,0x14
c000e0ff:	52                   	push   edx
c000e100:	50                   	push   eax
c000e101:	6a 00                	push   0x0
c000e103:	6a 00                	push   0x0
c000e105:	53                   	push   ebx
c000e106:	e8 4b fe ff ff       	call   c000df56 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e10b:	83 c4 20             	add    esp,0x20
c000e10e:	e9 73 01 00 00       	jmp    c000e286 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e113:	89 f0                	mov    eax,esi
c000e115:	31 c9                	xor    ecx,ecx
c000e117:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e11e:	75 02                	jne    c000e122 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e120:	89 cd                	mov    ebp,ecx
c000e122:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e129:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000e130:	c1 e2 08             	shl    edx,0x8
c000e133:	c1 e6 10             	shl    esi,0x10
c000e136:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e13e:	09 f2                	or     edx,esi
c000e140:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e148:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000e14f:	83 c0 10             	add    eax,0x10
c000e152:	09 f2                	or     edx,esi
c000e154:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e15b:	c1 e6 18             	shl    esi,0x18
c000e15e:	09 f2                	or     edx,esi
c000e160:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e167:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e16b:	c1 e6 10             	shl    esi,0x10
c000e16e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e175:	c1 e2 08             	shl    edx,0x8
c000e178:	09 f2                	or     edx,esi
c000e17a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e181:	09 f2                	or     edx,esi
c000e183:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e18a:	c1 e6 18             	shl    esi,0x18
c000e18d:	09 f2                	or     edx,esi
c000e18f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e193:	41                   	inc    ecx
c000e194:	83 f9 04             	cmp    ecx,0x4
c000e197:	0f 85 7a ff ff ff    	jne    c000e117 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e19d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1a1:	83 f0 01             	xor    eax,0x1
c000e1a4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e1a8:	75 4f                	jne    c000e1f9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1ae:	83 f0 01             	xor    eax,0x1
c000e1b1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e1b5:	75 42                	jne    c000e1f9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1b7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e1bf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e1c7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e1cd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e1d3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e1d9:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e1dd:	89 f7                	mov    edi,esi
c000e1df:	c1 e0 0a             	shl    eax,0xa
c000e1e2:	c1 ff 1f             	sar    edi,0x1f
c000e1e5:	57                   	push   edi
c000e1e6:	56                   	push   esi
c000e1e7:	52                   	push   edx
c000e1e8:	50                   	push   eax
c000e1e9:	e8 02 15 01 00       	call   c001f6f0 <__udivdi3>
c000e1ee:	83 c4 10             	add    esp,0x10
c000e1f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e1f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e1f9:	89 e8                	mov    eax,ebp
c000e1fb:	0f b6 e8             	movzx  ebp,al
c000e1fe:	85 ed                	test   ebp,ebp
c000e200:	74 50                	je     c000e252 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e202:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e206:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e20a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e20e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e212:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e216:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e21a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e21e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e222:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e226:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e22a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e22e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e232:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e236:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e23a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e23e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e242:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e246:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e24a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e24e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e252:	31 ed                	xor    ebp,ebp
c000e254:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e258:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e25c:	89 f8                	mov    eax,edi
c000e25e:	09 f0                	or     eax,esi
c000e260:	74 1e                	je     c000e280 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e262:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e266:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e26a:	89 d1                	mov    ecx,edx
c000e26c:	09 c1                	or     ecx,eax
c000e26e:	74 10                	je     c000e280 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e270:	83 ec 0c             	sub    esp,0xc
c000e273:	57                   	push   edi
c000e274:	56                   	push   esi
c000e275:	52                   	push   edx
c000e276:	50                   	push   eax
c000e277:	53                   	push   ebx
c000e278:	e8 d9 fc ff ff       	call   c000df56 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e27d:	83 c4 20             	add    esp,0x20
c000e280:	45                   	inc    ebp
c000e281:	83 fd 04             	cmp    ebp,0x4
c000e284:	75 ce                	jne    c000e254 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e286:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e28c:	5b                   	pop    ebx
c000e28d:	5e                   	pop    esi
c000e28e:	5f                   	pop    edi
c000e28f:	5d                   	pop    ebp
c000e290:	c3                   	ret    
c000e291:	66 90                	xchg   ax,ax
c000e293:	90                   	nop

c000e294 <Serial::Serial(char const*)>:
c000e294:	83 ec 0c             	sub    esp,0xc
c000e297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e29b:	83 ec 08             	sub    esp,0x8
c000e29e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2a2:	50                   	push   eax
c000e2a3:	e8 76 e8 ff ff       	call   c000cb1e <Device::Device(char const*)>
c000e2a8:	83 c4 10             	add    esp,0x10
c000e2ab:	ba 6c 1d 02 c0       	mov    edx,0xc0021d6c
c000e2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2b4:	89 10                	mov    DWORD PTR [eax],edx
c000e2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ba:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e2c4:	90                   	nop
c000e2c5:	83 c4 0c             	add    esp,0xc
c000e2c8:	c3                   	ret    
c000e2c9:	90                   	nop
c000e2ca:	66 90                	xchg   ax,ax

c000e2cc <Serial::~Serial()>:
c000e2cc:	83 ec 0c             	sub    esp,0xc
c000e2cf:	ba 6c 1d 02 c0       	mov    edx,0xc0021d6c
c000e2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d8:	89 10                	mov    DWORD PTR [eax],edx
c000e2da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	50                   	push   eax
c000e2e2:	e8 a1 e5 ff ff       	call   c000c888 <Device::~Device()>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	90                   	nop
c000e2eb:	83 c4 0c             	add    esp,0xc
c000e2ee:	c3                   	ret    
c000e2ef:	90                   	nop

c000e2f0 <Serial::~Serial()>:
c000e2f0:	83 ec 0c             	sub    esp,0xc
c000e2f3:	83 ec 0c             	sub    esp,0xc
c000e2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2fa:	e8 cd ff ff ff       	call   c000e2cc <Serial::~Serial()>
c000e2ff:	83 c4 10             	add    esp,0x10
c000e302:	83 ec 08             	sub    esp,0x8
c000e305:	68 58 01 00 00       	push   0x158
c000e30a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e30e:	e8 05 c5 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e313:	83 c4 10             	add    esp,0x10
c000e316:	83 c4 0c             	add    esp,0xc
c000e319:	c3                   	ret    
c000e31a:	66 90                	xchg   ax,ax

c000e31c <Timer::Timer(char const*)>:
c000e31c:	83 ec 0c             	sub    esp,0xc
c000e31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e323:	83 ec 08             	sub    esp,0x8
c000e326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e32a:	50                   	push   eax
c000e32b:	e8 ee e7 ff ff       	call   c000cb1e <Device::Device(char const*)>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	ba b0 1d 02 c0       	mov    edx,0xc0021db0
c000e338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33c:	89 10                	mov    DWORD PTR [eax],edx
c000e33e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e342:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e34c:	90                   	nop
c000e34d:	83 c4 0c             	add    esp,0xc
c000e350:	c3                   	ret    
c000e351:	90                   	nop
c000e352:	66 90                	xchg   ax,ax

c000e354 <Timer::~Timer()>:
c000e354:	83 ec 0c             	sub    esp,0xc
c000e357:	ba b0 1d 02 c0       	mov    edx,0xc0021db0
c000e35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e360:	89 10                	mov    DWORD PTR [eax],edx
c000e362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e366:	83 ec 0c             	sub    esp,0xc
c000e369:	50                   	push   eax
c000e36a:	e8 19 e5 ff ff       	call   c000c888 <Device::~Device()>
c000e36f:	83 c4 10             	add    esp,0x10
c000e372:	90                   	nop
c000e373:	83 c4 0c             	add    esp,0xc
c000e376:	c3                   	ret    
c000e377:	90                   	nop

c000e378 <Timer::~Timer()>:
c000e378:	83 ec 0c             	sub    esp,0xc
c000e37b:	83 ec 0c             	sub    esp,0xc
c000e37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e382:	e8 cd ff ff ff       	call   c000e354 <Timer::~Timer()>
c000e387:	83 c4 10             	add    esp,0x10
c000e38a:	83 ec 08             	sub    esp,0x8
c000e38d:	68 5c 01 00 00       	push   0x15c
c000e392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e396:	e8 7d c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e39b:	83 c4 10             	add    esp,0x10
c000e39e:	83 c4 0c             	add    esp,0xc
c000e3a1:	c3                   	ret    

c000e3a2 <Timer::read()>:
c000e3a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3a6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e3ac:	c3                   	ret    

c000e3ad <setupTimer(int)>:
c000e3ad:	53                   	push   ebx
c000e3ae:	83 ec 14             	sub    esp,0x14
c000e3b1:	68 5c 01 00 00       	push   0x15c
c000e3b6:	e8 fb 96 ff ff       	call   c0007ab6 <malloc>
c000e3bb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3be:	89 c3                	mov    ebx,eax
c000e3c0:	e8 97 0b 01 00       	call   c001ef5c <PIT::PIT()>
c000e3c5:	58                   	pop    eax
c000e3c6:	5a                   	pop    edx
c000e3c7:	53                   	push   ebx
c000e3c8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e3ce:	e8 b3 e5 ff ff       	call   c000c986 <Device::addChild(Device*)>
c000e3d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e3d5:	6a 00                	push   0x0
c000e3d7:	6a 00                	push   0x0
c000e3d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e3dd:	53                   	push   ebx
c000e3de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3e1:	89 d8                	mov    eax,ebx
c000e3e3:	83 c4 28             	add    esp,0x28
c000e3e6:	5b                   	pop    ebx
c000e3e7:	c3                   	ret    

c000e3e8 <timerHandler(unsigned int)>:
c000e3e8:	56                   	push   esi
c000e3e9:	53                   	push   ebx
c000e3ea:	51                   	push   ecx
c000e3eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ef:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e3f5:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e3fc:	0f 84 4a 01 00 00    	je     c000e54c <timerHandler(unsigned int)+0x164>
c000e402:	fa                   	cli    
c000e403:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e409:	83 ec 0c             	sub    esp,0xc
c000e40c:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e412:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e417:	e8 a4 18 01 00       	call   c001fcc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e41c:	83 c4 10             	add    esp,0x10
c000e41f:	84 c0                	test   al,al
c000e421:	0f 85 a1 00 00 00    	jne    c000e4c8 <timerHandler(unsigned int)+0xe0>
c000e427:	83 ec 0c             	sub    esp,0xc
c000e42a:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e42f:	e8 a8 18 01 00       	call   c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e434:	83 c4 10             	add    esp,0x10
c000e437:	89 c6                	mov    esi,eax
c000e439:	8d 76 00             	lea    esi,[esi+0x0]
c000e43c:	83 ec 0c             	sub    esp,0xc
c000e43f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e444:	e8 93 18 01 00       	call   c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e449:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e450:	89 c3                	mov    ebx,eax
c000e452:	e8 8d 18 01 00       	call   c001fce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e457:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e45a:	83 c4 10             	add    esp,0x10
c000e45d:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e463:	77 23                	ja     c000e488 <timerHandler(unsigned int)+0xa0>
c000e465:	83 ec 0c             	sub    esp,0xc
c000e468:	53                   	push   ebx
c000e469:	e8 2a 81 00 00       	call   c0016598 <unblockTask(ThreadControlBlock*)>
c000e46e:	83 c4 10             	add    esp,0x10
c000e471:	39 de                	cmp    esi,ebx
c000e473:	75 27                	jne    c000e49c <timerHandler(unsigned int)+0xb4>
c000e475:	83 ec 0c             	sub    esp,0xc
c000e478:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e47d:	e8 5a 18 01 00       	call   c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e482:	89 c6                	mov    esi,eax
c000e484:	eb 12                	jmp    c000e498 <timerHandler(unsigned int)+0xb0>
c000e486:	66 90                	xchg   ax,ax
c000e488:	52                   	push   edx
c000e489:	52                   	push   edx
c000e48a:	53                   	push   ebx
c000e48b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e490:	e8 0b 19 01 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e495:	8d 76 00             	lea    esi,[esi+0x0]
c000e498:	83 c4 10             	add    esp,0x10
c000e49b:	90                   	nop
c000e49c:	83 ec 0c             	sub    esp,0xc
c000e49f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4a4:	e8 17 18 01 00       	call   c001fcc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4a9:	83 c4 10             	add    esp,0x10
c000e4ac:	84 c0                	test   al,al
c000e4ae:	75 18                	jne    c000e4c8 <timerHandler(unsigned int)+0xe0>
c000e4b0:	83 ec 0c             	sub    esp,0xc
c000e4b3:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4b8:	e8 1f 18 01 00       	call   c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4bd:	83 c4 10             	add    esp,0x10
c000e4c0:	39 f0                	cmp    eax,esi
c000e4c2:	0f 85 74 ff ff ff    	jne    c000e43c <timerHandler(unsigned int)+0x54>
c000e4c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e4cd:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e4d1:	74 41                	je     c000e514 <timerHandler(unsigned int)+0x12c>
c000e4d3:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e4da:	74 38                	je     c000e514 <timerHandler(unsigned int)+0x12c>
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e4e3:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e4e8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e4ee:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e4f1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e4f7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e4fa:	72 08                	jb     c000e504 <timerHandler(unsigned int)+0x11c>
c000e4fc:	e8 7f 7b 00 00       	call   c0016080 <schedule()>
c000e501:	8d 76 00             	lea    esi,[esi+0x0]
c000e504:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e509:	48                   	dec    eax
c000e50a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e50f:	75 03                	jne    c000e514 <timerHandler(unsigned int)+0x12c>
c000e511:	fb                   	sti    
c000e512:	66 90                	xchg   ax,ax
c000e514:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e519:	48                   	dec    eax
c000e51a:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e51f:	75 1b                	jne    c000e53c <timerHandler(unsigned int)+0x154>
c000e521:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e528:	74 12                	je     c000e53c <timerHandler(unsigned int)+0x154>
c000e52a:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e534:	e8 47 7b 00 00       	call   c0016080 <schedule()>
c000e539:	8d 76 00             	lea    esi,[esi+0x0]
c000e53c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e541:	48                   	dec    eax
c000e542:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e547:	75 03                	jne    c000e54c <timerHandler(unsigned int)+0x164>
c000e549:	fb                   	sti    
c000e54a:	66 90                	xchg   ax,ax
c000e54c:	58                   	pop    eax
c000e54d:	5b                   	pop    ebx
c000e54e:	5e                   	pop    esi
c000e54f:	c3                   	ret    

c000e550 <VCache::VCache(PhysicalDisk*)>:
c000e550:	53                   	push   ebx
c000e551:	83 ec 18             	sub    esp,0x18
c000e554:	ba e0 1d 02 c0       	mov    edx,0xc0021de0
c000e559:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e55d:	89 10                	mov    DWORD PTR [eax],edx
c000e55f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e563:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e56a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e56e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e575:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e579:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e580:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e58b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e592:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e59d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e5a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5a8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e5ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e5b7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e5be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5c2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e5c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ca:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e5ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5d2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e5d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5da:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e5e1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e5e9:	83 ec 0c             	sub    esp,0xc
c000e5ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5f0:	e8 c1 94 ff ff       	call   c0007ab6 <malloc>
c000e5f5:	83 c4 10             	add    esp,0x10
c000e5f8:	89 c3                	mov    ebx,eax
c000e5fa:	83 ec 0c             	sub    esp,0xc
c000e5fd:	53                   	push   ebx
c000e5fe:	e8 19 78 00 00       	call   c0015e1c <Mutex::Mutex()>
c000e603:	83 c4 10             	add    esp,0x10
c000e606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e60a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e60d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e611:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e615:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e61c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e623:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e627:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e62d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e631:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e634:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e638:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e63e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e644:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e648:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e64b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e64e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e652:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e656:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e65a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e660:	05 00 02 00 00       	add    eax,0x200
c000e665:	c1 e0 03             	shl    eax,0x3
c000e668:	83 ec 0c             	sub    esp,0xc
c000e66b:	50                   	push   eax
c000e66c:	e8 45 94 ff ff       	call   c0007ab6 <malloc>
c000e671:	83 c4 10             	add    esp,0x10
c000e674:	89 c2                	mov    edx,eax
c000e676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e67a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e67d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e681:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e68c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e690:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e694:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e69a:	89 d0                	mov    eax,edx
c000e69c:	c1 e0 02             	shl    eax,0x2
c000e69f:	01 d0                	add    eax,edx
c000e6a1:	c1 e0 04             	shl    eax,0x4
c000e6a4:	83 ec 0c             	sub    esp,0xc
c000e6a7:	50                   	push   eax
c000e6a8:	e8 09 94 ff ff       	call   c0007ab6 <malloc>
c000e6ad:	83 c4 10             	add    esp,0x10
c000e6b0:	89 c2                	mov    edx,eax
c000e6b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6b6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e6b9:	90                   	nop
c000e6ba:	83 c4 18             	add    esp,0x18
c000e6bd:	5b                   	pop    ebx
c000e6be:	c3                   	ret    
c000e6bf:	90                   	nop

c000e6c0 <VCache::invalidateReadBuffer()>:
c000e6c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6c4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e6ca:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e6ce:	c3                   	ret    
c000e6cf:	90                   	nop

c000e6d0 <VCache::writeWriteBuffer()>:
c000e6d0:	53                   	push   ebx
c000e6d1:	83 ec 08             	sub    esp,0x8
c000e6d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6d8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e6dc:	74 1e                	je     c000e6fc <VCache::writeWriteBuffer()+0x2c>
c000e6de:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e6e1:	83 ec 0c             	sub    esp,0xc
c000e6e4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6e6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e6e9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e6ec:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e6ef:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e6f2:	50                   	push   eax
c000e6f3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e6f6:	83 c4 20             	add    esp,0x20
c000e6f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6fc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e703:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e70a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e70e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e715:	83 c4 08             	add    esp,0x8
c000e718:	5b                   	pop    ebx
c000e719:	c3                   	ret    
c000e71a:	66 90                	xchg   ax,ax

c000e71c <VCache::~VCache()>:
c000e71c:	83 ec 0c             	sub    esp,0xc
c000e71f:	ba e0 1d 02 c0       	mov    edx,0xc0021de0
c000e724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e728:	89 10                	mov    DWORD PTR [eax],edx
c000e72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e72e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e731:	0f b6 c0             	movzx  eax,al
c000e734:	85 c0                	test   eax,eax
c000e736:	74 10                	je     c000e748 <VCache::~VCache()+0x2c>
c000e738:	83 ec 0c             	sub    esp,0xc
c000e73b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e73f:	e8 8c ff ff ff       	call   c000e6d0 <VCache::writeWriteBuffer()>
c000e744:	83 c4 10             	add    esp,0x10
c000e747:	90                   	nop
c000e748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e74c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e74f:	83 ec 0c             	sub    esp,0xc
c000e752:	50                   	push   eax
c000e753:	e8 6e 93 ff ff       	call   c0007ac6 <free>
c000e758:	83 c4 10             	add    esp,0x10
c000e75b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e762:	83 ec 0c             	sub    esp,0xc
c000e765:	50                   	push   eax
c000e766:	e8 5b 93 ff ff       	call   c0007ac6 <free>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	90                   	nop
c000e76f:	83 c4 0c             	add    esp,0xc
c000e772:	c3                   	ret    
c000e773:	90                   	nop

c000e774 <VCache::~VCache()>:
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	83 ec 0c             	sub    esp,0xc
c000e77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e77e:	e8 99 ff ff ff       	call   c000e71c <VCache::~VCache()>
c000e783:	83 c4 10             	add    esp,0x10
c000e786:	83 ec 08             	sub    esp,0x8
c000e789:	6a 44                	push   0x44
c000e78b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e78f:	e8 84 c0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e794:	83 c4 10             	add    esp,0x10
c000e797:	83 c4 0c             	add    esp,0xc
c000e79a:	c3                   	ret    
c000e79b:	90                   	nop

c000e79c <VCache::write(unsigned long long, int, void*)>:
c000e79c:	55                   	push   ebp
c000e79d:	57                   	push   edi
c000e79e:	56                   	push   esi
c000e79f:	53                   	push   ebx
c000e7a0:	83 ec 1c             	sub    esp,0x1c
c000e7a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e7a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7ab:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e7af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7b3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e7b7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e7bb:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e7bf:	74 07                	je     c000e7c8 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e7c1:	53                   	push   ebx
c000e7c2:	e8 f9 fe ff ff       	call   c000e6c0 <VCache::invalidateReadBuffer()>
c000e7c7:	58                   	pop    eax
c000e7c8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e7cc:	74 62                	je     c000e830 <VCache::write(unsigned long long, int, void*)+0x94>
c000e7ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e7d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e7d5:	99                   	cdq    
c000e7d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7da:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e7dd:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e7e0:	31 c1                	xor    ecx,eax
c000e7e2:	89 d0                	mov    eax,edx
c000e7e4:	89 ca                	mov    edx,ecx
c000e7e6:	31 e8                	xor    eax,ebp
c000e7e8:	09 c2                	or     edx,eax
c000e7ea:	75 38                	jne    c000e824 <VCache::write(unsigned long long, int, void*)+0x88>
c000e7ec:	83 ff 01             	cmp    edi,0x1
c000e7ef:	75 33                	jne    c000e824 <VCache::write(unsigned long long, int, void*)+0x88>
c000e7f1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e7f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e7f8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e7fe:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e801:	0f af c8             	imul   ecx,eax
c000e804:	01 cf                	add    edi,ecx
c000e806:	89 c1                	mov    ecx,eax
c000e808:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e80a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e80d:	40                   	inc    eax
c000e80e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e811:	83 f8 50             	cmp    eax,0x50
c000e814:	75 6a                	jne    c000e880 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e816:	83 ec 0c             	sub    esp,0xc
c000e819:	53                   	push   ebx
c000e81a:	e8 b1 fe ff ff       	call   c000e6d0 <VCache::writeWriteBuffer()>
c000e81f:	83 c4 10             	add    esp,0x10
c000e822:	eb 5c                	jmp    c000e880 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e824:	83 ec 0c             	sub    esp,0xc
c000e827:	53                   	push   ebx
c000e828:	e8 a3 fe ff ff       	call   c000e6d0 <VCache::writeWriteBuffer()>
c000e82d:	83 c4 10             	add    esp,0x10
c000e830:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e833:	83 ff 4f             	cmp    edi,0x4f
c000e836:	7f 20                	jg     c000e858 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e838:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e83b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e83f:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e842:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e845:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e849:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e84c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e852:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e854:	eb 2a                	jmp    c000e880 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e856:	66 90                	xchg   ax,ax
c000e858:	8b 10                	mov    edx,DWORD PTR [eax]
c000e85a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e85e:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e862:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e866:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e86a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e86e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e872:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e875:	83 c4 1c             	add    esp,0x1c
c000e878:	5b                   	pop    ebx
c000e879:	5e                   	pop    esi
c000e87a:	5f                   	pop    edi
c000e87b:	5d                   	pop    ebp
c000e87c:	ff e0                	jmp    eax
c000e87e:	66 90                	xchg   ax,ax
c000e880:	83 c4 1c             	add    esp,0x1c
c000e883:	31 c0                	xor    eax,eax
c000e885:	5b                   	pop    ebx
c000e886:	5e                   	pop    esi
c000e887:	5f                   	pop    edi
c000e888:	5d                   	pop    ebp
c000e889:	c3                   	ret    

c000e88a <VCache::read(unsigned long long, int, void*)>:
c000e88a:	55                   	push   ebp
c000e88b:	57                   	push   edi
c000e88c:	56                   	push   esi
c000e88d:	53                   	push   ebx
c000e88e:	83 ec 1c             	sub    esp,0x1c
c000e891:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e895:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e899:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e89d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e8a1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e8a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e8a9:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e8ad:	74 0d                	je     c000e8bc <VCache::read(unsigned long long, int, void*)+0x32>
c000e8af:	83 ec 0c             	sub    esp,0xc
c000e8b2:	57                   	push   edi
c000e8b3:	e8 18 fe ff ff       	call   c000e6d0 <VCache::writeWriteBuffer()>
c000e8b8:	83 c4 10             	add    esp,0x10
c000e8bb:	90                   	nop
c000e8bc:	83 fd 01             	cmp    ebp,0x1
c000e8bf:	0f 85 93 00 00 00    	jne    c000e958 <VCache::read(unsigned long long, int, void*)+0xce>
c000e8c5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000e8cb:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e8d2:	0f 85 80 00 00 00    	jne    c000e958 <VCache::read(unsigned long long, int, void*)+0xce>
c000e8d8:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e8db:	89 e9                	mov    ecx,ebp
c000e8dd:	f7 d9                	neg    ecx
c000e8df:	89 c8                	mov    eax,ecx
c000e8e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e8e5:	c1 f8 1f             	sar    eax,0x1f
c000e8e8:	21 d9                	and    ecx,ebx
c000e8ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8ee:	89 c8                	mov    eax,ecx
c000e8f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8f4:	21 f1                	and    ecx,esi
c000e8f6:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e8fa:	89 ca                	mov    edx,ecx
c000e8fc:	74 2e                	je     c000e92c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e8fe:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e901:	75 29                	jne    c000e92c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e903:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e906:	75 24                	jne    c000e92c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e908:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e90b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e911:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e914:	8d 70 ff             	lea    esi,[eax-0x1]
c000e917:	21 f3                	and    ebx,esi
c000e919:	0f af d9             	imul   ebx,ecx
c000e91c:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e91f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e923:	89 de                	mov    esi,ebx
c000e925:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e927:	31 c0                	xor    eax,eax
c000e929:	eb 61                	jmp    c000e98c <VCache::read(unsigned long long, int, void*)+0x102>
c000e92b:	90                   	nop
c000e92c:	83 ec 0c             	sub    esp,0xc
c000e92f:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e933:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e937:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e93a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e93d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e93f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e942:	55                   	push   ebp
c000e943:	52                   	push   edx
c000e944:	50                   	push   eax
c000e945:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e949:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e94c:	83 c4 20             	add    esp,0x20
c000e94f:	85 c0                	test   eax,eax
c000e951:	75 39                	jne    c000e98c <VCache::read(unsigned long long, int, void*)+0x102>
c000e953:	eb b3                	jmp    c000e908 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e955:	8d 76 00             	lea    esi,[esi+0x0]
c000e958:	83 ec 0c             	sub    esp,0xc
c000e95b:	57                   	push   edi
c000e95c:	e8 5f fd ff ff       	call   c000e6c0 <VCache::invalidateReadBuffer()>
c000e961:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e964:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e968:	8b 10                	mov    edx,DWORD PTR [eax]
c000e96a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e96e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e972:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e976:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e97a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e97e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e981:	83 c4 2c             	add    esp,0x2c
c000e984:	5b                   	pop    ebx
c000e985:	5e                   	pop    esi
c000e986:	5f                   	pop    edi
c000e987:	5d                   	pop    ebp
c000e988:	ff e0                	jmp    eax
c000e98a:	66 90                	xchg   ax,ax
c000e98c:	83 c4 1c             	add    esp,0x1c
c000e98f:	5b                   	pop    ebx
c000e990:	5e                   	pop    esi
c000e991:	5f                   	pop    edi
c000e992:	5d                   	pop    ebp
c000e993:	c3                   	ret    

c000e994 <Video::putrect(int, int, int, int, unsigned int)>:
c000e994:	55                   	push   ebp
c000e995:	57                   	push   edi
c000e996:	56                   	push   esi
c000e997:	53                   	push   ebx
c000e998:	83 ec 1c             	sub    esp,0x1c
c000e99b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e99f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9a3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e9a7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e9ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e9af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9b3:	01 df                	add    edi,ebx
c000e9b5:	39 fb                	cmp    ebx,edi
c000e9b7:	7d 1f                	jge    c000e9d8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e9b9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e9bd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e9c1:	7d 12                	jge    c000e9d5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e9c3:	8b 16                	mov    edx,DWORD PTR [esi]
c000e9c5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e9c9:	53                   	push   ebx
c000e9ca:	55                   	push   ebp
c000e9cb:	45                   	inc    ebp
c000e9cc:	56                   	push   esi
c000e9cd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e9d0:	83 c4 10             	add    esp,0x10
c000e9d3:	eb e8                	jmp    c000e9bd <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e9d5:	43                   	inc    ebx
c000e9d6:	eb dd                	jmp    c000e9b5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e9d8:	83 c4 1c             	add    esp,0x1c
c000e9db:	5b                   	pop    ebx
c000e9dc:	5e                   	pop    esi
c000e9dd:	5f                   	pop    edi
c000e9de:	5d                   	pop    ebp
c000e9df:	c3                   	ret    

c000e9e0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e9e0:	55                   	push   ebp
c000e9e1:	57                   	push   edi
c000e9e2:	31 ff                	xor    edi,edi
c000e9e4:	56                   	push   esi
c000e9e5:	53                   	push   ebx
c000e9e6:	83 ec 1c             	sub    esp,0x1c
c000e9e9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e9ed:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e9f1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e9f8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e9fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea01:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea05:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea09:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea0c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea10:	01 f9                	add    ecx,edi
c000ea12:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea16:	7d 2f                	jge    c000ea47 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea18:	31 f6                	xor    esi,esi
c000ea1a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea1e:	01 f2                	add    edx,esi
c000ea20:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea24:	7d 1a                	jge    c000ea40 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea26:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea29:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea2c:	46                   	inc    esi
c000ea2d:	51                   	push   ecx
c000ea2e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea32:	52                   	push   edx
c000ea33:	55                   	push   ebp
c000ea34:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea37:	83 c4 10             	add    esp,0x10
c000ea3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea3e:	eb da                	jmp    c000ea1a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ea40:	47                   	inc    edi
c000ea41:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ea45:	eb c5                	jmp    c000ea0c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ea47:	83 c4 1c             	add    esp,0x1c
c000ea4a:	5b                   	pop    ebx
c000ea4b:	5e                   	pop    esi
c000ea4c:	5f                   	pop    edi
c000ea4d:	5d                   	pop    ebp
c000ea4e:	c3                   	ret    
c000ea4f:	90                   	nop

c000ea50 <Video::blit(unsigned int*, int, int, int, int)>:
c000ea50:	55                   	push   ebp
c000ea51:	57                   	push   edi
c000ea52:	56                   	push   esi
c000ea53:	53                   	push   ebx
c000ea54:	83 ec 1c             	sub    esp,0x1c
c000ea57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea5f:	85 c0                	test   eax,eax
c000ea61:	79 02                	jns    c000ea65 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000ea63:	31 c0                	xor    eax,eax
c000ea65:	c1 e0 02             	shl    eax,0x2
c000ea68:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ea6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea70:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea74:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000ea78:	39 d8                	cmp    eax,ebx
c000ea7a:	7e 49                	jle    c000eac5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ea7c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ea82:	7c 41                	jl     c000eac5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ea84:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ea88:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea8c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea90:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000ea94:	39 f9                	cmp    ecx,edi
c000ea96:	7e 22                	jle    c000eaba <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000ea98:	83 c5 04             	add    ebp,0x4
c000ea9b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eaa1:	7c 14                	jl     c000eab7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000eaa3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eaa5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000eaa8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eaac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eab0:	56                   	push   esi
c000eab1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	47                   	inc    edi
c000eab8:	eb d2                	jmp    c000ea8c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000eaba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eabe:	43                   	inc    ebx
c000eabf:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eac3:	eb ab                	jmp    c000ea70 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000eac5:	83 c4 1c             	add    esp,0x1c
c000eac8:	5b                   	pop    ebx
c000eac9:	5e                   	pop    esi
c000eaca:	5f                   	pop    edi
c000eacb:	5d                   	pop    ebp
c000eacc:	c3                   	ret    
c000eacd:	90                   	nop

c000eace <Video::clearScreen(unsigned int)>:
c000eace:	57                   	push   edi
c000eacf:	56                   	push   esi
c000ead0:	53                   	push   ebx
c000ead1:	31 db                	xor    ebx,ebx
c000ead3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ead7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eadd:	7e 1f                	jle    c000eafe <Video::clearScreen(unsigned int)+0x30>
c000eadf:	31 ff                	xor    edi,edi
c000eae1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eae7:	7e 12                	jle    c000eafb <Video::clearScreen(unsigned int)+0x2d>
c000eae9:	8b 06                	mov    eax,DWORD PTR [esi]
c000eaeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eaef:	53                   	push   ebx
c000eaf0:	57                   	push   edi
c000eaf1:	47                   	inc    edi
c000eaf2:	56                   	push   esi
c000eaf3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eaf6:	83 c4 10             	add    esp,0x10
c000eaf9:	eb e6                	jmp    c000eae1 <Video::clearScreen(unsigned int)+0x13>
c000eafb:	43                   	inc    ebx
c000eafc:	eb d9                	jmp    c000ead7 <Video::clearScreen(unsigned int)+0x9>
c000eafe:	5b                   	pop    ebx
c000eaff:	5e                   	pop    esi
c000eb00:	5f                   	pop    edi
c000eb01:	c3                   	ret    

c000eb02 <Video::putpixel(int, int, unsigned int)>:
c000eb02:	c7 44 24 04 e8 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021de8
c000eb0a:	e9 d0 2a 00 00       	jmp    c00115df <KePanic(char const*)>
c000eb0f:	90                   	nop

c000eb10 <Video::readPixelApprox(int, int)>:
c000eb10:	83 ec 18             	sub    esp,0x18
c000eb13:	68 09 1e 02 c0       	push   0xc0021e09
c000eb18:	e8 c2 2a 00 00       	call   c00115df <KePanic(char const*)>
c000eb1d:	31 c0                	xor    eax,eax
c000eb1f:	83 c4 1c             	add    esp,0x1c
c000eb22:	c3                   	ret    
c000eb23:	90                   	nop

c000eb24 <Video::Video(char const*)>:
c000eb24:	83 ec 0c             	sub    esp,0xc
c000eb27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb2b:	83 ec 08             	sub    esp,0x8
c000eb2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb32:	50                   	push   eax
c000eb33:	e8 e6 df ff ff       	call   c000cb1e <Device::Device(char const*)>
c000eb38:	83 c4 10             	add    esp,0x10
c000eb3b:	ba 84 1e 02 c0       	mov    edx,0xc0021e84
c000eb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb44:	89 10                	mov    DWORD PTR [eax],edx
c000eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000eb54:	90                   	nop
c000eb55:	83 c4 0c             	add    esp,0xc
c000eb58:	c3                   	ret    
c000eb59:	90                   	nop

c000eb5a <Video::~Video()>:
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	ba 84 1e 02 c0       	mov    edx,0xc0021e84
c000eb62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb66:	89 10                	mov    DWORD PTR [eax],edx
c000eb68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb6c:	83 ec 0c             	sub    esp,0xc
c000eb6f:	50                   	push   eax
c000eb70:	e8 13 dd ff ff       	call   c000c888 <Device::~Device()>
c000eb75:	83 c4 10             	add    esp,0x10
c000eb78:	90                   	nop
c000eb79:	83 c4 0c             	add    esp,0xc
c000eb7c:	c3                   	ret    
c000eb7d:	90                   	nop

c000eb7e <Video::~Video()>:
c000eb7e:	83 ec 0c             	sub    esp,0xc
c000eb81:	83 ec 0c             	sub    esp,0xc
c000eb84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb88:	e8 cd ff ff ff       	call   c000eb5a <Video::~Video()>
c000eb8d:	83 c4 10             	add    esp,0x10
c000eb90:	83 ec 08             	sub    esp,0x8
c000eb93:	68 64 01 00 00       	push   0x164
c000eb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb9c:	e8 77 bc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000eba1:	83 c4 10             	add    esp,0x10
c000eba4:	83 c4 0c             	add    esp,0xc
c000eba7:	c3                   	ret    

c000eba8 <Video::isMonochrome()>:
c000eba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebac:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ebb2:	c3                   	ret    
c000ebb3:	90                   	nop

c000ebb4 <Video::getWidth()>:
c000ebb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ebbe:	c3                   	ret    
c000ebbf:	90                   	nop

c000ebc0 <Video::getHeight()>:
c000ebc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebc4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ebca:	c3                   	ret    
c000ebcb:	90                   	nop

c000ebcc <Video::drawCursor(int, int, unsigned int*, int)>:
c000ebcc:	55                   	push   ebp
c000ebcd:	57                   	push   edi
c000ebce:	56                   	push   esi
c000ebcf:	53                   	push   ebx
c000ebd0:	83 ec 2c             	sub    esp,0x2c
c000ebd3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ebd7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ebdb:	83 f8 01             	cmp    eax,0x1
c000ebde:	19 c9                	sbb    ecx,ecx
c000ebe0:	31 db                	xor    ebx,ebx
c000ebe2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ebe6:	89 cd                	mov    ebp,ecx
c000ebe8:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ebf0:	f7 d5                	not    ebp
c000ebf2:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ebf8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ebfc:	01 d8                	add    eax,ebx
c000ebfe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec02:	56                   	push   esi
c000ec03:	e8 b8 ff ff ff       	call   c000ebc0 <Video::getHeight()>
c000ec08:	59                   	pop    ecx
c000ec09:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec0d:	7e 70                	jle    c000ec7f <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec13:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ec17:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec1e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec22:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec2d:	89 f8                	mov    eax,edi
c000ec2f:	83 c0 20             	add    eax,0x20
c000ec32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec36:	56                   	push   esi
c000ec37:	e8 78 ff ff ff       	call   c000ebb4 <Video::getWidth()>
c000ec3c:	5a                   	pop    edx
c000ec3d:	39 c7                	cmp    edi,eax
c000ec3f:	7d 34                	jge    c000ec75 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ec41:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ec46:	74 05                	je     c000ec4d <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ec48:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec4a:	55                   	push   ebp
c000ec4b:	eb 0d                	jmp    c000ec5a <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ec4d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ec52:	74 12                	je     c000ec66 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ec54:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec5a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec5e:	57                   	push   edi
c000ec5f:	56                   	push   esi
c000ec60:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ec63:	83 c4 10             	add    esp,0x10
c000ec66:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ec6a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ec6e:	47                   	inc    edi
c000ec6f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ec73:	75 c1                	jne    c000ec36 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ec75:	43                   	inc    ebx
c000ec76:	83 fb 20             	cmp    ebx,0x20
c000ec79:	0f 85 79 ff ff ff    	jne    c000ebf8 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ec7f:	83 c4 2c             	add    esp,0x2c
c000ec82:	5b                   	pop    ebx
c000ec83:	5e                   	pop    esi
c000ec84:	5f                   	pop    edi
c000ec85:	5d                   	pop    ebp
c000ec86:	c3                   	ret    
c000ec87:	90                   	nop

c000ec88 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ec88:	55                   	push   ebp
c000ec89:	57                   	push   edi
c000ec8a:	56                   	push   esi
c000ec8b:	53                   	push   ebx
c000ec8c:	83 ec 28             	sub    esp,0x28
c000ec8f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ec93:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ec97:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ec9b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ec9f:	c1 e6 08             	shl    esi,0x8
c000eca2:	01 c6                	add    esi,eax
c000eca4:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000eca8:	c1 e0 08             	shl    eax,0x8
c000ecab:	01 d0                	add    eax,edx
c000ecad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecb5:	0f af c6             	imul   eax,esi
c000ecb8:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ecbf:	50                   	push   eax
c000ecc0:	e8 f1 8d ff ff       	call   c0007ab6 <malloc>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	89 c7                	mov    edi,eax
c000ecca:	85 c0                	test   eax,eax
c000eccc:	75 10                	jne    c000ecde <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ecce:	83 ec 0c             	sub    esp,0xc
c000ecd1:	68 34 1e 02 c0       	push   0xc0021e34
c000ecd6:	e8 04 29 00 00       	call   c00115df <KePanic(char const*)>
c000ecdb:	83 c4 10             	add    esp,0x10
c000ecde:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ece2:	ba 12 00 00 00       	mov    edx,0x12
c000ece7:	85 c0                	test   eax,eax
c000ece9:	74 11                	je     c000ecfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000eceb:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ecef:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ecf3:	c1 fa 03             	sar    edx,0x3
c000ecf6:	0f af d1             	imul   edx,ecx
c000ecf9:	83 c2 12             	add    edx,0x12
c000ecfc:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed00:	74 04                	je     c000ed06 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed02:	85 f6                	test   esi,esi
c000ed04:	75 12                	jne    c000ed18 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed06:	83 ec 0c             	sub    esp,0xc
c000ed09:	68 44 1e 02 c0       	push   0xc0021e44
c000ed0e:	e8 32 bc ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ed13:	e9 b8 00 00 00       	jmp    c000edd0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed18:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed1c:	83 f9 02             	cmp    ecx,0x2
c000ed1f:	0f 85 96 00 00 00    	jne    c000edbb <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed25:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed2a:	75 0e                	jne    c000ed3a <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed2c:	85 c0                	test   eax,eax
c000ed2e:	75 0a                	jne    c000ed3a <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed30:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ed33:	83 e8 18             	sub    eax,0x18
c000ed36:	a8 f7                	test   al,0xf7
c000ed38:	74 0a                	je     c000ed44 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ed3a:	83 ec 0c             	sub    esp,0xc
c000ed3d:	68 59 1e 02 c0       	push   0xc0021e59
c000ed42:	eb 7f                	jmp    c000edc3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ed44:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ed4c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ed54:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ed58:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ed60:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ed64:	75 0c                	jne    c000ed72 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ed66:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000ed6b:	c1 e0 18             	shl    eax,0x18
c000ed6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ed72:	45                   	inc    ebp
c000ed73:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ed78:	c1 e1 10             	shl    ecx,0x10
c000ed7b:	89 c8                	mov    eax,ecx
c000ed7d:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ed82:	c1 e1 08             	shl    ecx,0x8
c000ed85:	09 c1                	or     ecx,eax
c000ed87:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ed8b:	09 c1                	or     ecx,eax
c000ed8d:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ed91:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ed95:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ed99:	c1 f8 03             	sar    eax,0x3
c000ed9c:	01 c2                	add    edx,eax
c000ed9e:	89 e8                	mov    eax,ebp
c000eda0:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eda4:	39 c6                	cmp    esi,eax
c000eda6:	7f b0                	jg     c000ed58 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000eda8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000edac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edb0:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000edb3:	7e 22                	jle    c000edd7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000edb5:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000edb9:	eb 99                	jmp    c000ed54 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000edbb:	50                   	push   eax
c000edbc:	50                   	push   eax
c000edbd:	51                   	push   ecx
c000edbe:	68 67 1e 02 c0       	push   0xc0021e67
c000edc3:	e8 7d bb ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000edc8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000edcb:	e8 f6 8c ff ff       	call   c0007ac6 <free>
c000edd0:	83 c4 10             	add    esp,0x10
c000edd3:	31 ff                	xor    edi,edi
c000edd5:	eb 0f                	jmp    c000ede6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000edd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eddb:	89 30                	mov    DWORD PTR [eax],esi
c000eddd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ede1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ede4:	89 30                	mov    DWORD PTR [eax],esi
c000ede6:	83 c4 1c             	add    esp,0x1c
c000ede9:	89 f8                	mov    eax,edi
c000edeb:	5b                   	pop    ebx
c000edec:	5e                   	pop    esi
c000eded:	5f                   	pop    edi
c000edee:	5d                   	pop    ebp
c000edef:	c3                   	ret    

c000edf0 <Video::putTGA(int, int, unsigned char*, int)>:
c000edf0:	55                   	push   ebp
c000edf1:	57                   	push   edi
c000edf2:	56                   	push   esi
c000edf3:	53                   	push   ebx
c000edf4:	83 ec 28             	sub    esp,0x28
c000edf7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000edfb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000edff:	50                   	push   eax
c000ee00:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee04:	50                   	push   eax
c000ee05:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee09:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee0d:	56                   	push   esi
c000ee0e:	e8 75 fe ff ff       	call   c000ec88 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee13:	83 c4 20             	add    esp,0x20
c000ee16:	85 c0                	test   eax,eax
c000ee18:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee1c:	74 35                	je     c000ee53 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee1e:	89 c7                	mov    edi,eax
c000ee20:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee24:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee28:	39 d8                	cmp    eax,ebx
c000ee2a:	7e 27                	jle    c000ee53 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee2c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ee30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee34:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ee38:	39 e8                	cmp    eax,ebp
c000ee3a:	7e 14                	jle    c000ee50 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ee3c:	8b 06                	mov    eax,DWORD PTR [esi]
c000ee3e:	83 c7 04             	add    edi,0x4
c000ee41:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ee44:	53                   	push   ebx
c000ee45:	55                   	push   ebp
c000ee46:	45                   	inc    ebp
c000ee47:	56                   	push   esi
c000ee48:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ee4b:	83 c4 10             	add    esp,0x10
c000ee4e:	eb e0                	jmp    c000ee30 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ee50:	43                   	inc    ebx
c000ee51:	eb cd                	jmp    c000ee20 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ee53:	83 c4 1c             	add    esp,0x1c
c000ee56:	5b                   	pop    ebx
c000ee57:	5e                   	pop    esi
c000ee58:	5f                   	pop    edi
c000ee59:	5d                   	pop    ebp
c000ee5a:	c3                   	ret    
c000ee5b:	90                   	nop

c000ee5c <ACPI::close(int, int, void*)>:
c000ee5c:	83 ec 1c             	sub    esp,0x1c
c000ee5f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ee67:	74 0b                	je     c000ee74 <ACPI::close(int, int, void*)+0x18>
c000ee69:	b8 00 00 00 00       	mov    eax,0x0
c000ee6e:	e9 99 00 00 00       	jmp    c000ef0c <ACPI::close(int, int, void*)+0xb0>
c000ee73:	90                   	nop
c000ee74:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ee79:	75 29                	jne    c000eea4 <ACPI::close(int, int, void*)+0x48>
c000ee7b:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ee80:	85 c0                	test   eax,eax
c000ee82:	74 08                	je     c000ee8c <ACPI::close(int, int, void*)+0x30>
c000ee84:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ee89:	ff d0                	call   eax
c000ee8b:	90                   	nop
c000ee8c:	83 ec 0c             	sub    esp,0xc
c000ee8f:	68 c8 1e 02 c0       	push   0xc0021ec8
c000ee94:	e8 46 27 00 00       	call   c00115df <KePanic(char const*)>
c000ee99:	83 c4 10             	add    esp,0x10
c000ee9c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eea1:	eb 69                	jmp    c000ef0c <ACPI::close(int, int, void*)+0xb0>
c000eea3:	90                   	nop
c000eea4:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eea9:	75 59                	jne    c000ef04 <ACPI::close(int, int, void*)+0xa8>
c000eeab:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000eeb0:	85 c0                	test   eax,eax
c000eeb2:	74 08                	je     c000eebc <ACPI::close(int, int, void*)+0x60>
c000eeb4:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000eeb9:	ff d0                	call   eax
c000eebb:	90                   	nop
c000eebc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eec1:	8d 76 00             	lea    esi,[esi+0x0]
c000eec4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eec9:	83 e0 02             	and    eax,0x2
c000eecc:	74 1e                	je     c000eeec <ACPI::close(int, int, void*)+0x90>
c000eece:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eed5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed9:	89 c2                	mov    edx,eax
c000eedb:	ec                   	in     al,dx
c000eedc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eee0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eee4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eee8:	eb da                	jmp    c000eec4 <ACPI::close(int, int, void*)+0x68>
c000eeea:	66 90                	xchg   ax,ax
c000eeec:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000eef3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000eef8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000eefc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef00:	ee                   	out    dx,al
c000ef01:	8d 76 00             	lea    esi,[esi+0x0]
c000ef04:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef09:	8d 76 00             	lea    esi,[esi+0x0]
c000ef0c:	83 c4 1c             	add    esp,0x1c
c000ef0f:	c3                   	ret    

c000ef10 <findRSDP()>:
c000ef10:	83 ec 1c             	sub    esp,0x1c
c000ef13:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef18:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef1e:	83 e0 04             	and    eax,0x4
c000ef21:	0f b6 c0             	movzx  eax,al
c000ef24:	85 c0                	test   eax,eax
c000ef26:	75 08                	jne    c000ef30 <findRSDP()+0x20>
c000ef28:	b8 00 00 00 00       	mov    eax,0x0
c000ef2d:	eb 75                	jmp    c000efa4 <findRSDP()+0x94>
c000ef2f:	90                   	nop
c000ef30:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000ef35:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ef3a:	7f 1c                	jg     c000ef58 <findRSDP()+0x48>
c000ef3c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef41:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ef47:	83 e2 fb             	and    edx,0xfffffffb
c000ef4a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ef50:	b8 00 00 00 00       	mov    eax,0x0
c000ef55:	eb 4d                	jmp    c000efa4 <findRSDP()+0x94>
c000ef57:	90                   	nop
c000ef58:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ef60:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ef68:	77 32                	ja     c000ef9c <findRSDP()+0x8c>
c000ef6a:	83 ec 04             	sub    esp,0x4
c000ef6d:	6a 08                	push   0x8
c000ef6f:	68 63 1f 02 c0       	push   0xc0021f63
c000ef74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef78:	e8 03 14 ff ff       	call   c0000380 <memcmp>
c000ef7d:	83 c4 10             	add    esp,0x10
c000ef80:	85 c0                	test   eax,eax
c000ef82:	0f 94 c0             	sete   al
c000ef85:	0f b6 c0             	movzx  eax,al
c000ef88:	85 c0                	test   eax,eax
c000ef8a:	74 08                	je     c000ef94 <findRSDP()+0x84>
c000ef8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef90:	eb 12                	jmp    c000efa4 <findRSDP()+0x94>
c000ef92:	66 90                	xchg   ax,ax
c000ef94:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ef99:	eb c5                	jmp    c000ef60 <findRSDP()+0x50>
c000ef9b:	90                   	nop
c000ef9c:	b8 00 00 00 00       	mov    eax,0x0
c000efa1:	8d 76 00             	lea    esi,[esi+0x0]
c000efa4:	83 c4 1c             	add    esp,0x1c
c000efa7:	c3                   	ret    

c000efa8 <loadACPITables(unsigned char*)>:
c000efa8:	57                   	push   edi
c000efa9:	56                   	push   esi
c000efaa:	53                   	push   ebx
c000efab:	83 ec 60             	sub    esp,0x60
c000efae:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000efb3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efb9:	83 e0 04             	and    eax,0x4
c000efbc:	0f b6 c0             	movzx  eax,al
c000efbf:	85 c0                	test   eax,eax
c000efc1:	0f 84 41 02 00 00    	je     c000f208 <loadACPITables(unsigned char*)+0x260>
c000efc7:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000efcc:	0f b6 c0             	movzx  eax,al
c000efcf:	85 c0                	test   eax,eax
c000efd1:	74 79                	je     c000f04c <loadACPITables(unsigned char*)+0xa4>
c000efd3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000efd7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000efdb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000efdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000efe2:	83 e8 24             	sub    eax,0x24
c000efe5:	c1 e8 03             	shr    eax,0x3
c000efe8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efec:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000eff4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000eff8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000effc:	0f 8d ba 00 00 00    	jge    c000f0bc <loadACPITables(unsigned char*)+0x114>
c000f002:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f006:	83 c0 24             	add    eax,0x24
c000f009:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f00d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f011:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f015:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f019:	c1 e0 03             	shl    eax,0x3
c000f01c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f020:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f024:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f027:	8b 00                	mov    eax,DWORD PTR [eax]
c000f029:	89 c1                	mov    ecx,eax
c000f02b:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f030:	8d 50 01             	lea    edx,[eax+0x1]
c000f033:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f039:	89 ca                	mov    edx,ecx
c000f03b:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f042:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f047:	eb ab                	jmp    c000eff4 <loadACPITables(unsigned char*)+0x4c>
c000f049:	8d 76 00             	lea    esi,[esi+0x0]
c000f04c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f050:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f054:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f05b:	83 e8 24             	sub    eax,0x24
c000f05e:	c1 e8 02             	shr    eax,0x2
c000f061:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f065:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f06d:	8d 76 00             	lea    esi,[esi+0x0]
c000f070:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f074:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f078:	7d 42                	jge    c000f0bc <loadACPITables(unsigned char*)+0x114>
c000f07a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f07e:	83 c0 24             	add    eax,0x24
c000f081:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f085:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f089:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f08d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f091:	c1 e0 02             	shl    eax,0x2
c000f094:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f098:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f09c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f09e:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0a3:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a6:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f0ac:	89 ca                	mov    edx,ecx
c000f0ae:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f0b5:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f0ba:	eb b4                	jmp    c000f070 <loadACPITables(unsigned char*)+0xc8>
c000f0bc:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f0c4:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0c9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f0cd:	0f 8d 39 01 00 00    	jge    c000f20c <loadACPITables(unsigned char*)+0x264>
c000f0d3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0d7:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f0de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f0e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0e6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f0ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0ee:	25 ff 0f 00 00       	and    eax,0xfff
c000f0f3:	89 c6                	mov    esi,eax
c000f0f5:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f0fb:	83 ec 0c             	sub    esp,0xc
c000f0fe:	6a 01                	push   0x1
c000f100:	e8 08 a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f105:	83 c4 10             	add    esp,0x10
c000f108:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f10c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f112:	83 ec 0c             	sub    esp,0xc
c000f115:	6a 01                	push   0x1
c000f117:	6a 01                	push   0x1
c000f119:	50                   	push   eax
c000f11a:	52                   	push   edx
c000f11b:	53                   	push   ebx
c000f11c:	e8 f9 ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f121:	83 c4 20             	add    esp,0x20
c000f124:	09 f0                	or     eax,esi
c000f126:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f12a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f12e:	c1 e0 03             	shl    eax,0x3
c000f131:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f136:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f13a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f13e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f142:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f14a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f14e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f152:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f156:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f15a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f15e:	89 c6                	mov    esi,eax
c000f160:	89 d7                	mov    edi,edx
c000f162:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f164:	89 c8                	mov    eax,ecx
c000f166:	89 fa                	mov    edx,edi
c000f168:	89 f3                	mov    ebx,esi
c000f16a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f16e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f172:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f176:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f17a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f17d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f181:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f185:	05 00 10 00 00       	add    eax,0x1000
c000f18a:	c1 e8 0c             	shr    eax,0xc
c000f18d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f191:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f195:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f199:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f19d:	25 ff 0f 00 00       	and    eax,0xfff
c000f1a2:	89 c6                	mov    esi,eax
c000f1a4:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1aa:	83 ec 0c             	sub    esp,0xc
c000f1ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1b1:	e8 57 a4 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f1b6:	83 c4 10             	add    esp,0x10
c000f1b9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1bd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1c3:	83 ec 0c             	sub    esp,0xc
c000f1c6:	6a 01                	push   0x1
c000f1c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f1cc:	50                   	push   eax
c000f1cd:	52                   	push   edx
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 46 ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f1d4:	83 c4 20             	add    esp,0x20
c000f1d7:	09 f0                	or     eax,esi
c000f1d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1e1:	83 ec 0c             	sub    esp,0xc
c000f1e4:	50                   	push   eax
c000f1e5:	e8 41 a7 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000f1ea:	83 c4 10             	add    esp,0x10
c000f1ed:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1f1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f1f5:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f1fc:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f201:	e9 be fe ff ff       	jmp    c000f0c4 <loadACPITables(unsigned char*)+0x11c>
c000f206:	66 90                	xchg   ax,ax
c000f208:	90                   	nop
c000f209:	8d 76 00             	lea    esi,[esi+0x0]
c000f20c:	83 c4 60             	add    esp,0x60
c000f20f:	5b                   	pop    ebx
c000f210:	5e                   	pop    esi
c000f211:	5f                   	pop    edi
c000f212:	c3                   	ret    
c000f213:	90                   	nop

c000f214 <findRSDT(unsigned char*)>:
c000f214:	57                   	push   edi
c000f215:	56                   	push   esi
c000f216:	53                   	push   ebx
c000f217:	83 ec 50             	sub    esp,0x50
c000f21a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f21f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f225:	83 e0 04             	and    eax,0x4
c000f228:	0f b6 c0             	movzx  eax,al
c000f22b:	85 c0                	test   eax,eax
c000f22d:	75 0d                	jne    c000f23c <findRSDT(unsigned char*)+0x28>
c000f22f:	b8 00 00 00 00       	mov    eax,0x0
c000f234:	e9 2b 01 00 00       	jmp    c000f364 <findRSDT(unsigned char*)+0x150>
c000f239:	8d 76 00             	lea    esi,[esi+0x0]
c000f23c:	89 e0                	mov    eax,esp
c000f23e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f242:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f246:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f24a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f256:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f25a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f25e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f262:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f266:	89 c6                	mov    esi,eax
c000f268:	89 d7                	mov    edi,edx
c000f26a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f26c:	89 c8                	mov    eax,ecx
c000f26e:	89 fa                	mov    edx,edi
c000f270:	89 f3                	mov    ebx,esi
c000f272:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f276:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f27a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f27e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f282:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f286:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f28e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f292:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f296:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f29e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f2a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f2a6:	25 ff 0f 00 00       	and    eax,0xfff
c000f2ab:	89 c6                	mov    esi,eax
c000f2ad:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2b3:	83 ec 0c             	sub    esp,0xc
c000f2b6:	6a 02                	push   0x2
c000f2b8:	e8 50 a3 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f2bd:	83 c4 10             	add    esp,0x10
c000f2c0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f2c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2ca:	83 ec 0c             	sub    esp,0xc
c000f2cd:	6a 01                	push   0x1
c000f2cf:	6a 02                	push   0x2
c000f2d1:	50                   	push   eax
c000f2d2:	52                   	push   edx
c000f2d3:	53                   	push   ebx
c000f2d4:	e8 41 ac ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2d9:	83 c4 20             	add    esp,0x20
c000f2dc:	09 f0                	or     eax,esi
c000f2de:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f2e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f2e6:	25 ff 0f 00 00       	and    eax,0xfff
c000f2eb:	89 c6                	mov    esi,eax
c000f2ed:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2f3:	83 ec 0c             	sub    esp,0xc
c000f2f6:	6a 02                	push   0x2
c000f2f8:	e8 10 a3 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f2fd:	83 c4 10             	add    esp,0x10
c000f300:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f304:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f30a:	83 ec 0c             	sub    esp,0xc
c000f30d:	6a 01                	push   0x1
c000f30f:	6a 02                	push   0x2
c000f311:	50                   	push   eax
c000f312:	52                   	push   edx
c000f313:	53                   	push   ebx
c000f314:	e8 01 ac ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f319:	83 c4 20             	add    esp,0x20
c000f31c:	09 f0                	or     eax,esi
c000f31e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f322:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f327:	85 c0                	test   eax,eax
c000f329:	75 11                	jne    c000f33c <findRSDT(unsigned char*)+0x128>
c000f32b:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f332:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f336:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f33a:	eb 24                	jmp    c000f360 <findRSDT(unsigned char*)+0x14c>
c000f33c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f341:	83 f8 02             	cmp    eax,0x2
c000f344:	75 12                	jne    c000f358 <findRSDT(unsigned char*)+0x144>
c000f346:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f34d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f351:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f355:	eb 09                	jmp    c000f360 <findRSDT(unsigned char*)+0x14c>
c000f357:	90                   	nop
c000f358:	b8 00 00 00 00       	mov    eax,0x0
c000f35d:	eb 05                	jmp    c000f364 <findRSDT(unsigned char*)+0x150>
c000f35f:	90                   	nop
c000f360:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f364:	83 c4 50             	add    esp,0x50
c000f367:	5b                   	pop    ebx
c000f368:	5e                   	pop    esi
c000f369:	5f                   	pop    edi
c000f36a:	c3                   	ret    
c000f36b:	90                   	nop

c000f36c <findDataTable(unsigned char*, char*)>:
c000f36c:	83 ec 1c             	sub    esp,0x1c
c000f36f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f374:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f37a:	83 e0 04             	and    eax,0x4
c000f37d:	0f b6 c0             	movzx  eax,al
c000f380:	85 c0                	test   eax,eax
c000f382:	75 08                	jne    c000f38c <findDataTable(unsigned char*, char*)+0x20>
c000f384:	b8 00 00 00 00       	mov    eax,0x0
c000f389:	eb 5d                	jmp    c000f3e8 <findDataTable(unsigned char*, char*)+0x7c>
c000f38b:	90                   	nop
c000f38c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f394:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f399:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f39d:	7d 41                	jge    c000f3e0 <findDataTable(unsigned char*, char*)+0x74>
c000f39f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3a3:	c1 e0 03             	shl    eax,0x3
c000f3a6:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f3ab:	83 ec 04             	sub    esp,0x4
c000f3ae:	6a 04                	push   0x4
c000f3b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3b4:	50                   	push   eax
c000f3b5:	e8 c6 0f ff ff       	call   c0000380 <memcmp>
c000f3ba:	83 c4 10             	add    esp,0x10
c000f3bd:	85 c0                	test   eax,eax
c000f3bf:	0f 94 c0             	sete   al
c000f3c2:	0f b6 c0             	movzx  eax,al
c000f3c5:	85 c0                	test   eax,eax
c000f3c7:	74 0f                	je     c000f3d8 <findDataTable(unsigned char*, char*)+0x6c>
c000f3c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3cd:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f3d4:	eb 12                	jmp    c000f3e8 <findDataTable(unsigned char*, char*)+0x7c>
c000f3d6:	66 90                	xchg   ax,ax
c000f3d8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f3dd:	eb b5                	jmp    c000f394 <findDataTable(unsigned char*, char*)+0x28>
c000f3df:	90                   	nop
c000f3e0:	b8 00 00 00 00       	mov    eax,0x0
c000f3e5:	8d 76 00             	lea    esi,[esi+0x0]
c000f3e8:	83 c4 1c             	add    esp,0x1c
c000f3eb:	c3                   	ret    

c000f3ec <scanMADT()>:
c000f3ec:	53                   	push   ebx
c000f3ed:	83 ec 38             	sub    esp,0x38
c000f3f0:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f3f5:	25 00 04 00 00       	and    eax,0x400
c000f3fa:	74 14                	je     c000f410 <scanMADT()+0x24>
c000f3fc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f401:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f407:	83 e2 fb             	and    edx,0xfffffffb
c000f40a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f410:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f415:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f41b:	83 e0 04             	and    eax,0x4
c000f41e:	0f b6 c0             	movzx  eax,al
c000f421:	85 c0                	test   eax,eax
c000f423:	0f 84 6b 04 00 00    	je     c000f894 <scanMADT()+0x4a8>
c000f429:	e8 e2 fa ff ff       	call   c000ef10 <findRSDP()>
c000f42e:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f433:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f438:	85 c0                	test   eax,eax
c000f43a:	75 1c                	jne    c000f458 <scanMADT()+0x6c>
c000f43c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f441:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f447:	83 e2 fb             	and    edx,0xfffffffb
c000f44a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f450:	e9 47 04 00 00       	jmp    c000f89c <scanMADT()+0x4b0>
c000f455:	8d 76 00             	lea    esi,[esi+0x0]
c000f458:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f45d:	83 ec 0c             	sub    esp,0xc
c000f460:	50                   	push   eax
c000f461:	e8 ae fd ff ff       	call   c000f214 <findRSDT(unsigned char*)>
c000f466:	83 c4 10             	add    esp,0x10
c000f469:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f46e:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f473:	85 c0                	test   eax,eax
c000f475:	75 19                	jne    c000f490 <scanMADT()+0xa4>
c000f477:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f47c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f482:	83 e2 fb             	and    edx,0xfffffffb
c000f485:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f48b:	e9 0c 04 00 00       	jmp    c000f89c <scanMADT()+0x4b0>
c000f490:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f495:	83 ec 0c             	sub    esp,0xc
c000f498:	50                   	push   eax
c000f499:	e8 0a fb ff ff       	call   c000efa8 <loadACPITables(unsigned char*)>
c000f49e:	83 c4 10             	add    esp,0x10
c000f4a1:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4a6:	83 ec 08             	sub    esp,0x8
c000f4a9:	68 6c 1f 02 c0       	push   0xc0021f6c
c000f4ae:	50                   	push   eax
c000f4af:	e8 b8 fe ff ff       	call   c000f36c <findDataTable(unsigned char*, char*)>
c000f4b4:	83 c4 10             	add    esp,0x10
c000f4b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f4bb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f4c0:	75 1a                	jne    c000f4dc <scanMADT()+0xf0>
c000f4c2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4c7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4cd:	83 e2 fe             	and    edx,0xfffffffe
c000f4d0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4d6:	e9 c1 03 00 00       	jmp    c000f89c <scanMADT()+0x4b0>
c000f4db:	90                   	nop
c000f4dc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f4e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f4eb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f4ef:	0f 87 a7 03 00 00    	ja     c000f89c <scanMADT()+0x4b0>
c000f4f5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f4fd:	0f 87 99 03 00 00    	ja     c000f89c <scanMADT()+0x4b0>
c000f503:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f507:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f50b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f50f:	8d 50 01             	lea    edx,[eax+0x1]
c000f512:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f516:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f51a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f51e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f522:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f526:	8d 50 01             	lea    edx,[eax+0x1]
c000f529:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f52d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f531:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f535:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f539:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f53e:	83 f8 02             	cmp    eax,0x2
c000f541:	0f 86 51 03 00 00    	jbe    c000f898 <scanMADT()+0x4ac>
c000f547:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f54c:	85 c0                	test   eax,eax
c000f54e:	75 58                	jne    c000f5a8 <scanMADT()+0x1bc>
c000f550:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f554:	8d 50 01             	lea    edx,[eax+0x1]
c000f557:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f55b:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f561:	0f b6 d2             	movzx  edx,dl
c000f564:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f568:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f56c:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f572:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f576:	8d 50 01             	lea    edx,[eax+0x1]
c000f579:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f57d:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f583:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f586:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f58c:	0f b6 d2             	movzx  edx,dl
c000f58f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f593:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f597:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f59d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f5a2:	e9 d9 02 00 00       	jmp    c000f880 <scanMADT()+0x494>
c000f5a7:	90                   	nop
c000f5a8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5ad:	83 f8 01             	cmp    eax,0x1
c000f5b0:	0f 85 1a 01 00 00    	jne    c000f6d0 <scanMADT()+0x2e4>
c000f5b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ba:	8d 50 01             	lea    edx,[eax+0x1]
c000f5bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5c1:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f5c7:	0f b6 d2             	movzx  edx,dl
c000f5ca:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5ce:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5d2:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f5d8:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f5dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5e5:	01 d0                	add    eax,edx
c000f5e7:	83 c0 2c             	add    eax,0x2c
c000f5ea:	8a 00                	mov    al,BYTE PTR [eax]
c000f5ec:	0f b6 d0             	movzx  edx,al
c000f5ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5f3:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5fa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5fe:	0f b6 c0             	movzx  eax,al
c000f601:	c1 e0 08             	shl    eax,0x8
c000f604:	89 d1                	mov    ecx,edx
c000f606:	09 c1                	or     ecx,eax
c000f608:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f60c:	8d 50 02             	lea    edx,[eax+0x2]
c000f60f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f613:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f617:	0f b6 c0             	movzx  eax,al
c000f61a:	c1 e0 10             	shl    eax,0x10
c000f61d:	09 c1                	or     ecx,eax
c000f61f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f623:	8d 50 03             	lea    edx,[eax+0x3]
c000f626:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f62a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f62e:	0f b6 c0             	movzx  eax,al
c000f631:	c1 e0 18             	shl    eax,0x18
c000f634:	09 c1                	or     ecx,eax
c000f636:	89 ca                	mov    edx,ecx
c000f638:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f63d:	0f b6 c0             	movzx  eax,al
c000f640:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f647:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f64c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f650:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f654:	01 d0                	add    eax,edx
c000f656:	83 c0 2c             	add    eax,0x2c
c000f659:	8a 00                	mov    al,BYTE PTR [eax]
c000f65b:	0f b6 d0             	movzx  edx,al
c000f65e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f662:	8d 48 01             	lea    ecx,[eax+0x1]
c000f665:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f669:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f66d:	0f b6 c0             	movzx  eax,al
c000f670:	c1 e0 08             	shl    eax,0x8
c000f673:	89 d1                	mov    ecx,edx
c000f675:	09 c1                	or     ecx,eax
c000f677:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f67b:	8d 50 02             	lea    edx,[eax+0x2]
c000f67e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f682:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f686:	0f b6 c0             	movzx  eax,al
c000f689:	c1 e0 10             	shl    eax,0x10
c000f68c:	09 c1                	or     ecx,eax
c000f68e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f692:	8d 50 03             	lea    edx,[eax+0x3]
c000f695:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f699:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f69d:	0f b6 c0             	movzx  eax,al
c000f6a0:	c1 e0 18             	shl    eax,0x18
c000f6a3:	09 c1                	or     ecx,eax
c000f6a5:	89 ca                	mov    edx,ecx
c000f6a7:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6ac:	0f b6 c0             	movzx  eax,al
c000f6af:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f6b6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f6bb:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6c0:	83 c0 01             	add    eax,0x1
c000f6c3:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f6c8:	e9 b3 01 00 00       	jmp    c000f880 <scanMADT()+0x494>
c000f6cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f6d0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f6d5:	83 f8 02             	cmp    eax,0x2
c000f6d8:	0f 85 ea 00 00 00    	jne    c000f7c8 <scanMADT()+0x3dc>
c000f6de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6e2:	8d 50 01             	lea    edx,[eax+0x1]
c000f6e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6ed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f6f1:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f6f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6f9:	8d 50 01             	lea    edx,[eax+0x1]
c000f6fc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f700:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f704:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f708:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f70c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f714:	01 d0                	add    eax,edx
c000f716:	83 c0 2c             	add    eax,0x2c
c000f719:	8a 00                	mov    al,BYTE PTR [eax]
c000f71b:	0f b6 d0             	movzx  edx,al
c000f71e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f722:	8d 48 01             	lea    ecx,[eax+0x1]
c000f725:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f729:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f72d:	0f b6 c0             	movzx  eax,al
c000f730:	c1 e0 08             	shl    eax,0x8
c000f733:	89 d1                	mov    ecx,edx
c000f735:	09 c1                	or     ecx,eax
c000f737:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f73b:	8d 50 02             	lea    edx,[eax+0x2]
c000f73e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f742:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f746:	0f b6 c0             	movzx  eax,al
c000f749:	c1 e0 10             	shl    eax,0x10
c000f74c:	09 c1                	or     ecx,eax
c000f74e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f752:	8d 50 03             	lea    edx,[eax+0x3]
c000f755:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f759:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f75d:	0f b6 c0             	movzx  eax,al
c000f760:	c1 e0 18             	shl    eax,0x18
c000f763:	09 c8                	or     eax,ecx
c000f765:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f769:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f76e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f772:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f776:	01 d0                	add    eax,edx
c000f778:	83 c0 2c             	add    eax,0x2c
c000f77b:	8a 00                	mov    al,BYTE PTR [eax]
c000f77d:	0f b6 c0             	movzx  eax,al
c000f780:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f784:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f787:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f78b:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f78f:	0f b6 d2             	movzx  edx,dl
c000f792:	c1 e2 08             	shl    edx,0x8
c000f795:	09 d0                	or     eax,edx
c000f797:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f79c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f7a1:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f7a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f7aa:	88 90 68 36 02 c0    	mov    BYTE PTR [eax-0x3ffdc998],dl
c000f7b0:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f7b5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f7ba:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f7c2:	e9 b9 00 00 00       	jmp    c000f880 <scanMADT()+0x494>
c000f7c7:	90                   	nop
c000f7c8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7cd:	83 f8 04             	cmp    eax,0x4
c000f7d0:	0f 85 9a 00 00 00    	jne    c000f870 <scanMADT()+0x484>
c000f7d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7da:	8d 50 01             	lea    edx,[eax+0x1]
c000f7dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7e5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7e9:	0f b6 c0             	movzx  eax,al
c000f7ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f7f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7f8:	01 d0                	add    eax,edx
c000f7fa:	83 c0 2c             	add    eax,0x2c
c000f7fd:	8a 00                	mov    al,BYTE PTR [eax]
c000f7ff:	0f b6 d0             	movzx  edx,al
c000f802:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f806:	8d 48 01             	lea    ecx,[eax+0x1]
c000f809:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f80d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f811:	0f b6 c0             	movzx  eax,al
c000f814:	c1 e0 08             	shl    eax,0x8
c000f817:	09 d0                	or     eax,edx
c000f819:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f81d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f822:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f826:	8d 50 01             	lea    edx,[eax+0x1]
c000f829:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f82d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f831:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f835:	0f b6 c0             	movzx  eax,al
c000f838:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f840:	c1 e0 08             	shl    eax,0x8
c000f843:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f847:	89 c1                	mov    ecx,eax
c000f849:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f84d:	c1 e0 18             	shl    eax,0x18
c000f850:	89 c3                	mov    ebx,eax
c000f852:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f857:	8d 50 01             	lea    edx,[eax+0x1]
c000f85a:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f860:	09 d9                	or     ecx,ebx
c000f862:	89 ca                	mov    edx,ecx
c000f864:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f86b:	eb 13                	jmp    c000f880 <scanMADT()+0x494>
c000f86d:	8d 76 00             	lea    esi,[esi+0x0]
c000f870:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f875:	83 f8 05             	cmp    eax,0x5
c000f878:	75 06                	jne    c000f880 <scanMADT()+0x494>
c000f87a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f87f:	90                   	nop
c000f880:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f885:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f889:	01 d0                	add    eax,edx
c000f88b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f88f:	e9 50 fc ff ff       	jmp    c000f4e4 <scanMADT()+0xf8>
c000f894:	90                   	nop
c000f895:	eb 05                	jmp    c000f89c <scanMADT()+0x4b0>
c000f897:	90                   	nop
c000f898:	90                   	nop
c000f899:	8d 76 00             	lea    esi,[esi+0x0]
c000f89c:	83 c4 38             	add    esp,0x38
c000f89f:	5b                   	pop    ebx
c000f8a0:	c3                   	ret    
c000f8a1:	90                   	nop
c000f8a2:	66 90                	xchg   ax,ax

c000f8a4 <ACPI::ACPI()>:
c000f8a4:	83 ec 0c             	sub    esp,0xc
c000f8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ab:	83 ec 08             	sub    esp,0x8
c000f8ae:	68 71 1f 02 c0       	push   0xc0021f71
c000f8b3:	50                   	push   eax
c000f8b4:	e8 65 d2 ff ff       	call   c000cb1e <Device::Device(char const*)>
c000f8b9:	83 c4 10             	add    esp,0x10
c000f8bc:	ba c4 20 02 c0       	mov    edx,0xc00220c4
c000f8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8c5:	89 10                	mov    DWORD PTR [eax],edx
c000f8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8cb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f8d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8d6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8e4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f8ee:	e8 f9 fa ff ff       	call   c000f3ec <scanMADT()>
c000f8f3:	90                   	nop
c000f8f4:	83 c4 0c             	add    esp,0xc
c000f8f7:	c3                   	ret    

c000f8f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f8f8:	83 ec 2c             	sub    esp,0x2c
c000f8fb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f8ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f903:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f907:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f90b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f910:	88 d0                	mov    al,dl
c000f912:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f916:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f91b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f923:	90                   	nop
c000f924:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f928:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f92e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f932:	0f 8d b0 00 00 00    	jge    c000f9e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f938:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f93c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f940:	83 c2 2a             	add    edx,0x2a
c000f943:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f947:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f94c:	0f b7 c0             	movzx  eax,ax
c000f94f:	39 c2                	cmp    edx,eax
c000f951:	0f 85 85 00 00 00    	jne    c000f9dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f957:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f95b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f95f:	83 c2 2a             	add    edx,0x2a
c000f962:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f966:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f96b:	0f b6 c0             	movzx  eax,al
c000f96e:	39 c2                	cmp    edx,eax
c000f970:	75 6a                	jne    c000f9dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f972:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f977:	85 c0                	test   eax,eax
c000f979:	74 3d                	je     c000f9b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f97b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f97f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f983:	83 c2 2a             	add    edx,0x2a
c000f986:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f98a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f98e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f991:	39 c2                	cmp    edx,eax
c000f993:	74 13                	je     c000f9a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f995:	83 ec 0c             	sub    esp,0xc
c000f998:	68 ec 1e 02 c0       	push   0xc0021eec
c000f99d:	e8 3d 1c 00 00       	call   c00115df <KePanic(char const*)>
c000f9a2:	83 c4 10             	add    esp,0x10
c000f9a5:	8d 76 00             	lea    esi,[esi+0x0]
c000f9a8:	83 ec 0c             	sub    esp,0xc
c000f9ab:	68 76 1f 02 c0       	push   0xc0021f76
c000f9b0:	e8 2a 1c 00 00       	call   c00115df <KePanic(char const*)>
c000f9b5:	83 c4 10             	add    esp,0x10
c000f9b8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f9bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9c4:	83 c2 2a             	add    edx,0x2a
c000f9c7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f9cb:	8b 02                	mov    eax,DWORD PTR [edx]
c000f9cd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f9d0:	89 01                	mov    DWORD PTR [ecx],eax
c000f9d2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f9d5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f9da:	66 90                	xchg   ax,ax
c000f9dc:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f9e1:	e9 3e ff ff ff       	jmp    c000f924 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f9e6:	66 90                	xchg   ax,ax
c000f9e8:	90                   	nop
c000f9e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9ed:	83 c4 2c             	add    esp,0x2c
c000f9f0:	c2 04 00             	ret    0x4
c000f9f3:	90                   	nop

c000f9f4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f9f4:	83 ec 1c             	sub    esp,0x1c
c000f9f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9fb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f9ff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fa03:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fa08:	88 c8                	mov    al,cl
c000fa0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fa0e:	88 d0                	mov    al,dl
c000fa10:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa18:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa22:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa25:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000fa29:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000fa2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa31:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa37:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fa3b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000fa3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa42:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000fa47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa4b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa51:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fa55:	83 c0 01             	add    eax,0x1
c000fa58:	88 c1                	mov    cl,al
c000fa5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa5e:	83 c2 2a             	add    edx,0x2a
c000fa61:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fa65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa69:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa73:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa76:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fa7a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fa7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa82:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa88:	8d 50 01             	lea    edx,[eax+0x1]
c000fa8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa8f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fa95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa99:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa9f:	3d 00 02 00 00       	cmp    eax,0x200
c000faa4:	75 12                	jne    c000fab8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000faa6:	83 ec 0c             	sub    esp,0xc
c000faa9:	68 85 1f 02 c0       	push   0xc0021f85
c000faae:	e8 2c 1b 00 00       	call   c00115df <KePanic(char const*)>
c000fab3:	83 c4 10             	add    esp,0x10
c000fab6:	66 90                	xchg   ax,ax
c000fab8:	90                   	nop
c000fab9:	83 c4 1c             	add    esp,0x1c
c000fabc:	c3                   	ret    
c000fabd:	90                   	nop
c000fabe:	66 90                	xchg   ax,ax

c000fac0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fac0:	b8 00 00 00 00       	mov    eax,0x0
c000fac5:	c3                   	ret    
c000fac6:	66 90                	xchg   ax,ax

c000fac8 <ACPI::detectPCI()>:
c000fac8:	53                   	push   ebx
c000fac9:	83 ec 28             	sub    esp,0x28
c000facc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fad1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fad6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fadb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fae1:	83 e0 04             	and    eax,0x4
c000fae4:	0f b6 c0             	movzx  eax,al
c000fae7:	85 c0                	test   eax,eax
c000fae9:	74 2d                	je     c000fb18 <ACPI::detectPCI()+0x50>
c000faeb:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000faf0:	83 ec 08             	sub    esp,0x8
c000faf3:	68 a2 1f 02 c0       	push   0xc0021fa2
c000faf8:	50                   	push   eax
c000faf9:	e8 6e f8 ff ff       	call   c000f36c <findDataTable(unsigned char*, char*)>
c000fafe:	83 c4 10             	add    esp,0x10
c000fb01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb05:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fb0a:	74 0c                	je     c000fb18 <ACPI::detectPCI()+0x50>
c000fb0c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb11:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb16:	66 90                	xchg   ax,ax
c000fb18:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fb20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb24:	8a 00                	mov    al,BYTE PTR [eax]
c000fb26:	0f b6 c0             	movzx  eax,al
c000fb29:	83 f8 01             	cmp    eax,0x1
c000fb2c:	75 0e                	jne    c000fb3c <ACPI::detectPCI()+0x74>
c000fb2e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb33:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb38:	eb 2e                	jmp    c000fb68 <ACPI::detectPCI()+0xa0>
c000fb3a:	66 90                	xchg   ax,ax
c000fb3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb40:	8a 00                	mov    al,BYTE PTR [eax]
c000fb42:	0f b6 c0             	movzx  eax,al
c000fb45:	83 f8 02             	cmp    eax,0x2
c000fb48:	75 1e                	jne    c000fb68 <ACPI::detectPCI()+0xa0>
c000fb4a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb4f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fb54:	85 c0                	test   eax,eax
c000fb56:	74 10                	je     c000fb68 <ACPI::detectPCI()+0xa0>
c000fb58:	83 ec 0c             	sub    esp,0xc
c000fb5b:	68 1c 1f 02 c0       	push   0xc0021f1c
c000fb60:	e8 7a 1a 00 00       	call   c00115df <KePanic(char const*)>
c000fb65:	83 c4 10             	add    esp,0x10
c000fb68:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fb6c:	83 f0 01             	xor    eax,0x1
c000fb6f:	0f b6 c0             	movzx  eax,al
c000fb72:	85 c0                	test   eax,eax
c000fb74:	74 46                	je     c000fbbc <ACPI::detectPCI()+0xf4>
c000fb76:	e8 b5 05 ff ff       	call   c0000130 <manualPCIProbe>
c000fb7b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fb7f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fb84:	75 0e                	jne    c000fb94 <ACPI::detectPCI()+0xcc>
c000fb86:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb8b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb90:	eb 2a                	jmp    c000fbbc <ACPI::detectPCI()+0xf4>
c000fb92:	66 90                	xchg   ax,ax
c000fb94:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fb99:	75 21                	jne    c000fbbc <ACPI::detectPCI()+0xf4>
c000fb9b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fba0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fba5:	85 c0                	test   eax,eax
c000fba7:	74 13                	je     c000fbbc <ACPI::detectPCI()+0xf4>
c000fba9:	83 ec 0c             	sub    esp,0xc
c000fbac:	68 1c 1f 02 c0       	push   0xc0021f1c
c000fbb1:	e8 29 1a 00 00       	call   c00115df <KePanic(char const*)>
c000fbb6:	83 c4 10             	add    esp,0x10
c000fbb9:	8d 76 00             	lea    esi,[esi+0x0]
c000fbbc:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fbc1:	85 c0                	test   eax,eax
c000fbc3:	0f 84 87 00 00 00    	je     c000fc50 <ACPI::detectPCI()+0x188>
c000fbc9:	83 ec 0c             	sub    esp,0xc
c000fbcc:	68 a7 1f 02 c0       	push   0xc0021fa7
c000fbd1:	e8 09 13 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c000fbd6:	83 c4 10             	add    esp,0x10
c000fbd9:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fbe1:	83 ec 0c             	sub    esp,0xc
c000fbe4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fbe8:	e8 c9 7e ff ff       	call   c0007ab6 <malloc>
c000fbed:	83 c4 10             	add    esp,0x10
c000fbf0:	89 c3                	mov    ebx,eax
c000fbf2:	83 ec 0c             	sub    esp,0xc
c000fbf5:	53                   	push   ebx
c000fbf6:	e8 5d b5 00 00       	call   c001b158 <PCI::PCI()>
c000fbfb:	83 c4 10             	add    esp,0x10
c000fbfe:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fc02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc06:	83 ec 08             	sub    esp,0x8
c000fc09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc0d:	50                   	push   eax
c000fc0e:	e8 73 cd ff ff       	call   c000c986 <Device::addChild(Device*)>
c000fc13:	83 c4 10             	add    esp,0x10
c000fc16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc1a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc1c:	83 c0 08             	add    eax,0x8
c000fc1f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc21:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fc26:	85 d2                	test   edx,edx
c000fc28:	74 0a                	je     c000fc34 <ACPI::detectPCI()+0x16c>
c000fc2a:	ba 01 00 00 00       	mov    edx,0x1
c000fc2f:	eb 0b                	jmp    c000fc3c <ACPI::detectPCI()+0x174>
c000fc31:	8d 76 00             	lea    esi,[esi+0x0]
c000fc34:	ba 02 00 00 00       	mov    edx,0x2
c000fc39:	8d 76 00             	lea    esi,[esi+0x0]
c000fc3c:	6a 00                	push   0x0
c000fc3e:	6a 00                	push   0x0
c000fc40:	52                   	push   edx
c000fc41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc45:	ff d0                	call   eax
c000fc47:	83 c4 10             	add    esp,0x10
c000fc4a:	e9 91 00 00 00       	jmp    c000fce0 <ACPI::detectPCI()+0x218>
c000fc4f:	90                   	nop
c000fc50:	83 ec 0c             	sub    esp,0xc
c000fc53:	68 bf 1f 02 c0       	push   0xc0021fbf
c000fc58:	e8 82 12 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c000fc5d:	83 c4 10             	add    esp,0x10
c000fc60:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fc67:	83 ec 0c             	sub    esp,0xc
c000fc6a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc6e:	e8 43 7e ff ff       	call   c0007ab6 <malloc>
c000fc73:	83 c4 10             	add    esp,0x10
c000fc76:	89 c3                	mov    ebx,eax
c000fc78:	83 ec 0c             	sub    esp,0xc
c000fc7b:	53                   	push   ebx
c000fc7c:	e8 71 c0 00 00       	call   c001bcf2 <IDE::IDE()>
c000fc81:	83 c4 10             	add    esp,0x10
c000fc84:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fc88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc8c:	83 ec 08             	sub    esp,0x8
c000fc8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc93:	50                   	push   eax
c000fc94:	e8 ed cc ff ff       	call   c000c986 <Device::addChild(Device*)>
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fca0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fcaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcae:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fcb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcbb:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fcc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcc8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcca:	83 c0 08             	add    eax,0x8
c000fccd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fccf:	6a 00                	push   0x0
c000fcd1:	6a 00                	push   0x0
c000fcd3:	6a 00                	push   0x0
c000fcd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcd9:	ff d0                	call   eax
c000fcdb:	83 c4 10             	add    esp,0x10
c000fcde:	66 90                	xchg   ax,ax
c000fce0:	90                   	nop
c000fce1:	83 c4 28             	add    esp,0x28
c000fce4:	5b                   	pop    ebx
c000fce5:	c3                   	ret    
c000fce6:	66 90                	xchg   ax,ax

c000fce8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fce8:	83 ec 1c             	sub    esp,0x1c
c000fceb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcef:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fcf2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fcf6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fcfb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd00:	83 ec 08             	sub    esp,0x8
c000fd03:	52                   	push   edx
c000fd04:	50                   	push   eax
c000fd05:	e8 6e 74 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000fd0a:	83 c4 10             	add    esp,0x10
c000fd0d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fd11:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd16:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd1b:	83 ec 04             	sub    esp,0x4
c000fd1e:	6a 01                	push   0x1
c000fd20:	52                   	push   edx
c000fd21:	50                   	push   eax
c000fd22:	e8 6b 75 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fd27:	83 c4 10             	add    esp,0x10
c000fd2a:	90                   	nop
c000fd2b:	83 c4 1c             	add    esp,0x1c
c000fd2e:	c3                   	ret    
c000fd2f:	90                   	nop

c000fd30 <ACPI::sleep()>:
c000fd30:	83 ec 0c             	sub    esp,0xc
c000fd33:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd38:	85 c0                	test   eax,eax
c000fd3a:	74 08                	je     c000fd44 <ACPI::sleep()+0x14>
c000fd3c:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd41:	ff d0                	call   eax
c000fd43:	90                   	nop
c000fd44:	90                   	nop
c000fd45:	83 c4 0c             	add    esp,0xc
c000fd48:	c3                   	ret    
c000fd49:	90                   	nop
c000fd4a:	66 90                	xchg   ax,ax

c000fd4c <ACPI::open(int, int, void*)>:
c000fd4c:	57                   	push   edi
c000fd4d:	56                   	push   esi
c000fd4e:	53                   	push   ebx
c000fd4f:	81 ec 70 01 00 00    	sub    esp,0x170
c000fd55:	83 ec 0c             	sub    esp,0xc
c000fd58:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fd5f:	e8 64 fd ff ff       	call   c000fac8 <ACPI::detectPCI()>
c000fd64:	83 c4 10             	add    esp,0x10
c000fd67:	83 ec 0c             	sub    esp,0xc
c000fd6a:	68 44 1f 02 c0       	push   0xc0021f44
c000fd6f:	e8 6b 11 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c000fd74:	83 c4 10             	add    esp,0x10
c000fd77:	b8 4c 05 00 00       	mov    eax,0x54c
c000fd7c:	8a 00                	mov    al,BYTE PTR [eax]
c000fd7e:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fd85:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fd8d:	83 f8 01             	cmp    eax,0x1
c000fd90:	75 12                	jne    c000fda4 <ACPI::open(int, int, void*)+0x58>
c000fd92:	83 ec 0c             	sub    esp,0xc
c000fd95:	68 8f 18 02 c0       	push   0xc002188f
c000fd9a:	e8 06 4e 00 00       	call   c0014ba5 <Thr::loadKernelSymbolTable(char const*)>
c000fd9f:	83 c4 10             	add    esp,0x10
c000fda2:	eb 34                	jmp    c000fdd8 <ACPI::open(int, int, void*)+0x8c>
c000fda4:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fdac:	3d bb 00 00 00       	cmp    eax,0xbb
c000fdb1:	75 15                	jne    c000fdc8 <ACPI::open(int, int, void*)+0x7c>
c000fdb3:	83 ec 0c             	sub    esp,0xc
c000fdb6:	68 d4 1f 02 c0       	push   0xc0021fd4
c000fdbb:	e8 e5 4d 00 00       	call   c0014ba5 <Thr::loadKernelSymbolTable(char const*)>
c000fdc0:	83 c4 10             	add    esp,0x10
c000fdc3:	eb 13                	jmp    c000fdd8 <ACPI::open(int, int, void*)+0x8c>
c000fdc5:	8d 76 00             	lea    esi,[esi+0x0]
c000fdc8:	83 ec 0c             	sub    esp,0xc
c000fdcb:	68 f2 1f 02 c0       	push   0xc0021ff2
c000fdd0:	e8 0a 18 00 00       	call   c00115df <KePanic(char const*)>
c000fdd5:	83 c4 10             	add    esp,0x10
c000fdd8:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fde0:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fdeb:	83 ec 0c             	sub    esp,0xc
c000fdee:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fdf5:	e8 bc 7c ff ff       	call   c0007ab6 <malloc>
c000fdfa:	83 c4 10             	add    esp,0x10
c000fdfd:	89 c3                	mov    ebx,eax
c000fdff:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fe04:	83 ec 04             	sub    esp,0x4
c000fe07:	50                   	push   eax
c000fe08:	68 0c 20 02 c0       	push   0xc002200c
c000fe0d:	53                   	push   ebx
c000fe0e:	e8 f9 bc ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c000fe13:	83 c4 10             	add    esp,0x10
c000fe16:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fe1d:	83 ec 08             	sub    esp,0x8
c000fe20:	6a 01                	push   0x1
c000fe22:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe29:	e8 fc bc ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c000fe2e:	83 c4 10             	add    esp,0x10
c000fe31:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fe38:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fe40:	75 16                	jne    c000fe58 <ACPI::open(int, int, void*)+0x10c>
c000fe42:	83 ec 0c             	sub    esp,0xc
c000fe45:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe4c:	e8 37 bd ff ff       	call   c000bb88 <File::close()>
c000fe51:	83 c4 10             	add    esp,0x10
c000fe54:	eb 0a                	jmp    c000fe60 <ACPI::open(int, int, void*)+0x114>
c000fe56:	66 90                	xchg   ax,ax
c000fe58:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fe60:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fe68:	74 1e                	je     c000fe88 <ACPI::open(int, int, void*)+0x13c>
c000fe6a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fe71:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe73:	83 c0 08             	add    eax,0x8
c000fe76:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe78:	83 ec 0c             	sub    esp,0xc
c000fe7b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe82:	ff d0                	call   eax
c000fe84:	83 c4 10             	add    esp,0x10
c000fe87:	90                   	nop
c000fe88:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fe8f:	83 f0 01             	xor    eax,0x1
c000fe92:	0f b6 c0             	movzx  eax,al
c000fe95:	85 c0                	test   eax,eax
c000fe97:	74 43                	je     c000fedc <ACPI::open(int, int, void*)+0x190>
c000fe99:	83 ec 0c             	sub    esp,0xc
c000fe9c:	68 2a 20 02 c0       	push   0xc002202a
c000fea1:	e8 39 10 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c000fea6:	83 c4 10             	add    esp,0x10
c000fea9:	83 ec 04             	sub    esp,0x4
c000feac:	6a 0c                	push   0xc
c000feae:	68 45 20 02 c0       	push   0xc0022045
c000feb3:	68 56 20 02 c0       	push   0xc0022056
c000feb8:	e8 6b 3f 00 00       	call   c0013e28 <Reg::readIntWithDefault(char*, char*, int)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fec7:	83 ec 0c             	sub    esp,0xc
c000feca:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fed1:	e8 66 99 ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fed6:	83 c4 10             	add    esp,0x10
c000fed9:	8d 76 00             	lea    esi,[esi+0x0]
c000fedc:	83 ec 0c             	sub    esp,0xc
c000fedf:	68 d5 0a 02 c0       	push   0xc0020ad5
c000fee4:	e8 f6 0f 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c000fee9:	83 c4 10             	add    esp,0x10
c000feec:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fef3:	83 ec 08             	sub    esp,0x8
c000fef6:	6a 13                	push   0x13
c000fef8:	50                   	push   eax
c000fef9:	e8 a0 cd ff ff       	call   c000cc9e <getDevicesOfType(DeviceType)>
c000fefe:	83 c4 0c             	add    esp,0xc
c000ff01:	8d 76 00             	lea    esi,[esi+0x0]
c000ff04:	83 ec 0c             	sub    esp,0xc
c000ff07:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff0e:	50                   	push   eax
c000ff0f:	e8 bc ff 00 00       	call   c001fed0 <LinkedList<Device>::isEmpty()>
c000ff14:	83 c4 10             	add    esp,0x10
c000ff17:	83 f0 01             	xor    eax,0x1
c000ff1a:	0f b6 c0             	movzx  eax,al
c000ff1d:	85 c0                	test   eax,eax
c000ff1f:	0f 84 47 01 00 00    	je     c001006c <ACPI::open(int, int, void*)+0x320>
c000ff25:	83 ec 0c             	sub    esp,0xc
c000ff28:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff2f:	50                   	push   eax
c000ff30:	e8 b7 ff 00 00       	call   c001feec <LinkedList<Device>::getFirstElement()>
c000ff35:	83 c4 10             	add    esp,0x10
c000ff38:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ff3f:	83 ec 0c             	sub    esp,0xc
c000ff42:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff49:	50                   	push   eax
c000ff4a:	e8 a5 ff 00 00       	call   c001fef4 <LinkedList<Device>::removeFirst()>
c000ff4f:	83 c4 10             	add    esp,0x10
c000ff52:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ff59:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ff60:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ff67:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff6b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ff71:	ba 09 00 00 00       	mov    edx,0x9
c000ff76:	fc                   	cld    
c000ff77:	89 c7                	mov    edi,eax
c000ff79:	89 de                	mov    esi,ebx
c000ff7b:	89 d1                	mov    ecx,edx
c000ff7d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ff7f:	83 ec 08             	sub    esp,0x8
c000ff82:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ff86:	50                   	push   eax
c000ff87:	83 ec 24             	sub    esp,0x24
c000ff8a:	89 e0                	mov    eax,esp
c000ff8c:	89 c3                	mov    ebx,eax
c000ff8e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ff92:	ba 09 00 00 00       	mov    edx,0x9
c000ff97:	89 df                	mov    edi,ebx
c000ff99:	89 c6                	mov    esi,eax
c000ff9b:	89 d1                	mov    ecx,edx
c000ff9d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ff9f:	e8 9e b6 00 00       	call   c001b642 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ffa4:	83 c4 30             	add    esp,0x30
c000ffa7:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ffae:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ffb6:	0f 84 48 ff ff ff    	je     c000ff04 <ACPI::open(int, int, void*)+0x1b8>
c000ffbc:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ffc7:	83 ec 0c             	sub    esp,0xc
c000ffca:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ffd1:	e8 e0 7a ff ff       	call   c0007ab6 <malloc>
c000ffd6:	83 c4 10             	add    esp,0x10
c000ffd9:	89 c3                	mov    ebx,eax
c000ffdb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ffe0:	83 ec 04             	sub    esp,0x4
c000ffe3:	50                   	push   eax
c000ffe4:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ffeb:	53                   	push   ebx
c000ffec:	e8 1b bb ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fffb:	83 ec 0c             	sub    esp,0xc
c000fffe:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010005:	e8 e4 bd ff ff       	call   c000bdee <File::exists()>
c001000a:	83 c4 10             	add    esp,0x10
c001000d:	0f b6 c0             	movzx  eax,al
c0010010:	85 c0                	test   eax,eax
c0010012:	74 28                	je     c001003c <ACPI::open(int, int, void*)+0x2f0>
c0010014:	83 ec 08             	sub    esp,0x8
c0010017:	6a 01                	push   0x1
c0010019:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010020:	e8 fa 55 00 00       	call   c001561f <Thr::loadDLL(char const*, bool)>
c0010025:	83 c4 10             	add    esp,0x10
c0010028:	83 ec 08             	sub    esp,0x8
c001002b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010032:	50                   	push   eax
c0010033:	e8 18 58 00 00       	call   c0015850 <Thr::executeDLL(unsigned long, void*)>
c0010038:	83 c4 10             	add    esp,0x10
c001003b:	90                   	nop
c001003c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0010044:	0f 84 ba fe ff ff    	je     c000ff04 <ACPI::open(int, int, void*)+0x1b8>
c001004a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0010051:	8b 00                	mov    eax,DWORD PTR [eax]
c0010053:	83 c0 08             	add    eax,0x8
c0010056:	8b 00                	mov    eax,DWORD PTR [eax]
c0010058:	83 ec 0c             	sub    esp,0xc
c001005b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010062:	ff d0                	call   eax
c0010064:	83 c4 10             	add    esp,0x10
c0010067:	e9 98 fe ff ff       	jmp    c000ff04 <ACPI::open(int, int, void*)+0x1b8>
c001006c:	83 ec 0c             	sub    esp,0xc
c001006f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010076:	50                   	push   eax
c0010077:	e8 50 fe 00 00       	call   c001fecc <LinkedList<Device>::~LinkedList()>
c001007c:	83 c4 10             	add    esp,0x10
c001007f:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0010085:	83 ec 08             	sub    esp,0x8
c0010088:	6a 01                	push   0x1
c001008a:	68 5d 20 02 c0       	push   0xc002205d
c001008f:	e8 8b 55 00 00       	call   c001561f <Thr::loadDLL(char const*, bool)>
c0010094:	83 c4 10             	add    esp,0x10
c0010097:	83 ec 08             	sub    esp,0x8
c001009a:	53                   	push   ebx
c001009b:	50                   	push   eax
c001009c:	e8 af 57 00 00       	call   c0015850 <Thr::executeDLL(unsigned long, void*)>
c00100a1:	83 c4 10             	add    esp,0x10
c00100a4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00100a9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00100af:	83 e0 04             	and    eax,0x4
c00100b2:	0f b6 c0             	movzx  eax,al
c00100b5:	85 c0                	test   eax,eax
c00100b7:	0f 84 1b 01 00 00    	je     c00101d8 <ACPI::open(int, int, void*)+0x48c>
c00100bd:	83 ec 0c             	sub    esp,0xc
c00100c0:	68 7a 20 02 c0       	push   0xc002207a
c00100c5:	e8 15 0e 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c00100ca:	83 c4 10             	add    esp,0x10
c00100cd:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00100d8:	83 ec 0c             	sub    esp,0xc
c00100db:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00100e2:	e8 cf 79 ff ff       	call   c0007ab6 <malloc>
c00100e7:	83 c4 10             	add    esp,0x10
c00100ea:	89 c3                	mov    ebx,eax
c00100ec:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00100f1:	83 ec 04             	sub    esp,0x4
c00100f4:	50                   	push   eax
c00100f5:	68 97 20 02 c0       	push   0xc0022097
c00100fa:	53                   	push   ebx
c00100fb:	e8 0c ba ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001010a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010112:	74 20                	je     c0010134 <ACPI::open(int, int, void*)+0x3e8>
c0010114:	83 ec 0c             	sub    esp,0xc
c0010117:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001011e:	e8 cb bc ff ff       	call   c000bdee <File::exists()>
c0010123:	83 c4 10             	add    esp,0x10
c0010126:	0f b6 c0             	movzx  eax,al
c0010129:	85 c0                	test   eax,eax
c001012b:	74 07                	je     c0010134 <ACPI::open(int, int, void*)+0x3e8>
c001012d:	b0 01                	mov    al,0x1
c001012f:	eb 07                	jmp    c0010138 <ACPI::open(int, int, void*)+0x3ec>
c0010131:	8d 76 00             	lea    esi,[esi+0x0]
c0010134:	b0 00                	mov    al,0x0
c0010136:	66 90                	xchg   ax,ax
c0010138:	0f b6 c0             	movzx  eax,al
c001013b:	85 c0                	test   eax,eax
c001013d:	74 25                	je     c0010164 <ACPI::open(int, int, void*)+0x418>
c001013f:	83 ec 08             	sub    esp,0x8
c0010142:	6a 01                	push   0x1
c0010144:	68 97 20 02 c0       	push   0xc0022097
c0010149:	e8 d1 54 00 00       	call   c001561f <Thr::loadDLL(char const*, bool)>
c001014e:	83 c4 10             	add    esp,0x10
c0010151:	83 ec 08             	sub    esp,0x8
c0010154:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001015b:	50                   	push   eax
c001015c:	e8 ef 56 00 00       	call   c0015850 <Thr::executeDLL(unsigned long, void*)>
c0010161:	83 c4 10             	add    esp,0x10
c0010164:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001016c:	74 2a                	je     c0010198 <ACPI::open(int, int, void*)+0x44c>
c001016e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010176:	74 20                	je     c0010198 <ACPI::open(int, int, void*)+0x44c>
c0010178:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001017f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010181:	83 c0 08             	add    eax,0x8
c0010184:	8b 00                	mov    eax,DWORD PTR [eax]
c0010186:	83 ec 0c             	sub    esp,0xc
c0010189:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010190:	ff d0                	call   eax
c0010192:	83 c4 10             	add    esp,0x10
c0010195:	8d 76 00             	lea    esi,[esi+0x0]
c0010198:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c001019d:	83 ec 08             	sub    esp,0x8
c00101a0:	68 b4 20 02 c0       	push   0xc00220b4
c00101a5:	50                   	push   eax
c00101a6:	e8 c1 f1 ff ff       	call   c000f36c <findDataTable(unsigned char*, char*)>
c00101ab:	83 c4 10             	add    esp,0x10
c00101ae:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00101b5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00101bd:	74 19                	je     c00101d8 <ACPI::open(int, int, void*)+0x48c>
c00101bf:	83 ec 08             	sub    esp,0x8
c00101c2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00101c9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00101d0:	e8 13 fb ff ff       	call   c000fce8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00101d5:	83 c4 10             	add    esp,0x10
c00101d8:	b8 00 00 00 00       	mov    eax,0x0
c00101dd:	81 c4 70 01 00 00    	add    esp,0x170
c00101e3:	5b                   	pop    ebx
c00101e4:	5e                   	pop    esi
c00101e5:	5f                   	pop    edi
c00101e6:	c3                   	ret    
c00101e7:	90                   	nop

c00101e8 <CPU::close(int, int, void*)>:
c00101e8:	31 c0                	xor    eax,eax
c00101ea:	c3                   	ret    
c00101eb:	90                   	nop

c00101ec <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00101ec:	60                   	pusha  
c00101ed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00101f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101f9:	9c                   	pushf  
c00101fa:	fa                   	cli    
c00101fb:	0f 09                	wbinvd 
c00101fd:	0f 30                	wrmsr  
c00101ff:	9d                   	popf   
c0010200:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010204:	89 02                	mov    DWORD PTR [edx],eax
c0010206:	61                   	popa   
c0010207:	c3                   	ret    

c0010208 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010208:	60                   	pusha  
c0010209:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001020d:	9c                   	pushf  
c001020e:	fa                   	cli    
c001020f:	0f 09                	wbinvd 
c0010211:	31 c0                	xor    eax,eax
c0010213:	31 d2                	xor    edx,edx
c0010215:	0f 32                	rdmsr  
c0010217:	9d                   	popf   
c0010218:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001021c:	89 02                	mov    DWORD PTR [edx],eax
c001021e:	61                   	popa   
c001021f:	c3                   	ret    

c0010220 <CPU::AMD_K6_writeback(int, int, int)>:
c0010220:	56                   	push   esi
c0010221:	53                   	push   ebx
c0010222:	83 ec 10             	sub    esp,0x10
c0010225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010229:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001022e:	75 5d                	jne    c001028d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010230:	83 f8 08             	cmp    eax,0x8
c0010233:	75 09                	jne    c001023e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010235:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001023a:	7e 13                	jle    c001024f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001023c:	eb 30                	jmp    c001026e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001023e:	83 f8 06             	cmp    eax,0x6
c0010241:	7c 4a                	jl     c001028d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010243:	83 f8 07             	cmp    eax,0x7
c0010246:	7e 07                	jle    c001024f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010248:	83 f8 09             	cmp    eax,0x9
c001024b:	74 21                	je     c001026e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001024d:	eb 3e                	jmp    c001028d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001024f:	89 e6                	mov    esi,esp
c0010251:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c0010257:	56                   	push   esi
c0010258:	c1 eb 15             	shr    ebx,0x15
c001025b:	68 82 00 00 c0       	push   0xc0000082
c0010260:	83 e3 7e             	and    ebx,0x7e
c0010263:	e8 a0 ff ff ff       	call   c0010208 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010268:	56                   	push   esi
c0010269:	6a 00                	push   0x0
c001026b:	53                   	push   ebx
c001026c:	eb 12                	jmp    c0010280 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001026e:	89 e3                	mov    ebx,esp
c0010270:	53                   	push   ebx
c0010271:	68 82 00 00 c0       	push   0xc0000082
c0010276:	e8 8d ff ff ff       	call   c0010208 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001027b:	53                   	push   ebx
c001027c:	6a 00                	push   0x0
c001027e:	6a 00                	push   0x0
c0010280:	68 82 00 00 c0       	push   0xc0000082
c0010285:	e8 62 ff ff ff       	call   c00101ec <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001028a:	83 c4 18             	add    esp,0x18
c001028d:	83 c4 10             	add    esp,0x10
c0010290:	5b                   	pop    ebx
c0010291:	5e                   	pop    esi
c0010292:	c3                   	ret    
c0010293:	90                   	nop

c0010294 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010294:	55                   	push   ebp
c0010295:	57                   	push   edi
c0010296:	56                   	push   esi
c0010297:	53                   	push   ebx
c0010298:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001029c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00102a0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102a4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00102a8:	39 05 78 36 02 c0    	cmp    DWORD PTR ds:0xc0023678,eax
c00102ae:	75 23                	jne    c00102d3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00102b0:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00102b5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00102b9:	89 06                	mov    DWORD PTR [esi],eax
c00102bb:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00102c0:	89 07                	mov    DWORD PTR [edi],eax
c00102c2:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c00102c7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102ca:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c00102cf:	89 02                	mov    DWORD PTR [edx],eax
c00102d1:	eb 3f                	jmp    c0010312 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00102d3:	31 c9                	xor    ecx,ecx
c00102d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102d9:	0f a2                	cpuid  
c00102db:	89 06                	mov    DWORD PTR [esi],eax
c00102dd:	89 1f                	mov    DWORD PTR [edi],ebx
c00102df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00102e3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00102e6:	89 10                	mov    DWORD PTR [eax],edx
c00102e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102ec:	a3 78 36 02 c0       	mov    ds:0xc0023678,eax
c00102f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00102f3:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c00102f8:	8b 07                	mov    eax,DWORD PTR [edi]
c00102fa:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c00102ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010302:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010307:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001030b:	8b 00                	mov    eax,DWORD PTR [eax]
c001030d:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c0010312:	5b                   	pop    ebx
c0010313:	5e                   	pop    esi
c0010314:	5f                   	pop    edi
c0010315:	5d                   	pop    ebp
c0010316:	c3                   	ret    
c0010317:	90                   	nop

c0010318 <CPU::cpuidCheckEDX(unsigned int)>:
c0010318:	83 ec 10             	sub    esp,0x10
c001031b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001031f:	50                   	push   eax
c0010320:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010324:	50                   	push   eax
c0010325:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010329:	50                   	push   eax
c001032a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001032e:	50                   	push   eax
c001032f:	6a 01                	push   0x1
c0010331:	e8 5e ff ff ff       	call   c0010294 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010336:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001033a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001033e:	0f 95 c0             	setne  al
c0010341:	83 c4 24             	add    esp,0x24
c0010344:	c3                   	ret    
c0010345:	90                   	nop

c0010346 <CPU::cpuidCheckECX(unsigned int)>:
c0010346:	83 ec 10             	sub    esp,0x10
c0010349:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001034d:	50                   	push   eax
c001034e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010352:	50                   	push   eax
c0010353:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010357:	50                   	push   eax
c0010358:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001035c:	50                   	push   eax
c001035d:	6a 01                	push   0x1
c001035f:	e8 30 ff ff ff       	call   c0010294 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010364:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010368:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001036c:	0f 95 c0             	setne  al
c001036f:	83 c4 24             	add    esp,0x24
c0010372:	c3                   	ret    
c0010373:	90                   	nop

c0010374 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010374:	83 ec 10             	sub    esp,0x10
c0010377:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001037b:	50                   	push   eax
c001037c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010380:	50                   	push   eax
c0010381:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010385:	50                   	push   eax
c0010386:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001038a:	50                   	push   eax
c001038b:	6a 07                	push   0x7
c001038d:	e8 02 ff ff ff       	call   c0010294 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010392:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010396:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001039a:	0f 95 c0             	setne  al
c001039d:	83 c4 24             	add    esp,0x24
c00103a0:	c3                   	ret    
c00103a1:	90                   	nop

c00103a2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00103a2:	83 ec 10             	sub    esp,0x10
c00103a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103a9:	50                   	push   eax
c00103aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ae:	50                   	push   eax
c00103af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b3:	50                   	push   eax
c00103b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b8:	50                   	push   eax
c00103b9:	6a 07                	push   0x7
c00103bb:	e8 d4 fe ff ff       	call   c0010294 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103c4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00103c8:	0f 95 c0             	setne  al
c00103cb:	83 c4 24             	add    esp,0x24
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <CPU::CPU()>:
c00103d0:	83 ec 0c             	sub    esp,0xc
c00103d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103d7:	83 ec 08             	sub    esp,0x8
c00103da:	68 d9 21 02 c0       	push   0xc00221d9
c00103df:	50                   	push   eax
c00103e0:	e8 39 c7 ff ff       	call   c000cb1e <Device::Device(char const*)>
c00103e5:	83 c4 10             	add    esp,0x10
c00103e8:	ba 6c 22 02 c0       	mov    edx,0xc002226c
c00103ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103f1:	89 10                	mov    DWORD PTR [eax],edx
c00103f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103f7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010405:	05 78 01 00 00       	add    eax,0x178
c001040a:	83 ec 0c             	sub    esp,0xc
c001040d:	50                   	push   eax
c001040e:	e8 49 6f ff ff       	call   c000735c <GDT::GDT()>
c0010413:	83 c4 10             	add    esp,0x10
c0010416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001041a:	05 7c 09 00 00       	add    eax,0x97c
c001041f:	83 ec 0c             	sub    esp,0xc
c0010422:	50                   	push   eax
c0010423:	e8 84 71 ff ff       	call   c00075ac <IDT::IDT()>
c0010428:	83 c4 10             	add    esp,0x10
c001042b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001042f:	05 7c 11 00 00       	add    eax,0x117c
c0010434:	83 ec 0c             	sub    esp,0xc
c0010437:	50                   	push   eax
c0010438:	e8 07 8b ff ff       	call   c0008f44 <TSS::TSS()>
c001043d:	83 c4 10             	add    esp,0x10
c0010440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010444:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001044b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001044f:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010459:	90                   	nop
c001045a:	83 c4 0c             	add    esp,0xc
c001045d:	c3                   	ret    

c001045e <CPU::displayFeatures()>:
c001045e:	c3                   	ret    
c001045f:	90                   	nop

c0010460 <CPU::detectFeatures()>:
c0010460:	55                   	push   ebp
c0010461:	57                   	push   edi
c0010462:	56                   	push   esi
c0010463:	53                   	push   ebx
c0010464:	83 ec 30             	sub    esp,0x30
c0010467:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001046b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010475:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001047c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010482:	6a 0d                	push   0xd
c0010484:	6a 00                	push   0x0
c0010486:	55                   	push   ebp
c0010487:	e8 64 00 ff ff       	call   c00004f0 <memset>
c001048c:	83 c4 10             	add    esp,0x10
c001048f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010494:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001049b:	0f 84 db 05 00 00    	je     c0010a7c <CPU::detectFeatures()+0x61c>
c00104a1:	83 ec 0c             	sub    esp,0xc
c00104a4:	89 ef                	mov    edi,ebp
c00104a6:	6a 10                	push   0x10
c00104a8:	e8 6b fe ff ff       	call   c0010318 <CPU::cpuidCheckEDX(unsigned int)>
c00104ad:	83 e0 01             	and    eax,0x1
c00104b0:	8d 14 00             	lea    edx,[eax+eax*1]
c00104b3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104b9:	83 e0 fd             	and    eax,0xfffffffd
c00104bc:	09 d0                	or     eax,edx
c00104be:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104c4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00104cb:	e8 48 fe ff ff       	call   c0010318 <CPU::cpuidCheckEDX(unsigned int)>
c00104d0:	83 e0 01             	and    eax,0x1
c00104d3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104da:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104e0:	83 e0 fb             	and    eax,0xfffffffb
c00104e3:	09 d0                	or     eax,edx
c00104e5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104eb:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00104f2:	e8 21 fe ff ff       	call   c0010318 <CPU::cpuidCheckEDX(unsigned int)>
c00104f7:	83 e0 01             	and    eax,0x1
c00104fa:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010501:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010507:	83 e0 f7             	and    eax,0xfffffff7
c001050a:	09 d0                	or     eax,edx
c001050c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010512:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010519:	e8 fa fd ff ff       	call   c0010318 <CPU::cpuidCheckEDX(unsigned int)>
c001051e:	83 e0 01             	and    eax,0x1
c0010521:	c1 e0 04             	shl    eax,0x4
c0010524:	89 c2                	mov    edx,eax
c0010526:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001052c:	83 e0 ef             	and    eax,0xffffffef
c001052f:	09 d0                	or     eax,edx
c0010531:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010537:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001053e:	e8 d5 fd ff ff       	call   c0010318 <CPU::cpuidCheckEDX(unsigned int)>
c0010543:	83 e0 01             	and    eax,0x1
c0010546:	c1 e0 05             	shl    eax,0x5
c0010549:	89 c2                	mov    edx,eax
c001054b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010551:	83 e0 df             	and    eax,0xffffffdf
c0010554:	09 d0                	or     eax,edx
c0010556:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001055c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010563:	e8 b0 fd ff ff       	call   c0010318 <CPU::cpuidCheckEDX(unsigned int)>
c0010568:	83 e0 01             	and    eax,0x1
c001056b:	8d 14 00             	lea    edx,[eax+eax*1]
c001056e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010574:	83 e0 fd             	and    eax,0xfffffffd
c0010577:	09 d0                	or     eax,edx
c0010579:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001057f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010586:	e8 8d fd ff ff       	call   c0010318 <CPU::cpuidCheckEDX(unsigned int)>
c001058b:	83 e0 01             	and    eax,0x1
c001058e:	c1 e0 06             	shl    eax,0x6
c0010591:	89 c2                	mov    edx,eax
c0010593:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010599:	83 e0 bf             	and    eax,0xffffffbf
c001059c:	09 d0                	or     eax,edx
c001059e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105a4:	58                   	pop    eax
c00105a5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105a9:	50                   	push   eax
c00105aa:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105ae:	50                   	push   eax
c00105af:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105b3:	56                   	push   esi
c00105b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105b8:	50                   	push   eax
c00105b9:	6a 00                	push   0x0
c00105bb:	e8 d4 fc ff ff       	call   c0010294 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105c0:	b8 04 00 00 00       	mov    eax,0x4
c00105c5:	89 c1                	mov    ecx,eax
c00105c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105c9:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00105cf:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00105d3:	89 c1                	mov    ecx,eax
c00105d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105d7:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00105dd:	8d 74 24 38          	lea    esi,[esp+0x38]
c00105e1:	89 c1                	mov    ecx,eax
c00105e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105e5:	83 c4 18             	add    esp,0x18
c00105e8:	68 e8 20 02 c0       	push   0xc00220e8
c00105ed:	55                   	push   ebp
c00105ee:	e8 5d 01 ff ff       	call   c0000750 <strcmp>
c00105f3:	83 c4 10             	add    esp,0x10
c00105f6:	85 c0                	test   eax,eax
c00105f8:	75 0f                	jne    c0010609 <CPU::detectFeatures()+0x1a9>
c00105fa:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010604:	e9 22 02 00 00       	jmp    c001082b <CPU::detectFeatures()+0x3cb>
c0010609:	50                   	push   eax
c001060a:	50                   	push   eax
c001060b:	68 f5 20 02 c0       	push   0xc00220f5
c0010610:	55                   	push   ebp
c0010611:	e8 3a 01 ff ff       	call   c0000750 <strcmp>
c0010616:	83 c4 10             	add    esp,0x10
c0010619:	85 c0                	test   eax,eax
c001061b:	74 dd                	je     c00105fa <CPU::detectFeatures()+0x19a>
c001061d:	50                   	push   eax
c001061e:	50                   	push   eax
c001061f:	68 02 21 02 c0       	push   0xc0022102
c0010624:	55                   	push   ebp
c0010625:	e8 26 01 ff ff       	call   c0000750 <strcmp>
c001062a:	83 c4 10             	add    esp,0x10
c001062d:	85 c0                	test   eax,eax
c001062f:	74 2a                	je     c001065b <CPU::detectFeatures()+0x1fb>
c0010631:	50                   	push   eax
c0010632:	50                   	push   eax
c0010633:	68 0f 21 02 c0       	push   0xc002210f
c0010638:	55                   	push   ebp
c0010639:	e8 12 01 ff ff       	call   c0000750 <strcmp>
c001063e:	83 c4 10             	add    esp,0x10
c0010641:	85 c0                	test   eax,eax
c0010643:	74 16                	je     c001065b <CPU::detectFeatures()+0x1fb>
c0010645:	50                   	push   eax
c0010646:	50                   	push   eax
c0010647:	68 1c 21 02 c0       	push   0xc002211c
c001064c:	55                   	push   ebp
c001064d:	e8 fe 00 ff ff       	call   c0000750 <strcmp>
c0010652:	83 c4 10             	add    esp,0x10
c0010655:	85 c0                	test   eax,eax
c0010657:	74 48                	je     c00106a1 <CPU::detectFeatures()+0x241>
c0010659:	eb 0f                	jmp    c001066a <CPU::detectFeatures()+0x20a>
c001065b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010665:	e9 c1 01 00 00       	jmp    c001082b <CPU::detectFeatures()+0x3cb>
c001066a:	50                   	push   eax
c001066b:	50                   	push   eax
c001066c:	68 29 21 02 c0       	push   0xc0022129
c0010671:	55                   	push   ebp
c0010672:	e8 d9 00 ff ff       	call   c0000750 <strcmp>
c0010677:	83 c4 10             	add    esp,0x10
c001067a:	85 c0                	test   eax,eax
c001067c:	74 23                	je     c00106a1 <CPU::detectFeatures()+0x241>
c001067e:	57                   	push   edi
c001067f:	57                   	push   edi
c0010680:	68 36 21 02 c0       	push   0xc0022136
c0010685:	55                   	push   ebp
c0010686:	e8 c5 00 ff ff       	call   c0000750 <strcmp>
c001068b:	83 c4 10             	add    esp,0x10
c001068e:	85 c0                	test   eax,eax
c0010690:	75 1e                	jne    c00106b0 <CPU::detectFeatures()+0x250>
c0010692:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001069c:	e9 8a 01 00 00       	jmp    c001082b <CPU::detectFeatures()+0x3cb>
c00106a1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00106ab:	e9 7b 01 00 00       	jmp    c001082b <CPU::detectFeatures()+0x3cb>
c00106b0:	56                   	push   esi
c00106b1:	56                   	push   esi
c00106b2:	68 43 21 02 c0       	push   0xc0022143
c00106b7:	55                   	push   ebp
c00106b8:	e8 93 00 ff ff       	call   c0000750 <strcmp>
c00106bd:	83 c4 10             	add    esp,0x10
c00106c0:	85 c0                	test   eax,eax
c00106c2:	75 0f                	jne    c00106d3 <CPU::detectFeatures()+0x273>
c00106c4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00106ce:	e9 58 01 00 00       	jmp    c001082b <CPU::detectFeatures()+0x3cb>
c00106d3:	51                   	push   ecx
c00106d4:	51                   	push   ecx
c00106d5:	68 02 21 02 c0       	push   0xc0022102
c00106da:	55                   	push   ebp
c00106db:	e8 70 00 ff ff       	call   c0000750 <strcmp>
c00106e0:	83 c4 10             	add    esp,0x10
c00106e3:	85 c0                	test   eax,eax
c00106e5:	75 0f                	jne    c00106f6 <CPU::detectFeatures()+0x296>
c00106e7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00106f1:	e9 35 01 00 00       	jmp    c001082b <CPU::detectFeatures()+0x3cb>
c00106f6:	52                   	push   edx
c00106f7:	52                   	push   edx
c00106f8:	68 50 21 02 c0       	push   0xc0022150
c00106fd:	55                   	push   ebp
c00106fe:	e8 4d 00 ff ff       	call   c0000750 <strcmp>
c0010703:	83 c4 10             	add    esp,0x10
c0010706:	85 c0                	test   eax,eax
c0010708:	75 0f                	jne    c0010719 <CPU::detectFeatures()+0x2b9>
c001070a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010714:	e9 12 01 00 00       	jmp    c001082b <CPU::detectFeatures()+0x3cb>
c0010719:	50                   	push   eax
c001071a:	50                   	push   eax
c001071b:	68 5d 21 02 c0       	push   0xc002215d
c0010720:	55                   	push   ebp
c0010721:	e8 2a 00 ff ff       	call   c0000750 <strcmp>
c0010726:	83 c4 10             	add    esp,0x10
c0010729:	85 c0                	test   eax,eax
c001072b:	75 0f                	jne    c001073c <CPU::detectFeatures()+0x2dc>
c001072d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010737:	e9 ef 00 00 00       	jmp    c001082b <CPU::detectFeatures()+0x3cb>
c001073c:	50                   	push   eax
c001073d:	50                   	push   eax
c001073e:	68 6a 21 02 c0       	push   0xc002216a
c0010743:	55                   	push   ebp
c0010744:	e8 07 00 ff ff       	call   c0000750 <strcmp>
c0010749:	83 c4 10             	add    esp,0x10
c001074c:	85 c0                	test   eax,eax
c001074e:	75 0f                	jne    c001075f <CPU::detectFeatures()+0x2ff>
c0010750:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001075a:	e9 cc 00 00 00       	jmp    c001082b <CPU::detectFeatures()+0x3cb>
c001075f:	50                   	push   eax
c0010760:	50                   	push   eax
c0010761:	68 77 21 02 c0       	push   0xc0022177
c0010766:	55                   	push   ebp
c0010767:	e8 e4 ff fe ff       	call   c0000750 <strcmp>
c001076c:	83 c4 10             	add    esp,0x10
c001076f:	85 c0                	test   eax,eax
c0010771:	75 0f                	jne    c0010782 <CPU::detectFeatures()+0x322>
c0010773:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001077d:	e9 a9 00 00 00       	jmp    c001082b <CPU::detectFeatures()+0x3cb>
c0010782:	50                   	push   eax
c0010783:	50                   	push   eax
c0010784:	68 84 21 02 c0       	push   0xc0022184
c0010789:	55                   	push   ebp
c001078a:	e8 c1 ff fe ff       	call   c0000750 <strcmp>
c001078f:	83 c4 10             	add    esp,0x10
c0010792:	85 c0                	test   eax,eax
c0010794:	75 0f                	jne    c00107a5 <CPU::detectFeatures()+0x345>
c0010796:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00107a0:	e9 86 00 00 00       	jmp    c001082b <CPU::detectFeatures()+0x3cb>
c00107a5:	50                   	push   eax
c00107a6:	50                   	push   eax
c00107a7:	68 91 21 02 c0       	push   0xc0022191
c00107ac:	55                   	push   ebp
c00107ad:	e8 9e ff fe ff       	call   c0000750 <strcmp>
c00107b2:	83 c4 10             	add    esp,0x10
c00107b5:	85 c0                	test   eax,eax
c00107b7:	75 0c                	jne    c00107c5 <CPU::detectFeatures()+0x365>
c00107b9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00107c3:	eb 66                	jmp    c001082b <CPU::detectFeatures()+0x3cb>
c00107c5:	50                   	push   eax
c00107c6:	50                   	push   eax
c00107c7:	68 9e 21 02 c0       	push   0xc002219e
c00107cc:	55                   	push   ebp
c00107cd:	e8 7e ff fe ff       	call   c0000750 <strcmp>
c00107d2:	83 c4 10             	add    esp,0x10
c00107d5:	85 c0                	test   eax,eax
c00107d7:	75 0c                	jne    c00107e5 <CPU::detectFeatures()+0x385>
c00107d9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00107e3:	eb 46                	jmp    c001082b <CPU::detectFeatures()+0x3cb>
c00107e5:	57                   	push   edi
c00107e6:	57                   	push   edi
c00107e7:	68 ab 21 02 c0       	push   0xc00221ab
c00107ec:	55                   	push   ebp
c00107ed:	e8 5e ff fe ff       	call   c0000750 <strcmp>
c00107f2:	83 c4 10             	add    esp,0x10
c00107f5:	85 c0                	test   eax,eax
c00107f7:	74 e0                	je     c00107d9 <CPU::detectFeatures()+0x379>
c00107f9:	56                   	push   esi
c00107fa:	56                   	push   esi
c00107fb:	68 b8 21 02 c0       	push   0xc00221b8
c0010800:	55                   	push   ebp
c0010801:	e8 4a ff fe ff       	call   c0000750 <strcmp>
c0010806:	83 c4 10             	add    esp,0x10
c0010809:	85 c0                	test   eax,eax
c001080b:	74 cc                	je     c00107d9 <CPU::detectFeatures()+0x379>
c001080d:	51                   	push   ecx
c001080e:	51                   	push   ecx
c001080f:	68 c5 21 02 c0       	push   0xc00221c5
c0010814:	55                   	push   ebp
c0010815:	e8 36 ff fe ff       	call   c0000750 <strcmp>
c001081a:	83 c4 10             	add    esp,0x10
c001081d:	85 c0                	test   eax,eax
c001081f:	74 b8                	je     c00107d9 <CPU::detectFeatures()+0x379>
c0010821:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001082b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010830:	0f 86 be 00 00 00    	jbe    c00108f4 <CPU::detectFeatures()+0x494>
c0010836:	83 ec 0c             	sub    esp,0xc
c0010839:	68 80 00 00 00       	push   0x80
c001083e:	e8 31 fb ff ff       	call   c0010374 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010843:	83 e0 01             	and    eax,0x1
c0010846:	c1 e0 06             	shl    eax,0x6
c0010849:	89 c2                	mov    edx,eax
c001084b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010851:	83 e0 bf             	and    eax,0xffffffbf
c0010854:	09 d0                	or     eax,edx
c0010856:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001085c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010863:	e8 0c fb ff ff       	call   c0010374 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010868:	83 e0 01             	and    eax,0x1
c001086b:	c1 e0 04             	shl    eax,0x4
c001086e:	89 c2                	mov    edx,eax
c0010870:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010876:	83 e0 ef             	and    eax,0xffffffef
c0010879:	09 d0                	or     eax,edx
c001087b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010881:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010888:	e8 e7 fa ff ff       	call   c0010374 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001088d:	89 c2                	mov    edx,eax
c001088f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010895:	c1 e2 07             	shl    edx,0x7
c0010898:	83 e0 7f             	and    eax,0x7f
c001089b:	09 d0                	or     eax,edx
c001089d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00108a3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00108aa:	e8 f3 fa ff ff       	call   c00103a2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108af:	83 e0 01             	and    eax,0x1
c00108b2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00108b9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108bf:	83 e0 f7             	and    eax,0xfffffff7
c00108c2:	09 d0                	or     eax,edx
c00108c4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108ca:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00108d1:	e8 cc fa ff ff       	call   c00103a2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108d6:	83 c4 10             	add    esp,0x10
c00108d9:	83 e0 01             	and    eax,0x1
c00108dc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00108e3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108e9:	83 e0 fb             	and    eax,0xfffffffb
c00108ec:	09 d0                	or     eax,edx
c00108ee:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00108f4:	83 ec 0c             	sub    esp,0xc
c00108f7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00108fb:	50                   	push   eax
c00108fc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010900:	50                   	push   eax
c0010901:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010905:	57                   	push   edi
c0010906:	8d 74 24 28          	lea    esi,[esp+0x28]
c001090a:	56                   	push   esi
c001090b:	6a 01                	push   0x1
c001090d:	e8 82 f9 ff ff       	call   c0010294 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010912:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010916:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001091c:	89 c1                	mov    ecx,eax
c001091e:	83 e2 f0             	and    edx,0xfffffff0
c0010921:	83 e1 0f             	and    ecx,0xf
c0010924:	09 ca                	or     edx,ecx
c0010926:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001092c:	89 c2                	mov    edx,eax
c001092e:	c1 ea 04             	shr    edx,0x4
c0010931:	83 e2 0f             	and    edx,0xf
c0010934:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010938:	89 d1                	mov    ecx,edx
c001093a:	83 c4 20             	add    esp,0x20
c001093d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010943:	c1 e1 06             	shl    ecx,0x6
c0010946:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001094c:	09 ca                	or     edx,ecx
c001094e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010955:	89 c2                	mov    edx,eax
c0010957:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001095d:	c1 ea 08             	shr    edx,0x8
c0010960:	83 e1 3f             	and    ecx,0x3f
c0010963:	83 e2 0f             	and    edx,0xf
c0010966:	89 d5                	mov    ebp,edx
c0010968:	83 e5 03             	and    ebp,0x3
c001096b:	c1 e5 06             	shl    ebp,0x6
c001096e:	09 e9                	or     ecx,ebp
c0010970:	89 d5                	mov    ebp,edx
c0010972:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010978:	c1 ed 02             	shr    ebp,0x2
c001097b:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010981:	83 e1 c0             	and    ecx,0xffffffc0
c0010984:	09 e9                	or     ecx,ebp
c0010986:	89 c5                	mov    ebp,eax
c0010988:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001098e:	c1 ed 08             	shr    ebp,0x8
c0010991:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010997:	83 e5 30             	and    ebp,0x30
c001099a:	83 e1 cf             	and    ecx,0xffffffcf
c001099d:	09 e9                	or     ecx,ebp
c001099f:	83 fa 06             	cmp    edx,0x6
c00109a2:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00109a8:	74 05                	je     c00109af <CPU::detectFeatures()+0x54f>
c00109aa:	83 fa 0f             	cmp    edx,0xf
c00109ad:	75 64                	jne    c0010a13 <CPU::detectFeatures()+0x5b3>
c00109af:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00109b5:	89 c1                	mov    ecx,eax
c00109b7:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00109bd:	c1 e9 10             	shr    ecx,0x10
c00109c0:	c1 e1 04             	shl    ecx,0x4
c00109c3:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00109c7:	0f b6 c9             	movzx  ecx,cl
c00109ca:	c1 e1 06             	shl    ecx,0x6
c00109cd:	09 e9                	or     ecx,ebp
c00109cf:	83 fa 0f             	cmp    edx,0xf
c00109d2:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00109d9:	75 38                	jne    c0010a13 <CPU::detectFeatures()+0x5b3>
c00109db:	c1 e8 14             	shr    eax,0x14
c00109de:	83 c0 0f             	add    eax,0xf
c00109e1:	0f b6 c0             	movzx  eax,al
c00109e4:	89 c2                	mov    edx,eax
c00109e6:	c1 e8 02             	shr    eax,0x2
c00109e9:	83 e2 03             	and    edx,0x3
c00109ec:	89 d1                	mov    ecx,edx
c00109ee:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00109f4:	c1 e1 06             	shl    ecx,0x6
c00109f7:	83 e2 3f             	and    edx,0x3f
c00109fa:	09 ca                	or     edx,ecx
c00109fc:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010a02:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010a08:	83 e2 c0             	and    edx,0xffffffc0
c0010a0b:	09 d0                	or     eax,edx
c0010a0d:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010a13:	83 ec 0c             	sub    esp,0xc
c0010a16:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a1c:	83 c8 07             	or     eax,0x7
c0010a1f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a25:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a29:	50                   	push   eax
c0010a2a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010a2e:	55                   	push   ebp
c0010a2f:	57                   	push   edi
c0010a30:	56                   	push   esi
c0010a31:	68 00 00 00 80       	push   0x80000000
c0010a36:	e8 59 f8 ff ff       	call   c0010294 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a3b:	83 c4 20             	add    esp,0x20
c0010a3e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010a46:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010a4a:	76 1e                	jbe    c0010a6a <CPU::detectFeatures()+0x60a>
c0010a4c:	83 ec 0c             	sub    esp,0xc
c0010a4f:	50                   	push   eax
c0010a50:	55                   	push   ebp
c0010a51:	57                   	push   edi
c0010a52:	56                   	push   esi
c0010a53:	68 01 00 00 80       	push   0x80000001
c0010a58:	e8 37 f8 ff ff       	call   c0010294 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a5d:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010a67:	83 c4 20             	add    esp,0x20
c0010a6a:	52                   	push   edx
c0010a6b:	52                   	push   edx
c0010a6c:	68 d1 21 02 c0       	push   0xc00221d1
c0010a71:	53                   	push   ebx
c0010a72:	e8 99 c0 ff ff       	call   c000cb10 <Device::setName(char const*)>
c0010a77:	83 c4 10             	add    esp,0x10
c0010a7a:	eb 69                	jmp    c0010ae5 <CPU::detectFeatures()+0x685>
c0010a7c:	50                   	push   eax
c0010a7d:	50                   	push   eax
c0010a7e:	68 36 21 02 c0       	push   0xc0022136
c0010a83:	55                   	push   ebp
c0010a84:	e8 b7 fb fe ff       	call   c0000640 <strcpy>
c0010a89:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010a93:	e8 2b f7 fe ff       	call   c00001c3 <is486>
c0010a98:	83 c4 10             	add    esp,0x10
c0010a9b:	85 c0                	test   eax,eax
c0010a9d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010aa3:	74 1f                	je     c0010ac4 <CPU::detectFeatures()+0x664>
c0010aa5:	83 c8 07             	or     eax,0x7
c0010aa8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010aae:	0f 20 c0             	mov    eax,cr0
c0010ab1:	83 e0 14             	and    eax,0x14
c0010ab4:	83 f8 04             	cmp    eax,0x4
c0010ab7:	75 10                	jne    c0010ac9 <CPU::detectFeatures()+0x669>
c0010ab9:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010abf:	83 e0 fd             	and    eax,0xfffffffd
c0010ac2:	eb 1b                	jmp    c0010adf <CPU::detectFeatures()+0x67f>
c0010ac4:	83 e0 f8             	and    eax,0xfffffff8
c0010ac7:	eb df                	jmp    c0010aa8 <CPU::detectFeatures()+0x648>
c0010ac9:	e8 d0 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010ace:	83 e0 01             	and    eax,0x1
c0010ad1:	8d 14 00             	lea    edx,[eax+eax*1]
c0010ad4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010ada:	83 e0 fd             	and    eax,0xfffffffd
c0010add:	09 d0                	or     eax,edx
c0010adf:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010ae5:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010aec:	74 17                	je     c0010b05 <CPU::detectFeatures()+0x6a5>
c0010aee:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010af4:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010afa:	83 c8 10             	or     eax,0x10
c0010afd:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010b03:	eb 20                	jmp    c0010b25 <CPU::detectFeatures()+0x6c5>
c0010b05:	e8 94 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b0a:	83 e0 01             	and    eax,0x1
c0010b0d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b10:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b16:	83 e0 fd             	and    eax,0xfffffffd
c0010b19:	09 d0                	or     eax,edx
c0010b1b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b21:	a8 02                	test   al,0x2
c0010b23:	75 c9                	jne    c0010aee <CPU::detectFeatures()+0x68e>
c0010b25:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010b2c:	83 c4 2c             	add    esp,0x2c
c0010b2f:	5b                   	pop    ebx
c0010b30:	5e                   	pop    esi
c0010b31:	5f                   	pop    edi
c0010b32:	5d                   	pop    ebp
c0010b33:	c3                   	ret    

c0010b34 <CPU::setupSMEP()>:
c0010b34:	0f 20 e0             	mov    eax,cr4
c0010b37:	0d 00 00 10 00       	or     eax,0x100000
c0010b3c:	0f 22 e0             	mov    cr4,eax
c0010b3f:	c3                   	ret    

c0010b40 <CPU::setupUMIP()>:
c0010b40:	0f 20 e0             	mov    eax,cr4
c0010b43:	80 cc 08             	or     ah,0x8
c0010b46:	0f 22 e0             	mov    cr4,eax
c0010b49:	c3                   	ret    

c0010b4a <CPU::setupTSC()>:
c0010b4a:	0f 20 e0             	mov    eax,cr4
c0010b4d:	83 c8 04             	or     eax,0x4
c0010b50:	0f 22 e0             	mov    cr4,eax
c0010b53:	c3                   	ret    

c0010b54 <CPU::setupLargePages()>:
c0010b54:	0f 20 e0             	mov    eax,cr4
c0010b57:	83 c8 10             	or     eax,0x10
c0010b5a:	0f 22 e0             	mov    cr4,eax
c0010b5d:	c3                   	ret    

c0010b5e <CPU::setupPAT()>:
c0010b5e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010b63:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010b6a:	74 2c                	je     c0010b98 <CPU::setupPAT()+0x3a>
c0010b6c:	53                   	push   ebx
c0010b6d:	83 ec 10             	sub    esp,0x10
c0010b70:	68 77 02 00 00       	push   0x277
c0010b75:	50                   	push   eax
c0010b76:	e8 45 65 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010b7b:	83 e2 f8             	and    edx,0xfffffff8
c0010b7e:	83 ca 01             	or     edx,0x1
c0010b81:	52                   	push   edx
c0010b82:	50                   	push   eax
c0010b83:	68 77 02 00 00       	push   0x277
c0010b88:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010b8e:	e8 59 65 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010b93:	83 c4 28             	add    esp,0x28
c0010b96:	5b                   	pop    ebx
c0010b97:	c3                   	ret    
c0010b98:	c3                   	ret    
c0010b99:	90                   	nop

c0010b9a <CPU::setupMTRR()>:
c0010b9a:	c3                   	ret    
c0010b9b:	90                   	nop

c0010b9c <CPU::setupGlobalPages()>:
c0010b9c:	0f 20 e0             	mov    eax,cr4
c0010b9f:	0c 80                	or     al,0x80
c0010ba1:	0f 22 e0             	mov    cr4,eax
c0010ba4:	c3                   	ret    
c0010ba5:	90                   	nop

c0010ba6 <CPU::allowUsermodeDataAccess()>:
c0010ba6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010baa:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bb1:	74 03                	je     c0010bb6 <CPU::allowUsermodeDataAccess()+0x10>
c0010bb3:	0f 01 cb             	stac   
c0010bb6:	c3                   	ret    
c0010bb7:	90                   	nop

c0010bb8 <CPU::prohibitUsermodeDataAccess()>:
c0010bb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bbc:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bc3:	74 03                	je     c0010bc8 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010bc5:	0f 01 ca             	clac   
c0010bc8:	c3                   	ret    
c0010bc9:	90                   	nop

c0010bca <CPU::setupSMAP()>:
c0010bca:	0f 20 e0             	mov    eax,cr4
c0010bcd:	0d 00 00 20 00       	or     eax,0x200000
c0010bd2:	0f 22 e0             	mov    cr4,eax
c0010bd5:	eb e1                	jmp    c0010bb8 <CPU::prohibitUsermodeDataAccess()>
c0010bd7:	90                   	nop

c0010bd8 <CPU::setupFeatures()>:
c0010bd8:	53                   	push   ebx
c0010bd9:	83 ec 08             	sub    esp,0x8
c0010bdc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010be0:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010be7:	74 18                	je     c0010c01 <CPU::setupFeatures()+0x29>
c0010be9:	83 ec 0c             	sub    esp,0xc
c0010bec:	68 dd 21 02 c0       	push   0xc00221dd
c0010bf1:	e8 4f 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010bf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bf9:	e8 42 ff ff ff       	call   c0010b40 <CPU::setupUMIP()>
c0010bfe:	83 c4 10             	add    esp,0x10
c0010c01:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010c08:	74 18                	je     c0010c22 <CPU::setupFeatures()+0x4a>
c0010c0a:	83 ec 0c             	sub    esp,0xc
c0010c0d:	68 e7 21 02 c0       	push   0xc00221e7
c0010c12:	e8 2e 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c1a:	e8 2b ff ff ff       	call   c0010b4a <CPU::setupTSC()>
c0010c1f:	83 c4 10             	add    esp,0x10
c0010c22:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010c29:	74 18                	je     c0010c43 <CPU::setupFeatures()+0x6b>
c0010c2b:	83 ec 0c             	sub    esp,0xc
c0010c2e:	68 f0 21 02 c0       	push   0xc00221f0
c0010c33:	e8 0d 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c3b:	e8 14 ff ff ff       	call   c0010b54 <CPU::setupLargePages()>
c0010c40:	83 c4 10             	add    esp,0x10
c0010c43:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010c4a:	74 18                	je     c0010c64 <CPU::setupFeatures()+0x8c>
c0010c4c:	83 ec 0c             	sub    esp,0xc
c0010c4f:	68 f9 21 02 c0       	push   0xc00221f9
c0010c54:	e8 ec 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c5c:	e8 3b ff ff ff       	call   c0010b9c <CPU::setupGlobalPages()>
c0010c61:	83 c4 10             	add    esp,0x10
c0010c64:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010c6b:	74 18                	je     c0010c85 <CPU::setupFeatures()+0xad>
c0010c6d:	83 ec 0c             	sub    esp,0xc
c0010c70:	68 0b 22 02 c0       	push   0xc002220b
c0010c75:	e8 cb 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c7d:	e8 dc fe ff ff       	call   c0010b5e <CPU::setupPAT()>
c0010c82:	83 c4 10             	add    esp,0x10
c0010c85:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010c8c:	74 11                	je     c0010c9f <CPU::setupFeatures()+0xc7>
c0010c8e:	c7 44 24 10 14 22 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022214
c0010c96:	83 c4 08             	add    esp,0x8
c0010c99:	5b                   	pop    ebx
c0010c9a:	e9 a6 9c ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010c9f:	83 c4 08             	add    esp,0x8
c0010ca2:	5b                   	pop    ebx
c0010ca3:	c3                   	ret    

c0010ca4 <CPU::open(int, int, void*)>:
c0010ca4:	55                   	push   ebp
c0010ca5:	57                   	push   edi
c0010ca6:	56                   	push   esi
c0010ca7:	53                   	push   ebx
c0010ca8:	83 ec 18             	sub    esp,0x18
c0010cab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010caf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010cb3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010cb7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010cbd:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010cc3:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010cc9:	50                   	push   eax
c0010cca:	e8 ef 66 ff ff       	call   c00073be <GDT::setup()>
c0010ccf:	83 c4 0c             	add    esp,0xc
c0010cd2:	6a 00                	push   0x0
c0010cd4:	68 ef be ad de       	push   0xdeadbeef
c0010cd9:	55                   	push   ebp
c0010cda:	e8 a9 82 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010cdf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010ce2:	e8 81 82 ff ff       	call   c0008f68 <TSS::flush()>
c0010ce7:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010ced:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cf0:	e8 2d 69 ff ff       	call   c0007622 <IDT::setup()>
c0010cf5:	b8 00 04 00 00       	mov    eax,0x400
c0010cfa:	0f 23 f8             	mov    db7,eax
c0010cfd:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010d07:	e8 b3 70 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010d0c:	83 c4 10             	add    esp,0x10
c0010d0f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010d15:	85 f6                	test   esi,esi
c0010d17:	89 38                	mov    DWORD PTR [eax],edi
c0010d19:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010d1f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d22:	74 10                	je     c0010d34 <CPU::open(int, int, void*)+0x90>
c0010d24:	50                   	push   eax
c0010d25:	50                   	push   eax
c0010d26:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010d2c:	56                   	push   esi
c0010d2d:	e8 7c 8b ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010d32:	eb 0d                	jmp    c0010d41 <CPU::open(int, int, void*)+0x9d>
c0010d34:	83 ec 0c             	sub    esp,0xc
c0010d37:	68 1e 22 02 c0       	push   0xc002221e
c0010d3c:	e8 9e 08 00 00       	call   c00115df <KePanic(char const*)>
c0010d41:	83 c4 10             	add    esp,0x10
c0010d44:	83 ec 0c             	sub    esp,0xc
c0010d47:	68 2c 22 02 c0       	push   0xc002222c
c0010d4c:	e8 8e 01 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c0010d51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d54:	e8 07 f7 ff ff       	call   c0010460 <CPU::detectFeatures()>
c0010d59:	c7 04 24 4f 22 02 c0 	mov    DWORD PTR [esp],0xc002224f
c0010d60:	e8 7a 01 00 00       	call   c0010edf <KeSetBootMessage(char const*)>
c0010d65:	e8 eb 73 00 00       	call   c0018155 <HalInitialise()>
c0010d6a:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010d6f:	83 e0 10             	and    eax,0x10
c0010d72:	83 f8 01             	cmp    eax,0x1
c0010d75:	19 c0                	sbb    eax,eax
c0010d77:	83 e0 46             	and    eax,0x46
c0010d7a:	83 c0 1e             	add    eax,0x1e
c0010d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d80:	e8 28 d6 ff ff       	call   c000e3ad <setupTimer(int)>
c0010d85:	83 c4 10             	add    esp,0x10
c0010d88:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010d8e:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010d95:	74 0c                	je     c0010da3 <CPU::open(int, int, void*)+0xff>
c0010d97:	83 ec 0c             	sub    esp,0xc
c0010d9a:	53                   	push   ebx
c0010d9b:	e8 38 fe ff ff       	call   c0010bd8 <CPU::setupFeatures()>
c0010da0:	83 c4 10             	add    esp,0x10
c0010da3:	83 c4 0c             	add    esp,0xc
c0010da6:	31 c0                	xor    eax,eax
c0010da8:	5b                   	pop    ebx
c0010da9:	5e                   	pop    esi
c0010daa:	5f                   	pop    edi
c0010dab:	5d                   	pop    ebp
c0010dac:	c3                   	ret    

c0010dad <KeInitialiseAtexit()>:
c0010dad:	83 ec 10             	sub    esp,0x10
c0010db0:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010dba:	6a 60                	push   0x60
c0010dbc:	6a 00                	push   0x0
c0010dbe:	68 20 be 02 c0       	push   0xc002be20
c0010dc3:	e8 28 f7 fe ff       	call   c00004f0 <memset>
c0010dc8:	83 c4 1c             	add    esp,0x1c
c0010dcb:	c3                   	ret    

c0010dcc <KeRegisterAtexit(void (*)(void*), void*)>:
c0010dcc:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010dd1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010dd5:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010ddc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010de0:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010de7:	40                   	inc    eax
c0010de8:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010ded:	83 f8 17             	cmp    eax,0x17
c0010df0:	7e 0d                	jle    c0010dff <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010df2:	c7 44 24 04 90 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022290
c0010dfa:	e9 e0 07 00 00       	jmp    c00115df <KePanic(char const*)>
c0010dff:	c3                   	ret    

c0010e00 <KeExecuteAtexit()>:
c0010e00:	53                   	push   ebx
c0010e01:	31 db                	xor    ebx,ebx
c0010e03:	83 ec 08             	sub    esp,0x8
c0010e06:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010e0c:	7e 50                	jle    c0010e5e <KeExecuteAtexit()+0x5e>
c0010e0e:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010e15:	85 c0                	test   eax,eax
c0010e17:	74 42                	je     c0010e5b <KeExecuteAtexit()+0x5b>
c0010e19:	51                   	push   ecx
c0010e1a:	50                   	push   eax
c0010e1b:	53                   	push   ebx
c0010e1c:	68 a9 22 02 c0       	push   0xc00222a9
c0010e21:	e8 1f 9b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e26:	58                   	pop    eax
c0010e27:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010e2e:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010e35:	c7 04 24 cb 22 02 c0 	mov    DWORD PTR [esp],0xc00222cb
c0010e3c:	e8 04 9b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e41:	c7 04 24 2b 34 02 c0 	mov    DWORD PTR [esp],0xc002342b
c0010e48:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010e53:	e8 ed 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e58:	83 c4 10             	add    esp,0x10
c0010e5b:	43                   	inc    ebx
c0010e5c:	eb a8                	jmp    c0010e06 <KeExecuteAtexit()+0x6>
c0010e5e:	83 c4 08             	add    esp,0x8
c0010e61:	5b                   	pop    ebx
c0010e62:	c3                   	ret    

c0010e63 <KeDisplaySplashScreen()>:
c0010e63:	55                   	push   ebp
c0010e64:	bd 05 00 00 00       	mov    ebp,0x5
c0010e69:	57                   	push   edi
c0010e6a:	bf 0a 00 00 00       	mov    edi,0xa
c0010e6f:	56                   	push   esi
c0010e70:	31 f6                	xor    esi,esi
c0010e72:	53                   	push   ebx
c0010e73:	31 db                	xor    ebx,ebx
c0010e75:	83 ec 0c             	sub    esp,0xc
c0010e78:	0f b6 96 80 36 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc980]
c0010e7f:	89 d0                	mov    eax,edx
c0010e81:	85 d2                	test   edx,edx
c0010e83:	74 52                	je     c0010ed7 <KeDisplaySplashScreen()+0x74>
c0010e85:	80 bb b6 36 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc94a],0xdb
c0010e8c:	75 13                	jne    c0010ea1 <KeDisplaySplashScreen()+0x3e>
c0010e8e:	0f b6 8b b5 36 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc94b]
c0010e95:	83 e1 fe             	and    ecx,0xfffffffe
c0010e98:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010e9e:	75 01                	jne    c0010ea1 <KeDisplaySplashScreen()+0x3e>
c0010ea0:	47                   	inc    edi
c0010ea1:	83 fa 0d             	cmp    edx,0xd
c0010ea4:	74 28                	je     c0010ece <KeDisplaySplashScreen()+0x6b>
c0010ea6:	83 fa 0a             	cmp    edx,0xa
c0010ea9:	75 0a                	jne    c0010eb5 <KeDisplaySplashScreen()+0x52>
c0010eab:	45                   	inc    ebp
c0010eac:	bf 0a 00 00 00       	mov    edi,0xa
c0010eb1:	31 db                	xor    ebx,ebx
c0010eb3:	eb 19                	jmp    c0010ece <KeDisplaySplashScreen()+0x6b>
c0010eb5:	83 ec 0c             	sub    esp,0xc
c0010eb8:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010ebb:	55                   	push   ebp
c0010ebc:	0f be c0             	movsx  eax,al
c0010ebf:	52                   	push   edx
c0010ec0:	43                   	inc    ebx
c0010ec1:	6a 00                	push   0x0
c0010ec3:	6a 0e                	push   0xe
c0010ec5:	50                   	push   eax
c0010ec6:	e8 09 7f 00 00       	call   c0018dd4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010ecb:	83 c4 20             	add    esp,0x20
c0010ece:	46                   	inc    esi
c0010ecf:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010ed5:	75 a1                	jne    c0010e78 <KeDisplaySplashScreen()+0x15>
c0010ed7:	83 c4 0c             	add    esp,0xc
c0010eda:	5b                   	pop    ebx
c0010edb:	5e                   	pop    esi
c0010edc:	5f                   	pop    edi
c0010edd:	5d                   	pop    ebp
c0010ede:	c3                   	ret    

c0010edf <KeSetBootMessage(char const*)>:
c0010edf:	57                   	push   edi
c0010ee0:	56                   	push   esi
c0010ee1:	53                   	push   ebx
c0010ee2:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010ee8:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010eef:	68 9e 00 00 00       	push   0x9e
c0010ef4:	6a 00                	push   0x0
c0010ef6:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010efa:	56                   	push   esi
c0010efb:	e8 f0 f5 fe ff       	call   c00004f0 <memset>
c0010f00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f03:	e8 68 f6 fe ff       	call   c0000570 <strlen>
c0010f08:	ba 50 00 00 00       	mov    edx,0x50
c0010f0d:	83 c4 10             	add    esp,0x10
c0010f10:	29 c2                	sub    edx,eax
c0010f12:	31 c9                	xor    ecx,ecx
c0010f14:	83 e2 fe             	and    edx,0xfffffffe
c0010f17:	01 f2                	add    edx,esi
c0010f19:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010f1e:	84 c0                	test   al,al
c0010f20:	74 0a                	je     c0010f2c <KeSetBootMessage(char const*)+0x4d>
c0010f22:	80 cc 0f             	or     ah,0xf
c0010f25:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010f29:	41                   	inc    ecx
c0010f2a:	eb ed                	jmp    c0010f19 <KeSetBootMessage(char const*)+0x3a>
c0010f2c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010f31:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010f36:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f38:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010f3e:	5b                   	pop    ebx
c0010f3f:	5e                   	pop    esi
c0010f40:	5f                   	pop    edi
c0010f41:	c3                   	ret    
c0010f42:	66 90                	xchg   ax,ax

c0010f44 <Krnl::handlePowerButton()>:
c0010f44:	83 ec 0c             	sub    esp,0xc
c0010f47:	e8 ee 06 00 00       	call   c001163a <KeHandlePowerButton()>
c0010f4c:	90                   	nop
c0010f4d:	83 c4 0c             	add    esp,0xc
c0010f50:	c3                   	ret    
c0010f51:	8d 76 00             	lea    esi,[esi+0x0]

c0010f54 <Krnl::handleSleepButton()>:
c0010f54:	83 ec 0c             	sub    esp,0xc
c0010f57:	e8 13 07 00 00       	call   c001166f <KeHandleSleepButton()>
c0010f5c:	90                   	nop
c0010f5d:	83 c4 0c             	add    esp,0xc
c0010f60:	c3                   	ret    

c0010f61 <KeCalculateCRC32(unsigned char*, int)>:
c0010f61:	53                   	push   ebx
c0010f62:	83 c8 ff             	or     eax,0xffffffff
c0010f65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010f69:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f6d:	01 cb                	add    ebx,ecx
c0010f6f:	39 d9                	cmp    ecx,ebx
c0010f71:	74 15                	je     c0010f88 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010f73:	41                   	inc    ecx
c0010f74:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010f77:	31 c2                	xor    edx,eax
c0010f79:	c1 e8 08             	shr    eax,0x8
c0010f7c:	0f b6 d2             	movzx  edx,dl
c0010f7f:	33 04 95 e0 37 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc820]
c0010f86:	eb e7                	jmp    c0010f6f <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010f88:	f7 d0                	not    eax
c0010f8a:	5b                   	pop    ebx
c0010f8b:	c3                   	ret    

c0010f8c <EnvVarContainer::getEnv(char const*)>:
c0010f8c:	57                   	push   edi
c0010f8d:	56                   	push   esi
c0010f8e:	53                   	push   ebx
c0010f8f:	31 db                	xor    ebx,ebx
c0010f91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f95:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010f97:	7e 2b                	jle    c0010fc4 <EnvVarContainer::getEnv(char const*)+0x38>
c0010f99:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010fa0:	50                   	push   eax
c0010fa1:	50                   	push   eax
c0010fa2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010fa5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010fa8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010fac:	e8 9f f7 fe ff       	call   c0000750 <strcmp>
c0010fb1:	83 c4 10             	add    esp,0x10
c0010fb4:	85 c0                	test   eax,eax
c0010fb6:	75 09                	jne    c0010fc1 <EnvVarContainer::getEnv(char const*)+0x35>
c0010fb8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010fbb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010fbf:	eb 05                	jmp    c0010fc6 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010fc1:	43                   	inc    ebx
c0010fc2:	eb d1                	jmp    c0010f95 <EnvVarContainer::getEnv(char const*)+0x9>
c0010fc4:	31 c0                	xor    eax,eax
c0010fc6:	5b                   	pop    ebx
c0010fc7:	5e                   	pop    esi
c0010fc8:	5f                   	pop    edi
c0010fc9:	c3                   	ret    

c0010fca <EnvVarContainer::setEnv(char const*, char const*)>:
c0010fca:	55                   	push   ebp
c0010fcb:	57                   	push   edi
c0010fcc:	56                   	push   esi
c0010fcd:	53                   	push   ebx
c0010fce:	83 ec 28             	sub    esp,0x28
c0010fd1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010fd5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010fd9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010fdd:	56                   	push   esi
c0010fde:	e8 8d f5 fe ff       	call   c0000570 <strlen>
c0010fe3:	40                   	inc    eax
c0010fe4:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fe7:	e8 ca 6a ff ff       	call   c0007ab6 <malloc>
c0010fec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010ff3:	e8 78 f5 fe ff       	call   c0000570 <strlen>
c0010ff8:	40                   	inc    eax
c0010ff9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ffc:	e8 b5 6a ff ff       	call   c0007ab6 <malloc>
c0011001:	89 34 24             	mov    DWORD PTR [esp],esi
c0011004:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011008:	e8 63 f5 fe ff       	call   c0000570 <strlen>
c001100d:	83 c4 0c             	add    esp,0xc
c0011010:	40                   	inc    eax
c0011011:	50                   	push   eax
c0011012:	6a 00                	push   0x0
c0011014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011018:	e8 d3 f4 fe ff       	call   c00004f0 <memset>
c001101d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011020:	e8 4b f5 fe ff       	call   c0000570 <strlen>
c0011025:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011029:	8d 48 01             	lea    ecx,[eax+0x1]
c001102c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001102e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011031:	89 de                	mov    esi,ebx
c0011033:	e8 38 f5 fe ff       	call   c0000570 <strlen>
c0011038:	83 c4 0c             	add    esp,0xc
c001103b:	40                   	inc    eax
c001103c:	50                   	push   eax
c001103d:	6a 00                	push   0x0
c001103f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011043:	e8 a8 f4 fe ff       	call   c00004f0 <memset>
c0011048:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001104b:	e8 20 f5 fe ff       	call   c0000570 <strlen>
c0011050:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011054:	8d 48 01             	lea    ecx,[eax+0x1]
c0011057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011059:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001105c:	40                   	inc    eax
c001105d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011060:	c1 e0 03             	shl    eax,0x3
c0011063:	5a                   	pop    edx
c0011064:	59                   	pop    ecx
c0011065:	50                   	push   eax
c0011066:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011069:	e8 34 6a ff ff       	call   c0007aa2 <realloc>
c001106e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011072:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011075:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011078:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001107c:	b9 08 00 00 00       	mov    ecx,0x8
c0011081:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011083:	83 c4 2c             	add    esp,0x2c
c0011086:	5b                   	pop    ebx
c0011087:	5e                   	pop    esi
c0011088:	5f                   	pop    edi
c0011089:	5d                   	pop    ebp
c001108a:	c3                   	ret    
c001108b:	90                   	nop

c001108c <EnvVarContainer::deleteEnv(char const*)>:
c001108c:	c3                   	ret    
c001108d:	90                   	nop

c001108e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001108e:	55                   	push   ebp
c001108f:	57                   	push   edi
c0011090:	56                   	push   esi
c0011091:	53                   	push   ebx
c0011092:	81 ec 38 01 00 00    	sub    esp,0x138
c0011098:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001109f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00110a6:	68 14 01 00 00       	push   0x114
c00110ab:	e8 06 6a ff ff       	call   c0007ab6 <malloc>
c00110b0:	83 c4 0c             	add    esp,0xc
c00110b3:	89 c3                	mov    ebx,eax
c00110b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00110b8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00110bf:	50                   	push   eax
c00110c0:	e8 47 aa ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c00110c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110c8:	e8 21 ad ff ff       	call   c000bdee <File::exists()>
c00110cd:	83 c4 10             	add    esp,0x10
c00110d0:	84 c0                	test   al,al
c00110d2:	75 31                	jne    c0011105 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00110d4:	50                   	push   eax
c00110d5:	50                   	push   eax
c00110d6:	6a 12                	push   0x12
c00110d8:	53                   	push   ebx
c00110d9:	e8 4c aa ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c00110de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110e0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00110e3:	89 34 24             	mov    DWORD PTR [esp],esi
c00110e6:	e8 85 f4 fe ff       	call   c0000570 <strlen>
c00110eb:	5a                   	pop    edx
c00110ec:	31 d2                	xor    edx,edx
c00110ee:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00110f2:	51                   	push   ecx
c00110f3:	56                   	push   esi
c00110f4:	52                   	push   edx
c00110f5:	50                   	push   eax
c00110f6:	53                   	push   ebx
c00110f7:	ff d7                	call   edi
c00110f9:	83 c4 14             	add    esp,0x14
c00110fc:	53                   	push   ebx
c00110fd:	e8 86 aa ff ff       	call   c000bb88 <File::close()>
c0011102:	83 c4 10             	add    esp,0x10
c0011105:	56                   	push   esi
c0011106:	31 f6                	xor    esi,esi
c0011108:	68 00 01 00 00       	push   0x100
c001110d:	6a 00                	push   0x0
c001110f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011113:	50                   	push   eax
c0011114:	e8 d7 f3 fe ff       	call   c00004f0 <memset>
c0011119:	5f                   	pop    edi
c001111a:	58                   	pop    eax
c001111b:	6a 01                	push   0x1
c001111d:	53                   	push   ebx
c001111e:	e8 07 aa ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c0011123:	83 c4 10             	add    esp,0x10
c0011126:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001112e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011136:	83 ec 0c             	sub    esp,0xc
c0011139:	8b 03                	mov    eax,DWORD PTR [ebx]
c001113b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001113f:	51                   	push   ecx
c0011140:	8d 54 24 23          	lea    edx,[esp+0x23]
c0011144:	52                   	push   edx
c0011145:	6a 00                	push   0x0
c0011147:	6a 01                	push   0x1
c0011149:	53                   	push   ebx
c001114a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001114d:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0011152:	83 c4 20             	add    esp,0x20
c0011155:	89 c2                	mov    edx,eax
c0011157:	85 c0                	test   eax,eax
c0011159:	0f 84 36 01 00 00    	je     c0011295 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001115f:	83 f8 0d             	cmp    eax,0xd
c0011162:	0f 84 22 01 00 00    	je     c001128a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011168:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001116d:	0f 84 f0 00 00 00    	je     c0011263 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0011173:	83 f8 0a             	cmp    eax,0xa
c0011176:	74 13                	je     c001118b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011178:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001117d:	74 0c                	je     c001118b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001117f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011185:	0f 8e f6 00 00 00    	jle    c0011281 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001118b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001118f:	83 ec 0c             	sub    esp,0xc
c0011192:	8d 78 01             	lea    edi,[eax+0x1]
c0011195:	57                   	push   edi
c0011196:	e8 1b 69 ff ff       	call   c0007ab6 <malloc>
c001119b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001119f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00111a3:	8d 56 04             	lea    edx,[esi+0x4]
c00111a6:	89 14 24             	mov    DWORD PTR [esp],edx
c00111a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00111ad:	e8 04 69 ff ff       	call   c0007ab6 <malloc>
c00111b2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00111b6:	83 c4 0c             	add    esp,0xc
c00111b9:	57                   	push   edi
c00111ba:	6a 00                	push   0x0
c00111bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00111c0:	e8 2b f3 fe ff       	call   c00004f0 <memset>
c00111c5:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111c9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00111cd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00111d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111d3:	83 c4 0c             	add    esp,0xc
c00111d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111da:	52                   	push   edx
c00111db:	6a 00                	push   0x0
c00111dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00111e1:	e8 0a f3 fe ff       	call   c00004f0 <memset>
c00111e6:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111ea:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00111ee:	89 34 24             	mov    DWORD PTR [esp],esi
c00111f1:	e8 7a f3 fe ff       	call   c0000570 <strlen>
c00111f6:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00111fa:	89 c1                	mov    ecx,eax
c00111fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011201:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0011204:	40                   	inc    eax
c0011205:	83 c4 10             	add    esp,0x10
c0011208:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001120b:	85 d2                	test   edx,edx
c001120d:	75 0c                	jne    c001121b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001120f:	83 ec 0c             	sub    esp,0xc
c0011212:	6a 08                	push   0x8
c0011214:	e8 9d 68 ff ff       	call   c0007ab6 <malloc>
c0011219:	eb 0c                	jmp    c0011227 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001121b:	c1 e0 03             	shl    eax,0x3
c001121e:	51                   	push   ecx
c001121f:	51                   	push   ecx
c0011220:	50                   	push   eax
c0011221:	52                   	push   edx
c0011222:	e8 7b 68 ff ff       	call   c0007aa2 <realloc>
c0011227:	83 c4 10             	add    esp,0x10
c001122a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001122d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011230:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0011233:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011237:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001123b:	b9 08 00 00 00       	mov    ecx,0x8
c0011240:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011242:	31 f6                	xor    esi,esi
c0011244:	50                   	push   eax
c0011245:	68 00 01 00 00       	push   0x100
c001124a:	6a 00                	push   0x0
c001124c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011250:	50                   	push   eax
c0011251:	e8 9a f2 fe ff       	call   c00004f0 <memset>
c0011256:	83 c4 10             	add    esp,0x10
c0011259:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011261:	eb 27                	jmp    c001128a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011263:	83 f8 3d             	cmp    eax,0x3d
c0011266:	74 1e                	je     c0011286 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011268:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001126e:	7f 07                	jg     c0011277 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011270:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0011274:	46                   	inc    esi
c0011275:	eb 13                	jmp    c001128a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011277:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001127f:	eb 09                	jmp    c001128a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011281:	83 f8 3d             	cmp    eax,0x3d
c0011284:	75 ea                	jne    c0011270 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0011286:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001128a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001128f:	0f 85 99 fe ff ff    	jne    c001112e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011295:	83 ec 0c             	sub    esp,0xc
c0011298:	53                   	push   ebx
c0011299:	e8 ea a8 ff ff       	call   c000bb88 <File::close()>
c001129e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112a6:	81 c4 3c 01 00 00    	add    esp,0x13c
c00112ac:	5b                   	pop    ebx
c00112ad:	5e                   	pop    esi
c00112ae:	5f                   	pop    edi
c00112af:	5d                   	pop    ebp
c00112b0:	c3                   	ret    
c00112b1:	90                   	nop

c00112b2 <EnvVarContainer::__loadSystem()>:
c00112b2:	83 ec 10             	sub    esp,0x10
c00112b5:	68 e0 3b 02 c0       	push   0xc0023be0
c00112ba:	68 d0 22 02 c0       	push   0xc00222d0
c00112bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c3:	e8 c6 fd ff ff       	call   c001108e <EnvVarContainer::loadFrom(char const*, char const*)>
c00112c8:	83 c4 1c             	add    esp,0x1c
c00112cb:	c3                   	ret    

c00112cc <EnvVarContainer::__loadUser()>:
c00112cc:	c3                   	ret    
c00112cd:	90                   	nop

c00112ce <EnvVarContainer::EnvVarContainer(Process*)>:
c00112ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00112e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00112e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112ee:	90                   	nop
c00112ef:	c3                   	ret    

c00112f0 <EnvVarContainer::~EnvVarContainer()>:
c00112f0:	83 ec 0c             	sub    esp,0xc
c00112f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112fa:	85 c0                	test   eax,eax
c00112fc:	74 1d                	je     c001131b <EnvVarContainer::~EnvVarContainer()+0x2b>
c00112fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011302:	8b 00                	mov    eax,DWORD PTR [eax]
c0011304:	85 c0                	test   eax,eax
c0011306:	74 13                	je     c001131b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001130c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001130f:	83 ec 0c             	sub    esp,0xc
c0011312:	50                   	push   eax
c0011313:	e8 ae 67 ff ff       	call   c0007ac6 <free>
c0011318:	83 c4 10             	add    esp,0x10
c001131b:	90                   	nop
c001131c:	83 c4 0c             	add    esp,0xc
c001131f:	c3                   	ret    

c0011320 <KeGetEnv(Process*, char const*)>:
c0011320:	53                   	push   ebx
c0011321:	83 ec 08             	sub    esp,0x8
c0011324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011328:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001132c:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c0011332:	74 04                	je     c0011338 <KeGetEnv(Process*, char const*)+0x18>
c0011334:	85 c0                	test   eax,eax
c0011336:	75 0b                	jne    c0011343 <KeGetEnv(Process*, char const*)+0x23>
c0011338:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c001133d:	85 c0                	test   eax,eax
c001133f:	75 19                	jne    c001135a <KeGetEnv(Process*, char const*)+0x3a>
c0011341:	eb 27                	jmp    c001136a <KeGetEnv(Process*, char const*)+0x4a>
c0011343:	52                   	push   edx
c0011344:	52                   	push   edx
c0011345:	53                   	push   ebx
c0011346:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001134c:	e8 3b fc ff ff       	call   c0010f8c <EnvVarContainer::getEnv(char const*)>
c0011351:	83 c4 10             	add    esp,0x10
c0011354:	85 c0                	test   eax,eax
c0011356:	75 28                	jne    c0011380 <KeGetEnv(Process*, char const*)+0x60>
c0011358:	eb de                	jmp    c0011338 <KeGetEnv(Process*, char const*)+0x18>
c001135a:	52                   	push   edx
c001135b:	52                   	push   edx
c001135c:	53                   	push   ebx
c001135d:	50                   	push   eax
c001135e:	e8 29 fc ff ff       	call   c0010f8c <EnvVarContainer::getEnv(char const*)>
c0011363:	83 c4 10             	add    esp,0x10
c0011366:	85 c0                	test   eax,eax
c0011368:	75 16                	jne    c0011380 <KeGetEnv(Process*, char const*)+0x60>
c001136a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001136e:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011373:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011377:	83 c4 08             	add    esp,0x8
c001137a:	5b                   	pop    ebx
c001137b:	e9 0c fc ff ff       	jmp    c0010f8c <EnvVarContainer::getEnv(char const*)>
c0011380:	83 c4 08             	add    esp,0x8
c0011383:	5b                   	pop    ebx
c0011384:	c3                   	ret    

c0011385 <KeSetEnvSystem(char const*, char const*)>:
c0011385:	83 ec 10             	sub    esp,0x10
c0011388:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001138c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011390:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c0011396:	e8 2f fc ff ff       	call   c0010fca <EnvVarContainer::setEnv(char const*, char const*)>
c001139b:	83 c4 1c             	add    esp,0x1c
c001139e:	c3                   	ret    

c001139f <KeSetEnvUser(char const*, char const*)>:
c001139f:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00113a4:	85 c0                	test   eax,eax
c00113a6:	74 15                	je     c00113bd <KeSetEnvUser(char const*, char const*)+0x1e>
c00113a8:	83 ec 10             	sub    esp,0x10
c00113ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113b3:	50                   	push   eax
c00113b4:	e8 11 fc ff ff       	call   c0010fca <EnvVarContainer::setEnv(char const*, char const*)>
c00113b9:	83 c4 1c             	add    esp,0x1c
c00113bc:	c3                   	ret    
c00113bd:	c3                   	ret    

c00113be <KeSetEnvProcess(Process*, char const*, char const*)>:
c00113be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113c2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00113c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113cc:	e9 f9 fb ff ff       	jmp    c0010fca <EnvVarContainer::setEnv(char const*, char const*)>

c00113d1 <KeDeleteEnvSystem(char const*)>:
c00113d1:	c3                   	ret    

c00113d2 <KeDeleteEnvUser(char const*)>:
c00113d2:	c3                   	ret    

c00113d3 <KeDeleteEnvProcess(Process*, char const*)>:
c00113d3:	c3                   	ret    

c00113d4 <KeNewProcessEnv(Process*)>:
c00113d4:	83 ec 28             	sub    esp,0x28
c00113d7:	6a 0c                	push   0xc
c00113d9:	e8 d8 66 ff ff       	call   c0007ab6 <malloc>
c00113de:	5a                   	pop    edx
c00113df:	59                   	pop    ecx
c00113e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00113e4:	50                   	push   eax
c00113e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113e9:	e8 e0 fe ff ff       	call   c00112ce <EnvVarContainer::EnvVarContainer(Process*)>
c00113ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113f2:	83 c4 2c             	add    esp,0x2c
c00113f5:	c3                   	ret    

c00113f6 <KeCopyProcessEnv(Process*, Process*)>:
c00113f6:	57                   	push   edi
c00113f7:	56                   	push   esi
c00113f8:	53                   	push   ebx
c00113f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113fd:	83 ec 0c             	sub    esp,0xc
c0011400:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011406:	6a 0c                	push   0xc
c0011408:	e8 a9 66 ff ff       	call   c0007ab6 <malloc>
c001140d:	89 c3                	mov    ebx,eax
c001140f:	58                   	pop    eax
c0011410:	5a                   	pop    edx
c0011411:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011415:	53                   	push   ebx
c0011416:	e8 b3 fe ff ff       	call   c00112ce <EnvVarContainer::EnvVarContainer(Process*)>
c001141b:	8b 07                	mov    eax,DWORD PTR [edi]
c001141d:	89 03                	mov    DWORD PTR [ebx],eax
c001141f:	c1 e0 03             	shl    eax,0x3
c0011422:	89 04 24             	mov    DWORD PTR [esp],eax
c0011425:	e8 8c 66 ff ff       	call   c0007ab6 <malloc>
c001142a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001142d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001142f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011432:	c1 e1 03             	shl    ecx,0x3
c0011435:	89 c7                	mov    edi,eax
c0011437:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011439:	83 c4 10             	add    esp,0x10
c001143c:	89 d8                	mov    eax,ebx
c001143e:	5b                   	pop    ebx
c001143f:	5e                   	pop    esi
c0011440:	5f                   	pop    edi
c0011441:	c3                   	ret    

c0011442 <KeLoadSystemEnv()>:
c0011442:	53                   	push   ebx
c0011443:	83 ec 14             	sub    esp,0x14
c0011446:	6a 0c                	push   0xc
c0011448:	e8 69 66 ff ff       	call   c0007ab6 <malloc>
c001144d:	89 c3                	mov    ebx,eax
c001144f:	58                   	pop    eax
c0011450:	5a                   	pop    edx
c0011451:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011457:	53                   	push   ebx
c0011458:	e8 71 fe ff ff       	call   c00112ce <EnvVarContainer::EnvVarContainer(Process*)>
c001145d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011460:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c0011466:	e8 47 fe ff ff       	call   c00112b2 <EnvVarContainer::__loadSystem()>
c001146b:	83 c4 18             	add    esp,0x18
c001146e:	5b                   	pop    ebx
c001146f:	c3                   	ret    

c0011470 <KeLoadUserEnv()>:
c0011470:	53                   	push   ebx
c0011471:	83 ec 14             	sub    esp,0x14
c0011474:	6a 0c                	push   0xc
c0011476:	e8 3b 66 ff ff       	call   c0007ab6 <malloc>
c001147b:	89 c3                	mov    ebx,eax
c001147d:	58                   	pop    eax
c001147e:	5a                   	pop    edx
c001147f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011485:	53                   	push   ebx
c0011486:	e8 43 fe ff ff       	call   c00112ce <EnvVarContainer::EnvVarContainer(Process*)>
c001148b:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c0011491:	83 c4 18             	add    esp,0x18
c0011494:	5b                   	pop    ebx
c0011495:	c3                   	ret    

c0011496 <KeFlushEnv()>:
c0011496:	c3                   	ret    

c0011497 <KeGetProcessTotalEnvCount(Process*)>:
c0011497:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001149b:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c00114a1:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114a7:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00114ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00114ae:	03 01                	add    eax,DWORD PTR [ecx]
c00114b0:	85 d2                	test   edx,edx
c00114b2:	74 02                	je     c00114b6 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00114b4:	03 02                	add    eax,DWORD PTR [edx]
c00114b6:	c3                   	ret    

c00114b7 <KeGetProcessEnvPair(Process*, int)>:
c00114b7:	57                   	push   edi
c00114b8:	56                   	push   esi
c00114b9:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00114bf:	53                   	push   ebx
c00114c0:	85 f6                	test   esi,esi
c00114c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00114c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114ca:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00114d4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00114d6:	75 16                	jne    c00114ee <KeGetProcessEnvPair(Process*, int)+0x37>
c00114d8:	39 c2                	cmp    edx,eax
c00114da:	7c 16                	jl     c00114f2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00114dc:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c00114e2:	8b 31                	mov    esi,DWORD PTR [ecx]
c00114e4:	01 c6                	add    esi,eax
c00114e6:	39 d6                	cmp    esi,edx
c00114e8:	7e 3c                	jle    c0011526 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00114ea:	29 c2                	sub    edx,eax
c00114ec:	eb 04                	jmp    c00114f2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00114ee:	39 c2                	cmp    edx,eax
c00114f0:	7d 05                	jge    c00114f7 <KeGetProcessEnvPair(Process*, int)+0x40>
c00114f2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00114f5:	eb 20                	jmp    c0011517 <KeGetProcessEnvPair(Process*, int)+0x60>
c00114f7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00114f9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00114fc:	39 d1                	cmp    ecx,edx
c00114fe:	7e 04                	jle    c0011504 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011500:	29 c2                	sub    edx,eax
c0011502:	eb 10                	jmp    c0011514 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011504:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c001150a:	03 0e                	add    ecx,DWORD PTR [esi]
c001150c:	39 d1                	cmp    ecx,edx
c001150e:	7e 16                	jle    c0011526 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011510:	29 c2                	sub    edx,eax
c0011512:	29 fa                	sub    edx,edi
c0011514:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011517:	8d 14 d0             	lea    edx,[eax+edx*8]
c001151a:	8b 02                	mov    eax,DWORD PTR [edx]
c001151c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001151f:	89 03                	mov    DWORD PTR [ebx],eax
c0011521:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011524:	eb 1d                	jmp    c0011543 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011526:	83 ec 0c             	sub    esp,0xc
c0011529:	68 f2 22 02 c0       	push   0xc00222f2
c001152e:	e8 ac 00 00 00       	call   c00115df <KePanic(char const*)>
c0011533:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011539:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011540:	83 c4 10             	add    esp,0x10
c0011543:	89 d8                	mov    eax,ebx
c0011545:	5b                   	pop    ebx
c0011546:	5e                   	pop    esi
c0011547:	5f                   	pop    edi
c0011548:	c2 04 00             	ret    0x4

c001154b <CPU::current()>:
c001154b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011550:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011556:	c3                   	ret    

c0011557 <operator new(unsigned long)>:
c0011557:	e9 5a 65 ff ff       	jmp    c0007ab6 <malloc>

c001155c <operator delete(void*)>:
c001155c:	e9 75 65 ff ff       	jmp    c0007ad6 <rfree>

c0011561 <disableIRQs()>:
c0011561:	fa                   	cli    
c0011562:	c3                   	ret    

c0011563 <enableIRQs()>:
c0011563:	fb                   	sti    
c0011564:	c3                   	ret    

c0011565 <lockScheduler()>:
c0011565:	fa                   	cli    
c0011566:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001156c:	c3                   	ret    

c001156d <unlockScheduler()>:
c001156d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011572:	48                   	dec    eax
c0011573:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011578:	75 01                	jne    c001157b <unlockScheduler()+0xe>
c001157a:	fb                   	sti    
c001157b:	c3                   	ret    

c001157c <lockStuff()>:
c001157c:	fa                   	cli    
c001157d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011583:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c0011589:	c3                   	ret    

c001158a <unlockStuff()>:
c001158a:	83 ec 0c             	sub    esp,0xc
c001158d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0011592:	48                   	dec    eax
c0011593:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0011598:	75 18                	jne    c00115b2 <unlockStuff()+0x28>
c001159a:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00115a1:	74 0f                	je     c00115b2 <unlockStuff()+0x28>
c00115a3:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00115ad:	e8 ce 4a 00 00       	call   c0016080 <schedule()>
c00115b2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115b7:	48                   	dec    eax
c00115b8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115bd:	75 01                	jne    c00115c0 <unlockStuff()+0x36>
c00115bf:	fb                   	sti    
c00115c0:	83 c4 0c             	add    esp,0xc
c00115c3:	c3                   	ret    

c00115c4 <Virt::getAKernelVAS()>:
c00115c4:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00115c9:	c3                   	ret    

c00115ca <__not_memcpy>:
c00115ca:	57                   	push   edi
c00115cb:	56                   	push   esi
c00115cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00115d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00115d8:	89 c7                	mov    edi,eax
c00115da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115dc:	5e                   	pop    esi
c00115dd:	5f                   	pop    edi
c00115de:	c3                   	ret    

c00115df <KePanic(char const*)>:
c00115df:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c00115e6:	e9 3b 6a 00 00       	jmp    c0018026 <HalPanic(char const*)>

c00115eb <KePowerThread(void*)>:
c00115eb:	83 ec 0c             	sub    esp,0xc
c00115ee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115f3:	48                   	dec    eax
c00115f4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115f9:	75 01                	jne    c00115fc <KePowerThread(void*)+0x11>
c00115fb:	fb                   	sti    
c00115fc:	83 ec 0c             	sub    esp,0xc
c00115ff:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011606:	6a 0a                	push   0xa
c0011608:	e8 b7 4d 00 00       	call   c00163c4 <sleep(unsigned int)>
c001160d:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c0011614:	83 c4 10             	add    esp,0x10
c0011617:	eb e3                	jmp    c00115fc <KePowerThread(void*)+0x11>

c0011619 <KeChangePowerSettings(PowerSettings)>:
c0011619:	57                   	push   edi
c001161a:	b9 09 00 00 00       	mov    ecx,0x9
c001161f:	56                   	push   esi
c0011620:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c0011625:	fc                   	cld    
c0011626:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001162a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001162c:	5e                   	pop    esi
c001162d:	5f                   	pop    edi
c001162e:	c3                   	ret    

c001162f <KeUserIOReceived()>:
c001162f:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011639:	c3                   	ret    

c001163a <KeHandlePowerButton()>:
c001163a:	83 ec 0c             	sub    esp,0xc
c001163d:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c0011642:	83 f8 02             	cmp    eax,0x2
c0011645:	75 10                	jne    c0011657 <KeHandlePowerButton()+0x1d>
c0011647:	83 ec 0c             	sub    esp,0xc
c001164a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011650:	e8 d3 5a ff ff       	call   c0007128 <Computer::shutdown()>
c0011655:	eb 11                	jmp    c0011668 <KeHandlePowerButton()+0x2e>
c0011657:	48                   	dec    eax
c0011658:	75 11                	jne    c001166b <KeHandlePowerButton()+0x31>
c001165a:	83 ec 0c             	sub    esp,0xc
c001165d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011663:	e8 f0 5a ff ff       	call   c0007158 <Computer::sleep()>
c0011668:	83 c4 10             	add    esp,0x10
c001166b:	83 c4 0c             	add    esp,0xc
c001166e:	c3                   	ret    

c001166f <KeHandleSleepButton()>:
c001166f:	83 ec 0c             	sub    esp,0xc
c0011672:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0011677:	83 f8 02             	cmp    eax,0x2
c001167a:	75 10                	jne    c001168c <KeHandleSleepButton()+0x1d>
c001167c:	83 ec 0c             	sub    esp,0xc
c001167f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011685:	e8 9e 5a ff ff       	call   c0007128 <Computer::shutdown()>
c001168a:	eb 11                	jmp    c001169d <KeHandleSleepButton()+0x2e>
c001168c:	48                   	dec    eax
c001168d:	75 11                	jne    c00116a0 <KeHandleSleepButton()+0x31>
c001168f:	83 ec 0c             	sub    esp,0xc
c0011692:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011698:	e8 bb 5a ff ff       	call   c0007158 <Computer::sleep()>
c001169d:	83 c4 10             	add    esp,0x10
c00116a0:	83 c4 0c             	add    esp,0xc
c00116a3:	c3                   	ret    

c00116a4 <KeSetupPowerManager()>:
c00116a4:	83 ec 0c             	sub    esp,0xc
c00116a7:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00116b1:	68 f0 00 00 00       	push   0xf0
c00116b6:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116bd:	6a 00                	push   0x0
c00116bf:	68 eb 15 01 c0       	push   0xc00115eb
c00116c4:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00116ca:	e8 61 47 00 00       	call   c0015e30 <Process::createThread(void (*)(void*), void*, int)>
c00116cf:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c00116d9:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c00116e3:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c00116ed:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c00116f7:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011701:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c001170b:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c0011715:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c001171f:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011729:	83 c4 1c             	add    esp,0x1c
c001172c:	c3                   	ret    

c001172d <KeRand()>:
c001172d:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c0011737:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011741:	53                   	push   ebx
c0011742:	01 c1                	add    ecx,eax
c0011744:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011749:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c001174f:	01 ca                	add    edx,ecx
c0011751:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011756:	83 d2 00             	adc    edx,0x0
c0011759:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c001175e:	0f b7 da             	movzx  ebx,dx
c0011761:	89 da                	mov    edx,ebx
c0011763:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c0011769:	0f ac d0 0e          	shrd   eax,edx,0xe
c001176d:	5b                   	pop    ebx
c001176e:	c3                   	ret    

c001176f <KeSeedRand(unsigned int)>:
c001176f:	53                   	push   ebx
c0011770:	83 ec 08             	sub    esp,0x8
c0011773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011777:	e8 c9 6b 00 00       	call   c0018345 <HalGetRand()>
c001177c:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c0011786:	31 d8                	xor    eax,ebx
c0011788:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c001178d:	e8 9b ff ff ff       	call   c001172d <KeRand()>
c0011792:	83 c4 08             	add    esp,0x8
c0011795:	5b                   	pop    ebx
c0011796:	eb 95                	jmp    c001172d <KeRand()>

c0011798 <KeInitRand()>:
c0011798:	83 ec 0c             	sub    esp,0xc
c001179b:	e8 9a 69 00 00       	call   c001813a <HalQueryPerformanceCounter()>
c00117a0:	0f 20 da             	mov    edx,cr3
c00117a3:	0f 22 da             	mov    cr3,edx
c00117a6:	0f 20 da             	mov    edx,cr3
c00117a9:	0f 22 da             	mov    cr3,edx
c00117ac:	0f 20 da             	mov    edx,cr3
c00117af:	0f 22 da             	mov    cr3,edx
c00117b2:	0f 20 da             	mov    edx,cr3
c00117b5:	0f 22 da             	mov    cr3,edx
c00117b8:	83 ec 0c             	sub    esp,0xc
c00117bb:	35 03 8a 95 38       	xor    eax,0x38958a03
c00117c0:	50                   	push   eax
c00117c1:	e8 a9 ff ff ff       	call   c001176f <KeSeedRand(unsigned int)>
c00117c6:	83 c4 1c             	add    esp,0x1c
c00117c9:	c3                   	ret    
c00117ca:	66 90                	xchg   ax,ax

c00117cc <KeResolveCompatibilitySymbol(char*)>:
c00117cc:	83 ec 0c             	sub    esp,0xc
c00117cf:	83 ec 08             	sub    esp,0x8
c00117d2:	68 0c 23 02 c0       	push   0xc002230c
c00117d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117db:	e8 70 ef fe ff       	call   c0000750 <strcmp>
c00117e0:	83 c4 10             	add    esp,0x10
c00117e3:	85 c0                	test   eax,eax
c00117e5:	0f 94 c0             	sete   al
c00117e8:	0f b6 c0             	movzx  eax,al
c00117eb:	85 c0                	test   eax,eax
c00117ed:	74 0d                	je     c00117fc <KeResolveCompatibilitySymbol(char*)+0x30>
c00117ef:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c00117f4:	e9 8b 01 00 00       	jmp    c0011984 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117f9:	8d 76 00             	lea    esi,[esi+0x0]
c00117fc:	83 ec 08             	sub    esp,0x8
c00117ff:	68 15 23 02 c0       	push   0xc0022315
c0011804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011808:	e8 43 ef fe ff       	call   c0000750 <strcmp>
c001180d:	83 c4 10             	add    esp,0x10
c0011810:	85 c0                	test   eax,eax
c0011812:	0f 94 c0             	sete   al
c0011815:	0f b6 c0             	movzx  eax,al
c0011818:	85 c0                	test   eax,eax
c001181a:	74 0c                	je     c0011828 <KeResolveCompatibilitySymbol(char*)+0x5c>
c001181c:	b8 f0 f6 01 c0       	mov    eax,0xc001f6f0
c0011821:	e9 5e 01 00 00       	jmp    c0011984 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011826:	66 90                	xchg   ax,ax
c0011828:	83 ec 08             	sub    esp,0x8
c001182b:	68 1f 23 02 c0       	push   0xc002231f
c0011830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011834:	e8 17 ef fe ff       	call   c0000750 <strcmp>
c0011839:	83 c4 10             	add    esp,0x10
c001183c:	85 c0                	test   eax,eax
c001183e:	0f 94 c0             	sete   al
c0011841:	0f b6 c0             	movzx  eax,al
c0011844:	85 c0                	test   eax,eax
c0011846:	74 0c                	je     c0011854 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011848:	b8 24 f4 01 c0       	mov    eax,0xc001f424
c001184d:	e9 32 01 00 00       	jmp    c0011984 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011852:	66 90                	xchg   ax,ax
c0011854:	83 ec 08             	sub    esp,0x8
c0011857:	68 28 23 02 c0       	push   0xc0022328
c001185c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011860:	e8 eb ee fe ff       	call   c0000750 <strcmp>
c0011865:	83 c4 10             	add    esp,0x10
c0011868:	85 c0                	test   eax,eax
c001186a:	0f 94 c0             	sete   al
c001186d:	0f b6 c0             	movzx  eax,al
c0011870:	85 c0                	test   eax,eax
c0011872:	74 0c                	je     c0011880 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011874:	b8 df 15 01 c0       	mov    eax,0xc00115df
c0011879:	e9 06 01 00 00       	jmp    c0011984 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001187e:	66 90                	xchg   ax,ax
c0011880:	83 ec 08             	sub    esp,0x8
c0011883:	68 3b 23 02 c0       	push   0xc002233b
c0011888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001188c:	e8 bf ee fe ff       	call   c0000750 <strcmp>
c0011891:	83 c4 10             	add    esp,0x10
c0011894:	85 c0                	test   eax,eax
c0011896:	0f 94 c0             	sete   al
c0011899:	0f b6 c0             	movzx  eax,al
c001189c:	85 c0                	test   eax,eax
c001189e:	74 0c                	je     c00118ac <KeResolveCompatibilitySymbol(char*)+0xe0>
c00118a0:	b8 df 0e 01 c0       	mov    eax,0xc0010edf
c00118a5:	e9 da 00 00 00       	jmp    c0011984 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118aa:	66 90                	xchg   ax,ax
c00118ac:	83 ec 08             	sub    esp,0x8
c00118af:	68 58 23 02 c0       	push   0xc0022358
c00118b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118b8:	e8 93 ee fe ff       	call   c0000750 <strcmp>
c00118bd:	83 c4 10             	add    esp,0x10
c00118c0:	85 c0                	test   eax,eax
c00118c2:	0f 94 c0             	sete   al
c00118c5:	0f b6 c0             	movzx  eax,al
c00118c8:	85 c0                	test   eax,eax
c00118ca:	74 0c                	je     c00118d8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00118cc:	b8 f0 f7 01 c0       	mov    eax,0xc001f7f0
c00118d1:	e9 ae 00 00 00       	jmp    c0011984 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118d6:	66 90                	xchg   ax,ax
c00118d8:	83 ec 08             	sub    esp,0x8
c00118db:	68 62 23 02 c0       	push   0xc0022362
c00118e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118e4:	e8 67 ee fe ff       	call   c0000750 <strcmp>
c00118e9:	83 c4 10             	add    esp,0x10
c00118ec:	85 c0                	test   eax,eax
c00118ee:	0f 94 c0             	sete   al
c00118f1:	0f b6 c0             	movzx  eax,al
c00118f4:	85 c0                	test   eax,eax
c00118f6:	74 0c                	je     c0011904 <KeResolveCompatibilitySymbol(char*)+0x138>
c00118f8:	b8 70 f5 01 c0       	mov    eax,0xc001f570
c00118fd:	e9 82 00 00 00       	jmp    c0011984 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011902:	66 90                	xchg   ax,ax
c0011904:	83 ec 08             	sub    esp,0x8
c0011907:	68 6b 23 02 c0       	push   0xc002236b
c001190c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011910:	e8 3b ee fe ff       	call   c0000750 <strcmp>
c0011915:	83 c4 10             	add    esp,0x10
c0011918:	85 c0                	test   eax,eax
c001191a:	0f 94 c0             	sete   al
c001191d:	0f b6 c0             	movzx  eax,al
c0011920:	85 c0                	test   eax,eax
c0011922:	74 08                	je     c001192c <KeResolveCompatibilitySymbol(char*)+0x160>
c0011924:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011929:	eb 59                	jmp    c0011984 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001192b:	90                   	nop
c001192c:	83 ec 08             	sub    esp,0x8
c001192f:	68 83 23 02 c0       	push   0xc0022383
c0011934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011938:	e8 13 ee fe ff       	call   c0000750 <strcmp>
c001193d:	83 c4 10             	add    esp,0x10
c0011940:	85 c0                	test   eax,eax
c0011942:	0f 94 c0             	sete   al
c0011945:	0f b6 c0             	movzx  eax,al
c0011948:	85 c0                	test   eax,eax
c001194a:	74 08                	je     c0011954 <KeResolveCompatibilitySymbol(char*)+0x188>
c001194c:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011951:	eb 31                	jmp    c0011984 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011953:	90                   	nop
c0011954:	83 ec 08             	sub    esp,0x8
c0011957:	68 90 23 02 c0       	push   0xc0022390
c001195c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011960:	e8 eb ed fe ff       	call   c0000750 <strcmp>
c0011965:	83 c4 10             	add    esp,0x10
c0011968:	85 c0                	test   eax,eax
c001196a:	0f 94 c0             	sete   al
c001196d:	0f b6 c0             	movzx  eax,al
c0011970:	85 c0                	test   eax,eax
c0011972:	74 08                	je     c001197c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011974:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011979:	eb 09                	jmp    c0011984 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001197b:	90                   	nop
c001197c:	b8 00 00 00 00       	mov    eax,0x0
c0011981:	8d 76 00             	lea    esi,[esi+0x0]
c0011984:	83 c4 0c             	add    esp,0xc
c0011987:	c3                   	ret    

c0011988 <KiSigKill(int)>:
c0011988:	83 ec 0c             	sub    esp,0xc
c001198b:	6a 00                	push   0x0
c001198d:	6a 00                	push   0x0
c001198f:	6a ff                	push   0xffffffff
c0011991:	6a 01                	push   0x1
c0011993:	e8 ba 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011998:	83 c4 1c             	add    esp,0x1c
c001199b:	c3                   	ret    

c001199c <KiDefaultSignalHandlerIgnore(int)>:
c001199c:	c3                   	ret    

c001199d <KiDefaultSignalHandlerPause(int)>:
c001199d:	57                   	push   edi
c001199e:	b9 07 00 00 00       	mov    ecx,0x7
c00119a3:	56                   	push   esi
c00119a4:	be d9 23 02 c0       	mov    esi,0xc00223d9
c00119a9:	83 ec 24             	sub    esp,0x24
c00119ac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00119b0:	fc                   	cld    
c00119b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00119b3:	8d 44 24 04          	lea    eax,[esp+0x4]
c00119b7:	50                   	push   eax
c00119b8:	6a 00                	push   0x0
c00119ba:	6a 00                	push   0x0
c00119bc:	6a 27                	push   0x27
c00119be:	e8 8f 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119c3:	83 c4 34             	add    esp,0x34
c00119c6:	5e                   	pop    esi
c00119c7:	5f                   	pop    edi
c00119c8:	c3                   	ret    

c00119c9 <KiDefaultSignalHandlerResume(int)>:
c00119c9:	57                   	push   edi
c00119ca:	b9 1d 00 00 00       	mov    ecx,0x1d
c00119cf:	56                   	push   esi
c00119d0:	be f5 23 02 c0       	mov    esi,0xc00223f5
c00119d5:	83 ec 24             	sub    esp,0x24
c00119d8:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00119dc:	fc                   	cld    
c00119dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119df:	8d 44 24 03          	lea    eax,[esp+0x3]
c00119e3:	50                   	push   eax
c00119e4:	6a 00                	push   0x0
c00119e6:	6a 00                	push   0x0
c00119e8:	6a 27                	push   0x27
c00119ea:	e8 63 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119ef:	83 c4 34             	add    esp,0x34
c00119f2:	5e                   	pop    esi
c00119f3:	5f                   	pop    edi
c00119f4:	c3                   	ret    

c00119f5 <KeDeinitSignals(SigHandlerBlock*)>:
c00119f5:	e9 cc 60 ff ff       	jmp    c0007ac6 <free>

c00119fa <KeInitSignals()>:
c00119fa:	53                   	push   ebx
c00119fb:	83 ec 14             	sub    esp,0x14
c00119fe:	68 c8 00 00 00       	push   0xc8
c0011a03:	e8 ae 60 ff ff       	call   c0007ab6 <malloc>
c0011a08:	83 c4 0c             	add    esp,0xc
c0011a0b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011a15:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011a1f:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011a26:	89 c3                	mov    ebx,eax
c0011a28:	6a 20                	push   0x20
c0011a2a:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011a30:	6a 00                	push   0x0
c0011a32:	50                   	push   eax
c0011a33:	e8 b8 ea fe ff       	call   c00004f0 <memset>
c0011a38:	83 c4 0c             	add    esp,0xc
c0011a3b:	6a 44                	push   0x44
c0011a3d:	6a 00                	push   0x0
c0011a3f:	53                   	push   ebx
c0011a40:	e8 ab ea fe ff       	call   c00004f0 <memset>
c0011a45:	89 d8                	mov    eax,ebx
c0011a47:	83 c4 18             	add    esp,0x18
c0011a4a:	5b                   	pop    ebx
c0011a4b:	c3                   	ret    

c0011a4c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011a4c:	53                   	push   ebx
c0011a4d:	b8 01 00 00 00       	mov    eax,0x1
c0011a52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a5a:	83 f9 10             	cmp    ecx,0x10
c0011a5d:	7f 21                	jg     c0011a80 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011a5f:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a66:	89 03                	mov    DWORD PTR [ebx],eax
c0011a68:	b8 01 00 00 00       	mov    eax,0x1
c0011a6d:	d3 e0                	shl    eax,cl
c0011a6f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011a73:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011a76:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011a7e:	31 c0                	xor    eax,eax
c0011a80:	5b                   	pop    ebx
c0011a81:	c3                   	ret    

c0011a82 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011a82:	55                   	push   ebp
c0011a83:	57                   	push   edi
c0011a84:	bf 08 00 00 00       	mov    edi,0x8
c0011a89:	56                   	push   esi
c0011a8a:	53                   	push   ebx
c0011a8b:	83 ec 18             	sub    esp,0x18
c0011a8e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a92:	68 12 24 02 c0       	push   0xc0022412
c0011a97:	e8 a9 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011a9c:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011aa3:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011aa9:	83 c4 10             	add    esp,0x10
c0011aac:	31 c9                	xor    ecx,ecx
c0011aae:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011ab2:	99                   	cdq    
c0011ab3:	f7 ff                	idiv   edi
c0011ab5:	8d 42 24             	lea    eax,[edx+0x24]
c0011ab8:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011abc:	85 f6                	test   esi,esi
c0011abe:	75 1a                	jne    c0011ada <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011ac0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ac4:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011ac8:	50                   	push   eax
c0011ac9:	50                   	push   eax
c0011aca:	52                   	push   edx
c0011acb:	68 23 24 02 c0       	push   0xc0022423
c0011ad0:	e8 70 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011ad5:	83 c4 10             	add    esp,0x10
c0011ad8:	eb 1b                	jmp    c0011af5 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011ada:	41                   	inc    ecx
c0011adb:	83 f9 08             	cmp    ecx,0x8
c0011ade:	75 ce                	jne    c0011aae <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011ae0:	83 ec 0c             	sub    esp,0xc
c0011ae3:	be 01 00 00 00       	mov    esi,0x1
c0011ae8:	68 44 24 02 c0       	push   0xc0022444
c0011aed:	e8 53 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011af2:	83 c4 10             	add    esp,0x10
c0011af5:	83 c4 0c             	add    esp,0xc
c0011af8:	89 f0                	mov    eax,esi
c0011afa:	5b                   	pop    ebx
c0011afb:	5e                   	pop    esi
c0011afc:	5f                   	pop    edi
c0011afd:	5d                   	pop    ebp
c0011afe:	c3                   	ret    

c0011aff <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011aff:	55                   	push   ebp
c0011b00:	57                   	push   edi
c0011b01:	56                   	push   esi
c0011b02:	53                   	push   ebx
c0011b03:	51                   	push   ecx
c0011b04:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b08:	85 db                	test   ebx,ebx
c0011b0a:	0f 84 bc 00 00 00    	je     c0011bcc <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b10:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011b17:	0f 84 af 00 00 00    	je     c0011bcc <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b1d:	31 c9                	xor    ecx,ecx
c0011b1f:	bf 08 00 00 00       	mov    edi,0x8
c0011b24:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b2a:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011b2d:	99                   	cdq    
c0011b2e:	f7 ff                	idiv   edi
c0011b30:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011b37:	85 ed                	test   ebp,ebp
c0011b39:	0f 84 9e 00 00 00    	je     c0011bdd <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011b3f:	89 e9                	mov    ecx,ebp
c0011b41:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011b47:	bf 01 00 00 00       	mov    edi,0x1
c0011b4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b4f:	d3 e7                	shl    edi,cl
c0011b51:	31 c9                	xor    ecx,ecx
c0011b53:	b8 01 00 00 00       	mov    eax,0x1
c0011b58:	d3 e0                	shl    eax,cl
c0011b5a:	85 04 24             	test   DWORD PTR [esp],eax
c0011b5d:	74 06                	je     c0011b65 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011b5f:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011b63:	75 67                	jne    c0011bcc <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b65:	41                   	inc    ecx
c0011b66:	83 f9 11             	cmp    ecx,0x11
c0011b69:	75 e8                	jne    c0011b53 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011b6b:	46                   	inc    esi
c0011b6c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011b6f:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b75:	09 f8                	or     eax,edi
c0011b77:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011b82:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011b88:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011b8f:	31 c0                	xor    eax,eax
c0011b91:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011b99:	74 09                	je     c0011ba4 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011b9b:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011ba2:	eb 06                	jmp    c0011baa <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011ba4:	40                   	inc    eax
c0011ba5:	83 f8 08             	cmp    eax,0x8
c0011ba8:	75 e7                	jne    c0011b91 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011baa:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011bad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011bb1:	83 fd 09             	cmp    ebp,0x9
c0011bb4:	89 2a                	mov    DWORD PTR [edx],ebp
c0011bb6:	75 07                	jne    c0011bbf <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011bb8:	b8 88 19 01 c0       	mov    eax,0xc0011988
c0011bbd:	eb 31                	jmp    c0011bf0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bbf:	83 f8 01             	cmp    eax,0x1
c0011bc2:	75 0c                	jne    c0011bd0 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011bc4:	f7 d7                	not    edi
c0011bc6:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011bcc:	31 c0                	xor    eax,eax
c0011bce:	eb 20                	jmp    c0011bf0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bd0:	85 c0                	test   eax,eax
c0011bd2:	75 1c                	jne    c0011bf0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bd4:	8b 04 ad 40 3c 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc3c0]
c0011bdb:	eb 13                	jmp    c0011bf0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bdd:	46                   	inc    esi
c0011bde:	41                   	inc    ecx
c0011bdf:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011be5:	83 f9 08             	cmp    ecx,0x8
c0011be8:	0f 85 36 ff ff ff    	jne    c0011b24 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011bee:	eb dc                	jmp    c0011bcc <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bf0:	5a                   	pop    edx
c0011bf1:	5b                   	pop    ebx
c0011bf2:	5e                   	pop    esi
c0011bf3:	5f                   	pop    edi
c0011bf4:	5d                   	pop    ebp
c0011bf5:	c3                   	ret    

c0011bf6 <KiCheckSignalZ>:
c0011bf6:	83 ec 10             	sub    esp,0x10
c0011bf9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011bfd:	50                   	push   eax
c0011bfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c03:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c06:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c0c:	e8 ee fe ff ff       	call   c0011aff <KeCheckSignal(SigHandlerBlock*, int*)>
c0011c11:	5a                   	pop    edx
c0011c12:	31 d2                	xor    edx,edx
c0011c14:	59                   	pop    ecx
c0011c15:	85 c0                	test   eax,eax
c0011c17:	74 19                	je     c0011c32 <KiCheckSignalZ+0x3c>
c0011c19:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c1f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011c22:	89 02                	mov    DWORD PTR [edx],eax
c0011c24:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c2f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011c32:	89 d0                	mov    eax,edx
c0011c34:	83 c4 10             	add    esp,0x10
c0011c37:	c3                   	ret    

c0011c38 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011c38:	56                   	push   esi
c0011c39:	53                   	push   ebx
c0011c3a:	bb 01 00 00 00       	mov    ebx,0x1
c0011c3f:	52                   	push   edx
c0011c40:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011c44:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c48:	d3 e3                	shl    ebx,cl
c0011c4a:	83 f9 10             	cmp    ecx,0x10
c0011c4d:	7f 08                	jg     c0011c57 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011c4f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011c55:	75 10                	jne    c0011c67 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011c57:	83 ec 0c             	sub    esp,0xc
c0011c5a:	68 55 24 02 c0       	push   0xc0022455
c0011c5f:	e8 7b f9 ff ff       	call   c00115df <KePanic(char const*)>
c0011c64:	83 c4 10             	add    esp,0x10
c0011c67:	f7 d3                	not    ebx
c0011c69:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011c6f:	58                   	pop    eax
c0011c70:	5b                   	pop    ebx
c0011c71:	5e                   	pop    esi
c0011c72:	c3                   	ret    

c0011c73 <KiFinishSignalZ>:
c0011c73:	53                   	push   ebx
c0011c74:	83 ec 10             	sub    esp,0x10
c0011c77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c7b:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011c7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c83:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c86:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c8c:	e8 a7 ff ff ff       	call   c0011c38 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011c91:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011c97:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011c9e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011ca5:	83 c4 18             	add    esp,0x18
c0011ca8:	5b                   	pop    ebx
c0011ca9:	c3                   	ret    

c0011caa <SysSeekDir(regs*)>:
c0011caa:	31 c0                	xor    eax,eax
c0011cac:	31 d2                	xor    edx,edx
c0011cae:	c3                   	ret    

c0011caf <SysTellDir(regs*)>:
c0011caf:	31 c0                	xor    eax,eax
c0011cb1:	31 d2                	xor    edx,edx
c0011cb3:	c3                   	ret    

c0011cb4 <SysVerify(regs*)>:
c0011cb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cb8:	31 d2                	xor    edx,edx
c0011cba:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011cbd:	c3                   	ret    

c0011cbe <SysGetArgc(regs*)>:
c0011cbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cc3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cc6:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011ccc:	89 c2                	mov    edx,eax
c0011cce:	c1 fa 1f             	sar    edx,0x1f
c0011cd1:	c3                   	ret    

c0011cd2 <SysTTYName(regs*)>:
c0011cd2:	b8 01 00 00 00       	mov    eax,0x1
c0011cd7:	31 d2                	xor    edx,edx
c0011cd9:	c3                   	ret    

c0011cda <SysFormatDisk(regs*)>:
c0011cda:	56                   	push   esi
c0011cdb:	53                   	push   ebx
c0011cdc:	83 ec 04             	sub    esp,0x4
c0011cdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ce3:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011ce9:	eb 28                	jmp    c0011d13 <SysFormatDisk(regs*)+0x39>
c0011ceb:	83 ec 0c             	sub    esp,0xc
c0011cee:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011cf1:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011cf4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cf6:	51                   	push   ecx
c0011cf7:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011cfa:	51                   	push   ecx
c0011cfb:	50                   	push   eax
c0011cfc:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011d03:	50                   	push   eax
c0011d04:	53                   	push   ebx
c0011d05:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011d08:	83 c4 20             	add    esp,0x20
c0011d0b:	83 f8 08             	cmp    eax,0x8
c0011d0e:	75 14                	jne    c0011d24 <SysFormatDisk(regs*)+0x4a>
c0011d10:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011d13:	85 db                	test   ebx,ebx
c0011d15:	75 d4                	jne    c0011ceb <SysFormatDisk(regs*)+0x11>
c0011d17:	83 c4 04             	add    esp,0x4
c0011d1a:	b8 03 00 00 00       	mov    eax,0x3
c0011d1f:	31 d2                	xor    edx,edx
c0011d21:	5b                   	pop    ebx
c0011d22:	5e                   	pop    esi
c0011d23:	c3                   	ret    
c0011d24:	85 c0                	test   eax,eax
c0011d26:	74 1f                	je     c0011d47 <SysFormatDisk(regs*)+0x6d>
c0011d28:	83 f8 09             	cmp    eax,0x9
c0011d2b:	74 0d                	je     c0011d3a <SysFormatDisk(regs*)+0x60>
c0011d2d:	83 c4 04             	add    esp,0x4
c0011d30:	b8 02 00 00 00       	mov    eax,0x2
c0011d35:	31 d2                	xor    edx,edx
c0011d37:	5b                   	pop    ebx
c0011d38:	5e                   	pop    esi
c0011d39:	c3                   	ret    
c0011d3a:	83 c4 04             	add    esp,0x4
c0011d3d:	b8 01 00 00 00       	mov    eax,0x1
c0011d42:	31 d2                	xor    edx,edx
c0011d44:	5b                   	pop    ebx
c0011d45:	5e                   	pop    esi
c0011d46:	c3                   	ret    
c0011d47:	83 c4 04             	add    esp,0x4
c0011d4a:	31 c0                	xor    eax,eax
c0011d4c:	31 d2                	xor    edx,edx
c0011d4e:	5b                   	pop    ebx
c0011d4f:	5e                   	pop    esi
c0011d50:	c3                   	ret    

c0011d51 <SysSetDiskVolumeLabel(regs*)>:
c0011d51:	56                   	push   esi
c0011d52:	53                   	push   ebx
c0011d53:	83 ec 04             	sub    esp,0x4
c0011d56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d5a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d5d:	83 f8 19             	cmp    eax,0x19
c0011d60:	77 33                	ja     c0011d95 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d62:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011d69:	85 c9                	test   ecx,ecx
c0011d6b:	74 28                	je     c0011d95 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d6d:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011d70:	85 db                	test   ebx,ebx
c0011d72:	74 21                	je     c0011d95 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d74:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011d7a:	85 d2                	test   edx,edx
c0011d7c:	74 17                	je     c0011d95 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d7e:	8b 32                	mov    esi,DWORD PTR [edx]
c0011d80:	53                   	push   ebx
c0011d81:	50                   	push   eax
c0011d82:	51                   	push   ecx
c0011d83:	52                   	push   edx
c0011d84:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011d87:	83 c4 10             	add    esp,0x10
c0011d8a:	89 c2                	mov    edx,eax
c0011d8c:	83 c4 04             	add    esp,0x4
c0011d8f:	c1 fa 1f             	sar    edx,0x1f
c0011d92:	5b                   	pop    ebx
c0011d93:	5e                   	pop    esi
c0011d94:	c3                   	ret    
c0011d95:	83 c4 04             	add    esp,0x4
c0011d98:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011d9d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011da2:	5b                   	pop    ebx
c0011da3:	5e                   	pop    esi
c0011da4:	c3                   	ret    

c0011da5 <SysGetDiskVolumeLabel(regs*)>:
c0011da5:	57                   	push   edi
c0011da6:	56                   	push   esi
c0011da7:	53                   	push   ebx
c0011da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dac:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011daf:	83 fa 19             	cmp    edx,0x19
c0011db2:	77 3c                	ja     c0011df0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011db4:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011dbb:	85 c9                	test   ecx,ecx
c0011dbd:	74 31                	je     c0011df0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dbf:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011dc2:	85 db                	test   ebx,ebx
c0011dc4:	74 2a                	je     c0011df0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dc6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011dc9:	85 f6                	test   esi,esi
c0011dcb:	74 23                	je     c0011df0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dcd:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011dd3:	85 c0                	test   eax,eax
c0011dd5:	74 19                	je     c0011df0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dd7:	83 ec 0c             	sub    esp,0xc
c0011dda:	8b 38                	mov    edi,DWORD PTR [eax]
c0011ddc:	56                   	push   esi
c0011ddd:	53                   	push   ebx
c0011dde:	52                   	push   edx
c0011ddf:	51                   	push   ecx
c0011de0:	50                   	push   eax
c0011de1:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011de4:	83 c4 20             	add    esp,0x20
c0011de7:	89 c2                	mov    edx,eax
c0011de9:	5b                   	pop    ebx
c0011dea:	c1 fa 1f             	sar    edx,0x1f
c0011ded:	5e                   	pop    esi
c0011dee:	5f                   	pop    edi
c0011def:	c3                   	ret    
c0011df0:	5b                   	pop    ebx
c0011df1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011df6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dfb:	5e                   	pop    esi
c0011dfc:	5f                   	pop    edi
c0011dfd:	c3                   	ret    

c0011dfe <SysShutdown(regs*)>:
c0011dfe:	83 ec 0c             	sub    esp,0xc
c0011e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e05:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e08:	85 c0                	test   eax,eax
c0011e0a:	74 18                	je     c0011e24 <SysShutdown(regs*)+0x26>
c0011e0c:	83 f8 01             	cmp    eax,0x1
c0011e0f:	74 38                	je     c0011e49 <SysShutdown(regs*)+0x4b>
c0011e11:	83 f8 02             	cmp    eax,0x2
c0011e14:	74 24                	je     c0011e3a <SysShutdown(regs*)+0x3c>
c0011e16:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e20:	83 c4 0c             	add    esp,0xc
c0011e23:	c3                   	ret    
c0011e24:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e29:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e2b:	6a 00                	push   0x0
c0011e2d:	6a 00                	push   0x0
c0011e2f:	6a 00                	push   0x0
c0011e31:	50                   	push   eax
c0011e32:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e35:	83 c4 10             	add    esp,0x10
c0011e38:	eb dc                	jmp    c0011e16 <SysShutdown(regs*)+0x18>
c0011e3a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e41:	6a 00                	push   0x0
c0011e43:	6a 00                	push   0x0
c0011e45:	6a 01                	push   0x1
c0011e47:	eb e8                	jmp    c0011e31 <SysShutdown(regs*)+0x33>
c0011e49:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011e4e:	85 c0                	test   eax,eax
c0011e50:	74 02                	je     c0011e54 <SysShutdown(regs*)+0x56>
c0011e52:	ff d0                	call   eax
c0011e54:	31 c0                	xor    eax,eax
c0011e56:	31 d2                	xor    edx,edx
c0011e58:	83 c4 0c             	add    esp,0xc
c0011e5b:	c3                   	ret    

c0011e5c <SysRealpath(regs*)>:
c0011e5c:	83 ec 0c             	sub    esp,0xc
c0011e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e63:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011e66:	85 d2                	test   edx,edx
c0011e68:	74 07                	je     c0011e71 <SysRealpath(regs*)+0x15>
c0011e6a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011e6d:	85 c0                	test   eax,eax
c0011e6f:	75 0b                	jne    c0011e7c <SysRealpath(regs*)+0x20>
c0011e71:	b8 01 00 00 00       	mov    eax,0x1
c0011e76:	31 d2                	xor    edx,edx
c0011e78:	83 c4 0c             	add    esp,0xc
c0011e7b:	c3                   	ret    
c0011e7c:	6a 00                	push   0x0
c0011e7e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011e84:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011e87:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011e8d:	51                   	push   ecx
c0011e8e:	52                   	push   edx
c0011e8f:	50                   	push   eax
c0011e90:	e8 7f 99 ff ff       	call   c000b814 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011e95:	83 c4 10             	add    esp,0x10
c0011e98:	31 c0                	xor    eax,eax
c0011e9a:	31 d2                	xor    edx,edx
c0011e9c:	83 c4 0c             	add    esp,0xc
c0011e9f:	c3                   	ret    

c0011ea0 <SysReadDir(regs*)>:
c0011ea0:	53                   	push   ebx
c0011ea1:	83 ec 18             	sub    esp,0x18
c0011ea4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ea8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011eab:	83 f8 02             	cmp    eax,0x2
c0011eae:	76 61                	jbe    c0011f11 <SysReadDir(regs*)+0x71>
c0011eb0:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011eb7:	77 49                	ja     c0011f02 <SysReadDir(regs*)+0x62>
c0011eb9:	83 ec 0c             	sub    esp,0xc
c0011ebc:	50                   	push   eax
c0011ebd:	e8 f1 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011ec2:	83 c4 10             	add    esp,0x10
c0011ec5:	85 c0                	test   eax,eax
c0011ec7:	74 39                	je     c0011f02 <SysReadDir(regs*)+0x62>
c0011ec9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ed1:	83 ec 0c             	sub    esp,0xc
c0011ed4:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ed6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011eda:	51                   	push   ecx
c0011edb:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011ede:	51                   	push   ecx
c0011edf:	6a 00                	push   0x0
c0011ee1:	68 10 01 00 00       	push   0x110
c0011ee6:	50                   	push   eax
c0011ee7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011eea:	83 c4 20             	add    esp,0x20
c0011eed:	85 c0                	test   eax,eax
c0011eef:	74 29                	je     c0011f1a <SysReadDir(regs*)+0x7a>
c0011ef1:	83 f8 07             	cmp    eax,0x7
c0011ef4:	74 1b                	je     c0011f11 <SysReadDir(regs*)+0x71>
c0011ef6:	b8 02 00 00 00       	mov    eax,0x2
c0011efb:	31 d2                	xor    edx,edx
c0011efd:	83 c4 18             	add    esp,0x18
c0011f00:	5b                   	pop    ebx
c0011f01:	c3                   	ret    
c0011f02:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f07:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f0c:	83 c4 18             	add    esp,0x18
c0011f0f:	5b                   	pop    ebx
c0011f10:	c3                   	ret    
c0011f11:	b8 01 00 00 00       	mov    eax,0x1
c0011f16:	31 d2                	xor    edx,edx
c0011f18:	eb e3                	jmp    c0011efd <SysReadDir(regs*)+0x5d>
c0011f1a:	31 c0                	xor    eax,eax
c0011f1c:	31 d2                	xor    edx,edx
c0011f1e:	eb dd                	jmp    c0011efd <SysReadDir(regs*)+0x5d>

c0011f20 <SysIsATTY(regs*)>:
c0011f20:	83 ec 0c             	sub    esp,0xc
c0011f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f27:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f2a:	83 f8 02             	cmp    eax,0x2
c0011f2d:	76 07                	jbe    c0011f36 <SysIsATTY(regs*)+0x16>
c0011f2f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011f34:	75 26                	jne    c0011f5c <SysIsATTY(regs*)+0x3c>
c0011f36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011f44:	85 c0                	test   eax,eax
c0011f46:	74 24                	je     c0011f6c <SysIsATTY(regs*)+0x4c>
c0011f48:	83 ec 0c             	sub    esp,0xc
c0011f4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f4d:	50                   	push   eax
c0011f4e:	ff 12                	call   DWORD PTR [edx]
c0011f50:	31 d2                	xor    edx,edx
c0011f52:	0f b6 c0             	movzx  eax,al
c0011f55:	83 c4 10             	add    esp,0x10
c0011f58:	83 c4 0c             	add    esp,0xc
c0011f5b:	c3                   	ret    
c0011f5c:	83 ec 0c             	sub    esp,0xc
c0011f5f:	50                   	push   eax
c0011f60:	e8 4e 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f65:	83 c4 10             	add    esp,0x10
c0011f68:	85 c0                	test   eax,eax
c0011f6a:	75 dc                	jne    c0011f48 <SysIsATTY(regs*)+0x28>
c0011f6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f71:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f76:	83 c4 0c             	add    esp,0xc
c0011f79:	c3                   	ret    

c0011f7a <SysSeek(regs*)>:
c0011f7a:	53                   	push   ebx
c0011f7b:	83 ec 08             	sub    esp,0x8
c0011f7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f82:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f85:	8d 50 fd             	lea    edx,[eax-0x3]
c0011f88:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011f8e:	77 32                	ja     c0011fc2 <SysSeek(regs*)+0x48>
c0011f90:	83 ec 0c             	sub    esp,0xc
c0011f93:	50                   	push   eax
c0011f94:	e8 1a 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f99:	83 c4 0c             	add    esp,0xc
c0011f9c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011f9f:	31 db                	xor    ebx,ebx
c0011fa1:	53                   	push   ebx
c0011fa2:	51                   	push   ecx
c0011fa3:	50                   	push   eax
c0011fa4:	e8 3f 9c ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0011fa9:	83 c4 10             	add    esp,0x10
c0011fac:	85 c0                	test   eax,eax
c0011fae:	0f 95 c0             	setne  al
c0011fb1:	31 d2                	xor    edx,edx
c0011fb3:	0f b6 c0             	movzx  eax,al
c0011fb6:	f7 d8                	neg    eax
c0011fb8:	83 d2 00             	adc    edx,0x0
c0011fbb:	83 c4 08             	add    esp,0x8
c0011fbe:	f7 da                	neg    edx
c0011fc0:	5b                   	pop    ebx
c0011fc1:	c3                   	ret    
c0011fc2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fc7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fcc:	83 c4 08             	add    esp,0x8
c0011fcf:	5b                   	pop    ebx
c0011fd0:	c3                   	ret    

c0011fd1 <SysTell(regs*)>:
c0011fd1:	53                   	push   ebx
c0011fd2:	83 ec 08             	sub    esp,0x8
c0011fd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fd9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011fdc:	83 f8 02             	cmp    eax,0x2
c0011fdf:	76 4e                	jbe    c001202f <SysTell(regs*)+0x5e>
c0011fe1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011fe6:	76 19                	jbe    c0012001 <SysTell(regs*)+0x30>
c0011fe8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011feb:	31 d2                	xor    edx,edx
c0011fed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011ff3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ffa:	31 c0                	xor    eax,eax
c0011ffc:	83 c4 08             	add    esp,0x8
c0011fff:	5b                   	pop    ebx
c0012000:	c3                   	ret    
c0012001:	83 ec 0c             	sub    esp,0xc
c0012004:	50                   	push   eax
c0012005:	e8 a9 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001200a:	5a                   	pop    edx
c001200b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001200e:	59                   	pop    ecx
c001200f:	53                   	push   ebx
c0012010:	50                   	push   eax
c0012011:	e8 7e 9c ff ff       	call   c000bc94 <File::tell(unsigned long long*)>
c0012016:	83 c4 10             	add    esp,0x10
c0012019:	85 c0                	test   eax,eax
c001201b:	0f 95 c0             	setne  al
c001201e:	31 d2                	xor    edx,edx
c0012020:	0f b6 c0             	movzx  eax,al
c0012023:	f7 d8                	neg    eax
c0012025:	83 d2 00             	adc    edx,0x0
c0012028:	83 c4 08             	add    esp,0x8
c001202b:	f7 da                	neg    edx
c001202d:	5b                   	pop    ebx
c001202e:	c3                   	ret    
c001202f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012034:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012039:	83 c4 08             	add    esp,0x8
c001203c:	5b                   	pop    ebx
c001203d:	c3                   	ret    

c001203e <SysSize(regs*)>:
c001203e:	53                   	push   ebx
c001203f:	83 ec 18             	sub    esp,0x18
c0012042:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012046:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012049:	83 f8 02             	cmp    eax,0x2
c001204c:	76 54                	jbe    c00120a2 <SysSize(regs*)+0x64>
c001204e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012053:	76 19                	jbe    c001206e <SysSize(regs*)+0x30>
c0012055:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012058:	31 d2                	xor    edx,edx
c001205a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012060:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012067:	31 c0                	xor    eax,eax
c0012069:	83 c4 18             	add    esp,0x18
c001206c:	5b                   	pop    ebx
c001206d:	c3                   	ret    
c001206e:	83 ec 0c             	sub    esp,0xc
c0012071:	50                   	push   eax
c0012072:	e8 3c 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012077:	83 c4 0c             	add    esp,0xc
c001207a:	8d 54 24 13          	lea    edx,[esp+0x13]
c001207e:	52                   	push   edx
c001207f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012082:	52                   	push   edx
c0012083:	50                   	push   eax
c0012084:	e8 a3 9d ff ff       	call   c000be2c <File::stat(unsigned long long*, bool*)>
c0012089:	83 c4 10             	add    esp,0x10
c001208c:	85 c0                	test   eax,eax
c001208e:	0f 95 c0             	setne  al
c0012091:	31 d2                	xor    edx,edx
c0012093:	0f b6 c0             	movzx  eax,al
c0012096:	f7 d8                	neg    eax
c0012098:	83 d2 00             	adc    edx,0x0
c001209b:	83 c4 18             	add    esp,0x18
c001209e:	f7 da                	neg    edx
c00120a0:	5b                   	pop    ebx
c00120a1:	c3                   	ret    
c00120a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120ac:	83 c4 18             	add    esp,0x18
c00120af:	5b                   	pop    ebx
c00120b0:	c3                   	ret    

c00120b1 <SysSizeFromFilename(regs*)>:
c00120b1:	55                   	push   ebp
c00120b2:	57                   	push   edi
c00120b3:	56                   	push   esi
c00120b4:	53                   	push   ebx
c00120b5:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00120bb:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00120c2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00120c5:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00120c8:	85 f6                	test   esi,esi
c00120ca:	74 34                	je     c0012100 <SysSizeFromFilename(regs*)+0x4f>
c00120cc:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00120d2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120d5:	83 f8 02             	cmp    eax,0x2
c00120d8:	76 2d                	jbe    c0012107 <SysSizeFromFilename(regs*)+0x56>
c00120da:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00120df:	76 3b                	jbe    c001211c <SysSizeFromFilename(regs*)+0x6b>
c00120e1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120f1:	81 c4 5c 02 00 00    	add    esp,0x25c
c00120f7:	31 c0                	xor    eax,eax
c00120f9:	5b                   	pop    ebx
c00120fa:	31 d2                	xor    edx,edx
c00120fc:	5e                   	pop    esi
c00120fd:	5f                   	pop    edi
c00120fe:	5d                   	pop    ebp
c00120ff:	c3                   	ret    
c0012100:	89 f8                	mov    eax,edi
c0012102:	83 f8 02             	cmp    eax,0x2
c0012105:	77 d3                	ja     c00120da <SysSizeFromFilename(regs*)+0x29>
c0012107:	81 c4 5c 02 00 00    	add    esp,0x25c
c001210d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012112:	5b                   	pop    ebx
c0012113:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012118:	5e                   	pop    esi
c0012119:	5f                   	pop    edi
c001211a:	5d                   	pop    ebp
c001211b:	c3                   	ret    
c001211c:	83 ec 0c             	sub    esp,0xc
c001211f:	68 14 01 00 00       	push   0x114
c0012124:	e8 8d 59 ff ff       	call   c0007ab6 <malloc>
c0012129:	6a 01                	push   0x1
c001212b:	89 c5                	mov    ebp,eax
c001212d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012132:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012135:	51                   	push   ecx
c0012136:	57                   	push   edi
c0012137:	55                   	push   ebp
c0012138:	e8 f1 98 ff ff       	call   c000ba2e <File::File(char const*, Process*, bool)>
c001213d:	83 c4 1c             	add    esp,0x1c
c0012140:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012144:	50                   	push   eax
c0012145:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012148:	53                   	push   ebx
c0012149:	55                   	push   ebp
c001214a:	e8 dd 9c ff ff       	call   c000be2c <File::stat(unsigned long long*, bool*)>
c001214f:	83 c4 10             	add    esp,0x10
c0012152:	85 ed                	test   ebp,ebp
c0012154:	74 15                	je     c001216b <SysSizeFromFilename(regs*)+0xba>
c0012156:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001215a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001215d:	83 ec 0c             	sub    esp,0xc
c0012160:	55                   	push   ebp
c0012161:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012164:	83 c4 10             	add    esp,0x10
c0012167:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001216b:	85 c0                	test   eax,eax
c001216d:	75 98                	jne    c0012107 <SysSizeFromFilename(regs*)+0x56>
c001216f:	6a 00                	push   0x0
c0012171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012176:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012179:	05 0c 01 00 00       	add    eax,0x10c
c001217e:	50                   	push   eax
c001217f:	57                   	push   edi
c0012180:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0012187:	53                   	push   ebx
c0012188:	e8 87 96 ff ff       	call   c000b814 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001218d:	58                   	pop    eax
c001218e:	5a                   	pop    edx
c001218f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012193:	50                   	push   eax
c0012194:	53                   	push   ebx
c0012195:	e8 91 8f ff ff       	call   c000b12b <KeDereferenceSymlink(char const*, char*)>
c001219a:	83 c4 10             	add    esp,0x10
c001219d:	83 f8 01             	cmp    eax,0x1
c00121a0:	74 1a                	je     c00121bc <SysSizeFromFilename(regs*)+0x10b>
c00121a2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00121a7:	74 26                	je     c00121cf <SysSizeFromFilename(regs*)+0x11e>
c00121a9:	85 f6                	test   esi,esi
c00121ab:	0f 84 40 ff ff ff    	je     c00120f1 <SysSizeFromFilename(regs*)+0x40>
c00121b1:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00121b7:	e9 35 ff ff ff       	jmp    c00120f1 <SysSizeFromFilename(regs*)+0x40>
c00121bc:	85 f6                	test   esi,esi
c00121be:	0f 84 2d ff ff ff    	je     c00120f1 <SysSizeFromFilename(regs*)+0x40>
c00121c4:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00121ca:	e9 22 ff ff ff       	jmp    c00120f1 <SysSizeFromFilename(regs*)+0x40>
c00121cf:	85 f6                	test   esi,esi
c00121d1:	0f 84 1a ff ff ff    	je     c00120f1 <SysSizeFromFilename(regs*)+0x40>
c00121d7:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00121dd:	e9 0f ff ff ff       	jmp    c00120f1 <SysSizeFromFilename(regs*)+0x40>

c00121e2 <SysSizeFromFilenameNoSymlink(regs*)>:
c00121e2:	55                   	push   ebp
c00121e3:	57                   	push   edi
c00121e4:	56                   	push   esi
c00121e5:	53                   	push   ebx
c00121e6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00121ec:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00121f3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121f6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00121f9:	85 f6                	test   esi,esi
c00121fb:	74 34                	je     c0012231 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00121fd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012203:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012206:	83 f8 02             	cmp    eax,0x2
c0012209:	76 2d                	jbe    c0012238 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001220b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012210:	76 3b                	jbe    c001224d <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0012212:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012215:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001221b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012222:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012228:	31 c0                	xor    eax,eax
c001222a:	5b                   	pop    ebx
c001222b:	31 d2                	xor    edx,edx
c001222d:	5e                   	pop    esi
c001222e:	5f                   	pop    edi
c001222f:	5d                   	pop    ebp
c0012230:	c3                   	ret    
c0012231:	89 f8                	mov    eax,edi
c0012233:	83 f8 02             	cmp    eax,0x2
c0012236:	77 d3                	ja     c001220b <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0012238:	81 c4 5c 02 00 00    	add    esp,0x25c
c001223e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012243:	5b                   	pop    ebx
c0012244:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012249:	5e                   	pop    esi
c001224a:	5f                   	pop    edi
c001224b:	5d                   	pop    ebp
c001224c:	c3                   	ret    
c001224d:	83 ec 0c             	sub    esp,0xc
c0012250:	68 14 01 00 00       	push   0x114
c0012255:	e8 5c 58 ff ff       	call   c0007ab6 <malloc>
c001225a:	6a 00                	push   0x0
c001225c:	89 c5                	mov    ebp,eax
c001225e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012263:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012266:	51                   	push   ecx
c0012267:	57                   	push   edi
c0012268:	55                   	push   ebp
c0012269:	e8 c0 97 ff ff       	call   c000ba2e <File::File(char const*, Process*, bool)>
c001226e:	83 c4 1c             	add    esp,0x1c
c0012271:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012275:	50                   	push   eax
c0012276:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012279:	53                   	push   ebx
c001227a:	55                   	push   ebp
c001227b:	e8 ac 9b ff ff       	call   c000be2c <File::stat(unsigned long long*, bool*)>
c0012280:	83 c4 10             	add    esp,0x10
c0012283:	85 ed                	test   ebp,ebp
c0012285:	74 15                	je     c001229c <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c0012287:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001228b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001228e:	83 ec 0c             	sub    esp,0xc
c0012291:	55                   	push   ebp
c0012292:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012295:	83 c4 10             	add    esp,0x10
c0012298:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001229c:	85 c0                	test   eax,eax
c001229e:	75 98                	jne    c0012238 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00122a0:	6a 00                	push   0x0
c00122a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122aa:	05 0c 01 00 00       	add    eax,0x10c
c00122af:	50                   	push   eax
c00122b0:	57                   	push   edi
c00122b1:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00122b8:	53                   	push   ebx
c00122b9:	e8 56 95 ff ff       	call   c000b814 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00122be:	58                   	pop    eax
c00122bf:	5a                   	pop    edx
c00122c0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00122c4:	50                   	push   eax
c00122c5:	53                   	push   ebx
c00122c6:	e8 60 8e ff ff       	call   c000b12b <KeDereferenceSymlink(char const*, char*)>
c00122cb:	83 c4 10             	add    esp,0x10
c00122ce:	83 f8 01             	cmp    eax,0x1
c00122d1:	74 1a                	je     c00122ed <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c00122d3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00122d8:	74 26                	je     c0012300 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c00122da:	85 f6                	test   esi,esi
c00122dc:	0f 84 40 ff ff ff    	je     c0012222 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00122e2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00122e8:	e9 35 ff ff ff       	jmp    c0012222 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00122ed:	85 f6                	test   esi,esi
c00122ef:	0f 84 2d ff ff ff    	je     c0012222 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00122f5:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00122fb:	e9 22 ff ff ff       	jmp    c0012222 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012300:	85 f6                	test   esi,esi
c0012302:	0f 84 1a ff ff ff    	je     c0012222 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012308:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001230e:	e9 0f ff ff ff       	jmp    c0012222 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0012313 <SysClose(regs*)>:
c0012313:	53                   	push   ebx
c0012314:	83 ec 08             	sub    esp,0x8
c0012317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001231b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001231e:	83 f8 02             	cmp    eax,0x2
c0012321:	76 41                	jbe    c0012364 <SysClose(regs*)+0x51>
c0012323:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012329:	83 fa 01             	cmp    edx,0x1
c001232c:	76 2d                	jbe    c001235b <SysClose(regs*)+0x48>
c001232e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012333:	77 2f                	ja     c0012364 <SysClose(regs*)+0x51>
c0012335:	83 ec 0c             	sub    esp,0xc
c0012338:	50                   	push   eax
c0012339:	e8 75 71 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001233e:	89 c3                	mov    ebx,eax
c0012340:	89 04 24             	mov    DWORD PTR [esp],eax
c0012343:	e8 40 98 ff ff       	call   c000bb88 <File::close()>
c0012348:	83 c4 10             	add    esp,0x10
c001234b:	85 db                	test   ebx,ebx
c001234d:	74 0c                	je     c001235b <SysClose(regs*)+0x48>
c001234f:	83 ec 0c             	sub    esp,0xc
c0012352:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012354:	53                   	push   ebx
c0012355:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012358:	83 c4 10             	add    esp,0x10
c001235b:	31 c0                	xor    eax,eax
c001235d:	31 d2                	xor    edx,edx
c001235f:	83 c4 08             	add    esp,0x8
c0012362:	5b                   	pop    ebx
c0012363:	c3                   	ret    
c0012364:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012369:	ba ff ff ff ff       	mov    edx,0xffffffff
c001236e:	83 c4 08             	add    esp,0x8
c0012371:	5b                   	pop    ebx
c0012372:	c3                   	ret    

c0012373 <SysOpenDir(regs*)>:
c0012373:	56                   	push   esi
c0012374:	53                   	push   ebx
c0012375:	83 ec 04             	sub    esp,0x4
c0012378:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001237c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001237f:	85 c9                	test   ecx,ecx
c0012381:	74 5d                	je     c00123e0 <SysOpenDir(regs*)+0x6d>
c0012383:	83 ec 0c             	sub    esp,0xc
c0012386:	68 14 01 00 00       	push   0x114
c001238b:	e8 26 57 ff ff       	call   c0007ab6 <malloc>
c0012390:	83 c4 0c             	add    esp,0xc
c0012393:	89 c6                	mov    esi,eax
c0012395:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001239a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001239d:	50                   	push   eax
c001239e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123a1:	52                   	push   edx
c00123a2:	56                   	push   esi
c00123a3:	e8 44 9c ff ff       	call   c000bfec <Directory::Directory(char const*, Process*)>
c00123a8:	83 c4 10             	add    esp,0x10
c00123ab:	85 f6                	test   esi,esi
c00123ad:	74 31                	je     c00123e0 <SysOpenDir(regs*)+0x6d>
c00123af:	83 ec 0c             	sub    esp,0xc
c00123b2:	56                   	push   esi
c00123b3:	e8 fc 9c ff ff       	call   c000c0b4 <Directory::open()>
c00123b8:	83 c4 10             	add    esp,0x10
c00123bb:	85 c0                	test   eax,eax
c00123bd:	75 21                	jne    c00123e0 <SysOpenDir(regs*)+0x6d>
c00123bf:	83 ec 0c             	sub    esp,0xc
c00123c2:	56                   	push   esi
c00123c3:	e8 ee 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00123c8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00123cb:	83 c4 10             	add    esp,0x10
c00123ce:	89 02                	mov    DWORD PTR [edx],eax
c00123d0:	c1 f8 1f             	sar    eax,0x1f
c00123d3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00123d6:	83 c4 04             	add    esp,0x4
c00123d9:	31 c0                	xor    eax,eax
c00123db:	31 d2                	xor    edx,edx
c00123dd:	5b                   	pop    ebx
c00123de:	5e                   	pop    esi
c00123df:	c3                   	ret    
c00123e0:	83 c4 04             	add    esp,0x4
c00123e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123ed:	5b                   	pop    ebx
c00123ee:	5e                   	pop    esi
c00123ef:	c3                   	ret    

c00123f0 <SysMakeDir(regs*)>:
c00123f0:	56                   	push   esi
c00123f1:	53                   	push   ebx
c00123f2:	83 ec 10             	sub    esp,0x10
c00123f5:	68 14 01 00 00       	push   0x114
c00123fa:	e8 b7 56 ff ff       	call   c0007ab6 <malloc>
c00123ff:	83 c4 0c             	add    esp,0xc
c0012402:	89 c3                	mov    ebx,eax
c0012404:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012409:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001240c:	50                   	push   eax
c001240d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012411:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012414:	52                   	push   edx
c0012415:	53                   	push   ebx
c0012416:	e8 d1 9b ff ff       	call   c000bfec <Directory::Directory(char const*, Process*)>
c001241b:	83 c4 10             	add    esp,0x10
c001241e:	85 db                	test   ebx,ebx
c0012420:	74 2c                	je     c001244e <SysMakeDir(regs*)+0x5e>
c0012422:	83 ec 0c             	sub    esp,0xc
c0012425:	53                   	push   ebx
c0012426:	e8 69 9e ff ff       	call   c000c294 <Directory::create()>
c001242b:	89 c6                	mov    esi,eax
c001242d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001242f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012432:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012435:	83 c4 10             	add    esp,0x10
c0012438:	31 c0                	xor    eax,eax
c001243a:	85 f6                	test   esi,esi
c001243c:	0f 95 c0             	setne  al
c001243f:	31 d2                	xor    edx,edx
c0012441:	f7 d8                	neg    eax
c0012443:	83 d2 00             	adc    edx,0x0
c0012446:	83 c4 04             	add    esp,0x4
c0012449:	f7 da                	neg    edx
c001244b:	5b                   	pop    ebx
c001244c:	5e                   	pop    esi
c001244d:	c3                   	ret    
c001244e:	83 c4 04             	add    esp,0x4
c0012451:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012456:	ba ff ff ff ff       	mov    edx,0xffffffff
c001245b:	5b                   	pop    ebx
c001245c:	5e                   	pop    esi
c001245d:	c3                   	ret    

c001245e <SysCloseDir(regs*)>:
c001245e:	53                   	push   ebx
c001245f:	83 ec 08             	sub    esp,0x8
c0012462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012466:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012469:	8d 50 fd             	lea    edx,[eax-0x3]
c001246c:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012472:	77 2f                	ja     c00124a3 <SysCloseDir(regs*)+0x45>
c0012474:	83 ec 0c             	sub    esp,0xc
c0012477:	50                   	push   eax
c0012478:	e8 36 70 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001247d:	89 c3                	mov    ebx,eax
c001247f:	89 04 24             	mov    DWORD PTR [esp],eax
c0012482:	e8 89 9c ff ff       	call   c000c110 <Directory::close()>
c0012487:	83 c4 10             	add    esp,0x10
c001248a:	85 db                	test   ebx,ebx
c001248c:	74 0c                	je     c001249a <SysCloseDir(regs*)+0x3c>
c001248e:	83 ec 0c             	sub    esp,0xc
c0012491:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012493:	53                   	push   ebx
c0012494:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012497:	83 c4 10             	add    esp,0x10
c001249a:	31 c0                	xor    eax,eax
c001249c:	31 d2                	xor    edx,edx
c001249e:	83 c4 08             	add    esp,0x8
c00124a1:	5b                   	pop    ebx
c00124a2:	c3                   	ret    
c00124a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124ad:	83 c4 08             	add    esp,0x8
c00124b0:	5b                   	pop    ebx
c00124b1:	c3                   	ret    

c00124b2 <SysWait(regs*)>:
c00124b2:	83 ec 10             	sub    esp,0x10
c00124b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124b9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00124bc:	52                   	push   edx
c00124bd:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00124c0:	51                   	push   ecx
c00124c1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00124c4:	50                   	push   eax
c00124c5:	e8 02 3e 00 00       	call   c00162cc <waitTask(int, int*, int)>
c00124ca:	83 c4 1c             	add    esp,0x1c
c00124cd:	89 c2                	mov    edx,eax
c00124cf:	c1 fa 1f             	sar    edx,0x1f
c00124d2:	c3                   	ret    

c00124d3 <SysNotImpl(regs*)>:
c00124d3:	83 ec 18             	sub    esp,0x18
c00124d6:	68 66 24 02 c0       	push   0xc0022466
c00124db:	e8 ff f0 ff ff       	call   c00115df <KePanic(char const*)>
c00124e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124ea:	83 c4 1c             	add    esp,0x1c
c00124ed:	c3                   	ret    

c00124ee <SysPanic(regs*)>:
c00124ee:	83 ec 18             	sub    esp,0x18
c00124f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00124f5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00124f8:	50                   	push   eax
c00124f9:	e8 e1 f0 ff ff       	call   c00115df <KePanic(char const*)>
c00124fe:	b8 01 00 00 00       	mov    eax,0x1
c0012503:	31 d2                	xor    edx,edx
c0012505:	83 c4 1c             	add    esp,0x1c
c0012508:	c3                   	ret    

c0012509 <SysRmdir(regs*)>:
c0012509:	56                   	push   esi
c001250a:	53                   	push   ebx
c001250b:	83 ec 20             	sub    esp,0x20
c001250e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012512:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012515:	68 14 01 00 00       	push   0x114
c001251a:	e8 97 55 ff ff       	call   c0007ab6 <malloc>
c001251f:	6a 00                	push   0x0
c0012521:	89 c3                	mov    ebx,eax
c0012523:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012528:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001252b:	50                   	push   eax
c001252c:	56                   	push   esi
c001252d:	53                   	push   ebx
c001252e:	e8 fb 94 ff ff       	call   c000ba2e <File::File(char const*, Process*, bool)>
c0012533:	83 c4 14             	add    esp,0x14
c0012536:	53                   	push   ebx
c0012537:	e8 bc 97 ff ff       	call   c000bcf8 <File::unlink()>
c001253c:	83 c4 10             	add    esp,0x10
c001253f:	85 db                	test   ebx,ebx
c0012541:	74 14                	je     c0012557 <SysRmdir(regs*)+0x4e>
c0012543:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012547:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012549:	83 ec 0c             	sub    esp,0xc
c001254c:	53                   	push   ebx
c001254d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012550:	83 c4 10             	add    esp,0x10
c0012553:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012557:	85 c0                	test   eax,eax
c0012559:	0f 95 c0             	setne  al
c001255c:	31 d2                	xor    edx,edx
c001255e:	0f b6 c0             	movzx  eax,al
c0012561:	f7 d8                	neg    eax
c0012563:	83 d2 00             	adc    edx,0x0
c0012566:	83 c4 14             	add    esp,0x14
c0012569:	f7 da                	neg    edx
c001256b:	5b                   	pop    ebx
c001256c:	5e                   	pop    esi
c001256d:	c3                   	ret    

c001256e <SysUnlink(regs*)>:
c001256e:	56                   	push   esi
c001256f:	53                   	push   ebx
c0012570:	83 ec 20             	sub    esp,0x20
c0012573:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012577:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001257a:	68 14 01 00 00       	push   0x114
c001257f:	e8 32 55 ff ff       	call   c0007ab6 <malloc>
c0012584:	6a 00                	push   0x0
c0012586:	89 c3                	mov    ebx,eax
c0012588:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001258d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012590:	50                   	push   eax
c0012591:	56                   	push   esi
c0012592:	53                   	push   ebx
c0012593:	e8 96 94 ff ff       	call   c000ba2e <File::File(char const*, Process*, bool)>
c0012598:	83 c4 14             	add    esp,0x14
c001259b:	53                   	push   ebx
c001259c:	e8 57 97 ff ff       	call   c000bcf8 <File::unlink()>
c00125a1:	83 c4 10             	add    esp,0x10
c00125a4:	85 db                	test   ebx,ebx
c00125a6:	74 14                	je     c00125bc <SysUnlink(regs*)+0x4e>
c00125a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125ac:	8b 13                	mov    edx,DWORD PTR [ebx]
c00125ae:	83 ec 0c             	sub    esp,0xc
c00125b1:	53                   	push   ebx
c00125b2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00125b5:	83 c4 10             	add    esp,0x10
c00125b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125bc:	85 c0                	test   eax,eax
c00125be:	0f 95 c0             	setne  al
c00125c1:	31 d2                	xor    edx,edx
c00125c3:	0f b6 c0             	movzx  eax,al
c00125c6:	f7 d8                	neg    eax
c00125c8:	83 d2 00             	adc    edx,0x0
c00125cb:	83 c4 14             	add    esp,0x14
c00125ce:	f7 da                	neg    edx
c00125d0:	5b                   	pop    ebx
c00125d1:	5e                   	pop    esi
c00125d2:	c3                   	ret    

c00125d3 <SysGetArgv(regs*)>:
c00125d3:	83 ec 0c             	sub    esp,0xc
c00125d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00125da:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00125dd:	85 c0                	test   eax,eax
c00125df:	78 2c                	js     c001260d <SysGetArgv(regs*)+0x3a>
c00125e1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00125e7:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00125ea:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00125f0:	7d 1b                	jge    c001260d <SysGetArgv(regs*)+0x3a>
c00125f2:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00125f9:	85 c0                	test   eax,eax
c00125fb:	74 18                	je     c0012615 <SysGetArgv(regs*)+0x42>
c00125fd:	83 ec 08             	sub    esp,0x8
c0012600:	50                   	push   eax
c0012601:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012604:	50                   	push   eax
c0012605:	e8 36 e0 fe ff       	call   c0000640 <strcpy>
c001260a:	83 c4 10             	add    esp,0x10
c001260d:	31 c0                	xor    eax,eax
c001260f:	31 d2                	xor    edx,edx
c0012611:	83 c4 0c             	add    esp,0xc
c0012614:	c3                   	ret    
c0012615:	b8 01 00 00 00       	mov    eax,0x1
c001261a:	31 d2                	xor    edx,edx
c001261c:	83 c4 0c             	add    esp,0xc
c001261f:	c3                   	ret    

c0012620 <SysUSleep(regs*)>:
c0012620:	83 ec 1c             	sub    esp,0x1c
c0012623:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012627:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001262a:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001262d:	6a 00                	push   0x0
c001262f:	6a 64                	push   0x64
c0012631:	52                   	push   edx
c0012632:	50                   	push   eax
c0012633:	e8 b8 d0 00 00       	call   c001f6f0 <__udivdi3>
c0012638:	83 c4 14             	add    esp,0x14
c001263b:	50                   	push   eax
c001263c:	e8 6f 3d 00 00       	call   c00163b0 <milliTenthSleep(unsigned int)>
c0012641:	31 c0                	xor    eax,eax
c0012643:	31 d2                	xor    edx,edx
c0012645:	83 c4 1c             	add    esp,0x1c
c0012648:	c3                   	ret    

c0012649 <SysSpawn(regs*)>:
c0012649:	56                   	push   esi
c001264a:	53                   	push   ebx
c001264b:	83 ec 04             	sub    esp,0x4
c001264e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012652:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012655:	85 f6                	test   esi,esi
c0012657:	75 0a                	jne    c0012663 <SysSpawn(regs*)+0x1a>
c0012659:	83 c4 04             	add    esp,0x4
c001265c:	31 c0                	xor    eax,eax
c001265e:	31 d2                	xor    edx,edx
c0012660:	5b                   	pop    ebx
c0012661:	5e                   	pop    esi
c0012662:	c3                   	ret    
c0012663:	83 ec 0c             	sub    esp,0xc
c0012666:	68 24 07 00 00       	push   0x724
c001266b:	e8 46 54 ff ff       	call   c0007ab6 <malloc>
c0012670:	83 c4 10             	add    esp,0x10
c0012673:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012676:	89 c6                	mov    esi,eax
c0012678:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001267b:	85 c9                	test   ecx,ecx
c001267d:	75 39                	jne    c00126b8 <SysSpawn(regs*)+0x6f>
c001267f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012684:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012687:	52                   	push   edx
c0012688:	50                   	push   eax
c0012689:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001268c:	50                   	push   eax
c001268d:	56                   	push   esi
c001268e:	e8 6d 33 00 00       	call   c0015a00 <Process::Process(char const*, Process*, char**)>
c0012693:	83 c4 10             	add    esp,0x10
c0012696:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001269d:	75 ba                	jne    c0012659 <SysSpawn(regs*)+0x10>
c001269f:	83 ec 0c             	sub    esp,0xc
c00126a2:	56                   	push   esi
c00126a3:	e8 94 38 00 00       	call   c0015f3c <Process::createUserThread()>
c00126a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00126aa:	83 c4 10             	add    esp,0x10
c00126ad:	89 c2                	mov    edx,eax
c00126af:	83 c4 04             	add    esp,0x4
c00126b2:	c1 fa 1f             	sar    edx,0x1f
c00126b5:	5b                   	pop    ebx
c00126b6:	5e                   	pop    esi
c00126b7:	c3                   	ret    
c00126b8:	31 c0                	xor    eax,eax
c00126ba:	eb cb                	jmp    c0012687 <SysSpawn(regs*)+0x3e>

c00126bc <SysGetEnv(regs*)>:
c00126bc:	57                   	push   edi
c00126bd:	56                   	push   esi
c00126be:	53                   	push   ebx
c00126bf:	83 ec 1c             	sub    esp,0x1c
c00126c2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00126c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126cb:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00126ce:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00126d1:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00126d4:	51                   	push   ecx
c00126d5:	e8 bd ed ff ff       	call   c0011497 <KeGetProcessTotalEnvCount(Process*)>
c00126da:	83 c4 10             	add    esp,0x10
c00126dd:	39 c7                	cmp    edi,eax
c00126df:	7c 14                	jl     c00126f5 <SysGetEnv(regs*)+0x39>
c00126e1:	85 f6                	test   esi,esi
c00126e3:	75 0b                	jne    c00126f0 <SysGetEnv(regs*)+0x34>
c00126e5:	83 c4 10             	add    esp,0x10
c00126e8:	31 c0                	xor    eax,eax
c00126ea:	5b                   	pop    ebx
c00126eb:	31 d2                	xor    edx,edx
c00126ed:	5e                   	pop    esi
c00126ee:	5f                   	pop    edi
c00126ef:	c3                   	ret    
c00126f0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126f3:	eb f0                	jmp    c00126e5 <SysGetEnv(regs*)+0x29>
c00126f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00126f9:	83 ec 04             	sub    esp,0x4
c00126fc:	57                   	push   edi
c00126fd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012703:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012706:	57                   	push   edi
c0012707:	50                   	push   eax
c0012708:	e8 aa ed ff ff       	call   c00114b7 <KeGetProcessEnvPair(Process*, int)>
c001270d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012710:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012714:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012718:	83 c4 0c             	add    esp,0xc
c001271b:	85 d2                	test   edx,edx
c001271d:	75 23                	jne    c0012742 <SysGetEnv(regs*)+0x86>
c001271f:	83 ec 0c             	sub    esp,0xc
c0012722:	50                   	push   eax
c0012723:	e8 48 de fe ff       	call   c0000570 <strlen>
c0012728:	89 3c 24             	mov    DWORD PTR [esp],edi
c001272b:	89 c3                	mov    ebx,eax
c001272d:	e8 3e de fe ff       	call   c0000570 <strlen>
c0012732:	83 c4 10             	add    esp,0x10
c0012735:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012739:	83 c4 10             	add    esp,0x10
c001273c:	31 d2                	xor    edx,edx
c001273e:	5b                   	pop    ebx
c001273f:	5e                   	pop    esi
c0012740:	5f                   	pop    edi
c0012741:	c3                   	ret    
c0012742:	83 ec 08             	sub    esp,0x8
c0012745:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012748:	50                   	push   eax
c0012749:	56                   	push   esi
c001274a:	e8 f1 de fe ff       	call   c0000640 <strcpy>
c001274f:	58                   	pop    eax
c0012750:	5a                   	pop    edx
c0012751:	68 80 24 02 c0       	push   0xc0022480
c0012756:	56                   	push   esi
c0012757:	e8 e4 e0 fe ff       	call   c0000840 <strcat>
c001275c:	59                   	pop    ecx
c001275d:	5b                   	pop    ebx
c001275e:	57                   	push   edi
c001275f:	56                   	push   esi
c0012760:	e8 db e0 fe ff       	call   c0000840 <strcat>
c0012765:	83 c4 10             	add    esp,0x10
c0012768:	e9 78 ff ff ff       	jmp    c00126e5 <SysGetEnv(regs*)+0x29>

c001276d <SysSetFatAttrib(regs*)>:
c001276d:	57                   	push   edi
c001276e:	56                   	push   esi
c001276f:	53                   	push   ebx
c0012770:	83 ec 1c             	sub    esp,0x1c
c0012773:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012777:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001277a:	68 14 01 00 00       	push   0x114
c001277f:	e8 32 53 ff ff       	call   c0007ab6 <malloc>
c0012784:	83 c4 0c             	add    esp,0xc
c0012787:	89 c3                	mov    ebx,eax
c0012789:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001278e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012791:	50                   	push   eax
c0012792:	57                   	push   edi
c0012793:	53                   	push   ebx
c0012794:	e8 73 93 ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c0012799:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001279c:	83 c4 0c             	add    esp,0xc
c001279f:	0f b6 d4             	movzx  edx,ah
c00127a2:	0f b6 c0             	movzx  eax,al
c00127a5:	52                   	push   edx
c00127a6:	50                   	push   eax
c00127a7:	53                   	push   ebx
c00127a8:	e8 e5 95 ff ff       	call   c000bd92 <File::chfatattr(unsigned char, unsigned char)>
c00127ad:	83 c4 10             	add    esp,0x10
c00127b0:	85 db                	test   ebx,ebx
c00127b2:	74 14                	je     c00127c8 <SysSetFatAttrib(regs*)+0x5b>
c00127b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127b8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127ba:	83 ec 0c             	sub    esp,0xc
c00127bd:	53                   	push   ebx
c00127be:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00127c1:	83 c4 10             	add    esp,0x10
c00127c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00127c8:	85 c0                	test   eax,eax
c00127ca:	0f 95 c0             	setne  al
c00127cd:	31 d2                	xor    edx,edx
c00127cf:	0f b6 c0             	movzx  eax,al
c00127d2:	f7 d8                	neg    eax
c00127d4:	83 d2 00             	adc    edx,0x0
c00127d7:	83 c4 10             	add    esp,0x10
c00127da:	f7 da                	neg    edx
c00127dc:	5b                   	pop    ebx
c00127dd:	5e                   	pop    esi
c00127de:	5f                   	pop    edi
c00127df:	c3                   	ret    

c00127e0 <SysPipe(regs*)>:
c00127e0:	57                   	push   edi
c00127e1:	56                   	push   esi
c00127e2:	53                   	push   ebx
c00127e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127e7:	83 ec 0c             	sub    esp,0xc
c00127ea:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00127ed:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00127f0:	6a 20                	push   0x20
c00127f2:	e8 bf 52 ff ff       	call   c0007ab6 <malloc>
c00127f7:	89 c3                	mov    ebx,eax
c00127f9:	58                   	pop    eax
c00127fa:	5a                   	pop    edx
c00127fb:	68 00 50 00 00       	push   0x5000
c0012800:	53                   	push   ebx
c0012801:	e8 22 5c ff ff       	call   c0008428 <Pipe::Pipe(int)>
c0012806:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012809:	e8 a8 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001280e:	89 07                	mov    DWORD PTR [edi],eax
c0012810:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012813:	e8 9e 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012818:	83 c4 10             	add    esp,0x10
c001281b:	89 06                	mov    DWORD PTR [esi],eax
c001281d:	31 d2                	xor    edx,edx
c001281f:	5b                   	pop    ebx
c0012820:	31 c0                	xor    eax,eax
c0012822:	5e                   	pop    esi
c0012823:	5f                   	pop    edi
c0012824:	c3                   	ret    

c0012825 <SysGetUnixTime(regs*)>:
c0012825:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001282a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012830:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012834:	e9 a1 9c ff ff       	jmp    c000c4da <Clock::timeInSecondsLocal()>

c0012839 <string_ends_with(char const*, char const*)>:
c0012839:	57                   	push   edi
c001283a:	56                   	push   esi
c001283b:	53                   	push   ebx
c001283c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012840:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012844:	83 ec 0c             	sub    esp,0xc
c0012847:	53                   	push   ebx
c0012848:	e8 23 dd fe ff       	call   c0000570 <strlen>
c001284d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012850:	89 c6                	mov    esi,eax
c0012852:	e8 19 dd fe ff       	call   c0000570 <strlen>
c0012857:	83 c4 10             	add    esp,0x10
c001285a:	39 c6                	cmp    esi,eax
c001285c:	7d 06                	jge    c0012864 <string_ends_with(char const*, char const*)+0x2b>
c001285e:	5b                   	pop    ebx
c001285f:	31 c0                	xor    eax,eax
c0012861:	5e                   	pop    esi
c0012862:	5f                   	pop    edi
c0012863:	c3                   	ret    
c0012864:	83 ec 08             	sub    esp,0x8
c0012867:	29 c6                	sub    esi,eax
c0012869:	57                   	push   edi
c001286a:	01 f3                	add    ebx,esi
c001286c:	53                   	push   ebx
c001286d:	e8 de de fe ff       	call   c0000750 <strcmp>
c0012872:	83 c4 10             	add    esp,0x10
c0012875:	85 c0                	test   eax,eax
c0012877:	5b                   	pop    ebx
c0012878:	0f 94 c0             	sete   al
c001287b:	5e                   	pop    esi
c001287c:	0f b6 c0             	movzx  eax,al
c001287f:	5f                   	pop    edi
c0012880:	c3                   	ret    

c0012881 <SysOpen(regs*)>:
c0012881:	56                   	push   esi
c0012882:	53                   	push   ebx
c0012883:	81 ec 04 01 00 00    	sub    esp,0x104
c0012889:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012890:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012893:	85 c0                	test   eax,eax
c0012895:	0f 84 bc 01 00 00    	je     c0012a57 <SysOpen(regs*)+0x1d6>
c001289b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001289e:	85 c0                	test   eax,eax
c00128a0:	0f 84 b1 01 00 00    	je     c0012a57 <SysOpen(regs*)+0x1d6>
c00128a6:	6a 00                	push   0x0
c00128a8:	68 82 24 02 c0       	push   0xc0022482
c00128ad:	50                   	push   eax
c00128ae:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00128b2:	56                   	push   esi
c00128b3:	e8 5c 8f ff ff       	call   c000b814 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00128b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00128bb:	e8 b0 dc fe ff       	call   c0000570 <strlen>
c00128c0:	83 c4 10             	add    esp,0x10
c00128c3:	83 e8 01             	sub    eax,0x1
c00128c6:	74 21                	je     c00128e9 <SysOpen(regs*)+0x68>
c00128c8:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00128cc:	eb 12                	jmp    c00128e0 <SysOpen(regs*)+0x5f>
c00128ce:	83 fa 3a             	cmp    edx,0x3a
c00128d1:	74 12                	je     c00128e5 <SysOpen(regs*)+0x64>
c00128d3:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00128d7:	83 e8 01             	sub    eax,0x1
c00128da:	74 0d                	je     c00128e9 <SysOpen(regs*)+0x68>
c00128dc:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00128e0:	83 fa 2e             	cmp    edx,0x2e
c00128e3:	75 e9                	jne    c00128ce <SysOpen(regs*)+0x4d>
c00128e5:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00128e9:	83 ec 08             	sub    esp,0x8
c00128ec:	68 86 24 02 c0       	push   0xc0022486
c00128f1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128f4:	50                   	push   eax
c00128f5:	e8 3f ff ff ff       	call   c0012839 <string_ends_with(char const*, char const*)>
c00128fa:	83 c4 10             	add    esp,0x10
c00128fd:	85 c0                	test   eax,eax
c00128ff:	74 1d                	je     c001291e <SysOpen(regs*)+0x9d>
c0012901:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012904:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001290a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012911:	81 c4 04 01 00 00    	add    esp,0x104
c0012917:	31 c0                	xor    eax,eax
c0012919:	31 d2                	xor    edx,edx
c001291b:	5b                   	pop    ebx
c001291c:	5e                   	pop    esi
c001291d:	c3                   	ret    
c001291e:	83 ec 08             	sub    esp,0x8
c0012921:	68 8b 24 02 c0       	push   0xc002248b
c0012926:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012929:	50                   	push   eax
c001292a:	e8 0a ff ff ff       	call   c0012839 <string_ends_with(char const*, char const*)>
c001292f:	83 c4 10             	add    esp,0x10
c0012932:	85 c0                	test   eax,eax
c0012934:	75 cb                	jne    c0012901 <SysOpen(regs*)+0x80>
c0012936:	83 ec 08             	sub    esp,0x8
c0012939:	68 87 24 02 c0       	push   0xc0022487
c001293e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012941:	50                   	push   eax
c0012942:	e8 09 de fe ff       	call   c0000750 <strcmp>
c0012947:	83 c4 10             	add    esp,0x10
c001294a:	85 c0                	test   eax,eax
c001294c:	74 b3                	je     c0012901 <SysOpen(regs*)+0x80>
c001294e:	83 ec 08             	sub    esp,0x8
c0012951:	68 86 24 02 c0       	push   0xc0022486
c0012956:	56                   	push   esi
c0012957:	e8 dd fe ff ff       	call   c0012839 <string_ends_with(char const*, char const*)>
c001295c:	83 c4 10             	add    esp,0x10
c001295f:	85 c0                	test   eax,eax
c0012961:	75 9e                	jne    c0012901 <SysOpen(regs*)+0x80>
c0012963:	83 ec 08             	sub    esp,0x8
c0012966:	68 90 24 02 c0       	push   0xc0022490
c001296b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001296e:	50                   	push   eax
c001296f:	e8 c5 fe ff ff       	call   c0012839 <string_ends_with(char const*, char const*)>
c0012974:	83 c4 10             	add    esp,0x10
c0012977:	85 c0                	test   eax,eax
c0012979:	0f 85 eb 00 00 00    	jne    c0012a6a <SysOpen(regs*)+0x1e9>
c001297f:	83 ec 08             	sub    esp,0x8
c0012982:	68 95 24 02 c0       	push   0xc0022495
c0012987:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001298a:	50                   	push   eax
c001298b:	e8 a9 fe ff ff       	call   c0012839 <string_ends_with(char const*, char const*)>
c0012990:	83 c4 10             	add    esp,0x10
c0012993:	85 c0                	test   eax,eax
c0012995:	0f 85 cf 00 00 00    	jne    c0012a6a <SysOpen(regs*)+0x1e9>
c001299b:	83 ec 08             	sub    esp,0x8
c001299e:	68 91 24 02 c0       	push   0xc0022491
c00129a3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00129a6:	51                   	push   ecx
c00129a7:	e8 a4 dd fe ff       	call   c0000750 <strcmp>
c00129ac:	83 c4 10             	add    esp,0x10
c00129af:	85 c0                	test   eax,eax
c00129b1:	0f 84 b3 00 00 00    	je     c0012a6a <SysOpen(regs*)+0x1e9>
c00129b7:	83 ec 08             	sub    esp,0x8
c00129ba:	68 90 24 02 c0       	push   0xc0022490
c00129bf:	56                   	push   esi
c00129c0:	e8 74 fe ff ff       	call   c0012839 <string_ends_with(char const*, char const*)>
c00129c5:	83 c4 10             	add    esp,0x10
c00129c8:	85 c0                	test   eax,eax
c00129ca:	0f 85 9a 00 00 00    	jne    c0012a6a <SysOpen(regs*)+0x1e9>
c00129d0:	83 ec 0c             	sub    esp,0xc
c00129d3:	68 14 01 00 00       	push   0x114
c00129d8:	e8 d9 50 ff ff       	call   c0007ab6 <malloc>
c00129dd:	83 c4 0c             	add    esp,0xc
c00129e0:	89 c6                	mov    esi,eax
c00129e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00129ea:	50                   	push   eax
c00129eb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00129ee:	52                   	push   edx
c00129ef:	56                   	push   esi
c00129f0:	e8 17 91 ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c00129f5:	83 c4 10             	add    esp,0x10
c00129f8:	85 f6                	test   esi,esi
c00129fa:	74 5b                	je     c0012a57 <SysOpen(regs*)+0x1d6>
c00129fc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00129ff:	0f b6 c2             	movzx  eax,dl
c0012a02:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012a05:	89 d0                	mov    eax,edx
c0012a07:	83 e0 01             	and    eax,0x1
c0012a0a:	f6 c2 02             	test   dl,0x2
c0012a0d:	74 03                	je     c0012a12 <SysOpen(regs*)+0x191>
c0012a0f:	83 c8 02             	or     eax,0x2
c0012a12:	f6 c2 04             	test   dl,0x4
c0012a15:	74 03                	je     c0012a1a <SysOpen(regs*)+0x199>
c0012a17:	83 c8 04             	or     eax,0x4
c0012a1a:	f6 c2 08             	test   dl,0x8
c0012a1d:	74 03                	je     c0012a22 <SysOpen(regs*)+0x1a1>
c0012a1f:	83 c8 0a             	or     eax,0xa
c0012a22:	80 e2 10             	and    dl,0x10
c0012a25:	74 03                	je     c0012a2a <SysOpen(regs*)+0x1a9>
c0012a27:	83 c8 12             	or     eax,0x12
c0012a2a:	83 ec 08             	sub    esp,0x8
c0012a2d:	50                   	push   eax
c0012a2e:	56                   	push   esi
c0012a2f:	e8 f6 90 ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c0012a34:	83 c4 10             	add    esp,0x10
c0012a37:	85 c0                	test   eax,eax
c0012a39:	75 1c                	jne    c0012a57 <SysOpen(regs*)+0x1d6>
c0012a3b:	83 ec 0c             	sub    esp,0xc
c0012a3e:	56                   	push   esi
c0012a3f:	e8 72 67 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012a44:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012a47:	83 c4 10             	add    esp,0x10
c0012a4a:	89 02                	mov    DWORD PTR [edx],eax
c0012a4c:	c1 f8 1f             	sar    eax,0x1f
c0012a4f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012a52:	e9 ba fe ff ff       	jmp    c0012911 <SysOpen(regs*)+0x90>
c0012a57:	81 c4 04 01 00 00    	add    esp,0x104
c0012a5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a62:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012a67:	5b                   	pop    ebx
c0012a68:	5e                   	pop    esi
c0012a69:	c3                   	ret    
c0012a6a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a6d:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012a73:	e9 92 fe ff ff       	jmp    c001290a <SysOpen(regs*)+0x89>

c0012a78 <KeSystemCall(regs*, void*)>:
c0012a78:	53                   	push   ebx
c0012a79:	83 ec 08             	sub    esp,0x8
c0012a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a80:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012a83:	83 f8 3e             	cmp    eax,0x3e
c0012a86:	77 16                	ja     c0012a9e <KeSystemCall(regs*, void*)+0x26>
c0012a88:	8b 14 85 a0 3c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc360]
c0012a8f:	85 d2                	test   edx,edx
c0012a91:	74 0b                	je     c0012a9e <KeSystemCall(regs*, void*)+0x26>
c0012a93:	83 ec 0c             	sub    esp,0xc
c0012a96:	53                   	push   ebx
c0012a97:	ff d2                	call   edx
c0012a99:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012a9c:	eb 0d                	jmp    c0012aab <KeSystemCall(regs*, void*)+0x33>
c0012a9e:	52                   	push   edx
c0012a9f:	52                   	push   edx
c0012aa0:	50                   	push   eax
c0012aa1:	68 9a 24 02 c0       	push   0xc002249a
c0012aa6:	e8 9a 7e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012aab:	83 c4 10             	add    esp,0x10
c0012aae:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012ab3:	31 d2                	xor    edx,edx
c0012ab5:	83 c4 08             	add    esp,0x8
c0012ab8:	5b                   	pop    ebx
c0012ab9:	c3                   	ret    
c0012aba:	66 90                	xchg   ax,ax

c0012abc <KeSwitchEndian16(unsigned short)>:
c0012abc:	83 ec 04             	sub    esp,0x4
c0012abf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012ac3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012ac7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012acb:	c1 f8 08             	sar    eax,0x8
c0012ace:	89 c2                	mov    edx,eax
c0012ad0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012ad4:	c1 e0 08             	shl    eax,0x8
c0012ad7:	09 d0                	or     eax,edx
c0012ad9:	83 c4 04             	add    esp,0x4
c0012adc:	c3                   	ret    
c0012add:	8d 76 00             	lea    esi,[esi+0x0]

c0012ae0 <KeSwitchEndian32(unsigned int)>:
c0012ae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ae4:	c1 e8 18             	shr    eax,0x18
c0012ae7:	89 c2                	mov    edx,eax
c0012ae9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aed:	c1 e0 08             	shl    eax,0x8
c0012af0:	25 00 00 ff 00       	and    eax,0xff0000
c0012af5:	09 c2                	or     edx,eax
c0012af7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012afb:	c1 e8 08             	shr    eax,0x8
c0012afe:	25 00 ff 00 00       	and    eax,0xff00
c0012b03:	09 c2                	or     edx,eax
c0012b05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b09:	c1 e0 18             	shl    eax,0x18
c0012b0c:	09 d0                	or     eax,edx
c0012b0e:	c3                   	ret    
c0012b0f:	90                   	nop

c0012b10 <EthernetCRC32(unsigned char*, int)>:
c0012b10:	83 ec 10             	sub    esp,0x10
c0012b13:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012b18:	75 0a                	jne    c0012b24 <EthernetCRC32(unsigned char*, int)+0x14>
c0012b1a:	b8 00 00 00 00       	mov    eax,0x0
c0012b1f:	e9 8c 00 00 00       	jmp    c0012bb0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b24:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b29:	7f 09                	jg     c0012b34 <EthernetCRC32(unsigned char*, int)+0x24>
c0012b2b:	b8 00 00 00 00       	mov    eax,0x0
c0012b30:	eb 7e                	jmp    c0012bb0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b32:	66 90                	xchg   ax,ax
c0012b34:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012b3c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012b44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b48:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012b4c:	7d 5a                	jge    c0012ba8 <EthernetCRC32(unsigned char*, int)+0x98>
c0012b4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b56:	01 d0                	add    eax,edx
c0012b58:	8a 00                	mov    al,BYTE PTR [eax]
c0012b5a:	0f b6 c0             	movzx  eax,al
c0012b5d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012b61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b69:	8d 76 00             	lea    esi,[esi+0x0]
c0012b6c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012b71:	7f 2d                	jg     c0012ba0 <EthernetCRC32(unsigned char*, int)+0x90>
c0012b73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b77:	83 e0 01             	and    eax,0x1
c0012b7a:	74 10                	je     c0012b8c <EthernetCRC32(unsigned char*, int)+0x7c>
c0012b7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b80:	d1 e8                	shr    eax,1
c0012b82:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012b87:	eb 0b                	jmp    c0012b94 <EthernetCRC32(unsigned char*, int)+0x84>
c0012b89:	8d 76 00             	lea    esi,[esi+0x0]
c0012b8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b90:	d1 e8                	shr    eax,1
c0012b92:	66 90                	xchg   ax,ax
c0012b94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b98:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012b9d:	eb cd                	jmp    c0012b6c <EthernetCRC32(unsigned char*, int)+0x5c>
c0012b9f:	90                   	nop
c0012ba0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012ba5:	eb 9d                	jmp    c0012b44 <EthernetCRC32(unsigned char*, int)+0x34>
c0012ba7:	90                   	nop
c0012ba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bac:	f7 d0                	not    eax
c0012bae:	66 90                	xchg   ax,ax
c0012bb0:	83 c4 10             	add    esp,0x10
c0012bb3:	c3                   	ret    

c0012bb4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012bb4:	83 ec 2c             	sub    esp,0x2c
c0012bb7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bbb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012bc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bc4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012bc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012bcc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bcf:	0f b7 c0             	movzx  eax,ax
c0012bd2:	3d 06 08 00 00       	cmp    eax,0x806
c0012bd7:	75 13                	jne    c0012bec <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012bd9:	83 ec 0c             	sub    esp,0xc
c0012bdc:	68 ae 24 02 c0       	push   0xc00224ae
c0012be1:	e8 5f 7d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012be6:	83 c4 10             	add    esp,0x10
c0012be9:	eb 25                	jmp    c0012c10 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012beb:	90                   	nop
c0012bec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bf3:	0f b7 c0             	movzx  eax,ax
c0012bf6:	3d 00 08 00 00       	cmp    eax,0x800
c0012bfb:	75 13                	jne    c0012c10 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012bfd:	83 ec 0c             	sub    esp,0xc
c0012c00:	68 c4 24 02 c0       	push   0xc00224c4
c0012c05:	e8 3b 7d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012c0a:	83 c4 10             	add    esp,0x10
c0012c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c10:	90                   	nop
c0012c11:	83 c4 2c             	add    esp,0x2c
c0012c14:	c3                   	ret    

c0012c15 <CmOpen(char const*)>:
c0012c15:	57                   	push   edi
c0012c16:	56                   	push   esi
c0012c17:	53                   	push   ebx
c0012c18:	83 ec 1c             	sub    esp,0x1c
c0012c1b:	6a 30                	push   0x30
c0012c1d:	e8 94 4e ff ff       	call   c0007ab6 <malloc>
c0012c22:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c29:	89 c3                	mov    ebx,eax
c0012c2b:	e8 86 4e ff ff       	call   c0007ab6 <malloc>
c0012c30:	83 c4 0c             	add    esp,0xc
c0012c33:	89 c6                	mov    esi,eax
c0012c35:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012c3b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c3f:	50                   	push   eax
c0012c40:	e8 c7 8e ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c0012c45:	83 c4 0c             	add    esp,0xc
c0012c48:	89 33                	mov    DWORD PTR [ebx],esi
c0012c4a:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012c4e:	50                   	push   eax
c0012c4f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c53:	50                   	push   eax
c0012c54:	56                   	push   esi
c0012c55:	e8 d2 91 ff ff       	call   c000be2c <File::stat(unsigned long long*, bool*)>
c0012c5a:	5a                   	pop    edx
c0012c5b:	59                   	pop    ecx
c0012c5c:	6a 01                	push   0x1
c0012c5e:	ff 33                	push   DWORD PTR [ebx]
c0012c60:	e8 c5 8e ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c0012c65:	5e                   	pop    esi
c0012c66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c6a:	e8 47 4e ff ff       	call   c0007ab6 <malloc>
c0012c6f:	5a                   	pop    edx
c0012c70:	89 c7                	mov    edi,eax
c0012c72:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012c76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c78:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c7a:	56                   	push   esi
c0012c7b:	57                   	push   edi
c0012c7c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c80:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c84:	50                   	push   eax
c0012c85:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c88:	83 c4 14             	add    esp,0x14
c0012c8b:	ff 33                	push   DWORD PTR [ebx]
c0012c8d:	e8 f6 8e ff ff       	call   c000bb88 <File::close()>
c0012c92:	59                   	pop    ecx
c0012c93:	58                   	pop    eax
c0012c94:	6a 13                	push   0x13
c0012c96:	ff 33                	push   DWORD PTR [ebx]
c0012c98:	e8 8d 8e ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c0012c9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ca1:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ca4:	57                   	push   edi
c0012ca5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ca9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cad:	50                   	push   eax
c0012cae:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012cb1:	83 c4 14             	add    esp,0x14
c0012cb4:	57                   	push   edi
c0012cb5:	e8 0c 4e ff ff       	call   c0007ac6 <free>
c0012cba:	83 c4 10             	add    esp,0x10
c0012cbd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012cc0:	75 10                	jne    c0012cd2 <CmOpen(char const*)+0xbd>
c0012cc2:	83 ec 0c             	sub    esp,0xc
c0012cc5:	68 d9 24 02 c0       	push   0xc00224d9
c0012cca:	e8 10 e9 ff ff       	call   c00115df <KePanic(char const*)>
c0012ccf:	83 c4 10             	add    esp,0x10
c0012cd2:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012cd5:	50                   	push   eax
c0012cd6:	6a 00                	push   0x0
c0012cd8:	6a 00                	push   0x0
c0012cda:	ff 33                	push   DWORD PTR [ebx]
c0012cdc:	e8 07 8f ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0012ce1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ce3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ce5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ce8:	57                   	push   edi
c0012ce9:	6a 00                	push   0x0
c0012ceb:	6a 2b                	push   0x2b
c0012ced:	50                   	push   eax
c0012cee:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012cf1:	83 c4 1c             	add    esp,0x1c
c0012cf4:	6a 00                	push   0x0
c0012cf6:	6a 00                	push   0x0
c0012cf8:	ff 33                	push   DWORD PTR [ebx]
c0012cfa:	e8 e9 8e ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0012cff:	83 c4 0c             	add    esp,0xc
c0012d02:	6a 08                	push   0x8
c0012d04:	68 ea 24 02 c0       	push   0xc00224ea
c0012d09:	57                   	push   edi
c0012d0a:	e8 71 d6 fe ff       	call   c0000380 <memcmp>
c0012d0f:	83 c4 10             	add    esp,0x10
c0012d12:	85 c0                	test   eax,eax
c0012d14:	74 10                	je     c0012d26 <CmOpen(char const*)+0x111>
c0012d16:	83 ec 0c             	sub    esp,0xc
c0012d19:	68 f3 24 02 c0       	push   0xc00224f3
c0012d1e:	e8 bc e8 ff ff       	call   c00115df <KePanic(char const*)>
c0012d23:	83 c4 10             	add    esp,0x10
c0012d26:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012d2a:	89 d8                	mov    eax,ebx
c0012d2c:	83 c4 10             	add    esp,0x10
c0012d2f:	5b                   	pop    ebx
c0012d30:	5e                   	pop    esi
c0012d31:	5f                   	pop    edi
c0012d32:	c3                   	ret    

c0012d33 <CmClose(Reghive_Tag*)>:
c0012d33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d37:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012d3b:	74 0b                	je     c0012d48 <CmClose(Reghive_Tag*)+0x15>
c0012d3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d43:	e9 40 8e ff ff       	jmp    c000bb88 <File::close()>
c0012d48:	c3                   	ret    

c0012d49 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012d49:	53                   	push   ebx
c0012d4a:	83 ec 18             	sub    esp,0x18
c0012d4d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d51:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012d55:	74 29                	je     c0012d80 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012d57:	50                   	push   eax
c0012d58:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012d5d:	99                   	cdq    
c0012d5e:	52                   	push   edx
c0012d5f:	50                   	push   eax
c0012d60:	ff 33                	push   DWORD PTR [ebx]
c0012d62:	e8 81 8e ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0012d67:	5a                   	pop    edx
c0012d68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d6a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012d6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d70:	51                   	push   ecx
c0012d71:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012d75:	6a 00                	push   0x0
c0012d77:	6a 2b                	push   0x2b
c0012d79:	50                   	push   eax
c0012d7a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d7d:	83 c4 20             	add    esp,0x20
c0012d80:	83 c4 18             	add    esp,0x18
c0012d83:	5b                   	pop    ebx
c0012d84:	c3                   	ret    

c0012d85 <CmGetString(Reghive_Tag*, int, char*)>:
c0012d85:	55                   	push   ebp
c0012d86:	57                   	push   edi
c0012d87:	56                   	push   esi
c0012d88:	53                   	push   ebx
c0012d89:	31 db                	xor    ebx,ebx
c0012d8b:	83 ec 70             	sub    esp,0x70
c0012d8e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012d95:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012d99:	50                   	push   eax
c0012d9a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012da1:	55                   	push   ebp
c0012da2:	e8 a2 ff ff ff       	call   c0012d49 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012da7:	83 c4 10             	add    esp,0x10
c0012daa:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012daf:	c1 e0 08             	shl    eax,0x8
c0012db2:	89 c2                	mov    edx,eax
c0012db4:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012db9:	09 d0                	or     eax,edx
c0012dbb:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012dc0:	c1 e0 08             	shl    eax,0x8
c0012dc3:	09 d0                	or     eax,edx
c0012dc5:	74 25                	je     c0012dec <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012dc7:	6b fb 0d             	imul   edi,ebx,0xd
c0012dca:	52                   	push   edx
c0012dcb:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012dcf:	52                   	push   edx
c0012dd0:	50                   	push   eax
c0012dd1:	55                   	push   ebp
c0012dd2:	e8 72 ff ff ff       	call   c0012d49 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012dd7:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012ddb:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012de2:	b9 27 00 00 00       	mov    ecx,0x27
c0012de7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012de9:	83 c4 10             	add    esp,0x10
c0012dec:	83 c3 03             	add    ebx,0x3
c0012def:	83 fb 15             	cmp    ebx,0x15
c0012df2:	75 b6                	jne    c0012daa <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012df4:	83 c4 6c             	add    esp,0x6c
c0012df7:	5b                   	pop    ebx
c0012df8:	5e                   	pop    esi
c0012df9:	5f                   	pop    edi
c0012dfa:	5d                   	pop    ebp
c0012dfb:	c3                   	ret    

c0012dfc <CmEnterDirectory(Reghive_Tag*, int)>:
c0012dfc:	83 ec 40             	sub    esp,0x40
c0012dff:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e03:	50                   	push   eax
c0012e04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e0c:	e8 38 ff ff ff       	call   c0012d49 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e11:	83 c4 10             	add    esp,0x10
c0012e14:	83 c8 ff             	or     eax,0xffffffff
c0012e17:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012e1c:	75 19                	jne    c0012e37 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012e1e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012e23:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012e28:	c1 e0 08             	shl    eax,0x8
c0012e2b:	09 c2                	or     edx,eax
c0012e2d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012e32:	c1 e0 10             	shl    eax,0x10
c0012e35:	09 d0                	or     eax,edx
c0012e37:	83 c4 3c             	add    esp,0x3c
c0012e3a:	c3                   	ret    

c0012e3b <CmGetNext(Reghive_Tag*, int)>:
c0012e3b:	83 ec 40             	sub    esp,0x40
c0012e3e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e42:	50                   	push   eax
c0012e43:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e47:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e4b:	e8 f9 fe ff ff       	call   c0012d49 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e50:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012e55:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012e5a:	c1 e0 08             	shl    eax,0x8
c0012e5d:	09 c2                	or     edx,eax
c0012e5f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012e64:	83 c4 4c             	add    esp,0x4c
c0012e67:	c1 e0 10             	shl    eax,0x10
c0012e6a:	09 d0                	or     eax,edx
c0012e6c:	c3                   	ret    

c0012e6d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012e6d:	53                   	push   ebx
c0012e6e:	83 ec 18             	sub    esp,0x18
c0012e71:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e75:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e79:	74 29                	je     c0012ea4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012e7b:	50                   	push   eax
c0012e7c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012e81:	99                   	cdq    
c0012e82:	52                   	push   edx
c0012e83:	50                   	push   eax
c0012e84:	ff 33                	push   DWORD PTR [ebx]
c0012e86:	e8 5d 8d ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0012e8b:	5a                   	pop    edx
c0012e8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e8e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012e92:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e94:	51                   	push   ecx
c0012e95:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e99:	6a 00                	push   0x0
c0012e9b:	6a 2b                	push   0x2b
c0012e9d:	50                   	push   eax
c0012e9e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ea1:	83 c4 20             	add    esp,0x20
c0012ea4:	83 c4 18             	add    esp,0x18
c0012ea7:	5b                   	pop    ebx
c0012ea8:	c3                   	ret    

c0012ea9 <CmFreeExtent(Reghive_Tag*, int)>:
c0012ea9:	53                   	push   ebx
c0012eaa:	83 ec 3c             	sub    esp,0x3c
c0012ead:	6a 2b                	push   0x2b
c0012eaf:	6a 00                	push   0x0
c0012eb1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012eb5:	53                   	push   ebx
c0012eb6:	e8 35 d6 fe ff       	call   c00004f0 <memset>
c0012ebb:	83 c4 0c             	add    esp,0xc
c0012ebe:	53                   	push   ebx
c0012ebf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ec3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ec7:	e8 a1 ff ff ff       	call   c0012e6d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ecc:	83 c4 48             	add    esp,0x48
c0012ecf:	5b                   	pop    ebx
c0012ed0:	c3                   	ret    

c0012ed1 <CmUpdateHeader(Reghive_Tag*)>:
c0012ed1:	83 ec 0c             	sub    esp,0xc
c0012ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ed8:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012edc:	74 10                	je     c0012eee <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012ede:	52                   	push   edx
c0012edf:	8d 50 05             	lea    edx,[eax+0x5]
c0012ee2:	52                   	push   edx
c0012ee3:	6a 00                	push   0x0
c0012ee5:	50                   	push   eax
c0012ee6:	e8 82 ff ff ff       	call   c0012e6d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012eeb:	83 c4 10             	add    esp,0x10
c0012eee:	83 c4 0c             	add    esp,0xc
c0012ef1:	c3                   	ret    

c0012ef2 <CmExpand(Reghive_Tag*, int)>:
c0012ef2:	57                   	push   edi
c0012ef3:	56                   	push   esi
c0012ef4:	83 ce ff             	or     esi,0xffffffff
c0012ef7:	53                   	push   ebx
c0012ef8:	83 ec 30             	sub    esp,0x30
c0012efb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012eff:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f03:	74 5f                	je     c0012f64 <CmExpand(Reghive_Tag*, int)+0x72>
c0012f05:	31 d2                	xor    edx,edx
c0012f07:	31 f6                	xor    esi,esi
c0012f09:	50                   	push   eax
c0012f0a:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012f0e:	52                   	push   edx
c0012f0f:	50                   	push   eax
c0012f10:	ff 33                	push   DWORD PTR [ebx]
c0012f12:	e8 d1 8c ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0012f17:	83 c4 0c             	add    esp,0xc
c0012f1a:	6a 2b                	push   0x2b
c0012f1c:	6a 00                	push   0x0
c0012f1e:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012f22:	57                   	push   edi
c0012f23:	e8 c8 d5 fe ff       	call   c00004f0 <memset>
c0012f28:	83 c4 10             	add    esp,0x10
c0012f2b:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012f2f:	7d 1b                	jge    c0012f4c <CmExpand(Reghive_Tag*, int)+0x5a>
c0012f31:	83 ec 0c             	sub    esp,0xc
c0012f34:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f36:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012f3a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f3c:	46                   	inc    esi
c0012f3d:	51                   	push   ecx
c0012f3e:	57                   	push   edi
c0012f3f:	6a 00                	push   0x0
c0012f41:	6a 2b                	push   0x2b
c0012f43:	50                   	push   eax
c0012f44:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f47:	83 c4 20             	add    esp,0x20
c0012f4a:	eb df                	jmp    c0012f2b <CmExpand(Reghive_Tag*, int)+0x39>
c0012f4c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012f50:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012f53:	83 ec 0c             	sub    esp,0xc
c0012f56:	01 f2                	add    edx,esi
c0012f58:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012f5b:	53                   	push   ebx
c0012f5c:	e8 70 ff ff ff       	call   c0012ed1 <CmUpdateHeader(Reghive_Tag*)>
c0012f61:	83 c4 10             	add    esp,0x10
c0012f64:	83 c4 30             	add    esp,0x30
c0012f67:	89 f0                	mov    eax,esi
c0012f69:	5b                   	pop    ebx
c0012f6a:	5e                   	pop    esi
c0012f6b:	5f                   	pop    edi
c0012f6c:	c3                   	ret    

c0012f6d <CmFindUnusedExtent(Reghive_Tag*)>:
c0012f6d:	55                   	push   ebp
c0012f6e:	57                   	push   edi
c0012f6f:	56                   	push   esi
c0012f70:	53                   	push   ebx
c0012f71:	83 cb ff             	or     ebx,0xffffffff
c0012f74:	83 ec 1c             	sub    esp,0x1c
c0012f77:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012f7b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012f7f:	74 68                	je     c0012fe9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012f81:	be 2b 00 00 00       	mov    esi,0x2b
c0012f86:	51                   	push   ecx
c0012f87:	31 ff                	xor    edi,edi
c0012f89:	6a 00                	push   0x0
c0012f8b:	31 db                	xor    ebx,ebx
c0012f8d:	6a 00                	push   0x0
c0012f8f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012f92:	e8 51 8c ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0012f97:	83 c4 10             	add    esp,0x10
c0012f9a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012f9d:	76 3b                	jbe    c0012fda <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012f9f:	83 ec 0c             	sub    esp,0xc
c0012fa2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fa5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012fa9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fab:	51                   	push   ecx
c0012fac:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012fb0:	51                   	push   ecx
c0012fb1:	6a 00                	push   0x0
c0012fb3:	6a 01                	push   0x1
c0012fb5:	50                   	push   eax
c0012fb6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012fb9:	83 c4 20             	add    esp,0x20
c0012fbc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012fc1:	74 26                	je     c0012fe9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012fc3:	43                   	inc    ebx
c0012fc4:	52                   	push   edx
c0012fc5:	57                   	push   edi
c0012fc6:	56                   	push   esi
c0012fc7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012fca:	e8 19 8c ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0012fcf:	83 c6 2b             	add    esi,0x2b
c0012fd2:	83 d7 00             	adc    edi,0x0
c0012fd5:	83 c4 10             	add    esp,0x10
c0012fd8:	eb c0                	jmp    c0012f9a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012fda:	50                   	push   eax
c0012fdb:	50                   	push   eax
c0012fdc:	6a 40                	push   0x40
c0012fde:	55                   	push   ebp
c0012fdf:	e8 0e ff ff ff       	call   c0012ef2 <CmExpand(Reghive_Tag*, int)>
c0012fe4:	83 c4 10             	add    esp,0x10
c0012fe7:	89 c3                	mov    ebx,eax
c0012fe9:	83 c4 1c             	add    esp,0x1c
c0012fec:	89 d8                	mov    eax,ebx
c0012fee:	5b                   	pop    ebx
c0012fef:	5e                   	pop    esi
c0012ff0:	5f                   	pop    edi
c0012ff1:	5d                   	pop    ebp
c0012ff2:	c3                   	ret    

c0012ff3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012ff3:	55                   	push   ebp
c0012ff4:	57                   	push   edi
c0012ff5:	56                   	push   esi
c0012ff6:	53                   	push   ebx
c0012ff7:	81 ec 88 00 00 00    	sub    esp,0x88
c0012ffd:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0013004:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001300b:	e8 5d ff ff ff       	call   c0012f6d <CmFindUnusedExtent(Reghive_Tag*)>
c0013010:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013014:	83 c4 0c             	add    esp,0xc
c0013017:	6a 2b                	push   0x2b
c0013019:	6a 00                	push   0x0
c001301b:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001301f:	55                   	push   ebp
c0013020:	e8 cb d4 fe ff       	call   c00004f0 <memset>
c0013025:	83 c4 10             	add    esp,0x10
c0013028:	85 db                	test   ebx,ebx
c001302a:	74 12                	je     c001303e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c001302c:	51                   	push   ecx
c001302d:	55                   	push   ebp
c001302e:	53                   	push   ebx
c001302f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013036:	e8 0e fd ff ff       	call   c0012d49 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001303b:	83 c4 10             	add    esp,0x10
c001303e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0013042:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013049:	b9 2b 00 00 00       	mov    ecx,0x2b
c001304e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013050:	85 db                	test   ebx,ebx
c0013052:	74 49                	je     c001309d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0013054:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0013059:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c001305e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013062:	c1 e0 08             	shl    eax,0x8
c0013065:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001306b:	09 c8                	or     eax,ecx
c001306d:	74 11                	je     c0013080 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c001306f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0013073:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0013077:	c1 e8 10             	shr    eax,0x10
c001307a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001307e:	eb 0f                	jmp    c001308f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0013080:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013085:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001308a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001308f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0013093:	c1 ea 08             	shr    edx,0x8
c0013096:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001309b:	eb 0f                	jmp    c00130ac <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c001309d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130a2:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130a7:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130ac:	52                   	push   edx
c00130ad:	8d 44 24 49          	lea    eax,[esp+0x49]
c00130b1:	50                   	push   eax
c00130b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00130b6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130bd:	e8 ab fd ff ff       	call   c0012e6d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00130c2:	83 c4 10             	add    esp,0x10
c00130c5:	85 db                	test   ebx,ebx
c00130c7:	74 12                	je     c00130db <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00130c9:	50                   	push   eax
c00130ca:	55                   	push   ebp
c00130cb:	53                   	push   ebx
c00130cc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130d3:	e8 95 fd ff ff       	call   c0012e6d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00130d8:	83 c4 10             	add    esp,0x10
c00130db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00130df:	83 c4 7c             	add    esp,0x7c
c00130e2:	5b                   	pop    ebx
c00130e3:	5e                   	pop    esi
c00130e4:	5f                   	pop    edi
c00130e5:	5d                   	pop    ebp
c00130e6:	c3                   	ret    

c00130e7 <CmSetString(Reghive_Tag*, int, char const*)>:
c00130e7:	55                   	push   ebp
c00130e8:	57                   	push   edi
c00130e9:	56                   	push   esi
c00130ea:	53                   	push   ebx
c00130eb:	bb 27 00 00 00       	mov    ebx,0x27
c00130f0:	81 ec 88 00 00 00    	sub    esp,0x88
c00130f6:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00130fd:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0013104:	e8 67 d4 fe ff       	call   c0000570 <strlen>
c0013109:	8d 48 26             	lea    ecx,[eax+0x26]
c001310c:	89 c8                	mov    eax,ecx
c001310e:	99                   	cdq    
c001310f:	f7 fb                	idiv   ebx
c0013111:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013115:	83 c4 10             	add    esp,0x10
c0013118:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001311e:	7e 10                	jle    c0013130 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013120:	83 ec 0c             	sub    esp,0xc
c0013123:	68 04 25 02 c0       	push   0xc0022504
c0013128:	e8 b2 e4 ff ff       	call   c00115df <KePanic(char const*)>
c001312d:	83 c4 10             	add    esp,0x10
c0013130:	31 ff                	xor    edi,edi
c0013132:	50                   	push   eax
c0013133:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0013137:	53                   	push   ebx
c0013138:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001313f:	56                   	push   esi
c0013140:	e8 04 fc ff ff       	call   c0012d49 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013145:	83 c4 10             	add    esp,0x10
c0013148:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c001314c:	89 d0                	mov    eax,edx
c001314e:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0013152:	c1 e0 08             	shl    eax,0x8
c0013155:	09 c2                	or     edx,eax
c0013157:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001315b:	c1 e2 08             	shl    edx,0x8
c001315e:	09 c2                	or     edx,eax
c0013160:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0013164:	7e 76                	jle    c00131dc <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0013166:	85 d2                	test   edx,edx
c0013168:	75 25                	jne    c001318f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001316a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001316f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0013173:	50                   	push   eax
c0013174:	6a 00                	push   0x0
c0013176:	6a 00                	push   0x0
c0013178:	56                   	push   esi
c0013179:	e8 75 fe ff ff       	call   c0012ff3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001317e:	83 c4 10             	add    esp,0x10
c0013181:	89 c2                	mov    edx,eax
c0013183:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0013186:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0013189:	c1 f8 10             	sar    eax,0x10
c001318c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001318f:	55                   	push   ebp
c0013190:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0013194:	55                   	push   ebp
c0013195:	52                   	push   edx
c0013196:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001319a:	56                   	push   esi
c001319b:	e8 a9 fb ff ff       	call   c0012d49 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131a0:	83 c4 0c             	add    esp,0xc
c00131a3:	6a 27                	push   0x27
c00131a5:	6a 00                	push   0x0
c00131a7:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131ab:	51                   	push   ecx
c00131ac:	e8 3f d3 fe ff       	call   c00004f0 <memset>
c00131b1:	83 c4 0c             	add    esp,0xc
c00131b4:	6b c7 27             	imul   eax,edi,0x27
c00131b7:	6a 27                	push   0x27
c00131b9:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00131c0:	50                   	push   eax
c00131c1:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131c5:	51                   	push   ecx
c00131c6:	e8 b5 d4 fe ff       	call   c0000680 <strncpy>
c00131cb:	83 c4 0c             	add    esp,0xc
c00131ce:	55                   	push   ebp
c00131cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00131d3:	52                   	push   edx
c00131d4:	56                   	push   esi
c00131d5:	e8 93 fc ff ff       	call   c0012e6d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131da:	eb 19                	jmp    c00131f5 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c00131dc:	85 d2                	test   edx,edx
c00131de:	74 18                	je     c00131f8 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00131e0:	51                   	push   ecx
c00131e1:	51                   	push   ecx
c00131e2:	52                   	push   edx
c00131e3:	56                   	push   esi
c00131e4:	e8 c0 fc ff ff       	call   c0012ea9 <CmFreeExtent(Reghive_Tag*, int)>
c00131e9:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00131ed:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00131f1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00131f5:	83 c4 10             	add    esp,0x10
c00131f8:	47                   	inc    edi
c00131f9:	83 c3 03             	add    ebx,0x3
c00131fc:	83 ff 07             	cmp    edi,0x7
c00131ff:	0f 85 43 ff ff ff    	jne    c0013148 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0013205:	50                   	push   eax
c0013206:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001320a:	50                   	push   eax
c001320b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013212:	56                   	push   esi
c0013213:	e8 55 fc ff ff       	call   c0012e6d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013218:	81 c4 8c 00 00 00    	add    esp,0x8c
c001321e:	5b                   	pop    ebx
c001321f:	5e                   	pop    esi
c0013220:	5f                   	pop    edi
c0013221:	5d                   	pop    ebp
c0013222:	c3                   	ret    

c0013223 <CmGetMatch(char*, char*, bool, bool*)>:
c0013223:	56                   	push   esi
c0013224:	53                   	push   ebx
c0013225:	50                   	push   eax
c0013226:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001322a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001322f:	74 25                	je     c0013256 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013231:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013234:	31 db                	xor    ebx,ebx
c0013236:	50                   	push   eax
c0013237:	50                   	push   eax
c0013238:	8d 04 9d a0 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc260]
c001323f:	50                   	push   eax
c0013240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013244:	e8 07 d5 fe ff       	call   c0000750 <strcmp>
c0013249:	83 c4 10             	add    esp,0x10
c001324c:	85 c0                	test   eax,eax
c001324e:	74 2e                	je     c001327e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013250:	43                   	inc    ebx
c0013251:	83 fb 3f             	cmp    ebx,0x3f
c0013254:	75 e0                	jne    c0013236 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0013256:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013259:	31 db                	xor    ebx,ebx
c001325b:	8d 04 9d a0 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc260]
c0013262:	51                   	push   ecx
c0013263:	51                   	push   ecx
c0013264:	50                   	push   eax
c0013265:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013269:	e8 e2 d4 fe ff       	call   c0000750 <strcmp>
c001326e:	83 c4 10             	add    esp,0x10
c0013271:	85 c0                	test   eax,eax
c0013273:	74 09                	je     c001327e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013275:	43                   	inc    ebx
c0013276:	83 fb 3f             	cmp    ebx,0x3f
c0013279:	75 e0                	jne    c001325b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001327b:	83 cb ff             	or     ebx,0xffffffff
c001327e:	89 d8                	mov    eax,ebx
c0013280:	5a                   	pop    edx
c0013281:	5b                   	pop    ebx
c0013282:	5e                   	pop    esi
c0013283:	c3                   	ret    

c0013284 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0013284:	55                   	push   ebp
c0013285:	31 c0                	xor    eax,eax
c0013287:	57                   	push   edi
c0013288:	56                   	push   esi
c0013289:	53                   	push   ebx
c001328a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001328e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013292:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013294:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013298:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001329b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001329f:	83 fd 1f             	cmp    ebp,0x1f
c00132a2:	7f 0b                	jg     c00132af <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00132a4:	0f b6 c2             	movzx  eax,dl
c00132a7:	d3 e0                	shl    eax,cl
c00132a9:	09 07                	or     DWORD PTR [edi],eax
c00132ab:	b0 01                	mov    al,0x1
c00132ad:	01 33                	add    DWORD PTR [ebx],esi
c00132af:	5b                   	pop    ebx
c00132b0:	5e                   	pop    esi
c00132b1:	5f                   	pop    edi
c00132b2:	5d                   	pop    ebp
c00132b3:	c3                   	ret    

c00132b4 <CmGetShift(unsigned int*, int*, int, bool*)>:
c00132b4:	57                   	push   edi
c00132b5:	56                   	push   esi
c00132b6:	53                   	push   ebx
c00132b7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132bb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132bf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00132c3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00132c7:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00132c9:	7c 17                	jl     c00132e2 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00132cb:	8b 17                	mov    edx,DWORD PTR [edi]
c00132cd:	b8 01 00 00 00       	mov    eax,0x1
c00132d2:	d3 e0                	shl    eax,cl
c00132d4:	48                   	dec    eax
c00132d5:	21 d0                	and    eax,edx
c00132d7:	d3 ea                	shr    edx,cl
c00132d9:	89 17                	mov    DWORD PTR [edi],edx
c00132db:	29 0b                	sub    DWORD PTR [ebx],ecx
c00132dd:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00132e0:	eb 05                	jmp    c00132e7 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00132e2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00132e5:	31 c0                	xor    eax,eax
c00132e7:	5b                   	pop    ebx
c00132e8:	5e                   	pop    esi
c00132e9:	5f                   	pop    edi
c00132ea:	c3                   	ret    

c00132eb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00132eb:	83 ec 40             	sub    esp,0x40
c00132ee:	8d 44 24 09          	lea    eax,[esp+0x9]
c00132f2:	50                   	push   eax
c00132f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00132f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00132fb:	e8 49 fa ff ff       	call   c0012d49 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013300:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0013304:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013308:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001330c:	89 10                	mov    DWORD PTR [eax],edx
c001330e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013311:	83 c4 4c             	add    esp,0x4c
c0013314:	c3                   	ret    

c0013315 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0013315:	55                   	push   ebp
c0013316:	57                   	push   edi
c0013317:	56                   	push   esi
c0013318:	53                   	push   ebx
c0013319:	83 ec 40             	sub    esp,0x40
c001331c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013320:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013324:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0013328:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c001332c:	53                   	push   ebx
c001332d:	56                   	push   esi
c001332e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013332:	e8 12 fa ff ff       	call   c0012d49 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013337:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001333b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001333f:	83 c4 0c             	add    esp,0xc
c0013342:	53                   	push   ebx
c0013343:	56                   	push   esi
c0013344:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013348:	e8 20 fb ff ff       	call   c0012e6d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001334d:	83 c4 4c             	add    esp,0x4c
c0013350:	5b                   	pop    ebx
c0013351:	5e                   	pop    esi
c0013352:	5f                   	pop    edi
c0013353:	5d                   	pop    ebp
c0013354:	c3                   	ret    

c0013355 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0013355:	55                   	push   ebp
c0013356:	57                   	push   edi
c0013357:	56                   	push   esi
c0013358:	31 f6                	xor    esi,esi
c001335a:	53                   	push   ebx
c001335b:	31 db                	xor    ebx,ebx
c001335d:	83 ec 40             	sub    esp,0x40
c0013360:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013368:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013370:	6a 12                	push   0x12
c0013372:	68 ee 00 00 00       	push   0xee
c0013377:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001337b:	e8 70 d1 fe ff       	call   c00004f0 <memset>
c0013380:	83 c4 10             	add    esp,0x10
c0013383:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013387:	6a 08                	push   0x8
c0013389:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001338d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013391:	50                   	push   eax
c0013392:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013396:	55                   	push   ebp
c0013397:	57                   	push   edi
c0013398:	e8 e7 fe ff ff       	call   c0013284 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001339d:	83 c4 10             	add    esp,0x10
c00133a0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00133a4:	50                   	push   eax
c00133a5:	6a 06                	push   0x6
c00133a7:	55                   	push   ebp
c00133a8:	57                   	push   edi
c00133a9:	e8 06 ff ff ff       	call   c00132b4 <CmGetShift(unsigned int*, int*, int, bool*)>
c00133ae:	83 c4 10             	add    esp,0x10
c00133b1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00133b6:	74 07                	je     c00133bf <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00133b8:	46                   	inc    esi
c00133b9:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00133bd:	eb e1                	jmp    c00133a0 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00133bf:	43                   	inc    ebx
c00133c0:	83 fb 12             	cmp    ebx,0x12
c00133c3:	75 c2                	jne    c0013387 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00133c5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00133c9:	31 db                	xor    ebx,ebx
c00133cb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00133ce:	50                   	push   eax
c00133cf:	50                   	push   eax
c00133d0:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c00133d5:	43                   	inc    ebx
c00133d6:	8d 04 85 a0 3d 02 c0 	lea    eax,[eax*4-0x3ffdc260]
c00133dd:	50                   	push   eax
c00133de:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00133e2:	e8 59 d4 fe ff       	call   c0000840 <strcat>
c00133e7:	83 c4 10             	add    esp,0x10
c00133ea:	83 fb 18             	cmp    ebx,0x18
c00133ed:	75 df                	jne    c00133ce <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00133ef:	83 c4 3c             	add    esp,0x3c
c00133f2:	31 c0                	xor    eax,eax
c00133f4:	5b                   	pop    ebx
c00133f5:	5e                   	pop    esi
c00133f6:	5f                   	pop    edi
c00133f7:	5d                   	pop    ebp
c00133f8:	c3                   	ret    

c00133f9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00133f9:	83 ec 40             	sub    esp,0x40
c00133fc:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013400:	50                   	push   eax
c0013401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013405:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013409:	e8 3b f9 ff ff       	call   c0012d49 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001340e:	58                   	pop    eax
c001340f:	5a                   	pop    edx
c0013410:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013414:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013418:	50                   	push   eax
c0013419:	e8 37 ff ff ff       	call   c0013355 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001341e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013423:	83 c4 4c             	add    esp,0x4c
c0013426:	c3                   	ret    

c0013427 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013427:	55                   	push   ebp
c0013428:	57                   	push   edi
c0013429:	56                   	push   esi
c001342a:	53                   	push   ebx
c001342b:	31 db                	xor    ebx,ebx
c001342d:	83 ec 70             	sub    esp,0x70
c0013430:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013437:	6a 30                	push   0x30
c0013439:	6a 00                	push   0x0
c001343b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001343f:	56                   	push   esi
c0013440:	e8 ab d0 fe ff       	call   c00004f0 <memset>
c0013445:	83 c4 10             	add    esp,0x10
c0013448:	83 ec 0c             	sub    esp,0xc
c001344b:	57                   	push   edi
c001344c:	e8 1f d1 fe ff       	call   c0000570 <strlen>
c0013451:	83 c4 10             	add    esp,0x10
c0013454:	39 d8                	cmp    eax,ebx
c0013456:	76 16                	jbe    c001346e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013458:	83 ec 0c             	sub    esp,0xc
c001345b:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001345f:	50                   	push   eax
c0013460:	e8 cb d4 fe ff       	call   c0000930 <toupper>
c0013465:	83 c4 10             	add    esp,0x10
c0013468:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001346b:	43                   	inc    ebx
c001346c:	eb da                	jmp    c0013448 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001346e:	31 f6                	xor    esi,esi
c0013470:	52                   	push   edx
c0013471:	31 ff                	xor    edi,edi
c0013473:	6a 18                	push   0x18
c0013475:	6a 3f                	push   0x3f
c0013477:	8d 44 24 24          	lea    eax,[esp+0x24]
c001347b:	50                   	push   eax
c001347c:	e8 6f d0 fe ff       	call   c00004f0 <memset>
c0013481:	83 c4 10             	add    esp,0x10
c0013484:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0013488:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c001348c:	84 c0                	test   al,al
c001348e:	0f 84 b0 00 00 00    	je     c0013544 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013494:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0013498:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c001349d:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00134a1:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00134a6:	8d 6e 01             	lea    ebp,[esi+0x1]
c00134a9:	83 ec 0c             	sub    esp,0xc
c00134ac:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00134b0:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00134b4:	53                   	push   ebx
c00134b5:	e8 b6 d0 fe ff       	call   c0000570 <strlen>
c00134ba:	83 c4 10             	add    esp,0x10
c00134bd:	85 c0                	test   eax,eax
c00134bf:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00134c3:	74 0b                	je     c00134d0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00134c5:	50                   	push   eax
c00134c6:	6a 01                	push   0x1
c00134c8:	53                   	push   ebx
c00134c9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00134cd:	50                   	push   eax
c00134ce:	eb 0a                	jmp    c00134da <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00134d0:	50                   	push   eax
c00134d1:	6a 00                	push   0x0
c00134d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00134d7:	50                   	push   eax
c00134d8:	6a 00                	push   0x0
c00134da:	e8 44 fd ff ff       	call   c0013223 <CmGetMatch(char*, char*, bool, bool*)>
c00134df:	83 c4 10             	add    esp,0x10
c00134e2:	83 f8 ff             	cmp    eax,0xffffffff
c00134e5:	75 1a                	jne    c0013501 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00134e7:	83 ec 0c             	sub    esp,0xc
c00134ea:	68 19 25 02 c0       	push   0xc0022519
c00134ef:	e8 eb e0 ff ff       	call   c00115df <KePanic(char const*)>
c00134f4:	83 c4 10             	add    esp,0x10
c00134f7:	b8 02 00 00 00       	mov    eax,0x2
c00134fc:	e9 bc 00 00 00       	jmp    c00135bd <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013501:	83 ff 18             	cmp    edi,0x18
c0013504:	75 1a                	jne    c0013520 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013506:	83 ec 0c             	sub    esp,0xc
c0013509:	68 2e 25 02 c0       	push   0xc002252e
c001350e:	e8 cc e0 ff ff       	call   c00115df <KePanic(char const*)>
c0013513:	83 c4 10             	add    esp,0x10
c0013516:	b8 01 00 00 00       	mov    eax,0x1
c001351b:	e9 9d 00 00 00       	jmp    c00135bd <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013520:	47                   	inc    edi
c0013521:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013526:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001352a:	74 02                	je     c001352e <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c001352c:	89 ee                	mov    esi,ebp
c001352e:	83 ec 0c             	sub    esp,0xc
c0013531:	53                   	push   ebx
c0013532:	e8 39 d0 fe ff       	call   c0000570 <strlen>
c0013537:	83 c4 10             	add    esp,0x10
c001353a:	85 c0                	test   eax,eax
c001353c:	74 06                	je     c0013544 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001353e:	46                   	inc    esi
c001353f:	e9 40 ff ff ff       	jmp    c0013484 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013544:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001354c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013554:	31 f6                	xor    esi,esi
c0013556:	50                   	push   eax
c0013557:	31 ff                	xor    edi,edi
c0013559:	6a 12                	push   0x12
c001355b:	68 ee 00 00 00       	push   0xee
c0013560:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013567:	e8 84 cf fe ff       	call   c00004f0 <memset>
c001356c:	83 c4 10             	add    esp,0x10
c001356f:	83 fe 17             	cmp    esi,0x17
c0013572:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0013576:	7e 26                	jle    c001359e <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013578:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001357c:	50                   	push   eax
c001357d:	6a 08                	push   0x8
c001357f:	55                   	push   ebp
c0013580:	53                   	push   ebx
c0013581:	e8 2e fd ff ff       	call   c00132b4 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013586:	83 c4 10             	add    esp,0x10
c0013589:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001358e:	74 26                	je     c00135b6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0013590:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0013597:	4e                   	dec    esi
c0013598:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001359b:	47                   	inc    edi
c001359c:	eb 1c                	jmp    c00135ba <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001359e:	6a 06                	push   0x6
c00135a0:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00135a5:	50                   	push   eax
c00135a6:	55                   	push   ebp
c00135a7:	53                   	push   ebx
c00135a8:	e8 d7 fc ff ff       	call   c0013284 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00135ad:	83 c4 10             	add    esp,0x10
c00135b0:	84 c0                	test   al,al
c00135b2:	75 06                	jne    c00135ba <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00135b4:	eb c2                	jmp    c0013578 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00135b6:	31 c0                	xor    eax,eax
c00135b8:	eb 03                	jmp    c00135bd <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00135ba:	46                   	inc    esi
c00135bb:	eb b2                	jmp    c001356f <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00135bd:	83 c4 6c             	add    esp,0x6c
c00135c0:	5b                   	pop    ebx
c00135c1:	5e                   	pop    esi
c00135c2:	5f                   	pop    edi
c00135c3:	5d                   	pop    ebp
c00135c4:	c3                   	ret    

c00135c5 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00135c5:	53                   	push   ebx
c00135c6:	83 ec 3c             	sub    esp,0x3c
c00135c9:	6a 2b                	push   0x2b
c00135cb:	6a 00                	push   0x0
c00135cd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00135d1:	53                   	push   ebx
c00135d2:	e8 19 cf fe ff       	call   c00004f0 <memset>
c00135d7:	58                   	pop    eax
c00135d8:	5a                   	pop    edx
c00135d9:	8d 44 24 11          	lea    eax,[esp+0x11]
c00135dd:	50                   	push   eax
c00135de:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00135e2:	e8 40 fe ff ff       	call   c0013427 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00135e7:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00135ec:	83 c4 0c             	add    esp,0xc
c00135ef:	6a 15                	push   0x15
c00135f1:	6a 00                	push   0x0
c00135f3:	8d 44 24 27          	lea    eax,[esp+0x27]
c00135f7:	50                   	push   eax
c00135f8:	e8 f3 ce fe ff       	call   c00004f0 <memset>
c00135fd:	53                   	push   ebx
c00135fe:	6a 00                	push   0x0
c0013600:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013604:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013608:	e8 e6 f9 ff ff       	call   c0012ff3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001360d:	83 c4 58             	add    esp,0x58
c0013610:	5b                   	pop    ebx
c0013611:	c3                   	ret    

c0013612 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013612:	56                   	push   esi
c0013613:	53                   	push   ebx
c0013614:	83 ec 48             	sub    esp,0x48
c0013617:	6a 12                	push   0x12
c0013619:	68 ff 00 00 00       	push   0xff
c001361e:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013622:	56                   	push   esi
c0013623:	e8 c8 ce fe ff       	call   c00004f0 <memset>
c0013628:	5a                   	pop    edx
c0013629:	59                   	pop    ecx
c001362a:	56                   	push   esi
c001362b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001362f:	e8 f3 fd ff ff       	call   c0013427 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013634:	83 c4 10             	add    esp,0x10
c0013637:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001363b:	85 db                	test   ebx,ebx
c001363d:	74 42                	je     c0013681 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001363f:	50                   	push   eax
c0013640:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013644:	50                   	push   eax
c0013645:	53                   	push   ebx
c0013646:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001364a:	e8 fa f6 ff ff       	call   c0012d49 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001364f:	83 c4 0c             	add    esp,0xc
c0013652:	6a 12                	push   0x12
c0013654:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013658:	50                   	push   eax
c0013659:	56                   	push   esi
c001365a:	e8 21 cd fe ff       	call   c0000380 <memcmp>
c001365f:	83 c4 10             	add    esp,0x10
c0013662:	85 c0                	test   eax,eax
c0013664:	74 1e                	je     c0013684 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013666:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001366b:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013670:	c1 e3 08             	shl    ebx,0x8
c0013673:	09 d8                	or     eax,ebx
c0013675:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001367a:	c1 e3 10             	shl    ebx,0x10
c001367d:	09 c3                	or     ebx,eax
c001367f:	eb ba                	jmp    c001363b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013681:	83 cb ff             	or     ebx,0xffffffff
c0013684:	89 d8                	mov    eax,ebx
c0013686:	83 c4 44             	add    esp,0x44
c0013689:	5b                   	pop    ebx
c001368a:	5e                   	pop    esi
c001368b:	c3                   	ret    

c001368c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001368c:	57                   	push   edi
c001368d:	56                   	push   esi
c001368e:	53                   	push   ebx
c001368f:	83 ec 34             	sub    esp,0x34
c0013692:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013696:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001369a:	6a 2b                	push   0x2b
c001369c:	6a 00                	push   0x0
c001369e:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136a2:	53                   	push   ebx
c00136a3:	e8 48 ce fe ff       	call   c00004f0 <memset>
c00136a8:	58                   	pop    eax
c00136a9:	5a                   	pop    edx
c00136aa:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136ae:	50                   	push   eax
c00136af:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136b3:	e8 6f fd ff ff       	call   c0013427 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136b8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00136bc:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00136c0:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00136c4:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00136c8:	53                   	push   ebx
c00136c9:	6a 00                	push   0x0
c00136cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136d3:	e8 1b f9 ff ff       	call   c0012ff3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00136d8:	83 c4 50             	add    esp,0x50
c00136db:	5b                   	pop    ebx
c00136dc:	5e                   	pop    esi
c00136dd:	5f                   	pop    edi
c00136de:	c3                   	ret    

c00136df <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00136df:	55                   	push   ebp
c00136e0:	57                   	push   edi
c00136e1:	56                   	push   esi
c00136e2:	53                   	push   ebx
c00136e3:	83 ec 40             	sub    esp,0x40
c00136e6:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00136ea:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00136ee:	6a 2b                	push   0x2b
c00136f0:	6a 00                	push   0x0
c00136f2:	8d 74 24 11          	lea    esi,[esp+0x11]
c00136f6:	56                   	push   esi
c00136f7:	e8 f4 cd fe ff       	call   c00004f0 <memset>
c00136fc:	5f                   	pop    edi
c00136fd:	89 ef                	mov    edi,ebp
c00136ff:	58                   	pop    eax
c0013700:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013704:	50                   	push   eax
c0013705:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013709:	e8 19 fd ff ff       	call   c0013427 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001370e:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013713:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013718:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001371d:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013722:	83 c4 10             	add    esp,0x10
c0013725:	85 ed                	test   ebp,ebp
c0013727:	74 14                	je     c001373d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013729:	51                   	push   ecx
c001372a:	51                   	push   ecx
c001372b:	57                   	push   edi
c001372c:	53                   	push   ebx
c001372d:	e8 09 f7 ff ff       	call   c0012e3b <CmGetNext(Reghive_Tag*, int)>
c0013732:	83 c4 10             	add    esp,0x10
c0013735:	85 c0                	test   eax,eax
c0013737:	74 04                	je     c001373d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013739:	89 c7                	mov    edi,eax
c001373b:	eb e8                	jmp    c0013725 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001373d:	56                   	push   esi
c001373e:	6a 00                	push   0x0
c0013740:	57                   	push   edi
c0013741:	53                   	push   ebx
c0013742:	e8 ac f8 ff ff       	call   c0012ff3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013747:	83 c4 0c             	add    esp,0xc
c001374a:	89 c7                	mov    edi,eax
c001374c:	56                   	push   esi
c001374d:	50                   	push   eax
c001374e:	53                   	push   ebx
c001374f:	e8 f5 f5 ff ff       	call   c0012d49 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013754:	58                   	pop    eax
c0013755:	5a                   	pop    edx
c0013756:	6a 6c                	push   0x6c
c0013758:	6a 00                	push   0x0
c001375a:	6a 00                	push   0x0
c001375c:	68 3f 25 02 c0       	push   0xc002253f
c0013761:	57                   	push   edi
c0013762:	53                   	push   ebx
c0013763:	e8 24 ff ff ff       	call   c001368c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013768:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001376c:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013770:	c1 e8 10             	shr    eax,0x10
c0013773:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013777:	83 c4 1c             	add    esp,0x1c
c001377a:	56                   	push   esi
c001377b:	57                   	push   edi
c001377c:	53                   	push   ebx
c001377d:	e8 eb f6 ff ff       	call   c0012e6d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013782:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013787:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001378c:	c1 e0 08             	shl    eax,0x8
c001378f:	09 c2                	or     edx,eax
c0013791:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013796:	83 c4 4c             	add    esp,0x4c
c0013799:	c1 e0 10             	shl    eax,0x10
c001379c:	5b                   	pop    ebx
c001379d:	09 d0                	or     eax,edx
c001379f:	5e                   	pop    esi
c00137a0:	5f                   	pop    edi
c00137a1:	5d                   	pop    ebp
c00137a2:	c3                   	ret    

c00137a3 <zStrtok(char*, char const*)>:
c00137a3:	55                   	push   ebp
c00137a4:	57                   	push   edi
c00137a5:	56                   	push   esi
c00137a6:	53                   	push   ebx
c00137a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137af:	85 db                	test   ebx,ebx
c00137b1:	74 2f                	je     c00137e2 <zStrtok(char*, char const*)+0x3f>
c00137b3:	85 c0                	test   eax,eax
c00137b5:	75 09                	jne    c00137c0 <zStrtok(char*, char const*)+0x1d>
c00137b7:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00137bc:	85 c0                	test   eax,eax
c00137be:	74 50                	je     c0013810 <zStrtok(char*, char const*)+0x6d>
c00137c0:	31 c9                	xor    ecx,ecx
c00137c2:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00137c6:	74 03                	je     c00137cb <zStrtok(char*, char const*)+0x28>
c00137c8:	41                   	inc    ecx
c00137c9:	eb f7                	jmp    c00137c2 <zStrtok(char*, char const*)+0x1f>
c00137cb:	31 d2                	xor    edx,edx
c00137cd:	39 ca                	cmp    edx,ecx
c00137cf:	74 15                	je     c00137e6 <zStrtok(char*, char const*)+0x43>
c00137d1:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00137d5:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00137d8:	8d 3c 10             	lea    edi,[eax+edx*1]
c00137db:	39 ee                	cmp    esi,ebp
c00137dd:	74 13                	je     c00137f2 <zStrtok(char*, char const*)+0x4f>
c00137df:	42                   	inc    edx
c00137e0:	eb eb                	jmp    c00137cd <zStrtok(char*, char const*)+0x2a>
c00137e2:	31 c0                	xor    eax,eax
c00137e4:	eb 2a                	jmp    c0013810 <zStrtok(char*, char const*)+0x6d>
c00137e6:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c00137f0:	eb 1e                	jmp    c0013810 <zStrtok(char*, char const*)+0x6d>
c00137f2:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00137f5:	39 ce                	cmp    esi,ecx
c00137f7:	75 0a                	jne    c0013803 <zStrtok(char*, char const*)+0x60>
c00137f9:	40                   	inc    eax
c00137fa:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c00137ff:	89 d8                	mov    eax,ebx
c0013801:	eb 0d                	jmp    c0013810 <zStrtok(char*, char const*)+0x6d>
c0013803:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013807:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001380a:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c0013810:	5b                   	pop    ebx
c0013811:	5e                   	pop    esi
c0013812:	5f                   	pop    edi
c0013813:	5d                   	pop    ebp
c0013814:	c3                   	ret    

c0013815 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013815:	57                   	push   edi
c0013816:	56                   	push   esi
c0013817:	53                   	push   ebx
c0013818:	81 ec 08 01 00 00    	sub    esp,0x108
c001381e:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013825:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001382c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013830:	53                   	push   ebx
c0013831:	e8 0a ce fe ff       	call   c0000640 <strcpy>
c0013836:	59                   	pop    ecx
c0013837:	5e                   	pop    esi
c0013838:	68 a3 28 02 c0       	push   0xc00228a3
c001383d:	53                   	push   ebx
c001383e:	bb 01 00 00 00       	mov    ebx,0x1
c0013843:	e8 5b ff ff ff       	call   c00137a3 <zStrtok(char*, char const*)>
c0013848:	83 c4 10             	add    esp,0x10
c001384b:	85 c0                	test   eax,eax
c001384d:	74 3b                	je     c001388a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001384f:	52                   	push   edx
c0013850:	50                   	push   eax
c0013851:	6a 01                	push   0x1
c0013853:	57                   	push   edi
c0013854:	e8 b9 fd ff ff       	call   c0013612 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013859:	59                   	pop    ecx
c001385a:	89 c3                	mov    ebx,eax
c001385c:	5e                   	pop    esi
c001385d:	68 a3 28 02 c0       	push   0xc00228a3
c0013862:	6a 00                	push   0x0
c0013864:	e8 3a ff ff ff       	call   c00137a3 <zStrtok(char*, char const*)>
c0013869:	83 c4 10             	add    esp,0x10
c001386c:	89 c6                	mov    esi,eax
c001386e:	85 c0                	test   eax,eax
c0013870:	74 18                	je     c001388a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013872:	52                   	push   edx
c0013873:	52                   	push   edx
c0013874:	53                   	push   ebx
c0013875:	57                   	push   edi
c0013876:	e8 81 f5 ff ff       	call   c0012dfc <CmEnterDirectory(Reghive_Tag*, int)>
c001387b:	83 c4 10             	add    esp,0x10
c001387e:	89 c3                	mov    ebx,eax
c0013880:	83 f8 ff             	cmp    eax,0xffffffff
c0013883:	74 05                	je     c001388a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013885:	50                   	push   eax
c0013886:	56                   	push   esi
c0013887:	53                   	push   ebx
c0013888:	eb c9                	jmp    c0013853 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001388a:	81 c4 00 01 00 00    	add    esp,0x100
c0013890:	89 d8                	mov    eax,ebx
c0013892:	5b                   	pop    ebx
c0013893:	5e                   	pop    esi
c0013894:	5f                   	pop    edi
c0013895:	c3                   	ret    

c0013896 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013896:	55                   	push   ebp
c0013897:	57                   	push   edi
c0013898:	56                   	push   esi
c0013899:	53                   	push   ebx
c001389a:	83 ec 5c             	sub    esp,0x5c
c001389d:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00138a1:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00138a5:	85 db                	test   ebx,ebx
c00138a7:	0f 8e 84 00 00 00    	jle    c0013931 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00138ad:	31 ed                	xor    ebp,ebp
c00138af:	57                   	push   edi
c00138b0:	6a 32                	push   0x32
c00138b2:	6a 00                	push   0x0
c00138b4:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00138b8:	57                   	push   edi
c00138b9:	e8 32 cc fe ff       	call   c00004f0 <memset>
c00138be:	83 c4 0c             	add    esp,0xc
c00138c1:	57                   	push   edi
c00138c2:	53                   	push   ebx
c00138c3:	56                   	push   esi
c00138c4:	e8 30 fb ff ff       	call   c00133f9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00138c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00138cd:	83 c4 10             	add    esp,0x10
c00138d0:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00138d4:	7d 13                	jge    c00138e9 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00138d6:	83 ec 0c             	sub    esp,0xc
c00138d9:	45                   	inc    ebp
c00138da:	68 47 2c 02 c0       	push   0xc0022c47
c00138df:	e8 61 70 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00138e4:	83 c4 10             	add    esp,0x10
c00138e7:	eb e7                	jmp    c00138d0 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00138e9:	51                   	push   ecx
c00138ea:	57                   	push   edi
c00138eb:	53                   	push   ebx
c00138ec:	68 45 25 02 c0       	push   0xc0022545
c00138f1:	e8 4f 70 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00138f6:	83 c4 10             	add    esp,0x10
c00138f9:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00138fe:	75 1e                	jne    c001391e <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013900:	52                   	push   edx
c0013901:	52                   	push   edx
c0013902:	53                   	push   ebx
c0013903:	56                   	push   esi
c0013904:	e8 f3 f4 ff ff       	call   c0012dfc <CmEnterDirectory(Reghive_Tag*, int)>
c0013909:	83 c4 0c             	add    esp,0xc
c001390c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013910:	8d 51 04             	lea    edx,[ecx+0x4]
c0013913:	52                   	push   edx
c0013914:	50                   	push   eax
c0013915:	56                   	push   esi
c0013916:	e8 7b ff ff ff       	call   c0013896 <CmDisplayTree(Reghive_Tag*, int, int)>
c001391b:	83 c4 10             	add    esp,0x10
c001391e:	50                   	push   eax
c001391f:	50                   	push   eax
c0013920:	53                   	push   ebx
c0013921:	56                   	push   esi
c0013922:	e8 14 f5 ff ff       	call   c0012e3b <CmGetNext(Reghive_Tag*, int)>
c0013927:	83 c4 10             	add    esp,0x10
c001392a:	89 c3                	mov    ebx,eax
c001392c:	e9 74 ff ff ff       	jmp    c00138a5 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013931:	83 c4 5c             	add    esp,0x5c
c0013934:	5b                   	pop    ebx
c0013935:	5e                   	pop    esi
c0013936:	5f                   	pop    edi
c0013937:	5d                   	pop    ebp
c0013938:	c3                   	ret    

c0013939 <CmSplitFinalSlashInPlace(char*)>:
c0013939:	53                   	push   ebx
c001393a:	83 ec 14             	sub    esp,0x14
c001393d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013941:	53                   	push   ebx
c0013942:	e8 29 cc fe ff       	call   c0000570 <strlen>
c0013947:	83 c4 10             	add    esp,0x10
c001394a:	48                   	dec    eax
c001394b:	85 c0                	test   eax,eax
c001394d:	74 15                	je     c0013964 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001394f:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013952:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013956:	75 09                	jne    c0013961 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013958:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001395b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001395f:	eb 05                	jmp    c0013966 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013961:	48                   	dec    eax
c0013962:	eb e7                	jmp    c001394b <CmSplitFinalSlashInPlace(char*)+0x12>
c0013964:	31 c0                	xor    eax,eax
c0013966:	83 c4 08             	add    esp,0x8
c0013969:	5b                   	pop    ebx
c001396a:	c3                   	ret    

c001396b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001396b:	55                   	push   ebp
c001396c:	57                   	push   edi
c001396d:	56                   	push   esi
c001396e:	53                   	push   ebx
c001396f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013975:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c001397c:	8a 13                	mov    dl,BYTE PTR [ebx]
c001397e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013981:	80 fa 40             	cmp    dl,0x40
c0013984:	75 1c                	jne    c00139a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013986:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013989:	85 c9                	test   ecx,ecx
c001398b:	0f 84 09 01 00 00    	je     c0013a9a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013991:	8d 43 01             	lea    eax,[ebx+0x1]
c0013994:	83 f9 3a             	cmp    ecx,0x3a
c0013997:	74 04                	je     c001399d <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013999:	89 c3                	mov    ebx,eax
c001399b:	eb e9                	jmp    c0013986 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001399d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00139a0:	89 c3                	mov    ebx,eax
c00139a2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00139a6:	50                   	push   eax
c00139a7:	6a 40                	push   0x40
c00139a9:	6a 00                	push   0x0
c00139ab:	8d 44 24 24          	lea    eax,[esp+0x24]
c00139af:	50                   	push   eax
c00139b0:	e8 3b cb fe ff       	call   c00004f0 <memset>
c00139b5:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00139bc:	31 c0                	xor    eax,eax
c00139be:	83 c4 10             	add    esp,0x10
c00139c1:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c00139c6:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00139c9:	89 d1                	mov    ecx,edx
c00139cb:	85 d2                	test   edx,edx
c00139cd:	0f 84 c7 00 00 00    	je     c0013a9a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00139d3:	3d c7 00 00 00       	cmp    eax,0xc7
c00139d8:	0f 8f bc 00 00 00    	jg     c0013a9a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00139de:	83 fa 0a             	cmp    edx,0xa
c00139e1:	0f 85 a4 00 00 00    	jne    c0013a8b <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c00139e7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00139ec:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00139f1:	89 c8                	mov    eax,ecx
c00139f3:	a8 df                	test   al,0xdf
c00139f5:	0f 94 c2             	sete   dl
c00139f8:	83 f9 23             	cmp    ecx,0x23
c00139fb:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a00:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013a04:	80 e2 01             	and    dl,0x1
c0013a07:	75 4a                	jne    c0013a53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a09:	83 e8 09             	sub    eax,0x9
c0013a0c:	3c 01                	cmp    al,0x1
c0013a0e:	76 43                	jbe    c0013a53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a10:	83 f9 5b             	cmp    ecx,0x5b
c0013a13:	75 42                	jne    c0013a57 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013a15:	83 fe 40             	cmp    esi,0x40
c0013a18:	75 39                	jne    c0013a53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a1a:	83 ec 0c             	sub    esp,0xc
c0013a1d:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013a21:	52                   	push   edx
c0013a22:	e8 49 cb fe ff       	call   c0000570 <strlen>
c0013a27:	83 c4 10             	add    esp,0x10
c0013a2a:	83 f8 3f             	cmp    eax,0x3f
c0013a2d:	77 6b                	ja     c0013a9a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a2f:	50                   	push   eax
c0013a30:	50                   	push   eax
c0013a31:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013a35:	52                   	push   edx
c0013a36:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013a3a:	52                   	push   edx
c0013a3b:	e8 00 cc fe ff       	call   c0000640 <strcpy>
c0013a40:	58                   	pop    eax
c0013a41:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013a45:	52                   	push   edx
c0013a46:	e8 25 cb fe ff       	call   c0000570 <strlen>
c0013a4b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013a50:	83 c4 10             	add    esp,0x10
c0013a53:	31 d2                	xor    edx,edx
c0013a55:	eb 3b                	jmp    c0013a92 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013a57:	83 fe 40             	cmp    esi,0x40
c0013a5a:	74 06                	je     c0013a62 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013a5c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013a60:	eb 20                	jmp    c0013a82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013a62:	50                   	push   eax
c0013a63:	50                   	push   eax
c0013a64:	55                   	push   ebp
c0013a65:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a69:	50                   	push   eax
c0013a6a:	e8 e1 cc fe ff       	call   c0000750 <strcmp>
c0013a6f:	83 c4 10             	add    esp,0x10
c0013a72:	85 c0                	test   eax,eax
c0013a74:	75 dd                	jne    c0013a53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a76:	eb e4                	jmp    c0013a5c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013a78:	8d 50 01             	lea    edx,[eax+0x1]
c0013a7b:	83 f9 3d             	cmp    ecx,0x3d
c0013a7e:	74 1e                	je     c0013a9e <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013a80:	89 d0                	mov    eax,edx
c0013a82:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013a85:	85 c9                	test   ecx,ecx
c0013a87:	75 ef                	jne    c0013a78 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013a89:	eb 0f                	jmp    c0013a9a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a8b:	8d 50 01             	lea    edx,[eax+0x1]
c0013a8e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013a92:	47                   	inc    edi
c0013a93:	89 d0                	mov    eax,edx
c0013a95:	e9 2c ff ff ff       	jmp    c00139c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013a9a:	31 c0                	xor    eax,eax
c0013a9c:	eb 33                	jmp    c0013ad1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013a9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013aa2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013aa5:	50                   	push   eax
c0013aa6:	50                   	push   eax
c0013aa7:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013aab:	50                   	push   eax
c0013aac:	53                   	push   ebx
c0013aad:	e8 9e cc fe ff       	call   c0000750 <strcmp>
c0013ab2:	83 c4 10             	add    esp,0x10
c0013ab5:	85 c0                	test   eax,eax
c0013ab7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013abb:	75 96                	jne    c0013a53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013abd:	51                   	push   ecx
c0013abe:	51                   	push   ecx
c0013abf:	52                   	push   edx
c0013ac0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013ac7:	e8 74 cb fe ff       	call   c0000640 <strcpy>
c0013acc:	83 c4 10             	add    esp,0x10
c0013acf:	b0 01                	mov    al,0x1
c0013ad1:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013ad7:	5b                   	pop    ebx
c0013ad8:	5e                   	pop    esi
c0013ad9:	5f                   	pop    edi
c0013ada:	5d                   	pop    ebp
c0013adb:	c3                   	ret    

c0013adc <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013adc:	57                   	push   edi
c0013add:	56                   	push   esi
c0013ade:	53                   	push   ebx
c0013adf:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013ae5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013aec:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013af3:	53                   	push   ebx
c0013af4:	e8 77 ca fe ff       	call   c0000570 <strlen>
c0013af9:	89 34 24             	mov    DWORD PTR [esp],esi
c0013afc:	89 c7                	mov    edi,eax
c0013afe:	e8 6d ca fe ff       	call   c0000570 <strlen>
c0013b03:	83 c4 10             	add    esp,0x10
c0013b06:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013b0a:	3d ff 00 00 00       	cmp    eax,0xff
c0013b0f:	0f 87 d3 00 00 00    	ja     c0013be8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b15:	57                   	push   edi
c0013b16:	57                   	push   edi
c0013b17:	56                   	push   esi
c0013b18:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013b1c:	56                   	push   esi
c0013b1d:	e8 1e cb fe ff       	call   c0000640 <strcpy>
c0013b22:	58                   	pop    eax
c0013b23:	5a                   	pop    edx
c0013b24:	68 a3 28 02 c0       	push   0xc00228a3
c0013b29:	56                   	push   esi
c0013b2a:	e8 11 cd fe ff       	call   c0000840 <strcat>
c0013b2f:	59                   	pop    ecx
c0013b30:	5f                   	pop    edi
c0013b31:	53                   	push   ebx
c0013b32:	56                   	push   esi
c0013b33:	e8 08 cd fe ff       	call   c0000840 <strcat>
c0013b38:	58                   	pop    eax
c0013b39:	5a                   	pop    edx
c0013b3a:	68 4f 25 02 c0       	push   0xc002254f
c0013b3f:	56                   	push   esi
c0013b40:	e8 fb cc fe ff       	call   c0000840 <strcat>
c0013b45:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013b4c:	e8 65 3f ff ff       	call   c0007ab6 <malloc>
c0013b51:	83 c4 0c             	add    esp,0xc
c0013b54:	89 c3                	mov    ebx,eax
c0013b56:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013b5c:	56                   	push   esi
c0013b5d:	50                   	push   eax
c0013b5e:	e8 a9 7f ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c0013b63:	83 c4 10             	add    esp,0x10
c0013b66:	85 db                	test   ebx,ebx
c0013b68:	74 7e                	je     c0013be8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b6a:	51                   	push   ecx
c0013b6b:	51                   	push   ecx
c0013b6c:	6a 01                	push   0x1
c0013b6e:	53                   	push   ebx
c0013b6f:	e8 b6 7f ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c0013b74:	83 c4 10             	add    esp,0x10
c0013b77:	85 c0                	test   eax,eax
c0013b79:	74 08                	je     c0013b83 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013b7b:	83 ec 0c             	sub    esp,0xc
c0013b7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b80:	53                   	push   ebx
c0013b81:	eb 5f                	jmp    c0013be2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013b83:	52                   	push   edx
c0013b84:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013b88:	50                   	push   eax
c0013b89:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013b8d:	50                   	push   eax
c0013b8e:	53                   	push   ebx
c0013b8f:	e8 98 82 ff ff       	call   c000be2c <File::stat(unsigned long long*, bool*)>
c0013b94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013b98:	83 c4 10             	add    esp,0x10
c0013b9b:	89 c1                	mov    ecx,eax
c0013b9d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013ba1:	74 31                	je     c0013bd4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013ba3:	83 ec 0c             	sub    esp,0xc
c0013ba6:	50                   	push   eax
c0013ba7:	e8 0a 3f ff ff       	call   c0007ab6 <malloc>
c0013bac:	89 c6                	mov    esi,eax
c0013bae:	58                   	pop    eax
c0013baf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bb1:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013bb5:	52                   	push   edx
c0013bb6:	56                   	push   esi
c0013bb7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bbb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bbf:	53                   	push   ebx
c0013bc0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bc3:	83 c4 20             	add    esp,0x20
c0013bc6:	85 c0                	test   eax,eax
c0013bc8:	75 0a                	jne    c0013bd4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013bca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bce:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013bd2:	74 18                	je     c0013bec <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013bd4:	83 ec 0c             	sub    esp,0xc
c0013bd7:	53                   	push   ebx
c0013bd8:	e8 ab 7f ff ff       	call   c000bb88 <File::close()>
c0013bdd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bdf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013be2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013be5:	83 c4 10             	add    esp,0x10
c0013be8:	31 c0                	xor    eax,eax
c0013bea:	eb 3b                	jmp    c0013c27 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013bec:	83 ec 0c             	sub    esp,0xc
c0013bef:	53                   	push   ebx
c0013bf0:	e8 93 7f ff ff       	call   c000bb88 <File::close()>
c0013bf5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bfa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013bfd:	83 c4 0c             	add    esp,0xc
c0013c00:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c07:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c0e:	56                   	push   esi
c0013c0f:	e8 57 fd ff ff       	call   c001396b <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013c14:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c17:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013c1b:	e8 a6 3e ff ff       	call   c0007ac6 <free>
c0013c20:	83 c4 10             	add    esp,0x10
c0013c23:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013c27:	81 c4 20 01 00 00    	add    esp,0x120
c0013c2d:	5b                   	pop    ebx
c0013c2e:	5e                   	pop    esi
c0013c2f:	5f                   	pop    edi
c0013c30:	c3                   	ret    

c0013c31 <Reg::getLine(char*, char*, char*)>:
c0013c31:	57                   	push   edi
c0013c32:	56                   	push   esi
c0013c33:	53                   	push   ebx
c0013c34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c38:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c3c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c40:	57                   	push   edi
c0013c41:	56                   	push   esi
c0013c42:	53                   	push   ebx
c0013c43:	68 54 25 02 c0       	push   0xc0022554
c0013c48:	e8 8f fe ff ff       	call   c0013adc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c4d:	83 c4 10             	add    esp,0x10
c0013c50:	84 c0                	test   al,al
c0013c52:	75 10                	jne    c0013c64 <Reg::getLine(char*, char*, char*)+0x33>
c0013c54:	57                   	push   edi
c0013c55:	56                   	push   esi
c0013c56:	53                   	push   ebx
c0013c57:	68 79 25 02 c0       	push   0xc0022579
c0013c5c:	e8 7b fe ff ff       	call   c0013adc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c61:	83 c4 10             	add    esp,0x10
c0013c64:	5b                   	pop    ebx
c0013c65:	5e                   	pop    esi
c0013c66:	5f                   	pop    edi
c0013c67:	c3                   	ret    

c0013c68 <Reg::readInt(char*, char*, int*)>:
c0013c68:	55                   	push   ebp
c0013c69:	57                   	push   edi
c0013c6a:	56                   	push   esi
c0013c6b:	53                   	push   ebx
c0013c6c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013c72:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013c76:	55                   	push   ebp
c0013c77:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c7e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c85:	e8 a7 ff ff ff       	call   c0013c31 <Reg::getLine(char*, char*, char*)>
c0013c8a:	83 c4 10             	add    esp,0x10
c0013c8d:	84 c0                	test   al,al
c0013c8f:	0f 84 b6 00 00 00    	je     c0013d4b <Reg::readInt(char*, char*, int*)+0xe3>
c0013c95:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013c9a:	83 fa 2b             	cmp    edx,0x2b
c0013c9d:	74 0c                	je     c0013cab <Reg::readInt(char*, char*, int*)+0x43>
c0013c9f:	83 fa 2d             	cmp    edx,0x2d
c0013ca2:	75 0e                	jne    c0013cb2 <Reg::readInt(char*, char*, int*)+0x4a>
c0013ca4:	ba 01 00 00 00       	mov    edx,0x1
c0013ca9:	eb 0b                	jmp    c0013cb6 <Reg::readInt(char*, char*, int*)+0x4e>
c0013cab:	ba 01 00 00 00       	mov    edx,0x1
c0013cb0:	eb 02                	jmp    c0013cb4 <Reg::readInt(char*, char*, int*)+0x4c>
c0013cb2:	31 d2                	xor    edx,edx
c0013cb4:	31 c0                	xor    eax,eax
c0013cb6:	be 0a 00 00 00       	mov    esi,0xa
c0013cbb:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013cc0:	75 21                	jne    c0013ce3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013cc2:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013cc7:	83 f9 78             	cmp    ecx,0x78
c0013cca:	75 0a                	jne    c0013cd6 <Reg::readInt(char*, char*, int*)+0x6e>
c0013ccc:	83 c2 02             	add    edx,0x2
c0013ccf:	be 10 00 00 00       	mov    esi,0x10
c0013cd4:	eb 0d                	jmp    c0013ce3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013cd6:	83 f9 62             	cmp    ecx,0x62
c0013cd9:	75 08                	jne    c0013ce3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013cdb:	83 c2 02             	add    edx,0x2
c0013cde:	be 02 00 00 00       	mov    esi,0x2
c0013ce3:	01 d5                	add    ebp,edx
c0013ce5:	31 d2                	xor    edx,edx
c0013ce7:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013ceb:	83 f9 0d             	cmp    ecx,0xd
c0013cee:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013cf2:	0f 94 c3             	sete   bl
c0013cf5:	85 c9                	test   ecx,ecx
c0013cf7:	89 df                	mov    edi,ebx
c0013cf9:	0f 94 c3             	sete   bl
c0013cfc:	09 df                	or     edi,ebx
c0013cfe:	89 fb                	mov    ebx,edi
c0013d00:	83 e7 01             	and    edi,0x1
c0013d03:	75 35                	jne    c0013d3a <Reg::readInt(char*, char*, int*)+0xd2>
c0013d05:	0f af d6             	imul   edx,esi
c0013d08:	83 fe 10             	cmp    esi,0x10
c0013d0b:	75 26                	jne    c0013d33 <Reg::readInt(char*, char*, int*)+0xcb>
c0013d0d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d11:	83 ef 41             	sub    edi,0x41
c0013d14:	89 fb                	mov    ebx,edi
c0013d16:	80 fb 05             	cmp    bl,0x5
c0013d19:	77 06                	ja     c0013d21 <Reg::readInt(char*, char*, int*)+0xb9>
c0013d1b:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013d1f:	eb 16                	jmp    c0013d37 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d21:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d25:	83 eb 61             	sub    ebx,0x61
c0013d28:	80 fb 05             	cmp    bl,0x5
c0013d2b:	77 06                	ja     c0013d33 <Reg::readInt(char*, char*, int*)+0xcb>
c0013d2d:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013d31:	eb 04                	jmp    c0013d37 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d33:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013d37:	45                   	inc    ebp
c0013d38:	eb ad                	jmp    c0013ce7 <Reg::readInt(char*, char*, int*)+0x7f>
c0013d3a:	84 c0                	test   al,al
c0013d3c:	74 02                	je     c0013d40 <Reg::readInt(char*, char*, int*)+0xd8>
c0013d3e:	f7 da                	neg    edx
c0013d40:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013d47:	89 10                	mov    DWORD PTR [eax],edx
c0013d49:	88 d8                	mov    al,bl
c0013d4b:	81 c4 ec 00 00 00    	add    esp,0xec
c0013d51:	5b                   	pop    ebx
c0013d52:	5e                   	pop    esi
c0013d53:	5f                   	pop    edi
c0013d54:	5d                   	pop    ebp
c0013d55:	c3                   	ret    

c0013d56 <Reg::readString(char*, char*, char*, int)>:
c0013d56:	57                   	push   edi
c0013d57:	56                   	push   esi
c0013d58:	53                   	push   ebx
c0013d59:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013d5f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013d66:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013d6a:	57                   	push   edi
c0013d6b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013d72:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013d79:	e8 b3 fe ff ff       	call   c0013c31 <Reg::getLine(char*, char*, char*)>
c0013d7e:	83 c4 10             	add    esp,0x10
c0013d81:	89 c6                	mov    esi,eax
c0013d83:	84 c0                	test   al,al
c0013d85:	74 44                	je     c0013dcb <Reg::readString(char*, char*, char*, int)+0x75>
c0013d87:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013d8e:	31 c0                	xor    eax,eax
c0013d90:	4a                   	dec    edx
c0013d91:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013d94:	84 c9                	test   cl,cl
c0013d96:	74 0f                	je     c0013da7 <Reg::readString(char*, char*, char*, int)+0x51>
c0013d98:	39 c2                	cmp    edx,eax
c0013d9a:	7e 0b                	jle    c0013da7 <Reg::readString(char*, char*, char*, int)+0x51>
c0013d9c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013d9f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013da4:	40                   	inc    eax
c0013da5:	eb ea                	jmp    c0013d91 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013da7:	83 ec 0c             	sub    esp,0xc
c0013daa:	53                   	push   ebx
c0013dab:	e8 c0 c7 fe ff       	call   c0000570 <strlen>
c0013db0:	83 c4 10             	add    esp,0x10
c0013db3:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013db8:	75 11                	jne    c0013dcb <Reg::readString(char*, char*, char*, int)+0x75>
c0013dba:	83 ec 0c             	sub    esp,0xc
c0013dbd:	53                   	push   ebx
c0013dbe:	e8 ad c7 fe ff       	call   c0000570 <strlen>
c0013dc3:	83 c4 10             	add    esp,0x10
c0013dc6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013dcb:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013dd1:	89 f0                	mov    eax,esi
c0013dd3:	5b                   	pop    ebx
c0013dd4:	5e                   	pop    esi
c0013dd5:	5f                   	pop    edi
c0013dd6:	c3                   	ret    

c0013dd7 <Reg::readBool(char*, char*, bool*)>:
c0013dd7:	83 ec 20             	sub    esp,0x20
c0013dda:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013dde:	50                   	push   eax
c0013ddf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013de3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013de7:	e8 7c fe ff ff       	call   c0013c68 <Reg::readInt(char*, char*, int*)>
c0013dec:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013df1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013df5:	0f 95 02             	setne  BYTE PTR [edx]
c0013df8:	83 c4 2c             	add    esp,0x2c
c0013dfb:	c3                   	ret    

c0013dfc <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013dfc:	53                   	push   ebx
c0013dfd:	83 ec 1c             	sub    esp,0x1c
c0013e00:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013e04:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013e08:	50                   	push   eax
c0013e09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e11:	e8 c1 ff ff ff       	call   c0013dd7 <Reg::readBool(char*, char*, bool*)>
c0013e16:	83 c4 10             	add    esp,0x10
c0013e19:	84 c0                	test   al,al
c0013e1b:	74 04                	je     c0013e21 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013e1d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013e21:	88 d8                	mov    al,bl
c0013e23:	83 c4 18             	add    esp,0x18
c0013e26:	5b                   	pop    ebx
c0013e27:	c3                   	ret    

c0013e28 <Reg::readIntWithDefault(char*, char*, int)>:
c0013e28:	53                   	push   ebx
c0013e29:	83 ec 1c             	sub    esp,0x1c
c0013e2c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e30:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e34:	50                   	push   eax
c0013e35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e3d:	e8 26 fe ff ff       	call   c0013c68 <Reg::readInt(char*, char*, int*)>
c0013e42:	83 c4 10             	add    esp,0x10
c0013e45:	84 c0                	test   al,al
c0013e47:	74 04                	je     c0013e4d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013e49:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e4d:	89 d8                	mov    eax,ebx
c0013e4f:	83 c4 18             	add    esp,0x18
c0013e52:	5b                   	pop    ebx
c0013e53:	c3                   	ret    

c0013e54 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013e54:	57                   	push   edi
c0013e55:	56                   	push   esi
c0013e56:	56                   	push   esi
c0013e57:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e5b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e5f:	56                   	push   esi
c0013e60:	57                   	push   edi
c0013e61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e69:	e8 e8 fe ff ff       	call   c0013d56 <Reg::readString(char*, char*, char*, int)>
c0013e6e:	83 c4 10             	add    esp,0x10
c0013e71:	84 c0                	test   al,al
c0013e73:	75 1a                	jne    c0013e8f <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013e75:	51                   	push   ecx
c0013e76:	56                   	push   esi
c0013e77:	6a 00                	push   0x0
c0013e79:	57                   	push   edi
c0013e7a:	e8 71 c6 fe ff       	call   c00004f0 <memset>
c0013e7f:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013e82:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013e86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e88:	83 c4 10             	add    esp,0x10
c0013e8b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013e8f:	89 f8                	mov    eax,edi
c0013e91:	5a                   	pop    edx
c0013e92:	5e                   	pop    esi
c0013e93:	5f                   	pop    edi
c0013e94:	c3                   	ret    

c0013e95 <SysEject(regs*)>:
c0013e95:	83 ec 0c             	sub    esp,0xc
c0013e98:	83 ca ff             	or     edx,0xffffffff
c0013e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e9f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013ea2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013ea7:	83 e9 41             	sub    ecx,0x41
c0013eaa:	83 f9 19             	cmp    ecx,0x19
c0013ead:	77 18                	ja     c0013ec7 <SysEject(regs*)+0x32>
c0013eaf:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013eb6:	85 c9                	test   ecx,ecx
c0013eb8:	74 0d                	je     c0013ec7 <SysEject(regs*)+0x32>
c0013eba:	83 ec 0c             	sub    esp,0xc
c0013ebd:	51                   	push   ecx
c0013ebe:	e8 3b 9e ff ff       	call   c000dcfe <LogicalDisk::eject()>
c0013ec3:	83 c4 10             	add    esp,0x10
c0013ec6:	99                   	cdq    
c0013ec7:	83 c4 0c             	add    esp,0xc
c0013eca:	c3                   	ret    

c0013ecb <SysExit(regs*)>:
c0013ecb:	83 ec 18             	sub    esp,0x18
c0013ece:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ed2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ed5:	e8 46 2b 00 00       	call   c0016a20 <terminateTask(int)>
c0013eda:	83 c8 ff             	or     eax,0xffffffff
c0013edd:	83 c4 1c             	add    esp,0x1c
c0013ee0:	89 c2                	mov    edx,eax
c0013ee2:	c3                   	ret    

c0013ee3 <SysGetCwd(regs*)>:
c0013ee3:	83 ec 10             	sub    esp,0x10
c0013ee6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013eea:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013eed:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ef0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ef5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013ef8:	e8 c3 78 ff ff       	call   c000b7c0 <Fs::getcwd(Process*, char*, int)>
c0013efd:	83 c4 1c             	add    esp,0x1c
c0013f00:	99                   	cdq    
c0013f01:	c3                   	ret    

c0013f02 <SysGetPID(regs*)>:
c0013f02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f0c:	99                   	cdq    
c0013f0d:	c3                   	ret    

c0013f0e <SysGetRAMData(regs*)>:
c0013f0e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013f14:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013f1e:	99                   	cdq    
c0013f1f:	f7 f9                	idiv   ecx
c0013f21:	c1 e0 18             	shl    eax,0x18
c0013f24:	09 c8                	or     eax,ecx
c0013f26:	99                   	cdq    
c0013f27:	c3                   	ret    

c0013f28 <SysGetVGAPtr(regs*)>:
c0013f28:	55                   	push   ebp
c0013f29:	57                   	push   edi
c0013f2a:	56                   	push   esi
c0013f2b:	53                   	push   ebx
c0013f2c:	83 ec 18             	sub    esp,0x18
c0013f2f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f33:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f36:	e8 b1 25 00 00       	call   c00164ec <Thr::processFromPID(int)>
c0013f3b:	83 c4 10             	add    esp,0x10
c0013f3e:	89 c1                	mov    ecx,eax
c0013f40:	b8 01 00 00 00       	mov    eax,0x1
c0013f45:	85 c9                	test   ecx,ecx
c0013f47:	74 57                	je     c0013fa0 <SysGetVGAPtr(regs*)+0x78>
c0013f49:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013f4f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013f53:	74 0c                	je     c0013f61 <SysGetVGAPtr(regs*)+0x39>
c0013f55:	83 ec 0c             	sub    esp,0xc
c0013f58:	55                   	push   ebp
c0013f59:	e8 fb 47 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013f5e:	83 c4 10             	add    esp,0x10
c0013f61:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013f64:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013f67:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013f6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f6e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013f71:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f74:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013f7a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f7d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013f80:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013f86:	50                   	push   eax
c0013f87:	50                   	push   eax
c0013f88:	68 94 25 02 c0       	push   0xc0022594
c0013f8d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f90:	05 a8 0f 00 00       	add    eax,0xfa8
c0013f95:	50                   	push   eax
c0013f96:	e8 a5 c6 fe ff       	call   c0000640 <strcpy>
c0013f9b:	83 c4 10             	add    esp,0x10
c0013f9e:	31 c0                	xor    eax,eax
c0013fa0:	83 c4 0c             	add    esp,0xc
c0013fa3:	31 d2                	xor    edx,edx
c0013fa5:	5b                   	pop    ebx
c0013fa6:	5e                   	pop    esi
c0013fa7:	5f                   	pop    edi
c0013fa8:	5d                   	pop    ebp
c0013fa9:	c3                   	ret    
c0013faa:	66 90                	xchg   ax,ax

c0013fac <SysKill(regs*)>:
c0013fac:	53                   	push   ebx
c0013fad:	83 ec 08             	sub    esp,0x8
c0013fb0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fb4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013fb8:	75 16                	jne    c0013fd0 <SysKill(regs*)+0x24>
c0013fba:	83 ec 0c             	sub    esp,0xc
c0013fbd:	68 9e 25 02 c0       	push   0xc002259e
c0013fc2:	e8 18 d6 ff ff       	call   c00115df <KePanic(char const*)>
c0013fc7:	83 c4 10             	add    esp,0x10
c0013fca:	e9 89 00 00 00       	jmp    c0014058 <SysKill(regs*)+0xac>
c0013fcf:	90                   	nop
c0013fd0:	83 ec 0c             	sub    esp,0xc
c0013fd3:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013fd8:	e8 ff bc 00 00       	call   c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0013fe0:	83 c4 10             	add    esp,0x10
c0013fe3:	85 c0                	test   eax,eax
c0013fe5:	74 19                	je     c0014000 <SysKill(regs*)+0x54>
c0013fe7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013fea:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013fed:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013fef:	74 33                	je     c0014024 <SysKill(regs*)+0x78>
c0013ff1:	52                   	push   edx
c0013ff2:	52                   	push   edx
c0013ff3:	50                   	push   eax
c0013ff4:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013ff9:	e8 fe bf 00 00       	call   c001fffc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013ffe:	eb e0                	jmp    c0013fe0 <SysKill(regs*)+0x34>
c0014000:	83 ec 0c             	sub    esp,0xc
c0014003:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014008:	e8 cf bc 00 00       	call   c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001400d:	8d 76 00             	lea    esi,[esi+0x0]
c0014010:	83 c4 10             	add    esp,0x10
c0014013:	85 c0                	test   eax,eax
c0014015:	74 41                	je     c0014058 <SysKill(regs*)+0xac>
c0014017:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001401a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001401d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001401f:	75 27                	jne    c0014048 <SysKill(regs*)+0x9c>
c0014021:	8d 76 00             	lea    esi,[esi+0x0]
c0014024:	51                   	push   ecx
c0014025:	51                   	push   ecx
c0014026:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014029:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001402e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014031:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014037:	e8 46 da ff ff       	call   c0011a82 <KeRaiseSignal(SigHandlerBlock*, int)>
c001403c:	83 c4 10             	add    esp,0x10
c001403f:	31 c0                	xor    eax,eax
c0014041:	31 d2                	xor    edx,edx
c0014043:	eb 1b                	jmp    c0014060 <SysKill(regs*)+0xb4>
c0014045:	8d 76 00             	lea    esi,[esi+0x0]
c0014048:	52                   	push   edx
c0014049:	52                   	push   edx
c001404a:	50                   	push   eax
c001404b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014050:	e8 a7 bf 00 00       	call   c001fffc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014055:	eb b9                	jmp    c0014010 <SysKill(regs*)+0x64>
c0014057:	90                   	nop
c0014058:	83 c8 ff             	or     eax,0xffffffff
c001405b:	89 c2                	mov    edx,eax
c001405d:	8d 76 00             	lea    esi,[esi+0x0]
c0014060:	83 c4 08             	add    esp,0x8
c0014063:	5b                   	pop    ebx
c0014064:	c3                   	ret    

c0014065 <SysLoadDLL(regs*)>:
c0014065:	56                   	push   esi
c0014066:	53                   	push   ebx
c0014067:	31 d2                	xor    edx,edx
c0014069:	51                   	push   ecx
c001406a:	b8 01 00 00 00       	mov    eax,0x1
c001406f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014073:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014077:	0f 84 8c 00 00 00    	je     c0014109 <SysLoadDLL(regs*)+0xa4>
c001407d:	83 ec 0c             	sub    esp,0xc
c0014080:	68 14 01 00 00       	push   0x114
c0014085:	e8 2c 3a ff ff       	call   c0007ab6 <malloc>
c001408a:	83 c4 0c             	add    esp,0xc
c001408d:	89 c3                	mov    ebx,eax
c001408f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014094:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014097:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001409a:	53                   	push   ebx
c001409b:	e8 6c 7a ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c00140a0:	83 c4 10             	add    esp,0x10
c00140a3:	31 d2                	xor    edx,edx
c00140a5:	b8 02 00 00 00       	mov    eax,0x2
c00140aa:	85 db                	test   ebx,ebx
c00140ac:	74 5b                	je     c0014109 <SysLoadDLL(regs*)+0xa4>
c00140ae:	83 ec 0c             	sub    esp,0xc
c00140b1:	53                   	push   ebx
c00140b2:	e8 37 7d ff ff       	call   c000bdee <File::exists()>
c00140b7:	83 c4 10             	add    esp,0x10
c00140ba:	84 c0                	test   al,al
c00140bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140be:	75 11                	jne    c00140d1 <SysLoadDLL(regs*)+0x6c>
c00140c0:	83 ec 0c             	sub    esp,0xc
c00140c3:	53                   	push   ebx
c00140c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140c7:	83 c4 10             	add    esp,0x10
c00140ca:	b8 03 00 00 00       	mov    eax,0x3
c00140cf:	eb 36                	jmp    c0014107 <SysLoadDLL(regs*)+0xa2>
c00140d1:	83 ec 0c             	sub    esp,0xc
c00140d4:	53                   	push   ebx
c00140d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140d8:	58                   	pop    eax
c00140d9:	5a                   	pop    edx
c00140da:	6a 00                	push   0x0
c00140dc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140df:	e8 3b 15 00 00       	call   c001561f <Thr::loadDLL(char const*, bool)>
c00140e4:	83 c4 10             	add    esp,0x10
c00140e7:	89 c1                	mov    ecx,eax
c00140e9:	31 d2                	xor    edx,edx
c00140eb:	b8 04 00 00 00       	mov    eax,0x4
c00140f0:	85 c9                	test   ecx,ecx
c00140f2:	74 15                	je     c0014109 <SysLoadDLL(regs*)+0xa4>
c00140f4:	53                   	push   ebx
c00140f5:	53                   	push   ebx
c00140f6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00140fc:	51                   	push   ecx
c00140fd:	e8 4e 17 00 00       	call   c0015850 <Thr::executeDLL(unsigned long, void*)>
c0014102:	83 c4 10             	add    esp,0x10
c0014105:	31 c0                	xor    eax,eax
c0014107:	31 d2                	xor    edx,edx
c0014109:	59                   	pop    ecx
c001410a:	5b                   	pop    ebx
c001410b:	5e                   	pop    esi
c001410c:	c3                   	ret    

c001410d <SysRead(regs*)>:
c001410d:	57                   	push   edi
c001410e:	56                   	push   esi
c001410f:	53                   	push   ebx
c0014110:	83 ec 10             	sub    esp,0x10
c0014113:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014117:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001411a:	83 f8 02             	cmp    eax,0x2
c001411d:	77 10                	ja     c001412f <SysRead(regs*)+0x22>
c001411f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014124:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014127:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001412d:	eb 0e                	jmp    c001413d <SysRead(regs*)+0x30>
c001412f:	83 ec 0c             	sub    esp,0xc
c0014132:	50                   	push   eax
c0014133:	e8 7b 53 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014138:	83 c4 10             	add    esp,0x10
c001413b:	89 c1                	mov    ecx,eax
c001413d:	83 c8 ff             	or     eax,0xffffffff
c0014140:	85 c9                	test   ecx,ecx
c0014142:	89 c2                	mov    edx,eax
c0014144:	74 28                	je     c001416e <SysRead(regs*)+0x61>
c0014146:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001414e:	31 ff                	xor    edi,edi
c0014150:	83 ec 0c             	sub    esp,0xc
c0014153:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014155:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014159:	52                   	push   edx
c001415a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001415d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014160:	57                   	push   edi
c0014161:	56                   	push   esi
c0014162:	51                   	push   ecx
c0014163:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014166:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001416a:	83 c4 20             	add    esp,0x20
c001416d:	99                   	cdq    
c001416e:	83 c4 10             	add    esp,0x10
c0014171:	5b                   	pop    ebx
c0014172:	5e                   	pop    esi
c0014173:	5f                   	pop    edi
c0014174:	c3                   	ret    

c0014175 <SysRegisterSignal(regs*)>:
c0014175:	83 ec 18             	sub    esp,0x18
c0014178:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001417c:	6a 00                	push   0x0
c001417e:	6a 00                	push   0x0
c0014180:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014183:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014186:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001418b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001418e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014194:	e8 b3 d8 ff ff       	call   c0011a4c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014199:	83 c4 2c             	add    esp,0x2c
c001419c:	99                   	cdq    
c001419d:	c3                   	ret    

c001419e <SysRegistryGetTypeFromPath(regs*)>:
c001419e:	57                   	push   edi
c001419f:	56                   	push   esi
c00141a0:	53                   	push   ebx
c00141a1:	81 ec 38 01 00 00    	sub    esp,0x138
c00141a7:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00141ae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141b1:	68 bf 25 02 c0       	push   0xc00225bf
c00141b6:	e8 8a 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00141bb:	5a                   	pop    edx
c00141bc:	59                   	pop    ecx
c00141bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141c3:	e8 4d f6 ff ff       	call   c0013815 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00141c8:	5f                   	pop    edi
c00141c9:	89 c6                	mov    esi,eax
c00141cb:	5a                   	pop    edx
c00141cc:	50                   	push   eax
c00141cd:	68 df 25 02 c0       	push   0xc00225df
c00141d2:	e8 6e 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00141d7:	83 c4 10             	add    esp,0x10
c00141da:	85 f6                	test   esi,esi
c00141dc:	74 28                	je     c0014206 <SysRegistryGetTypeFromPath(regs*)+0x68>
c00141de:	50                   	push   eax
c00141df:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00141e3:	57                   	push   edi
c00141e4:	56                   	push   esi
c00141e5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141e8:	e8 0c f2 ff ff       	call   c00133f9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00141ed:	83 c4 0c             	add    esp,0xc
c00141f0:	89 c3                	mov    ebx,eax
c00141f2:	57                   	push   edi
c00141f3:	50                   	push   eax
c00141f4:	68 e7 25 02 c0       	push   0xc00225e7
c00141f9:	e8 47 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00141fe:	89 d8                	mov    eax,ebx
c0014200:	83 c4 10             	add    esp,0x10
c0014203:	99                   	cdq    
c0014204:	eb 05                	jmp    c001420b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0014206:	83 c8 ff             	or     eax,0xffffffff
c0014209:	89 c2                	mov    edx,eax
c001420b:	81 c4 30 01 00 00    	add    esp,0x130
c0014211:	5b                   	pop    ebx
c0014212:	5e                   	pop    esi
c0014213:	5f                   	pop    edi
c0014214:	c3                   	ret    

c0014215 <SysRegistryReadExtent(regs*)>:
c0014215:	83 ec 1c             	sub    esp,0x1c
c0014218:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001421c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001421f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014222:	85 c0                	test   eax,eax
c0014224:	79 1f                	jns    c0014245 <SysRegistryReadExtent(regs*)+0x30>
c0014226:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001422b:	52                   	push   edx
c001422c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014230:	52                   	push   edx
c0014231:	50                   	push   eax
c0014232:	51                   	push   ecx
c0014233:	e8 b3 f0 ff ff       	call   c00132eb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014238:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001423c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014240:	83 c4 10             	add    esp,0x10
c0014243:	eb 14                	jmp    c0014259 <SysRegistryReadExtent(regs*)+0x44>
c0014245:	83 ec 04             	sub    esp,0x4
c0014248:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001424b:	50                   	push   eax
c001424c:	51                   	push   ecx
c001424d:	e8 33 eb ff ff       	call   c0012d85 <CmGetString(Reghive_Tag*, int, char*)>
c0014252:	83 c4 10             	add    esp,0x10
c0014255:	31 c0                	xor    eax,eax
c0014257:	31 d2                	xor    edx,edx
c0014259:	83 c4 1c             	add    esp,0x1c
c001425c:	c3                   	ret    

c001425d <SysRegistryPathToExtentLookup(regs*)>:
c001425d:	53                   	push   ebx
c001425e:	83 ec 10             	sub    esp,0x10
c0014261:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014265:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014268:	68 fd 25 02 c0       	push   0xc00225fd
c001426d:	e8 d3 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014272:	58                   	pop    eax
c0014273:	5a                   	pop    edx
c0014274:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014277:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001427a:	e8 96 f5 ff ff       	call   c0013815 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001427f:	83 c4 18             	add    esp,0x18
c0014282:	99                   	cdq    
c0014283:	5b                   	pop    ebx
c0014284:	c3                   	ret    

c0014285 <SysRegistryEnterDirectory(regs*)>:
c0014285:	53                   	push   ebx
c0014286:	83 ec 10             	sub    esp,0x10
c0014289:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001428d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014290:	68 20 26 02 c0       	push   0xc0022620
c0014295:	e8 ab 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001429a:	58                   	pop    eax
c001429b:	5a                   	pop    edx
c001429c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001429f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142a2:	e8 55 eb ff ff       	call   c0012dfc <CmEnterDirectory(Reghive_Tag*, int)>
c00142a7:	83 c4 18             	add    esp,0x18
c00142aa:	99                   	cdq    
c00142ab:	5b                   	pop    ebx
c00142ac:	c3                   	ret    

c00142ad <SysRegistryGetNext(regs*)>:
c00142ad:	53                   	push   ebx
c00142ae:	83 ec 10             	sub    esp,0x10
c00142b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142b5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142b8:	68 3e 26 02 c0       	push   0xc002263e
c00142bd:	e8 83 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142c2:	58                   	pop    eax
c00142c3:	5a                   	pop    edx
c00142c4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142c7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142ca:	e8 6c eb ff ff       	call   c0012e3b <CmGetNext(Reghive_Tag*, int)>
c00142cf:	83 c4 18             	add    esp,0x18
c00142d2:	99                   	cdq    
c00142d3:	5b                   	pop    ebx
c00142d4:	c3                   	ret    

c00142d5 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00142d5:	57                   	push   edi
c00142d6:	56                   	push   esi
c00142d7:	53                   	push   ebx
c00142d8:	81 ec 34 01 00 00    	sub    esp,0x134
c00142de:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00142e5:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00142e9:	57                   	push   edi
c00142ea:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00142ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00142f0:	e8 04 f1 ff ff       	call   c00133f9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00142f5:	89 c3                	mov    ebx,eax
c00142f7:	58                   	pop    eax
c00142f8:	5a                   	pop    edx
c00142f9:	57                   	push   edi
c00142fa:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00142fd:	e8 3e c3 fe ff       	call   c0000640 <strcpy>
c0014302:	89 d8                	mov    eax,ebx
c0014304:	81 c4 40 01 00 00    	add    esp,0x140
c001430a:	99                   	cdq    
c001430b:	5b                   	pop    ebx
c001430c:	5e                   	pop    esi
c001430d:	5f                   	pop    edi
c001430e:	c3                   	ret    

c001430f <SysRegistryOpen(regs*)>:
c001430f:	83 ec 18             	sub    esp,0x18
c0014312:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014316:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014319:	e8 f7 e8 ff ff       	call   c0012c15 <CmOpen(char const*)>
c001431e:	83 c4 1c             	add    esp,0x1c
c0014321:	99                   	cdq    
c0014322:	c3                   	ret    

c0014323 <SysRegistryClose(regs*)>:
c0014323:	83 ec 18             	sub    esp,0x18
c0014326:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001432a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001432d:	e8 01 ea ff ff       	call   c0012d33 <CmClose(Reghive_Tag*)>
c0014332:	31 c0                	xor    eax,eax
c0014334:	31 d2                	xor    edx,edx
c0014336:	83 c4 1c             	add    esp,0x1c
c0014339:	c3                   	ret    

c001433a <SysSbrk(regs*)>:
c001433a:	56                   	push   esi
c001433b:	53                   	push   ebx
c001433c:	50                   	push   eax
c001433d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014342:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014346:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014349:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001434c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014352:	85 db                	test   ebx,ebx
c0014354:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014357:	74 02                	je     c001435b <SysSbrk(regs*)+0x21>
c0014359:	79 06                	jns    c0014361 <SysSbrk(regs*)+0x27>
c001435b:	89 f0                	mov    eax,esi
c001435d:	31 d2                	xor    edx,edx
c001435f:	eb 2a                	jmp    c001438b <SysSbrk(regs*)+0x51>
c0014361:	83 c8 ff             	or     eax,0xffffffff
c0014364:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001436a:	89 c2                	mov    edx,eax
c001436c:	77 1d                	ja     c001438b <SysSbrk(regs*)+0x51>
c001436e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014374:	50                   	push   eax
c0014375:	c1 ea 0c             	shr    edx,0xc
c0014378:	68 07 0c 00 00       	push   0xc07
c001437d:	52                   	push   edx
c001437e:	51                   	push   ecx
c001437f:	e8 a0 5a ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0014384:	89 f0                	mov    eax,esi
c0014386:	31 d2                	xor    edx,edx
c0014388:	83 c4 10             	add    esp,0x10
c001438b:	59                   	pop    ecx
c001438c:	5b                   	pop    ebx
c001438d:	5e                   	pop    esi
c001438e:	c3                   	ret    

c001438f <SysSetCwd(regs*)>:
c001438f:	83 ec 14             	sub    esp,0x14
c0014392:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014396:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014399:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001439e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00143a1:	e8 e7 7a ff ff       	call   c000be8d <Fs::setcwd(Process*, char*)>
c00143a6:	83 c4 1c             	add    esp,0x1c
c00143a9:	99                   	cdq    
c00143aa:	c3                   	ret    

c00143ab <SysSetTime(regs*)>:
c00143ab:	55                   	push   ebp
c00143ac:	31 c9                	xor    ecx,ecx
c00143ae:	57                   	push   edi
c00143af:	bd 0c 00 00 00       	mov    ebp,0xc
c00143b4:	56                   	push   esi
c00143b5:	53                   	push   ebx
c00143b6:	31 db                	xor    ebx,ebx
c00143b8:	83 ec 10             	sub    esp,0x10
c00143bb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00143bf:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00143c2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00143c5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00143c8:	89 c2                	mov    edx,eax
c00143ca:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00143d0:	83 e2 1f             	and    edx,0x1f
c00143d3:	c1 e7 10             	shl    edi,0x10
c00143d6:	42                   	inc    edx
c00143d7:	c1 e8 05             	shr    eax,0x5
c00143da:	88 d1                	mov    cl,dl
c00143dc:	31 d2                	xor    edx,edx
c00143de:	f7 f5                	div    ebp
c00143e0:	89 dd                	mov    ebp,ebx
c00143e2:	88 d5                	mov    ch,dl
c00143e4:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00143ea:	0f b7 c1             	movzx  eax,cx
c00143ed:	31 d2                	xor    edx,edx
c00143ef:	09 f8                	or     eax,edi
c00143f1:	bf 3c 00 00 00       	mov    edi,0x3c
c00143f6:	89 c1                	mov    ecx,eax
c00143f8:	89 f0                	mov    eax,esi
c00143fa:	f7 f7                	div    edi
c00143fc:	c1 e2 10             	shl    edx,0x10
c00143ff:	09 d5                	or     ebp,edx
c0014401:	31 d2                	xor    edx,edx
c0014403:	89 eb                	mov    ebx,ebp
c0014405:	f7 f7                	div    edi
c0014407:	bf 10 0e 00 00       	mov    edi,0xe10
c001440c:	88 d7                	mov    bh,dl
c001440e:	89 f0                	mov    eax,esi
c0014410:	31 d2                	xor    edx,edx
c0014412:	f7 f7                	div    edi
c0014414:	bf 18 00 00 00       	mov    edi,0x18
c0014419:	31 d2                	xor    edx,edx
c001441b:	f7 f7                	div    edi
c001441d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0014422:	88 d3                	mov    bl,dl
c0014424:	53                   	push   ebx
c0014425:	51                   	push   ecx
c0014426:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001442c:	e8 69 82 ff ff       	call   c000c69a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014431:	83 c4 1c             	add    esp,0x1c
c0014434:	83 f0 01             	xor    eax,0x1
c0014437:	5b                   	pop    ebx
c0014438:	0f b6 c0             	movzx  eax,al
c001443b:	5e                   	pop    esi
c001443c:	31 d2                	xor    edx,edx
c001443e:	5f                   	pop    edi
c001443f:	5d                   	pop    ebp
c0014440:	c3                   	ret    

c0014441 <SysSymlink(regs*)>:
c0014441:	53                   	push   ebx
c0014442:	83 c8 ff             	or     eax,0xffffffff
c0014445:	83 ec 08             	sub    esp,0x8
c0014448:	89 c2                	mov    edx,eax
c001444a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001444e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014451:	85 c9                	test   ecx,ecx
c0014453:	74 14                	je     c0014469 <SysSymlink(regs*)+0x28>
c0014455:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0014458:	85 db                	test   ebx,ebx
c001445a:	74 0d                	je     c0014469 <SysSymlink(regs*)+0x28>
c001445c:	50                   	push   eax
c001445d:	50                   	push   eax
c001445e:	53                   	push   ebx
c001445f:	51                   	push   ecx
c0014460:	e8 6d 6e ff ff       	call   c000b2d2 <KeCreateSymlink(char const*, char const*)>
c0014465:	83 c4 10             	add    esp,0x10
c0014468:	99                   	cdq    
c0014469:	83 c4 08             	add    esp,0x8
c001446c:	5b                   	pop    ebx
c001446d:	c3                   	ret    

c001446e <SysTimezone(regs*)>:
c001446e:	53                   	push   ebx
c001446f:	83 ec 08             	sub    esp,0x8
c0014472:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014476:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001447a:	75 17                	jne    c0014493 <SysTimezone(regs*)+0x25>
c001447c:	83 ec 0c             	sub    esp,0xc
c001447f:	68 55 26 02 c0       	push   0xc0022655
c0014484:	e8 bc 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014489:	83 c8 ff             	or     eax,0xffffffff
c001448c:	83 c4 10             	add    esp,0x10
c001448f:	89 c2                	mov    edx,eax
c0014491:	eb 20                	jmp    c00144b3 <SysTimezone(regs*)+0x45>
c0014493:	83 ec 0c             	sub    esp,0xc
c0014496:	68 6a 26 02 c0       	push   0xc002266a
c001449b:	e8 a5 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00144a0:	58                   	pop    eax
c00144a1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144a4:	e8 5b 7f ff ff       	call   c000c404 <User::loadClockSettings(int)>
c00144a9:	83 c4 10             	add    esp,0x10
c00144ac:	b8 01 00 00 00       	mov    eax,0x1
c00144b1:	31 d2                	xor    edx,edx
c00144b3:	83 c4 08             	add    esp,0x8
c00144b6:	5b                   	pop    ebx
c00144b7:	c3                   	ret    

c00144b8 <SysTruncate(regs*)>:
c00144b8:	55                   	push   ebp
c00144b9:	57                   	push   edi
c00144ba:	31 ff                	xor    edi,edi
c00144bc:	56                   	push   esi
c00144bd:	53                   	push   ebx
c00144be:	83 ec 0c             	sub    esp,0xc
c00144c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c5:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00144c8:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00144cb:	89 ce                	mov    esi,ecx
c00144cd:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00144d1:	0f 84 9a 00 00 00    	je     c0014571 <SysTruncate(regs*)+0xb9>
c00144d7:	83 ec 0c             	sub    esp,0xc
c00144da:	68 14 01 00 00       	push   0x114
c00144df:	e8 d2 35 ff ff       	call   c0007ab6 <malloc>
c00144e4:	83 c4 0c             	add    esp,0xc
c00144e7:	89 c3                	mov    ebx,eax
c00144e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144ee:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00144f1:	55                   	push   ebp
c00144f2:	53                   	push   ebx
c00144f3:	e8 14 76 ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c00144f8:	83 c4 10             	add    esp,0x10
c00144fb:	31 d2                	xor    edx,edx
c00144fd:	b8 03 00 00 00       	mov    eax,0x3
c0014502:	85 db                	test   ebx,ebx
c0014504:	0f 84 a2 00 00 00    	je     c00145ac <SysTruncate(regs*)+0xf4>
c001450a:	51                   	push   ecx
c001450b:	51                   	push   ecx
c001450c:	6a 02                	push   0x2
c001450e:	53                   	push   ebx
c001450f:	e8 16 76 ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c0014514:	83 c4 10             	add    esp,0x10
c0014517:	85 c0                	test   eax,eax
c0014519:	74 13                	je     c001452e <SysTruncate(regs*)+0x76>
c001451b:	83 ec 0c             	sub    esp,0xc
c001451e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014520:	53                   	push   ebx
c0014521:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014524:	83 c4 10             	add    esp,0x10
c0014527:	b8 04 00 00 00       	mov    eax,0x4
c001452c:	eb 7c                	jmp    c00145aa <SysTruncate(regs*)+0xf2>
c001452e:	52                   	push   edx
c001452f:	57                   	push   edi
c0014530:	56                   	push   esi
c0014531:	53                   	push   ebx
c0014532:	e8 07 77 ff ff       	call   c000bc3e <File::truncate(unsigned long long)>
c0014537:	83 c4 10             	add    esp,0x10
c001453a:	85 c0                	test   eax,eax
c001453c:	74 1b                	je     c0014559 <SysTruncate(regs*)+0xa1>
c001453e:	83 ec 0c             	sub    esp,0xc
c0014541:	53                   	push   ebx
c0014542:	e8 41 76 ff ff       	call   c000bb88 <File::close()>
c0014547:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014549:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001454c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001454f:	83 c4 10             	add    esp,0x10
c0014552:	b8 05 00 00 00       	mov    eax,0x5
c0014557:	eb 51                	jmp    c00145aa <SysTruncate(regs*)+0xf2>
c0014559:	83 ec 0c             	sub    esp,0xc
c001455c:	53                   	push   ebx
c001455d:	e8 26 76 ff ff       	call   c000bb88 <File::close()>
c0014562:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014564:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014567:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001456a:	83 c4 10             	add    esp,0x10
c001456d:	31 c0                	xor    eax,eax
c001456f:	eb 39                	jmp    c00145aa <SysTruncate(regs*)+0xf2>
c0014571:	31 d2                	xor    edx,edx
c0014573:	b8 01 00 00 00       	mov    eax,0x1
c0014578:	83 fd 02             	cmp    ebp,0x2
c001457b:	7e 2f                	jle    c00145ac <SysTruncate(regs*)+0xf4>
c001457d:	83 ec 0c             	sub    esp,0xc
c0014580:	51                   	push   ecx
c0014581:	e8 2d 4f ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014586:	83 c4 10             	add    esp,0x10
c0014589:	89 c1                	mov    ecx,eax
c001458b:	31 d2                	xor    edx,edx
c001458d:	b8 02 00 00 00       	mov    eax,0x2
c0014592:	85 c9                	test   ecx,ecx
c0014594:	74 16                	je     c00145ac <SysTruncate(regs*)+0xf4>
c0014596:	50                   	push   eax
c0014597:	57                   	push   edi
c0014598:	56                   	push   esi
c0014599:	51                   	push   ecx
c001459a:	e8 9f 76 ff ff       	call   c000bc3e <File::truncate(unsigned long long)>
c001459f:	83 c4 10             	add    esp,0x10
c00145a2:	85 c0                	test   eax,eax
c00145a4:	0f 95 c0             	setne  al
c00145a7:	0f b6 c0             	movzx  eax,al
c00145aa:	31 d2                	xor    edx,edx
c00145ac:	83 c4 0c             	add    esp,0xc
c00145af:	5b                   	pop    ebx
c00145b0:	5e                   	pop    esi
c00145b1:	5f                   	pop    edi
c00145b2:	5d                   	pop    ebp
c00145b3:	c3                   	ret    

c00145b4 <SysWrite(regs*)>:
c00145b4:	57                   	push   edi
c00145b5:	56                   	push   esi
c00145b6:	53                   	push   ebx
c00145b7:	83 ec 10             	sub    esp,0x10
c00145ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00145be:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00145c1:	83 f8 02             	cmp    eax,0x2
c00145c4:	77 10                	ja     c00145d6 <SysWrite(regs*)+0x22>
c00145c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145ce:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00145d4:	eb 0e                	jmp    c00145e4 <SysWrite(regs*)+0x30>
c00145d6:	83 ec 0c             	sub    esp,0xc
c00145d9:	50                   	push   eax
c00145da:	e8 d4 4e ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00145df:	83 c4 10             	add    esp,0x10
c00145e2:	89 c1                	mov    ecx,eax
c00145e4:	83 c8 ff             	or     eax,0xffffffff
c00145e7:	85 c9                	test   ecx,ecx
c00145e9:	89 c2                	mov    edx,eax
c00145eb:	74 28                	je     c0014615 <SysWrite(regs*)+0x61>
c00145ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00145f5:	31 ff                	xor    edi,edi
c00145f7:	83 ec 0c             	sub    esp,0xc
c00145fa:	8b 01                	mov    eax,DWORD PTR [ecx]
c00145fc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014600:	52                   	push   edx
c0014601:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014604:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014607:	57                   	push   edi
c0014608:	56                   	push   esi
c0014609:	51                   	push   ecx
c001460a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001460d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014611:	83 c4 20             	add    esp,0x20
c0014614:	99                   	cdq    
c0014615:	83 c4 10             	add    esp,0x10
c0014618:	5b                   	pop    ebx
c0014619:	5e                   	pop    esi
c001461a:	5f                   	pop    edi
c001461b:	c3                   	ret    

c001461c <SysWsbe(regs*)>:
c001461c:	57                   	push   edi
c001461d:	b9 0b 00 00 00       	mov    ecx,0xb
c0014622:	56                   	push   esi
c0014623:	be a9 26 02 c0       	mov    esi,0xc00226a9
c0014628:	53                   	push   ebx
c0014629:	83 ec 30             	sub    esp,0x30
c001462c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014630:	fc                   	cld    
c0014631:	83 ec 0c             	sub    esp,0xc
c0014634:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014636:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001463a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001463f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014642:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014648:	8b 06                	mov    eax,DWORD PTR [esi]
c001464a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001464d:	57                   	push   edi
c001464e:	e8 1d bf fe ff       	call   c0000570 <strlen>
c0014653:	5a                   	pop    edx
c0014654:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014658:	52                   	push   edx
c0014659:	31 d2                	xor    edx,edx
c001465b:	57                   	push   edi
c001465c:	52                   	push   edx
c001465d:	50                   	push   eax
c001465e:	56                   	push   esi
c001465f:	ff d3                	call   ebx
c0014661:	83 c4 14             	add    esp,0x14
c0014664:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014668:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001466b:	e8 b0 23 00 00       	call   c0016a20 <terminateTask(int)>
c0014670:	83 c4 40             	add    esp,0x40
c0014673:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014678:	5b                   	pop    ebx
c0014679:	31 d2                	xor    edx,edx
c001467b:	5e                   	pop    esi
c001467c:	5f                   	pop    edi
c001467d:	c3                   	ret    

c001467e <SysYield(regs*)>:
c001467e:	83 ec 0c             	sub    esp,0xc
c0014681:	fa                   	cli    
c0014682:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014688:	e8 f3 19 00 00       	call   c0016080 <schedule()>
c001468d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014692:	48                   	dec    eax
c0014693:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014698:	75 01                	jne    c001469b <SysYield(regs*)+0x1d>
c001469a:	fb                   	sti    
c001469b:	31 c0                	xor    eax,eax
c001469d:	31 d2                	xor    edx,edx
c001469f:	83 c4 0c             	add    esp,0xc
c00146a2:	c3                   	ret    

c00146a3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00146a3:	55                   	push   ebp
c00146a4:	57                   	push   edi
c00146a5:	56                   	push   esi
c00146a6:	53                   	push   ebx
c00146a7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00146ad:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00146b5:	0f 95 c0             	setne  al
c00146b8:	31 d2                	xor    edx,edx
c00146ba:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00146c2:	0f 94 c2             	sete   dl
c00146c5:	85 c2                	test   edx,eax
c00146c7:	74 34                	je     c00146fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00146c9:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00146d4:	74 27                	je     c00146fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00146d6:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00146dd:	05 00 10 00 00       	add    eax,0x1000
c00146e2:	89 c1                	mov    ecx,eax
c00146e4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00146e9:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00146ef:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00146f6:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00146fd:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014704:	83 ec 0c             	sub    esp,0xc
c0014707:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001470d:	6a 01                	push   0x1
c001470f:	e8 f9 4e ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0014714:	83 c4 10             	add    esp,0x10
c0014717:	89 c3                	mov    ebx,eax
c0014719:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001471f:	0f 86 25 01 00 00    	jbe    c001484a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014725:	c1 ee 0c             	shr    esi,0xc
c0014728:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001472f:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014733:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001473b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014742:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014746:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001474d:	29 ef                	sub    edi,ebp
c001474f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0014753:	0f 83 f8 00 00 00    	jae    c0014851 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014759:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001475f:	76 05                	jbe    c0014766 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0014761:	bf 00 10 00 00       	mov    edi,0x1000
c0014766:	83 ec 0c             	sub    esp,0xc
c0014769:	31 d2                	xor    edx,edx
c001476b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014772:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014774:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014778:	50                   	push   eax
c0014779:	8d 74 24 30          	lea    esi,[esp+0x30]
c001477d:	56                   	push   esi
c001477e:	52                   	push   edx
c001477f:	57                   	push   edi
c0014780:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014787:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001478a:	83 c4 20             	add    esp,0x20
c001478d:	85 c0                	test   eax,eax
c001478f:	75 06                	jne    c0014797 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0014791:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014795:	74 13                	je     c00147aa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0014797:	83 ec 0c             	sub    esp,0xc
c001479a:	53                   	push   ebx
c001479b:	e8 8b 51 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00147a0:	83 c4 10             	add    esp,0x10
c00147a3:	31 c0                	xor    eax,eax
c00147a5:	e9 7c 01 00 00       	jmp    c0014926 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00147aa:	fa                   	cli    
c00147ab:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00147b1:	e8 09 36 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00147b6:	6a 07                	push   0x7
c00147b8:	89 c7                	mov    edi,eax
c00147ba:	53                   	push   ebx
c00147bb:	50                   	push   eax
c00147bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147c4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147ca:	e8 51 55 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00147cf:	83 c4 0c             	add    esp,0xc
c00147d2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00147d9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147df:	6a 00                	push   0x0
c00147e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147e9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147ef:	e8 92 53 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00147f4:	58                   	pop    eax
c00147f5:	5a                   	pop    edx
c00147f6:	68 07 0c 00 00       	push   0xc07
c00147fb:	55                   	push   ebp
c00147fc:	57                   	push   edi
c00147fd:	89 df                	mov    edi,ebx
c00147ff:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014806:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001480c:	6a 00                	push   0x0
c001480e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014813:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014816:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001481c:	e8 51 57 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014821:	b9 00 10 00 00       	mov    ecx,0x1000
c0014826:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014828:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001482d:	83 c4 20             	add    esp,0x20
c0014830:	48                   	dec    eax
c0014831:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014836:	85 c0                	test   eax,eax
c0014838:	75 01                	jne    c001483b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001483a:	fb                   	sti    
c001483b:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014841:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014845:	e9 f1 fe ff ff       	jmp    c001473b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c001484a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014851:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014858:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001485e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014864:	0f 86 ae 00 00 00    	jbe    c0014918 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001486a:	fa                   	cli    
c001486b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014871:	c1 ee 0c             	shr    esi,0xc
c0014874:	51                   	push   ecx
c0014875:	31 ff                	xor    edi,edi
c0014877:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001487e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014884:	6a 00                	push   0x0
c0014886:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001488b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001488e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014894:	e8 ed 52 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014899:	83 c4 10             	add    esp,0x10
c001489c:	e8 1e 35 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00148a1:	47                   	inc    edi
c00148a2:	6a 07                	push   0x7
c00148a4:	53                   	push   ebx
c00148a5:	50                   	push   eax
c00148a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148aa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148b0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00148b3:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00148b9:	e8 62 54 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00148be:	58                   	pop    eax
c00148bf:	5a                   	pop    edx
c00148c0:	68 07 0c 00 00       	push   0xc07
c00148c5:	55                   	push   ebp
c00148c6:	81 c5 00 10 00 00    	add    ebp,0x1000
c00148cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148d0:	50                   	push   eax
c00148d1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00148d8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148de:	6a 00                	push   0x0
c00148e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148e8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148ee:	e8 7f 56 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00148f3:	83 c4 1c             	add    esp,0x1c
c00148f6:	68 00 10 00 00       	push   0x1000
c00148fb:	6a 00                	push   0x0
c00148fd:	53                   	push   ebx
c00148fe:	e8 ed bb fe ff       	call   c00004f0 <memset>
c0014903:	83 c4 10             	add    esp,0x10
c0014906:	39 fe                	cmp    esi,edi
c0014908:	77 92                	ja     c001489c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c001490a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001490f:	48                   	dec    eax
c0014910:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014915:	75 01                	jne    c0014918 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014917:	fb                   	sti    
c0014918:	83 ec 0c             	sub    esp,0xc
c001491b:	53                   	push   ebx
c001491c:	e8 0a 50 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014921:	83 c4 10             	add    esp,0x10
c0014924:	b0 01                	mov    al,0x1
c0014926:	81 c4 2c 10 00 00    	add    esp,0x102c
c001492c:	5b                   	pop    ebx
c001492d:	5e                   	pop    esi
c001492e:	5f                   	pop    edi
c001492f:	5d                   	pop    ebp
c0014930:	c3                   	ret    

c0014931 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014931:	55                   	push   ebp
c0014932:	57                   	push   edi
c0014933:	56                   	push   esi
c0014934:	53                   	push   ebx
c0014935:	83 ec 48             	sub    esp,0x48
c0014938:	68 14 01 00 00       	push   0x114
c001493d:	e8 74 31 ff ff       	call   c0007ab6 <malloc>
c0014942:	83 c4 0c             	add    esp,0xc
c0014945:	89 c6                	mov    esi,eax
c0014947:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001494b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001494f:	50                   	push   eax
c0014950:	e8 b7 71 ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c0014955:	58                   	pop    eax
c0014956:	5a                   	pop    edx
c0014957:	6a 01                	push   0x1
c0014959:	56                   	push   esi
c001495a:	e8 cb 71 ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c001495f:	83 c4 10             	add    esp,0x10
c0014962:	85 c0                	test   eax,eax
c0014964:	0f 85 43 01 00 00    	jne    c0014aad <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001496a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014972:	83 ec 0c             	sub    esp,0xc
c0014975:	6a 34                	push   0x34
c0014977:	e8 3a 31 ff ff       	call   c0007ab6 <malloc>
c001497c:	89 c3                	mov    ebx,eax
c001497e:	58                   	pop    eax
c001497f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014981:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014985:	57                   	push   edi
c0014986:	53                   	push   ebx
c0014987:	6a 00                	push   0x0
c0014989:	6a 34                	push   0x34
c001498b:	56                   	push   esi
c001498c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001498f:	83 c4 20             	add    esp,0x20
c0014992:	85 c0                	test   eax,eax
c0014994:	0f 85 13 01 00 00    	jne    c0014aad <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001499a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00149a0:	0f 85 07 01 00 00    	jne    c0014aad <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149a6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00149a9:	85 c0                	test   eax,eax
c00149ab:	0f 84 fc 00 00 00    	je     c0014aad <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149b1:	31 d2                	xor    edx,edx
c00149b3:	55                   	push   ebp
c00149b4:	52                   	push   edx
c00149b5:	50                   	push   eax
c00149b6:	56                   	push   esi
c00149b7:	e8 2c 72 ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c00149bc:	83 c4 10             	add    esp,0x10
c00149bf:	85 c0                	test   eax,eax
c00149c1:	0f 85 e6 00 00 00    	jne    c0014aad <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149c7:	83 ec 0c             	sub    esp,0xc
c00149ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00149cd:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00149d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00149d5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00149d9:	0f af c2             	imul   eax,edx
c00149dc:	50                   	push   eax
c00149dd:	e8 d4 30 ff ff       	call   c0007ab6 <malloc>
c00149e2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00149e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00149e8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00149eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00149ef:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00149f3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00149f7:	0f af c2             	imul   eax,edx
c00149fa:	99                   	cdq    
c00149fb:	52                   	push   edx
c00149fc:	50                   	push   eax
c00149fd:	56                   	push   esi
c00149fe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a01:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014a04:	83 c4 20             	add    esp,0x20
c0014a07:	85 c0                	test   eax,eax
c0014a09:	0f 84 9e 00 00 00    	je     c0014aad <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a0f:	31 d2                	xor    edx,edx
c0014a11:	51                   	push   ecx
c0014a12:	52                   	push   edx
c0014a13:	50                   	push   eax
c0014a14:	56                   	push   esi
c0014a15:	e8 ce 71 ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0014a1a:	83 c4 10             	add    esp,0x10
c0014a1d:	85 c0                	test   eax,eax
c0014a1f:	0f 85 88 00 00 00    	jne    c0014aad <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a25:	83 ec 0c             	sub    esp,0xc
c0014a28:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a2c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a30:	31 ed                	xor    ebp,ebp
c0014a32:	0f af c2             	imul   eax,edx
c0014a35:	50                   	push   eax
c0014a36:	e8 7b 30 ff ff       	call   c0007ab6 <malloc>
c0014a3b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014a3d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a41:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a48:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a4c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a50:	0f af c2             	imul   eax,edx
c0014a53:	99                   	cdq    
c0014a54:	52                   	push   edx
c0014a55:	50                   	push   eax
c0014a56:	56                   	push   esi
c0014a57:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a5a:	83 c4 20             	add    esp,0x20
c0014a5d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014a65:	0f b7 fd             	movzx  edi,bp
c0014a68:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014a6c:	73 7d                	jae    c0014aeb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014a6e:	c1 e7 05             	shl    edi,0x5
c0014a71:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014a75:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014a78:	75 6b                	jne    c0014ae5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014a7a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014a7d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a81:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014a84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a88:	52                   	push   edx
c0014a89:	31 d2                	xor    edx,edx
c0014a8b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014a8e:	52                   	push   edx
c0014a8f:	50                   	push   eax
c0014a90:	56                   	push   esi
c0014a91:	e8 52 71 ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0014a96:	83 c4 10             	add    esp,0x10
c0014a99:	85 c0                	test   eax,eax
c0014a9b:	74 17                	je     c0014ab4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014a9d:	83 ec 0c             	sub    esp,0xc
c0014aa0:	68 d5 26 02 c0       	push   0xc00226d5
c0014aa5:	e8 9b 5e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014aaa:	83 c4 10             	add    esp,0x10
c0014aad:	31 c0                	xor    eax,eax
c0014aaf:	e9 87 00 00 00       	jmp    c0014b3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014ab4:	83 ec 0c             	sub    esp,0xc
c0014ab7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014aba:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014abd:	50                   	push   eax
c0014abe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ac6:	56                   	push   esi
c0014ac7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014acb:	e8 d3 fb ff ff       	call   c00146a3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014ad0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014ad4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014ad8:	83 c4 20             	add    esp,0x20
c0014adb:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014adf:	73 04                	jae    c0014ae5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014ae1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ae5:	45                   	inc    ebp
c0014ae6:	e9 7a ff ff ff       	jmp    c0014a65 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014aeb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014aef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014af3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014af7:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014afd:	83 ec 0c             	sub    esp,0xc
c0014b00:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014b06:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b0b:	05 00 10 00 00       	add    eax,0x1000
c0014b10:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014b13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b17:	e8 aa 2f ff ff       	call   c0007ac6 <free>
c0014b1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b1f:	e8 a2 2f ff ff       	call   c0007ac6 <free>
c0014b24:	58                   	pop    eax
c0014b25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b29:	e8 98 2f ff ff       	call   c0007ac6 <free>
c0014b2e:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b31:	e8 52 70 ff ff       	call   c000bb88 <File::close()>
c0014b36:	83 c4 10             	add    esp,0x10
c0014b39:	b0 01                	mov    al,0x1
c0014b3b:	83 c4 3c             	add    esp,0x3c
c0014b3e:	5b                   	pop    ebx
c0014b3f:	5e                   	pop    esi
c0014b40:	5f                   	pop    edi
c0014b41:	5d                   	pop    ebp
c0014b42:	c3                   	ret    

c0014b43 <Thr::runtimeReferenceHelper()>:
c0014b43:	83 ec 18             	sub    esp,0x18
c0014b46:	68 dd 26 02 c0       	push   0xc00226dd
c0014b4b:	e8 f5 5d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014b50:	fa                   	cli    
c0014b51:	83 c4 10             	add    esp,0x10
c0014b54:	eb fe                	jmp    c0014b54 <Thr::runtimeReferenceHelper()+0x11>

c0014b56 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014b56:	57                   	push   edi
c0014b57:	56                   	push   esi
c0014b58:	53                   	push   ebx
c0014b59:	31 db                	xor    ebx,ebx
c0014b5b:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014b61:	7e 3c                	jle    c0014b9f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014b63:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014b6a:	31 ff                	xor    edi,edi
c0014b6c:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014b73:	7e 27                	jle    c0014b9c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014b75:	50                   	push   eax
c0014b76:	50                   	push   eax
c0014b77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b7b:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b7d:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014b84:	50                   	push   eax
c0014b85:	e8 c6 bb fe ff       	call   c0000750 <strcmp>
c0014b8a:	83 c4 10             	add    esp,0x10
c0014b8d:	85 c0                	test   eax,eax
c0014b8f:	75 05                	jne    c0014b96 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014b91:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014b94:	eb 0b                	jmp    c0014ba1 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014b96:	83 c6 10             	add    esi,0x10
c0014b99:	47                   	inc    edi
c0014b9a:	eb d0                	jmp    c0014b6c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014b9c:	43                   	inc    ebx
c0014b9d:	eb bc                	jmp    c0014b5b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014b9f:	31 c0                	xor    eax,eax
c0014ba1:	5b                   	pop    ebx
c0014ba2:	5e                   	pop    esi
c0014ba3:	5f                   	pop    edi
c0014ba4:	c3                   	ret    

c0014ba5 <Thr::loadKernelSymbolTable(char const*)>:
c0014ba5:	55                   	push   ebp
c0014ba6:	57                   	push   edi
c0014ba7:	56                   	push   esi
c0014ba8:	53                   	push   ebx
c0014ba9:	83 ec 68             	sub    esp,0x68
c0014bac:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014bb2:	68 14 01 00 00       	push   0x114
c0014bb7:	e8 fa 2e ff ff       	call   c0007ab6 <malloc>
c0014bbc:	83 c4 0c             	add    esp,0xc
c0014bbf:	89 c3                	mov    ebx,eax
c0014bc1:	56                   	push   esi
c0014bc2:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014bc6:	50                   	push   eax
c0014bc7:	e8 40 6f ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c0014bcc:	5e                   	pop    esi
c0014bcd:	5f                   	pop    edi
c0014bce:	6a 01                	push   0x1
c0014bd0:	53                   	push   ebx
c0014bd1:	e8 54 6f ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c0014bd6:	83 c4 10             	add    esp,0x10
c0014bd9:	85 c0                	test   eax,eax
c0014bdb:	74 0a                	je     c0014be7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014bdd:	83 ec 0c             	sub    esp,0xc
c0014be0:	68 ff 26 02 c0       	push   0xc00226ff
c0014be5:	eb 34                	jmp    c0014c1b <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014be7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014bef:	83 ec 0c             	sub    esp,0xc
c0014bf2:	6a 34                	push   0x34
c0014bf4:	e8 bd 2e ff ff       	call   c0007ab6 <malloc>
c0014bf9:	59                   	pop    ecx
c0014bfa:	89 c7                	mov    edi,eax
c0014bfc:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014c00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c02:	56                   	push   esi
c0014c03:	57                   	push   edi
c0014c04:	6a 00                	push   0x0
c0014c06:	6a 34                	push   0x34
c0014c08:	53                   	push   ebx
c0014c09:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c0c:	83 c4 20             	add    esp,0x20
c0014c0f:	85 c0                	test   eax,eax
c0014c11:	74 17                	je     c0014c2a <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014c13:	83 ec 0c             	sub    esp,0xc
c0014c16:	68 16 27 02 c0       	push   0xc0022716
c0014c1b:	e8 bf c9 ff ff       	call   c00115df <KePanic(char const*)>
c0014c20:	83 c4 10             	add    esp,0x10
c0014c23:	31 c0                	xor    eax,eax
c0014c25:	e9 31 02 00 00       	jmp    c0014e5b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014c2a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014c30:	75 e1                	jne    c0014c13 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c32:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014c35:	85 c0                	test   eax,eax
c0014c37:	74 da                	je     c0014c13 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c39:	52                   	push   edx
c0014c3a:	31 d2                	xor    edx,edx
c0014c3c:	52                   	push   edx
c0014c3d:	50                   	push   eax
c0014c3e:	53                   	push   ebx
c0014c3f:	e8 a4 6f ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0014c44:	83 c4 10             	add    esp,0x10
c0014c47:	85 c0                	test   eax,eax
c0014c49:	75 c8                	jne    c0014c13 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c4b:	83 ec 0c             	sub    esp,0xc
c0014c4e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c52:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c56:	31 ed                	xor    ebp,ebp
c0014c58:	0f af c2             	imul   eax,edx
c0014c5b:	50                   	push   eax
c0014c5c:	e8 55 2e ff ff       	call   c0007ab6 <malloc>
c0014c61:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c67:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c6e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c72:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c76:	0f af c2             	imul   eax,edx
c0014c79:	99                   	cdq    
c0014c7a:	52                   	push   edx
c0014c7b:	50                   	push   eax
c0014c7c:	53                   	push   ebx
c0014c7d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c80:	83 c4 20             	add    esp,0x20
c0014c83:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c8b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c93:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014c9b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ca3:	0f b7 f5             	movzx  esi,bp
c0014ca6:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014caa:	0f 83 a7 00 00 00    	jae    c0014d57 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014cb0:	6b f6 28             	imul   esi,esi,0x28
c0014cb3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014cb7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014cba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014cbe:	50                   	push   eax
c0014cbf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014cc3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014cc7:	8b 16                	mov    edx,DWORD PTR [esi]
c0014cc9:	6b c0 28             	imul   eax,eax,0x28
c0014ccc:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014cd0:	89 d0                	mov    eax,edx
c0014cd2:	31 d2                	xor    edx,edx
c0014cd4:	52                   	push   edx
c0014cd5:	50                   	push   eax
c0014cd6:	53                   	push   ebx
c0014cd7:	e8 0c 6f ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0014cdc:	83 c4 0c             	add    esp,0xc
c0014cdf:	6a 20                	push   0x20
c0014ce1:	6a 00                	push   0x0
c0014ce3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014ce7:	52                   	push   edx
c0014ce8:	e8 03 b8 fe ff       	call   c00004f0 <memset>
c0014ced:	58                   	pop    eax
c0014cee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014cf0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014cf4:	51                   	push   ecx
c0014cf5:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014cf9:	52                   	push   edx
c0014cfa:	6a 00                	push   0x0
c0014cfc:	6a 1f                	push   0x1f
c0014cfe:	53                   	push   ebx
c0014cff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d02:	83 c4 18             	add    esp,0x18
c0014d05:	68 2d 27 02 c0       	push   0xc002272d
c0014d0a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d0e:	52                   	push   edx
c0014d0f:	e8 3c ba fe ff       	call   c0000750 <strcmp>
c0014d14:	83 c4 10             	add    esp,0x10
c0014d17:	85 c0                	test   eax,eax
c0014d19:	75 0f                	jne    c0014d2a <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014d1b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d2a:	50                   	push   eax
c0014d2b:	50                   	push   eax
c0014d2c:	68 35 27 02 c0       	push   0xc0022735
c0014d31:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014d35:	50                   	push   eax
c0014d36:	e8 15 ba fe ff       	call   c0000750 <strcmp>
c0014d3b:	83 c4 10             	add    esp,0x10
c0014d3e:	85 c0                	test   eax,eax
c0014d40:	75 0f                	jne    c0014d51 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014d42:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d45:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d4d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d51:	45                   	inc    ebp
c0014d52:	e9 4c ff ff ff       	jmp    c0014ca3 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014d57:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014d5c:	75 10                	jne    c0014d6e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014d5e:	83 ec 0c             	sub    esp,0xc
c0014d61:	68 3d 27 02 c0       	push   0xc002273d
c0014d66:	e8 74 c8 ff ff       	call   c00115df <KePanic(char const*)>
c0014d6b:	83 c4 10             	add    esp,0x10
c0014d6e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014d73:	75 10                	jne    c0014d85 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014d75:	83 ec 0c             	sub    esp,0xc
c0014d78:	68 3d 27 02 c0       	push   0xc002273d
c0014d7d:	e8 5d c8 ff ff       	call   c00115df <KePanic(char const*)>
c0014d82:	83 c4 10             	add    esp,0x10
c0014d85:	31 d2                	xor    edx,edx
c0014d87:	50                   	push   eax
c0014d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d8c:	52                   	push   edx
c0014d8d:	50                   	push   eax
c0014d8e:	53                   	push   ebx
c0014d8f:	e8 54 6e ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0014d94:	5a                   	pop    edx
c0014d95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d99:	e8 18 2d ff ff       	call   c0007ab6 <malloc>
c0014d9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014da2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014da6:	31 c9                	xor    ecx,ecx
c0014da8:	5e                   	pop    esi
c0014da9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dab:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014daf:	55                   	push   ebp
c0014db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014db4:	51                   	push   ecx
c0014db5:	52                   	push   edx
c0014db6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014dba:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014dbe:	53                   	push   ebx
c0014dbf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014dc2:	83 c4 14             	add    esp,0x14
c0014dc5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014dc9:	e8 e8 2c ff ff       	call   c0007ab6 <malloc>
c0014dce:	89 c6                	mov    esi,eax
c0014dd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dd2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014dd5:	56                   	push   esi
c0014dd6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014dda:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014dde:	51                   	push   ecx
c0014ddf:	52                   	push   edx
c0014de0:	53                   	push   ebx
c0014de1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014de4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014de8:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014dee:	83 c4 1c             	add    esp,0x1c
c0014df1:	c1 e8 04             	shr    eax,0x4
c0014df4:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014dfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014dff:	31 d2                	xor    edx,edx
c0014e01:	52                   	push   edx
c0014e02:	50                   	push   eax
c0014e03:	53                   	push   ebx
c0014e04:	e8 df 6d ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0014e09:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e0b:	31 d2                	xor    edx,edx
c0014e0d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e10:	56                   	push   esi
c0014e11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e15:	52                   	push   edx
c0014e16:	50                   	push   eax
c0014e17:	53                   	push   ebx
c0014e18:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e1b:	83 c4 14             	add    esp,0x14
c0014e1e:	53                   	push   ebx
c0014e1f:	e8 64 6d ff ff       	call   c000bb88 <File::close()>
c0014e24:	5d                   	pop    ebp
c0014e25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e29:	e8 98 2c ff ff       	call   c0007ac6 <free>
c0014e2e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014e31:	e8 90 2c ff ff       	call   c0007ac6 <free>
c0014e36:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014e3b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014e3f:	8d 50 01             	lea    edx,[eax+0x1]
c0014e42:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014e49:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014e50:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014e56:	83 c4 10             	add    esp,0x10
c0014e59:	b0 01                	mov    al,0x1
c0014e5b:	83 c4 5c             	add    esp,0x5c
c0014e5e:	5b                   	pop    ebx
c0014e5f:	5e                   	pop    esi
c0014e60:	5f                   	pop    edi
c0014e61:	5d                   	pop    ebp
c0014e62:	c3                   	ret    

c0014e63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014e63:	55                   	push   ebp
c0014e64:	57                   	push   edi
c0014e65:	56                   	push   esi
c0014e66:	53                   	push   ebx
c0014e67:	81 ec 68 03 00 00    	sub    esp,0x368
c0014e6d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014e74:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014e7a:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014e7e:	68 14 01 00 00       	push   0x114
c0014e83:	e8 2e 2c ff ff       	call   c0007ab6 <malloc>
c0014e88:	83 c4 0c             	add    esp,0xc
c0014e8b:	89 c5                	mov    ebp,eax
c0014e8d:	53                   	push   ebx
c0014e8e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014e95:	50                   	push   eax
c0014e96:	e8 71 6c ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c0014e9b:	5e                   	pop    esi
c0014e9c:	5f                   	pop    edi
c0014e9d:	6a 01                	push   0x1
c0014e9f:	55                   	push   ebp
c0014ea0:	e8 85 6c ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c0014ea5:	83 c4 10             	add    esp,0x10
c0014ea8:	85 c0                	test   eax,eax
c0014eaa:	0f 85 aa 06 00 00    	jne    c001555a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014eb0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014eb8:	83 ec 0c             	sub    esp,0xc
c0014ebb:	6a 34                	push   0x34
c0014ebd:	e8 f4 2b ff ff       	call   c0007ab6 <malloc>
c0014ec2:	5b                   	pop    ebx
c0014ec3:	89 c7                	mov    edi,eax
c0014ec5:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014ec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014ecc:	53                   	push   ebx
c0014ecd:	57                   	push   edi
c0014ece:	6a 00                	push   0x0
c0014ed0:	6a 34                	push   0x34
c0014ed2:	55                   	push   ebp
c0014ed3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ed6:	83 c4 20             	add    esp,0x20
c0014ed9:	85 c0                	test   eax,eax
c0014edb:	0f 85 79 06 00 00    	jne    c001555a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ee1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014ee7:	0f 85 6d 06 00 00    	jne    c001555a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014eed:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014ef0:	85 c0                	test   eax,eax
c0014ef2:	0f 84 62 06 00 00    	je     c001555a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ef8:	31 d2                	xor    edx,edx
c0014efa:	51                   	push   ecx
c0014efb:	52                   	push   edx
c0014efc:	50                   	push   eax
c0014efd:	55                   	push   ebp
c0014efe:	e8 e5 6c ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0014f03:	83 c4 10             	add    esp,0x10
c0014f06:	85 c0                	test   eax,eax
c0014f08:	0f 85 4c 06 00 00    	jne    c001555a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f0e:	83 ec 0c             	sub    esp,0xc
c0014f11:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014f14:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014f18:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014f1c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f20:	0f af c2             	imul   eax,edx
c0014f23:	50                   	push   eax
c0014f24:	e8 8d 2b ff ff       	call   c0007ab6 <malloc>
c0014f29:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f37:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014f3b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f3f:	0f af c2             	imul   eax,edx
c0014f42:	99                   	cdq    
c0014f43:	52                   	push   edx
c0014f44:	50                   	push   eax
c0014f45:	55                   	push   ebp
c0014f46:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f49:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014f4c:	83 c4 20             	add    esp,0x20
c0014f4f:	85 c0                	test   eax,eax
c0014f51:	0f 84 03 06 00 00    	je     c001555a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f57:	52                   	push   edx
c0014f58:	31 d2                	xor    edx,edx
c0014f5a:	52                   	push   edx
c0014f5b:	50                   	push   eax
c0014f5c:	55                   	push   ebp
c0014f5d:	e8 86 6c ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0014f62:	83 c4 10             	add    esp,0x10
c0014f65:	85 c0                	test   eax,eax
c0014f67:	0f 85 ed 05 00 00    	jne    c001555a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f6d:	83 ec 0c             	sub    esp,0xc
c0014f70:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014f74:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014f78:	31 f6                	xor    esi,esi
c0014f7a:	0f af c2             	imul   eax,edx
c0014f7d:	50                   	push   eax
c0014f7e:	e8 33 2b ff ff       	call   c0007ab6 <malloc>
c0014f83:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014f8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f8d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f91:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014f95:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014f99:	0f af c2             	imul   eax,edx
c0014f9c:	99                   	cdq    
c0014f9d:	52                   	push   edx
c0014f9e:	50                   	push   eax
c0014f9f:	55                   	push   ebp
c0014fa0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fa3:	83 c4 20             	add    esp,0x20
c0014fa6:	0f b7 de             	movzx  ebx,si
c0014fa9:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014fad:	0f 83 87 00 00 00    	jae    c001503a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014fb3:	c1 e3 05             	shl    ebx,0x5
c0014fb6:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014fba:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014fbd:	75 75                	jne    c0015034 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014fbf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014fc2:	31 d2                	xor    edx,edx
c0014fc4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fc8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014fcb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014fcf:	50                   	push   eax
c0014fd0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014fd3:	52                   	push   edx
c0014fd4:	50                   	push   eax
c0014fd5:	55                   	push   ebp
c0014fd6:	e8 0d 6c ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0014fdb:	83 c4 10             	add    esp,0x10
c0014fde:	85 c0                	test   eax,eax
c0014fe0:	0f 85 74 05 00 00    	jne    c001555a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fe6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014fed:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014ff0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014ff4:	31 d2                	xor    edx,edx
c0014ff6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014ffa:	83 ec 0c             	sub    esp,0xc
c0014ffd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015001:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015008:	50                   	push   eax
c0015009:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001500d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015011:	52                   	push   edx
c0015012:	50                   	push   eax
c0015013:	55                   	push   ebp
c0015014:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015017:	83 c4 1c             	add    esp,0x1c
c001501a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001501d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015020:	50                   	push   eax
c0015021:	6a 00                	push   0x0
c0015023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015027:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001502b:	50                   	push   eax
c001502c:	e8 bf b4 fe ff       	call   c00004f0 <memset>
c0015031:	83 c4 10             	add    esp,0x10
c0015034:	46                   	inc    esi
c0015035:	e9 6c ff ff ff       	jmp    c0014fa6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001503a:	53                   	push   ebx
c001503b:	31 db                	xor    ebx,ebx
c001503d:	68 00 01 00 00       	push   0x100
c0015042:	6a 00                	push   0x0
c0015044:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015048:	50                   	push   eax
c0015049:	e8 a2 b4 fe ff       	call   c00004f0 <memset>
c001504e:	83 c4 0c             	add    esp,0xc
c0015051:	68 00 01 00 00       	push   0x100
c0015056:	6a 00                	push   0x0
c0015058:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001505f:	50                   	push   eax
c0015060:	e8 8b b4 fe ff       	call   c00004f0 <memset>
c0015065:	83 c4 10             	add    esp,0x10
c0015068:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015070:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015078:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015080:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015088:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015090:	0f b7 f3             	movzx  esi,bx
c0015093:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0015097:	0f 83 2d 01 00 00    	jae    c00151ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001509d:	6b f6 28             	imul   esi,esi,0x28
c00150a0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00150a4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00150a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150ab:	52                   	push   edx
c00150ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00150b0:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00150b4:	8b 06                	mov    eax,DWORD PTR [esi]
c00150b6:	6b d2 28             	imul   edx,edx,0x28
c00150b9:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00150bd:	31 d2                	xor    edx,edx
c00150bf:	52                   	push   edx
c00150c0:	50                   	push   eax
c00150c1:	55                   	push   ebp
c00150c2:	e8 21 6b ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c00150c7:	83 c4 0c             	add    esp,0xc
c00150ca:	6a 20                	push   0x20
c00150cc:	6a 00                	push   0x0
c00150ce:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00150d5:	51                   	push   ecx
c00150d6:	e8 15 b4 fe ff       	call   c00004f0 <memset>
c00150db:	59                   	pop    ecx
c00150dc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00150df:	8d 54 24 58          	lea    edx,[esp+0x58]
c00150e3:	52                   	push   edx
c00150e4:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00150eb:	51                   	push   ecx
c00150ec:	6a 00                	push   0x0
c00150ee:	6a 1f                	push   0x1f
c00150f0:	55                   	push   ebp
c00150f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00150f4:	83 c4 1c             	add    esp,0x1c
c00150f7:	6a 09                	push   0x9
c00150f9:	68 57 27 02 c0       	push   0xc0022757
c00150fe:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015105:	51                   	push   ecx
c0015106:	e8 75 b2 fe ff       	call   c0000380 <memcmp>
c001510b:	83 c4 10             	add    esp,0x10
c001510e:	85 c0                	test   eax,eax
c0015110:	75 21                	jne    c0015133 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015116:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001511a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001511e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015122:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015125:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001512c:	89 d0                	mov    eax,edx
c001512e:	40                   	inc    eax
c001512f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015133:	50                   	push   eax
c0015134:	6a 09                	push   0x9
c0015136:	68 61 27 02 c0       	push   0xc0022761
c001513b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015142:	50                   	push   eax
c0015143:	e8 38 b2 fe ff       	call   c0000380 <memcmp>
c0015148:	83 c4 10             	add    esp,0x10
c001514b:	85 c0                	test   eax,eax
c001514d:	75 21                	jne    c0015170 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001514f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015153:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015157:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001515b:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c001515f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015162:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015169:	89 d0                	mov    eax,edx
c001516b:	40                   	inc    eax
c001516c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015170:	50                   	push   eax
c0015171:	50                   	push   eax
c0015172:	68 2d 27 02 c0       	push   0xc002272d
c0015177:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001517e:	50                   	push   eax
c001517f:	e8 cc b5 fe ff       	call   c0000750 <strcmp>
c0015184:	83 c4 10             	add    esp,0x10
c0015187:	85 c0                	test   eax,eax
c0015189:	75 0f                	jne    c001519a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001518b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001518e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015192:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015196:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001519a:	50                   	push   eax
c001519b:	50                   	push   eax
c001519c:	68 35 27 02 c0       	push   0xc0022735
c00151a1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151a8:	50                   	push   eax
c00151a9:	e8 a2 b5 fe ff       	call   c0000750 <strcmp>
c00151ae:	83 c4 10             	add    esp,0x10
c00151b1:	85 c0                	test   eax,eax
c00151b3:	75 0f                	jne    c00151c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00151b5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00151b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00151bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00151c4:	43                   	inc    ebx
c00151c5:	e9 c6 fe ff ff       	jmp    c0015090 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00151ca:	31 d2                	xor    edx,edx
c00151cc:	50                   	push   eax
c00151cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151d1:	52                   	push   edx
c00151d2:	50                   	push   eax
c00151d3:	55                   	push   ebp
c00151d4:	e8 0f 6a ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c00151d9:	58                   	pop    eax
c00151da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00151de:	e8 d3 28 ff ff       	call   c0007ab6 <malloc>
c00151e3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00151e6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00151ea:	31 d2                	xor    edx,edx
c00151ec:	58                   	pop    eax
c00151ed:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00151f1:	53                   	push   ebx
c00151f2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00151f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00151fa:	52                   	push   edx
c00151fb:	50                   	push   eax
c00151fc:	55                   	push   ebp
c00151fd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015200:	83 c4 14             	add    esp,0x14
c0015203:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015207:	e8 aa 28 ff ff       	call   c0007ab6 <malloc>
c001520c:	31 d2                	xor    edx,edx
c001520e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015212:	83 c4 0c             	add    esp,0xc
c0015215:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015219:	52                   	push   edx
c001521a:	50                   	push   eax
c001521b:	55                   	push   ebp
c001521c:	e8 c7 69 ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c0015221:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015224:	31 d2                	xor    edx,edx
c0015226:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015229:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001522d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015231:	52                   	push   edx
c0015232:	50                   	push   eax
c0015233:	55                   	push   ebp
c0015234:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015237:	83 c4 20             	add    esp,0x20
c001523a:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c001523f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015247:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001524b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001524f:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0015253:	0f 84 05 03 00 00    	je     c001555e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0015259:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0015260:	31 d2                	xor    edx,edx
c0015262:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015266:	c1 e8 03             	shr    eax,0x3
c0015269:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001526d:	51                   	push   ecx
c001526e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015272:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015276:	52                   	push   edx
c0015277:	50                   	push   eax
c0015278:	55                   	push   ebp
c0015279:	e8 6a 69 ff ff       	call   c000bbe8 <File::seek(unsigned long long)>
c001527e:	5b                   	pop    ebx
c001527f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015283:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001528a:	e8 27 28 ff ff       	call   c0007ab6 <malloc>
c001528f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015292:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015296:	31 d2                	xor    edx,edx
c0015298:	5e                   	pop    esi
c0015299:	8d 44 24 58          	lea    eax,[esp+0x58]
c001529d:	50                   	push   eax
c001529e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152a6:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00152ad:	52                   	push   edx
c00152ae:	50                   	push   eax
c00152af:	55                   	push   ebp
c00152b0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152b3:	83 c4 20             	add    esp,0x20
c00152b6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00152be:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00152c2:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00152c6:	0f 8d 76 02 00 00    	jge    c0015542 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00152cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00152d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152d4:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00152d9:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00152dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00152e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152e4:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00152e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00152ec:	c1 e8 08             	shr    eax,0x8
c00152ef:	89 c6                	mov    esi,eax
c00152f1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00152f5:	c1 e6 04             	shl    esi,0x4
c00152f8:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00152fc:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00152ff:	85 db                	test   ebx,ebx
c0015301:	0f 85 b3 00 00 00    	jne    c00153ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015307:	83 ec 0c             	sub    esp,0xc
c001530a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001530e:	03 06                	add    eax,DWORD PTR [esi]
c0015310:	50                   	push   eax
c0015311:	e8 40 f8 ff ff       	call   c0014b56 <Thr::getAddressOfKernelSymbol(char const*)>
c0015316:	83 c4 10             	add    esp,0x10
c0015319:	89 c3                	mov    ebx,eax
c001531b:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0015320:	85 c0                	test   eax,eax
c0015322:	0f 85 92 00 00 00    	jne    c00153ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015328:	83 ec 0c             	sub    esp,0xc
c001532b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001532f:	03 06                	add    eax,DWORD PTR [esi]
c0015331:	50                   	push   eax
c0015332:	e8 95 c4 ff ff       	call   c00117cc <KeResolveCompatibilitySymbol(char*)>
c0015337:	83 c4 10             	add    esp,0x10
c001533a:	89 c3                	mov    ebx,eax
c001533c:	85 c0                	test   eax,eax
c001533e:	75 7a                	jne    c00153ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015340:	51                   	push   ecx
c0015341:	51                   	push   ecx
c0015342:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015346:	03 06                	add    eax,DWORD PTR [esi]
c0015348:	50                   	push   eax
c0015349:	68 6b 27 02 c0       	push   0xc002276b
c001534e:	e8 f2 55 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015353:	58                   	pop    eax
c0015354:	5a                   	pop    edx
c0015355:	68 85 27 02 c0       	push   0xc0022785
c001535a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015361:	50                   	push   eax
c0015362:	e8 d9 b2 fe ff       	call   c0000640 <strcpy>
c0015367:	59                   	pop    ecx
c0015368:	58                   	pop    eax
c0015369:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001536d:	03 06                	add    eax,DWORD PTR [esi]
c001536f:	50                   	push   eax
c0015370:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015377:	50                   	push   eax
c0015378:	e8 c3 b4 fe ff       	call   c0000840 <strcat>
c001537d:	58                   	pop    eax
c001537e:	5a                   	pop    edx
c001537f:	68 1b 28 02 c0       	push   0xc002281b
c0015384:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001538b:	50                   	push   eax
c001538c:	e8 af b4 fe ff       	call   c0000840 <strcat>
c0015391:	83 c4 10             	add    esp,0x10
c0015394:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015399:	0f 84 5d 01 00 00    	je     c00154fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001539f:	83 ec 0c             	sub    esp,0xc
c00153a2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00153a9:	50                   	push   eax
c00153aa:	e8 30 c2 ff ff       	call   c00115df <KePanic(char const*)>
c00153af:	83 c4 10             	add    esp,0x10
c00153b2:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00153b6:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c00153ba:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00153bf:	83 f8 01             	cmp    eax,0x1
c00153c2:	0f 85 8f 00 00 00    	jne    c0015457 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c00153c8:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00153cf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00153d3:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00153d7:	01 ce                	add    esi,ecx
c00153d9:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00153e1:	0f 94 c0             	sete   al
c00153e4:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00153ec:	0f 94 c2             	sete   dl
c00153ef:	09 c2                	or     edx,eax
c00153f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00153f3:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00153f8:	0f b6 d2             	movzx  edx,dl
c00153fb:	74 41                	je     c001543e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00153fd:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0015400:	85 d2                	test   edx,edx
c0015402:	75 15                	jne    c0015419 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0015404:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015408:	66 83 f8 0c          	cmp    ax,0xc
c001540c:	76 05                	jbe    c0015413 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c001540e:	b8 0c 00 00 00       	mov    eax,0xc
c0015413:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015417:	76 37                	jbe    c0015450 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015419:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001541d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015422:	0f 84 d4 00 00 00    	je     c00154fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015428:	83 ec 0c             	sub    esp,0xc
c001542b:	68 9c 27 02 c0       	push   0xc002279c
c0015430:	e8 aa c1 ff ff       	call   c00115df <KePanic(char const*)>
c0015435:	83 c4 10             	add    esp,0x10
c0015438:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001543c:	eb 12                	jmp    c0015450 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001543e:	01 c1                	add    ecx,eax
c0015440:	85 d2                	test   edx,edx
c0015442:	75 0c                	jne    c0015450 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015444:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015448:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001544c:	77 02                	ja     c0015450 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001544e:	01 d9                	add    ecx,ebx
c0015450:	89 0e                	mov    DWORD PTR [esi],ecx
c0015452:	e9 e2 00 00 00       	jmp    c0015539 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015457:	83 f8 02             	cmp    eax,0x2
c001545a:	75 77                	jne    c00154d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c001545c:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0015463:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0015467:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c001546b:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015473:	74 21                	je     c0015496 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015475:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001547d:	74 17                	je     c0015496 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001547f:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0015483:	b8 0a 00 00 00       	mov    eax,0xa
c0015488:	83 fa 0e             	cmp    edx,0xe
c001548b:	77 03                	ja     c0015490 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c001548d:	8d 42 fc             	lea    eax,[edx-0x4]
c0015490:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015494:	76 17                	jbe    c00154ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0015496:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001549b:	74 5f                	je     c00154fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001549d:	83 ec 0c             	sub    esp,0xc
c00154a0:	68 b8 27 02 c0       	push   0xc00227b8
c00154a5:	e8 35 c1 ff ff       	call   c00115df <KePanic(char const*)>
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00154af:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00154b4:	74 13                	je     c00154c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c00154b6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00154ba:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00154c1:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00154c5:	01 d0                	add    eax,edx
c00154c7:	eb 04                	jmp    c00154cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00154c9:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00154cd:	01 c3                	add    ebx,eax
c00154cf:	89 1e                	mov    DWORD PTR [esi],ebx
c00154d1:	eb 66                	jmp    c0015539 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00154d3:	52                   	push   edx
c00154d4:	52                   	push   edx
c00154d5:	50                   	push   eax
c00154d6:	68 d4 27 02 c0       	push   0xc00227d4
c00154db:	e8 65 54 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00154e0:	83 c4 10             	add    esp,0x10
c00154e3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00154e8:	74 12                	je     c00154fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00154ea:	83 ec 0c             	sub    esp,0xc
c00154ed:	68 df 27 02 c0       	push   0xc00227df
c00154f2:	e8 e8 c0 ff ff       	call   c00115df <KePanic(char const*)>
c00154f7:	83 c4 10             	add    esp,0x10
c00154fa:	eb 3d                	jmp    c0015539 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00154fc:	83 ec 0c             	sub    esp,0xc
c00154ff:	55                   	push   ebp
c0015500:	e8 83 66 ff ff       	call   c000bb88 <File::close()>
c0015505:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015508:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001550b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001550e:	59                   	pop    ecx
c001550f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015513:	e8 ae 25 ff ff       	call   c0007ac6 <free>
c0015518:	5b                   	pop    ebx
c0015519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001551d:	e8 a4 25 ff ff       	call   c0007ac6 <free>
c0015522:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015525:	e8 9c 25 ff ff       	call   c0007ac6 <free>
c001552a:	5e                   	pop    esi
c001552b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001552f:	e8 92 25 ff ff       	call   c0007ac6 <free>
c0015534:	83 c4 10             	add    esp,0x10
c0015537:	eb 21                	jmp    c001555a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015539:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001553d:	e9 7c fd ff ff       	jmp    c00152be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0015542:	83 ec 0c             	sub    esp,0xc
c0015545:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015549:	e8 78 25 ff ff       	call   c0007ac6 <free>
c001554e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015552:	83 c4 10             	add    esp,0x10
c0015555:	e9 f1 fc ff ff       	jmp    c001524b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c001555a:	31 c0                	xor    eax,eax
c001555c:	eb 33                	jmp    c0015591 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c001555e:	83 ec 0c             	sub    esp,0xc
c0015561:	55                   	push   ebp
c0015562:	e8 21 66 ff ff       	call   c000bb88 <File::close()>
c0015567:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001556a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001556d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015570:	58                   	pop    eax
c0015571:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015575:	e8 4c 25 ff ff       	call   c0007ac6 <free>
c001557a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001557d:	e8 44 25 ff ff       	call   c0007ac6 <free>
c0015582:	5a                   	pop    edx
c0015583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015587:	e8 3a 25 ff ff       	call   c0007ac6 <free>
c001558c:	83 c4 10             	add    esp,0x10
c001558f:	b0 01                	mov    al,0x1
c0015591:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015597:	5b                   	pop    ebx
c0015598:	5e                   	pop    esi
c0015599:	5f                   	pop    edi
c001559a:	5d                   	pop    ebp
c001559b:	c3                   	ret    

c001559c <Thr::getDriverBaseFromAddress(unsigned long)>:
c001559c:	56                   	push   esi
c001559d:	31 d2                	xor    edx,edx
c001559f:	53                   	push   ebx
c00155a0:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00155a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00155aa:	39 d3                	cmp    ebx,edx
c00155ac:	7e 1b                	jle    c00155c9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00155ae:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c00155b5:	39 c8                	cmp    eax,ecx
c00155b7:	77 0d                	ja     c00155c6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00155b9:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c00155c0:	01 c6                	add    esi,eax
c00155c2:	39 ce                	cmp    esi,ecx
c00155c4:	77 05                	ja     c00155cb <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00155c6:	42                   	inc    edx
c00155c7:	eb e1                	jmp    c00155aa <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00155c9:	31 c0                	xor    eax,eax
c00155cb:	5b                   	pop    ebx
c00155cc:	5e                   	pop    esi
c00155cd:	c3                   	ret    

c00155ce <Thr::getDriverNameFromAddress(unsigned long)>:
c00155ce:	53                   	push   ebx
c00155cf:	31 c0                	xor    eax,eax
c00155d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00155d5:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00155db:	39 c3                	cmp    ebx,eax
c00155dd:	7e 22                	jle    c0015601 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00155df:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c00155e6:	39 ca                	cmp    edx,ecx
c00155e8:	77 14                	ja     c00155fe <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00155ea:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c00155f1:	39 ca                	cmp    edx,ecx
c00155f3:	76 09                	jbe    c00155fe <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00155f5:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c00155fc:	eb 05                	jmp    c0015603 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00155fe:	40                   	inc    eax
c00155ff:	eb da                	jmp    c00155db <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015601:	31 c0                	xor    eax,eax
c0015603:	5b                   	pop    ebx
c0015604:	c3                   	ret    

c0015605 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015605:	53                   	push   ebx
c0015606:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001560a:	53                   	push   ebx
c001560b:	e8 8c ff ff ff       	call   c001559c <Thr::getDriverBaseFromAddress(unsigned long)>
c0015610:	5a                   	pop    edx
c0015611:	31 d2                	xor    edx,edx
c0015613:	85 c0                	test   eax,eax
c0015615:	74 04                	je     c001561b <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015617:	89 da                	mov    edx,ebx
c0015619:	29 c2                	sub    edx,eax
c001561b:	89 d0                	mov    eax,edx
c001561d:	5b                   	pop    ebx
c001561e:	c3                   	ret    

c001561f <Thr::loadDLL(char const*, bool)>:
c001561f:	55                   	push   ebp
c0015620:	57                   	push   edi
c0015621:	56                   	push   esi
c0015622:	53                   	push   ebx
c0015623:	81 ec 34 01 00 00    	sub    esp,0x134
c0015629:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015630:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015637:	56                   	push   esi
c0015638:	68 f7 27 02 c0       	push   0xc00227f7
c001563d:	e8 03 53 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015642:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015649:	e8 68 24 ff ff       	call   c0007ab6 <malloc>
c001564e:	83 c4 0c             	add    esp,0xc
c0015651:	89 c3                	mov    ebx,eax
c0015653:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015659:	56                   	push   esi
c001565a:	50                   	push   eax
c001565b:	e8 ac 64 ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c0015660:	83 c4 10             	add    esp,0x10
c0015663:	85 db                	test   ebx,ebx
c0015665:	75 3c                	jne    c00156a3 <Thr::loadDLL(char const*, bool)+0x84>
c0015667:	89 f8                	mov    eax,edi
c0015669:	84 c0                	test   al,al
c001566b:	0f 84 d2 01 00 00    	je     c0015843 <Thr::loadDLL(char const*, bool)+0x224>
c0015671:	55                   	push   ebp
c0015672:	55                   	push   ebp
c0015673:	68 08 28 02 c0       	push   0xc0022808
c0015678:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001567c:	55                   	push   ebp
c001567d:	e8 be af fe ff       	call   c0000640 <strcpy>
c0015682:	58                   	pop    eax
c0015683:	5a                   	pop    edx
c0015684:	56                   	push   esi
c0015685:	55                   	push   ebp
c0015686:	e8 b5 b1 fe ff       	call   c0000840 <strcat>
c001568b:	59                   	pop    ecx
c001568c:	58                   	pop    eax
c001568d:	68 1b 28 02 c0       	push   0xc002281b
c0015692:	55                   	push   ebp
c0015693:	e8 a8 b1 fe ff       	call   c0000840 <strcat>
c0015698:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001569b:	e8 3f bf ff ff       	call   c00115df <KePanic(char const*)>
c00156a0:	83 c4 10             	add    esp,0x10
c00156a3:	51                   	push   ecx
c00156a4:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00156a8:	50                   	push   eax
c00156a9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00156ad:	50                   	push   eax
c00156ae:	53                   	push   ebx
c00156af:	e8 78 67 ff ff       	call   c000be2c <File::stat(unsigned long long*, bool*)>
c00156b4:	83 c4 10             	add    esp,0x10
c00156b7:	85 db                	test   ebx,ebx
c00156b9:	74 0c                	je     c00156c7 <Thr::loadDLL(char const*, bool)+0xa8>
c00156bb:	83 ec 0c             	sub    esp,0xc
c00156be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156c0:	53                   	push   ebx
c00156c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156c4:	83 c4 10             	add    esp,0x10
c00156c7:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00156cc:	75 0a                	jne    c00156d8 <Thr::loadDLL(char const*, bool)+0xb9>
c00156ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00156d2:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00156d6:	75 3c                	jne    c0015714 <Thr::loadDLL(char const*, bool)+0xf5>
c00156d8:	89 f8                	mov    eax,edi
c00156da:	84 c0                	test   al,al
c00156dc:	0f 84 49 01 00 00    	je     c001582b <Thr::loadDLL(char const*, bool)+0x20c>
c00156e2:	51                   	push   ecx
c00156e3:	51                   	push   ecx
c00156e4:	68 08 28 02 c0       	push   0xc0022808
c00156e9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00156ed:	53                   	push   ebx
c00156ee:	e8 4d af fe ff       	call   c0000640 <strcpy>
c00156f3:	5d                   	pop    ebp
c00156f4:	58                   	pop    eax
c00156f5:	56                   	push   esi
c00156f6:	53                   	push   ebx
c00156f7:	e8 44 b1 fe ff       	call   c0000840 <strcat>
c00156fc:	58                   	pop    eax
c00156fd:	5a                   	pop    edx
c00156fe:	68 1b 28 02 c0       	push   0xc002281b
c0015703:	53                   	push   ebx
c0015704:	e8 37 b1 fe ff       	call   c0000840 <strcat>
c0015709:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001570c:	e8 ce be ff ff       	call   c00115df <KePanic(char const*)>
c0015711:	83 c4 10             	add    esp,0x10
c0015714:	52                   	push   edx
c0015715:	6a 03                	push   0x3
c0015717:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001571b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001571f:	05 ff 0f 00 00       	add    eax,0xfff
c0015724:	83 d2 00             	adc    edx,0x0
c0015727:	0f ac d0 0c          	shrd   eax,edx,0xc
c001572b:	50                   	push   eax
c001572c:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015732:	e8 ed 46 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0015737:	59                   	pop    ecx
c0015738:	89 c3                	mov    ebx,eax
c001573a:	5d                   	pop    ebp
c001573b:	50                   	push   eax
c001573c:	68 72 0d 02 c0       	push   0xc0020d72
c0015741:	e8 ff 51 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015746:	89 34 24             	mov    DWORD PTR [esp],esi
c0015749:	e8 22 ae fe ff       	call   c0000570 <strlen>
c001574e:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c0015754:	40                   	inc    eax
c0015755:	89 04 24             	mov    DWORD PTR [esp],eax
c0015758:	e8 59 23 ff ff       	call   c0007ab6 <malloc>
c001575d:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c0015764:	58                   	pop    eax
c0015765:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c001576a:	5a                   	pop    edx
c001576b:	56                   	push   esi
c001576c:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c0015773:	e8 c8 ae fe ff       	call   c0000640 <strcpy>
c0015778:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c001577d:	8d 50 01             	lea    edx,[eax+0x1]
c0015780:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c0015787:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c001578d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015791:	83 c4 0c             	add    esp,0xc
c0015794:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c001579b:	6a 01                	push   0x1
c001579d:	53                   	push   ebx
c001579e:	56                   	push   esi
c001579f:	e8 bf f6 ff ff       	call   c0014e63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00157a4:	83 c4 10             	add    esp,0x10
c00157a7:	0f b6 c0             	movzx  eax,al
c00157aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00157ae:	85 c0                	test   eax,eax
c00157b0:	0f 85 89 00 00 00    	jne    c001583f <Thr::loadDLL(char const*, bool)+0x220>
c00157b6:	89 f8                	mov    eax,edi
c00157b8:	84 c0                	test   al,al
c00157ba:	74 73                	je     c001582f <Thr::loadDLL(char const*, bool)+0x210>
c00157bc:	83 ec 0c             	sub    esp,0xc
c00157bf:	68 1d 28 02 c0       	push   0xc002281d
c00157c4:	e8 16 be ff ff       	call   c00115df <KePanic(char const*)>
c00157c9:	83 c4 10             	add    esp,0x10
c00157cc:	eb 61                	jmp    c001582f <Thr::loadDLL(char const*, bool)+0x210>
c00157ce:	50                   	push   eax
c00157cf:	50                   	push   eax
c00157d0:	89 e8                	mov    eax,ebp
c00157d2:	c1 e0 0c             	shl    eax,0xc
c00157d5:	01 d8                	add    eax,ebx
c00157d7:	50                   	push   eax
c00157d8:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00157de:	e8 29 41 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00157e3:	83 c4 10             	add    esp,0x10
c00157e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e8:	a8 60                	test   al,0x60
c00157ea:	75 11                	jne    c00157fd <Thr::loadDLL(char const*, bool)+0x1de>
c00157ec:	83 ec 0c             	sub    esp,0xc
c00157ef:	25 00 f0 ff ff       	and    eax,0xfffff000
c00157f4:	50                   	push   eax
c00157f5:	e8 5c 25 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00157fa:	83 c4 10             	add    esp,0x10
c00157fd:	45                   	inc    ebp
c00157fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015802:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015806:	05 ff 0f 00 00       	add    eax,0xfff
c001580b:	bf 00 00 00 00       	mov    edi,0x0
c0015810:	83 d2 00             	adc    edx,0x0
c0015813:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015817:	c1 ea 0c             	shr    edx,0xc
c001581a:	39 c5                	cmp    ebp,eax
c001581c:	89 d1                	mov    ecx,edx
c001581e:	89 f8                	mov    eax,edi
c0015820:	19 c8                	sbb    eax,ecx
c0015822:	72 aa                	jb     c00157ce <Thr::loadDLL(char const*, bool)+0x1af>
c0015824:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015829:	75 18                	jne    c0015843 <Thr::loadDLL(char const*, bool)+0x224>
c001582b:	31 db                	xor    ebx,ebx
c001582d:	eb 14                	jmp    c0015843 <Thr::loadDLL(char const*, bool)+0x224>
c001582f:	83 ec 0c             	sub    esp,0xc
c0015832:	68 3c 28 02 c0       	push   0xc002283c
c0015837:	e8 a3 bd ff ff       	call   c00115df <KePanic(char const*)>
c001583c:	83 c4 10             	add    esp,0x10
c001583f:	31 ed                	xor    ebp,ebp
c0015841:	eb bb                	jmp    c00157fe <Thr::loadDLL(char const*, bool)+0x1df>
c0015843:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015849:	89 d8                	mov    eax,ebx
c001584b:	5b                   	pop    ebx
c001584c:	5e                   	pop    esi
c001584d:	5f                   	pop    edi
c001584e:	5d                   	pop    ebp
c001584f:	c3                   	ret    

c0015850 <Thr::executeDLL(unsigned long, void*)>:
c0015850:	56                   	push   esi
c0015851:	53                   	push   ebx
c0015852:	52                   	push   edx
c0015853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015857:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001585b:	85 db                	test   ebx,ebx
c001585d:	75 10                	jne    c001586f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001585f:	83 ec 0c             	sub    esp,0xc
c0015862:	68 58 28 02 c0       	push   0xc0022858
c0015867:	e8 73 bd ff ff       	call   c00115df <KePanic(char const*)>
c001586c:	83 c4 10             	add    esp,0x10
c001586f:	50                   	push   eax
c0015870:	50                   	push   eax
c0015871:	53                   	push   ebx
c0015872:	68 82 28 02 c0       	push   0xc0022882
c0015877:	e8 c9 50 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001587c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015880:	89 d8                	mov    eax,ebx
c0015882:	83 c4 14             	add    esp,0x14
c0015885:	5b                   	pop    ebx
c0015886:	5e                   	pop    esi
c0015887:	ff e0                	jmp    eax
c0015889:	66 90                	xchg   ax,ax
c001588b:	90                   	nop

c001588c <userModeEntryPoint(void*)>:
c001588c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015891:	83 e8 01             	sub    eax,0x1
c0015894:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015899:	75 01                	jne    c001589c <userModeEntryPoint(void*)+0x10>
c001589b:	fb                   	sti    
c001589c:	fb                   	sti    
c001589d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158a5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00158ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00158af:	e9 8b a9 fe ff       	jmp    c000023f <goToUsermode>

c00158b4 <changeTSS>:
c00158b4:	83 ec 14             	sub    esp,0x14
c00158b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158bc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158bf:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00158c4:	c1 e2 15             	shl    edx,0x15
c00158c7:	29 d0                	sub    eax,edx
c00158c9:	50                   	push   eax
c00158ca:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00158cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00158d5:	05 7c 11 00 00       	add    eax,0x117c
c00158da:	50                   	push   eax
c00158db:	e8 74 36 ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c00158e0:	83 c4 1c             	add    esp,0x1c
c00158e3:	c3                   	ret    

c00158e4 <switchToThread(ThreadControlBlock*)>:
c00158e4:	57                   	push   edi
c00158e5:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00158eb:	56                   	push   esi
c00158ec:	85 c9                	test   ecx,ecx
c00158ee:	53                   	push   ebx
c00158ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158f3:	0f 85 8b 00 00 00    	jne    c0015984 <switchToThread(ThreadControlBlock*)+0xa0>
c00158f9:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00158fd:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015903:	74 7b                	je     c0015980 <switchToThread(ThreadControlBlock*)+0x9c>
c0015905:	b8 00 04 00 00       	mov    eax,0x400
c001590a:	29 d0                	sub    eax,edx
c001590c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001590f:	d1 f8                	sar    eax,1
c0015911:	01 d0                	add    eax,edx
c0015913:	90                   	nop
c0015914:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015917:	e8 1e 28 00 00       	call   c001813a <HalQueryPerformanceCounter()>
c001591c:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015921:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c0015927:	89 c6                	mov    esi,eax
c0015929:	89 d7                	mov    edi,edx
c001592b:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015931:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015936:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c001593c:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015942:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015948:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001594e:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015954:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015957:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001595a:	01 c6                	add    esi,eax
c001595c:	11 d7                	adc    edi,edx
c001595e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015961:	83 ec 0c             	sub    esp,0xc
c0015964:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015967:	53                   	push   ebx
c0015968:	e8 0a a9 fe ff       	call   c0000277 <switchToThreadASM>
c001596d:	0f 20 c0             	mov    eax,cr0
c0015970:	83 c8 08             	or     eax,0x8
c0015973:	0f 22 c0             	mov    cr0,eax
c0015976:	83 c4 10             	add    esp,0x10
c0015979:	5b                   	pop    ebx
c001597a:	5e                   	pop    esi
c001597b:	5f                   	pop    edi
c001597c:	c3                   	ret    
c001597d:	8d 76 00             	lea    esi,[esi+0x0]
c0015980:	31 c0                	xor    eax,eax
c0015982:	eb 90                	jmp    c0015914 <switchToThread(ThreadControlBlock*)+0x30>
c0015984:	5b                   	pop    ebx
c0015985:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c001598f:	5e                   	pop    esi
c0015990:	5f                   	pop    edi
c0015991:	c3                   	ret    
c0015992:	66 90                	xchg   ax,ax

c0015994 <Process::addArgs(char**)>:
c0015994:	57                   	push   edi
c0015995:	56                   	push   esi
c0015996:	53                   	push   ebx
c0015997:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001599b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001599f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00159a9:	85 ff                	test   edi,edi
c00159ab:	74 4f                	je     c00159fc <Process::addArgs(char**)+0x68>
c00159ad:	8b 07                	mov    eax,DWORD PTR [edi]
c00159af:	85 c0                	test   eax,eax
c00159b1:	74 49                	je     c00159fc <Process::addArgs(char**)+0x68>
c00159b3:	31 db                	xor    ebx,ebx
c00159b5:	8d 76 00             	lea    esi,[esi+0x0]
c00159b8:	83 ec 0c             	sub    esp,0xc
c00159bb:	50                   	push   eax
c00159bc:	e8 af ab fe ff       	call   c0000570 <strlen>
c00159c1:	83 c0 01             	add    eax,0x1
c00159c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00159c7:	e8 ea 20 ff ff       	call   c0007ab6 <malloc>
c00159cc:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00159d3:	5a                   	pop    edx
c00159d4:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00159d7:	59                   	pop    ecx
c00159d8:	83 c3 01             	add    ebx,0x1
c00159db:	52                   	push   edx
c00159dc:	50                   	push   eax
c00159dd:	e8 5e ac fe ff       	call   c0000640 <strcpy>
c00159e2:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00159e8:	83 c4 10             	add    esp,0x10
c00159eb:	83 c1 01             	add    ecx,0x1
c00159ee:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00159f4:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00159f7:	85 c0                	test   eax,eax
c00159f9:	75 bd                	jne    c00159b8 <Process::addArgs(char**)+0x24>
c00159fb:	90                   	nop
c00159fc:	5b                   	pop    ebx
c00159fd:	5e                   	pop    esi
c00159fe:	5f                   	pop    edi
c00159ff:	c3                   	ret    

c0015a00 <Process::Process(char const*, Process*, char**)>:
c0015a00:	56                   	push   esi
c0015a01:	53                   	push   ebx
c0015a02:	83 ec 14             	sub    esp,0x14
c0015a05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a09:	05 0c 02 00 00       	add    eax,0x20c
c0015a0e:	bb 07 00 00 00       	mov    ebx,0x7
c0015a13:	89 c6                	mov    esi,eax
c0015a15:	8d 76 00             	lea    esi,[esi+0x0]
c0015a18:	85 db                	test   ebx,ebx
c0015a1a:	78 14                	js     c0015a30 <Process::Process(char const*, Process*, char**)+0x30>
c0015a1c:	83 ec 0c             	sub    esp,0xc
c0015a1f:	56                   	push   esi
c0015a20:	e8 e3 a5 00 00       	call   c0020008 <ThreadControlBlock::ThreadControlBlock()>
c0015a25:	83 c4 10             	add    esp,0x10
c0015a28:	83 c6 5f             	add    esi,0x5f
c0015a2b:	83 eb 01             	sub    ebx,0x1
c0015a2e:	eb e8                	jmp    c0015a18 <Process::Process(char const*, Process*, char**)+0x18>
c0015a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a34:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015a3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a3f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015a46:	83 ec 0c             	sub    esp,0xc
c0015a49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a4d:	e8 82 b9 ff ff       	call   c00113d4 <KeNewProcessEnv(Process*)>
c0015a52:	83 c4 10             	add    esp,0x10
c0015a55:	89 c2                	mov    edx,eax
c0015a57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a5b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015a61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a65:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015a6e:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c0015a73:	8d 50 01             	lea    edx,[eax+0x1]
c0015a76:	89 15 a0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea0,edx
c0015a7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a80:	89 02                	mov    DWORD PTR [edx],eax
c0015a82:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015a8a:	83 ec 0c             	sub    esp,0xc
c0015a8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a91:	e8 20 20 ff ff       	call   c0007ab6 <malloc>
c0015a96:	83 c4 10             	add    esp,0x10
c0015a99:	89 c3                	mov    ebx,eax
c0015a9b:	83 ec 08             	sub    esp,0x8
c0015a9e:	6a 00                	push   0x0
c0015aa0:	53                   	push   ebx
c0015aa1:	e8 c2 45 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aad:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015ac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ac5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ac9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015acf:	e8 26 bf ff ff       	call   c00119fa <KeInitSignals()>
c0015ad4:	89 c2                	mov    edx,eax
c0015ad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ada:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015ae0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ae4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015aea:	85 c0                	test   eax,eax
c0015aec:	74 42                	je     c0015b30 <Process::Process(char const*, Process*, char**)+0x130>
c0015aee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015af2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015af8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015afe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b02:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015b08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b0c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b12:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b1c:	05 0c 01 00 00       	add    eax,0x10c
c0015b21:	83 ec 08             	sub    esp,0x8
c0015b24:	52                   	push   edx
c0015b25:	50                   	push   eax
c0015b26:	e8 15 ab fe ff       	call   c0000640 <strcpy>
c0015b2b:	83 c4 10             	add    esp,0x10
c0015b2e:	eb 64                	jmp    c0015b94 <Process::Process(char const*, Process*, char**)+0x194>
c0015b30:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015b38:	83 ec 0c             	sub    esp,0xc
c0015b3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015b3f:	e8 72 1f ff ff       	call   c0007ab6 <malloc>
c0015b44:	83 c4 10             	add    esp,0x10
c0015b47:	89 c3                	mov    ebx,eax
c0015b49:	83 ec 08             	sub    esp,0x8
c0015b4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b50:	53                   	push   ebx
c0015b51:	e8 10 31 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015b56:	83 c4 10             	add    esp,0x10
c0015b59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b5d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b67:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015b6d:	83 ec 0c             	sub    esp,0xc
c0015b70:	50                   	push   eax
c0015b71:	e8 8e 29 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015b76:	83 c4 10             	add    esp,0x10
c0015b79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b7d:	05 0c 01 00 00       	add    eax,0x10c
c0015b82:	83 ec 08             	sub    esp,0x8
c0015b85:	68 a1 28 02 c0       	push   0xc00228a1
c0015b8a:	50                   	push   eax
c0015b8b:	e8 b0 aa fe ff       	call   c0000640 <strcpy>
c0015b90:	83 c4 10             	add    esp,0x10
c0015b93:	90                   	nop
c0015b94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b98:	83 c0 0c             	add    eax,0xc
c0015b9b:	83 ec 08             	sub    esp,0x8
c0015b9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ba2:	50                   	push   eax
c0015ba3:	e8 98 aa fe ff       	call   c0000640 <strcpy>
c0015ba8:	83 c4 10             	add    esp,0x10
c0015bab:	83 ec 08             	sub    esp,0x8
c0015bae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015bb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bb6:	e8 d9 fd ff ff       	call   c0015994 <Process::addArgs(char**)>
c0015bbb:	83 c4 10             	add    esp,0x10
c0015bbe:	83 ec 08             	sub    esp,0x8
c0015bc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bc9:	e8 63 ed ff ff       	call   c0014931 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015bce:	83 c4 10             	add    esp,0x10
c0015bd1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015bd5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015bd9:	83 f0 01             	xor    eax,0x1
c0015bdc:	88 c2                	mov    dl,al
c0015bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015be2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015be8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015bed:	83 ec 04             	sub    esp,0x4
c0015bf0:	50                   	push   eax
c0015bf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bf5:	68 f8 28 02 c0       	push   0xc00228f8
c0015bfa:	e8 46 4d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015bff:	83 c4 10             	add    esp,0x10
c0015c02:	90                   	nop
c0015c03:	83 c4 14             	add    esp,0x14
c0015c06:	5b                   	pop    ebx
c0015c07:	5e                   	pop    esi
c0015c08:	c3                   	ret    
c0015c09:	90                   	nop
c0015c0a:	66 90                	xchg   ax,ax

c0015c0c <Process::Process(bool, char const*, Process*, char**)>:
c0015c0c:	56                   	push   esi
c0015c0d:	53                   	push   ebx
c0015c0e:	83 ec 24             	sub    esp,0x24
c0015c11:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c15:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015c19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c1d:	05 0c 02 00 00       	add    eax,0x20c
c0015c22:	bb 07 00 00 00       	mov    ebx,0x7
c0015c27:	89 c6                	mov    esi,eax
c0015c29:	8d 76 00             	lea    esi,[esi+0x0]
c0015c2c:	85 db                	test   ebx,ebx
c0015c2e:	78 14                	js     c0015c44 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015c30:	83 ec 0c             	sub    esp,0xc
c0015c33:	56                   	push   esi
c0015c34:	e8 cf a3 00 00       	call   c0020008 <ThreadControlBlock::ThreadControlBlock()>
c0015c39:	83 c4 10             	add    esp,0x10
c0015c3c:	83 c6 5f             	add    esi,0x5f
c0015c3f:	83 eb 01             	sub    ebx,0x1
c0015c42:	eb e8                	jmp    c0015c2c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015c44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c48:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015c4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c53:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015c5a:	83 ec 0c             	sub    esp,0xc
c0015c5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015c61:	e8 6e b7 ff ff       	call   c00113d4 <KeNewProcessEnv(Process*)>
c0015c66:	83 c4 10             	add    esp,0x10
c0015c69:	89 c2                	mov    edx,eax
c0015c6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c6f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c79:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015c82:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c0015c87:	8d 50 01             	lea    edx,[eax+0x1]
c0015c8a:	89 15 a0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea0,edx
c0015c90:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c94:	89 02                	mov    DWORD PTR [edx],eax
c0015c96:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015c9e:	83 ec 0c             	sub    esp,0xc
c0015ca1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ca5:	e8 0c 1e ff ff       	call   c0007ab6 <malloc>
c0015caa:	83 c4 10             	add    esp,0x10
c0015cad:	89 c3                	mov    ebx,eax
c0015caf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015cb4:	83 ec 08             	sub    esp,0x8
c0015cb7:	50                   	push   eax
c0015cb8:	53                   	push   ebx
c0015cb9:	e8 aa 43 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015cbe:	83 c4 10             	add    esp,0x10
c0015cc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cc5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015ccb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ccf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015cd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cdd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ce1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015ce7:	e8 0e bd ff ff       	call   c00119fa <KeInitSignals()>
c0015cec:	89 c2                	mov    edx,eax
c0015cee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cf2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015cf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cfc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d02:	85 c0                	test   eax,eax
c0015d04:	74 42                	je     c0015d48 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015d06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d0a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d10:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015d16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d1a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015d20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d24:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d2a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015d30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d34:	05 0c 01 00 00       	add    eax,0x10c
c0015d39:	83 ec 08             	sub    esp,0x8
c0015d3c:	52                   	push   edx
c0015d3d:	50                   	push   eax
c0015d3e:	e8 fd a8 fe ff       	call   c0000640 <strcpy>
c0015d43:	83 c4 10             	add    esp,0x10
c0015d46:	eb 64                	jmp    c0015dac <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015d48:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015d50:	83 ec 0c             	sub    esp,0xc
c0015d53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015d57:	e8 5a 1d ff ff       	call   c0007ab6 <malloc>
c0015d5c:	83 c4 10             	add    esp,0x10
c0015d5f:	89 c3                	mov    ebx,eax
c0015d61:	83 ec 08             	sub    esp,0x8
c0015d64:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d68:	53                   	push   ebx
c0015d69:	e8 f8 2e ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015d6e:	83 c4 10             	add    esp,0x10
c0015d71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d75:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015d7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d7f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d85:	83 ec 0c             	sub    esp,0xc
c0015d88:	50                   	push   eax
c0015d89:	e8 76 27 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015d8e:	83 c4 10             	add    esp,0x10
c0015d91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d95:	05 0c 01 00 00       	add    eax,0x10c
c0015d9a:	83 ec 08             	sub    esp,0x8
c0015d9d:	68 a1 28 02 c0       	push   0xc00228a1
c0015da2:	50                   	push   eax
c0015da3:	e8 98 a8 fe ff       	call   c0000640 <strcpy>
c0015da8:	83 c4 10             	add    esp,0x10
c0015dab:	90                   	nop
c0015dac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015db0:	83 c0 0c             	add    eax,0xc
c0015db3:	83 ec 08             	sub    esp,0x8
c0015db6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015dba:	50                   	push   eax
c0015dbb:	e8 80 a8 fe ff       	call   c0000640 <strcpy>
c0015dc0:	83 c4 10             	add    esp,0x10
c0015dc3:	83 ec 08             	sub    esp,0x8
c0015dc6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015dca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015dce:	e8 c1 fb ff ff       	call   c0015994 <Process::addArgs(char**)>
c0015dd3:	83 c4 10             	add    esp,0x10
c0015dd6:	90                   	nop
c0015dd7:	83 c4 24             	add    esp,0x24
c0015dda:	5b                   	pop    ebx
c0015ddb:	5e                   	pop    esi
c0015ddc:	c3                   	ret    
c0015ddd:	8d 76 00             	lea    esi,[esi+0x0]

c0015de0 <taskStartupFunction>:
c0015de0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015de5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015de8:	c3                   	ret    
c0015de9:	90                   	nop
c0015dea:	66 90                	xchg   ax,ax

c0015dec <Semaphore::Semaphore(int)>:
c0015dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015df0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015df4:	89 10                	mov    DWORD PTR [eax],edx
c0015df6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dfa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e10:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015e17:	90                   	nop
c0015e18:	c3                   	ret    
c0015e19:	90                   	nop
c0015e1a:	66 90                	xchg   ax,ax

c0015e1c <Mutex::Mutex()>:
c0015e1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e20:	6a 01                	push   0x1
c0015e22:	50                   	push   eax
c0015e23:	e8 c4 ff ff ff       	call   c0015dec <Semaphore::Semaphore(int)>
c0015e28:	83 c4 08             	add    esp,0x8
c0015e2b:	90                   	nop
c0015e2c:	c3                   	ret    
c0015e2d:	90                   	nop
c0015e2e:	66 90                	xchg   ax,ax

c0015e30 <Process::createThread(void (*)(void*), void*, int)>:
c0015e30:	57                   	push   edi
c0015e31:	31 c9                	xor    ecx,ecx
c0015e33:	56                   	push   esi
c0015e34:	53                   	push   ebx
c0015e35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e39:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015e40:	89 f2                	mov    edx,esi
c0015e42:	66 90                	xchg   ax,ax
c0015e44:	0f b7 c2             	movzx  eax,dx
c0015e47:	80 e2 01             	and    dl,0x1
c0015e4a:	74 14                	je     c0015e60 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015e4c:	d1 f8                	sar    eax,1
c0015e4e:	83 c1 01             	add    ecx,0x1
c0015e51:	89 c2                	mov    edx,eax
c0015e53:	83 f9 10             	cmp    ecx,0x10
c0015e56:	75 ec                	jne    c0015e44 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015e58:	31 db                	xor    ebx,ebx
c0015e5a:	89 d8                	mov    eax,ebx
c0015e5c:	5b                   	pop    ebx
c0015e5d:	5e                   	pop    esi
c0015e5e:	5f                   	pop    edi
c0015e5f:	c3                   	ret    
c0015e60:	b8 01 00 00 00       	mov    eax,0x1
c0015e65:	d3 e0                	shl    eax,cl
c0015e67:	09 c6                	or     esi,eax
c0015e69:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015e6c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015e73:	01 c0                	add    eax,eax
c0015e75:	01 c8                	add    eax,ecx
c0015e77:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e7a:	01 d8                	add    eax,ebx
c0015e7c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015e83:	75 0b                	jne    c0015e90 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015e85:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015e8f:	90                   	nop
c0015e90:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015e96:	83 ec 0c             	sub    esp,0xc
c0015e99:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015e9c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015e9f:	01 c0                	add    eax,eax
c0015ea1:	01 c8                	add    eax,ecx
c0015ea3:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015ea6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015ea9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015eaf:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015eb5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015eb9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015ebf:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015ec5:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015ecb:	89 ca                	mov    edx,ecx
c0015ecd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015ed4:	f7 da                	neg    edx
c0015ed6:	c1 e2 15             	shl    edx,0x15
c0015ed9:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015edf:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015ee5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ee9:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015ef3:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015ef9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015efd:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015f03:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015f0d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015f17:	68 00 01 00 00       	push   0x100
c0015f1c:	e8 95 1b ff ff       	call   c0007ab6 <malloc>
c0015f21:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015f24:	58                   	pop    eax
c0015f25:	5a                   	pop    edx
c0015f26:	53                   	push   ebx
c0015f27:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f2c:	e8 6f 9e 00 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f31:	83 c4 10             	add    esp,0x10
c0015f34:	89 d8                	mov    eax,ebx
c0015f36:	5b                   	pop    ebx
c0015f37:	5e                   	pop    esi
c0015f38:	5f                   	pop    edi
c0015f39:	c3                   	ret    
c0015f3a:	66 90                	xchg   ax,ax

c0015f3c <Process::createUserThread()>:
c0015f3c:	83 ec 0c             	sub    esp,0xc
c0015f3f:	68 80 00 00 00       	push   0x80
c0015f44:	6a 00                	push   0x0
c0015f46:	68 8c 58 01 c0       	push   0xc001588c
c0015f4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f4f:	50                   	push   eax
c0015f50:	e8 db fe ff ff       	call   c0015e30 <Process::createThread(void (*)(void*), void*, int)>
c0015f55:	83 c4 1c             	add    esp,0x1c
c0015f58:	c3                   	ret    
c0015f59:	8d 76 00             	lea    esi,[esi+0x0]

c0015f5c <setupMultitasking(void (*)())>:
c0015f5c:	56                   	push   esi
c0015f5d:	53                   	push   ebx
c0015f5e:	83 ec 04             	sub    esp,0x4
c0015f61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f65:	eb 11                	jmp    c0015f78 <setupMultitasking(void (*)())+0x1c>
c0015f67:	90                   	nop
c0015f68:	83 ec 0c             	sub    esp,0xc
c0015f6b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f70:	e8 6f 9d 00 00       	call   c001fce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f75:	83 c4 10             	add    esp,0x10
c0015f78:	83 ec 0c             	sub    esp,0xc
c0015f7b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f80:	e8 3b 9d 00 00       	call   c001fcc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015f85:	83 c4 10             	add    esp,0x10
c0015f88:	84 c0                	test   al,al
c0015f8a:	74 dc                	je     c0015f68 <setupMultitasking(void (*)())+0xc>
c0015f8c:	83 ec 0c             	sub    esp,0xc
c0015f8f:	68 24 07 00 00       	push   0x724
c0015f94:	e8 1d 1b ff ff       	call   c0007ab6 <malloc>
c0015f99:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015fa0:	89 c3                	mov    ebx,eax
c0015fa2:	6a 00                	push   0x0
c0015fa4:	68 a5 28 02 c0       	push   0xc00228a5
c0015fa9:	6a 01                	push   0x1
c0015fab:	50                   	push   eax
c0015fac:	e8 5b fc ff ff       	call   c0015c0c <Process::Process(bool, char const*, Process*, char**)>
c0015fb1:	83 c4 14             	add    esp,0x14
c0015fb4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015fba:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0015fc0:	50                   	push   eax
c0015fc1:	e8 93 27 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015fc6:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015fcd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015fd7:	83 c8 01             	or     eax,0x1
c0015fda:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015fe1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015fe7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015fea:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015ff4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015ffa:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0016000:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001600a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016014:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001601e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016024:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001602e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016034:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001603e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016045:	e8 6c 1a ff ff       	call   c0007ab6 <malloc>
c001604a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016050:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016056:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001605c:	5a                   	pop    edx
c001605d:	59                   	pop    ecx
c001605e:	68 a1 28 02 c0       	push   0xc00228a1
c0016063:	50                   	push   eax
c0016064:	e8 d7 a5 fe ff       	call   c0000640 <strcpy>
c0016069:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016070:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016074:	83 c4 14             	add    esp,0x14
c0016077:	5b                   	pop    ebx
c0016078:	5e                   	pop    esi
c0016079:	e9 eb a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001607e:	66 90                	xchg   ax,ax

c0016080 <schedule()>:
c0016080:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016086:	85 d2                	test   edx,edx
c0016088:	74 0e                	je     c0016098 <schedule()+0x18>
c001608a:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016094:	c3                   	ret    
c0016095:	8d 76 00             	lea    esi,[esi+0x0]
c0016098:	53                   	push   ebx
c0016099:	83 ec 14             	sub    esp,0x14
c001609c:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160a1:	e8 1a 9c 00 00       	call   c001fcc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00160a6:	83 c4 10             	add    esp,0x10
c00160a9:	84 c0                	test   al,al
c00160ab:	75 3f                	jne    c00160ec <schedule()+0x6c>
c00160ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160b2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00160b5:	83 fa 01             	cmp    edx,0x1
c00160b8:	74 3a                	je     c00160f4 <schedule()+0x74>
c00160ba:	66 90                	xchg   ax,ax
c00160bc:	83 ec 0c             	sub    esp,0xc
c00160bf:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160c4:	e8 13 9c 00 00       	call   c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00160c9:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00160d0:	89 c3                	mov    ebx,eax
c00160d2:	e8 0d 9c 00 00       	call   c001fce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00160d7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00160de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160e1:	e8 fe f7 ff ff       	call   c00158e4 <switchToThread(ThreadControlBlock*)>
c00160e6:	83 c4 10             	add    esp,0x10
c00160e9:	8d 76 00             	lea    esi,[esi+0x0]
c00160ec:	83 c4 08             	add    esp,0x8
c00160ef:	5b                   	pop    ebx
c00160f0:	c3                   	ret    
c00160f1:	8d 76 00             	lea    esi,[esi+0x0]
c00160f4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00160fb:	83 ec 08             	sub    esp,0x8
c00160fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016103:	50                   	push   eax
c0016104:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016109:	e8 92 9c 00 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001610e:	83 c4 10             	add    esp,0x10
c0016111:	eb a9                	jmp    c00160bc <schedule()+0x3c>
c0016113:	90                   	nop

c0016114 <Semaphore::tryAcquire()>:
c0016114:	53                   	push   ebx
c0016115:	83 ec 08             	sub    esp,0x8
c0016118:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001611c:	fa                   	cli    
c001611d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016122:	8d 50 01             	lea    edx,[eax+0x1]
c0016125:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001612b:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016131:	8d 5a 01             	lea    ebx,[edx+0x1]
c0016134:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c001613a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001613d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001613f:	7c 33                	jl     c0016174 <Semaphore::tryAcquire()+0x60>
c0016141:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c0016147:	85 d2                	test   edx,edx
c0016149:	75 0d                	jne    c0016158 <Semaphore::tryAcquire()+0x44>
c001614b:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c0016151:	85 d2                	test   edx,edx
c0016153:	75 6f                	jne    c00161c4 <Semaphore::tryAcquire()+0xb0>
c0016155:	8d 76 00             	lea    esi,[esi+0x0]
c0016158:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001615d:	85 c0                	test   eax,eax
c001615f:	74 0b                	je     c001616c <Semaphore::tryAcquire()+0x58>
c0016161:	8d 76 00             	lea    esi,[esi+0x0]
c0016164:	31 c0                	xor    eax,eax
c0016166:	83 c4 08             	add    esp,0x8
c0016169:	5b                   	pop    ebx
c001616a:	c3                   	ret    
c001616b:	90                   	nop
c001616c:	fb                   	sti    
c001616d:	83 c4 08             	add    esp,0x8
c0016170:	5b                   	pop    ebx
c0016171:	c3                   	ret    
c0016172:	66 90                	xchg   ax,ax
c0016174:	83 c3 01             	add    ebx,0x1
c0016177:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c001617d:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016180:	85 d2                	test   edx,edx
c0016182:	75 24                	jne    c00161a8 <Semaphore::tryAcquire()+0x94>
c0016184:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c001618a:	85 c9                	test   ecx,ecx
c001618c:	74 1a                	je     c00161a8 <Semaphore::tryAcquire()+0x94>
c001618e:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016198:	e8 e3 fe ff ff       	call   c0016080 <schedule()>
c001619d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161a2:	83 e8 01             	sub    eax,0x1
c00161a5:	8d 76 00             	lea    esi,[esi+0x0]
c00161a8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161ad:	85 c0                	test   eax,eax
c00161af:	75 0b                	jne    c00161bc <Semaphore::tryAcquire()+0xa8>
c00161b1:	fb                   	sti    
c00161b2:	b0 01                	mov    al,0x1
c00161b4:	83 c4 08             	add    esp,0x8
c00161b7:	5b                   	pop    ebx
c00161b8:	c3                   	ret    
c00161b9:	8d 76 00             	lea    esi,[esi+0x0]
c00161bc:	b0 01                	mov    al,0x1
c00161be:	83 c4 08             	add    esp,0x8
c00161c1:	5b                   	pop    ebx
c00161c2:	c3                   	ret    
c00161c3:	90                   	nop
c00161c4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00161ce:	e8 ad fe ff ff       	call   c0016080 <schedule()>
c00161d3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161d8:	83 e8 01             	sub    eax,0x1
c00161db:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161e0:	85 c0                	test   eax,eax
c00161e2:	75 80                	jne    c0016164 <Semaphore::tryAcquire()+0x50>
c00161e4:	eb 86                	jmp    c001616c <Semaphore::tryAcquire()+0x58>
c00161e6:	66 90                	xchg   ax,ax

c00161e8 <Semaphore::assertLocked(char const*)>:
c00161e8:	83 ec 0c             	sub    esp,0xc
c00161eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161ef:	fa                   	cli    
c00161f0:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00161f6:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00161fb:	83 c1 01             	add    ecx,0x1
c00161fe:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016204:	8d 48 01             	lea    ecx,[eax+0x1]
c0016207:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001620d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001620f:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0016212:	7c 28                	jl     c001623c <Semaphore::assertLocked(char const*)+0x54>
c0016214:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016219:	85 c0                	test   eax,eax
c001621b:	75 0b                	jne    c0016228 <Semaphore::assertLocked(char const*)+0x40>
c001621d:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016222:	85 c0                	test   eax,eax
c0016224:	75 32                	jne    c0016258 <Semaphore::assertLocked(char const*)+0x70>
c0016226:	66 90                	xchg   ax,ax
c0016228:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001622d:	83 e8 01             	sub    eax,0x1
c0016230:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016235:	75 01                	jne    c0016238 <Semaphore::assertLocked(char const*)+0x50>
c0016237:	fb                   	sti    
c0016238:	83 c4 0c             	add    esp,0xc
c001623b:	c3                   	ret    
c001623c:	83 ec 0c             	sub    esp,0xc
c001623f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016243:	52                   	push   edx
c0016244:	e8 96 b3 ff ff       	call   c00115df <KePanic(char const*)>
c0016249:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001624e:	83 c4 10             	add    esp,0x10
c0016251:	83 e8 01             	sub    eax,0x1
c0016254:	eb be                	jmp    c0016214 <Semaphore::assertLocked(char const*)+0x2c>
c0016256:	66 90                	xchg   ax,ax
c0016258:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016262:	e8 19 fe ff ff       	call   c0016080 <schedule()>
c0016267:	eb bf                	jmp    c0016228 <Semaphore::assertLocked(char const*)+0x40>
c0016269:	8d 76 00             	lea    esi,[esi+0x0]

c001626c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001626c:	83 ec 0c             	sub    esp,0xc
c001626f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016274:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016278:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001627b:	e8 00 fe ff ff       	call   c0016080 <schedule()>
c0016280:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016285:	83 e8 01             	sub    eax,0x1
c0016288:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001628d:	75 01                	jne    c0016290 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001628f:	fb                   	sti    
c0016290:	83 c4 0c             	add    esp,0xc
c0016293:	c3                   	ret    

c0016294 <blockTask(TaskState)>:
c0016294:	83 ec 0c             	sub    esp,0xc
c0016297:	fa                   	cli    
c0016298:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001629d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162a1:	83 c0 01             	add    eax,0x1
c00162a4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162ae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00162b1:	e8 ca fd ff ff       	call   c0016080 <schedule()>
c00162b6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162bb:	83 e8 01             	sub    eax,0x1
c00162be:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162c3:	75 03                	jne    c00162c8 <blockTask(TaskState)+0x34>
c00162c5:	fb                   	sti    
c00162c6:	66 90                	xchg   ax,ax
c00162c8:	83 c4 0c             	add    esp,0xc
c00162cb:	c3                   	ret    

c00162cc <waitTask(int, int*, int)>:
c00162cc:	83 ec 18             	sub    esp,0x18
c00162cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00162d8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00162db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00162df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162e4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00162e7:	6a 07                	push   0x7
c00162e9:	e8 a6 ff ff ff       	call   c0016294 <blockTask(TaskState)>
c00162ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162f3:	83 c4 10             	add    esp,0x10
c00162f6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00162f9:	85 d2                	test   edx,edx
c00162fb:	74 0b                	je     c0016308 <waitTask(int, int*, int)+0x3c>
c00162fd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016300:	89 02                	mov    DWORD PTR [edx],eax
c0016302:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016307:	90                   	nop
c0016308:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001630b:	83 c4 0c             	add    esp,0xc
c001630e:	c3                   	ret    
c001630f:	90                   	nop

c0016310 <milliTenthSleepUntil(unsigned int)>:
c0016310:	83 ec 0c             	sub    esp,0xc
c0016313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016317:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c001631d:	76 05                	jbe    c0016324 <milliTenthSleepUntil(unsigned int)+0x14>
c001631f:	90                   	nop
c0016320:	83 c4 0c             	add    esp,0xc
c0016323:	c3                   	ret    
c0016324:	fa                   	cli    
c0016325:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001632b:	83 ec 08             	sub    esp,0x8
c001632e:	83 c2 01             	add    edx,0x1
c0016331:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016337:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001633d:	83 c1 01             	add    ecx,0x1
c0016340:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016346:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001634c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001634f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016354:	50                   	push   eax
c0016355:	68 d8 c6 02 c0       	push   0xc002c6d8
c001635a:	e8 41 9a 00 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001635f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016366:	e8 29 ff ff ff       	call   c0016294 <blockTask(TaskState)>
c001636b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016370:	83 c4 10             	add    esp,0x10
c0016373:	83 e8 01             	sub    eax,0x1
c0016376:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001637b:	85 c0                	test   eax,eax
c001637d:	75 09                	jne    c0016388 <milliTenthSleepUntil(unsigned int)+0x78>
c001637f:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016384:	85 c0                	test   eax,eax
c0016386:	75 14                	jne    c001639c <milliTenthSleepUntil(unsigned int)+0x8c>
c0016388:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001638d:	83 e8 01             	sub    eax,0x1
c0016390:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016395:	75 89                	jne    c0016320 <milliTenthSleepUntil(unsigned int)+0x10>
c0016397:	fb                   	sti    
c0016398:	83 c4 0c             	add    esp,0xc
c001639b:	c3                   	ret    
c001639c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00163a6:	e8 d5 fc ff ff       	call   c0016080 <schedule()>
c00163ab:	eb db                	jmp    c0016388 <milliTenthSleepUntil(unsigned int)+0x78>
c00163ad:	8d 76 00             	lea    esi,[esi+0x0]

c00163b0 <milliTenthSleep(unsigned int)>:
c00163b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00163b4:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c00163b9:	01 c2                	add    edx,eax
c00163bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00163bf:	e9 4c ff ff ff       	jmp    c0016310 <milliTenthSleepUntil(unsigned int)>

c00163c4 <sleep(unsigned int)>:
c00163c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163c8:	8d 04 80             	lea    eax,[eax+eax*4]
c00163cb:	8d 04 80             	lea    eax,[eax+eax*4]
c00163ce:	8d 04 80             	lea    eax,[eax+eax*4]
c00163d1:	8d 04 80             	lea    eax,[eax+eax*4]
c00163d4:	c1 e0 04             	shl    eax,0x4
c00163d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163db:	eb d3                	jmp    c00163b0 <milliTenthSleep(unsigned int)>
c00163dd:	90                   	nop
c00163de:	66 90                	xchg   ax,ax

c00163e0 <Semaphore::acquire()>:
c00163e0:	83 ec 0c             	sub    esp,0xc
c00163e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163e7:	fa                   	cli    
c00163e8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163ed:	83 c0 01             	add    eax,0x1
c00163f0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163f5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163fa:	8d 48 01             	lea    ecx,[eax+0x1]
c00163fd:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016403:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016406:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016408:	7d 2e                	jge    c0016438 <Semaphore::acquire()+0x58>
c001640a:	83 c1 01             	add    ecx,0x1
c001640d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016410:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016415:	85 c0                	test   eax,eax
c0016417:	75 0b                	jne    c0016424 <Semaphore::acquire()+0x44>
c0016419:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001641e:	85 c0                	test   eax,eax
c0016420:	75 66                	jne    c0016488 <Semaphore::acquire()+0xa8>
c0016422:	66 90                	xchg   ax,ax
c0016424:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016429:	83 e8 01             	sub    eax,0x1
c001642c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016431:	75 01                	jne    c0016434 <Semaphore::acquire()+0x54>
c0016433:	fb                   	sti    
c0016434:	83 c4 0c             	add    esp,0xc
c0016437:	c3                   	ret    
c0016438:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001643d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016444:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016447:	85 c9                	test   ecx,ecx
c0016449:	74 51                	je     c001649c <Semaphore::acquire()+0xbc>
c001644b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001644e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016454:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016457:	90                   	nop
c0016458:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001645d:	83 ec 0c             	sub    esp,0xc
c0016460:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0016463:	68 24 29 02 c0       	push   0xc0022924
c0016468:	e8 d8 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001646d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016474:	e8 1b fe ff ff       	call   c0016294 <blockTask(TaskState)>
c0016479:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001647e:	83 c4 10             	add    esp,0x10
c0016481:	83 e8 01             	sub    eax,0x1
c0016484:	eb 8a                	jmp    c0016410 <Semaphore::acquire()+0x30>
c0016486:	66 90                	xchg   ax,ax
c0016488:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016492:	e8 e9 fb ff ff       	call   c0016080 <schedule()>
c0016497:	eb 8b                	jmp    c0016424 <Semaphore::acquire()+0x44>
c0016499:	8d 76 00             	lea    esi,[esi+0x0]
c001649c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164a1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00164a4:	eb b2                	jmp    c0016458 <Semaphore::acquire()+0x78>
c00164a6:	66 90                	xchg   ax,ax

c00164a8 <taskReturned>:
c00164a8:	83 ec 18             	sub    esp,0x18
c00164ab:	68 44 29 02 c0       	push   0xc0022944
c00164b0:	e8 2a b1 ff ff       	call   c00115df <KePanic(char const*)>
c00164b5:	83 c4 10             	add    esp,0x10
c00164b8:	83 ec 0c             	sub    esp,0xc
c00164bb:	6a 02                	push   0x2
c00164bd:	e8 d2 fd ff ff       	call   c0016294 <blockTask(TaskState)>
c00164c2:	fa                   	cli    
c00164c3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164c8:	83 c0 01             	add    eax,0x1
c00164cb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164d0:	e8 ab fb ff ff       	call   c0016080 <schedule()>
c00164d5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164da:	83 c4 10             	add    esp,0x10
c00164dd:	83 e8 01             	sub    eax,0x1
c00164e0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164e5:	85 c0                	test   eax,eax
c00164e7:	75 cf                	jne    c00164b8 <taskReturned+0x10>
c00164e9:	fb                   	sti    
c00164ea:	eb cc                	jmp    c00164b8 <taskReturned+0x10>

c00164ec <Thr::processFromPID(int)>:
c00164ec:	57                   	push   edi
c00164ed:	56                   	push   esi
c00164ee:	53                   	push   ebx
c00164ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164f3:	fa                   	cli    
c00164f4:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00164fa:	83 ec 0c             	sub    esp,0xc
c00164fd:	83 c1 01             	add    ecx,0x1
c0016500:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016505:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001650b:	e8 cc 97 00 00       	call   c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016510:	83 c4 10             	add    esp,0x10
c0016513:	89 c7                	mov    edi,eax
c0016515:	eb 15                	jmp    c001652c <Thr::processFromPID(int)+0x40>
c0016517:	90                   	nop
c0016518:	83 ec 0c             	sub    esp,0xc
c001651b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016520:	e8 b7 97 00 00       	call   c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016525:	83 c4 10             	add    esp,0x10
c0016528:	39 f8                	cmp    eax,edi
c001652a:	74 50                	je     c001657c <Thr::processFromPID(int)+0x90>
c001652c:	83 ec 0c             	sub    esp,0xc
c001652f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016534:	e8 a3 97 00 00       	call   c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016539:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016540:	89 c3                	mov    ebx,eax
c0016542:	e8 9d 97 00 00       	call   c001fce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016547:	58                   	pop    eax
c0016548:	5a                   	pop    edx
c0016549:	53                   	push   ebx
c001654a:	68 e4 c6 02 c0       	push   0xc002c6e4
c001654f:	e8 4c 98 00 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016554:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016557:	83 c4 10             	add    esp,0x10
c001655a:	39 30                	cmp    DWORD PTR [eax],esi
c001655c:	75 ba                	jne    c0016518 <Thr::processFromPID(int)+0x2c>
c001655e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016563:	83 e8 01             	sub    eax,0x1
c0016566:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001656b:	74 0b                	je     c0016578 <Thr::processFromPID(int)+0x8c>
c001656d:	8d 76 00             	lea    esi,[esi+0x0]
c0016570:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016573:	5b                   	pop    ebx
c0016574:	5e                   	pop    esi
c0016575:	5f                   	pop    edi
c0016576:	c3                   	ret    
c0016577:	90                   	nop
c0016578:	fb                   	sti    
c0016579:	eb f5                	jmp    c0016570 <Thr::processFromPID(int)+0x84>
c001657b:	90                   	nop
c001657c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016581:	83 e8 01             	sub    eax,0x1
c0016584:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016589:	75 05                	jne    c0016590 <Thr::processFromPID(int)+0xa4>
c001658b:	fb                   	sti    
c001658c:	5b                   	pop    ebx
c001658d:	5e                   	pop    esi
c001658e:	5f                   	pop    edi
c001658f:	c3                   	ret    
c0016590:	5b                   	pop    ebx
c0016591:	31 c0                	xor    eax,eax
c0016593:	5e                   	pop    esi
c0016594:	5f                   	pop    edi
c0016595:	c3                   	ret    
c0016596:	66 90                	xchg   ax,ax

c0016598 <unblockTask(ThreadControlBlock*)>:
c0016598:	53                   	push   ebx
c0016599:	83 ec 08             	sub    esp,0x8
c001659c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165a0:	fa                   	cli    
c00165a1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165a6:	83 c0 01             	add    eax,0x1
c00165a9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165ae:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165b1:	85 c0                	test   eax,eax
c00165b3:	74 67                	je     c001661c <unblockTask(ThreadControlBlock*)+0x84>
c00165b5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165b8:	83 f8 01             	cmp    eax,0x1
c00165bb:	74 37                	je     c00165f4 <unblockTask(ThreadControlBlock*)+0x5c>
c00165bd:	83 ec 0c             	sub    esp,0xc
c00165c0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165c5:	e8 12 97 00 00       	call   c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165ca:	83 c4 10             	add    esp,0x10
c00165cd:	85 c0                	test   eax,eax
c00165cf:	75 1b                	jne    c00165ec <unblockTask(ThreadControlBlock*)+0x54>
c00165d1:	eb 5d                	jmp    c0016630 <unblockTask(ThreadControlBlock*)+0x98>
c00165d3:	90                   	nop
c00165d4:	83 ec 08             	sub    esp,0x8
c00165d7:	50                   	push   eax
c00165d8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165dd:	e8 1a 9a 00 00       	call   c001fffc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00165e2:	83 c4 10             	add    esp,0x10
c00165e5:	85 c0                	test   eax,eax
c00165e7:	74 47                	je     c0016630 <unblockTask(ThreadControlBlock*)+0x98>
c00165e9:	8d 76 00             	lea    esi,[esi+0x0]
c00165ec:	39 c3                	cmp    ebx,eax
c00165ee:	75 e4                	jne    c00165d4 <unblockTask(ThreadControlBlock*)+0x3c>
c00165f0:	eb 12                	jmp    c0016604 <unblockTask(ThreadControlBlock*)+0x6c>
c00165f2:	66 90                	xchg   ax,ax
c00165f4:	83 ec 0c             	sub    esp,0xc
c00165f7:	68 c3 28 02 c0       	push   0xc00228c3
c00165fc:	e8 44 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016601:	83 c4 10             	add    esp,0x10
c0016604:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016609:	83 e8 01             	sub    eax,0x1
c001660c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016611:	75 01                	jne    c0016614 <unblockTask(ThreadControlBlock*)+0x7c>
c0016613:	fb                   	sti    
c0016614:	83 c4 08             	add    esp,0x8
c0016617:	5b                   	pop    ebx
c0016618:	c3                   	ret    
c0016619:	8d 76 00             	lea    esi,[esi+0x0]
c001661c:	83 ec 0c             	sub    esp,0xc
c001661f:	68 ac 28 02 c0       	push   0xc00228ac
c0016624:	e8 1c 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016629:	83 c4 10             	add    esp,0x10
c001662c:	eb d6                	jmp    c0016604 <unblockTask(ThreadControlBlock*)+0x6c>
c001662e:	66 90                	xchg   ax,ax
c0016630:	83 ec 08             	sub    esp,0x8
c0016633:	53                   	push   ebx
c0016634:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016639:	e8 62 97 00 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001663e:	83 c4 10             	add    esp,0x10
c0016641:	eb c1                	jmp    c0016604 <unblockTask(ThreadControlBlock*)+0x6c>
c0016643:	90                   	nop

c0016644 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016644:	55                   	push   ebp
c0016645:	57                   	push   edi
c0016646:	56                   	push   esi
c0016647:	53                   	push   ebx
c0016648:	83 ec 1c             	sub    esp,0x1c
c001664b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001664f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016652:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016658:	85 ed                	test   ebp,ebp
c001665a:	7e 28                	jle    c0016684 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001665c:	31 f6                	xor    esi,esi
c001665e:	66 90                	xchg   ax,ax
c0016660:	83 ec 0c             	sub    esp,0xc
c0016663:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001666a:	83 c6 01             	add    esi,0x1
c001666d:	57                   	push   edi
c001666e:	e8 53 14 ff ff       	call   c0007ac6 <free>
c0016673:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016676:	83 c4 10             	add    esp,0x10
c0016679:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001667f:	7f df                	jg     c0016660 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016681:	8d 76 00             	lea    esi,[esi+0x0]
c0016684:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001668e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016693:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016696:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016699:	d3 c0                	rol    eax,cl
c001669b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00166a2:	21 c8                	and    eax,ecx
c00166a4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00166ab:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166ae:	89 f7                	mov    edi,esi
c00166b0:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00166b8:	0f 85 72 01 00 00    	jne    c0016830 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00166be:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00166c4:	85 ed                	test   ebp,ebp
c00166c6:	74 1c                	je     c00166e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00166c8:	83 ec 0c             	sub    esp,0xc
c00166cb:	55                   	push   ebp
c00166cc:	e8 1f ac ff ff       	call   c00112f0 <EnvVarContainer::~EnvVarContainer()>
c00166d1:	59                   	pop    ecx
c00166d2:	5e                   	pop    esi
c00166d3:	6a 0c                	push   0xc
c00166d5:	55                   	push   ebp
c00166d6:	e8 3d 41 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00166db:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166de:	83 c4 10             	add    esp,0x10
c00166e1:	89 f7                	mov    edi,esi
c00166e3:	90                   	nop
c00166e4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00166ea:	85 c0                	test   eax,eax
c00166ec:	0f 84 b2 00 00 00    	je     c00167a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00166f2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00166f5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00166f9:	31 c9                	xor    ecx,ecx
c00166fb:	eb 17                	jmp    c0016714 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00166fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016700:	83 c1 01             	add    ecx,0x1
c0016703:	83 f9 10             	cmp    ecx,0x10
c0016706:	0f 84 98 00 00 00    	je     c00167a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001670c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016712:	66 90                	xchg   ax,ax
c0016714:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001671b:	d3 fa                	sar    edx,cl
c001671d:	80 e2 01             	and    dl,0x1
c0016720:	74 de                	je     c0016700 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016722:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016725:	01 d2                	add    edx,edx
c0016727:	01 ca                	add    edx,ecx
c0016729:	8d 14 92             	lea    edx,[edx+edx*4]
c001672c:	01 d0                	add    eax,edx
c001672e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016734:	83 fd 07             	cmp    ebp,0x7
c0016737:	75 c7                	jne    c0016700 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016739:	05 40 02 00 00       	add    eax,0x240
c001673e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016741:	83 fd ff             	cmp    ebp,0xffffffff
c0016744:	0f 8c ee 00 00 00    	jl     c0016838 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001674a:	0f 84 ac 01 00 00    	je     c00168fc <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016750:	85 ed                	test   ebp,ebp
c0016752:	0f 84 90 01 00 00    	je     c00168e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016758:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001675a:	75 a4                	jne    c0016700 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001675c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016762:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016766:	01 d0                	add    eax,edx
c0016768:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001676c:	83 ec 0c             	sub    esp,0xc
c001676f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016775:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016778:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001677e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016785:	50                   	push   eax
c0016786:	e8 0d fe ff ff       	call   c0016598 <unblockTask(ThreadControlBlock*)>
c001678b:	83 c4 10             	add    esp,0x10
c001678e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016791:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016795:	89 f7                	mov    edi,esi
c0016797:	83 c1 01             	add    ecx,0x1
c001679a:	83 f9 10             	cmp    ecx,0x10
c001679d:	0f 85 69 ff ff ff    	jne    c001670c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00167a3:	90                   	nop
c00167a4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00167aa:	85 c0                	test   eax,eax
c00167ac:	74 62                	je     c0016810 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167ae:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00167b4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00167ba:	74 54                	je     c0016810 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167bc:	83 ec 0c             	sub    esp,0xc
c00167bf:	68 e4 c6 02 c0       	push   0xc002c6e4
c00167c4:	e8 13 95 00 00       	call   c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167c9:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00167d0:	89 c7                	mov    edi,eax
c00167d2:	e8 e9 94 00 00       	call   c001fcc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	84 c0                	test   al,al
c00167dc:	0f 84 ce 00 00 00    	je     c00168b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00167e2:	66 90                	xchg   ax,ax
c00167e4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167e7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00167ed:	85 d2                	test   edx,edx
c00167ef:	74 0f                	je     c0016800 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00167f1:	83 ec 0c             	sub    esp,0xc
c00167f4:	8b 02                	mov    eax,DWORD PTR [edx]
c00167f6:	52                   	push   edx
c00167f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167fa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167fd:	83 c4 10             	add    esp,0x10
c0016800:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001680a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001680d:	8d 76 00             	lea    esi,[esi+0x0]
c0016810:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016816:	85 db                	test   ebx,ebx
c0016818:	74 16                	je     c0016830 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001681a:	83 ec 0c             	sub    esp,0xc
c001681d:	53                   	push   ebx
c001681e:	e8 8f 33 ff ff       	call   c0009bb2 <VAS::~VAS()>
c0016823:	58                   	pop    eax
c0016824:	5a                   	pop    edx
c0016825:	6a 14                	push   0x14
c0016827:	53                   	push   ebx
c0016828:	e8 eb 3f ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001682d:	83 c4 10             	add    esp,0x10
c0016830:	83 c4 1c             	add    esp,0x1c
c0016833:	5b                   	pop    ebx
c0016834:	5e                   	pop    esi
c0016835:	5f                   	pop    edi
c0016836:	5d                   	pop    ebp
c0016837:	c3                   	ret    
c0016838:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001683c:	83 ec 0c             	sub    esp,0xc
c001683f:	68 78 29 02 c0       	push   0xc0022978
c0016844:	e8 96 ad ff ff       	call   c00115df <KePanic(char const*)>
c0016849:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001684c:	83 c4 10             	add    esp,0x10
c001684f:	89 f7                	mov    edi,esi
c0016851:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016855:	e9 a6 fe ff ff       	jmp    c0016700 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001685a:	66 90                	xchg   ax,ax
c001685c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016862:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016868:	75 1e                	jne    c0016888 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001686a:	83 ec 0c             	sub    esp,0xc
c001686d:	68 e0 29 02 c0       	push   0xc00229e0
c0016872:	e8 ce 40 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016877:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001687e:	e8 11 fa ff ff       	call   c0016294 <blockTask(TaskState)>
c0016883:	83 c4 10             	add    esp,0x10
c0016886:	66 90                	xchg   ax,ax
c0016888:	83 ec 08             	sub    esp,0x8
c001688b:	56                   	push   esi
c001688c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016891:	e8 0a 95 00 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016896:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001689d:	e8 3a 94 00 00       	call   c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168a2:	83 c4 10             	add    esp,0x10
c00168a5:	39 f8                	cmp    eax,edi
c00168a7:	0f 84 37 ff ff ff    	je     c00167e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00168ad:	8d 76 00             	lea    esi,[esi+0x0]
c00168b0:	83 ec 0c             	sub    esp,0xc
c00168b3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168b8:	e8 1f 94 00 00       	call   c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168bd:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168c4:	89 c6                	mov    esi,eax
c00168c6:	e8 19 94 00 00       	call   c001fce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00168cb:	83 c4 10             	add    esp,0x10
c00168ce:	39 f3                	cmp    ebx,esi
c00168d0:	74 b6                	je     c0016888 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168d2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00168d5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168d8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00168de:	75 a8                	jne    c0016888 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168e0:	e9 77 ff ff ff       	jmp    c001685c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00168e5:	8d 76 00             	lea    esi,[esi+0x0]
c00168e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168ec:	83 ec 0c             	sub    esp,0xc
c00168ef:	68 ac 29 02 c0       	push   0xc00229ac
c00168f4:	e9 4b ff ff ff       	jmp    c0016844 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00168f9:	8d 76 00             	lea    esi,[esi+0x0]
c00168fc:	8b 36                	mov    esi,DWORD PTR [esi]
c00168fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016902:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016905:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016908:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001690e:	01 d7                	add    edi,edx
c0016910:	89 f8                	mov    eax,edi
c0016912:	e9 51 fe ff ff       	jmp    c0016768 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016917:	90                   	nop

c0016918 <cleanerTaskFunction(void*)>:
c0016918:	53                   	push   ebx
c0016919:	83 ec 08             	sub    esp,0x8
c001691c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016921:	83 e8 01             	sub    eax,0x1
c0016924:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016929:	75 01                	jne    c001692c <cleanerTaskFunction(void*)+0x14>
c001692b:	fb                   	sti    
c001692c:	fa                   	cli    
c001692d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016932:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016939:	8d 50 01             	lea    edx,[eax+0x1]
c001693c:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016942:	0f 84 c4 00 00 00    	je     c0016a0c <cleanerTaskFunction(void*)+0xf4>
c0016948:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001694d:	85 c0                	test   eax,eax
c001694f:	75 03                	jne    c0016954 <cleanerTaskFunction(void*)+0x3c>
c0016951:	fb                   	sti    
c0016952:	66 90                	xchg   ax,ax
c0016954:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c001695b:	fa                   	cli    
c001695c:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016962:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016968:	83 c2 01             	add    edx,0x1
c001696b:	83 c1 01             	add    ecx,0x1
c001696e:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016974:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001697a:	fa                   	cli    
c001697b:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016981:	83 c3 01             	add    ebx,0x1
c0016984:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c001698a:	eb 28                	jmp    c00169b4 <cleanerTaskFunction(void*)+0x9c>
c001698c:	83 ec 0c             	sub    esp,0xc
c001698f:	68 cc c6 02 c0       	push   0xc002c6cc
c0016994:	e8 43 93 00 00       	call   c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016999:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00169a0:	89 c3                	mov    ebx,eax
c00169a2:	e8 3d 93 00 00       	call   c001fce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169aa:	e8 95 fc ff ff       	call   c0016644 <cleanupTerminatedTask(ThreadControlBlock*)>
c00169af:	83 c4 10             	add    esp,0x10
c00169b2:	66 90                	xchg   ax,ax
c00169b4:	83 ec 0c             	sub    esp,0xc
c00169b7:	68 cc c6 02 c0       	push   0xc002c6cc
c00169bc:	e8 ff 92 00 00       	call   c001fcc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169c1:	83 c4 10             	add    esp,0x10
c00169c4:	84 c0                	test   al,al
c00169c6:	74 c4                	je     c001698c <cleanerTaskFunction(void*)+0x74>
c00169c8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169cd:	83 e8 01             	sub    eax,0x1
c00169d0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169d5:	75 01                	jne    c00169d8 <cleanerTaskFunction(void*)+0xc0>
c00169d7:	fb                   	sti    
c00169d8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00169dd:	83 e8 01             	sub    eax,0x1
c00169e0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00169e5:	0f 85 31 ff ff ff    	jne    c001691c <cleanerTaskFunction(void*)+0x4>
c00169eb:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00169f0:	85 c0                	test   eax,eax
c00169f2:	0f 84 24 ff ff ff    	je     c001691c <cleanerTaskFunction(void*)+0x4>
c00169f8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a02:	e8 79 f6 ff ff       	call   c0016080 <schedule()>
c0016a07:	e9 10 ff ff ff       	jmp    c001691c <cleanerTaskFunction(void*)+0x4>
c0016a0c:	83 ec 0c             	sub    esp,0xc
c0016a0f:	6a 02                	push   0x2
c0016a11:	e8 56 f8 ff ff       	call   c001626c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016a16:	83 c4 10             	add    esp,0x10
c0016a19:	e9 36 ff ff ff       	jmp    c0016954 <cleanerTaskFunction(void*)+0x3c>
c0016a1e:	66 90                	xchg   ax,ax

c0016a20 <terminateTask(int)>:
c0016a20:	83 ec 14             	sub    esp,0x14
c0016a23:	fa                   	cli    
c0016a24:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a2a:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a30:	83 c2 01             	add    edx,0x1
c0016a33:	83 c1 01             	add    ecx,0x1
c0016a36:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a3c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a42:	fa                   	cli    
c0016a43:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016a4c:	83 c0 01             	add    eax,0x1
c0016a4f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a59:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016a5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a61:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016a64:	50                   	push   eax
c0016a65:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a6a:	e8 31 93 00 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a74:	83 c4 10             	add    esp,0x10
c0016a77:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016a7e:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016a83:	85 c0                	test   eax,eax
c0016a85:	74 65                	je     c0016aec <terminateTask(int)+0xcc>
c0016a87:	83 ec 0c             	sub    esp,0xc
c0016a8a:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016a91:	50                   	push   eax
c0016a92:	e8 01 fb ff ff       	call   c0016598 <unblockTask(ThreadControlBlock*)>
c0016a97:	83 c4 10             	add    esp,0x10
c0016a9a:	66 90                	xchg   ax,ax
c0016a9c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016aa1:	83 e8 01             	sub    eax,0x1
c0016aa4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016aa9:	75 01                	jne    c0016aac <terminateTask(int)+0x8c>
c0016aab:	fb                   	sti    
c0016aac:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016ab1:	83 e8 01             	sub    eax,0x1
c0016ab4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016ab9:	75 09                	jne    c0016ac4 <terminateTask(int)+0xa4>
c0016abb:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016ac2:	75 3c                	jne    c0016b00 <terminateTask(int)+0xe0>
c0016ac4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ac9:	83 e8 01             	sub    eax,0x1
c0016acc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ad1:	75 01                	jne    c0016ad4 <terminateTask(int)+0xb4>
c0016ad3:	fb                   	sti    
c0016ad4:	fa                   	cli    
c0016ad5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ada:	83 c0 01             	add    eax,0x1
c0016add:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ae2:	66 90                	xchg   ax,ax
c0016ae4:	e8 97 f5 ff ff       	call   c0016080 <schedule()>
c0016ae9:	eb d9                	jmp    c0016ac4 <terminateTask(int)+0xa4>
c0016aeb:	90                   	nop
c0016aec:	83 ec 0c             	sub    esp,0xc
c0016aef:	68 da 28 02 c0       	push   0xc00228da
c0016af4:	e8 4c 3e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016af9:	83 c4 10             	add    esp,0x10
c0016afc:	eb 9e                	jmp    c0016a9c <terminateTask(int)+0x7c>
c0016afe:	66 90                	xchg   ax,ax
c0016b00:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b0a:	eb d8                	jmp    c0016ae4 <terminateTask(int)+0xc4>

c0016b0c <Thr::terminateFromIRQ(int)>:
c0016b0c:	83 ec 18             	sub    esp,0x18
c0016b0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b13:	50                   	push   eax
c0016b14:	e8 07 ff ff ff       	call   c0016a20 <terminateTask(int)>
c0016b19:	90                   	nop
c0016b1a:	66 90                	xchg   ax,ax

c0016b1c <Semaphore::release()>:
c0016b1c:	83 ec 0c             	sub    esp,0xc
c0016b1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b23:	fa                   	cli    
c0016b24:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b29:	83 c0 01             	add    eax,0x1
c0016b2c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b31:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b36:	8d 48 01             	lea    ecx,[eax+0x1]
c0016b39:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b3f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016b42:	85 c9                	test   ecx,ecx
c0016b44:	74 42                	je     c0016b88 <Semaphore::release()+0x6c>
c0016b46:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016b49:	83 ec 0c             	sub    esp,0xc
c0016b4c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b4f:	51                   	push   ecx
c0016b50:	e8 43 fa ff ff       	call   c0016598 <unblockTask(ThreadControlBlock*)>
c0016b55:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b5a:	83 c4 10             	add    esp,0x10
c0016b5d:	83 e8 01             	sub    eax,0x1
c0016b60:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b65:	85 c0                	test   eax,eax
c0016b67:	75 0b                	jne    c0016b74 <Semaphore::release()+0x58>
c0016b69:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016b6e:	85 c0                	test   eax,eax
c0016b70:	75 22                	jne    c0016b94 <Semaphore::release()+0x78>
c0016b72:	66 90                	xchg   ax,ax
c0016b74:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b79:	83 e8 01             	sub    eax,0x1
c0016b7c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b81:	75 01                	jne    c0016b84 <Semaphore::release()+0x68>
c0016b83:	fb                   	sti    
c0016b84:	83 c4 0c             	add    esp,0xc
c0016b87:	c3                   	ret    
c0016b88:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016b8b:	83 e9 01             	sub    ecx,0x1
c0016b8e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016b91:	eb cd                	jmp    c0016b60 <Semaphore::release()+0x44>
c0016b93:	90                   	nop
c0016b94:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b9e:	e8 dd f4 ff ff       	call   c0016080 <schedule()>
c0016ba3:	eb cf                	jmp    c0016b74 <Semaphore::release()+0x58>
c0016ba5:	8d 76 00             	lea    esi,[esi+0x0]

c0016ba8 <__static_initialization_and_destruction_0(int, int)>:
c0016ba8:	83 ec 0c             	sub    esp,0xc
c0016bab:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016bb0:	0f 85 8e 00 00 00    	jne    c0016c44 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016bb6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016bbe:	0f 85 80 00 00 00    	jne    c0016c44 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016bc4:	83 ec 0c             	sub    esp,0xc
c0016bc7:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016bcc:	e8 83 94 00 00       	call   c0020054 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016bd1:	83 c4 10             	add    esp,0x10
c0016bd4:	83 ec 04             	sub    esp,0x4
c0016bd7:	68 b0 35 02 c0       	push   0xc00235b0
c0016bdc:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016be1:	68 04 00 02 c0       	push   0xc0020004
c0016be6:	e8 dd 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016beb:	83 c4 10             	add    esp,0x10
c0016bee:	83 ec 0c             	sub    esp,0xc
c0016bf1:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016bf6:	e8 59 94 00 00       	call   c0020054 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016bfb:	83 c4 10             	add    esp,0x10
c0016bfe:	83 ec 04             	sub    esp,0x4
c0016c01:	68 b0 35 02 c0       	push   0xc00235b0
c0016c06:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c0b:	68 04 00 02 c0       	push   0xc0020004
c0016c10:	e8 b3 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016c15:	83 c4 10             	add    esp,0x10
c0016c18:	83 ec 0c             	sub    esp,0xc
c0016c1b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c20:	e8 2f 94 00 00       	call   c0020054 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c25:	83 c4 10             	add    esp,0x10
c0016c28:	83 ec 04             	sub    esp,0x4
c0016c2b:	68 b0 35 02 c0       	push   0xc00235b0
c0016c30:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c35:	68 04 00 02 c0       	push   0xc0020004
c0016c3a:	e8 89 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016c3f:	83 c4 10             	add    esp,0x10
c0016c42:	66 90                	xchg   ax,ax
c0016c44:	90                   	nop
c0016c45:	83 c4 0c             	add    esp,0xc
c0016c48:	c3                   	ret    
c0016c49:	8d 76 00             	lea    esi,[esi+0x0]

c0016c4c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016c4c:	83 ec 0c             	sub    esp,0xc
c0016c4f:	83 ec 08             	sub    esp,0x8
c0016c52:	68 ff ff 00 00       	push   0xffff
c0016c57:	6a 01                	push   0x1
c0016c59:	e8 4a ff ff ff       	call   c0016ba8 <__static_initialization_and_destruction_0(int, int)>
c0016c5e:	83 c4 10             	add    esp,0x10
c0016c61:	83 c4 0c             	add    esp,0xc
c0016c64:	c3                   	ret    

c0016c65 <Vm::inbv(unsigned short)>:
c0016c65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c69:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c6e:	75 06                	jne    c0016c76 <Vm::inbv(unsigned short)+0x11>
c0016c70:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016c75:	c3                   	ret    
c0016c76:	ec                   	in     al,dx
c0016c77:	c3                   	ret    

c0016c78 <Vm::outbv(unsigned short, unsigned char)>:
c0016c78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c80:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c85:	75 25                	jne    c0016cac <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016c87:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016c8d:	8d 51 01             	lea    edx,[ecx+0x1]
c0016c90:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016c96:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016c9c:	83 fa 20             	cmp    edx,0x20
c0016c9f:	75 0c                	jne    c0016cad <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016ca1:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016cab:	c3                   	ret    
c0016cac:	ee                   	out    dx,al
c0016cad:	c3                   	ret    

c0016cae <Vm::realToLinear(unsigned short, unsigned short)>:
c0016cae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cb3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cb8:	c1 e0 04             	shl    eax,0x4
c0016cbb:	01 d0                	add    eax,edx
c0016cbd:	c3                   	ret    

c0016cbe <Vm::getSegment(unsigned int)>:
c0016cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cc2:	c1 e8 10             	shr    eax,0x10
c0016cc5:	c3                   	ret    

c0016cc6 <Vm::getOffset(unsigned int)>:
c0016cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cca:	c3                   	ret    

c0016ccb <Vm::mainloop2()>:
c0016ccb:	83 ec 18             	sub    esp,0x18
c0016cce:	fa                   	cli    
c0016ccf:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016cd5:	6a 02                	push   0x2
c0016cd7:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016cde:	e8 89 f5 ff ff       	call   c001626c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016ce3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ce8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016cec:	52                   	push   edx
c0016ced:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016cf1:	52                   	push   edx
c0016cf2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016cf6:	52                   	push   edx
c0016cf7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016cfb:	50                   	push   eax
c0016cfc:	e8 0e 95 fe ff       	call   c000020f <goToVM86>
c0016d01:	83 c4 2c             	add    esp,0x2c
c0016d04:	c3                   	ret    

c0016d05 <Vm::mainVm8086Loop(void*)>:
c0016d05:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d0a:	48                   	dec    eax
c0016d0b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d10:	75 01                	jne    c0016d13 <Vm::mainVm8086Loop(void*)+0xe>
c0016d12:	fb                   	sti    
c0016d13:	eb b6                	jmp    c0016ccb <Vm::mainloop2()>

c0016d15 <Vm::mainloop3(unsigned long)>:
c0016d15:	83 ec 18             	sub    esp,0x18
c0016d18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d1c:	fa                   	cli    
c0016d1d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d23:	6a 02                	push   0x2
c0016d25:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016d2c:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016d31:	e8 36 f5 ff ff       	call   c001626c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d36:	83 c4 1c             	add    esp,0x1c
c0016d39:	eb 90                	jmp    c0016ccb <Vm::mainloop2()>

c0016d3b <Vm::initialise8086()>:
c0016d3b:	83 ec 0c             	sub    esp,0xc
c0016d3e:	68 80 00 00 00       	push   0x80
c0016d43:	6a 00                	push   0x0
c0016d45:	68 05 6d 01 c0       	push   0xc0016d05
c0016d4a:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016d50:	e8 db f0 ff ff       	call   c0015e30 <Process::createThread(void (*)(void*), void*, int)>
c0016d55:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016d5c:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016d61:	68 00 01 00 00       	push   0x100
c0016d66:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016d6b:	6a 00                	push   0x0
c0016d6d:	6a 00                	push   0x0
c0016d6f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d75:	e8 a0 31 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016d7a:	83 c4 2c             	add    esp,0x2c
c0016d7d:	c3                   	ret    

c0016d7e <Vm::finish8086()>:
c0016d7e:	53                   	push   ebx
c0016d7f:	83 ec 08             	sub    esp,0x8
c0016d82:	fa                   	cli    
c0016d83:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d89:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016d90:	75 15                	jne    c0016da7 <Vm::finish8086()+0x29>
c0016d92:	e8 e9 f2 ff ff       	call   c0016080 <schedule()>
c0016d97:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d9c:	48                   	dec    eax
c0016d9d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016da2:	75 de                	jne    c0016d82 <Vm::finish8086()+0x4>
c0016da4:	fb                   	sti    
c0016da5:	eb db                	jmp    c0016d82 <Vm::finish8086()+0x4>
c0016da7:	83 ec 0c             	sub    esp,0xc
c0016daa:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016db0:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016db6:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016dbd:	e8 d6 f7 ff ff       	call   c0016598 <unblockTask(ThreadControlBlock*)>
c0016dc2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016dc7:	83 c4 10             	add    esp,0x10
c0016dca:	8d 50 ff             	lea    edx,[eax-0x1]
c0016dcd:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016dd3:	85 d2                	test   edx,edx
c0016dd5:	75 01                	jne    c0016dd8 <Vm::finish8086()+0x5a>
c0016dd7:	fb                   	sti    
c0016dd8:	89 d8                	mov    eax,ebx
c0016dda:	83 c4 08             	add    esp,0x8
c0016ddd:	5b                   	pop    ebx
c0016dde:	c3                   	ret    

c0016ddf <Vm::getOutput8086(unsigned char*)>:
c0016ddf:	57                   	push   edi
c0016de0:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016de6:	56                   	push   esi
c0016de7:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016dec:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016df0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016df2:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016df7:	5e                   	pop    esi
c0016df8:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e02:	5f                   	pop    edi
c0016e03:	c3                   	ret    

c0016e04 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e04:	55                   	push   ebp
c0016e05:	57                   	push   edi
c0016e06:	56                   	push   esi
c0016e07:	53                   	push   ebx
c0016e08:	83 ec 0c             	sub    esp,0xc
c0016e0b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016e0f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016e13:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e17:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016e1b:	fa                   	cli    
c0016e1c:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e22:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016e29:	75 15                	jne    c0016e40 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016e2b:	e8 50 f2 ff ff       	call   c0016080 <schedule()>
c0016e30:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e35:	48                   	dec    eax
c0016e36:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e3b:	75 de                	jne    c0016e1b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e3d:	fb                   	sti    
c0016e3e:	eb db                	jmp    c0016e1b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e40:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016e45:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e4f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016e53:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016e57:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016e5b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016e5f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016e63:	0f b7 ff             	movzx  edi,di
c0016e66:	0f b7 f6             	movzx  esi,si
c0016e69:	50                   	push   eax
c0016e6a:	6a 20                	push   0x20
c0016e6c:	6a 00                	push   0x0
c0016e6e:	68 40 c7 02 c0       	push   0xc002c740
c0016e73:	e8 78 96 fe ff       	call   c00004f0 <memset>
c0016e78:	5a                   	pop    edx
c0016e79:	59                   	pop    ecx
c0016e7a:	57                   	push   edi
c0016e7b:	56                   	push   esi
c0016e7c:	e8 2d fe ff ff       	call   c0016cae <Vm::realToLinear(unsigned short, unsigned short)>
c0016e81:	83 c4 10             	add    esp,0x10
c0016e84:	89 c7                	mov    edi,eax
c0016e86:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e8a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016e8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e90:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e95:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016e9c:	48                   	dec    eax
c0016e9d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ea2:	75 01                	jne    c0016ea5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016ea4:	fb                   	sti    
c0016ea5:	83 ec 0c             	sub    esp,0xc
c0016ea8:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016eae:	e8 e5 f6 ff ff       	call   c0016598 <unblockTask(ThreadControlBlock*)>
c0016eb3:	83 c4 1c             	add    esp,0x1c
c0016eb6:	b0 01                	mov    al,0x1
c0016eb8:	5b                   	pop    ebx
c0016eb9:	5e                   	pop    esi
c0016eba:	5f                   	pop    edi
c0016ebb:	5d                   	pop    ebp
c0016ebc:	c3                   	ret    

c0016ebd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ebd:	55                   	push   ebp
c0016ebe:	57                   	push   edi
c0016ebf:	56                   	push   esi
c0016ec0:	53                   	push   ebx
c0016ec1:	83 ec 34             	sub    esp,0x34
c0016ec4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016ec8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016ecc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016ed0:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016ed4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ed8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016edc:	68 08 2a 02 c0       	push   0xc0022a08
c0016ee1:	e8 5f 3a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016ee6:	83 c4 10             	add    esp,0x10
c0016ee9:	fa                   	cli    
c0016eea:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016ef0:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016ef6:	84 db                	test   bl,bl
c0016ef8:	75 15                	jne    c0016f0f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016efa:	e8 81 f1 ff ff       	call   c0016080 <schedule()>
c0016eff:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f04:	48                   	dec    eax
c0016f05:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f0a:	75 dd                	jne    c0016ee9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f0c:	fb                   	sti    
c0016f0d:	eb da                	jmp    c0016ee9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f13:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f18:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f22:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016f26:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f2a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f2e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f32:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f36:	50                   	push   eax
c0016f37:	6a 20                	push   0x20
c0016f39:	6a 00                	push   0x0
c0016f3b:	68 40 c7 02 c0       	push   0xc002c740
c0016f40:	e8 ab 95 fe ff       	call   c00004f0 <memset>
c0016f45:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016f4c:	e8 65 0b ff ff       	call   c0007ab6 <malloc>
c0016f51:	83 c4 0c             	add    esp,0xc
c0016f54:	89 c5                	mov    ebp,eax
c0016f56:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016f5c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f60:	50                   	push   eax
c0016f61:	e8 a6 4b ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c0016f66:	83 c4 10             	add    esp,0x10
c0016f69:	85 ed                	test   ebp,ebp
c0016f6b:	75 0a                	jne    c0016f77 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016f6d:	83 ec 0c             	sub    esp,0xc
c0016f70:	68 2a 2a 02 c0       	push   0xc0022a2a
c0016f75:	eb 2b                	jmp    c0016fa2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016f77:	50                   	push   eax
c0016f78:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016f7c:	50                   	push   eax
c0016f7d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016f81:	50                   	push   eax
c0016f82:	55                   	push   ebp
c0016f83:	e8 a4 4e ff ff       	call   c000be2c <File::stat(unsigned long long*, bool*)>
c0016f88:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016f8c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016f90:	83 c4 10             	add    esp,0x10
c0016f93:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016f98:	74 27                	je     c0016fc1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016f9a:	83 ec 0c             	sub    esp,0xc
c0016f9d:	68 3e 2a 02 c0       	push   0xc0022a3e
c0016fa2:	e8 38 a6 ff ff       	call   c00115df <KePanic(char const*)>
c0016fa7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fac:	83 c4 10             	add    esp,0x10
c0016faf:	48                   	dec    eax
c0016fb0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fb5:	85 c0                	test   eax,eax
c0016fb7:	75 01                	jne    c0016fba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016fb9:	fb                   	sti    
c0016fba:	31 db                	xor    ebx,ebx
c0016fbc:	e9 90 00 00 00       	jmp    c0017051 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016fc1:	51                   	push   ecx
c0016fc2:	51                   	push   ecx
c0016fc3:	6a 01                	push   0x1
c0016fc5:	55                   	push   ebp
c0016fc6:	e8 5f 4b ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c0016fcb:	83 c4 10             	add    esp,0x10
c0016fce:	85 c0                	test   eax,eax
c0016fd0:	74 26                	je     c0016ff8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016fd2:	83 ec 0c             	sub    esp,0xc
c0016fd5:	68 57 2a 02 c0       	push   0xc0022a57
c0016fda:	e8 00 a6 ff ff       	call   c00115df <KePanic(char const*)>
c0016fdf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fe4:	83 c4 10             	add    esp,0x10
c0016fe7:	48                   	dec    eax
c0016fe8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fed:	85 c0                	test   eax,eax
c0016fef:	75 c9                	jne    c0016fba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016ff1:	fb                   	sti    
c0016ff2:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016ff6:	eb 59                	jmp    c0017051 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016ff8:	0f b7 ff             	movzx  edi,di
c0016ffb:	50                   	push   eax
c0016ffc:	0f b7 f6             	movzx  esi,si
c0016fff:	50                   	push   eax
c0017000:	57                   	push   edi
c0017001:	56                   	push   esi
c0017002:	e8 a7 fc ff ff       	call   c0016cae <Vm::realToLinear(unsigned short, unsigned short)>
c0017007:	5a                   	pop    edx
c0017008:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001700b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001700f:	51                   	push   ecx
c0017010:	50                   	push   eax
c0017011:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017015:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017019:	55                   	push   ebp
c001701a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001701d:	83 c4 14             	add    esp,0x14
c0017020:	55                   	push   ebp
c0017021:	e8 62 4b ff ff       	call   c000bb88 <File::close()>
c0017026:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001702b:	83 c4 10             	add    esp,0x10
c001702e:	48                   	dec    eax
c001702f:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0017036:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001703b:	85 c0                	test   eax,eax
c001703d:	75 01                	jne    c0017040 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001703f:	fb                   	sti    
c0017040:	83 ec 0c             	sub    esp,0xc
c0017043:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0017049:	e8 4a f5 ff ff       	call   c0016598 <unblockTask(ThreadControlBlock*)>
c001704e:	83 c4 10             	add    esp,0x10
c0017051:	83 c4 2c             	add    esp,0x2c
c0017054:	88 d8                	mov    al,bl
c0017056:	5b                   	pop    ebx
c0017057:	5e                   	pop    esi
c0017058:	5f                   	pop    edi
c0017059:	5d                   	pop    ebp
c001705a:	c3                   	ret    

c001705b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001705b:	57                   	push   edi
c001705c:	56                   	push   esi
c001705d:	53                   	push   ebx
c001705e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017062:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017066:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001706a:	83 e8 06             	sub    eax,0x6
c001706d:	0f b7 c0             	movzx  eax,ax
c0017070:	50                   	push   eax
c0017071:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017076:	50                   	push   eax
c0017077:	e8 32 fc ff ff       	call   c0016cae <Vm::realToLinear(unsigned short, unsigned short)>
c001707c:	5a                   	pop    edx
c001707d:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017080:	59                   	pop    ecx
c0017081:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017084:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017087:	81 e2 ff ff 00 00    	and    edx,0xffff
c001708d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017090:	8d 56 02             	lea    edx,[esi+0x2]
c0017093:	66 89 10             	mov    WORD PTR [eax],dx
c0017096:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001709a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001709e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00170a1:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00170a5:	0f b6 f1             	movzx  esi,cl
c00170a8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00170ac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00170b2:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00170b6:	0f b6 d5             	movzx  edx,ch
c00170b9:	74 0a                	je     c00170c5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c00170bb:	c1 e2 08             	shl    edx,0x8
c00170be:	09 f2                	or     edx,esi
c00170c0:	80 ce 02             	or     dh,0x2
c00170c3:	eb 08                	jmp    c00170cd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c00170c5:	c1 e2 08             	shl    edx,0x8
c00170c8:	09 f2                	or     edx,esi
c00170ca:	80 e6 fd             	and    dh,0xfd
c00170cd:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00170d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170d6:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00170da:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00170e2:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00170e5:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00170ed:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00170f0:	5b                   	pop    ebx
c00170f1:	5e                   	pop    esi
c00170f2:	5f                   	pop    edi
c00170f3:	c3                   	ret    

c00170f4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00170f4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170f9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170fe:	c1 e0 04             	shl    eax,0x4
c0017101:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017104:	c3                   	ret    

c0017105 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017105:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001710a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001710f:	c1 e0 04             	shl    eax,0x4
c0017112:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017116:	c3                   	ret    

c0017117 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017117:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001711c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017121:	c1 e0 04             	shl    eax,0x4
c0017124:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017127:	c3                   	ret    

c0017128 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017128:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001712d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017132:	c1 e0 04             	shl    eax,0x4
c0017135:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017139:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001713c:	c3                   	ret    

c001713d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001713d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017142:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017147:	c1 e0 04             	shl    eax,0x4
c001714a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001714e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017152:	c3                   	ret    

c0017153 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017153:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017158:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001715d:	c1 e0 04             	shl    eax,0x4
c0017160:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017164:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017167:	c3                   	ret    

c0017168 <Vm::faultHandler(regs*)>:
c0017168:	55                   	push   ebp
c0017169:	57                   	push   edi
c001716a:	56                   	push   esi
c001716b:	53                   	push   ebx
c001716c:	83 ec 2c             	sub    esp,0x2c
c001716f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017173:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017176:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001717a:	0f b7 f8             	movzx  edi,ax
c001717d:	52                   	push   edx
c001717e:	0f b7 c0             	movzx  eax,ax
c0017181:	50                   	push   eax
c0017182:	e8 27 fb ff ff       	call   c0016cae <Vm::realToLinear(unsigned short, unsigned short)>
c0017187:	5a                   	pop    edx
c0017188:	59                   	pop    ecx
c0017189:	89 c1                	mov    ecx,eax
c001718b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001718e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017192:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017197:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001719b:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001719e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171a2:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00171a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171af:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171b3:	e8 f6 fa ff ff       	call   c0016cae <Vm::realToLinear(unsigned short, unsigned short)>
c00171b8:	5e                   	pop    esi
c00171b9:	be 06 00 00 00       	mov    esi,0x6
c00171be:	5d                   	pop    ebp
c00171bf:	31 ed                	xor    ebp,ebp
c00171c1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00171c6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00171c9:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00171cf:	0f 84 74 02 00 00    	je     c0017449 <Vm::faultHandler(regs*)+0x2e1>
c00171d5:	0f 87 94 00 00 00    	ja     c001726f <Vm::faultHandler(regs*)+0x107>
c00171db:	83 fa 66             	cmp    edx,0x66
c00171de:	0f 84 e2 01 00 00    	je     c00173c6 <Vm::faultHandler(regs*)+0x25e>
c00171e4:	77 47                	ja     c001722d <Vm::faultHandler(regs*)+0xc5>
c00171e6:	83 fa 36             	cmp    edx,0x36
c00171e9:	0f 84 ca 01 00 00    	je     c00173b9 <Vm::faultHandler(regs*)+0x251>
c00171ef:	77 1a                	ja     c001720b <Vm::faultHandler(regs*)+0xa3>
c00171f1:	83 fa 26             	cmp    edx,0x26
c00171f4:	0f 84 98 01 00 00    	je     c0017392 <Vm::faultHandler(regs*)+0x22a>
c00171fa:	83 fa 2e             	cmp    edx,0x2e
c00171fd:	0f 85 21 06 00 00    	jne    c0017824 <Vm::faultHandler(regs*)+0x6bc>
c0017203:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017206:	31 f6                	xor    esi,esi
c0017208:	41                   	inc    ecx
c0017209:	eb bb                	jmp    c00171c6 <Vm::faultHandler(regs*)+0x5e>
c001720b:	83 fa 64             	cmp    edx,0x64
c001720e:	0f 84 8b 01 00 00    	je     c001739f <Vm::faultHandler(regs*)+0x237>
c0017214:	0f 87 92 01 00 00    	ja     c00173ac <Vm::faultHandler(regs*)+0x244>
c001721a:	83 fa 3e             	cmp    edx,0x3e
c001721d:	0f 85 01 06 00 00    	jne    c0017824 <Vm::faultHandler(regs*)+0x6bc>
c0017223:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017226:	be 01 00 00 00       	mov    esi,0x1
c001722b:	eb db                	jmp    c0017208 <Vm::faultHandler(regs*)+0xa0>
c001722d:	83 fa 6d             	cmp    edx,0x6d
c0017230:	0f 84 34 03 00 00    	je     c001756a <Vm::faultHandler(regs*)+0x402>
c0017236:	77 17                	ja     c001724f <Vm::faultHandler(regs*)+0xe7>
c0017238:	83 fa 67             	cmp    edx,0x67
c001723b:	0f 84 92 01 00 00    	je     c00173d3 <Vm::faultHandler(regs*)+0x26b>
c0017241:	83 fa 6c             	cmp    edx,0x6c
c0017244:	0f 84 b1 02 00 00    	je     c00174fb <Vm::faultHandler(regs*)+0x393>
c001724a:	e9 d5 05 00 00       	jmp    c0017824 <Vm::faultHandler(regs*)+0x6bc>
c001724f:	83 fa 6f             	cmp    edx,0x6f
c0017252:	0f 84 3d 04 00 00    	je     c0017695 <Vm::faultHandler(regs*)+0x52d>
c0017258:	0f 82 9f 03 00 00    	jb     c00175fd <Vm::faultHandler(regs*)+0x495>
c001725e:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017264:	0f 84 76 01 00 00    	je     c00173e0 <Vm::faultHandler(regs*)+0x278>
c001726a:	e9 b5 05 00 00       	jmp    c0017824 <Vm::faultHandler(regs*)+0x6bc>
c001726f:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017275:	0f 84 51 05 00 00    	je     c00177cc <Vm::faultHandler(regs*)+0x664>
c001727b:	0f 87 a9 00 00 00    	ja     c001732a <Vm::faultHandler(regs*)+0x1c2>
c0017281:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0017287:	0f 84 d0 04 00 00    	je     c001775d <Vm::faultHandler(regs*)+0x5f5>
c001728d:	77 78                	ja     c0017307 <Vm::faultHandler(regs*)+0x19f>
c001728f:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017295:	0f 84 0e 02 00 00    	je     c00174a9 <Vm::faultHandler(regs*)+0x341>
c001729b:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00172a1:	0f 85 7d 05 00 00    	jne    c0017824 <Vm::faultHandler(regs*)+0x6bc>
c00172a7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00172ab:	89 d1                	mov    ecx,edx
c00172ad:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00172b0:	c1 e1 08             	shl    ecx,0x8
c00172b3:	09 ca                	or     edx,ecx
c00172b5:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00172b8:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00172bc:	89 d1                	mov    ecx,edx
c00172be:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00172c2:	c1 e1 08             	shl    ecx,0x8
c00172c5:	09 ca                	or     edx,ecx
c00172c7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00172ca:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00172ce:	89 d1                	mov    ecx,edx
c00172d0:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00172d4:	c1 e1 08             	shl    ecx,0x8
c00172d7:	09 ca                	or     edx,ecx
c00172d9:	81 ca 00 02 02 00    	or     edx,0x20200
c00172df:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00172e2:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00172e6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00172ec:	d1 e8                	shr    eax,1
c00172ee:	83 e0 01             	and    eax,0x1
c00172f1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00172f4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00172f7:	83 c0 06             	add    eax,0x6
c00172fa:	25 ff ff 00 00       	and    eax,0xffff
c00172ff:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017302:	e9 19 05 00 00       	jmp    c0017820 <Vm::faultHandler(regs*)+0x6b8>
c0017307:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001730d:	0f 84 8f 04 00 00    	je     c00177a2 <Vm::faultHandler(regs*)+0x63a>
c0017313:	0f 82 60 04 00 00    	jb     c0017779 <Vm::faultHandler(regs*)+0x611>
c0017319:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001731f:	0f 84 94 04 00 00    	je     c00177b9 <Vm::faultHandler(regs*)+0x651>
c0017325:	e9 fa 04 00 00       	jmp    c0017824 <Vm::faultHandler(regs*)+0x6bc>
c001732a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017330:	0f 84 d7 04 00 00    	je     c001780d <Vm::faultHandler(regs*)+0x6a5>
c0017336:	77 2e                	ja     c0017366 <Vm::faultHandler(regs*)+0x1fe>
c0017338:	81 fa ed 00 00 00    	cmp    edx,0xed
c001733e:	0f 84 a4 04 00 00    	je     c00177e8 <Vm::faultHandler(regs*)+0x680>
c0017344:	81 fa ee 00 00 00    	cmp    edx,0xee
c001734a:	0f 85 d4 04 00 00    	jne    c0017824 <Vm::faultHandler(regs*)+0x6bc>
c0017350:	50                   	push   eax
c0017351:	50                   	push   eax
c0017352:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017356:	50                   	push   eax
c0017357:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001735b:	50                   	push   eax
c001735c:	e8 17 f9 ff ff       	call   c0016c78 <Vm::outbv(unsigned short, unsigned char)>
c0017361:	e9 9f 04 00 00       	jmp    c0017805 <Vm::faultHandler(regs*)+0x69d>
c0017366:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001736c:	0f 84 6d 01 00 00    	je     c00174df <Vm::faultHandler(regs*)+0x377>
c0017372:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017378:	0f 84 6f 01 00 00    	je     c00174ed <Vm::faultHandler(regs*)+0x385>
c001737e:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017384:	0f 85 9a 04 00 00    	jne    c0017824 <Vm::faultHandler(regs*)+0x6bc>
c001738a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001738d:	e9 76 fe ff ff       	jmp    c0017208 <Vm::faultHandler(regs*)+0xa0>
c0017392:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017395:	be 02 00 00 00       	mov    esi,0x2
c001739a:	e9 69 fe ff ff       	jmp    c0017208 <Vm::faultHandler(regs*)+0xa0>
c001739f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173a2:	be 03 00 00 00       	mov    esi,0x3
c00173a7:	e9 5c fe ff ff       	jmp    c0017208 <Vm::faultHandler(regs*)+0xa0>
c00173ac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173af:	be 04 00 00 00       	mov    esi,0x4
c00173b4:	e9 4f fe ff ff       	jmp    c0017208 <Vm::faultHandler(regs*)+0xa0>
c00173b9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173bc:	be 05 00 00 00       	mov    esi,0x5
c00173c1:	e9 42 fe ff ff       	jmp    c0017208 <Vm::faultHandler(regs*)+0xa0>
c00173c6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173c9:	bd 01 00 00 00       	mov    ebp,0x1
c00173ce:	e9 35 fe ff ff       	jmp    c0017208 <Vm::faultHandler(regs*)+0xa0>
c00173d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173d6:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00173db:	e9 28 fe ff ff       	jmp    c0017208 <Vm::faultHandler(regs*)+0xa0>
c00173e0:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00173e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00173e7:	83 e5 01             	and    ebp,0x1
c00173ea:	74 30                	je     c001741c <Vm::faultHandler(regs*)+0x2b4>
c00173ec:	83 e9 04             	sub    ecx,0x4
c00173ef:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00173f5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00173fb:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00173fe:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017401:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017407:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001740b:	0f 84 0c 04 00 00    	je     c001781d <Vm::faultHandler(regs*)+0x6b5>
c0017411:	80 ce 02             	or     dh,0x2
c0017414:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017417:	e9 01 04 00 00       	jmp    c001781d <Vm::faultHandler(regs*)+0x6b5>
c001741c:	83 e9 02             	sub    ecx,0x2
c001741f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017425:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017428:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001742c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017432:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017436:	74 05                	je     c001743d <Vm::faultHandler(regs*)+0x2d5>
c0017438:	80 ce 02             	or     dh,0x2
c001743b:	eb 03                	jmp    c0017440 <Vm::faultHandler(regs*)+0x2d8>
c001743d:	80 e6 fd             	and    dh,0xfd
c0017440:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017444:	e9 d4 03 00 00       	jmp    c001781d <Vm::faultHandler(regs*)+0x6b5>
c0017449:	83 e5 01             	and    ebp,0x1
c001744c:	74 2a                	je     c0017478 <Vm::faultHandler(regs*)+0x310>
c001744e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017450:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017456:	81 ca 00 02 02 00    	or     edx,0x20200
c001745c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001745f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017461:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017467:	c1 e8 09             	shr    eax,0x9
c001746a:	83 e0 01             	and    eax,0x1
c001746d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017470:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017473:	83 c0 04             	add    eax,0x4
c0017476:	eb 24                	jmp    c001749c <Vm::faultHandler(regs*)+0x334>
c0017478:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001747b:	81 ca 00 02 02 00    	or     edx,0x20200
c0017481:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017484:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017487:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001748d:	c1 e8 09             	shr    eax,0x9
c0017490:	83 e0 01             	and    eax,0x1
c0017493:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017496:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017499:	83 c0 02             	add    eax,0x2
c001749c:	25 ff ff 00 00       	and    eax,0xffff
c00174a1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00174a4:	e9 74 03 00 00       	jmp    c001781d <Vm::faultHandler(regs*)+0x6b5>
c00174a9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174ad:	3d ee 00 00 00       	cmp    eax,0xee
c00174b2:	75 10                	jne    c00174c4 <Vm::faultHandler(regs*)+0x35c>
c00174b4:	83 ec 0c             	sub    esp,0xc
c00174b7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00174ba:	e8 56 f8 ff ff       	call   c0016d15 <Vm::mainloop3(unsigned long)>
c00174bf:	e9 44 03 00 00       	jmp    c0017808 <Vm::faultHandler(regs*)+0x6a0>
c00174c4:	83 ec 0c             	sub    esp,0xc
c00174c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00174cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00174cf:	51                   	push   ecx
c00174d0:	50                   	push   eax
c00174d1:	53                   	push   ebx
c00174d2:	e8 84 fb ff ff       	call   c001705b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00174d7:	83 c4 20             	add    esp,0x20
c00174da:	e9 41 03 00 00       	jmp    c0017820 <Vm::faultHandler(regs*)+0x6b8>
c00174df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174e4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00174e8:	e9 30 03 00 00       	jmp    c001781d <Vm::faultHandler(regs*)+0x6b5>
c00174ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174f2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00174f6:	e9 22 03 00 00       	jmp    c001781d <Vm::faultHandler(regs*)+0x6b5>
c00174fb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00174fe:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017503:	74 2b                	je     c0017530 <Vm::faultHandler(regs*)+0x3c8>
c0017505:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001750c:	76 22                	jbe    c0017530 <Vm::faultHandler(regs*)+0x3c8>
c001750e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017512:	50                   	push   eax
c0017513:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017517:	50                   	push   eax
c0017518:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001751c:	50                   	push   eax
c001751d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017521:	50                   	push   eax
c0017522:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017526:	50                   	push   eax
c0017527:	6a 6c                	push   0x6c
c0017529:	6a 6c                	push   0x6c
c001752b:	e9 bd 01 00 00       	jmp    c00176ed <Vm::faultHandler(regs*)+0x585>
c0017530:	83 ec 0c             	sub    esp,0xc
c0017533:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017537:	0f b7 f6             	movzx  esi,si
c001753a:	50                   	push   eax
c001753b:	e8 25 f7 ff ff       	call   c0016c65 <Vm::inbv(unsigned short)>
c0017540:	83 c4 0c             	add    esp,0xc
c0017543:	0f b6 c0             	movzx  eax,al
c0017546:	50                   	push   eax
c0017547:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001754b:	50                   	push   eax
c001754c:	56                   	push   esi
c001754d:	e8 d6 fb ff ff       	call   c0017128 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017552:	83 c4 10             	add    esp,0x10
c0017555:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017558:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001755c:	74 03                	je     c0017561 <Vm::faultHandler(regs*)+0x3f9>
c001755e:	48                   	dec    eax
c001755f:	eb 01                	jmp    c0017562 <Vm::faultHandler(regs*)+0x3fa>
c0017561:	40                   	inc    eax
c0017562:	0f b7 c0             	movzx  eax,ax
c0017565:	e9 8b 00 00 00       	jmp    c00175f5 <Vm::faultHandler(regs*)+0x48d>
c001756a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001756d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017570:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017575:	74 29                	je     c00175a0 <Vm::faultHandler(regs*)+0x438>
c0017577:	3d ff ff 00 00       	cmp    eax,0xffff
c001757c:	76 22                	jbe    c00175a0 <Vm::faultHandler(regs*)+0x438>
c001757e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017582:	50                   	push   eax
c0017583:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017587:	50                   	push   eax
c0017588:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001758c:	50                   	push   eax
c001758d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017591:	50                   	push   eax
c0017592:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017596:	50                   	push   eax
c0017597:	6a 6d                	push   0x6d
c0017599:	6a 6d                	push   0x6d
c001759b:	e9 4d 01 00 00       	jmp    c00176ed <Vm::faultHandler(regs*)+0x585>
c00175a0:	0f b7 c8             	movzx  ecx,ax
c00175a3:	0f b7 f6             	movzx  esi,si
c00175a6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00175a9:	83 e5 01             	and    ebp,0x1
c00175ac:	74 20                	je     c00175ce <Vm::faultHandler(regs*)+0x466>
c00175ae:	ed                   	in     eax,dx
c00175af:	55                   	push   ebp
c00175b0:	50                   	push   eax
c00175b1:	51                   	push   ecx
c00175b2:	56                   	push   esi
c00175b3:	e8 9b fb ff ff       	call   c0017153 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00175b8:	83 c4 10             	add    esp,0x10
c00175bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175be:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175c2:	74 05                	je     c00175c9 <Vm::faultHandler(regs*)+0x461>
c00175c4:	83 e8 04             	sub    eax,0x4
c00175c7:	eb 27                	jmp    c00175f0 <Vm::faultHandler(regs*)+0x488>
c00175c9:	83 c0 04             	add    eax,0x4
c00175cc:	eb 22                	jmp    c00175f0 <Vm::faultHandler(regs*)+0x488>
c00175ce:	66 ed                	in     ax,dx
c00175d0:	0f b7 c0             	movzx  eax,ax
c00175d3:	57                   	push   edi
c00175d4:	50                   	push   eax
c00175d5:	51                   	push   ecx
c00175d6:	56                   	push   esi
c00175d7:	e8 61 fb ff ff       	call   c001713d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00175dc:	83 c4 10             	add    esp,0x10
c00175df:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175e2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175e6:	74 05                	je     c00175ed <Vm::faultHandler(regs*)+0x485>
c00175e8:	83 e8 02             	sub    eax,0x2
c00175eb:	eb 03                	jmp    c00175f0 <Vm::faultHandler(regs*)+0x488>
c00175ed:	83 c0 02             	add    eax,0x2
c00175f0:	25 ff ff 00 00       	and    eax,0xffff
c00175f5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00175f8:	e9 20 02 00 00       	jmp    c001781d <Vm::faultHandler(regs*)+0x6b5>
c00175fd:	8d 46 ff             	lea    eax,[esi-0x1]
c0017600:	0f b6 f0             	movzx  esi,al
c0017603:	83 fe 05             	cmp    esi,0x5
c0017606:	77 23                	ja     c001762b <Vm::faultHandler(regs*)+0x4c3>
c0017608:	ff 24 b5 cc 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd534]
c001760f:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017614:	eb 15                	jmp    c001762b <Vm::faultHandler(regs*)+0x4c3>
c0017616:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001761a:	eb 0f                	jmp    c001762b <Vm::faultHandler(regs*)+0x4c3>
c001761c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017620:	eb 09                	jmp    c001762b <Vm::faultHandler(regs*)+0x4c3>
c0017622:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017626:	eb 03                	jmp    c001762b <Vm::faultHandler(regs*)+0x4c3>
c0017628:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001762b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001762e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017633:	74 29                	je     c001765e <Vm::faultHandler(regs*)+0x4f6>
c0017635:	3d ff ff 00 00       	cmp    eax,0xffff
c001763a:	76 22                	jbe    c001765e <Vm::faultHandler(regs*)+0x4f6>
c001763c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017640:	50                   	push   eax
c0017641:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017645:	50                   	push   eax
c0017646:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001764a:	50                   	push   eax
c001764b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001764f:	50                   	push   eax
c0017650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017654:	50                   	push   eax
c0017655:	6a 6e                	push   0x6e
c0017657:	6a 6e                	push   0x6e
c0017659:	e9 8f 00 00 00       	jmp    c00176ed <Vm::faultHandler(regs*)+0x585>
c001765e:	0f b7 c0             	movzx  eax,ax
c0017661:	52                   	push   edx
c0017662:	52                   	push   edx
c0017663:	50                   	push   eax
c0017664:	57                   	push   edi
c0017665:	e8 8a fa ff ff       	call   c00170f4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001766a:	59                   	pop    ecx
c001766b:	0f b6 c0             	movzx  eax,al
c001766e:	5e                   	pop    esi
c001766f:	50                   	push   eax
c0017670:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017674:	50                   	push   eax
c0017675:	e8 fe f5 ff ff       	call   c0016c78 <Vm::outbv(unsigned short, unsigned char)>
c001767a:	83 c4 10             	add    esp,0x10
c001767d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017680:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017684:	74 03                	je     c0017689 <Vm::faultHandler(regs*)+0x521>
c0017686:	48                   	dec    eax
c0017687:	eb 01                	jmp    c001768a <Vm::faultHandler(regs*)+0x522>
c0017689:	40                   	inc    eax
c001768a:	0f b7 c0             	movzx  eax,ax
c001768d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017690:	e9 88 01 00 00       	jmp    c001781d <Vm::faultHandler(regs*)+0x6b5>
c0017695:	8d 46 ff             	lea    eax,[esi-0x1]
c0017698:	0f b6 f0             	movzx  esi,al
c001769b:	83 fe 05             	cmp    esi,0x5
c001769e:	77 1e                	ja     c00176be <Vm::faultHandler(regs*)+0x556>
c00176a0:	ff 24 b5 e4 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd51c]
c00176a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00176ab:	eb 11                	jmp    c00176be <Vm::faultHandler(regs*)+0x556>
c00176ad:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00176b0:	eb 0c                	jmp    c00176be <Vm::faultHandler(regs*)+0x556>
c00176b2:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00176b5:	eb 07                	jmp    c00176be <Vm::faultHandler(regs*)+0x556>
c00176b7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00176ba:	eb 02                	jmp    c00176be <Vm::faultHandler(regs*)+0x556>
c00176bc:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00176be:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00176c1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00176c6:	74 37                	je     c00176ff <Vm::faultHandler(regs*)+0x597>
c00176c8:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00176ce:	76 2f                	jbe    c00176ff <Vm::faultHandler(regs*)+0x597>
c00176d0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00176d4:	50                   	push   eax
c00176d5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176d9:	50                   	push   eax
c00176da:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00176de:	50                   	push   eax
c00176df:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176e3:	50                   	push   eax
c00176e4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176e8:	50                   	push   eax
c00176e9:	6a 6f                	push   0x6f
c00176eb:	6a 6f                	push   0x6f
c00176ed:	68 70 2a 02 c0       	push   0xc0022a70
c00176f2:	e8 4e 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00176f7:	83 c4 20             	add    esp,0x20
c00176fa:	e9 83 01 00 00       	jmp    c0017882 <Vm::faultHandler(regs*)+0x71a>
c00176ff:	0f b7 d7             	movzx  edx,di
c0017702:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017705:	0f b7 c6             	movzx  eax,si
c0017708:	81 e1 00 04 00 00    	and    ecx,0x400
c001770e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017711:	83 e5 01             	and    ebp,0x1
c0017714:	74 1d                	je     c0017733 <Vm::faultHandler(regs*)+0x5cb>
c0017716:	55                   	push   ebp
c0017717:	55                   	push   ebp
c0017718:	50                   	push   eax
c0017719:	52                   	push   edx
c001771a:	e8 f8 f9 ff ff       	call   c0017117 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001771f:	83 c4 10             	add    esp,0x10
c0017722:	89 fa                	mov    edx,edi
c0017724:	ef                   	out    dx,eax
c0017725:	85 c9                	test   ecx,ecx
c0017727:	74 05                	je     c001772e <Vm::faultHandler(regs*)+0x5c6>
c0017729:	83 ee 04             	sub    esi,0x4
c001772c:	eb 21                	jmp    c001774f <Vm::faultHandler(regs*)+0x5e7>
c001772e:	83 c6 04             	add    esi,0x4
c0017731:	eb 1c                	jmp    c001774f <Vm::faultHandler(regs*)+0x5e7>
c0017733:	55                   	push   ebp
c0017734:	55                   	push   ebp
c0017735:	50                   	push   eax
c0017736:	52                   	push   edx
c0017737:	e8 c9 f9 ff ff       	call   c0017105 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001773c:	83 c4 10             	add    esp,0x10
c001773f:	89 fa                	mov    edx,edi
c0017741:	66 ef                	out    dx,ax
c0017743:	85 c9                	test   ecx,ecx
c0017745:	74 05                	je     c001774c <Vm::faultHandler(regs*)+0x5e4>
c0017747:	83 ee 02             	sub    esi,0x2
c001774a:	eb 03                	jmp    c001774f <Vm::faultHandler(regs*)+0x5e7>
c001774c:	83 c6 02             	add    esi,0x2
c001774f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017755:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017758:	e9 c0 00 00 00       	jmp    c001781d <Vm::faultHandler(regs*)+0x6b5>
c001775d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017764:	83 ec 0c             	sub    esp,0xc
c0017767:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001776b:	50                   	push   eax
c001776c:	e8 f4 f4 ff ff       	call   c0016c65 <Vm::inbv(unsigned short)>
c0017771:	0f b6 c0             	movzx  eax,al
c0017774:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017777:	eb 3a                	jmp    c00177b3 <Vm::faultHandler(regs*)+0x64b>
c0017779:	83 e5 01             	and    ebp,0x1
c001777c:	74 07                	je     c0017785 <Vm::faultHandler(regs*)+0x61d>
c001777e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017782:	ed                   	in     eax,dx
c0017783:	eb 14                	jmp    c0017799 <Vm::faultHandler(regs*)+0x631>
c0017785:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017788:	66 31 f6             	xor    si,si
c001778b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001778e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017792:	66 ed                	in     ax,dx
c0017794:	0f b7 c0             	movzx  eax,ax
c0017797:	09 f0                	or     eax,esi
c0017799:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001779c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00177a0:	eb 7e                	jmp    c0017820 <Vm::faultHandler(regs*)+0x6b8>
c00177a2:	52                   	push   edx
c00177a3:	52                   	push   edx
c00177a4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00177a8:	50                   	push   eax
c00177a9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177ad:	50                   	push   eax
c00177ae:	e8 c5 f4 ff ff       	call   c0016c78 <Vm::outbv(unsigned short, unsigned char)>
c00177b3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00177b7:	eb 4f                	jmp    c0017808 <Vm::faultHandler(regs*)+0x6a0>
c00177b9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00177bc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177c0:	83 e5 01             	and    ebp,0x1
c00177c3:	74 03                	je     c00177c8 <Vm::faultHandler(regs*)+0x660>
c00177c5:	ef                   	out    dx,eax
c00177c6:	eb d4                	jmp    c001779c <Vm::faultHandler(regs*)+0x634>
c00177c8:	66 ef                	out    dx,ax
c00177ca:	eb d0                	jmp    c001779c <Vm::faultHandler(regs*)+0x634>
c00177cc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00177d3:	83 ec 0c             	sub    esp,0xc
c00177d6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00177da:	50                   	push   eax
c00177db:	e8 85 f4 ff ff       	call   c0016c65 <Vm::inbv(unsigned short)>
c00177e0:	0f b6 c0             	movzx  eax,al
c00177e3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00177e6:	eb 1d                	jmp    c0017805 <Vm::faultHandler(regs*)+0x69d>
c00177e8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00177eb:	83 e5 01             	and    ebp,0x1
c00177ee:	74 03                	je     c00177f3 <Vm::faultHandler(regs*)+0x68b>
c00177f0:	ed                   	in     eax,dx
c00177f1:	eb 0d                	jmp    c0017800 <Vm::faultHandler(regs*)+0x698>
c00177f3:	66 ed                	in     ax,dx
c00177f5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00177f8:	0f b7 c0             	movzx  eax,ax
c00177fb:	66 31 d2             	xor    dx,dx
c00177fe:	09 d0                	or     eax,edx
c0017800:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017803:	eb 18                	jmp    c001781d <Vm::faultHandler(regs*)+0x6b5>
c0017805:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017808:	83 c4 10             	add    esp,0x10
c001780b:	eb 13                	jmp    c0017820 <Vm::faultHandler(regs*)+0x6b8>
c001780d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017810:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017813:	83 e5 01             	and    ebp,0x1
c0017816:	74 03                	je     c001781b <Vm::faultHandler(regs*)+0x6b3>
c0017818:	ef                   	out    dx,eax
c0017819:	eb 02                	jmp    c001781d <Vm::faultHandler(regs*)+0x6b5>
c001781b:	66 ef                	out    dx,ax
c001781d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017820:	b0 01                	mov    al,0x1
c0017822:	eb 60                	jmp    c0017884 <Vm::faultHandler(regs*)+0x71c>
c0017824:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017828:	50                   	push   eax
c0017829:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001782d:	50                   	push   eax
c001782e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017832:	50                   	push   eax
c0017833:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017837:	50                   	push   eax
c0017838:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001783c:	50                   	push   eax
c001783d:	52                   	push   edx
c001783e:	52                   	push   edx
c001783f:	68 9d 2a 02 c0       	push   0xc0022a9d
c0017844:	e8 fc 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017849:	83 c4 20             	add    esp,0x20
c001784c:	83 ec 0c             	sub    esp,0xc
c001784f:	6a 60                	push   0x60
c0017851:	e8 0f f4 ff ff       	call   c0016c65 <Vm::inbv(unsigned short)>
c0017856:	83 c4 10             	add    esp,0x10
c0017859:	0f b6 d0             	movzx  edx,al
c001785c:	83 fa 1c             	cmp    edx,0x1c
c001785f:	74 05                	je     c0017866 <Vm::faultHandler(regs*)+0x6fe>
c0017861:	83 fa 5a             	cmp    edx,0x5a
c0017864:	75 e6                	jne    c001784c <Vm::faultHandler(regs*)+0x6e4>
c0017866:	0f b6 c0             	movzx  eax,al
c0017869:	83 f8 1c             	cmp    eax,0x1c
c001786c:	74 05                	je     c0017873 <Vm::faultHandler(regs*)+0x70b>
c001786e:	83 f8 5a             	cmp    eax,0x5a
c0017871:	75 0f                	jne    c0017882 <Vm::faultHandler(regs*)+0x71a>
c0017873:	83 ec 0c             	sub    esp,0xc
c0017876:	6a 60                	push   0x60
c0017878:	e8 e8 f3 ff ff       	call   c0016c65 <Vm::inbv(unsigned short)>
c001787d:	83 c4 10             	add    esp,0x10
c0017880:	eb e4                	jmp    c0017866 <Vm::faultHandler(regs*)+0x6fe>
c0017882:	31 c0                	xor    eax,eax
c0017884:	83 c4 2c             	add    esp,0x2c
c0017887:	5b                   	pop    ebx
c0017888:	5e                   	pop    esi
c0017889:	5f                   	pop    edi
c001788a:	5d                   	pop    ebp
c001788b:	c3                   	ret    

c001788c <noCopro(unsigned long)>:
c001788c:	c3                   	ret    

c001788d <nmiHandler(regs*, void*)>:
c001788d:	83 ec 0c             	sub    esp,0xc
c0017890:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017895:	83 ec 0c             	sub    esp,0xc
c0017898:	50                   	push   eax
c0017899:	e8 18 fa fe ff       	call   c00072b6 <Computer::handleNMI()>
c001789e:	83 c4 10             	add    esp,0x10
c00178a1:	90                   	nop
c00178a2:	83 c4 0c             	add    esp,0xc
c00178a5:	c3                   	ret    

c00178a6 <doubleFault(regs*, void*)>:
c00178a6:	55                   	push   ebp
c00178a7:	89 e5                	mov    ebp,esp
c00178a9:	83 ec 08             	sub    esp,0x8
c00178ac:	83 ec 0c             	sub    esp,0xc
c00178af:	68 fc 2a 02 c0       	push   0xc0022afc
c00178b4:	e8 26 9d ff ff       	call   c00115df <KePanic(char const*)>
c00178b9:	83 c4 10             	add    esp,0x10
c00178bc:	90                   	nop
c00178bd:	c9                   	leave  
c00178be:	c3                   	ret    

c00178bf <displayDebugInfo(regs*)>:
c00178bf:	83 ec 1c             	sub    esp,0x1c
c00178c2:	0f 20 c0             	mov    eax,cr0
c00178c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00178c9:	0f 20 d0             	mov    eax,cr2
c00178cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178d0:	0f 20 d8             	mov    eax,cr3
c00178d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178d7:	0f 20 e0             	mov    eax,cr4
c00178da:	89 04 24             	mov    DWORD PTR [esp],eax
c00178dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178e1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00178e4:	83 ec 08             	sub    esp,0x8
c00178e7:	50                   	push   eax
c00178e8:	68 18 2b 02 c0       	push   0xc0022b18
c00178ed:	e8 53 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178f2:	83 c4 10             	add    esp,0x10
c00178f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178f9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00178fc:	83 ec 08             	sub    esp,0x8
c00178ff:	50                   	push   eax
c0017900:	68 09 2b 02 c0       	push   0xc0022b09
c0017905:	e8 3b 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001790a:	83 c4 10             	add    esp,0x10
c001790d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017911:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017914:	83 ec 08             	sub    esp,0x8
c0017917:	50                   	push   eax
c0017918:	68 14 2b 02 c0       	push   0xc0022b14
c001791d:	e8 23 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017922:	83 c4 10             	add    esp,0x10
c0017925:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017929:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001792c:	83 ec 08             	sub    esp,0x8
c001792f:	50                   	push   eax
c0017930:	68 23 2b 02 c0       	push   0xc0022b23
c0017935:	e8 0b 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001793a:	83 c4 10             	add    esp,0x10
c001793d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017941:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017944:	83 ec 08             	sub    esp,0x8
c0017947:	50                   	push   eax
c0017948:	68 2e 2b 02 c0       	push   0xc0022b2e
c001794d:	e8 f3 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017952:	83 c4 10             	add    esp,0x10
c0017955:	83 ec 08             	sub    esp,0x8
c0017958:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001795c:	68 39 2b 02 c0       	push   0xc0022b39
c0017961:	e8 df 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017966:	83 c4 10             	add    esp,0x10
c0017969:	83 ec 08             	sub    esp,0x8
c001796c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017970:	68 44 2b 02 c0       	push   0xc0022b44
c0017975:	e8 cb 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001797a:	83 c4 10             	add    esp,0x10
c001797d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017981:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017984:	c1 e0 05             	shl    eax,0x5
c0017987:	8d 90 c0 3e 02 c0    	lea    edx,[eax-0x3ffdc140]
c001798d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017991:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017994:	83 ec 04             	sub    esp,0x4
c0017997:	52                   	push   edx
c0017998:	50                   	push   eax
c0017999:	68 4f 2b 02 c0       	push   0xc0022b4f
c001799e:	e8 a2 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179a3:	83 c4 10             	add    esp,0x10
c00179a6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179b1:	83 ec 0c             	sub    esp,0xc
c00179b4:	50                   	push   eax
c00179b5:	e8 9f 0d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00179ba:	83 c4 10             	add    esp,0x10
c00179bd:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179c2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179c8:	83 ec 08             	sub    esp,0x8
c00179cb:	68 5e 2b 02 c0       	push   0xc0022b5e
c00179d0:	50                   	push   eax
c00179d1:	e8 d0 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00179d6:	83 c4 10             	add    esp,0x10
c00179d9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179de:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179e4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179e8:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00179eb:	83 ec 08             	sub    esp,0x8
c00179ee:	52                   	push   edx
c00179ef:	50                   	push   eax
c00179f0:	e8 6b 10 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00179f5:	83 c4 10             	add    esp,0x10
c00179f8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179fd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a03:	83 ec 08             	sub    esp,0x8
c0017a06:	68 6c 2b 02 c0       	push   0xc0022b6c
c0017a0b:	50                   	push   eax
c0017a0c:	e8 95 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a11:	83 c4 10             	add    esp,0x10
c0017a14:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a19:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a1f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017a24:	8b 12                	mov    edx,DWORD PTR [edx]
c0017a26:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017a29:	83 c2 0c             	add    edx,0xc
c0017a2c:	83 ec 08             	sub    esp,0x8
c0017a2f:	52                   	push   edx
c0017a30:	50                   	push   eax
c0017a31:	e8 70 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a36:	83 c4 10             	add    esp,0x10
c0017a39:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a44:	83 ec 08             	sub    esp,0x8
c0017a47:	68 75 2b 02 c0       	push   0xc0022b75
c0017a4c:	50                   	push   eax
c0017a4d:	e8 54 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a52:	83 c4 10             	add    esp,0x10
c0017a55:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a64:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017a67:	83 ec 08             	sub    esp,0x8
c0017a6a:	52                   	push   edx
c0017a6b:	50                   	push   eax
c0017a6c:	e8 ef 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017a71:	83 c4 10             	add    esp,0x10
c0017a74:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a79:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a7f:	83 ec 08             	sub    esp,0x8
c0017a82:	68 7d 2b 02 c0       	push   0xc0022b7d
c0017a87:	50                   	push   eax
c0017a88:	e8 19 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a8d:	83 c4 10             	add    esp,0x10
c0017a90:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a95:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a9b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a9f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017aa2:	83 ec 08             	sub    esp,0x8
c0017aa5:	52                   	push   edx
c0017aa6:	50                   	push   eax
c0017aa7:	e8 b4 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017aac:	83 c4 10             	add    esp,0x10
c0017aaf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ab4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aba:	83 ec 08             	sub    esp,0x8
c0017abd:	68 85 2b 02 c0       	push   0xc0022b85
c0017ac2:	50                   	push   eax
c0017ac3:	e8 de 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ac8:	83 c4 10             	add    esp,0x10
c0017acb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ad0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ad6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ada:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017add:	83 ec 08             	sub    esp,0x8
c0017ae0:	52                   	push   edx
c0017ae1:	50                   	push   eax
c0017ae2:	e8 79 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017ae7:	83 c4 10             	add    esp,0x10
c0017aea:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017af5:	83 ec 08             	sub    esp,0x8
c0017af8:	68 8d 2b 02 c0       	push   0xc0022b8d
c0017afd:	50                   	push   eax
c0017afe:	e8 a3 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b03:	83 c4 10             	add    esp,0x10
c0017b06:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b0b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b15:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b18:	83 ec 08             	sub    esp,0x8
c0017b1b:	52                   	push   edx
c0017b1c:	50                   	push   eax
c0017b1d:	e8 3e 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b22:	83 c4 10             	add    esp,0x10
c0017b25:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b2a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b30:	83 ec 08             	sub    esp,0x8
c0017b33:	68 95 2b 02 c0       	push   0xc0022b95
c0017b38:	50                   	push   eax
c0017b39:	e8 68 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b3e:	83 c4 10             	add    esp,0x10
c0017b41:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b50:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017b53:	83 ec 08             	sub    esp,0x8
c0017b56:	52                   	push   edx
c0017b57:	50                   	push   eax
c0017b58:	e8 03 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b65:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b6b:	83 ec 08             	sub    esp,0x8
c0017b6e:	68 9d 2b 02 c0       	push   0xc0022b9d
c0017b73:	50                   	push   eax
c0017b74:	e8 2d 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b79:	83 c4 10             	add    esp,0x10
c0017b7c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b81:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b8b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017b8e:	83 ec 08             	sub    esp,0x8
c0017b91:	52                   	push   edx
c0017b92:	50                   	push   eax
c0017b93:	e8 c8 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b98:	83 c4 10             	add    esp,0x10
c0017b9b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ba0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ba6:	83 ec 08             	sub    esp,0x8
c0017ba9:	68 a5 2b 02 c0       	push   0xc0022ba5
c0017bae:	50                   	push   eax
c0017baf:	e8 f2 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bb4:	83 c4 10             	add    esp,0x10
c0017bb7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bbc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bc2:	83 ec 08             	sub    esp,0x8
c0017bc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bc9:	50                   	push   eax
c0017bca:	e8 91 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017bcf:	83 c4 10             	add    esp,0x10
c0017bd2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bd7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bdd:	83 ec 08             	sub    esp,0x8
c0017be0:	68 ae 2b 02 c0       	push   0xc0022bae
c0017be5:	50                   	push   eax
c0017be6:	e8 bb 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017beb:	83 c4 10             	add    esp,0x10
c0017bee:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bf3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bf9:	83 ec 08             	sub    esp,0x8
c0017bfc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c00:	50                   	push   eax
c0017c01:	e8 5a 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c06:	83 c4 10             	add    esp,0x10
c0017c09:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c0e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c14:	83 ec 08             	sub    esp,0x8
c0017c17:	68 b6 2b 02 c0       	push   0xc0022bb6
c0017c1c:	50                   	push   eax
c0017c1d:	e8 84 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c22:	83 c4 10             	add    esp,0x10
c0017c25:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c2a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c30:	83 ec 08             	sub    esp,0x8
c0017c33:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017c37:	50                   	push   eax
c0017c38:	e8 23 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c3d:	83 c4 10             	add    esp,0x10
c0017c40:	fa                   	cli    
c0017c41:	f4                   	hlt    
c0017c42:	eb fe                	jmp    c0017c42 <displayDebugInfo(regs*)+0x383>

c0017c44 <HalSystemIdle()>:
c0017c44:	56                   	push   esi
c0017c45:	53                   	push   ebx
c0017c46:	83 ec 14             	sub    esp,0x14
c0017c49:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c54:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017c5a:	83 e0 04             	and    eax,0x4
c0017c5d:	0f b6 c0             	movzx  eax,al
c0017c60:	85 c0                	test   eax,eax
c0017c62:	0f 95 c0             	setne  al
c0017c65:	0f b6 c0             	movzx  eax,al
c0017c68:	85 c0                	test   eax,eax
c0017c6a:	74 4c                	je     c0017cb8 <HalSystemIdle()+0x74>
c0017c6c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c71:	83 ec 08             	sub    esp,0x8
c0017c74:	68 e1 00 00 00       	push   0xe1
c0017c79:	50                   	push   eax
c0017c7a:	e8 41 f4 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017c7f:	83 c4 10             	add    esp,0x10
c0017c82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c8a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c93:	83 e2 02             	and    edx,0x2
c0017c96:	89 d3                	mov    ebx,edx
c0017c98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c9c:	83 e2 00             	and    edx,0x0
c0017c9f:	89 d6                	mov    esi,edx
c0017ca1:	56                   	push   esi
c0017ca2:	53                   	push   ebx
c0017ca3:	68 e1 00 00 00       	push   0xe1
c0017ca8:	50                   	push   eax
c0017ca9:	e8 3e f4 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017cae:	83 c4 10             	add    esp,0x10
c0017cb1:	e8 de 84 fe ff       	call   c0000194 <doTPAUSE>
c0017cb6:	eb 01                	jmp    c0017cb9 <HalSystemIdle()+0x75>
c0017cb8:	f4                   	hlt    
c0017cb9:	90                   	nop
c0017cba:	83 c4 14             	add    esp,0x14
c0017cbd:	5b                   	pop    ebx
c0017cbe:	5e                   	pop    esi
c0017cbf:	c3                   	ret    

c0017cc0 <displayProgramFault(char const*)>:
c0017cc0:	83 ec 0c             	sub    esp,0xc
c0017cc3:	83 ec 0c             	sub    esp,0xc
c0017cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cca:	e8 76 2c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017ccf:	83 c4 10             	add    esp,0x10
c0017cd2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017cd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cd9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017cdc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ce2:	85 c0                	test   eax,eax
c0017ce4:	74 21                	je     c0017d07 <displayProgramFault(char const*)+0x47>
c0017ce6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017ceb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ced:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017cf0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cf6:	6a 04                	push   0x4
c0017cf8:	6a 0f                	push   0xf
c0017cfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017cfe:	50                   	push   eax
c0017cff:	e8 14 0e ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017d04:	83 c4 10             	add    esp,0x10
c0017d07:	90                   	nop
c0017d08:	83 c4 0c             	add    esp,0xc
c0017d0b:	c3                   	ret    

c0017d0c <gpFault(regs*, void*)>:
c0017d0c:	83 ec 1c             	sub    esp,0x1c
c0017d0f:	c7 05 74 c7 02 c0 68 71 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017168
c0017d19:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d1e:	85 c0                	test   eax,eax
c0017d20:	74 1e                	je     c0017d40 <gpFault(regs*, void*)+0x34>
c0017d22:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d27:	83 ec 0c             	sub    esp,0xc
c0017d2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d2e:	ff d0                	call   eax
c0017d30:	83 c4 10             	add    esp,0x10
c0017d33:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017d37:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017d3c:	85 c0                	test   eax,eax
c0017d3e:	75 2e                	jne    c0017d6e <gpFault(regs*, void*)+0x62>
c0017d40:	83 ec 0c             	sub    esp,0xc
c0017d43:	68 be 2b 02 c0       	push   0xc0022bbe
c0017d48:	e8 73 ff ff ff       	call   c0017cc0 <displayProgramFault(char const*)>
c0017d4d:	83 c4 10             	add    esp,0x10
c0017d50:	83 ec 0c             	sub    esp,0xc
c0017d53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d57:	e8 63 fb ff ff       	call   c00178bf <displayDebugInfo(regs*)>
c0017d5c:	83 c4 10             	add    esp,0x10
c0017d5f:	83 ec 0c             	sub    esp,0xc
c0017d62:	6a 00                	push   0x0
c0017d64:	e8 a3 ed ff ff       	call   c0016b0c <Thr::terminateFromIRQ(int)>
c0017d69:	83 c4 10             	add    esp,0x10
c0017d6c:	eb 01                	jmp    c0017d6f <gpFault(regs*, void*)+0x63>
c0017d6e:	90                   	nop
c0017d6f:	83 c4 1c             	add    esp,0x1c
c0017d72:	c3                   	ret    

c0017d73 <pgFault(regs*, void*)>:
c0017d73:	83 ec 1c             	sub    esp,0x1c
c0017d76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d7a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017d7d:	0f 20 d0             	mov    eax,cr2
c0017d80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d88:	83 ec 04             	sub    esp,0x4
c0017d8b:	52                   	push   edx
c0017d8c:	50                   	push   eax
c0017d8d:	68 9c 2c 02 c0       	push   0xc0022c9c
c0017d92:	e8 ae 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017d97:	83 c4 10             	add    esp,0x10
c0017d9a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017da1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017da4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017daa:	0f 20 d2             	mov    edx,cr2
c0017dad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017db1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017db5:	83 ec 08             	sub    esp,0x8
c0017db8:	52                   	push   edx
c0017db9:	50                   	push   eax
c0017dba:	e8 d1 25 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017dbf:	83 c4 10             	add    esp,0x10
c0017dc2:	0f b6 c0             	movzx  eax,al
c0017dc5:	85 c0                	test   eax,eax
c0017dc7:	75 2e                	jne    c0017df7 <pgFault(regs*, void*)+0x84>
c0017dc9:	83 ec 0c             	sub    esp,0xc
c0017dcc:	68 d7 2b 02 c0       	push   0xc0022bd7
c0017dd1:	e8 ea fe ff ff       	call   c0017cc0 <displayProgramFault(char const*)>
c0017dd6:	83 c4 10             	add    esp,0x10
c0017dd9:	83 ec 0c             	sub    esp,0xc
c0017ddc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017de0:	e8 da fa ff ff       	call   c00178bf <displayDebugInfo(regs*)>
c0017de5:	83 c4 10             	add    esp,0x10
c0017de8:	83 ec 0c             	sub    esp,0xc
c0017deb:	6a 00                	push   0x0
c0017ded:	e8 1a ed ff ff       	call   c0016b0c <Thr::terminateFromIRQ(int)>
c0017df2:	83 c4 10             	add    esp,0x10
c0017df5:	eb 01                	jmp    c0017df8 <pgFault(regs*, void*)+0x85>
c0017df7:	90                   	nop
c0017df8:	83 c4 1c             	add    esp,0x1c
c0017dfb:	c3                   	ret    

c0017dfc <otherISRHandler(regs*, void*)>:
c0017dfc:	83 ec 0c             	sub    esp,0xc
c0017dff:	83 ec 0c             	sub    esp,0xc
c0017e02:	68 c4 2c 02 c0       	push   0xc0022cc4
c0017e07:	e8 b4 fe ff ff       	call   c0017cc0 <displayProgramFault(char const*)>
c0017e0c:	83 c4 10             	add    esp,0x10
c0017e0f:	83 ec 0c             	sub    esp,0xc
c0017e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e16:	e8 a4 fa ff ff       	call   c00178bf <displayDebugInfo(regs*)>
c0017e1b:	83 c4 10             	add    esp,0x10
c0017e1e:	83 ec 0c             	sub    esp,0xc
c0017e21:	6a 00                	push   0x0
c0017e23:	e8 e4 ec ff ff       	call   c0016b0c <Thr::terminateFromIRQ(int)>
c0017e28:	83 c4 10             	add    esp,0x10
c0017e2b:	90                   	nop
c0017e2c:	83 c4 0c             	add    esp,0xc
c0017e2f:	c3                   	ret    

c0017e30 <opcodeFault(regs*, void*)>:
c0017e30:	55                   	push   ebp
c0017e31:	89 e5                	mov    ebp,esp
c0017e33:	83 ec 08             	sub    esp,0x8
c0017e36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e39:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e3c:	83 ec 08             	sub    esp,0x8
c0017e3f:	50                   	push   eax
c0017e40:	68 e2 2b 02 c0       	push   0xc0022be2
c0017e45:	e8 fb 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017e4a:	83 c4 10             	add    esp,0x10
c0017e4d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017e52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017e58:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017e5e:	0f b6 c0             	movzx  eax,al
c0017e61:	85 c0                	test   eax,eax
c0017e63:	74 21                	je     c0017e86 <opcodeFault(regs*, void*)+0x56>
c0017e65:	83 ec 0c             	sub    esp,0xc
c0017e68:	68 ec 2c 02 c0       	push   0xc0022cec
c0017e6d:	e8 d3 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017e72:	83 c4 10             	add    esp,0x10
c0017e75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e7b:	8d 50 19             	lea    edx,[eax+0x19]
c0017e7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017e84:	eb 2b                	jmp    c0017eb1 <opcodeFault(regs*, void*)+0x81>
c0017e86:	83 ec 0c             	sub    esp,0xc
c0017e89:	68 f0 2b 02 c0       	push   0xc0022bf0
c0017e8e:	e8 2d fe ff ff       	call   c0017cc0 <displayProgramFault(char const*)>
c0017e93:	83 c4 10             	add    esp,0x10
c0017e96:	83 ec 0c             	sub    esp,0xc
c0017e99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017e9c:	e8 1e fa ff ff       	call   c00178bf <displayDebugInfo(regs*)>
c0017ea1:	83 c4 10             	add    esp,0x10
c0017ea4:	83 ec 0c             	sub    esp,0xc
c0017ea7:	6a 00                	push   0x0
c0017ea9:	e8 5e ec ff ff       	call   c0016b0c <Thr::terminateFromIRQ(int)>
c0017eae:	83 c4 10             	add    esp,0x10
c0017eb1:	c9                   	leave  
c0017eb2:	c3                   	ret    

c0017eb3 <i386SaveCoprocessor(void*)>:
c0017eb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017eb7:	83 c0 3f             	add    eax,0x3f
c0017eba:	83 e0 c0             	and    eax,0xffffffc0
c0017ebd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ec1:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017ec7 <i386LoadCoprocessor(void*)>:
c0017ec7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ecb:	83 c0 3f             	add    eax,0x3f
c0017ece:	83 e0 c0             	and    eax,0xffffffc0
c0017ed1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ed5:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017edb <x87EmulHandler(regs*, void*)>:
c0017edb:	53                   	push   ebx
c0017edc:	83 ec 08             	sub    esp,0x8
c0017edf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ee4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017ee8:	74 10                	je     c0017efa <x87EmulHandler(regs*, void*)+0x1f>
c0017eea:	83 ec 0c             	sub    esp,0xc
c0017eed:	68 fd 2b 02 c0       	push   0xc0022bfd
c0017ef2:	e8 e8 96 ff ff       	call   c00115df <KePanic(char const*)>
c0017ef7:	83 c4 10             	add    esp,0x10
c0017efa:	0f 20 c0             	mov    eax,cr0
c0017efd:	a8 08                	test   al,0x8
c0017eff:	74 59                	je     c0017f5a <x87EmulHandler(regs*, void*)+0x7f>
c0017f01:	0f 06                	clts   
c0017f03:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f08:	85 c0                	test   eax,eax
c0017f0a:	74 0e                	je     c0017f1a <x87EmulHandler(regs*, void*)+0x3f>
c0017f0c:	83 ec 0c             	sub    esp,0xc
c0017f0f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f12:	e8 9c ff ff ff       	call   c0017eb3 <i386SaveCoprocessor(void*)>
c0017f17:	83 c4 10             	add    esp,0x10
c0017f1a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017f20:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017f24:	75 12                	jne    c0017f38 <x87EmulHandler(regs*, void*)+0x5d>
c0017f26:	83 ec 0c             	sub    esp,0xc
c0017f29:	68 40 02 00 00       	push   0x240
c0017f2e:	e8 83 fb fe ff       	call   c0007ab6 <malloc>
c0017f33:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017f36:	eb 10                	jmp    c0017f48 <x87EmulHandler(regs*, void*)+0x6d>
c0017f38:	83 ec 0c             	sub    esp,0xc
c0017f3b:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f40:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f43:	e8 7f ff ff ff       	call   c0017ec7 <i386LoadCoprocessor(void*)>
c0017f48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f4d:	83 c4 10             	add    esp,0x10
c0017f50:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017f55:	83 c4 08             	add    esp,0x8
c0017f58:	5b                   	pop    ebx
c0017f59:	c3                   	ret    
c0017f5a:	83 ec 0c             	sub    esp,0xc
c0017f5d:	68 11 2c 02 c0       	push   0xc0022c11
c0017f62:	e8 de 29 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017f67:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017f6f:	83 c4 18             	add    esp,0x18
c0017f72:	5b                   	pop    ebx
c0017f73:	e9 94 eb ff ff       	jmp    c0016b0c <Thr::terminateFromIRQ(int)>

c0017f78 <HalInitialiseCoprocessor()>:
c0017f78:	83 ec 10             	sub    esp,0x10
c0017f7b:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017f85:	6a 00                	push   0x0
c0017f87:	68 db 7e 01 c0       	push   0xc0017edb
c0017f8c:	6a 07                	push   0x7
c0017f8e:	e8 27 4f ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f93:	e8 48 70 00 00       	call   c001efe0 <avxDetect>
c0017f98:	83 c4 10             	add    esp,0x10
c0017f9b:	85 c0                	test   eax,eax
c0017f9d:	74 1c                	je     c0017fbb <HalInitialiseCoprocessor()+0x43>
c0017f9f:	c7 05 70 c7 02 c0 0a f0 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f00a
c0017fa9:	c7 05 6c c7 02 c0 1b f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f01b
c0017fb3:	83 c4 0c             	add    esp,0xc
c0017fb6:	e9 71 70 00 00       	jmp    c001f02c <avxInit>
c0017fbb:	e8 b0 73 00 00       	call   c001f370 <absolutelyNoChanceInHell>
c0017fc0:	85 c0                	test   eax,eax
c0017fc2:	74 1c                	je     c0017fe0 <HalInitialiseCoprocessor()+0x68>
c0017fc4:	c7 05 70 c7 02 c0 88 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f388
c0017fce:	c7 05 6c c7 02 c0 90 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f390
c0017fd8:	83 c4 0c             	add    esp,0xc
c0017fdb:	e9 b8 73 00 00       	jmp    c001f398 <sseInit>
c0017fe0:	e8 d1 73 00 00       	call   c001f3b6 <x87Detect>
c0017fe5:	85 c0                	test   eax,eax
c0017fe7:	74 1c                	je     c0018005 <HalInitialiseCoprocessor()+0x8d>
c0017fe9:	c7 05 70 c7 02 c0 d1 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f3d1
c0017ff3:	c7 05 6c c7 02 c0 d8 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f3d8
c0017ffd:	83 c4 0c             	add    esp,0xc
c0018000:	e9 da 73 00 00       	jmp    c001f3df <x87Init>
c0018005:	c7 05 70 c7 02 c0 8c 78 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001788c
c001800f:	c7 05 6c c7 02 c0 8c 78 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001788c
c0018019:	0f 20 c0             	mov    eax,cr0
c001801c:	83 c8 04             	or     eax,0x4
c001801f:	0f 22 c0             	mov    cr0,eax
c0018022:	83 c4 0c             	add    esp,0xc
c0018025:	c3                   	ret    

c0018026 <HalPanic(char const*)>:
c0018026:	53                   	push   ebx
c0018027:	83 ec 10             	sub    esp,0x10
c001802a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001802e:	fa                   	cli    
c001802f:	53                   	push   ebx
c0018030:	68 27 2c 02 c0       	push   0xc0022c27
c0018035:	e8 0b 29 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001803a:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001803f:	83 c4 10             	add    esp,0x10
c0018042:	85 c0                	test   eax,eax
c0018044:	74 09                	je     c001804f <HalPanic(char const*)+0x29>
c0018046:	83 ec 0c             	sub    esp,0xc
c0018049:	53                   	push   ebx
c001804a:	ff d0                	call   eax
c001804c:	83 c4 10             	add    esp,0x10
c001804f:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0018054:	85 c0                	test   eax,eax
c0018056:	0f 84 dc 00 00 00    	je     c0018138 <HalPanic(char const*)+0x112>
c001805c:	52                   	push   edx
c001805d:	6a 01                	push   0x1
c001805f:	6a 0f                	push   0xf
c0018061:	50                   	push   eax
c0018062:	e8 4d 05 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018067:	59                   	pop    ecx
c0018068:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001806e:	e8 31 07 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0018073:	58                   	pop    eax
c0018074:	5a                   	pop    edx
c0018075:	68 24 0e 02 c0       	push   0xc0020e24
c001807a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018080:	e8 67 05 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0018085:	83 c4 0c             	add    esp,0xc
c0018088:	6a 01                	push   0x1
c001808a:	6a 0f                	push   0xf
c001808c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018092:	e8 1d 05 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018097:	59                   	pop    ecx
c0018098:	58                   	pop    eax
c0018099:	68 40 2c 02 c0       	push   0xc0022c40
c001809e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180a4:	e8 fd 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00180a9:	83 c4 0c             	add    esp,0xc
c00180ac:	6a 0f                	push   0xf
c00180ae:	6a 01                	push   0x1
c00180b0:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180b6:	e8 f9 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180bb:	58                   	pop    eax
c00180bc:	5a                   	pop    edx
c00180bd:	68 49 2c 02 c0       	push   0xc0022c49
c00180c2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180c8:	e8 d9 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00180cd:	83 c4 0c             	add    esp,0xc
c00180d0:	6a 01                	push   0x1
c00180d2:	6a 0f                	push   0xf
c00180d4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180da:	e8 d5 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180df:	59                   	pop    ecx
c00180e0:	58                   	pop    eax
c00180e1:	68 8d 2c 02 c0       	push   0xc0022c8d
c00180e6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180ec:	e8 b5 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00180f1:	58                   	pop    eax
c00180f2:	5a                   	pop    edx
c00180f3:	68 56 2c 02 c0       	push   0xc0022c56
c00180f8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180fe:	e8 a3 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018103:	59                   	pop    ecx
c0018104:	58                   	pop    eax
c0018105:	68 90 2c 02 c0       	push   0xc0022c90
c001810a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018110:	e8 91 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018115:	58                   	pop    eax
c0018116:	5a                   	pop    edx
c0018117:	53                   	push   ebx
c0018118:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001811e:	e8 83 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018123:	59                   	pop    ecx
c0018124:	5b                   	pop    ebx
c0018125:	68 8d 2c 02 c0       	push   0xc0022c8d
c001812a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018130:	e8 71 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018135:	83 c4 10             	add    esp,0x10
c0018138:	eb fe                	jmp    c0018138 <HalPanic(char const*)+0x112>

c001813a <HalQueryPerformanceCounter()>:
c001813a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001813f:	31 d2                	xor    edx,edx
c0018141:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018147:	31 c0                	xor    eax,eax
c0018149:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0018150:	74 02                	je     c0018154 <HalQueryPerformanceCounter()+0x1a>
c0018152:	0f 31                	rdtsc  
c0018154:	c3                   	ret    

c0018155 <HalInitialise()>:
c0018155:	53                   	push   ebx
c0018156:	83 ec 08             	sub    esp,0x8
c0018159:	e8 8c 4f ff ff       	call   c000d0ea <setupINTS()>
c001815e:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c0018165:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001816a:	75 0f                	jne    c001817b <HalInitialise()+0x26>
c001816c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018172:	83 e2 fe             	and    edx,0xfffffffe
c0018175:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001817b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018181:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018188:	83 e2 fe             	and    edx,0xfffffffe
c001818b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018191:	e8 9e 02 00 00       	call   c0018434 <picOpen()>
c0018196:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001819d:	74 0a                	je     c00181a9 <HalInitialise()+0x54>
c001819f:	e8 e0 01 00 00       	call   c0018384 <picDisable()>
c00181a4:	e8 ad 67 00 00       	call   c001e956 <apicOpen()>
c00181a9:	bb 0f 00 00 00       	mov    ebx,0xf
c00181ae:	50                   	push   eax
c00181af:	6a 00                	push   0x0
c00181b1:	68 fc 7d 01 c0       	push   0xc0017dfc
c00181b6:	6a 00                	push   0x0
c00181b8:	e8 fd 4c ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181bd:	83 c4 0c             	add    esp,0xc
c00181c0:	6a 00                	push   0x0
c00181c2:	68 fc 7d 01 c0       	push   0xc0017dfc
c00181c7:	6a 01                	push   0x1
c00181c9:	e8 ec 4c ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181ce:	83 c4 0c             	add    esp,0xc
c00181d1:	6a 00                	push   0x0
c00181d3:	68 8d 78 01 c0       	push   0xc001788d
c00181d8:	6a 02                	push   0x2
c00181da:	e8 db 4c ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181df:	83 c4 0c             	add    esp,0xc
c00181e2:	6a 00                	push   0x0
c00181e4:	68 fc 7d 01 c0       	push   0xc0017dfc
c00181e9:	6a 03                	push   0x3
c00181eb:	e8 ca 4c ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181f0:	83 c4 0c             	add    esp,0xc
c00181f3:	6a 00                	push   0x0
c00181f5:	68 fc 7d 01 c0       	push   0xc0017dfc
c00181fa:	6a 04                	push   0x4
c00181fc:	e8 b9 4c ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018201:	83 c4 0c             	add    esp,0xc
c0018204:	6a 00                	push   0x0
c0018206:	68 fc 7d 01 c0       	push   0xc0017dfc
c001820b:	6a 05                	push   0x5
c001820d:	e8 a8 4c ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018212:	83 c4 0c             	add    esp,0xc
c0018215:	6a 00                	push   0x0
c0018217:	68 30 7e 01 c0       	push   0xc0017e30
c001821c:	6a 06                	push   0x6
c001821e:	e8 97 4c ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018223:	83 c4 0c             	add    esp,0xc
c0018226:	6a 00                	push   0x0
c0018228:	68 a6 78 01 c0       	push   0xc00178a6
c001822d:	6a 08                	push   0x8
c001822f:	e8 86 4c ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018234:	83 c4 0c             	add    esp,0xc
c0018237:	6a 00                	push   0x0
c0018239:	68 fc 7d 01 c0       	push   0xc0017dfc
c001823e:	6a 09                	push   0x9
c0018240:	e8 75 4c ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018245:	83 c4 0c             	add    esp,0xc
c0018248:	6a 00                	push   0x0
c001824a:	68 fc 7d 01 c0       	push   0xc0017dfc
c001824f:	6a 0a                	push   0xa
c0018251:	e8 64 4c ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018256:	83 c4 0c             	add    esp,0xc
c0018259:	6a 00                	push   0x0
c001825b:	68 fc 7d 01 c0       	push   0xc0017dfc
c0018260:	6a 0b                	push   0xb
c0018262:	e8 53 4c ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018267:	83 c4 0c             	add    esp,0xc
c001826a:	6a 00                	push   0x0
c001826c:	68 0c 7d 01 c0       	push   0xc0017d0c
c0018271:	6a 0d                	push   0xd
c0018273:	e8 42 4c ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018278:	83 c4 0c             	add    esp,0xc
c001827b:	6a 00                	push   0x0
c001827d:	68 73 7d 01 c0       	push   0xc0017d73
c0018282:	6a 0e                	push   0xe
c0018284:	e8 31 4c ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018289:	83 c4 10             	add    esp,0x10
c001828c:	50                   	push   eax
c001828d:	6a 00                	push   0x0
c001828f:	68 fc 7d 01 c0       	push   0xc0017dfc
c0018294:	53                   	push   ebx
c0018295:	43                   	inc    ebx
c0018296:	e8 1f 4c ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c001829b:	83 c4 10             	add    esp,0x10
c001829e:	83 fb 1e             	cmp    ebx,0x1e
c00182a1:	75 e9                	jne    c001828c <HalInitialise()+0x137>
c00182a3:	50                   	push   eax
c00182a4:	6a 00                	push   0x0
c00182a6:	68 78 2a 01 c0       	push   0xc0012a78
c00182ab:	6a 60                	push   0x60
c00182ad:	e8 08 4c ff ff       	call   c000ceba <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182b2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00182b7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00182c1:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00182c8:	e8 e9 f7 fe ff       	call   c0007ab6 <malloc>
c00182cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00182d0:	89 c3                	mov    ebx,eax
c00182d2:	e8 3b 09 00 00       	call   c0018c12 <RTC::RTC()>
c00182d7:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00182e1:	5a                   	pop    edx
c00182e2:	59                   	pop    ecx
c00182e3:	53                   	push   ebx
c00182e4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00182ea:	e8 97 46 ff ff       	call   c000c986 <Device::addChild(Device*)>
c00182ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00182f1:	6a 00                	push   0x0
c00182f3:	6a 00                	push   0x0
c00182f5:	6a 00                	push   0x0
c00182f7:	53                   	push   ebx
c00182f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00182fb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018300:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018306:	83 c4 28             	add    esp,0x28
c0018309:	5b                   	pop    ebx
c001830a:	c3                   	ret    

c001830b <HalMakeBeep(int)>:
c001830b:	53                   	push   ebx
c001830c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018310:	85 db                	test   ebx,ebx
c0018312:	75 07                	jne    c001831b <HalMakeBeep(int)+0x10>
c0018314:	e4 61                	in     al,0x61
c0018316:	83 e0 fc             	and    eax,0xfffffffc
c0018319:	eb 26                	jmp    c0018341 <HalMakeBeep(int)+0x36>
c001831b:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018320:	99                   	cdq    
c0018321:	f7 fb                	idiv   ebx
c0018323:	89 c1                	mov    ecx,eax
c0018325:	b0 b6                	mov    al,0xb6
c0018327:	e6 43                	out    0x43,al
c0018329:	88 c8                	mov    al,cl
c001832b:	e6 42                	out    0x42,al
c001832d:	89 c8                	mov    eax,ecx
c001832f:	c1 e8 08             	shr    eax,0x8
c0018332:	e6 42                	out    0x42,al
c0018334:	e4 61                	in     al,0x61
c0018336:	89 c2                	mov    edx,eax
c0018338:	83 ca 03             	or     edx,0x3
c001833b:	38 d0                	cmp    al,dl
c001833d:	74 04                	je     c0018343 <HalMakeBeep(int)+0x38>
c001833f:	88 d0                	mov    al,dl
c0018341:	e6 61                	out    0x61,al
c0018343:	5b                   	pop    ebx
c0018344:	c3                   	ret    

c0018345 <HalGetRand()>:
c0018345:	31 c0                	xor    eax,eax
c0018347:	c3                   	ret    

c0018348 <HalEndOfInterrupt(int)>:
c0018348:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001834f:	74 23                	je     c0018374 <HalEndOfInterrupt(int)+0x2c>
c0018351:	83 ec 14             	sub    esp,0x14
c0018354:	6a 1b                	push   0x1b
c0018356:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001835c:	e8 5f ed fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0018361:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018366:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018370:	83 c4 1c             	add    esp,0x1c
c0018373:	c3                   	ret    
c0018374:	e9 3f 02 00 00       	jmp    c00185b8 <picEOI(int)>

c0018379 <HalRestart()>:
c0018379:	c3                   	ret    

c001837a <HalShutdown()>:
c001837a:	c3                   	ret    

c001837b <HalSleep()>:
c001837b:	c3                   	ret    

c001837c <picIoWait()>:
c001837c:	eb 00                	jmp    c001837e <picIoWait()+0x2>
c001837e:	eb 00                	jmp    c0018380 <picIoWait()+0x4>
c0018380:	90                   	nop
c0018381:	c3                   	ret    
c0018382:	66 90                	xchg   ax,ax

c0018384 <picDisable()>:
c0018384:	83 ec 10             	sub    esp,0x10
c0018387:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001838e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018393:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018397:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001839c:	ee                   	out    dx,al
c001839d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00183a4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00183a9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00183ad:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00183b2:	ee                   	out    dx,al
c00183b3:	90                   	nop
c00183b4:	83 c4 10             	add    esp,0x10
c00183b7:	c3                   	ret    

c00183b8 <picGetIRQReg(int)>:
c00183b8:	83 ec 10             	sub    esp,0x10
c00183bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183bf:	0f b6 c0             	movzx  eax,al
c00183c2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00183c9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00183cd:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00183d1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00183d6:	ee                   	out    dx,al
c00183d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183db:	0f b6 c0             	movzx  eax,al
c00183de:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00183e5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00183e9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00183ed:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00183f2:	ee                   	out    dx,al
c00183f3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00183fa:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00183ff:	89 c2                	mov    edx,eax
c0018401:	ec                   	in     al,dx
c0018402:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018406:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001840a:	0f b6 c0             	movzx  eax,al
c001840d:	c1 e0 08             	shl    eax,0x8
c0018410:	89 c1                	mov    ecx,eax
c0018412:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018419:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001841e:	89 c2                	mov    edx,eax
c0018420:	ec                   	in     al,dx
c0018421:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018425:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018429:	0f b6 c0             	movzx  eax,al
c001842c:	09 c8                	or     eax,ecx
c001842e:	83 c4 10             	add    esp,0x10
c0018431:	c3                   	ret    
c0018432:	66 90                	xchg   ax,ax

c0018434 <picOpen()>:
c0018434:	83 ec 50             	sub    esp,0x50
c0018437:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001843e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018443:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018447:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001844b:	ee                   	out    dx,al
c001844c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018453:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018458:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001845c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018460:	ee                   	out    dx,al
c0018461:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018469:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018471:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018478:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001847c:	89 c2                	mov    edx,eax
c001847e:	ec                   	in     al,dx
c001847f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018483:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018487:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001848b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018492:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018496:	89 c2                	mov    edx,eax
c0018498:	ec                   	in     al,dx
c0018499:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001849d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00184a1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00184a5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00184ac:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00184b1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00184b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184b9:	ee                   	out    dx,al
c00184ba:	e8 bd fe ff ff       	call   c001837c <picIoWait()>
c00184bf:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00184c6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00184cb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00184cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184d3:	ee                   	out    dx,al
c00184d4:	e8 a3 fe ff ff       	call   c001837c <picIoWait()>
c00184d9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00184dd:	0f b6 c0             	movzx  eax,al
c00184e0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00184e7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00184eb:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00184ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00184f3:	ee                   	out    dx,al
c00184f4:	e8 83 fe ff ff       	call   c001837c <picIoWait()>
c00184f9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00184fd:	0f b6 c0             	movzx  eax,al
c0018500:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018507:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001850b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001850f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018513:	ee                   	out    dx,al
c0018514:	e8 63 fe ff ff       	call   c001837c <picIoWait()>
c0018519:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018520:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018525:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018529:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001852d:	ee                   	out    dx,al
c001852e:	e8 49 fe ff ff       	call   c001837c <picIoWait()>
c0018533:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001853a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001853f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018543:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018547:	ee                   	out    dx,al
c0018548:	e8 2f fe ff ff       	call   c001837c <picIoWait()>
c001854d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018554:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018559:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001855d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018561:	ee                   	out    dx,al
c0018562:	e8 15 fe ff ff       	call   c001837c <picIoWait()>
c0018567:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001856e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018573:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018577:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001857b:	ee                   	out    dx,al
c001857c:	e8 fb fd ff ff       	call   c001837c <picIoWait()>
c0018581:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018586:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001858d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018591:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018595:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018599:	ee                   	out    dx,al
c001859a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001859f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00185a6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00185aa:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00185ae:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00185b2:	ee                   	out    dx,al
c00185b3:	90                   	nop
c00185b4:	83 c4 50             	add    esp,0x50
c00185b7:	c3                   	ret    

c00185b8 <picEOI(int)>:
c00185b8:	83 ec 10             	sub    esp,0x10
c00185bb:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00185c0:	75 1e                	jne    c00185e0 <picEOI(int)+0x28>
c00185c2:	6a 0b                	push   0xb
c00185c4:	e8 ef fd ff ff       	call   c00183b8 <picGetIRQReg(int)>
c00185c9:	83 c4 04             	add    esp,0x4
c00185cc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00185d1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00185d6:	25 80 00 00 00       	and    eax,0x80
c00185db:	74 73                	je     c0018650 <picEOI(int)+0x98>
c00185dd:	8d 76 00             	lea    esi,[esi+0x0]
c00185e0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00185e5:	75 31                	jne    c0018618 <picEOI(int)+0x60>
c00185e7:	6a 0b                	push   0xb
c00185e9:	e8 ca fd ff ff       	call   c00183b8 <picGetIRQReg(int)>
c00185ee:	83 c4 04             	add    esp,0x4
c00185f1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00185f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185fa:	98                   	cwde   
c00185fb:	85 c0                	test   eax,eax
c00185fd:	78 19                	js     c0018618 <picEOI(int)+0x60>
c00185ff:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018606:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001860b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001860f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018614:	ee                   	out    dx,al
c0018615:	eb 3d                	jmp    c0018654 <picEOI(int)+0x9c>
c0018617:	90                   	nop
c0018618:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001861d:	7e 19                	jle    c0018638 <picEOI(int)+0x80>
c001861f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018626:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001862b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001862f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018634:	ee                   	out    dx,al
c0018635:	8d 76 00             	lea    esi,[esi+0x0]
c0018638:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001863f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018644:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018648:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001864d:	ee                   	out    dx,al
c001864e:	eb 04                	jmp    c0018654 <picEOI(int)+0x9c>
c0018650:	90                   	nop
c0018651:	8d 76 00             	lea    esi,[esi+0x0]
c0018654:	83 c4 10             	add    esp,0x10
c0018657:	c3                   	ret    

c0018658 <RTC::open(int, int, void*)>:
c0018658:	31 c0                	xor    eax,eax
c001865a:	c3                   	ret    
c001865b:	90                   	nop

c001865c <RTC::close(int, int, void*)>:
c001865c:	31 c0                	xor    eax,eax
c001865e:	c3                   	ret    
c001865f:	90                   	nop

c0018660 <RTC::timeInSecondsUTC()>:
c0018660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018664:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001866a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018670:	c3                   	ret    
c0018671:	90                   	nop

c0018672 <RTC::timeInDatetimeUTC()>:
c0018672:	53                   	push   ebx
c0018673:	83 ec 14             	sub    esp,0x14
c0018676:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001867a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001867e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018680:	50                   	push   eax
c0018681:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018684:	83 c4 0c             	add    esp,0xc
c0018687:	52                   	push   edx
c0018688:	50                   	push   eax
c0018689:	53                   	push   ebx
c001868a:	e8 6b 40 ff ff       	call   c000c6fa <secondsToDatetime(unsigned long long)>
c001868f:	89 d8                	mov    eax,ebx
c0018691:	83 c4 14             	add    esp,0x14
c0018694:	5b                   	pop    ebx
c0018695:	c2 04 00             	ret    0x4

c0018698 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018698:	56                   	push   esi
c0018699:	53                   	push   ebx
c001869a:	83 ec 14             	sub    esp,0x14
c001869d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00186a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00186a3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00186a6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186aa:	52                   	push   edx
c00186ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186b3:	50                   	push   eax
c00186b4:	e8 41 40 ff ff       	call   c000c6fa <secondsToDatetime(unsigned long long)>
c00186b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00186c5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00186c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00186cd:	89 f0                	mov    eax,esi
c00186cf:	83 c4 20             	add    esp,0x20
c00186d2:	5b                   	pop    ebx
c00186d3:	5e                   	pop    esi
c00186d4:	ff e0                	jmp    eax

c00186d6 <RTC::~RTC()>:
c00186d6:	83 ec 0c             	sub    esp,0xc
c00186d9:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c00186de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186e2:	89 10                	mov    DWORD PTR [eax],edx
c00186e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186e8:	83 ec 0c             	sub    esp,0xc
c00186eb:	50                   	push   eax
c00186ec:	e8 9b 3d ff ff       	call   c000c48c <Clock::~Clock()>
c00186f1:	83 c4 10             	add    esp,0x10
c00186f4:	90                   	nop
c00186f5:	83 c4 0c             	add    esp,0xc
c00186f8:	c3                   	ret    
c00186f9:	90                   	nop

c00186fa <RTC::~RTC()>:
c00186fa:	83 ec 0c             	sub    esp,0xc
c00186fd:	83 ec 0c             	sub    esp,0xc
c0018700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018704:	e8 cd ff ff ff       	call   c00186d6 <RTC::~RTC()>
c0018709:	83 c4 10             	add    esp,0x10
c001870c:	83 ec 08             	sub    esp,0x8
c001870f:	68 60 01 00 00       	push   0x160
c0018714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018718:	e8 fb 20 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001871d:	83 c4 10             	add    esp,0x10
c0018720:	83 c4 0c             	add    esp,0xc
c0018723:	c3                   	ret    

c0018724 <RTC::get_update_in_progress_flag()>:
c0018724:	83 ec 14             	sub    esp,0x14
c0018727:	6a 0a                	push   0xa
c0018729:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001872f:	e8 44 ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018734:	83 c4 1c             	add    esp,0x1c
c0018737:	0f b6 c0             	movzx  eax,al
c001873a:	c1 e8 07             	shr    eax,0x7
c001873d:	c3                   	ret    

c001873e <RTC::completeRTCRefresh()>:
c001873e:	55                   	push   ebp
c001873f:	57                   	push   edi
c0018740:	56                   	push   esi
c0018741:	53                   	push   ebx
c0018742:	83 ec 3c             	sub    esp,0x3c
c0018745:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c001874b:	83 ec 0c             	sub    esp,0xc
c001874e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018752:	e8 cd ff ff ff       	call   c0018724 <RTC::get_update_in_progress_flag()>
c0018757:	83 c4 10             	add    esp,0x10
c001875a:	84 c0                	test   al,al
c001875c:	74 0e                	je     c001876c <RTC::completeRTCRefresh()+0x2e>
c001875e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018764:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001876a:	73 df                	jae    c001874b <RTC::completeRTCRefresh()+0xd>
c001876c:	51                   	push   ecx
c001876d:	51                   	push   ecx
c001876e:	6a 00                	push   0x0
c0018770:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018776:	e8 fd e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001877b:	5b                   	pop    ebx
c001877c:	89 c7                	mov    edi,eax
c001877e:	5e                   	pop    esi
c001877f:	6a 02                	push   0x2
c0018781:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018787:	e8 ec e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001878c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018790:	5d                   	pop    ebp
c0018791:	58                   	pop    eax
c0018792:	6a 04                	push   0x4
c0018794:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001879a:	e8 d9 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001879f:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00187a3:	58                   	pop    eax
c00187a4:	5a                   	pop    edx
c00187a5:	6a 07                	push   0x7
c00187a7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187ad:	e8 c6 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187b2:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00187b6:	59                   	pop    ecx
c00187b7:	5b                   	pop    ebx
c00187b8:	6a 08                	push   0x8
c00187ba:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187c0:	e8 b3 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187c5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00187c9:	5e                   	pop    esi
c00187ca:	5d                   	pop    ebp
c00187cb:	6a 09                	push   0x9
c00187cd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187d3:	e8 a0 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187d8:	0f b6 c0             	movzx  eax,al
c00187db:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00187df:	83 c4 10             	add    esp,0x10
c00187e2:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00187e8:	83 ec 0c             	sub    esp,0xc
c00187eb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00187ef:	e8 30 ff ff ff       	call   c0018724 <RTC::get_update_in_progress_flag()>
c00187f4:	83 c4 10             	add    esp,0x10
c00187f7:	84 c0                	test   al,al
c00187f9:	74 0e                	je     c0018809 <RTC::completeRTCRefresh()+0xcb>
c00187fb:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018801:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018807:	73 df                	jae    c00187e8 <RTC::completeRTCRefresh()+0xaa>
c0018809:	51                   	push   ecx
c001880a:	51                   	push   ecx
c001880b:	6a 00                	push   0x0
c001880d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018813:	e8 60 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018818:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001881c:	5b                   	pop    ebx
c001881d:	5e                   	pop    esi
c001881e:	6a 02                	push   0x2
c0018820:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018826:	e8 4d e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001882b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001882f:	5d                   	pop    ebp
c0018830:	58                   	pop    eax
c0018831:	6a 04                	push   0x4
c0018833:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018839:	e8 3a e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001883e:	88 c3                	mov    bl,al
c0018840:	58                   	pop    eax
c0018841:	5a                   	pop    edx
c0018842:	6a 07                	push   0x7
c0018844:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001884a:	e8 29 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001884f:	59                   	pop    ecx
c0018850:	89 c6                	mov    esi,eax
c0018852:	5d                   	pop    ebp
c0018853:	6a 08                	push   0x8
c0018855:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001885b:	e8 18 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018860:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018864:	58                   	pop    eax
c0018865:	5a                   	pop    edx
c0018866:	6a 09                	push   0x9
c0018868:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001886e:	e8 05 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018873:	89 f9                	mov    ecx,edi
c0018875:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018879:	0f b6 e8             	movzx  ebp,al
c001887c:	83 c4 10             	add    esp,0x10
c001887f:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018883:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018888:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001888d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018891:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018895:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0018899:	0f 94 c0             	sete   al
c001889c:	0f b6 fb             	movzx  edi,bl
c001889f:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00188a3:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00188a8:	0f 94 c2             	sete   dl
c00188ab:	21 d0                	and    eax,edx
c00188ad:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00188b1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00188b5:	0f 94 c2             	sete   dl
c00188b8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00188bc:	21 c2                	and    edx,eax
c00188be:	89 f0                	mov    eax,esi
c00188c0:	0f b6 c0             	movzx  eax,al
c00188c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00188c7:	89 f0                	mov    eax,esi
c00188c9:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00188cd:	0f 94 c0             	sete   al
c00188d0:	21 d0                	and    eax,edx
c00188d2:	31 d2                	xor    edx,edx
c00188d4:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00188d8:	0f 94 c2             	sete   dl
c00188db:	85 c2                	test   edx,eax
c00188dd:	75 27                	jne    c0018906 <RTC::completeRTCRefresh()+0x1c8>
c00188df:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00188e3:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00188e7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00188eb:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00188ef:	89 f0                	mov    eax,esi
c00188f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00188f5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00188f9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00188fd:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018901:	e9 dc fe ff ff       	jmp    c00187e2 <RTC::completeRTCRefresh()+0xa4>
c0018906:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001890a:	75 d3                	jne    c00188df <RTC::completeRTCRefresh()+0x1a1>
c001890c:	52                   	push   edx
c001890d:	52                   	push   edx
c001890e:	6a 0b                	push   0xb
c0018910:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018916:	e8 5d e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001891b:	83 c4 10             	add    esp,0x10
c001891e:	a8 04                	test   al,0x4
c0018920:	75 7a                	jne    c001899c <RTC::completeRTCRefresh()+0x25e>
c0018922:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018926:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001892a:	83 e1 0f             	and    ecx,0xf
c001892d:	c1 ea 04             	shr    edx,0x4
c0018930:	c1 ef 04             	shr    edi,0x4
c0018933:	6b d2 0a             	imul   edx,edx,0xa
c0018936:	83 e6 0f             	and    esi,0xf
c0018939:	01 d1                	add    ecx,edx
c001893b:	c1 ed 04             	shr    ebp,0x4
c001893e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018942:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018946:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001894a:	c1 ea 04             	shr    edx,0x4
c001894d:	83 e1 0f             	and    ecx,0xf
c0018950:	6b d2 0a             	imul   edx,edx,0xa
c0018953:	6b ed 0a             	imul   ebp,ebp,0xa
c0018956:	01 d1                	add    ecx,edx
c0018958:	89 fa                	mov    edx,edi
c001895a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001895e:	83 e2 07             	and    edx,0x7
c0018961:	89 d9                	mov    ecx,ebx
c0018963:	6b d2 0a             	imul   edx,edx,0xa
c0018966:	83 e1 0f             	and    ecx,0xf
c0018969:	83 e3 80             	and    ebx,0xffffff80
c001896c:	01 d1                	add    ecx,edx
c001896e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018972:	09 cb                	or     ebx,ecx
c0018974:	c1 ea 04             	shr    edx,0x4
c0018977:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001897b:	6b d2 0a             	imul   edx,edx,0xa
c001897e:	83 e1 0f             	and    ecx,0xf
c0018981:	01 d6                	add    esi,edx
c0018983:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018987:	c1 ea 04             	shr    edx,0x4
c001898a:	6b d2 0a             	imul   edx,edx,0xa
c001898d:	01 d1                	add    ecx,edx
c001898f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018993:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018997:	83 e2 0f             	and    edx,0xf
c001899a:	01 d5                	add    ebp,edx
c001899c:	a8 02                	test   al,0x2
c001899e:	75 15                	jne    c00189b5 <RTC::completeRTCRefresh()+0x277>
c00189a0:	f6 c3 80             	test   bl,0x80
c00189a3:	74 10                	je     c00189b5 <RTC::completeRTCRefresh()+0x277>
c00189a5:	83 e3 7f             	and    ebx,0x7f
c00189a8:	b9 18 00 00 00       	mov    ecx,0x18
c00189ad:	8d 43 0c             	lea    eax,[ebx+0xc]
c00189b0:	99                   	cdq    
c00189b1:	f7 f9                	idiv   ecx
c00189b3:	88 d3                	mov    bl,dl
c00189b5:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00189bb:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00189c1:	77 06                	ja     c00189c9 <RTC::completeRTCRefresh()+0x28b>
c00189c3:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00189c9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189ce:	31 c9                	xor    ecx,ecx
c00189d0:	c1 e0 10             	shl    eax,0x10
c00189d3:	89 cd                	mov    ebp,ecx
c00189d5:	c1 e7 10             	shl    edi,0x10
c00189d8:	31 d2                	xor    edx,edx
c00189da:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00189e0:	09 c5                	or     ebp,eax
c00189e2:	89 f0                	mov    eax,esi
c00189e4:	89 e9                	mov    ecx,ebp
c00189e6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00189ea:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00189ee:	88 c2                	mov    dl,al
c00189f0:	88 d9                	mov    cl,bl
c00189f2:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c00189f6:	0f b7 c2             	movzx  eax,dx
c00189f9:	09 f8                	or     eax,edi
c00189fb:	89 c2                	mov    edx,eax
c00189fd:	50                   	push   eax
c00189fe:	50                   	push   eax
c00189ff:	51                   	push   ecx
c0018a00:	52                   	push   edx
c0018a01:	e8 75 3b ff ff       	call   c000c57b <datetimeToSeconds(datetime_t)>
c0018a06:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018a0a:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018a10:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018a16:	83 c4 4c             	add    esp,0x4c
c0018a19:	5b                   	pop    ebx
c0018a1a:	5e                   	pop    esi
c0018a1b:	5f                   	pop    edi
c0018a1c:	5d                   	pop    ebp
c0018a1d:	c3                   	ret    

c0018a1e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018a1e:	55                   	push   ebp
c0018a1f:	57                   	push   edi
c0018a20:	56                   	push   esi
c0018a21:	53                   	push   ebx
c0018a22:	83 ec 30             	sub    esp,0x30
c0018a25:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018a29:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018a2d:	6a 00                	push   0x0
c0018a2f:	6a 00                	push   0x0
c0018a31:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a37:	e8 56 e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a3c:	83 c4 0c             	add    esp,0xc
c0018a3f:	6a 00                	push   0x0
c0018a41:	6a 02                	push   0x2
c0018a43:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a49:	e8 44 e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a4e:	31 d2                	xor    edx,edx
c0018a50:	89 f9                	mov    ecx,edi
c0018a52:	89 f8                	mov    eax,edi
c0018a54:	c1 e9 10             	shr    ecx,0x10
c0018a57:	0f b6 c4             	movzx  eax,ah
c0018a5a:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018a5e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018a62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a66:	b9 64 00 00 00       	mov    ecx,0x64
c0018a6b:	89 f0                	mov    eax,esi
c0018a6d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018a71:	89 f0                	mov    eax,esi
c0018a73:	0f b6 c4             	movzx  eax,ah
c0018a76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a7a:	89 f0                	mov    eax,esi
c0018a7c:	c1 e8 10             	shr    eax,0x10
c0018a7f:	f7 f1                	div    ecx
c0018a81:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018a85:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018a89:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018a8d:	59                   	pop    ecx
c0018a8e:	5b                   	pop    ebx
c0018a8f:	89 fb                	mov    ebx,edi
c0018a91:	6a 0b                	push   0xb
c0018a93:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a99:	e8 da e6 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018a9e:	83 c4 10             	add    esp,0x10
c0018aa1:	89 c5                	mov    ebp,eax
c0018aa3:	a8 04                	test   al,0x4
c0018aa5:	75 6e                	jne    c0018b15 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018aa7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018aab:	31 d2                	xor    edx,edx
c0018aad:	0f b6 c1             	movzx  eax,cl
c0018ab0:	b9 0a 00 00 00       	mov    ecx,0xa
c0018ab5:	f7 f1                	div    ecx
c0018ab7:	c1 e0 04             	shl    eax,0x4
c0018aba:	09 d0                	or     eax,edx
c0018abc:	31 d2                	xor    edx,edx
c0018abe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ac2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018ac7:	f7 f1                	div    ecx
c0018ac9:	c1 e0 04             	shl    eax,0x4
c0018acc:	09 d0                	or     eax,edx
c0018ace:	31 d2                	xor    edx,edx
c0018ad0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ad4:	0f b6 c3             	movzx  eax,bl
c0018ad7:	f7 f1                	div    ecx
c0018ad9:	c1 e0 04             	shl    eax,0x4
c0018adc:	09 d0                	or     eax,edx
c0018ade:	31 d2                	xor    edx,edx
c0018ae0:	89 c3                	mov    ebx,eax
c0018ae2:	89 f0                	mov    eax,esi
c0018ae4:	0f b6 c0             	movzx  eax,al
c0018ae7:	f7 f1                	div    ecx
c0018ae9:	c1 e0 04             	shl    eax,0x4
c0018aec:	09 d0                	or     eax,edx
c0018aee:	31 d2                	xor    edx,edx
c0018af0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018af4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018af9:	f7 f1                	div    ecx
c0018afb:	c1 e0 04             	shl    eax,0x4
c0018afe:	09 d0                	or     eax,edx
c0018b00:	31 d2                	xor    edx,edx
c0018b02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018b06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b0a:	f7 f1                	div    ecx
c0018b0c:	c1 e0 04             	shl    eax,0x4
c0018b0f:	09 d0                	or     eax,edx
c0018b11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b15:	83 e5 02             	and    ebp,0x2
c0018b18:	75 1e                	jne    c0018b38 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b1a:	0f b6 c3             	movzx  eax,bl
c0018b1d:	83 f8 0b             	cmp    eax,0xb
c0018b20:	76 10                	jbe    c0018b32 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018b22:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018b25:	88 d3                	mov    bl,dl
c0018b27:	84 d2                	test   dl,dl
c0018b29:	75 02                	jne    c0018b2d <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018b2b:	b3 0c                	mov    bl,0xc
c0018b2d:	83 cb 80             	or     ebx,0xffffff80
c0018b30:	eb 06                	jmp    c0018b38 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b32:	85 c0                	test   eax,eax
c0018b34:	75 02                	jne    c0018b38 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b36:	b3 0c                	mov    bl,0xc
c0018b38:	0f b6 db             	movzx  ebx,bl
c0018b3b:	50                   	push   eax
c0018b3c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018b41:	52                   	push   edx
c0018b42:	6a 00                	push   0x0
c0018b44:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b4a:	e8 43 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b4f:	83 c4 0c             	add    esp,0xc
c0018b52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b57:	50                   	push   eax
c0018b58:	6a 02                	push   0x2
c0018b5a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b60:	e8 2d e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b65:	83 c4 0c             	add    esp,0xc
c0018b68:	53                   	push   ebx
c0018b69:	6a 04                	push   0x4
c0018b6b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b71:	e8 1c e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b76:	83 c4 0c             	add    esp,0xc
c0018b79:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018b7e:	52                   	push   edx
c0018b7f:	6a 07                	push   0x7
c0018b81:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b87:	e8 06 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b8c:	83 c4 0c             	add    esp,0xc
c0018b8f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018b94:	50                   	push   eax
c0018b95:	6a 08                	push   0x8
c0018b97:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b9d:	e8 f0 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ba2:	83 c4 0c             	add    esp,0xc
c0018ba5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018baa:	55                   	push   ebp
c0018bab:	6a 09                	push   0x9
c0018bad:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bb3:	e8 da e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bb8:	5a                   	pop    edx
c0018bb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018bbd:	e8 7c fb ff ff       	call   c001873e <RTC::completeRTCRefresh()>
c0018bc2:	83 c4 3c             	add    esp,0x3c
c0018bc5:	b0 01                	mov    al,0x1
c0018bc7:	5b                   	pop    ebx
c0018bc8:	5e                   	pop    esi
c0018bc9:	5f                   	pop    edi
c0018bca:	5d                   	pop    ebp
c0018bcb:	c3                   	ret    

c0018bcc <rtcIRQHandler(regs*, void*)>:
c0018bcc:	53                   	push   ebx
c0018bcd:	83 ec 10             	sub    esp,0x10
c0018bd0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018bd4:	6a 0c                	push   0xc
c0018bd6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bdc:	e8 97 e5 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018be1:	83 c4 10             	add    esp,0x10
c0018be4:	a8 80                	test   al,0x80
c0018be6:	74 24                	je     c0018c0c <rtcIRQHandler(regs*, void*)+0x40>
c0018be8:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018bef:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018bf6:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018bfd:	75 0d                	jne    c0018c0c <rtcIRQHandler(regs*, void*)+0x40>
c0018bff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018c03:	83 c4 08             	add    esp,0x8
c0018c06:	5b                   	pop    ebx
c0018c07:	e9 32 fb ff ff       	jmp    c001873e <RTC::completeRTCRefresh()>
c0018c0c:	83 c4 08             	add    esp,0x8
c0018c0f:	5b                   	pop    ebx
c0018c10:	c3                   	ret    
c0018c11:	90                   	nop

c0018c12 <RTC::RTC()>:
c0018c12:	83 ec 1c             	sub    esp,0x1c
c0018c15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c19:	83 ec 08             	sub    esp,0x8
c0018c1c:	68 0f 2d 02 c0       	push   0xc0022d0f
c0018c21:	50                   	push   eax
c0018c22:	e8 2f 38 ff ff       	call   c000c456 <Clock::Clock(char const*)>
c0018c27:	83 c4 10             	add    esp,0x10
c0018c2a:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c0018c2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c33:	89 10                	mov    DWORD PTR [eax],edx
c0018c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c39:	83 ec 0c             	sub    esp,0xc
c0018c3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c40:	6a 01                	push   0x1
c0018c42:	68 cc 8b 01 c0       	push   0xc0018bcc
c0018c47:	6a 08                	push   0x8
c0018c49:	50                   	push   eax
c0018c4a:	e8 e3 3c ff ff       	call   c000c932 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c4f:	83 c4 20             	add    esp,0x20
c0018c52:	89 c2                	mov    edx,eax
c0018c54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c58:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018c5e:	fa                   	cli    
c0018c5f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c64:	83 c0 01             	add    eax,0x1
c0018c67:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018c6c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018c71:	83 ec 08             	sub    esp,0x8
c0018c74:	6a 0b                	push   0xb
c0018c76:	50                   	push   eax
c0018c77:	e8 fc e4 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018c7c:	83 c4 10             	add    esp,0x10
c0018c7f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018c83:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018c88:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018c8c:	83 ca 10             	or     edx,0x10
c0018c8f:	0f b6 d2             	movzx  edx,dl
c0018c92:	83 ec 04             	sub    esp,0x4
c0018c95:	52                   	push   edx
c0018c96:	6a 0b                	push   0xb
c0018c98:	50                   	push   eax
c0018c99:	e8 f4 e5 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c9e:	83 c4 10             	add    esp,0x10
c0018ca1:	83 ec 0c             	sub    esp,0xc
c0018ca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ca8:	e8 91 fa ff ff       	call   c001873e <RTC::completeRTCRefresh()>
c0018cad:	83 c4 10             	add    esp,0x10
c0018cb0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018cb5:	83 e8 01             	sub    eax,0x1
c0018cb8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018cbd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018cc2:	85 c0                	test   eax,eax
c0018cc4:	75 01                	jne    c0018cc7 <RTC::RTC()+0xb5>
c0018cc6:	fb                   	sti    
c0018cc7:	90                   	nop
c0018cc8:	83 c4 1c             	add    esp,0x1c
c0018ccb:	c3                   	ret    

c0018ccc <HalConsoleScroll(int, int)>:
c0018ccc:	83 ec 10             	sub    esp,0x10
c0018ccf:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018cd7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018cdf:	90                   	nop
c0018ce0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018ce5:	0f 8f e1 00 00 00    	jg     c0018dcc <HalConsoleScroll(int, int)+0x100>
c0018ceb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018cf3:	90                   	nop
c0018cf4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018cfc:	0f 8f be 00 00 00    	jg     c0018dc0 <HalConsoleScroll(int, int)+0xf4>
c0018d02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d06:	89 d0                	mov    eax,edx
c0018d08:	c1 e0 02             	shl    eax,0x2
c0018d0b:	01 d0                	add    eax,edx
c0018d0d:	c1 e0 05             	shl    eax,0x5
c0018d10:	89 c2                	mov    edx,eax
c0018d12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d16:	01 d0                	add    eax,edx
c0018d18:	89 c2                	mov    edx,eax
c0018d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d1e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018d21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d25:	89 d0                	mov    eax,edx
c0018d27:	c1 e0 02             	shl    eax,0x2
c0018d2a:	01 d0                	add    eax,edx
c0018d2c:	c1 e0 05             	shl    eax,0x5
c0018d2f:	89 c2                	mov    edx,eax
c0018d31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d35:	01 d0                	add    eax,edx
c0018d37:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018d3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d41:	01 c2                	add    edx,eax
c0018d43:	8a 01                	mov    al,BYTE PTR [ecx]
c0018d45:	88 02                	mov    BYTE PTR [edx],al
c0018d47:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d4c:	75 66                	jne    c0018db4 <HalConsoleScroll(int, int)+0xe8>
c0018d4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d52:	83 e0 01             	and    eax,0x1
c0018d55:	74 39                	je     c0018d90 <HalConsoleScroll(int, int)+0xc4>
c0018d57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d5b:	83 e0 0f             	and    eax,0xf
c0018d5e:	88 c2                	mov    dl,al
c0018d60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d64:	c1 e0 04             	shl    eax,0x4
c0018d67:	09 d0                	or     eax,edx
c0018d69:	88 c1                	mov    cl,al
c0018d6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d6f:	89 d0                	mov    eax,edx
c0018d71:	c1 e0 02             	shl    eax,0x2
c0018d74:	01 d0                	add    eax,edx
c0018d76:	c1 e0 05             	shl    eax,0x5
c0018d79:	89 c2                	mov    edx,eax
c0018d7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d7f:	01 d0                	add    eax,edx
c0018d81:	89 c2                	mov    edx,eax
c0018d83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d87:	01 d0                	add    eax,edx
c0018d89:	88 ca                	mov    dl,cl
c0018d8b:	88 10                	mov    BYTE PTR [eax],dl
c0018d8d:	eb 25                	jmp    c0018db4 <HalConsoleScroll(int, int)+0xe8>
c0018d8f:	90                   	nop
c0018d90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d94:	89 d0                	mov    eax,edx
c0018d96:	c1 e0 02             	shl    eax,0x2
c0018d99:	01 d0                	add    eax,edx
c0018d9b:	c1 e0 05             	shl    eax,0x5
c0018d9e:	89 c2                	mov    edx,eax
c0018da0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018da4:	01 d0                	add    eax,edx
c0018da6:	89 c2                	mov    edx,eax
c0018da8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dac:	01 d0                	add    eax,edx
c0018dae:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018db1:	8d 76 00             	lea    esi,[esi+0x0]
c0018db4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018db9:	e9 36 ff ff ff       	jmp    c0018cf4 <HalConsoleScroll(int, int)+0x28>
c0018dbe:	66 90                	xchg   ax,ax
c0018dc0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018dc5:	e9 16 ff ff ff       	jmp    c0018ce0 <HalConsoleScroll(int, int)+0x14>
c0018dca:	66 90                	xchg   ax,ax
c0018dcc:	90                   	nop
c0018dcd:	83 c4 10             	add    esp,0x10
c0018dd0:	c3                   	ret    
c0018dd1:	8d 76 00             	lea    esi,[esi+0x0]

c0018dd4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018dd4:	83 ec 14             	sub    esp,0x14
c0018dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ddb:	88 04 24             	mov    BYTE PTR [esp],al
c0018dde:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018de1:	0f b6 c0             	movzx  eax,al
c0018de4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018de8:	89 d1                	mov    ecx,edx
c0018dea:	83 e1 0f             	and    ecx,0xf
c0018ded:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018df1:	c1 e2 04             	shl    edx,0x4
c0018df4:	0f b6 d2             	movzx  edx,dl
c0018df7:	09 ca                	or     edx,ecx
c0018df9:	c1 e2 08             	shl    edx,0x8
c0018dfc:	09 d0                	or     eax,edx
c0018dfe:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018e03:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018e0b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e0f:	89 d0                	mov    eax,edx
c0018e11:	c1 e0 02             	shl    eax,0x2
c0018e14:	01 d0                	add    eax,edx
c0018e16:	c1 e0 04             	shl    eax,0x4
c0018e19:	89 c2                	mov    edx,eax
c0018e1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e1f:	01 d0                	add    eax,edx
c0018e21:	01 c0                	add    eax,eax
c0018e23:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018e27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e2b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018e30:	66 89 02             	mov    WORD PTR [edx],ax
c0018e33:	90                   	nop
c0018e34:	83 c4 14             	add    esp,0x14
c0018e37:	c3                   	ret    

c0018e38 <HalConsoleCursorUpdate(int, int)>:
c0018e38:	83 ec 20             	sub    esp,0x20
c0018e3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e3f:	89 c2                	mov    edx,eax
c0018e41:	c1 e2 02             	shl    edx,0x2
c0018e44:	01 d0                	add    eax,edx
c0018e46:	c1 e0 04             	shl    eax,0x4
c0018e49:	89 c2                	mov    edx,eax
c0018e4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e4f:	01 d0                	add    eax,edx
c0018e51:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018e56:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018e5d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018e62:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018e66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e6a:	ee                   	out    dx,al
c0018e6b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e70:	0f b6 c0             	movzx  eax,al
c0018e73:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018e7a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018e7e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018e82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018e86:	ee                   	out    dx,al
c0018e87:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018e8e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018e93:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018e97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018e9b:	ee                   	out    dx,al
c0018e9c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018ea1:	c1 e8 08             	shr    eax,0x8
c0018ea4:	0f b6 c0             	movzx  eax,al
c0018ea7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018eae:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018eb2:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018eb6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018eba:	ee                   	out    dx,al
c0018ebb:	90                   	nop
c0018ebc:	83 c4 20             	add    esp,0x20
c0018ebf:	c3                   	ret    

c0018ec0 <FAT::getName()>:
c0018ec0:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c0018ec5:	c3                   	ret    
c0018ec6:	66 90                	xchg   ax,ax

c0018ec8 <FAT::tell(void*, unsigned long long*)>:
c0018ec8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ecd:	75 09                	jne    c0018ed8 <FAT::tell(void*, unsigned long long*)+0x10>
c0018ecf:	b8 04 00 00 00       	mov    eax,0x4
c0018ed4:	c3                   	ret    
c0018ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ed8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018edd:	75 09                	jne    c0018ee8 <FAT::tell(void*, unsigned long long*)+0x20>
c0018edf:	b8 04 00 00 00       	mov    eax,0x4
c0018ee4:	c3                   	ret    
c0018ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018eec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018eef:	ba 00 00 00 00       	mov    edx,0x0
c0018ef4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ef8:	89 01                	mov    DWORD PTR [ecx],eax
c0018efa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018efd:	b8 00 00 00 00       	mov    eax,0x0
c0018f02:	c3                   	ret    
c0018f03:	90                   	nop

c0018f04 <FAT::stat(void*, unsigned long long*)>:
c0018f04:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f09:	75 09                	jne    c0018f14 <FAT::stat(void*, unsigned long long*)+0x10>
c0018f0b:	b8 04 00 00 00       	mov    eax,0x4
c0018f10:	c3                   	ret    
c0018f11:	8d 76 00             	lea    esi,[esi+0x0]
c0018f14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f19:	75 09                	jne    c0018f24 <FAT::stat(void*, unsigned long long*)+0x20>
c0018f1b:	b8 04 00 00 00       	mov    eax,0x4
c0018f20:	c3                   	ret    
c0018f21:	8d 76 00             	lea    esi,[esi+0x0]
c0018f24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f28:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018f2b:	ba 00 00 00 00       	mov    edx,0x0
c0018f30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f34:	89 01                	mov    DWORD PTR [ecx],eax
c0018f36:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f39:	b8 00 00 00 00       	mov    eax,0x0
c0018f3e:	c3                   	ret    
c0018f3f:	90                   	nop

c0018f40 <FAT::~FAT()>:
c0018f40:	83 ec 0c             	sub    esp,0xc
c0018f43:	ba ac 2d 02 c0       	mov    edx,0xc0022dac
c0018f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f4c:	89 10                	mov    DWORD PTR [eax],edx
c0018f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f52:	83 ec 0c             	sub    esp,0xc
c0018f55:	50                   	push   eax
c0018f56:	e8 33 28 ff ff       	call   c000b78e <Filesystem::~Filesystem()>
c0018f5b:	83 c4 10             	add    esp,0x10
c0018f5e:	90                   	nop
c0018f5f:	83 c4 0c             	add    esp,0xc
c0018f62:	c3                   	ret    
c0018f63:	90                   	nop

c0018f64 <FAT::~FAT()>:
c0018f64:	83 ec 0c             	sub    esp,0xc
c0018f67:	83 ec 0c             	sub    esp,0xc
c0018f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f6e:	e8 cd ff ff ff       	call   c0018f40 <FAT::~FAT()>
c0018f73:	83 c4 10             	add    esp,0x10
c0018f76:	83 ec 08             	sub    esp,0x8
c0018f79:	6a 08                	push   0x8
c0018f7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f7f:	e8 94 18 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018f84:	83 c4 10             	add    esp,0x10
c0018f87:	83 c4 0c             	add    esp,0xc
c0018f8a:	c3                   	ret    
c0018f8b:	90                   	nop

c0018f8c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018f8c:	83 ec 1c             	sub    esp,0x1c
c0018f8f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018f96:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018f9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f9f:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018fa6:	83 f8 ff             	cmp    eax,0xffffffff
c0018fa9:	75 35                	jne    c0018fe0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018fab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018faf:	88 c2                	mov    dl,al
c0018fb1:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018fb6:	01 d0                	add    eax,edx
c0018fb8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018fbc:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018fc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fc6:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0018fcd:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018fd2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018fd6:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0018fdd:	eb 19                	jmp    c0018ff8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018fdf:	90                   	nop
c0018fe0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018fe4:	88 c2                	mov    dl,al
c0018fe6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fea:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018ff1:	01 d0                	add    eax,edx
c0018ff3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018ff7:	90                   	nop
c0018ff8:	83 ec 04             	sub    esp,0x4
c0018ffb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018fff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019003:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019007:	50                   	push   eax
c0019008:	e8 c2 bf fe ff       	call   c0004fcf <f_getlabel>
c001900d:	83 c4 10             	add    esp,0x10
c0019010:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019014:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019019:	75 09                	jne    c0019024 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001901b:	b8 00 00 00 00       	mov    eax,0x0
c0019020:	eb 0a                	jmp    c001902c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0019022:	66 90                	xchg   ax,ax
c0019024:	b8 01 00 00 00       	mov    eax,0x1
c0019029:	8d 76 00             	lea    esi,[esi+0x0]
c001902c:	83 c4 1c             	add    esp,0x1c
c001902f:	c3                   	ret    

c0019030 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019030:	57                   	push   edi
c0019031:	83 ec 58             	sub    esp,0x58
c0019034:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001903c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019040:	b8 00 00 00 00       	mov    eax,0x0
c0019045:	b9 0f 00 00 00       	mov    ecx,0xf
c001904a:	fc                   	cld    
c001904b:	89 d7                	mov    edi,edx
c001904d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001904f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019053:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001905a:	83 f8 ff             	cmp    eax,0xffffffff
c001905d:	75 35                	jne    c0019094 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001905f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019063:	88 c2                	mov    dl,al
c0019065:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001906a:	01 d0                	add    eax,edx
c001906c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019070:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019076:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001907a:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019081:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019086:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001908a:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019091:	eb 19                	jmp    c00190ac <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0019093:	90                   	nop
c0019094:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019098:	88 c2                	mov    dl,al
c001909a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001909e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190a5:	01 d0                	add    eax,edx
c00190a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00190ab:	90                   	nop
c00190ac:	83 ec 08             	sub    esp,0x8
c00190af:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00190b3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190b7:	50                   	push   eax
c00190b8:	e8 83 77 fe ff       	call   c0000840 <strcat>
c00190bd:	83 c4 10             	add    esp,0x10
c00190c0:	83 ec 0c             	sub    esp,0xc
c00190c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190c7:	50                   	push   eax
c00190c8:	e8 53 c0 fe ff       	call   c0005120 <f_setlabel>
c00190cd:	83 c4 10             	add    esp,0x10
c00190d0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00190d4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00190d9:	75 09                	jne    c00190e4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00190db:	b8 00 00 00 00       	mov    eax,0x0
c00190e0:	eb 0a                	jmp    c00190ec <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00190e2:	66 90                	xchg   ax,ax
c00190e4:	b8 01 00 00 00       	mov    eax,0x1
c00190e9:	8d 76 00             	lea    esi,[esi+0x0]
c00190ec:	83 c4 58             	add    esp,0x58
c00190ef:	5f                   	pop    edi
c00190f0:	c3                   	ret    
c00190f1:	90                   	nop
c00190f2:	66 90                	xchg   ax,ax

c00190f4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00190f4:	83 ec 2c             	sub    esp,0x2c
c00190f7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00190ff:	83 ec 08             	sub    esp,0x8
c0019102:	68 84 2d 02 c0       	push   0xc0022d84
c0019107:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001910b:	e8 40 76 fe ff       	call   c0000750 <strcmp>
c0019110:	83 c4 10             	add    esp,0x10
c0019113:	85 c0                	test   eax,eax
c0019115:	0f 94 c0             	sete   al
c0019118:	0f b6 c0             	movzx  eax,al
c001911b:	85 c0                	test   eax,eax
c001911d:	74 0d                	je     c001912c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001911f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019127:	e9 c0 00 00 00       	jmp    c00191ec <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001912c:	83 ec 08             	sub    esp,0x8
c001912f:	68 76 2d 02 c0       	push   0xc0022d76
c0019134:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019138:	e8 13 76 fe ff       	call   c0000750 <strcmp>
c001913d:	83 c4 10             	add    esp,0x10
c0019140:	85 c0                	test   eax,eax
c0019142:	0f 94 c0             	sete   al
c0019145:	0f b6 c0             	movzx  eax,al
c0019148:	85 c0                	test   eax,eax
c001914a:	74 10                	je     c001915c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001914c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019154:	e9 93 00 00 00       	jmp    c00191ec <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019159:	8d 76 00             	lea    esi,[esi+0x0]
c001915c:	83 ec 08             	sub    esp,0x8
c001915f:	68 7c 2d 02 c0       	push   0xc0022d7c
c0019164:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019168:	e8 e3 75 fe ff       	call   c0000750 <strcmp>
c001916d:	83 c4 10             	add    esp,0x10
c0019170:	85 c0                	test   eax,eax
c0019172:	0f 94 c0             	sete   al
c0019175:	0f b6 c0             	movzx  eax,al
c0019178:	85 c0                	test   eax,eax
c001917a:	74 0c                	je     c0019188 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001917c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019184:	eb 66                	jmp    c00191ec <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019186:	66 90                	xchg   ax,ax
c0019188:	83 ec 08             	sub    esp,0x8
c001918b:	68 dc 04 02 c0       	push   0xc00204dc
c0019190:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019194:	e8 b7 75 fe ff       	call   c0000750 <strcmp>
c0019199:	83 c4 10             	add    esp,0x10
c001919c:	85 c0                	test   eax,eax
c001919e:	0f 94 c0             	sete   al
c00191a1:	0f b6 c0             	movzx  eax,al
c00191a4:	85 c0                	test   eax,eax
c00191a6:	74 0c                	je     c00191b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00191a8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00191b0:	eb 3a                	jmp    c00191ec <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191b2:	66 90                	xchg   ax,ax
c00191b4:	83 ec 08             	sub    esp,0x8
c00191b7:	68 82 2d 02 c0       	push   0xc0022d82
c00191bc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191c0:	e8 8b 75 fe ff       	call   c0000750 <strcmp>
c00191c5:	83 c4 10             	add    esp,0x10
c00191c8:	85 c0                	test   eax,eax
c00191ca:	0f 94 c0             	sete   al
c00191cd:	0f b6 c0             	movzx  eax,al
c00191d0:	85 c0                	test   eax,eax
c00191d2:	74 0c                	je     c00191e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00191d4:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00191dc:	eb 0e                	jmp    c00191ec <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191de:	66 90                	xchg   ax,ax
c00191e0:	b8 08 00 00 00       	mov    eax,0x8
c00191e5:	e9 ea 00 00 00       	jmp    c00192d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00191ea:	66 90                	xchg   ax,ax
c00191ec:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00191f3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00191f8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191fc:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019203:	83 f8 ff             	cmp    eax,0xffffffff
c0019206:	75 34                	jne    c001923c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019208:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001920c:	88 c2                	mov    dl,al
c001920e:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019213:	01 d0                	add    eax,edx
c0019215:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019219:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001921f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019223:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c001922a:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001922f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019233:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c001923a:	eb 18                	jmp    c0019254 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001923c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019240:	88 c2                	mov    dl,al
c0019242:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019246:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001924d:	01 d0                	add    eax,edx
c001924f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019253:	90                   	nop
c0019254:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019258:	88 04 24             	mov    BYTE PTR [esp],al
c001925b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001925f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019263:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001926b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019270:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019278:	83 ec 0c             	sub    esp,0xc
c001927b:	68 00 20 00 00       	push   0x2000
c0019280:	e8 31 e8 fe ff       	call   c0007ab6 <malloc>
c0019285:	83 c4 10             	add    esp,0x10
c0019288:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001928c:	68 00 20 00 00       	push   0x2000
c0019291:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019295:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019299:	50                   	push   eax
c001929a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001929e:	50                   	push   eax
c001929f:	e8 79 c1 fe ff       	call   c000541d <f_mkfs>
c00192a4:	83 c4 10             	add    esp,0x10
c00192a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192ab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00192b0:	75 0a                	jne    c00192bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00192b2:	b8 00 00 00 00       	mov    eax,0x0
c00192b7:	eb 1b                	jmp    c00192d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192b9:	8d 76 00             	lea    esi,[esi+0x0]
c00192bc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00192c1:	75 09                	jne    c00192cc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00192c3:	b8 09 00 00 00       	mov    eax,0x9
c00192c8:	eb 0a                	jmp    c00192d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192ca:	66 90                	xchg   ax,ax
c00192cc:	b8 01 00 00 00       	mov    eax,0x1
c00192d1:	8d 76 00             	lea    esi,[esi+0x0]
c00192d4:	83 c4 2c             	add    esp,0x2c
c00192d7:	c3                   	ret    

c00192d8 <FAT::tryMount(LogicalDisk*, int)>:
c00192d8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00192de:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192e3:	83 f8 14             	cmp    eax,0x14
c00192e6:	75 18                	jne    c0019300 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00192e8:	83 ec 0c             	sub    esp,0xc
c00192eb:	68 88 2d 02 c0       	push   0xc0022d88
c00192f0:	e8 ea 82 ff ff       	call   c00115df <KePanic(char const*)>
c00192f5:	83 c4 10             	add    esp,0x10
c00192f8:	b0 00                	mov    al,0x0
c00192fa:	e9 ed 01 00 00       	jmp    c00194ec <FAT::tryMount(LogicalDisk*, int)+0x214>
c00192ff:	90                   	nop
c0019300:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019307:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001930d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019313:	3d 00 02 00 00       	cmp    eax,0x200
c0019318:	74 0a                	je     c0019324 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001931a:	b0 00                	mov    al,0x0
c001931c:	e9 cb 01 00 00       	jmp    c00194ec <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019321:	8d 76 00             	lea    esi,[esi+0x0]
c0019324:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001932c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019333:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001933a:	83 f8 ff             	cmp    eax,0xffffffff
c001933d:	74 09                	je     c0019348 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001933f:	b0 01                	mov    al,0x1
c0019341:	e9 a6 01 00 00       	jmp    c00194ec <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019346:	66 90                	xchg   ax,ax
c0019348:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019352:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001935a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019361:	88 c2                	mov    dl,al
c0019363:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019368:	01 d0                	add    eax,edx
c001936a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019371:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019377:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001937e:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019385:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001938a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019391:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019398:	83 ec 0c             	sub    esp,0xc
c001939b:	68 34 02 00 00       	push   0x234
c00193a0:	e8 11 e7 fe ff       	call   c0007ab6 <malloc>
c00193a5:	83 c4 10             	add    esp,0x10
c00193a8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00193af:	83 ec 04             	sub    esp,0x4
c00193b2:	6a 00                	push   0x0
c00193b4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00193bb:	50                   	push   eax
c00193bc:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00193c3:	e8 30 a8 fe ff       	call   c0003bf8 <f_mount>
c00193c8:	83 c4 10             	add    esp,0x10
c00193cb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00193d2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00193da:	74 1c                	je     c00193f8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00193dc:	83 ec 0c             	sub    esp,0xc
c00193df:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00193e6:	e8 eb e6 fe ff       	call   c0007ad6 <rfree>
c00193eb:	83 c4 10             	add    esp,0x10
c00193ee:	b0 00                	mov    al,0x0
c00193f0:	e9 f7 00 00 00       	jmp    c00194ec <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193f5:	8d 76 00             	lea    esi,[esi+0x0]
c00193f8:	83 ec 04             	sub    esp,0x4
c00193fb:	68 00 01 00 00       	push   0x100
c0019400:	6a 00                	push   0x0
c0019402:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019409:	50                   	push   eax
c001940a:	e8 e1 70 fe ff       	call   c00004f0 <memset>
c001940f:	83 c4 10             	add    esp,0x10
c0019412:	83 ec 08             	sub    esp,0x8
c0019415:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001941c:	50                   	push   eax
c001941d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019424:	50                   	push   eax
c0019425:	e8 16 74 fe ff       	call   c0000840 <strcat>
c001942a:	83 c4 10             	add    esp,0x10
c001942d:	83 ec 08             	sub    esp,0x8
c0019430:	68 96 2d 02 c0       	push   0xc0022d96
c0019435:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001943c:	50                   	push   eax
c001943d:	e8 fe 73 fe ff       	call   c0000840 <strcat>
c0019442:	83 c4 10             	add    esp,0x10
c0019445:	83 ec 04             	sub    esp,0x4
c0019448:	6a 01                	push   0x1
c001944a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019451:	50                   	push   eax
c0019452:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019456:	50                   	push   eax
c0019457:	e8 fe a7 fe ff       	call   c0003c5a <f_open>
c001945c:	83 c4 10             	add    esp,0x10
c001945f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019466:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001946d:	85 c0                	test   eax,eax
c001946f:	74 0b                	je     c001947c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019471:	78 31                	js     c00194a4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019473:	83 e8 04             	sub    eax,0x4
c0019476:	83 f8 01             	cmp    eax,0x1
c0019479:	77 29                	ja     c00194a4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001947b:	90                   	nop
c001947c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019484:	83 ec 0c             	sub    esp,0xc
c0019487:	8d 44 24 14          	lea    eax,[esp+0x14]
c001948b:	50                   	push   eax
c001948c:	e8 98 af fe ff       	call   c0004429 <f_close>
c0019491:	83 c4 10             	add    esp,0x10
c0019494:	90                   	nop
c0019495:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001949d:	85 c0                	test   eax,eax
c001949f:	74 43                	je     c00194e4 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00194a1:	eb 31                	jmp    c00194d4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00194a3:	90                   	nop
c00194a4:	83 ec 0c             	sub    esp,0xc
c00194a7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194ae:	e8 23 e6 fe ff       	call   c0007ad6 <rfree>
c00194b3:	83 c4 10             	add    esp,0x10
c00194b6:	83 ec 04             	sub    esp,0x4
c00194b9:	6a 00                	push   0x0
c00194bb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194c2:	50                   	push   eax
c00194c3:	6a 00                	push   0x0
c00194c5:	e8 2e a7 fe ff       	call   c0003bf8 <f_mount>
c00194ca:	83 c4 10             	add    esp,0x10
c00194cd:	b0 00                	mov    al,0x0
c00194cf:	eb 1b                	jmp    c00194ec <FAT::tryMount(LogicalDisk*, int)+0x214>
c00194d1:	8d 76 00             	lea    esi,[esi+0x0]
c00194d4:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00194d9:	83 c0 01             	add    eax,0x1
c00194dc:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c00194e1:	8d 76 00             	lea    esi,[esi+0x0]
c00194e4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00194eb:	90                   	nop
c00194ec:	81 c4 4c 03 00 00    	add    esp,0x34c
c00194f2:	c3                   	ret    
c00194f3:	90                   	nop

c00194f4 <FAT::allocateSwapfile(char const*, int)>:
c00194f4:	55                   	push   ebp
c00194f5:	57                   	push   edi
c00194f6:	56                   	push   esi
c00194f7:	53                   	push   ebx
c00194f8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00194fe:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019509:	83 ec 0c             	sub    esp,0xc
c001950c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019513:	e8 9e e5 fe ff       	call   c0007ab6 <malloc>
c0019518:	83 c4 10             	add    esp,0x10
c001951b:	89 c7                	mov    edi,eax
c001951d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0019522:	83 ec 04             	sub    esp,0x4
c0019525:	50                   	push   eax
c0019526:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001952d:	57                   	push   edi
c001952e:	e8 d9 25 ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c0019533:	83 c4 10             	add    esp,0x10
c0019536:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001953d:	83 ec 04             	sub    esp,0x4
c0019540:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019544:	50                   	push   eax
c0019545:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019549:	50                   	push   eax
c001954a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019551:	e8 d6 28 ff ff       	call   c000be2c <File::stat(unsigned long long*, bool*)>
c0019556:	83 c4 10             	add    esp,0x10
c0019559:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019560:	c1 e0 14             	shl    eax,0x14
c0019563:	89 c7                	mov    edi,eax
c0019565:	89 c5                	mov    ebp,eax
c0019567:	c1 fd 1f             	sar    ebp,0x1f
c001956a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001956e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019572:	89 f9                	mov    ecx,edi
c0019574:	31 c1                	xor    ecx,eax
c0019576:	89 cb                	mov    ebx,ecx
c0019578:	89 e9                	mov    ecx,ebp
c001957a:	31 d1                	xor    ecx,edx
c001957c:	89 ce                	mov    esi,ecx
c001957e:	89 f0                	mov    eax,esi
c0019580:	09 d8                	or     eax,ebx
c0019582:	0f 84 9c 00 00 00    	je     c0019624 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019588:	83 ec 0c             	sub    esp,0xc
c001958b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019592:	e8 61 27 ff ff       	call   c000bcf8 <File::unlink()>
c0019597:	83 c4 10             	add    esp,0x10
c001959a:	83 ec 08             	sub    esp,0x8
c001959d:	6a 12                	push   0x12
c001959f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195a6:	e8 7f 25 ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c00195ab:	83 c4 10             	add    esp,0x10
c00195ae:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195b5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00195bb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00195c2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00195c9:	c1 e0 14             	shl    eax,0x14
c00195cc:	83 ec 04             	sub    esp,0x4
c00195cf:	6a 01                	push   0x1
c00195d1:	50                   	push   eax
c00195d2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00195d9:	e8 d2 bc fe ff       	call   c00052b0 <f_expand>
c00195de:	83 c4 10             	add    esp,0x10
c00195e1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00195ea:	83 c0 10             	add    eax,0x10
c00195ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00195ef:	83 ec 0c             	sub    esp,0xc
c00195f2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00195f6:	52                   	push   edx
c00195f7:	8d 54 24 30          	lea    edx,[esp+0x30]
c00195fb:	52                   	push   edx
c00195fc:	6a 00                	push   0x0
c00195fe:	68 00 04 00 00       	push   0x400
c0019603:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001960a:	ff d0                	call   eax
c001960c:	83 c4 20             	add    esp,0x20
c001960f:	83 ec 0c             	sub    esp,0xc
c0019612:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019619:	e8 6a 25 ff ff       	call   c000bb88 <File::close()>
c001961e:	83 c4 10             	add    esp,0x10
c0019621:	8d 76 00             	lea    esi,[esi+0x0]
c0019624:	83 ec 08             	sub    esp,0x8
c0019627:	6a 01                	push   0x1
c0019629:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019630:	e8 f5 24 ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c0019635:	83 c4 10             	add    esp,0x10
c0019638:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001963f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019641:	83 c0 0c             	add    eax,0xc
c0019644:	8b 00                	mov    eax,DWORD PTR [eax]
c0019646:	83 ec 0c             	sub    esp,0xc
c0019649:	8d 54 24 24          	lea    edx,[esp+0x24]
c001964d:	52                   	push   edx
c001964e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019652:	52                   	push   edx
c0019653:	6a 00                	push   0x0
c0019655:	6a 04                	push   0x4
c0019657:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001965e:	ff d0                	call   eax
c0019660:	83 c4 20             	add    esp,0x20
c0019663:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001966a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019670:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019677:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001967e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019681:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019688:	83 ec 0c             	sub    esp,0xc
c001968b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019692:	e8 f1 24 ff ff       	call   c000bb88 <File::close()>
c0019697:	83 c4 10             	add    esp,0x10
c001969a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00196a1:	ba 00 00 00 00       	mov    edx,0x0
c00196a6:	81 c4 3c 04 00 00    	add    esp,0x43c
c00196ac:	5b                   	pop    ebx
c00196ad:	5e                   	pop    esi
c00196ae:	5f                   	pop    edi
c00196af:	5d                   	pop    ebp
c00196b0:	c3                   	ret    
c00196b1:	90                   	nop
c00196b2:	66 90                	xchg   ax,ax

c00196b4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00196b4:	57                   	push   edi
c00196b5:	56                   	push   esi
c00196b6:	53                   	push   ebx
c00196b7:	81 ec 50 02 00 00    	sub    esp,0x250
c00196bd:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00196c5:	74 0d                	je     c00196d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00196c7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00196cf:	75 0f                	jne    c00196e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00196d1:	8d 76 00             	lea    esi,[esi+0x0]
c00196d4:	b8 04 00 00 00       	mov    eax,0x4
c00196d9:	e9 3a 01 00 00       	jmp    c0019818 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00196de:	66 90                	xchg   ax,ax
c00196e0:	83 ec 08             	sub    esp,0x8
c00196e3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00196ea:	50                   	push   eax
c00196eb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00196f2:	e8 ff af fe ff       	call   c00046f6 <f_readdir>
c00196f7:	83 c4 10             	add    esp,0x10
c00196fa:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019701:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019708:	83 ec 0c             	sub    esp,0xc
c001970b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019712:	83 c0 16             	add    eax,0x16
c0019715:	50                   	push   eax
c0019716:	e8 55 6e fe ff       	call   c0000570 <strlen>
c001971b:	83 c4 10             	add    esp,0x10
c001971e:	ba 00 00 00 00       	mov    edx,0x0
c0019723:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019727:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001972b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019732:	0f b6 c0             	movzx  eax,al
c0019735:	83 e0 10             	and    eax,0x10
c0019738:	74 0a                	je     c0019744 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001973a:	b8 02 00 00 00       	mov    eax,0x2
c001973f:	eb 0b                	jmp    c001974c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019741:	8d 76 00             	lea    esi,[esi+0x0]
c0019744:	b8 01 00 00 00       	mov    eax,0x1
c0019749:	8d 76 00             	lea    esi,[esi+0x0]
c001974c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019750:	83 ec 08             	sub    esp,0x8
c0019753:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001975a:	83 c0 16             	add    eax,0x16
c001975d:	50                   	push   eax
c001975e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019762:	83 c0 10             	add    eax,0x10
c0019765:	50                   	push   eax
c0019766:	e8 d5 6e fe ff       	call   c0000640 <strcpy>
c001976b:	83 c4 10             	add    esp,0x10
c001976e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019775:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001977c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019780:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019787:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001978e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019795:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001979c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00197a3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00197aa:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00197b1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00197b8:	89 c6                	mov    esi,eax
c00197ba:	89 d7                	mov    edi,edx
c00197bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197be:	89 c8                	mov    eax,ecx
c00197c0:	89 fa                	mov    edx,edi
c00197c2:	89 f3                	mov    ebx,esi
c00197c4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00197cb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00197d2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00197d9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00197e0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00197e6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00197ed:	0f be c0             	movsx  eax,al
c00197f0:	85 c0                	test   eax,eax
c00197f2:	75 08                	jne    c00197fc <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00197f4:	b8 07 00 00 00       	mov    eax,0x7
c00197f9:	eb 1d                	jmp    c0019818 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00197fb:	90                   	nop
c00197fc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019803:	85 c0                	test   eax,eax
c0019805:	75 09                	jne    c0019810 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019807:	b8 00 00 00 00       	mov    eax,0x0
c001980c:	eb 0a                	jmp    c0019818 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001980e:	66 90                	xchg   ax,ax
c0019810:	b8 01 00 00 00       	mov    eax,0x1
c0019815:	8d 76 00             	lea    esi,[esi+0x0]
c0019818:	81 c4 50 02 00 00    	add    esp,0x250
c001981e:	5b                   	pop    ebx
c001981f:	5e                   	pop    esi
c0019820:	5f                   	pop    edi
c0019821:	c3                   	ret    
c0019822:	66 90                	xchg   ax,ax

c0019824 <FAT::read(void*, unsigned long, void*, int*)>:
c0019824:	83 ec 1c             	sub    esp,0x1c
c0019827:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001982c:	74 0a                	je     c0019838 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001982e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019833:	75 0b                	jne    c0019840 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019835:	8d 76 00             	lea    esi,[esi+0x0]
c0019838:	b8 04 00 00 00       	mov    eax,0x4
c001983d:	eb 41                	jmp    c0019880 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001983f:	90                   	nop
c0019840:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019844:	50                   	push   eax
c0019845:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019849:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001984d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019851:	e8 c7 a6 fe ff       	call   c0003f1d <f_read>
c0019856:	83 c4 10             	add    esp,0x10
c0019859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001985d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019861:	89 c2                	mov    edx,eax
c0019863:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019867:	89 10                	mov    DWORD PTR [eax],edx
c0019869:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001986d:	85 c0                	test   eax,eax
c001986f:	75 07                	jne    c0019878 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019871:	b8 00 00 00 00       	mov    eax,0x0
c0019876:	eb 08                	jmp    c0019880 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019878:	b8 01 00 00 00       	mov    eax,0x1
c001987d:	8d 76 00             	lea    esi,[esi+0x0]
c0019880:	83 c4 1c             	add    esp,0x1c
c0019883:	c3                   	ret    

c0019884 <FAT::write(void*, unsigned long, void*, int*)>:
c0019884:	83 ec 1c             	sub    esp,0x1c
c0019887:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001988c:	74 0a                	je     c0019898 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001988e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019893:	75 0b                	jne    c00198a0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019895:	8d 76 00             	lea    esi,[esi+0x0]
c0019898:	b8 04 00 00 00       	mov    eax,0x4
c001989d:	eb 41                	jmp    c00198e0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001989f:	90                   	nop
c00198a0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198a4:	50                   	push   eax
c00198a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00198ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198b1:	e8 66 a8 fe ff       	call   c000411c <f_write>
c00198b6:	83 c4 10             	add    esp,0x10
c00198b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198c1:	89 c2                	mov    edx,eax
c00198c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198c7:	89 10                	mov    DWORD PTR [eax],edx
c00198c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198cd:	85 c0                	test   eax,eax
c00198cf:	75 07                	jne    c00198d8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00198d1:	b8 00 00 00 00       	mov    eax,0x0
c00198d6:	eb 08                	jmp    c00198e0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00198d8:	b8 01 00 00 00       	mov    eax,0x1
c00198dd:	8d 76 00             	lea    esi,[esi+0x0]
c00198e0:	83 c4 1c             	add    esp,0x1c
c00198e3:	c3                   	ret    

c00198e4 <FAT::close(void*)>:
c00198e4:	83 ec 1c             	sub    esp,0x1c
c00198e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198ec:	75 0a                	jne    c00198f8 <FAT::close(void*)+0x14>
c00198ee:	b8 04 00 00 00       	mov    eax,0x4
c00198f3:	eb 3f                	jmp    c0019934 <FAT::close(void*)+0x50>
c00198f5:	8d 76 00             	lea    esi,[esi+0x0]
c00198f8:	83 ec 0c             	sub    esp,0xc
c00198fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198ff:	e8 25 ab fe ff       	call   c0004429 <f_close>
c0019904:	83 c4 10             	add    esp,0x10
c0019907:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001990b:	83 ec 0c             	sub    esp,0xc
c001990e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019912:	e8 af e1 fe ff       	call   c0007ac6 <free>
c0019917:	83 c4 10             	add    esp,0x10
c001991a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001991e:	85 c0                	test   eax,eax
c0019920:	75 0a                	jne    c001992c <FAT::close(void*)+0x48>
c0019922:	b8 00 00 00 00       	mov    eax,0x0
c0019927:	eb 0b                	jmp    c0019934 <FAT::close(void*)+0x50>
c0019929:	8d 76 00             	lea    esi,[esi+0x0]
c001992c:	b8 01 00 00 00       	mov    eax,0x1
c0019931:	8d 76 00             	lea    esi,[esi+0x0]
c0019934:	83 c4 1c             	add    esp,0x1c
c0019937:	c3                   	ret    

c0019938 <FAT::closeDir(void*)>:
c0019938:	83 ec 1c             	sub    esp,0x1c
c001993b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019940:	75 0a                	jne    c001994c <FAT::closeDir(void*)+0x14>
c0019942:	b8 04 00 00 00       	mov    eax,0x4
c0019947:	eb 3f                	jmp    c0019988 <FAT::closeDir(void*)+0x50>
c0019949:	8d 76 00             	lea    esi,[esi+0x0]
c001994c:	83 ec 0c             	sub    esp,0xc
c001994f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019953:	e8 7c ad fe ff       	call   c00046d4 <f_closedir>
c0019958:	83 c4 10             	add    esp,0x10
c001995b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001995f:	83 ec 0c             	sub    esp,0xc
c0019962:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019966:	e8 5b e1 fe ff       	call   c0007ac6 <free>
c001996b:	83 c4 10             	add    esp,0x10
c001996e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019972:	85 c0                	test   eax,eax
c0019974:	75 0a                	jne    c0019980 <FAT::closeDir(void*)+0x48>
c0019976:	b8 00 00 00 00       	mov    eax,0x0
c001997b:	eb 0b                	jmp    c0019988 <FAT::closeDir(void*)+0x50>
c001997d:	8d 76 00             	lea    esi,[esi+0x0]
c0019980:	b8 01 00 00 00       	mov    eax,0x1
c0019985:	8d 76 00             	lea    esi,[esi+0x0]
c0019988:	83 c4 1c             	add    esp,0x1c
c001998b:	c3                   	ret    

c001998c <FAT::truncate(void*, unsigned long long)>:
c001998c:	83 ec 2c             	sub    esp,0x2c
c001998f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019993:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019997:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001999b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001999f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00199a4:	75 0a                	jne    c00199b0 <FAT::truncate(void*, unsigned long long)+0x24>
c00199a6:	b8 04 00 00 00       	mov    eax,0x4
c00199ab:	eb 47                	jmp    c00199f4 <FAT::truncate(void*, unsigned long long)+0x68>
c00199ad:	8d 76 00             	lea    esi,[esi+0x0]
c00199b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00199b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00199b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00199bb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00199c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199c7:	83 ec 08             	sub    esp,0x8
c00199ca:	50                   	push   eax
c00199cb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00199cf:	e8 84 aa fe ff       	call   c0004458 <f_lseek>
c00199d4:	83 c4 10             	add    esp,0x10
c00199d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00199db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199df:	85 c0                	test   eax,eax
c00199e1:	75 09                	jne    c00199ec <FAT::truncate(void*, unsigned long long)+0x60>
c00199e3:	b8 00 00 00 00       	mov    eax,0x0
c00199e8:	eb 0a                	jmp    c00199f4 <FAT::truncate(void*, unsigned long long)+0x68>
c00199ea:	66 90                	xchg   ax,ax
c00199ec:	b8 01 00 00 00       	mov    eax,0x1
c00199f1:	8d 76 00             	lea    esi,[esi+0x0]
c00199f4:	83 c4 2c             	add    esp,0x2c
c00199f7:	c3                   	ret    

c00199f8 <FAT::seek(void*, unsigned long long)>:
c00199f8:	83 ec 2c             	sub    esp,0x2c
c00199fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a0b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a10:	75 0a                	jne    c0019a1c <FAT::seek(void*, unsigned long long)+0x24>
c0019a12:	b8 04 00 00 00       	mov    eax,0x4
c0019a17:	eb 33                	jmp    c0019a4c <FAT::seek(void*, unsigned long long)+0x54>
c0019a19:	8d 76 00             	lea    esi,[esi+0x0]
c0019a1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a20:	83 ec 08             	sub    esp,0x8
c0019a23:	50                   	push   eax
c0019a24:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a28:	e8 2b aa fe ff       	call   c0004458 <f_lseek>
c0019a2d:	83 c4 10             	add    esp,0x10
c0019a30:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a38:	85 c0                	test   eax,eax
c0019a3a:	75 08                	jne    c0019a44 <FAT::seek(void*, unsigned long long)+0x4c>
c0019a3c:	b8 00 00 00 00       	mov    eax,0x0
c0019a41:	eb 09                	jmp    c0019a4c <FAT::seek(void*, unsigned long long)+0x54>
c0019a43:	90                   	nop
c0019a44:	b8 01 00 00 00       	mov    eax,0x1
c0019a49:	8d 76 00             	lea    esi,[esi+0x0]
c0019a4c:	83 c4 2c             	add    esp,0x2c
c0019a4f:	c3                   	ret    

c0019a50 <fatWrapperReadDisk>:
c0019a50:	53                   	push   ebx
c0019a51:	83 ec 18             	sub    esp,0x18
c0019a54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a58:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a5c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a61:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019a68:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a70:	ba 00 00 00 00       	mov    edx,0x0
c0019a75:	83 ec 0c             	sub    esp,0xc
c0019a78:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a7c:	53                   	push   ebx
c0019a7d:	52                   	push   edx
c0019a7e:	50                   	push   eax
c0019a7f:	51                   	push   ecx
c0019a80:	e8 e3 42 ff ff       	call   c000dd68 <LogicalDisk::read(unsigned long long, int, void*)>
c0019a85:	83 c4 20             	add    esp,0x20
c0019a88:	83 c4 18             	add    esp,0x18
c0019a8b:	5b                   	pop    ebx
c0019a8c:	c3                   	ret    
c0019a8d:	8d 76 00             	lea    esi,[esi+0x0]

c0019a90 <fatWrapperWriteDisk>:
c0019a90:	53                   	push   ebx
c0019a91:	83 ec 18             	sub    esp,0x18
c0019a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a98:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a9c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019aa1:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019aa8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019aac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ab0:	ba 00 00 00 00       	mov    edx,0x0
c0019ab5:	83 ec 0c             	sub    esp,0xc
c0019ab8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019abc:	53                   	push   ebx
c0019abd:	52                   	push   edx
c0019abe:	50                   	push   eax
c0019abf:	51                   	push   ecx
c0019ac0:	e8 0f 43 ff ff       	call   c000ddd4 <LogicalDisk::write(unsigned long long, int, void*)>
c0019ac5:	83 c4 20             	add    esp,0x20
c0019ac8:	83 c4 18             	add    esp,0x18
c0019acb:	5b                   	pop    ebx
c0019acc:	c3                   	ret    
c0019acd:	8d 76 00             	lea    esi,[esi+0x0]

c0019ad0 <fatWrapperIoctl>:
c0019ad0:	53                   	push   ebx
c0019ad1:	83 ec 28             	sub    esp,0x28
c0019ad4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019ad8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019adc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019ae0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019ae4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ae9:	83 f8 02             	cmp    eax,0x2
c0019aec:	75 32                	jne    c0019b20 <fatWrapperIoctl+0x50>
c0019aee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019af2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019af6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019afb:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b02:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b08:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b12:	66 89 02             	mov    WORD PTR [edx],ax
c0019b15:	b8 00 00 00 00       	mov    eax,0x0
c0019b1a:	e9 c5 00 00 00       	jmp    c0019be4 <fatWrapperIoctl+0x114>
c0019b1f:	90                   	nop
c0019b20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b25:	83 f8 01             	cmp    eax,0x1
c0019b28:	75 6a                	jne    c0019b94 <fatWrapperIoctl+0xc4>
c0019b2a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b32:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b37:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b3e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b44:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019b4a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019b50:	89 c8                	mov    eax,ecx
c0019b52:	89 da                	mov    edx,ebx
c0019b54:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019b58:	c1 e0 0a             	shl    eax,0xa
c0019b5b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019b60:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019b67:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019b6d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019b73:	89 cb                	mov    ebx,ecx
c0019b75:	c1 fb 1f             	sar    ebx,0x1f
c0019b78:	53                   	push   ebx
c0019b79:	51                   	push   ecx
c0019b7a:	52                   	push   edx
c0019b7b:	50                   	push   eax
c0019b7c:	e8 6f 5b 00 00       	call   c001f6f0 <__udivdi3>
c0019b81:	83 c4 10             	add    esp,0x10
c0019b84:	89 c2                	mov    edx,eax
c0019b86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b8a:	89 10                	mov    DWORD PTR [eax],edx
c0019b8c:	b8 00 00 00 00       	mov    eax,0x0
c0019b91:	eb 51                	jmp    c0019be4 <fatWrapperIoctl+0x114>
c0019b93:	90                   	nop
c0019b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b99:	85 c0                	test   eax,eax
c0019b9b:	75 07                	jne    c0019ba4 <fatWrapperIoctl+0xd4>
c0019b9d:	b8 00 00 00 00       	mov    eax,0x0
c0019ba2:	eb 40                	jmp    c0019be4 <fatWrapperIoctl+0x114>
c0019ba4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ba9:	83 f8 03             	cmp    eax,0x3
c0019bac:	75 1a                	jne    c0019bc8 <fatWrapperIoctl+0xf8>
c0019bae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bb2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019bb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bba:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019bc0:	b8 00 00 00 00       	mov    eax,0x0
c0019bc5:	eb 1d                	jmp    c0019be4 <fatWrapperIoctl+0x114>
c0019bc7:	90                   	nop
c0019bc8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bcd:	83 f8 04             	cmp    eax,0x4
c0019bd0:	75 0a                	jne    c0019bdc <fatWrapperIoctl+0x10c>
c0019bd2:	b8 00 00 00 00       	mov    eax,0x0
c0019bd7:	eb 0b                	jmp    c0019be4 <fatWrapperIoctl+0x114>
c0019bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0019bdc:	b8 04 00 00 00       	mov    eax,0x4
c0019be1:	8d 76 00             	lea    esi,[esi+0x0]
c0019be4:	83 c4 28             	add    esp,0x28
c0019be7:	5b                   	pop    ebx
c0019be8:	c3                   	ret    
c0019be9:	90                   	nop
c0019bea:	66 90                	xchg   ax,ax

c0019bec <FAT::FAT()>:
c0019bec:	83 ec 1c             	sub    esp,0x1c
c0019bef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bf3:	83 ec 0c             	sub    esp,0xc
c0019bf6:	50                   	push   eax
c0019bf7:	e8 6e 1b ff ff       	call   c000b76a <Filesystem::Filesystem()>
c0019bfc:	83 c4 10             	add    esp,0x10
c0019bff:	ba ac 2d 02 c0       	mov    edx,0xc0022dac
c0019c04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c08:	89 10                	mov    DWORD PTR [eax],edx
c0019c0a:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019c14:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c1c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019c21:	7f 19                	jg     c0019c3c <FAT::FAT()+0x50>
c0019c23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c27:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019c32:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019c37:	eb e3                	jmp    c0019c1c <FAT::FAT()+0x30>
c0019c39:	8d 76 00             	lea    esi,[esi+0x0]
c0019c3c:	90                   	nop
c0019c3d:	83 c4 1c             	add    esp,0x1c
c0019c40:	c3                   	ret    
c0019c41:	90                   	nop
c0019c42:	66 90                	xchg   ax,ax

c0019c44 <FAT::fixFilepath(char*)>:
c0019c44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c48:	8a 00                	mov    al,BYTE PTR [eax]
c0019c4a:	0f be c0             	movsx  eax,al
c0019c4d:	83 f8 40             	cmp    eax,0x40
c0019c50:	7e 2e                	jle    c0019c80 <FAT::fixFilepath(char*)+0x3c>
c0019c52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c56:	8a 00                	mov    al,BYTE PTR [eax]
c0019c58:	83 e8 41             	sub    eax,0x41
c0019c5b:	88 c2                	mov    dl,al
c0019c5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c61:	88 10                	mov    BYTE PTR [eax],dl
c0019c63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c67:	8a 00                	mov    al,BYTE PTR [eax]
c0019c69:	0f be c0             	movsx  eax,al
c0019c6c:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019c73:	83 c0 30             	add    eax,0x30
c0019c76:	88 c2                	mov    dl,al
c0019c78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c7c:	88 10                	mov    BYTE PTR [eax],dl
c0019c7e:	66 90                	xchg   ax,ax
c0019c80:	90                   	nop
c0019c81:	c3                   	ret    
c0019c82:	66 90                	xchg   ax,ax

c0019c84 <FAT::open(char const*, void**, FileOpenMode)>:
c0019c84:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c8a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c92:	74 0c                	je     c0019ca0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019c94:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019c9c:	75 0e                	jne    c0019cac <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019c9e:	66 90                	xchg   ax,ax
c0019ca0:	b8 04 00 00 00       	mov    eax,0x4
c0019ca5:	e9 46 01 00 00       	jmp    c0019df0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019caa:	66 90                	xchg   ax,ax
c0019cac:	83 ec 08             	sub    esp,0x8
c0019caf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cb6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cba:	50                   	push   eax
c0019cbb:	e8 80 69 fe ff       	call   c0000640 <strcpy>
c0019cc0:	83 c4 10             	add    esp,0x10
c0019cc3:	83 ec 08             	sub    esp,0x8
c0019cc6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019cca:	50                   	push   eax
c0019ccb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cd2:	e8 6d ff ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c0019cd7:	83 c4 10             	add    esp,0x10
c0019cda:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019ce2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ce9:	83 e0 01             	and    eax,0x1
c0019cec:	74 12                	je     c0019d00 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019cee:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019cf5:	83 c8 01             	or     eax,0x1
c0019cf8:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cff:	90                   	nop
c0019d00:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d07:	83 e0 04             	and    eax,0x4
c0019d0a:	74 24                	je     c0019d30 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019d0c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d13:	83 c8 30             	or     eax,0x30
c0019d16:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d1d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d24:	83 c8 02             	or     eax,0x2
c0019d27:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d2e:	66 90                	xchg   ax,ax
c0019d30:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d37:	83 e0 02             	and    eax,0x2
c0019d3a:	74 14                	je     c0019d50 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019d3c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d43:	83 c8 02             	or     eax,0x2
c0019d46:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d50:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d57:	83 e0 08             	and    eax,0x8
c0019d5a:	74 14                	je     c0019d70 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019d5c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d63:	83 c8 04             	or     eax,0x4
c0019d66:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d70:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d77:	83 e0 10             	and    eax,0x10
c0019d7a:	74 14                	je     c0019d90 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019d7c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d83:	83 c8 08             	or     eax,0x8
c0019d86:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d90:	83 ec 0c             	sub    esp,0xc
c0019d93:	68 28 02 00 00       	push   0x228
c0019d98:	e8 19 dd fe ff       	call   c0007ab6 <malloc>
c0019d9d:	83 c4 10             	add    esp,0x10
c0019da0:	89 c2                	mov    edx,eax
c0019da2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019da9:	89 10                	mov    DWORD PTR [eax],edx
c0019dab:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019db3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019dba:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dbc:	83 ec 04             	sub    esp,0x4
c0019dbf:	52                   	push   edx
c0019dc0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019dc4:	52                   	push   edx
c0019dc5:	50                   	push   eax
c0019dc6:	e8 8f 9e fe ff       	call   c0003c5a <f_open>
c0019dcb:	83 c4 10             	add    esp,0x10
c0019dce:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019dd5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019ddd:	74 09                	je     c0019de8 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019ddf:	b8 01 00 00 00       	mov    eax,0x1
c0019de4:	eb 0a                	jmp    c0019df0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019de6:	66 90                	xchg   ax,ax
c0019de8:	b8 00 00 00 00       	mov    eax,0x0
c0019ded:	8d 76 00             	lea    esi,[esi+0x0]
c0019df0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019df6:	c3                   	ret    
c0019df7:	90                   	nop

c0019df8 <FAT::openDir(char const*, void**)>:
c0019df8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019dfe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e06:	74 0c                	je     c0019e14 <FAT::openDir(char const*, void**)+0x1c>
c0019e08:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019e10:	75 0e                	jne    c0019e20 <FAT::openDir(char const*, void**)+0x28>
c0019e12:	66 90                	xchg   ax,ax
c0019e14:	b8 04 00 00 00       	mov    eax,0x4
c0019e19:	e9 82 00 00 00       	jmp    c0019ea0 <FAT::openDir(char const*, void**)+0xa8>
c0019e1e:	66 90                	xchg   ax,ax
c0019e20:	83 ec 08             	sub    esp,0x8
c0019e23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e2e:	50                   	push   eax
c0019e2f:	e8 0c 68 fe ff       	call   c0000640 <strcpy>
c0019e34:	83 c4 10             	add    esp,0x10
c0019e37:	83 ec 08             	sub    esp,0x8
c0019e3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e3e:	50                   	push   eax
c0019e3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e46:	e8 f9 fd ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c0019e4b:	83 c4 10             	add    esp,0x10
c0019e4e:	83 ec 0c             	sub    esp,0xc
c0019e51:	6a 30                	push   0x30
c0019e53:	e8 5e dc fe ff       	call   c0007ab6 <malloc>
c0019e58:	83 c4 10             	add    esp,0x10
c0019e5b:	89 c2                	mov    edx,eax
c0019e5d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e64:	89 10                	mov    DWORD PTR [eax],edx
c0019e66:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e6f:	83 ec 08             	sub    esp,0x8
c0019e72:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019e76:	52                   	push   edx
c0019e77:	50                   	push   eax
c0019e78:	e8 8c a7 fe ff       	call   c0004609 <f_opendir>
c0019e7d:	83 c4 10             	add    esp,0x10
c0019e80:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e87:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019e8f:	74 07                	je     c0019e98 <FAT::openDir(char const*, void**)+0xa0>
c0019e91:	b8 01 00 00 00       	mov    eax,0x1
c0019e96:	eb 08                	jmp    c0019ea0 <FAT::openDir(char const*, void**)+0xa8>
c0019e98:	b8 00 00 00 00       	mov    eax,0x0
c0019e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019ea0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ea6:	c3                   	ret    
c0019ea7:	90                   	nop

c0019ea8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019ea8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019eae:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019eb6:	75 0c                	jne    c0019ec4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019eb8:	b8 04 00 00 00       	mov    eax,0x4
c0019ebd:	e9 d6 00 00 00       	jmp    c0019f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ec2:	66 90                	xchg   ax,ax
c0019ec4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019ecc:	75 0a                	jne    c0019ed8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019ece:	b8 04 00 00 00       	mov    eax,0x4
c0019ed3:	e9 c0 00 00 00       	jmp    c0019f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ed8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019ee0:	75 0a                	jne    c0019eec <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019ee2:	b8 04 00 00 00       	mov    eax,0x4
c0019ee7:	e9 ac 00 00 00       	jmp    c0019f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019eec:	83 ec 08             	sub    esp,0x8
c0019eef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ef6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019efd:	50                   	push   eax
c0019efe:	e8 3d 67 fe ff       	call   c0000640 <strcpy>
c0019f03:	83 c4 10             	add    esp,0x10
c0019f06:	83 ec 08             	sub    esp,0x8
c0019f09:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f10:	50                   	push   eax
c0019f11:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f18:	e8 27 fd ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c0019f1d:	83 c4 10             	add    esp,0x10
c0019f20:	83 ec 08             	sub    esp,0x8
c0019f23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f27:	50                   	push   eax
c0019f28:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f2f:	50                   	push   eax
c0019f30:	e8 53 a8 fe ff       	call   c0004788 <f_stat>
c0019f35:	83 c4 10             	add    esp,0x10
c0019f38:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f3f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f46:	85 c0                	test   eax,eax
c0019f48:	74 0a                	je     c0019f54 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019f4a:	83 f8 04             	cmp    eax,0x4
c0019f4d:	74 39                	je     c0019f88 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019f4f:	eb 3f                	jmp    c0019f90 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019f51:	8d 76 00             	lea    esi,[esi+0x0]
c0019f54:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f58:	0f b6 c0             	movzx  eax,al
c0019f5b:	83 e0 10             	and    eax,0x10
c0019f5e:	0f 95 c2             	setne  dl
c0019f61:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019f68:	88 10                	mov    BYTE PTR [eax],dl
c0019f6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f6e:	ba 00 00 00 00       	mov    edx,0x0
c0019f73:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019f7a:	89 01                	mov    DWORD PTR [ecx],eax
c0019f7c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f7f:	b8 00 00 00 00       	mov    eax,0x0
c0019f84:	eb 12                	jmp    c0019f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f86:	66 90                	xchg   ax,ax
c0019f88:	b8 02 00 00 00       	mov    eax,0x2
c0019f8d:	eb 09                	jmp    c0019f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f8f:	90                   	nop
c0019f90:	b8 01 00 00 00       	mov    eax,0x1
c0019f95:	8d 76 00             	lea    esi,[esi+0x0]
c0019f98:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019f9e:	c3                   	ret    
c0019f9f:	90                   	nop

c0019fa0 <FAT::unlink(char const*)>:
c0019fa0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019fa6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019fae:	75 08                	jne    c0019fb8 <FAT::unlink(char const*)+0x18>
c0019fb0:	b8 04 00 00 00       	mov    eax,0x4
c0019fb5:	eb 61                	jmp    c001a018 <FAT::unlink(char const*)+0x78>
c0019fb7:	90                   	nop
c0019fb8:	83 ec 08             	sub    esp,0x8
c0019fbb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fc2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fc6:	50                   	push   eax
c0019fc7:	e8 74 66 fe ff       	call   c0000640 <strcpy>
c0019fcc:	83 c4 10             	add    esp,0x10
c0019fcf:	83 ec 08             	sub    esp,0x8
c0019fd2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fd6:	50                   	push   eax
c0019fd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fde:	e8 61 fc ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c0019fe3:	83 c4 10             	add    esp,0x10
c0019fe6:	83 ec 0c             	sub    esp,0xc
c0019fe9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fed:	50                   	push   eax
c0019fee:	e8 07 aa fe ff       	call   c00049fa <f_unlink>
c0019ff3:	83 c4 10             	add    esp,0x10
c0019ff6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019ffd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a004:	85 c0                	test   eax,eax
c001a006:	75 08                	jne    c001a010 <FAT::unlink(char const*)+0x70>
c001a008:	b8 00 00 00 00       	mov    eax,0x0
c001a00d:	eb 09                	jmp    c001a018 <FAT::unlink(char const*)+0x78>
c001a00f:	90                   	nop
c001a010:	b8 01 00 00 00       	mov    eax,0x1
c001a015:	8d 76 00             	lea    esi,[esi+0x0]
c001a018:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a01e:	c3                   	ret    
c001a01f:	90                   	nop

c001a020 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a020:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a026:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a02d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a034:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a038:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a03c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a044:	75 0a                	jne    c001a050 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a046:	b8 04 00 00 00       	mov    eax,0x4
c001a04b:	e9 7c 01 00 00       	jmp    c001a1cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a050:	83 ec 08             	sub    esp,0x8
c001a053:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a05a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a05e:	50                   	push   eax
c001a05f:	e8 dc 65 fe ff       	call   c0000640 <strcpy>
c001a064:	83 c4 10             	add    esp,0x10
c001a067:	83 ec 08             	sub    esp,0x8
c001a06a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a06e:	50                   	push   eax
c001a06f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a076:	e8 c9 fb ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c001a07b:	83 c4 10             	add    esp,0x10
c001a07e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a086:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a08e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a093:	83 e0 01             	and    eax,0x1
c001a096:	74 14                	je     c001a0ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a098:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a09f:	83 c8 01             	or     eax,0x1
c001a0a2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0b1:	83 e0 02             	and    eax,0x2
c001a0b4:	74 12                	je     c001a0c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a0b6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0bd:	83 c8 20             	or     eax,0x20
c001a0c0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0c7:	90                   	nop
c001a0c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0cd:	83 e0 04             	and    eax,0x4
c001a0d0:	74 12                	je     c001a0e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a0d2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0d9:	83 c8 04             	or     eax,0x4
c001a0dc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0e3:	90                   	nop
c001a0e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0e9:	83 e0 08             	and    eax,0x8
c001a0ec:	74 12                	je     c001a100 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a0ee:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0f5:	83 c8 02             	or     eax,0x2
c001a0f8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0ff:	90                   	nop
c001a100:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a105:	83 e0 01             	and    eax,0x1
c001a108:	74 12                	je     c001a11c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a10a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a111:	83 c8 01             	or     eax,0x1
c001a114:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a11b:	90                   	nop
c001a11c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a121:	83 e0 02             	and    eax,0x2
c001a124:	74 12                	je     c001a138 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a126:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a12d:	83 c8 20             	or     eax,0x20
c001a130:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a137:	90                   	nop
c001a138:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a13d:	83 e0 04             	and    eax,0x4
c001a140:	74 12                	je     c001a154 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a142:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a149:	83 c8 04             	or     eax,0x4
c001a14c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a153:	90                   	nop
c001a154:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a159:	83 e0 08             	and    eax,0x8
c001a15c:	74 12                	je     c001a170 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a15e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a165:	83 c8 02             	or     eax,0x2
c001a168:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a16f:	90                   	nop
c001a170:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a177:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a17e:	09 d0                	or     eax,edx
c001a180:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a187:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a18f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a197:	83 ec 04             	sub    esp,0x4
c001a19a:	52                   	push   edx
c001a19b:	50                   	push   eax
c001a19c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1a0:	50                   	push   eax
c001a1a1:	e8 c9 ac fe ff       	call   c0004e6f <f_chmod>
c001a1a6:	83 c4 10             	add    esp,0x10
c001a1a9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a1b0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a1b7:	85 c0                	test   eax,eax
c001a1b9:	75 09                	jne    c001a1c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a1bb:	b8 00 00 00 00       	mov    eax,0x0
c001a1c0:	eb 0a                	jmp    c001a1cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a1c2:	66 90                	xchg   ax,ax
c001a1c4:	b8 01 00 00 00       	mov    eax,0x1
c001a1c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1cc:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a1d2:	c3                   	ret    
c001a1d3:	90                   	nop

c001a1d4 <FAT::rename(char const*, char const*)>:
c001a1d4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a1da:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a1e2:	74 0c                	je     c001a1f0 <FAT::rename(char const*, char const*)+0x1c>
c001a1e4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a1ec:	75 0e                	jne    c001a1fc <FAT::rename(char const*, char const*)+0x28>
c001a1ee:	66 90                	xchg   ax,ax
c001a1f0:	b8 04 00 00 00       	mov    eax,0x4
c001a1f5:	e9 9e 00 00 00       	jmp    c001a298 <FAT::rename(char const*, char const*)+0xc4>
c001a1fa:	66 90                	xchg   ax,ax
c001a1fc:	83 ec 08             	sub    esp,0x8
c001a1ff:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a206:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a20d:	50                   	push   eax
c001a20e:	e8 2d 64 fe ff       	call   c0000640 <strcpy>
c001a213:	83 c4 10             	add    esp,0x10
c001a216:	83 ec 08             	sub    esp,0x8
c001a219:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a220:	50                   	push   eax
c001a221:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a228:	e8 17 fa ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c001a22d:	83 c4 10             	add    esp,0x10
c001a230:	83 ec 08             	sub    esp,0x8
c001a233:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a23a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a23e:	50                   	push   eax
c001a23f:	e8 fc 63 fe ff       	call   c0000640 <strcpy>
c001a244:	83 c4 10             	add    esp,0x10
c001a247:	83 ec 08             	sub    esp,0x8
c001a24a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a24e:	50                   	push   eax
c001a24f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a256:	e8 e9 f9 ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c001a25b:	83 c4 10             	add    esp,0x10
c001a25e:	83 ec 08             	sub    esp,0x8
c001a261:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a265:	50                   	push   eax
c001a266:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a26d:	50                   	push   eax
c001a26e:	e8 44 aa fe ff       	call   c0004cb7 <f_rename>
c001a273:	83 c4 10             	add    esp,0x10
c001a276:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a27d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a284:	85 c0                	test   eax,eax
c001a286:	75 08                	jne    c001a290 <FAT::rename(char const*, char const*)+0xbc>
c001a288:	b8 00 00 00 00       	mov    eax,0x0
c001a28d:	eb 09                	jmp    c001a298 <FAT::rename(char const*, char const*)+0xc4>
c001a28f:	90                   	nop
c001a290:	b8 01 00 00 00       	mov    eax,0x1
c001a295:	8d 76 00             	lea    esi,[esi+0x0]
c001a298:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a29e:	c3                   	ret    
c001a29f:	90                   	nop

c001a2a0 <FAT::mkdir(char const*)>:
c001a2a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a2a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a2ae:	75 08                	jne    c001a2b8 <FAT::mkdir(char const*)+0x18>
c001a2b0:	b8 04 00 00 00       	mov    eax,0x4
c001a2b5:	eb 61                	jmp    c001a318 <FAT::mkdir(char const*)+0x78>
c001a2b7:	90                   	nop
c001a2b8:	83 ec 08             	sub    esp,0x8
c001a2bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2c6:	50                   	push   eax
c001a2c7:	e8 74 63 fe ff       	call   c0000640 <strcpy>
c001a2cc:	83 c4 10             	add    esp,0x10
c001a2cf:	83 ec 08             	sub    esp,0x8
c001a2d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2d6:	50                   	push   eax
c001a2d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2de:	e8 61 f9 ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c001a2e3:	83 c4 10             	add    esp,0x10
c001a2e6:	83 ec 0c             	sub    esp,0xc
c001a2e9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2ed:	50                   	push   eax
c001a2ee:	e8 29 a8 fe ff       	call   c0004b1c <f_mkdir>
c001a2f3:	83 c4 10             	add    esp,0x10
c001a2f6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a2fd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a304:	85 c0                	test   eax,eax
c001a306:	75 08                	jne    c001a310 <FAT::mkdir(char const*)+0x70>
c001a308:	b8 00 00 00 00       	mov    eax,0x0
c001a30d:	eb 09                	jmp    c001a318 <FAT::mkdir(char const*)+0x78>
c001a30f:	90                   	nop
c001a310:	b8 01 00 00 00       	mov    eax,0x1
c001a315:	8d 76 00             	lea    esi,[esi+0x0]
c001a318:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a31e:	c3                   	ret    
c001a31f:	90                   	nop

c001a320 <FAT::exists(char const*)>:
c001a320:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a326:	83 ec 08             	sub    esp,0x8
c001a329:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a330:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a334:	50                   	push   eax
c001a335:	e8 06 63 fe ff       	call   c0000640 <strcpy>
c001a33a:	83 c4 10             	add    esp,0x10
c001a33d:	83 ec 08             	sub    esp,0x8
c001a340:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a344:	50                   	push   eax
c001a345:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a34c:	e8 f3 f8 ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c001a351:	83 c4 10             	add    esp,0x10
c001a354:	83 ec 08             	sub    esp,0x8
c001a357:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a35e:	50                   	push   eax
c001a35f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a363:	50                   	push   eax
c001a364:	e8 1f a4 fe ff       	call   c0004788 <f_stat>
c001a369:	83 c4 10             	add    esp,0x10
c001a36c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a373:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a37a:	85 c0                	test   eax,eax
c001a37c:	75 06                	jne    c001a384 <FAT::exists(char const*)+0x64>
c001a37e:	b0 01                	mov    al,0x1
c001a380:	eb 06                	jmp    c001a388 <FAT::exists(char const*)+0x68>
c001a382:	66 90                	xchg   ax,ax
c001a384:	b0 00                	mov    al,0x0
c001a386:	66 90                	xchg   ax,ax
c001a388:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a38e:	c3                   	ret    
c001a38f:	90                   	nop

c001a390 <isoReadDiscSectorHelper>:
c001a390:	83 ec 2c             	sub    esp,0x2c
c001a393:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a397:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a39b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a3a0:	83 e8 41             	sub    eax,0x41
c001a3a3:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a3aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a3ae:	ba 00 00 00 00       	mov    edx,0x0
c001a3b3:	83 ec 0c             	sub    esp,0xc
c001a3b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a3ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a3be:	52                   	push   edx
c001a3bf:	50                   	push   eax
c001a3c0:	51                   	push   ecx
c001a3c1:	e8 a2 39 ff ff       	call   c000dd68 <LogicalDisk::read(unsigned long long, int, void*)>
c001a3c6:	83 c4 20             	add    esp,0x20
c001a3c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3cd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a3d2:	74 0c                	je     c001a3e0 <isoReadDiscSectorHelper+0x50>
c001a3d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3d8:	c1 e0 0b             	shl    eax,0xb
c001a3db:	eb 0b                	jmp    c001a3e8 <isoReadDiscSectorHelper+0x58>
c001a3dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e0:	b8 00 00 00 00       	mov    eax,0x0
c001a3e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e8:	83 c4 2c             	add    esp,0x2c
c001a3eb:	c3                   	ret    

c001a3ec <iso_kprintf>:
c001a3ec:	83 ec 0c             	sub    esp,0xc
c001a3ef:	83 ec 08             	sub    esp,0x8
c001a3f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3f6:	68 5a 2b 02 c0       	push   0xc0022b5a
c001a3fb:	e8 45 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a400:	83 c4 10             	add    esp,0x10
c001a403:	90                   	nop
c001a404:	83 c4 0c             	add    esp,0xc
c001a407:	c3                   	ret    

c001a408 <iso_kprintfd>:
c001a408:	83 ec 0c             	sub    esp,0xc
c001a40b:	83 ec 08             	sub    esp,0x8
c001a40e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a412:	68 ba 12 02 c0       	push   0xc00212ba
c001a417:	e8 29 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a41c:	83 c4 10             	add    esp,0x10
c001a41f:	90                   	nop
c001a420:	83 c4 0c             	add    esp,0xc
c001a423:	c3                   	ret    

c001a424 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a424:	b8 08 00 00 00       	mov    eax,0x8
c001a429:	c3                   	ret    

c001a42a <ISO9660::truncate(void*, unsigned long long)>:
c001a42a:	b8 01 00 00 00       	mov    eax,0x1
c001a42f:	c3                   	ret    

c001a430 <ISO9660::getName()>:
c001a430:	b8 10 2e 02 c0       	mov    eax,0xc0022e10
c001a435:	c3                   	ret    

c001a436 <ISO9660::closeDir(void*)>:
c001a436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a43a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a43c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a43f:	90                   	nop

c001a440 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a440:	b8 01 00 00 00       	mov    eax,0x1
c001a445:	c3                   	ret    

c001a446 <ISO9660::unlink(char const*)>:
c001a446:	b8 01 00 00 00       	mov    eax,0x1
c001a44b:	c3                   	ret    

c001a44c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a44c:	b8 03 00 00 00       	mov    eax,0x3
c001a451:	c3                   	ret    

c001a452 <ISO9660::rename(char const*, char const*)>:
c001a452:	b8 01 00 00 00       	mov    eax,0x1
c001a457:	c3                   	ret    

c001a458 <ISO9660::mkdir(char const*)>:
c001a458:	b8 01 00 00 00       	mov    eax,0x1
c001a45d:	c3                   	ret    

c001a45e <ISO9660::~ISO9660()>:
c001a45e:	83 ec 0c             	sub    esp,0xc
c001a461:	ba 50 2f 02 c0       	mov    edx,0xc0022f50
c001a466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a46a:	89 10                	mov    DWORD PTR [eax],edx
c001a46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a470:	83 ec 0c             	sub    esp,0xc
c001a473:	50                   	push   eax
c001a474:	e8 15 13 ff ff       	call   c000b78e <Filesystem::~Filesystem()>
c001a479:	83 c4 10             	add    esp,0x10
c001a47c:	90                   	nop
c001a47d:	83 c4 0c             	add    esp,0xc
c001a480:	c3                   	ret    
c001a481:	90                   	nop

c001a482 <ISO9660::~ISO9660()>:
c001a482:	83 ec 0c             	sub    esp,0xc
c001a485:	83 ec 0c             	sub    esp,0xc
c001a488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a48c:	e8 cd ff ff ff       	call   c001a45e <ISO9660::~ISO9660()>
c001a491:	83 c4 10             	add    esp,0x10
c001a494:	83 ec 08             	sub    esp,0x8
c001a497:	6a 08                	push   0x8
c001a499:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a49d:	e8 76 03 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a4a2:	83 c4 10             	add    esp,0x10
c001a4a5:	83 c4 0c             	add    esp,0xc
c001a4a8:	c3                   	ret    
c001a4a9:	90                   	nop

c001a4aa <ISO9660::exists(char const*)>:
c001a4aa:	83 ec 18             	sub    esp,0x18
c001a4ad:	68 2b 2e 02 c0       	push   0xc0022e2b
c001a4b2:	e8 28 71 ff ff       	call   c00115df <KePanic(char const*)>
c001a4b7:	31 c0                	xor    eax,eax
c001a4b9:	83 c4 1c             	add    esp,0x1c
c001a4bc:	c3                   	ret    
c001a4bd:	90                   	nop

c001a4be <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a4be:	56                   	push   esi
c001a4bf:	53                   	push   ebx
c001a4c0:	53                   	push   ebx
c001a4c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a4c5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a4c9:	85 db                	test   ebx,ebx
c001a4cb:	0f 84 ca 00 00 00    	je     c001a59b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a4d1:	85 f6                	test   esi,esi
c001a4d3:	0f 84 c2 00 00 00    	je     c001a59b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a4d9:	b8 03 00 00 00       	mov    eax,0x3
c001a4de:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a4e3:	0f 85 b7 00 00 00    	jne    c001a5a0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a4e9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a4eb:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a4f2:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a4f8:	74 1b                	je     c001a515 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a4fa:	85 c0                	test   eax,eax
c001a4fc:	74 10                	je     c001a50e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a4fe:	83 ec 0c             	sub    esp,0xc
c001a501:	68 49 2e 02 c0       	push   0xc0022e49
c001a506:	e8 d4 70 ff ff       	call   c00115df <KePanic(char const*)>
c001a50b:	83 c4 10             	add    esp,0x10
c001a50e:	8a 03                	mov    al,BYTE PTR [ebx]
c001a510:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a515:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a518:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a51f:	85 c0                	test   eax,eax
c001a521:	74 09                	je     c001a52c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a523:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a52a:	74 48                	je     c001a574 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a52c:	83 ec 0c             	sub    esp,0xc
c001a52f:	68 59 2e 02 c0       	push   0xc0022e59
c001a534:	e8 0c 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a539:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a53c:	83 c4 10             	add    esp,0x10
c001a53f:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a546:	85 c0                	test   eax,eax
c001a548:	74 17                	je     c001a561 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a54a:	83 ec 0c             	sub    esp,0xc
c001a54d:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a554:	68 79 2e 02 c0       	push   0xc0022e79
c001a559:	e8 e7 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a55e:	83 c4 10             	add    esp,0x10
c001a561:	83 ec 0c             	sub    esp,0xc
c001a564:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a56b:	50                   	push   eax
c001a56c:	e8 d5 c4 fe ff       	call   c0006a46 <init_percd>
c001a571:	83 c4 10             	add    esp,0x10
c001a574:	83 c3 03             	add    ebx,0x3
c001a577:	51                   	push   ecx
c001a578:	51                   	push   ecx
c001a579:	6a 00                	push   0x0
c001a57b:	53                   	push   ebx
c001a57c:	e8 8c bf fe ff       	call   c000650d <iso_open>
c001a581:	83 c4 10             	add    esp,0x10
c001a584:	89 c2                	mov    edx,eax
c001a586:	b8 01 00 00 00       	mov    eax,0x1
c001a58b:	83 fa ff             	cmp    edx,0xffffffff
c001a58e:	74 10                	je     c001a5a0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a590:	83 c2 32             	add    edx,0x32
c001a593:	31 c0                	xor    eax,eax
c001a595:	01 d2                	add    edx,edx
c001a597:	89 16                	mov    DWORD PTR [esi],edx
c001a599:	eb 05                	jmp    c001a5a0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a59b:	b8 04 00 00 00       	mov    eax,0x4
c001a5a0:	5a                   	pop    edx
c001a5a1:	5b                   	pop    ebx
c001a5a2:	5e                   	pop    esi
c001a5a3:	c3                   	ret    

c001a5a4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a5a4:	53                   	push   ebx
c001a5a5:	83 ec 08             	sub    esp,0x8
c001a5a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a5b0:	85 c0                	test   eax,eax
c001a5b2:	74 2d                	je     c001a5e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a5b4:	85 db                	test   ebx,ebx
c001a5b6:	74 29                	je     c001a5e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a5b8:	b9 02 00 00 00       	mov    ecx,0x2
c001a5bd:	52                   	push   edx
c001a5be:	99                   	cdq    
c001a5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5c3:	f7 f9                	idiv   ecx
c001a5c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a5c9:	83 e8 32             	sub    eax,0x32
c001a5cc:	50                   	push   eax
c001a5cd:	e8 e3 bf fe ff       	call   c00065b5 <iso_read>
c001a5d2:	83 c4 10             	add    esp,0x10
c001a5d5:	89 03                	mov    DWORD PTR [ebx],eax
c001a5d7:	09 d0                	or     eax,edx
c001a5d9:	0f 94 c0             	sete   al
c001a5dc:	0f b6 c0             	movzx  eax,al
c001a5df:	eb 05                	jmp    c001a5e6 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a5e1:	b8 04 00 00 00       	mov    eax,0x4
c001a5e6:	83 c4 08             	add    esp,0x8
c001a5e9:	5b                   	pop    ebx
c001a5ea:	c3                   	ret    
c001a5eb:	90                   	nop

c001a5ec <ISO9660::seek(void*, unsigned long long)>:
c001a5ec:	57                   	push   edi
c001a5ed:	56                   	push   esi
c001a5ee:	b8 04 00 00 00       	mov    eax,0x4
c001a5f3:	51                   	push   ecx
c001a5f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a5f8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a5fc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a600:	85 d2                	test   edx,edx
c001a602:	74 26                	je     c001a62a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a604:	6a 00                	push   0x0
c001a606:	b9 02 00 00 00       	mov    ecx,0x2
c001a60b:	57                   	push   edi
c001a60c:	89 d0                	mov    eax,edx
c001a60e:	56                   	push   esi
c001a60f:	99                   	cdq    
c001a610:	f7 f9                	idiv   ecx
c001a612:	83 e8 32             	sub    eax,0x32
c001a615:	50                   	push   eax
c001a616:	e8 b0 c0 fe ff       	call   c00066cb <iso_seek>
c001a61b:	83 c4 10             	add    esp,0x10
c001a61e:	31 f0                	xor    eax,esi
c001a620:	31 fa                	xor    edx,edi
c001a622:	09 d0                	or     eax,edx
c001a624:	0f 95 c0             	setne  al
c001a627:	0f b6 c0             	movzx  eax,al
c001a62a:	5a                   	pop    edx
c001a62b:	5e                   	pop    esi
c001a62c:	5f                   	pop    edi
c001a62d:	c3                   	ret    

c001a62e <ISO9660::tell(void*, unsigned long long*)>:
c001a62e:	53                   	push   ebx
c001a62f:	83 ec 08             	sub    esp,0x8
c001a632:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a636:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a63a:	85 c0                	test   eax,eax
c001a63c:	74 24                	je     c001a662 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a63e:	85 db                	test   ebx,ebx
c001a640:	74 20                	je     c001a662 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a642:	83 ec 0c             	sub    esp,0xc
c001a645:	b9 02 00 00 00       	mov    ecx,0x2
c001a64a:	99                   	cdq    
c001a64b:	f7 f9                	idiv   ecx
c001a64d:	83 e8 32             	sub    eax,0x32
c001a650:	50                   	push   eax
c001a651:	e8 f9 c0 fe ff       	call   c000674f <iso_tell>
c001a656:	83 c4 10             	add    esp,0x10
c001a659:	89 03                	mov    DWORD PTR [ebx],eax
c001a65b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a65e:	31 c0                	xor    eax,eax
c001a660:	eb 05                	jmp    c001a667 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a662:	b8 04 00 00 00       	mov    eax,0x4
c001a667:	83 c4 08             	add    esp,0x8
c001a66a:	5b                   	pop    ebx
c001a66b:	c3                   	ret    

c001a66c <ISO9660::stat(void*, unsigned long long*)>:
c001a66c:	53                   	push   ebx
c001a66d:	83 ec 14             	sub    esp,0x14
c001a670:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a674:	68 9d 2e 02 c0       	push   0xc0022e9d
c001a679:	e8 c7 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a67e:	83 c4 10             	add    esp,0x10
c001a681:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a686:	74 2c                	je     c001a6b4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a688:	85 db                	test   ebx,ebx
c001a68a:	74 28                	je     c001a6b4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a68c:	83 ec 0c             	sub    esp,0xc
c001a68f:	b9 02 00 00 00       	mov    ecx,0x2
c001a694:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a698:	99                   	cdq    
c001a699:	f7 f9                	idiv   ecx
c001a69b:	83 e8 32             	sub    eax,0x32
c001a69e:	50                   	push   eax
c001a69f:	e8 dc c0 fe ff       	call   c0006780 <iso_total>
c001a6a4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a6ab:	89 03                	mov    DWORD PTR [ebx],eax
c001a6ad:	83 c4 10             	add    esp,0x10
c001a6b0:	31 c0                	xor    eax,eax
c001a6b2:	eb 05                	jmp    c001a6b9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a6b4:	b8 04 00 00 00       	mov    eax,0x4
c001a6b9:	83 c4 08             	add    esp,0x8
c001a6bc:	5b                   	pop    ebx
c001a6bd:	c3                   	ret    

c001a6be <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a6be:	55                   	push   ebp
c001a6bf:	57                   	push   edi
c001a6c0:	56                   	push   esi
c001a6c1:	53                   	push   ebx
c001a6c2:	83 ec 18             	sub    esp,0x18
c001a6c5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a6c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a6cd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a6d1:	68 a5 2e 02 c0       	push   0xc0022ea5
c001a6d6:	e8 6a 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a6db:	83 c4 10             	add    esp,0x10
c001a6de:	85 ff                	test   edi,edi
c001a6e0:	0f 94 c0             	sete   al
c001a6e3:	85 f6                	test   esi,esi
c001a6e5:	0f 94 c2             	sete   dl
c001a6e8:	09 d0                	or     eax,edx
c001a6ea:	a8 01                	test   al,0x1
c001a6ec:	0f 85 dd 00 00 00    	jne    c001a7cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a6f2:	85 db                	test   ebx,ebx
c001a6f4:	0f 84 d5 00 00 00    	je     c001a7cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a6fa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a6fd:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a703:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a70a:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a711:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a713:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a719:	74 1b                	je     c001a736 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a71b:	85 c0                	test   eax,eax
c001a71d:	74 10                	je     c001a72f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a71f:	83 ec 0c             	sub    esp,0xc
c001a722:	68 49 2e 02 c0       	push   0xc0022e49
c001a727:	e8 b3 6e ff ff       	call   c00115df <KePanic(char const*)>
c001a72c:	83 c4 10             	add    esp,0x10
c001a72f:	8a 03                	mov    al,BYTE PTR [ebx]
c001a731:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a736:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a739:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a740:	85 c0                	test   eax,eax
c001a742:	74 09                	je     c001a74d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a744:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a74b:	74 51                	je     c001a79e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a74d:	83 ec 0c             	sub    esp,0xc
c001a750:	68 ad 2e 02 c0       	push   0xc0022ead
c001a755:	e8 eb 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a75a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a75d:	83 c4 10             	add    esp,0x10
c001a760:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a768:	74 21                	je     c001a78b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a76a:	83 ec 0c             	sub    esp,0xc
c001a76d:	68 cd 2e 02 c0       	push   0xc0022ecd
c001a772:	e8 ce 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a777:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a77a:	83 c4 10             	add    esp,0x10
c001a77d:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a784:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a78b:	83 ec 0c             	sub    esp,0xc
c001a78e:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a795:	50                   	push   eax
c001a796:	e8 ab c2 fe ff       	call   c0006a46 <init_percd>
c001a79b:	83 c4 10             	add    esp,0x10
c001a79e:	83 c3 03             	add    ebx,0x3
c001a7a1:	52                   	push   edx
c001a7a2:	52                   	push   edx
c001a7a3:	6a 00                	push   0x0
c001a7a5:	53                   	push   ebx
c001a7a6:	e8 62 bd fe ff       	call   c000650d <iso_open>
c001a7ab:	83 c4 10             	add    esp,0x10
c001a7ae:	89 c5                	mov    ebp,eax
c001a7b0:	83 f8 ff             	cmp    eax,0xffffffff
c001a7b3:	75 21                	jne    c001a7d6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a7b5:	50                   	push   eax
c001a7b6:	50                   	push   eax
c001a7b7:	6a 01                	push   0x1
c001a7b9:	53                   	push   ebx
c001a7ba:	e8 4e bd fe ff       	call   c000650d <iso_open>
c001a7bf:	83 c4 10             	add    esp,0x10
c001a7c2:	ba 02 00 00 00       	mov    edx,0x2
c001a7c7:	40                   	inc    eax
c001a7c8:	74 2b                	je     c001a7f5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a7ca:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a7cd:	eb 24                	jmp    c001a7f3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a7cf:	ba 04 00 00 00       	mov    edx,0x4
c001a7d4:	eb 1f                	jmp    c001a7f5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a7d6:	83 ec 0c             	sub    esp,0xc
c001a7d9:	50                   	push   eax
c001a7da:	e8 a1 bf fe ff       	call   c0006780 <iso_total>
c001a7df:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a7e6:	89 07                	mov    DWORD PTR [edi],eax
c001a7e8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a7eb:	e8 a7 bd fe ff       	call   c0006597 <iso_close>
c001a7f0:	83 c4 10             	add    esp,0x10
c001a7f3:	31 d2                	xor    edx,edx
c001a7f5:	83 c4 0c             	add    esp,0xc
c001a7f8:	89 d0                	mov    eax,edx
c001a7fa:	5b                   	pop    ebx
c001a7fb:	5e                   	pop    esi
c001a7fc:	5f                   	pop    edi
c001a7fd:	5d                   	pop    ebp
c001a7fe:	c3                   	ret    
c001a7ff:	90                   	nop

c001a800 <ISO9660::close(void*)>:
c001a800:	83 ec 0c             	sub    esp,0xc
c001a803:	b8 04 00 00 00       	mov    eax,0x4
c001a808:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a80c:	85 d2                	test   edx,edx
c001a80e:	74 1b                	je     c001a82b <ISO9660::close(void*)+0x2b>
c001a810:	83 ec 0c             	sub    esp,0xc
c001a813:	b9 02 00 00 00       	mov    ecx,0x2
c001a818:	89 d0                	mov    eax,edx
c001a81a:	99                   	cdq    
c001a81b:	f7 f9                	idiv   ecx
c001a81d:	83 e8 32             	sub    eax,0x32
c001a820:	50                   	push   eax
c001a821:	e8 71 bd fe ff       	call   c0006597 <iso_close>
c001a826:	83 c4 10             	add    esp,0x10
c001a829:	31 c0                	xor    eax,eax
c001a82b:	83 c4 0c             	add    esp,0xc
c001a82e:	c3                   	ret    
c001a82f:	90                   	nop

c001a830 <ISO9660::openDir(char const*, void**)>:
c001a830:	56                   	push   esi
c001a831:	53                   	push   ebx
c001a832:	50                   	push   eax
c001a833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a837:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a83b:	85 db                	test   ebx,ebx
c001a83d:	0f 84 bd 00 00 00    	je     c001a900 <ISO9660::openDir(char const*, void**)+0xd0>
c001a843:	85 f6                	test   esi,esi
c001a845:	0f 84 b5 00 00 00    	je     c001a900 <ISO9660::openDir(char const*, void**)+0xd0>
c001a84b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a84d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a854:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a85a:	74 1b                	je     c001a877 <ISO9660::openDir(char const*, void**)+0x47>
c001a85c:	85 c0                	test   eax,eax
c001a85e:	74 10                	je     c001a870 <ISO9660::openDir(char const*, void**)+0x40>
c001a860:	83 ec 0c             	sub    esp,0xc
c001a863:	68 49 2e 02 c0       	push   0xc0022e49
c001a868:	e8 72 6d ff ff       	call   c00115df <KePanic(char const*)>
c001a86d:	83 c4 10             	add    esp,0x10
c001a870:	8a 03                	mov    al,BYTE PTR [ebx]
c001a872:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a877:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a87a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a881:	85 c0                	test   eax,eax
c001a883:	74 10                	je     c001a895 <ISO9660::openDir(char const*, void**)+0x65>
c001a885:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a88c:	74 1a                	je     c001a8a8 <ISO9660::openDir(char const*, void**)+0x78>
c001a88e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a895:	83 ec 0c             	sub    esp,0xc
c001a898:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a89f:	50                   	push   eax
c001a8a0:	e8 a1 c1 fe ff       	call   c0006a46 <init_percd>
c001a8a5:	83 c4 10             	add    esp,0x10
c001a8a8:	83 c3 03             	add    ebx,0x3
c001a8ab:	50                   	push   eax
c001a8ac:	50                   	push   eax
c001a8ad:	6a 01                	push   0x1
c001a8af:	53                   	push   ebx
c001a8b0:	e8 58 bc fe ff       	call   c000650d <iso_open>
c001a8b5:	83 c4 10             	add    esp,0x10
c001a8b8:	89 c3                	mov    ebx,eax
c001a8ba:	83 f8 ff             	cmp    eax,0xffffffff
c001a8bd:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a8c2:	75 1c                	jne    c001a8e0 <ISO9660::openDir(char const*, void**)+0xb0>
c001a8c4:	53                   	push   ebx
c001a8c5:	53                   	push   ebx
c001a8c6:	68 f1 2e 02 c0       	push   0xc0022ef1
c001a8cb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a8d1:	e8 d0 e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a8d6:	83 c4 10             	add    esp,0x10
c001a8d9:	b8 01 00 00 00       	mov    eax,0x1
c001a8de:	eb 25                	jmp    c001a905 <ISO9660::openDir(char const*, void**)+0xd5>
c001a8e0:	01 db                	add    ebx,ebx
c001a8e2:	51                   	push   ecx
c001a8e3:	83 c3 65             	add    ebx,0x65
c001a8e6:	51                   	push   ecx
c001a8e7:	68 04 2f 02 c0       	push   0xc0022f04
c001a8ec:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a8f2:	e8 af e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a8f7:	89 1e                	mov    DWORD PTR [esi],ebx
c001a8f9:	83 c4 10             	add    esp,0x10
c001a8fc:	31 c0                	xor    eax,eax
c001a8fe:	eb 05                	jmp    c001a905 <ISO9660::openDir(char const*, void**)+0xd5>
c001a900:	b8 04 00 00 00       	mov    eax,0x4
c001a905:	5a                   	pop    edx
c001a906:	5b                   	pop    ebx
c001a907:	5e                   	pop    esi
c001a908:	c3                   	ret    
c001a909:	90                   	nop

c001a90a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a90a:	55                   	push   ebp
c001a90b:	57                   	push   edi
c001a90c:	56                   	push   esi
c001a90d:	53                   	push   ebx
c001a90e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a914:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a91b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a922:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a92a:	0f 84 e7 00 00 00    	je     c001aa17 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a930:	85 db                	test   ebx,ebx
c001a932:	0f 84 df 00 00 00    	je     c001aa17 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a938:	83 ec 0c             	sub    esp,0xc
c001a93b:	68 17 2f 02 c0       	push   0xc0022f17
c001a940:	e8 00 00 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a945:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a94c:	b9 02 00 00 00       	mov    ecx,0x2
c001a951:	99                   	cdq    
c001a952:	f7 f9                	idiv   ecx
c001a954:	83 e8 32             	sub    eax,0x32
c001a957:	89 04 24             	mov    DWORD PTR [esp],eax
c001a95a:	e8 73 be fe ff       	call   c00067d2 <iso_readdir>
c001a95f:	83 c4 10             	add    esp,0x10
c001a962:	89 c6                	mov    esi,eax
c001a964:	85 c0                	test   eax,eax
c001a966:	75 37                	jne    c001a99f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a968:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a96d:	56                   	push   esi
c001a96e:	56                   	push   esi
c001a96f:	68 22 2f 02 c0       	push   0xc0022f22
c001a974:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a97a:	e8 27 e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a97f:	83 c4 0c             	add    esp,0xc
c001a982:	68 10 01 00 00       	push   0x110
c001a987:	6a 00                	push   0x0
c001a989:	57                   	push   edi
c001a98a:	e8 61 5b fe ff       	call   c00004f0 <memset>
c001a98f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a995:	83 c4 10             	add    esp,0x10
c001a998:	b8 01 00 00 00       	mov    eax,0x1
c001a99d:	eb 7d                	jmp    c001aa1c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a99f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a9a5:	8d 68 08             	lea    ebp,[eax+0x8]
c001a9a8:	83 ec 0c             	sub    esp,0xc
c001a9ab:	55                   	push   ebp
c001a9ac:	e8 bf 5b fe ff       	call   c0000570 <strlen>
c001a9b1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a9b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a9bd:	83 c4 10             	add    esp,0x10
c001a9c0:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a9c4:	75 0a                	jne    c001a9d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a9c6:	b8 02 00 00 00       	mov    eax,0x2
c001a9cb:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a9ce:	74 05                	je     c001a9d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a9d0:	b8 01 00 00 00       	mov    eax,0x1
c001a9d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a9d9:	50                   	push   eax
c001a9da:	50                   	push   eax
c001a9db:	55                   	push   ebp
c001a9dc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9e0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a9e4:	50                   	push   eax
c001a9e5:	e8 56 5c fe ff       	call   c0000640 <strcpy>
c001a9ea:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a9f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a9f3:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a9f9:	5a                   	pop    edx
c001a9fa:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a9ff:	59                   	pop    ecx
c001aa00:	68 35 2f 02 c0       	push   0xc0022f35
c001aa05:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa0b:	e8 96 e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001aa10:	83 c4 10             	add    esp,0x10
c001aa13:	31 c0                	xor    eax,eax
c001aa15:	eb 05                	jmp    c001aa1c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aa17:	b8 04 00 00 00       	mov    eax,0x4
c001aa1c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa22:	5b                   	pop    ebx
c001aa23:	5e                   	pop    esi
c001aa24:	5f                   	pop    edi
c001aa25:	5d                   	pop    ebp
c001aa26:	c3                   	ret    

c001aa27 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aa27:	57                   	push   edi
c001aa28:	56                   	push   esi
c001aa29:	53                   	push   ebx
c001aa2a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aa2e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa32:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aa36:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001aa3c:	0f be cb             	movsx  ecx,bl
c001aa3f:	75 0b                	jne    c001aa4c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001aa41:	0f be 05 60 41 02 c0 	movsx  eax,BYTE PTR ds:0xc0024160
c001aa48:	39 c8                	cmp    eax,ecx
c001aa4a:	74 47                	je     c001aa93 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa4c:	83 ec 0c             	sub    esp,0xc
c001aa4f:	31 d2                	xor    edx,edx
c001aa51:	68 a0 c8 02 c0       	push   0xc002c8a0
c001aa56:	6a 01                	push   0x1
c001aa58:	52                   	push   edx
c001aa59:	56                   	push   esi
c001aa5a:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001aa61:	e8 02 33 ff ff       	call   c000dd68 <LogicalDisk::read(unsigned long long, int, void*)>
c001aa66:	83 c4 20             	add    esp,0x20
c001aa69:	85 c0                	test   eax,eax
c001aa6b:	75 0e                	jne    c001aa7b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001aa6d:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001aa73:	88 1d 60 41 02 c0    	mov    BYTE PTR ds:0xc0024160,bl
c001aa79:	eb 18                	jmp    c001aa93 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa7b:	50                   	push   eax
c001aa7c:	68 00 08 00 00       	push   0x800
c001aa81:	6a 00                	push   0x0
c001aa83:	57                   	push   edi
c001aa84:	e8 67 5a fe ff       	call   c00004f0 <memset>
c001aa89:	83 c4 10             	add    esp,0x10
c001aa8c:	b8 01 00 00 00       	mov    eax,0x1
c001aa91:	eb 0e                	jmp    c001aaa1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001aa93:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001aa98:	b9 00 08 00 00       	mov    ecx,0x800
c001aa9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa9f:	31 c0                	xor    eax,eax
c001aaa1:	5b                   	pop    ebx
c001aaa2:	5e                   	pop    esi
c001aaa3:	5f                   	pop    edi
c001aaa4:	c3                   	ret    
c001aaa5:	90                   	nop

c001aaa6 <ISO9660::tryMount(LogicalDisk*, int)>:
c001aaa6:	53                   	push   ebx
c001aaa7:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001aaad:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001aab7:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001aabe:	8d 58 41             	lea    ebx,[eax+0x41]
c001aac1:	0f be db             	movsx  ebx,bl
c001aac4:	53                   	push   ebx
c001aac5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aac9:	50                   	push   eax
c001aaca:	6a 10                	push   0x10
c001aacc:	e8 56 ff ff ff       	call   c001aa27 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aad1:	83 c4 10             	add    esp,0x10
c001aad4:	31 d2                	xor    edx,edx
c001aad6:	85 c0                	test   eax,eax
c001aad8:	75 33                	jne    c001ab0d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aada:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001aadf:	75 2c                	jne    c001ab0d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aae1:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001aae6:	75 25                	jne    c001ab0d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aae8:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001aaed:	75 1e                	jne    c001ab0d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaef:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001aaf4:	75 17                	jne    c001ab0d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaf6:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001aafb:	75 10                	jne    c001ab0d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aafd:	83 ec 0c             	sub    esp,0xc
c001ab00:	53                   	push   ebx
c001ab01:	e8 40 bf fe ff       	call   c0006a46 <init_percd>
c001ab06:	83 c4 10             	add    esp,0x10
c001ab09:	40                   	inc    eax
c001ab0a:	0f 95 c2             	setne  dl
c001ab0d:	88 d0                	mov    al,dl
c001ab0f:	81 c4 08 08 00 00    	add    esp,0x808
c001ab15:	5b                   	pop    ebx
c001ab16:	c3                   	ret    
c001ab17:	90                   	nop

c001ab18 <ISO9660::ISO9660()>:
c001ab18:	83 ec 0c             	sub    esp,0xc
c001ab1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab1f:	83 ec 0c             	sub    esp,0xc
c001ab22:	50                   	push   eax
c001ab23:	e8 42 0c ff ff       	call   c000b76a <Filesystem::Filesystem()>
c001ab28:	83 c4 10             	add    esp,0x10
c001ab2b:	ba 50 2f 02 c0       	mov    edx,0xc0022f50
c001ab30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab34:	89 10                	mov    DWORD PTR [eax],edx
c001ab36:	e8 1d c0 fe ff       	call   c0006b58 <fs_iso9660_init>
c001ab3b:	90                   	nop
c001ab3c:	83 c4 0c             	add    esp,0xc
c001ab3f:	c3                   	ret    

c001ab40 <SoundCard::beginPlayback()>:
c001ab40:	c7 44 24 04 b4 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022fb4
c001ab48:	e9 92 6a ff ff       	jmp    c00115df <KePanic(char const*)>
c001ab4d:	90                   	nop

c001ab4e <SoundCard::stopPlayback()>:
c001ab4e:	c7 44 24 04 b4 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022fb4
c001ab56:	e9 84 6a ff ff       	jmp    c00115df <KePanic(char const*)>
c001ab5b:	90                   	nop

c001ab5c <SoundCard::SoundCard(char const*)>:
c001ab5c:	83 ec 1c             	sub    esp,0x1c
c001ab5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab63:	83 ec 08             	sub    esp,0x8
c001ab66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab6a:	50                   	push   eax
c001ab6b:	e8 ae 1f ff ff       	call   c000cb1e <Device::Device(char const*)>
c001ab70:	83 c4 10             	add    esp,0x10
c001ab73:	ba 00 30 02 c0       	mov    edx,0xc0023000
c001ab78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab7c:	89 10                	mov    DWORD PTR [eax],edx
c001ab7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab82:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ab89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab8d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ab97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab9b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001aba5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aba9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001abb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abb7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001abc1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001abc9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001abce:	7f 1a                	jg     c001abea <SoundCard::SoundCard(char const*)+0x8e>
c001abd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abd4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001abd8:	83 c2 54             	add    edx,0x54
c001abdb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001abe3:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001abe8:	eb df                	jmp    c001abc9 <SoundCard::SoundCard(char const*)+0x6d>
c001abea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abee:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001abf5:	90                   	nop
c001abf6:	83 c4 1c             	add    esp,0x1c
c001abf9:	c3                   	ret    

c001abfa <SoundCard::~SoundCard()>:
c001abfa:	83 ec 0c             	sub    esp,0xc
c001abfd:	ba 00 30 02 c0       	mov    edx,0xc0023000
c001ac02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac06:	89 10                	mov    DWORD PTR [eax],edx
c001ac08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac0c:	83 ec 0c             	sub    esp,0xc
c001ac0f:	50                   	push   eax
c001ac10:	e8 73 1c ff ff       	call   c000c888 <Device::~Device()>
c001ac15:	83 c4 10             	add    esp,0x10
c001ac18:	90                   	nop
c001ac19:	83 c4 0c             	add    esp,0xc
c001ac1c:	c3                   	ret    
c001ac1d:	90                   	nop

c001ac1e <SoundCard::~SoundCard()>:
c001ac1e:	83 ec 0c             	sub    esp,0xc
c001ac21:	83 ec 0c             	sub    esp,0xc
c001ac24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac28:	e8 cd ff ff ff       	call   c001abfa <SoundCard::~SoundCard()>
c001ac2d:	83 c4 10             	add    esp,0x10
c001ac30:	83 ec 08             	sub    esp,0x8
c001ac33:	68 e8 01 00 00       	push   0x1e8
c001ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac3c:	e8 d7 fb fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ac41:	83 c4 10             	add    esp,0x10
c001ac44:	83 c4 0c             	add    esp,0xc
c001ac47:	c3                   	ret    

c001ac48 <SoundCard::configureRates(int, int, int)>:
c001ac48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac4c:	31 c0                	xor    eax,eax
c001ac4e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ac55:	75 20                	jne    c001ac77 <SoundCard::configureRates(int, int, int)+0x2f>
c001ac57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac5b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ac61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac65:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ac6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac6f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ac75:	b0 01                	mov    al,0x1
c001ac77:	c3                   	ret    

c001ac78 <SoundCard::getSamples16(int, short*)>:
c001ac78:	55                   	push   ebp
c001ac79:	57                   	push   edi
c001ac7a:	31 ff                	xor    edi,edi
c001ac7c:	56                   	push   esi
c001ac7d:	53                   	push   ebx
c001ac7e:	31 db                	xor    ebx,ebx
c001ac80:	83 ec 10             	sub    esp,0x10
c001ac83:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ac87:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac8b:	8d 04 36             	lea    eax,[esi+esi*1]
c001ac8e:	50                   	push   eax
c001ac8f:	6a 00                	push   0x0
c001ac91:	55                   	push   ebp
c001ac92:	e8 59 58 fe ff       	call   c00004f0 <memset>
c001ac97:	83 c4 10             	add    esp,0x10
c001ac9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac9e:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001aca5:	85 c0                	test   eax,eax
c001aca7:	74 1b                	je     c001acc4 <SoundCard::getSamples16(int, short*)+0x4c>
c001aca9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001acad:	75 15                	jne    c001acc4 <SoundCard::getSamples16(int, short*)+0x4c>
c001acaf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001acb3:	55                   	push   ebp
c001acb4:	56                   	push   esi
c001acb5:	50                   	push   eax
c001acb6:	e8 f1 02 00 00       	call   c001afac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001acbb:	83 c4 10             	add    esp,0x10
c001acbe:	39 c7                	cmp    edi,eax
c001acc0:	7d 02                	jge    c001acc4 <SoundCard::getSamples16(int, short*)+0x4c>
c001acc2:	89 c7                	mov    edi,eax
c001acc4:	43                   	inc    ebx
c001acc5:	83 fb 20             	cmp    ebx,0x20
c001acc8:	75 d0                	jne    c001ac9a <SoundCard::getSamples16(int, short*)+0x22>
c001acca:	83 c4 0c             	add    esp,0xc
c001accd:	89 f8                	mov    eax,edi
c001accf:	5b                   	pop    ebx
c001acd0:	5e                   	pop    esi
c001acd1:	5f                   	pop    edi
c001acd2:	5d                   	pop    ebp
c001acd3:	c3                   	ret    

c001acd4 <SoundCard::getSamples32(int, int*)>:
c001acd4:	55                   	push   ebp
c001acd5:	57                   	push   edi
c001acd6:	31 ff                	xor    edi,edi
c001acd8:	56                   	push   esi
c001acd9:	31 f6                	xor    esi,esi
c001acdb:	53                   	push   ebx
c001acdc:	83 ec 10             	sub    esp,0x10
c001acdf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ace3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ace7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aceb:	c1 e0 02             	shl    eax,0x2
c001acee:	50                   	push   eax
c001acef:	6a 00                	push   0x0
c001acf1:	55                   	push   ebp
c001acf2:	e8 f9 57 fe ff       	call   c00004f0 <memset>
c001acf7:	83 c4 10             	add    esp,0x10
c001acfa:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ad01:	85 c0                	test   eax,eax
c001ad03:	74 1b                	je     c001ad20 <SoundCard::getSamples32(int, int*)+0x4c>
c001ad05:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad09:	75 15                	jne    c001ad20 <SoundCard::getSamples32(int, int*)+0x4c>
c001ad0b:	53                   	push   ebx
c001ad0c:	55                   	push   ebp
c001ad0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad11:	50                   	push   eax
c001ad12:	e8 61 03 00 00       	call   c001b078 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ad17:	83 c4 10             	add    esp,0x10
c001ad1a:	39 c6                	cmp    esi,eax
c001ad1c:	7d 02                	jge    c001ad20 <SoundCard::getSamples32(int, int*)+0x4c>
c001ad1e:	89 c6                	mov    esi,eax
c001ad20:	47                   	inc    edi
c001ad21:	83 ff 20             	cmp    edi,0x20
c001ad24:	75 d4                	jne    c001acfa <SoundCard::getSamples32(int, int*)+0x26>
c001ad26:	85 f6                	test   esi,esi
c001ad28:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ad2f:	75 0f                	jne    c001ad40 <SoundCard::getSamples32(int, int*)+0x6c>
c001ad31:	85 c0                	test   eax,eax
c001ad33:	74 1b                	je     c001ad50 <SoundCard::getSamples32(int, int*)+0x7c>
c001ad35:	83 ec 0c             	sub    esp,0xc
c001ad38:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad3a:	53                   	push   ebx
c001ad3b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ad3e:	eb 0d                	jmp    c001ad4d <SoundCard::getSamples32(int, int*)+0x79>
c001ad40:	85 c0                	test   eax,eax
c001ad42:	75 0c                	jne    c001ad50 <SoundCard::getSamples32(int, int*)+0x7c>
c001ad44:	83 ec 0c             	sub    esp,0xc
c001ad47:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad49:	53                   	push   ebx
c001ad4a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ad4d:	83 c4 10             	add    esp,0x10
c001ad50:	83 c4 0c             	add    esp,0xc
c001ad53:	89 f0                	mov    eax,esi
c001ad55:	5b                   	pop    ebx
c001ad56:	5e                   	pop    esi
c001ad57:	5f                   	pop    edi
c001ad58:	5d                   	pop    ebp
c001ad59:	c3                   	ret    

c001ad5a <SoundCard::addChannel(SoundPort*)>:
c001ad5a:	83 ec 0c             	sub    esp,0xc
c001ad5d:	31 c0                	xor    eax,eax
c001ad5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad63:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ad6b:	74 1b                	je     c001ad88 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ad6d:	40                   	inc    eax
c001ad6e:	83 f8 20             	cmp    eax,0x20
c001ad71:	75 f0                	jne    c001ad63 <SoundCard::addChannel(SoundPort*)+0x9>
c001ad73:	83 ec 0c             	sub    esp,0xc
c001ad76:	68 d9 2f 02 c0       	push   0xc0022fd9
c001ad7b:	e8 5f 68 ff ff       	call   c00115df <KePanic(char const*)>
c001ad80:	83 c4 10             	add    esp,0x10
c001ad83:	83 c8 ff             	or     eax,0xffffffff
c001ad86:	eb 0b                	jmp    c001ad93 <SoundCard::addChannel(SoundPort*)+0x39>
c001ad88:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad8c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ad93:	83 c4 0c             	add    esp,0xc
c001ad96:	c3                   	ret    
c001ad97:	90                   	nop

c001ad98 <SoundCard::removeChannel(int)>:
c001ad98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ada0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001adab:	c3                   	ret    

c001adac <SoundPort::SoundPort(int, int, int, int)>:
c001adac:	83 ec 0c             	sub    esp,0xc
c001adaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adb3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001adba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adbe:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001adc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adc6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001adca:	89 10                	mov    DWORD PTR [eax],edx
c001adcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001add0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001add4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001add7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001addb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001addf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ade2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ade7:	75 13                	jne    c001adfc <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ade9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aded:	8b 00                	mov    eax,DWORD PTR [eax]
c001adef:	05 a0 0f 00 00       	add    eax,0xfa0
c001adf4:	01 c0                	add    eax,eax
c001adf6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001adfa:	66 90                	xchg   ax,ax
c001adfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae00:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae04:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ae07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ae12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae19:	c1 e0 02             	shl    eax,0x2
c001ae1c:	83 ec 0c             	sub    esp,0xc
c001ae1f:	50                   	push   eax
c001ae20:	e8 91 cc fe ff       	call   c0007ab6 <malloc>
c001ae25:	83 c4 10             	add    esp,0x10
c001ae28:	89 c2                	mov    edx,eax
c001ae2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae2e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ae31:	90                   	nop
c001ae32:	83 c4 0c             	add    esp,0xc
c001ae35:	c3                   	ret    
c001ae36:	66 90                	xchg   ax,ax

c001ae38 <SoundPort::~SoundPort()>:
c001ae38:	83 ec 0c             	sub    esp,0xc
c001ae3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae3f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae42:	85 c0                	test   eax,eax
c001ae44:	74 1e                	je     c001ae64 <SoundPort::~SoundPort()+0x2c>
c001ae46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae4d:	83 ec 0c             	sub    esp,0xc
c001ae50:	50                   	push   eax
c001ae51:	e8 70 cc fe ff       	call   c0007ac6 <free>
c001ae56:	83 c4 10             	add    esp,0x10
c001ae59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae5d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae64:	90                   	nop
c001ae65:	83 c4 0c             	add    esp,0xc
c001ae68:	c3                   	ret    
c001ae69:	90                   	nop
c001ae6a:	66 90                	xchg   ax,ax

c001ae6c <SoundPort::unpause()>:
c001ae6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae70:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ae74:	c3                   	ret    
c001ae75:	90                   	nop
c001ae76:	66 90                	xchg   ax,ax

c001ae78 <SoundPort::pause()>:
c001ae78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae7c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae80:	c3                   	ret    
c001ae81:	90                   	nop
c001ae82:	66 90                	xchg   ax,ax

c001ae84 <SoundPort::getBufferUsed()>:
c001ae84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae88:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae8b:	c3                   	ret    

c001ae8c <SoundPort::getBufferSize()>:
c001ae8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae90:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae93:	c3                   	ret    

c001ae94 <SoundPort::buffer16(short*, int)>:
c001ae94:	55                   	push   ebp
c001ae95:	57                   	push   edi
c001ae96:	56                   	push   esi
c001ae97:	53                   	push   ebx
c001ae98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae9c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aea0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aea3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aea6:	74 68                	je     c001af10 <SoundPort::buffer16(short*, int)+0x7c>
c001aea8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aeac:	85 c9                	test   ecx,ecx
c001aeae:	7e 60                	jle    c001af10 <SoundPort::buffer16(short*, int)+0x7c>
c001aeb0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001aeb4:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aeb7:	c1 e1 0f             	shl    ecx,0xf
c001aeba:	8d 70 01             	lea    esi,[eax+0x1]
c001aebd:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aec0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001aec3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aec6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aec9:	74 4d                	je     c001af18 <SoundPort::buffer16(short*, int)+0x84>
c001aecb:	31 f6                	xor    esi,esi
c001aecd:	eb 21                	jmp    c001aef0 <SoundPort::buffer16(short*, int)+0x5c>
c001aecf:	90                   	nop
c001aed0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001aed5:	8d 79 01             	lea    edi,[ecx+0x1]
c001aed8:	c1 e3 0f             	shl    ebx,0xf
c001aedb:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001aede:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001aee1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aee4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aee7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aeea:	74 1c                	je     c001af08 <SoundPort::buffer16(short*, int)+0x74>
c001aeec:	89 c6                	mov    esi,eax
c001aeee:	66 90                	xchg   ax,ax
c001aef0:	8d 46 01             	lea    eax,[esi+0x1]
c001aef3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aef7:	75 d7                	jne    c001aed0 <SoundPort::buffer16(short*, int)+0x3c>
c001aef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aefd:	8d 76 00             	lea    esi,[esi+0x0]
c001af00:	5b                   	pop    ebx
c001af01:	5e                   	pop    esi
c001af02:	5f                   	pop    edi
c001af03:	5d                   	pop    ebp
c001af04:	c3                   	ret    
c001af05:	8d 76 00             	lea    esi,[esi+0x0]
c001af08:	5b                   	pop    ebx
c001af09:	8d 46 02             	lea    eax,[esi+0x2]
c001af0c:	5e                   	pop    esi
c001af0d:	5f                   	pop    edi
c001af0e:	5d                   	pop    ebp
c001af0f:	c3                   	ret    
c001af10:	5b                   	pop    ebx
c001af11:	31 c0                	xor    eax,eax
c001af13:	5e                   	pop    esi
c001af14:	5f                   	pop    edi
c001af15:	5d                   	pop    ebp
c001af16:	c3                   	ret    
c001af17:	90                   	nop
c001af18:	b8 01 00 00 00       	mov    eax,0x1
c001af1d:	eb e1                	jmp    c001af00 <SoundPort::buffer16(short*, int)+0x6c>
c001af1f:	90                   	nop

c001af20 <SoundPort::buffer32(int*, int)>:
c001af20:	55                   	push   ebp
c001af21:	57                   	push   edi
c001af22:	56                   	push   esi
c001af23:	53                   	push   ebx
c001af24:	83 ec 04             	sub    esp,0x4
c001af27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af2f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af32:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001af36:	89 04 24             	mov    DWORD PTR [esp],eax
c001af39:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af3c:	74 5a                	je     c001af98 <SoundPort::buffer32(int*, int)+0x78>
c001af3e:	85 c0                	test   eax,eax
c001af40:	7e 56                	jle    c001af98 <SoundPort::buffer32(int*, int)+0x78>
c001af42:	8d 71 01             	lea    esi,[ecx+0x1]
c001af45:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af48:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af4b:	8b 37                	mov    esi,DWORD PTR [edi]
c001af4d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001af50:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af53:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af56:	74 4c                	je     c001afa4 <SoundPort::buffer32(int*, int)+0x84>
c001af58:	31 f6                	xor    esi,esi
c001af5a:	eb 1c                	jmp    c001af78 <SoundPort::buffer32(int*, int)+0x58>
c001af5c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001af5f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001af62:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001af65:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001af68:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001af6c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af6f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af72:	74 18                	je     c001af8c <SoundPort::buffer32(int*, int)+0x6c>
c001af74:	89 de                	mov    esi,ebx
c001af76:	66 90                	xchg   ax,ax
c001af78:	8d 5e 01             	lea    ebx,[esi+0x1]
c001af7b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001af7e:	75 dc                	jne    c001af5c <SoundPort::buffer32(int*, int)+0x3c>
c001af80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001af83:	90                   	nop
c001af84:	83 c4 04             	add    esp,0x4
c001af87:	5b                   	pop    ebx
c001af88:	5e                   	pop    esi
c001af89:	5f                   	pop    edi
c001af8a:	5d                   	pop    ebp
c001af8b:	c3                   	ret    
c001af8c:	83 c4 04             	add    esp,0x4
c001af8f:	8d 46 02             	lea    eax,[esi+0x2]
c001af92:	5b                   	pop    ebx
c001af93:	5e                   	pop    esi
c001af94:	5f                   	pop    edi
c001af95:	5d                   	pop    ebp
c001af96:	c3                   	ret    
c001af97:	90                   	nop
c001af98:	83 c4 04             	add    esp,0x4
c001af9b:	31 c0                	xor    eax,eax
c001af9d:	5b                   	pop    ebx
c001af9e:	5e                   	pop    esi
c001af9f:	5f                   	pop    edi
c001afa0:	5d                   	pop    ebp
c001afa1:	c3                   	ret    
c001afa2:	66 90                	xchg   ax,ax
c001afa4:	b8 01 00 00 00       	mov    eax,0x1
c001afa9:	eb d9                	jmp    c001af84 <SoundPort::buffer32(int*, int)+0x64>
c001afab:	90                   	nop

c001afac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001afac:	57                   	push   edi
c001afad:	56                   	push   esi
c001afae:	53                   	push   ebx
c001afaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afb3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001afb7:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001afbd:	39 03                	cmp    DWORD PTR [ebx],eax
c001afbf:	74 13                	je     c001afd4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001afc1:	83 ec 0c             	sub    esp,0xc
c001afc4:	68 2c 30 02 c0       	push   0xc002302c
c001afc9:	e8 11 66 ff ff       	call   c00115df <KePanic(char const*)>
c001afce:	83 c4 10             	add    esp,0x10
c001afd1:	8d 76 00             	lea    esi,[esi+0x0]
c001afd4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001afda:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001afdd:	74 11                	je     c001aff0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001afdf:	83 ec 0c             	sub    esp,0xc
c001afe2:	68 6b 30 02 c0       	push   0xc002306b
c001afe7:	e8 f3 65 ff ff       	call   c00115df <KePanic(char const*)>
c001afec:	83 c4 10             	add    esp,0x10
c001afef:	90                   	nop
c001aff0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001aff6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001aff9:	74 11                	je     c001b00c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001affb:	83 ec 0c             	sub    esp,0xc
c001affe:	68 6b 30 02 c0       	push   0xc002306b
c001b003:	e8 d7 65 ff ff       	call   c00115df <KePanic(char const*)>
c001b008:	83 c4 10             	add    esp,0x10
c001b00b:	90                   	nop
c001b00c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b00f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b013:	7e 07                	jle    c001b01c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b015:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b019:	8d 76 00             	lea    esi,[esi+0x0]
c001b01c:	85 f6                	test   esi,esi
c001b01e:	7e 2c                	jle    c001b04c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b020:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b024:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b027:	31 c9                	xor    ecx,ecx
c001b029:	01 d7                	add    edi,edx
c001b02b:	90                   	nop
c001b02c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b02f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b032:	85 c0                	test   eax,eax
c001b034:	79 06                	jns    c001b03c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b036:	05 ff 7f 00 00       	add    eax,0x7fff
c001b03b:	90                   	nop
c001b03c:	c1 f8 0f             	sar    eax,0xf
c001b03f:	83 c1 04             	add    ecx,0x4
c001b042:	66 01 02             	add    WORD PTR [edx],ax
c001b045:	83 c2 02             	add    edx,0x2
c001b048:	39 d7                	cmp    edi,edx
c001b04a:	75 e0                	jne    c001b02c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b04c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b04f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b052:	83 ec 04             	sub    esp,0x4
c001b055:	29 f0                	sub    eax,esi
c001b057:	c1 e0 02             	shl    eax,0x2
c001b05a:	50                   	push   eax
c001b05b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b05e:	50                   	push   eax
c001b05f:	52                   	push   edx
c001b060:	e8 6b 53 fe ff       	call   c00003d0 <memmove>
c001b065:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b068:	83 c4 10             	add    esp,0x10
c001b06b:	29 f0                	sub    eax,esi
c001b06d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b070:	89 f0                	mov    eax,esi
c001b072:	5b                   	pop    ebx
c001b073:	5e                   	pop    esi
c001b074:	5f                   	pop    edi
c001b075:	c3                   	ret    
c001b076:	66 90                	xchg   ax,ax

c001b078 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b078:	57                   	push   edi
c001b079:	56                   	push   esi
c001b07a:	53                   	push   ebx
c001b07b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b07f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b083:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b087:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b08d:	39 06                	cmp    DWORD PTR [esi],eax
c001b08f:	74 13                	je     c001b0a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b091:	83 ec 0c             	sub    esp,0xc
c001b094:	68 4c 30 02 c0       	push   0xc002304c
c001b099:	e8 41 65 ff ff       	call   c00115df <KePanic(char const*)>
c001b09e:	83 c4 10             	add    esp,0x10
c001b0a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0a4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b0aa:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b0ad:	74 11                	je     c001b0c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b0af:	83 ec 0c             	sub    esp,0xc
c001b0b2:	68 87 30 02 c0       	push   0xc0023087
c001b0b7:	e8 23 65 ff ff       	call   c00115df <KePanic(char const*)>
c001b0bc:	83 c4 10             	add    esp,0x10
c001b0bf:	90                   	nop
c001b0c0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b0c6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b0c9:	74 11                	je     c001b0dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b0cb:	83 ec 0c             	sub    esp,0xc
c001b0ce:	68 87 30 02 c0       	push   0xc0023087
c001b0d3:	e8 07 65 ff ff       	call   c00115df <KePanic(char const*)>
c001b0d8:	83 c4 10             	add    esp,0x10
c001b0db:	90                   	nop
c001b0dc:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b0df:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b0e3:	7e 07                	jle    c001b0ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b0e5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b0e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0ec:	85 ff                	test   edi,edi
c001b0ee:	7e 1c                	jle    c001b10c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b0f0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b0f7:	31 c0                	xor    eax,eax
c001b0f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0fc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b0ff:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b102:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b105:	83 c0 04             	add    eax,0x4
c001b108:	39 c1                	cmp    ecx,eax
c001b10a:	75 f0                	jne    c001b0fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b10c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b10f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b112:	83 ec 04             	sub    esp,0x4
c001b115:	29 f8                	sub    eax,edi
c001b117:	c1 e0 02             	shl    eax,0x2
c001b11a:	50                   	push   eax
c001b11b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b11e:	50                   	push   eax
c001b11f:	52                   	push   edx
c001b120:	e8 ab 52 fe ff       	call   c00003d0 <memmove>
c001b125:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b128:	83 c4 10             	add    esp,0x10
c001b12b:	29 f8                	sub    eax,edi
c001b12d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b130:	89 f8                	mov    eax,edi
c001b132:	5b                   	pop    ebx
c001b133:	5e                   	pop    esi
c001b134:	5f                   	pop    edi
c001b135:	c3                   	ret    

c001b136 <PCI::open(int, int, void*)>:
c001b136:	83 ec 18             	sub    esp,0x18
c001b139:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b13d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b141:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b147:	8b 10                	mov    edx,DWORD PTR [eax]
c001b149:	50                   	push   eax
c001b14a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b14d:	31 c0                	xor    eax,eax
c001b14f:	83 c4 1c             	add    esp,0x1c
c001b152:	c3                   	ret    
c001b153:	90                   	nop

c001b154 <PCI::close(int, int, void*)>:
c001b154:	31 c0                	xor    eax,eax
c001b156:	c3                   	ret    
c001b157:	90                   	nop

c001b158 <PCI::PCI()>:
c001b158:	83 ec 0c             	sub    esp,0xc
c001b15b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b15f:	83 ec 08             	sub    esp,0x8
c001b162:	68 a3 30 02 c0       	push   0xc00230a3
c001b167:	50                   	push   eax
c001b168:	e8 7b 11 ff ff       	call   c000c2e8 <Bus::Bus(char const*)>
c001b16d:	83 c4 10             	add    esp,0x10
c001b170:	ba 4c 31 02 c0       	mov    edx,0xc002314c
c001b175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b179:	89 10                	mov    DWORD PTR [eax],edx
c001b17b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b17f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b18d:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b196:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b19c:	0f b6 d0             	movzx  edx,al
c001b19f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1a3:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1ae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1b4:	0f b6 d0             	movzx  edx,al
c001b1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1bb:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1c4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1ca:	8d 50 01             	lea    edx,[eax+0x1]
c001b1cd:	88 d1                	mov    cl,dl
c001b1cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1d3:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b1d9:	0f b6 d0             	movzx  edx,al
c001b1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1e0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b1e4:	83 c9 c0             	or     ecx,0xffffffc0
c001b1e7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b1eb:	90                   	nop
c001b1ec:	83 c4 0c             	add    esp,0xc
c001b1ef:	c3                   	ret    

c001b1f0 <PCI::readBAR8(unsigned int, int)>:
c001b1f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1f8:	f6 c2 01             	test   dl,0x1
c001b1fb:	74 07                	je     c001b204 <PCI::readBAR8(unsigned int, int)+0x14>
c001b1fd:	83 e2 fc             	and    edx,0xfffffffc
c001b200:	01 c2                	add    edx,eax
c001b202:	ec                   	in     al,dx
c001b203:	c3                   	ret    
c001b204:	83 e2 f0             	and    edx,0xfffffff0
c001b207:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b20a:	c3                   	ret    
c001b20b:	90                   	nop

c001b20c <PCI::readBAR16(unsigned int, int)>:
c001b20c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b210:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b214:	f6 c2 01             	test   dl,0x1
c001b217:	74 08                	je     c001b221 <PCI::readBAR16(unsigned int, int)+0x15>
c001b219:	83 e2 fc             	and    edx,0xfffffffc
c001b21c:	01 c2                	add    edx,eax
c001b21e:	66 ed                	in     ax,dx
c001b220:	c3                   	ret    
c001b221:	83 e2 f0             	and    edx,0xfffffff0
c001b224:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b228:	c3                   	ret    
c001b229:	90                   	nop

c001b22a <PCI::readBAR32(unsigned int, int)>:
c001b22a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b22e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b232:	f6 c2 01             	test   dl,0x1
c001b235:	74 07                	je     c001b23e <PCI::readBAR32(unsigned int, int)+0x14>
c001b237:	83 e2 fc             	and    edx,0xfffffffc
c001b23a:	01 c2                	add    edx,eax
c001b23c:	ed                   	in     eax,dx
c001b23d:	c3                   	ret    
c001b23e:	83 e2 f0             	and    edx,0xfffffff0
c001b241:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b244:	c3                   	ret    
c001b245:	90                   	nop

c001b246 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b246:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b24a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b24e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b252:	f6 c2 01             	test   dl,0x1
c001b255:	74 07                	je     c001b25e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b257:	83 e2 fc             	and    edx,0xfffffffc
c001b25a:	01 ca                	add    edx,ecx
c001b25c:	ee                   	out    dx,al
c001b25d:	c3                   	ret    
c001b25e:	83 e2 f0             	and    edx,0xfffffff0
c001b261:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b264:	c3                   	ret    
c001b265:	90                   	nop

c001b266 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b266:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b26a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b26e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b272:	f6 c2 01             	test   dl,0x1
c001b275:	74 08                	je     c001b27f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b277:	83 e2 fc             	and    edx,0xfffffffc
c001b27a:	01 ca                	add    edx,ecx
c001b27c:	66 ef                	out    dx,ax
c001b27e:	c3                   	ret    
c001b27f:	83 e2 f0             	and    edx,0xfffffff0
c001b282:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b286:	c3                   	ret    
c001b287:	90                   	nop

c001b288 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b288:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b28c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b290:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b294:	f6 c2 01             	test   dl,0x1
c001b297:	74 07                	je     c001b2a0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b299:	83 e2 fc             	and    edx,0xfffffffc
c001b29c:	01 ca                	add    edx,ecx
c001b29e:	ef                   	out    dx,eax
c001b29f:	c3                   	ret    
c001b2a0:	83 e2 f0             	and    edx,0xfffffff0
c001b2a3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b2a6:	c3                   	ret    
c001b2a7:	90                   	nop

c001b2a8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b2a8:	55                   	push   ebp
c001b2a9:	57                   	push   edi
c001b2aa:	56                   	push   esi
c001b2ab:	53                   	push   ebx
c001b2ac:	83 ec 0c             	sub    esp,0xc
c001b2af:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b2b4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b2b8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b2bc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b2c0:	83 fe 07             	cmp    esi,0x7
c001b2c3:	76 10                	jbe    c001b2d5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b2c5:	83 ec 0c             	sub    esp,0xc
c001b2c8:	68 ab 30 02 c0       	push   0xc00230ab
c001b2cd:	e8 0d 63 ff ff       	call   c00115df <KePanic(char const*)>
c001b2d2:	83 c4 10             	add    esp,0x10
c001b2d5:	0f b6 db             	movzx  ebx,bl
c001b2d8:	83 fb 0f             	cmp    ebx,0xf
c001b2db:	76 10                	jbe    c001b2ed <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b2dd:	83 ec 0c             	sub    esp,0xc
c001b2e0:	68 db 30 02 c0       	push   0xc00230db
c001b2e5:	e8 f5 62 ff ff       	call   c00115df <KePanic(char const*)>
c001b2ea:	83 c4 10             	add    esp,0x10
c001b2ed:	8d 04 36             	lea    eax,[esi+esi*1]
c001b2f0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b2f5:	83 c8 f0             	or     eax,0xfffffff0
c001b2f8:	ee                   	out    dx,al
c001b2f9:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b2fe:	89 e8                	mov    eax,ebp
c001b300:	ee                   	out    dx,al
c001b301:	83 c4 0c             	add    esp,0xc
c001b304:	89 d8                	mov    eax,ebx
c001b306:	89 f9                	mov    ecx,edi
c001b308:	c1 e0 08             	shl    eax,0x8
c001b30b:	0f b6 d9             	movzx  ebx,cl
c001b30e:	83 e3 fc             	and    ebx,0xfffffffc
c001b311:	09 d8                	or     eax,ebx
c001b313:	5b                   	pop    ebx
c001b314:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b319:	5e                   	pop    esi
c001b31a:	5f                   	pop    edi
c001b31b:	5d                   	pop    ebp
c001b31c:	c3                   	ret    
c001b31d:	90                   	nop

c001b31e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b31e:	57                   	push   edi
c001b31f:	56                   	push   esi
c001b320:	53                   	push   ebx
c001b321:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b325:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b329:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b32f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b333:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b337:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b33b:	83 ff 01             	cmp    edi,0x1
c001b33e:	75 3f                	jne    c001b37f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b340:	89 de                	mov    esi,ebx
c001b342:	0f b6 c0             	movzx  eax,al
c001b345:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b34b:	c1 e0 10             	shl    eax,0x10
c001b34e:	0f b6 c9             	movzx  ecx,cl
c001b351:	09 f0                	or     eax,esi
c001b353:	c1 e1 08             	shl    ecx,0x8
c001b356:	0f b6 d2             	movzx  edx,dl
c001b359:	09 c8                	or     eax,ecx
c001b35b:	c1 e2 0b             	shl    edx,0xb
c001b35e:	09 d0                	or     eax,edx
c001b360:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b365:	0d 00 00 00 80       	or     eax,0x80000000
c001b36a:	ef                   	out    dx,eax
c001b36b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b370:	ed                   	in     eax,dx
c001b371:	83 e3 02             	and    ebx,0x2
c001b374:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b37b:	d3 e8                	shr    eax,cl
c001b37d:	eb 44                	jmp    c001b3c3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b37f:	83 ff 02             	cmp    edi,0x2
c001b382:	75 2d                	jne    c001b3b1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b384:	83 ec 0c             	sub    esp,0xc
c001b387:	0f b6 c9             	movzx  ecx,cl
c001b38a:	0f b6 d2             	movzx  edx,dl
c001b38d:	0f b6 fb             	movzx  edi,bl
c001b390:	0f b6 c0             	movzx  eax,al
c001b393:	57                   	push   edi
c001b394:	51                   	push   ecx
c001b395:	52                   	push   edx
c001b396:	50                   	push   eax
c001b397:	56                   	push   esi
c001b398:	e8 0b ff ff ff       	call   c001b2a8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b39d:	89 c2                	mov    edx,eax
c001b39f:	ed                   	in     eax,dx
c001b3a0:	83 e3 02             	and    ebx,0x2
c001b3a3:	83 c4 20             	add    esp,0x20
c001b3a6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b3ad:	d3 e8                	shr    eax,cl
c001b3af:	eb 12                	jmp    c001b3c3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b3b1:	83 ec 0c             	sub    esp,0xc
c001b3b4:	68 0b 31 02 c0       	push   0xc002310b
c001b3b9:	e8 21 62 ff ff       	call   c00115df <KePanic(char const*)>
c001b3be:	83 c4 10             	add    esp,0x10
c001b3c1:	31 c0                	xor    eax,eax
c001b3c3:	5b                   	pop    ebx
c001b3c4:	5e                   	pop    esi
c001b3c5:	5f                   	pop    edi
c001b3c6:	c3                   	ret    
c001b3c7:	90                   	nop

c001b3c8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b3c8:	83 ec 18             	sub    esp,0x18
c001b3cb:	6a 00                	push   0x0
c001b3cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3d2:	50                   	push   eax
c001b3d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3d8:	50                   	push   eax
c001b3d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3de:	50                   	push   eax
c001b3df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3e3:	e8 36 ff ff ff       	call   c001b31e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3e8:	83 c4 2c             	add    esp,0x2c
c001b3eb:	c3                   	ret    

c001b3ec <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b3ec:	83 ec 18             	sub    esp,0x18
c001b3ef:	6a 0e                	push   0xe
c001b3f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3f6:	50                   	push   eax
c001b3f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3fc:	50                   	push   eax
c001b3fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b402:	50                   	push   eax
c001b403:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b407:	e8 12 ff ff ff       	call   c001b31e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b40c:	83 c4 2c             	add    esp,0x2c
c001b40f:	0f b6 c0             	movzx  eax,al
c001b412:	c3                   	ret    
c001b413:	90                   	nop

c001b414 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b414:	55                   	push   ebp
c001b415:	57                   	push   edi
c001b416:	56                   	push   esi
c001b417:	53                   	push   ebx
c001b418:	83 ec 18             	sub    esp,0x18
c001b41b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b420:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b425:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b42a:	6a 0a                	push   0xa
c001b42c:	56                   	push   esi
c001b42d:	55                   	push   ebp
c001b42e:	57                   	push   edi
c001b42f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b433:	e8 e6 fe ff ff       	call   c001b31e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b438:	83 c4 14             	add    esp,0x14
c001b43b:	89 c3                	mov    ebx,eax
c001b43d:	6a 0a                	push   0xa
c001b43f:	0f b6 db             	movzx  ebx,bl
c001b442:	56                   	push   esi
c001b443:	55                   	push   ebp
c001b444:	57                   	push   edi
c001b445:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b449:	e8 d0 fe ff ff       	call   c001b31e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b44e:	83 c4 2c             	add    esp,0x2c
c001b451:	25 00 ff 00 00       	and    eax,0xff00
c001b456:	09 d8                	or     eax,ebx
c001b458:	5b                   	pop    ebx
c001b459:	5e                   	pop    esi
c001b45a:	5f                   	pop    edi
c001b45b:	5d                   	pop    ebp
c001b45c:	c3                   	ret    
c001b45d:	90                   	nop

c001b45e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b45e:	83 ec 18             	sub    esp,0x18
c001b461:	6a 08                	push   0x8
c001b463:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b468:	50                   	push   eax
c001b469:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b46e:	50                   	push   eax
c001b46f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b474:	50                   	push   eax
c001b475:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b479:	e8 a0 fe ff ff       	call   c001b31e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b47e:	83 c4 2c             	add    esp,0x2c
c001b481:	0f b6 c4             	movzx  eax,ah
c001b484:	c3                   	ret    
c001b485:	90                   	nop

c001b486 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b486:	83 ec 18             	sub    esp,0x18
c001b489:	6a 08                	push   0x8
c001b48b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b490:	50                   	push   eax
c001b491:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b496:	50                   	push   eax
c001b497:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b49c:	50                   	push   eax
c001b49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4a1:	e8 78 fe ff ff       	call   c001b31e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4a6:	83 c4 2c             	add    esp,0x2c
c001b4a9:	c3                   	ret    

c001b4aa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b4aa:	83 ec 18             	sub    esp,0x18
c001b4ad:	6a 3c                	push   0x3c
c001b4af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4b4:	50                   	push   eax
c001b4b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ba:	50                   	push   eax
c001b4bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4c0:	50                   	push   eax
c001b4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4c5:	e8 54 fe ff ff       	call   c001b31e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4ca:	83 c4 2c             	add    esp,0x2c
c001b4cd:	c3                   	ret    

c001b4ce <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b4ce:	83 ec 18             	sub    esp,0x18
c001b4d1:	6a 18                	push   0x18
c001b4d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4d8:	50                   	push   eax
c001b4d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4de:	50                   	push   eax
c001b4df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4e4:	50                   	push   eax
c001b4e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4e9:	e8 30 fe ff ff       	call   c001b31e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4ee:	83 c4 2c             	add    esp,0x2c
c001b4f1:	0f b6 c4             	movzx  eax,ah
c001b4f4:	c3                   	ret    
c001b4f5:	90                   	nop

c001b4f6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b4f6:	55                   	push   ebp
c001b4f7:	57                   	push   edi
c001b4f8:	56                   	push   esi
c001b4f9:	53                   	push   ebx
c001b4fa:	83 ec 28             	sub    esp,0x28
c001b4fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b501:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b506:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b50b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b510:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b517:	8d 43 12             	lea    eax,[ebx+0x12]
c001b51a:	83 c3 10             	add    ebx,0x10
c001b51d:	0f b6 c0             	movzx  eax,al
c001b520:	0f b6 db             	movzx  ebx,bl
c001b523:	50                   	push   eax
c001b524:	51                   	push   ecx
c001b525:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b529:	57                   	push   edi
c001b52a:	55                   	push   ebp
c001b52b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b52f:	e8 ea fd ff ff       	call   c001b31e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b534:	83 c4 14             	add    esp,0x14
c001b537:	89 c6                	mov    esi,eax
c001b539:	53                   	push   ebx
c001b53a:	c1 e6 10             	shl    esi,0x10
c001b53d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b541:	51                   	push   ecx
c001b542:	57                   	push   edi
c001b543:	55                   	push   ebp
c001b544:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b548:	e8 d1 fd ff ff       	call   c001b31e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b54d:	83 c4 3c             	add    esp,0x3c
c001b550:	0f b7 c0             	movzx  eax,ax
c001b553:	5b                   	pop    ebx
c001b554:	09 f0                	or     eax,esi
c001b556:	5e                   	pop    esi
c001b557:	5f                   	pop    edi
c001b558:	5d                   	pop    ebp
c001b559:	c3                   	ret    

c001b55a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b55a:	55                   	push   ebp
c001b55b:	57                   	push   edi
c001b55c:	56                   	push   esi
c001b55d:	53                   	push   ebx
c001b55e:	83 ec 0c             	sub    esp,0xc
c001b561:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b565:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b569:	89 f5                	mov    ebp,esi
c001b56b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b571:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b575:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b579:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b57d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b581:	83 f9 01             	cmp    ecx,0x1
c001b584:	75 5d                	jne    c001b5e3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b586:	0f b6 c8             	movzx  ecx,al
c001b589:	0f b6 d2             	movzx  edx,dl
c001b58c:	c1 e1 10             	shl    ecx,0x10
c001b58f:	c1 e2 0b             	shl    edx,0xb
c001b592:	89 f0                	mov    eax,esi
c001b594:	25 fc 00 00 00       	and    eax,0xfc
c001b599:	09 c1                	or     ecx,eax
c001b59b:	89 e8                	mov    eax,ebp
c001b59d:	0f b6 c0             	movzx  eax,al
c001b5a0:	c1 e0 08             	shl    eax,0x8
c001b5a3:	09 c1                	or     ecx,eax
c001b5a5:	09 d1                	or     ecx,edx
c001b5a7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b5ac:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b5b2:	89 c8                	mov    eax,ecx
c001b5b4:	ef                   	out    dx,eax
c001b5b5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b5ba:	ed                   	in     eax,dx
c001b5bb:	0f b7 db             	movzx  ebx,bx
c001b5be:	83 e6 02             	and    esi,0x2
c001b5c1:	74 0a                	je     c001b5cd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b5c3:	0f b7 d0             	movzx  edx,ax
c001b5c6:	c1 e3 10             	shl    ebx,0x10
c001b5c9:	09 d3                	or     ebx,edx
c001b5cb:	eb 05                	jmp    c001b5d2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b5cd:	66 31 c0             	xor    ax,ax
c001b5d0:	09 c3                	or     ebx,eax
c001b5d2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b5d7:	89 c8                	mov    eax,ecx
c001b5d9:	ef                   	out    dx,eax
c001b5da:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b5df:	89 d8                	mov    eax,ebx
c001b5e1:	eb 41                	jmp    c001b624 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b5e3:	83 f9 02             	cmp    ecx,0x2
c001b5e6:	75 45                	jne    c001b62d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b5e8:	83 ec 0c             	sub    esp,0xc
c001b5eb:	0f b6 d2             	movzx  edx,dl
c001b5ee:	89 f1                	mov    ecx,esi
c001b5f0:	0f b6 c0             	movzx  eax,al
c001b5f3:	0f b6 f1             	movzx  esi,cl
c001b5f6:	89 e9                	mov    ecx,ebp
c001b5f8:	56                   	push   esi
c001b5f9:	0f b6 c9             	movzx  ecx,cl
c001b5fc:	51                   	push   ecx
c001b5fd:	52                   	push   edx
c001b5fe:	50                   	push   eax
c001b5ff:	57                   	push   edi
c001b600:	e8 a3 fc ff ff       	call   c001b2a8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b605:	89 c2                	mov    edx,eax
c001b607:	ed                   	in     eax,dx
c001b608:	83 c4 20             	add    esp,0x20
c001b60b:	0f b7 db             	movzx  ebx,bx
c001b60e:	f6 c2 02             	test   dl,0x2
c001b611:	74 0c                	je     c001b61f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b613:	0f b7 c8             	movzx  ecx,ax
c001b616:	89 d8                	mov    eax,ebx
c001b618:	c1 e0 10             	shl    eax,0x10
c001b61b:	09 c8                	or     eax,ecx
c001b61d:	eb 05                	jmp    c001b624 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b61f:	66 31 c0             	xor    ax,ax
c001b622:	09 d8                	or     eax,ebx
c001b624:	ef                   	out    dx,eax
c001b625:	83 c4 0c             	add    esp,0xc
c001b628:	5b                   	pop    ebx
c001b629:	5e                   	pop    esi
c001b62a:	5f                   	pop    edi
c001b62b:	5d                   	pop    ebp
c001b62c:	c3                   	ret    
c001b62d:	c7 44 24 20 0b 31 02 c0 	mov    DWORD PTR [esp+0x20],0xc002310b
c001b635:	83 c4 0c             	add    esp,0xc
c001b638:	5b                   	pop    ebx
c001b639:	5e                   	pop    esi
c001b63a:	5f                   	pop    edi
c001b63b:	5d                   	pop    ebp
c001b63c:	e9 9e 5f ff ff       	jmp    c00115df <KePanic(char const*)>
c001b641:	90                   	nop

c001b642 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b642:	55                   	push   ebp
c001b643:	57                   	push   edi
c001b644:	56                   	push   esi
c001b645:	53                   	push   ebx
c001b646:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b64c:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b653:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b65a:	0f 85 bd 00 00 00    	jne    c001b71d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b660:	83 ec 0c             	sub    esp,0xc
c001b663:	68 14 01 00 00       	push   0x114
c001b668:	e8 49 c4 fe ff       	call   c0007ab6 <malloc>
c001b66d:	83 c4 0c             	add    esp,0xc
c001b670:	89 c3                	mov    ebx,eax
c001b672:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b678:	68 11 31 02 c0       	push   0xc0023111
c001b67d:	50                   	push   eax
c001b67e:	e8 89 04 ff ff       	call   c000bb0c <File::File(char const*, Process*)>
c001b683:	83 c4 10             	add    esp,0x10
c001b686:	85 db                	test   ebx,ebx
c001b688:	0f 84 67 02 00 00    	je     c001b8f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b68e:	56                   	push   esi
c001b68f:	56                   	push   esi
c001b690:	6a 01                	push   0x1
c001b692:	53                   	push   ebx
c001b693:	e8 92 04 ff ff       	call   c000bb2a <File::open(FileOpenMode)>
c001b698:	83 c4 10             	add    esp,0x10
c001b69b:	85 c0                	test   eax,eax
c001b69d:	0f 85 52 02 00 00    	jne    c001b8f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b6a3:	52                   	push   edx
c001b6a4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b6a8:	50                   	push   eax
c001b6a9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6ad:	50                   	push   eax
c001b6ae:	53                   	push   ebx
c001b6af:	e8 78 07 ff ff       	call   c000be2c <File::stat(unsigned long long*, bool*)>
c001b6b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b6b8:	40                   	inc    eax
c001b6b9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6bc:	e8 f5 c3 fe ff       	call   c0007ab6 <malloc>
c001b6c1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b6c5:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b6ca:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b6ce:	59                   	pop    ecx
c001b6cf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6d1:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b6d5:	51                   	push   ecx
c001b6d6:	50                   	push   eax
c001b6d7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b6db:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b6df:	53                   	push   ebx
c001b6e0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b6e3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b6e7:	83 c4 20             	add    esp,0x20
c001b6ea:	89 c8                	mov    eax,ecx
c001b6ec:	99                   	cdq    
c001b6ed:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b6f1:	0f 85 fe 01 00 00    	jne    c001b8f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b6f7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b6fb:	0f 85 f4 01 00 00    	jne    c001b8f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b701:	83 ec 0c             	sub    esp,0xc
c001b704:	53                   	push   ebx
c001b705:	e8 7e 04 ff ff       	call   c000bb88 <File::close()>
c001b70a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b70e:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b715:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b71a:	83 c4 10             	add    esp,0x10
c001b71d:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b722:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b728:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b72c:	31 f6                	xor    esi,esi
c001b72e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b736:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b73d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b742:	31 c9                	xor    ecx,ecx
c001b744:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b74c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b751:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b759:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b75d:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b765:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b769:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b76d:	0f 8e 82 01 00 00    	jle    c001b8f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b773:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b776:	d4 40                	aam    0x40
c001b778:	d5 39                	aad    0x39
c001b77a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b77e:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b782:	d4 40                	aam    0x40
c001b784:	d5 39                	aad    0x39
c001b786:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b78a:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b78e:	d4 40                	aam    0x40
c001b790:	d5 39                	aad    0x39
c001b792:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b796:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b79a:	d4 40                	aam    0x40
c001b79c:	d5 39                	aad    0x39
c001b79e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b7a2:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b7a6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b7aa:	3c 56                	cmp    al,0x56
c001b7ac:	74 43                	je     c001b7f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b7ae:	d4 40                	aam    0x40
c001b7b0:	d5 39                	aad    0x39
c001b7b2:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b7b5:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b7b9:	0f b6 c9             	movzx  ecx,cl
c001b7bc:	c1 e1 04             	shl    ecx,0x4
c001b7bf:	d4 40                	aam    0x40
c001b7c1:	d5 39                	aad    0x39
c001b7c3:	83 e8 30             	sub    eax,0x30
c001b7c6:	0f b6 c0             	movzx  eax,al
c001b7c9:	09 c1                	or     ecx,eax
c001b7cb:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b7cf:	c1 e1 04             	shl    ecx,0x4
c001b7d2:	d4 40                	aam    0x40
c001b7d4:	d5 39                	aad    0x39
c001b7d6:	83 e8 30             	sub    eax,0x30
c001b7d9:	0f b6 c0             	movzx  eax,al
c001b7dc:	09 c1                	or     ecx,eax
c001b7de:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b7e2:	c1 e1 04             	shl    ecx,0x4
c001b7e5:	d4 40                	aam    0x40
c001b7e7:	d5 39                	aad    0x39
c001b7e9:	83 e8 30             	sub    eax,0x30
c001b7ec:	0f b6 c0             	movzx  eax,al
c001b7ef:	09 c1                	or     ecx,eax
c001b7f1:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b7f5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b7f9:	3c 58                	cmp    al,0x58
c001b7fb:	74 47                	je     c001b844 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b7fd:	d4 40                	aam    0x40
c001b7ff:	d5 39                	aad    0x39
c001b801:	8d 50 d0             	lea    edx,[eax-0x30]
c001b804:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b808:	0f b6 d2             	movzx  edx,dl
c001b80b:	c1 e2 04             	shl    edx,0x4
c001b80e:	d4 40                	aam    0x40
c001b810:	d5 39                	aad    0x39
c001b812:	83 e8 30             	sub    eax,0x30
c001b815:	0f b6 c0             	movzx  eax,al
c001b818:	09 c2                	or     edx,eax
c001b81a:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b81e:	c1 e2 04             	shl    edx,0x4
c001b821:	d4 40                	aam    0x40
c001b823:	d5 39                	aad    0x39
c001b825:	83 e8 30             	sub    eax,0x30
c001b828:	0f b6 c0             	movzx  eax,al
c001b82b:	09 c2                	or     edx,eax
c001b82d:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b831:	c1 e2 04             	shl    edx,0x4
c001b834:	d4 40                	aam    0x40
c001b836:	d5 39                	aad    0x39
c001b838:	83 e8 30             	sub    eax,0x30
c001b83b:	0f b6 c0             	movzx  eax,al
c001b83e:	09 c2                	or     edx,eax
c001b840:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b844:	83 c6 10             	add    esi,0x10
c001b847:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b84b:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b84f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b853:	83 fa 0a             	cmp    edx,0xa
c001b856:	74 0b                	je     c001b863 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b858:	47                   	inc    edi
c001b859:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b85d:	75 19                	jne    c001b878 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b85f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b863:	31 c0                	xor    eax,eax
c001b865:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b86a:	0f 94 c0             	sete   al
c001b86d:	01 c6                	add    esi,eax
c001b86f:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b874:	75 0b                	jne    c001b881 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b876:	eb 14                	jmp    c001b88c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b878:	46                   	inc    esi
c001b879:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b87c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b87f:	eb ca                	jmp    c001b84b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b881:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b886:	0f 85 dd fe ff ff    	jne    c001b769 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b88c:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b891:	74 10                	je     c001b8a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b893:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b898:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b89d:	0f 85 c6 fe ff ff    	jne    c001b769 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8a7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b8ab:	83 e8 30             	sub    eax,0x30
c001b8ae:	83 ef 30             	sub    edi,0x30
c001b8b1:	c1 e0 04             	shl    eax,0x4
c001b8b4:	09 f8                	or     eax,edi
c001b8b6:	0f b6 c0             	movzx  eax,al
c001b8b9:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b8bd:	0f 85 a6 fe ff ff    	jne    c001b769 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8c7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b8cb:	83 e8 30             	sub    eax,0x30
c001b8ce:	83 ef 30             	sub    edi,0x30
c001b8d1:	c1 e0 04             	shl    eax,0x4
c001b8d4:	09 f8                	or     eax,edi
c001b8d6:	0f b6 c0             	movzx  eax,al
c001b8d9:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b8dd:	0f 85 86 fe ff ff    	jne    c001b769 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8e3:	50                   	push   eax
c001b8e4:	50                   	push   eax
c001b8e5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b8e9:	50                   	push   eax
c001b8ea:	55                   	push   ebp
c001b8eb:	e8 50 4d fe ff       	call   c0000640 <strcpy>
c001b8f0:	83 c4 10             	add    esp,0x10
c001b8f3:	eb 06                	jmp    c001b8fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b8f5:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b8f9:	31 ed                	xor    ebp,ebp
c001b8fb:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b901:	89 e8                	mov    eax,ebp
c001b903:	5b                   	pop    ebx
c001b904:	5e                   	pop    esi
c001b905:	5f                   	pop    edi
c001b906:	5d                   	pop    ebp
c001b907:	c3                   	ret    

c001b908 <PCI::checkBus(unsigned char)>:
c001b908:	56                   	push   esi
c001b909:	53                   	push   ebx
c001b90a:	31 db                	xor    ebx,ebx
c001b90c:	51                   	push   ecx
c001b90d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b912:	52                   	push   edx
c001b913:	53                   	push   ebx
c001b914:	43                   	inc    ebx
c001b915:	56                   	push   esi
c001b916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b91a:	e8 03 03 00 00       	call   c001bc22 <PCI::checkDevice(unsigned char, unsigned char)>
c001b91f:	83 c4 10             	add    esp,0x10
c001b922:	83 fb 20             	cmp    ebx,0x20
c001b925:	75 eb                	jne    c001b912 <PCI::checkBus(unsigned char)+0xa>
c001b927:	58                   	pop    eax
c001b928:	5b                   	pop    ebx
c001b929:	5e                   	pop    esi
c001b92a:	c3                   	ret    
c001b92b:	90                   	nop

c001b92c <PCI::foundDevice(PCIDeviceInfo)>:
c001b92c:	55                   	push   ebp
c001b92d:	57                   	push   edi
c001b92e:	56                   	push   esi
c001b92f:	53                   	push   ebx
c001b930:	83 ec 1c             	sub    esp,0x1c
c001b933:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b938:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b93c:	3d ff ff 00 00       	cmp    eax,0xffff
c001b941:	0f 84 57 01 00 00    	je     c001ba9e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b947:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b94c:	66 3d 06 04          	cmp    ax,0x406
c001b950:	75 2c                	jne    c001b97e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b952:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b957:	50                   	push   eax
c001b958:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b95d:	50                   	push   eax
c001b95e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b963:	50                   	push   eax
c001b964:	53                   	push   ebx
c001b965:	e8 64 fb ff ff       	call   c001b4ce <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b96a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b96e:	0f b6 c0             	movzx  eax,al
c001b971:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b975:	83 c4 2c             	add    esp,0x2c
c001b978:	5b                   	pop    ebx
c001b979:	5e                   	pop    esi
c001b97a:	5f                   	pop    edi
c001b97b:	5d                   	pop    ebp
c001b97c:	eb 8a                	jmp    c001b908 <PCI::checkBus(unsigned char)>
c001b97e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b982:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b988:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b98c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b990:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b995:	85 d2                	test   edx,edx
c001b997:	74 36                	je     c001b9cf <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b999:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b99c:	85 c9                	test   ecx,ecx
c001b99e:	74 2b                	je     c001b9cb <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b9a0:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b9a6:	31 ee                	xor    esi,ebp
c001b9a8:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b9ae:	75 1b                	jne    c001b9cb <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b9b0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b9b4:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b9ba:	75 0f                	jne    c001b9cb <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b9bc:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b9c3:	39 f9                	cmp    ecx,edi
c001b9c5:	0f 84 d3 00 00 00    	je     c001ba9e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b9cb:	8b 12                	mov    edx,DWORD PTR [edx]
c001b9cd:	eb c6                	jmp    c001b995 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b9cf:	3d 01 06 00 00       	cmp    eax,0x601
c001b9d4:	75 19                	jne    c001b9ef <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b9d6:	83 ec 0c             	sub    esp,0xc
c001b9d9:	68 64 01 00 00       	push   0x164
c001b9de:	e8 d3 c0 fe ff       	call   c0007ab6 <malloc>
c001b9e3:	89 c5                	mov    ebp,eax
c001b9e5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9e8:	e8 a1 0e 00 00       	call   c001c88e <SATABus::SATABus()>
c001b9ed:	eb 1e                	jmp    c001ba0d <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b9ef:	3d 01 01 00 00       	cmp    eax,0x101
c001b9f4:	75 62                	jne    c001ba58 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b9f6:	83 ec 0c             	sub    esp,0xc
c001b9f9:	68 70 02 00 00       	push   0x270
c001b9fe:	e8 b3 c0 fe ff       	call   c0007ab6 <malloc>
c001ba03:	89 c5                	mov    ebp,eax
c001ba05:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba08:	e8 e5 02 00 00       	call   c001bcf2 <IDE::IDE()>
c001ba0d:	5f                   	pop    edi
c001ba0e:	58                   	pop    eax
c001ba0f:	55                   	push   ebp
c001ba10:	53                   	push   ebx
c001ba11:	e8 70 0f ff ff       	call   c000c986 <Device::addChild(Device*)>
c001ba16:	83 ec 1c             	sub    esp,0x1c
c001ba19:	b9 09 00 00 00       	mov    ecx,0x9
c001ba1e:	fc                   	cld    
c001ba1f:	89 e7                	mov    edi,esp
c001ba21:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ba25:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba27:	55                   	push   ebp
c001ba28:	e8 9f 0e ff ff       	call   c000c8cc <Device::preOpenPCI(PCIDeviceInfo)>
c001ba2d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba30:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001ba34:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001ba3c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001ba44:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001ba4c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ba4f:	83 c4 4c             	add    esp,0x4c
c001ba52:	5b                   	pop    ebx
c001ba53:	5e                   	pop    esi
c001ba54:	5f                   	pop    edi
c001ba55:	5d                   	pop    ebp
c001ba56:	ff e0                	jmp    eax
c001ba58:	83 ec 0c             	sub    esp,0xc
c001ba5b:	68 58 01 00 00       	push   0x158
c001ba60:	e8 51 c0 fe ff       	call   c0007ab6 <malloc>
c001ba65:	89 c5                	mov    ebp,eax
c001ba67:	58                   	pop    eax
c001ba68:	5a                   	pop    edx
c001ba69:	68 2a 31 02 c0       	push   0xc002312a
c001ba6e:	55                   	push   ebp
c001ba6f:	e8 b0 11 ff ff       	call   c000cc24 <DriverlessDevice::DriverlessDevice(char const*)>
c001ba74:	59                   	pop    ecx
c001ba75:	5e                   	pop    esi
c001ba76:	55                   	push   ebp
c001ba77:	53                   	push   ebx
c001ba78:	e8 09 0f ff ff       	call   c000c986 <Device::addChild(Device*)>
c001ba7d:	83 c4 10             	add    esp,0x10
c001ba80:	b9 09 00 00 00       	mov    ecx,0x9
c001ba85:	fc                   	cld    
c001ba86:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001ba8a:	89 fe                	mov    esi,edi
c001ba8c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba8e:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001ba92:	83 c4 1c             	add    esp,0x1c
c001ba95:	5b                   	pop    ebx
c001ba96:	5e                   	pop    esi
c001ba97:	5f                   	pop    edi
c001ba98:	5d                   	pop    ebp
c001ba99:	e9 2e 0e ff ff       	jmp    c000c8cc <Device::preOpenPCI(PCIDeviceInfo)>
c001ba9e:	83 c4 1c             	add    esp,0x1c
c001baa1:	5b                   	pop    ebx
c001baa2:	5e                   	pop    esi
c001baa3:	5f                   	pop    edi
c001baa4:	5d                   	pop    ebp
c001baa5:	c3                   	ret    

c001baa6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001baa6:	55                   	push   ebp
c001baa7:	57                   	push   edi
c001baa8:	56                   	push   esi
c001baa9:	53                   	push   ebx
c001baaa:	83 ec 68             	sub    esp,0x68
c001baad:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bab1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bab8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001babc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bac3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bac8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bacc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bad3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bad8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001badc:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bae1:	6a 0c                	push   0xc
c001bae3:	57                   	push   edi
c001bae4:	53                   	push   ebx
c001bae5:	56                   	push   esi
c001bae6:	55                   	push   ebp
c001bae7:	e8 32 f8 ff ff       	call   c001b31e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001baec:	83 c4 20             	add    esp,0x20
c001baef:	57                   	push   edi
c001baf0:	53                   	push   ebx
c001baf1:	56                   	push   esi
c001baf2:	55                   	push   ebp
c001baf3:	e8 1c f9 ff ff       	call   c001b414 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001baf8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bafd:	57                   	push   edi
c001bafe:	53                   	push   ebx
c001baff:	56                   	push   esi
c001bb00:	55                   	push   ebp
c001bb01:	e8 a4 f9 ff ff       	call   c001b4aa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bb06:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bb0a:	83 c4 14             	add    esp,0x14
c001bb0d:	6a 3c                	push   0x3c
c001bb0f:	57                   	push   edi
c001bb10:	53                   	push   ebx
c001bb11:	56                   	push   esi
c001bb12:	55                   	push   ebp
c001bb13:	e8 06 f8 ff ff       	call   c001b31e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb18:	0f b6 c4             	movzx  eax,ah
c001bb1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bb1f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bb23:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bb27:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bb2c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bb32:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bb38:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb3c:	83 c4 20             	add    esp,0x20
c001bb3f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bb44:	74 30                	je     c001bb76 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb46:	31 c0                	xor    eax,eax
c001bb48:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bb4c:	7e 28                	jle    c001bb76 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb4e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bb56:	39 cb                	cmp    ebx,ecx
c001bb58:	75 19                	jne    c001bb73 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb5a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bb62:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bb66:	75 0b                	jne    c001bb73 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb68:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bb6f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bb73:	40                   	inc    eax
c001bb74:	eb d2                	jmp    c001bb48 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bb76:	31 d2                	xor    edx,edx
c001bb78:	83 ec 0c             	sub    esp,0xc
c001bb7b:	57                   	push   edi
c001bb7c:	53                   	push   ebx
c001bb7d:	56                   	push   esi
c001bb7e:	52                   	push   edx
c001bb7f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bb83:	55                   	push   ebp
c001bb84:	e8 6d f9 ff ff       	call   c001b4f6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb89:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bb8d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bb91:	42                   	inc    edx
c001bb92:	83 c4 20             	add    esp,0x20
c001bb95:	83 fa 06             	cmp    edx,0x6
c001bb98:	75 de                	jne    c001bb78 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bb9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bb9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bba2:	c1 e2 08             	shl    edx,0x8
c001bba5:	83 ec 0c             	sub    esp,0xc
c001bba8:	0f b6 c4             	movzx  eax,ah
c001bbab:	09 d0                	or     eax,edx
c001bbad:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bbb2:	6a 02                	push   0x2
c001bbb4:	57                   	push   edi
c001bbb5:	53                   	push   ebx
c001bbb6:	56                   	push   esi
c001bbb7:	55                   	push   ebp
c001bbb8:	e8 61 f7 ff ff       	call   c001b31e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbbd:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bbc2:	83 c4 20             	add    esp,0x20
c001bbc5:	57                   	push   edi
c001bbc6:	53                   	push   ebx
c001bbc7:	56                   	push   esi
c001bbc8:	55                   	push   ebp
c001bbc9:	e8 90 f8 ff ff       	call   c001b45e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bbce:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bbd2:	57                   	push   edi
c001bbd3:	53                   	push   ebx
c001bbd4:	56                   	push   esi
c001bbd5:	55                   	push   ebp
c001bbd6:	e8 ed f7 ff ff       	call   c001b3c8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bbdb:	b9 09 00 00 00       	mov    ecx,0x9
c001bbe0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bbe5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bbe9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bbed:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bbf1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bbf5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bbf9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bbfd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bc01:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bc05:	83 ec 0c             	sub    esp,0xc
c001bc08:	fc                   	cld    
c001bc09:	89 e7                	mov    edi,esp
c001bc0b:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bc0f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bc11:	55                   	push   ebp
c001bc12:	e8 15 fd ff ff       	call   c001b92c <PCI::foundDevice(PCIDeviceInfo)>
c001bc17:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bc1d:	5b                   	pop    ebx
c001bc1e:	5e                   	pop    esi
c001bc1f:	5f                   	pop    edi
c001bc20:	5d                   	pop    ebp
c001bc21:	c3                   	ret    

c001bc22 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bc22:	55                   	push   ebp
c001bc23:	57                   	push   edi
c001bc24:	56                   	push   esi
c001bc25:	53                   	push   ebx
c001bc26:	83 ec 0c             	sub    esp,0xc
c001bc29:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bc2d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bc32:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bc37:	6a 00                	push   0x0
c001bc39:	56                   	push   esi
c001bc3a:	57                   	push   edi
c001bc3b:	55                   	push   ebp
c001bc3c:	e8 87 f7 ff ff       	call   c001b3c8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc41:	6a 00                	push   0x0
c001bc43:	56                   	push   esi
c001bc44:	57                   	push   edi
c001bc45:	55                   	push   ebp
c001bc46:	e8 5b fe ff ff       	call   c001baa6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc4b:	83 c4 20             	add    esp,0x20
c001bc4e:	6a 00                	push   0x0
c001bc50:	56                   	push   esi
c001bc51:	57                   	push   edi
c001bc52:	55                   	push   ebp
c001bc53:	e8 94 f7 ff ff       	call   c001b3ec <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc58:	83 c4 10             	add    esp,0x10
c001bc5b:	a8 80                	test   al,0x80
c001bc5d:	74 2d                	je     c001bc8c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bc5f:	bb 01 00 00 00       	mov    ebx,0x1
c001bc64:	53                   	push   ebx
c001bc65:	56                   	push   esi
c001bc66:	57                   	push   edi
c001bc67:	55                   	push   ebp
c001bc68:	e8 5b f7 ff ff       	call   c001b3c8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc6d:	83 c4 10             	add    esp,0x10
c001bc70:	0f b7 c0             	movzx  eax,ax
c001bc73:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc78:	74 0c                	je     c001bc86 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bc7a:	53                   	push   ebx
c001bc7b:	56                   	push   esi
c001bc7c:	57                   	push   edi
c001bc7d:	55                   	push   ebp
c001bc7e:	e8 23 fe ff ff       	call   c001baa6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc83:	83 c4 10             	add    esp,0x10
c001bc86:	43                   	inc    ebx
c001bc87:	83 fb 08             	cmp    ebx,0x8
c001bc8a:	75 d8                	jne    c001bc64 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bc8c:	83 c4 0c             	add    esp,0xc
c001bc8f:	5b                   	pop    ebx
c001bc90:	5e                   	pop    esi
c001bc91:	5f                   	pop    edi
c001bc92:	5d                   	pop    ebp
c001bc93:	c3                   	ret    

c001bc94 <PCI::detect()>:
c001bc94:	56                   	push   esi
c001bc95:	53                   	push   ebx
c001bc96:	53                   	push   ebx
c001bc97:	31 db                	xor    ebx,ebx
c001bc99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc9d:	6a 00                	push   0x0
c001bc9f:	6a 00                	push   0x0
c001bca1:	6a 00                	push   0x0
c001bca3:	56                   	push   esi
c001bca4:	e8 43 f7 ff ff       	call   c001b3ec <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bca9:	83 c4 10             	add    esp,0x10
c001bcac:	a8 80                	test   al,0x80
c001bcae:	75 21                	jne    c001bcd1 <PCI::detect()+0x3d>
c001bcb0:	51                   	push   ecx
c001bcb1:	51                   	push   ecx
c001bcb2:	6a 00                	push   0x0
c001bcb4:	56                   	push   esi
c001bcb5:	e8 4e fc ff ff       	call   c001b908 <PCI::checkBus(unsigned char)>
c001bcba:	83 c4 10             	add    esp,0x10
c001bcbd:	eb 2a                	jmp    c001bce9 <PCI::detect()+0x55>
c001bcbf:	52                   	push   edx
c001bcc0:	52                   	push   edx
c001bcc1:	53                   	push   ebx
c001bcc2:	43                   	inc    ebx
c001bcc3:	56                   	push   esi
c001bcc4:	e8 3f fc ff ff       	call   c001b908 <PCI::checkBus(unsigned char)>
c001bcc9:	83 c4 10             	add    esp,0x10
c001bccc:	83 fb 08             	cmp    ebx,0x8
c001bccf:	74 18                	je     c001bce9 <PCI::detect()+0x55>
c001bcd1:	53                   	push   ebx
c001bcd2:	6a 00                	push   0x0
c001bcd4:	6a 00                	push   0x0
c001bcd6:	56                   	push   esi
c001bcd7:	e8 ec f6 ff ff       	call   c001b3c8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcdc:	83 c4 10             	add    esp,0x10
c001bcdf:	0f b7 c0             	movzx  eax,ax
c001bce2:	3d ff ff 00 00       	cmp    eax,0xffff
c001bce7:	74 d6                	je     c001bcbf <PCI::detect()+0x2b>
c001bce9:	58                   	pop    eax
c001bcea:	5b                   	pop    ebx
c001bceb:	5e                   	pop    esi
c001bcec:	c3                   	ret    
c001bced:	90                   	nop

c001bcee <IDE::close(int, int, void*)>:
c001bcee:	83 c8 ff             	or     eax,0xffffffff
c001bcf1:	c3                   	ret    

c001bcf2 <IDE::IDE()>:
c001bcf2:	83 ec 0c             	sub    esp,0xc
c001bcf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf9:	83 ec 08             	sub    esp,0x8
c001bcfc:	68 70 31 02 c0       	push   0xc0023170
c001bd01:	50                   	push   eax
c001bd02:	e8 c1 0f ff ff       	call   c000ccc8 <HardDiskController::HardDiskController(char const*)>
c001bd07:	83 c4 10             	add    esp,0x10
c001bd0a:	ba 00 32 02 c0       	mov    edx,0xc0023200
c001bd0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd13:	89 10                	mov    DWORD PTR [eax],edx
c001bd15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd19:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bd20:	90                   	nop
c001bd21:	83 c4 0c             	add    esp,0xc
c001bd24:	c3                   	ret    
c001bd25:	90                   	nop

c001bd26 <IDE::prepareInterrupt(unsigned char)>:
c001bd26:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd2f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bd37:	c3                   	ret    

c001bd38 <selectDrive(unsigned char, unsigned char)>:
c001bd38:	c3                   	ret    
c001bd39:	90                   	nop

c001bd3a <IDE::getBase(unsigned char)>:
c001bd3a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bd3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd43:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bd4b:	c3                   	ret    

c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bd4c:	55                   	push   ebp
c001bd4d:	57                   	push   edi
c001bd4e:	56                   	push   esi
c001bd4f:	53                   	push   ebx
c001bd50:	83 ec 1c             	sub    esp,0x1c
c001bd53:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bd57:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd5b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bd5e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bd62:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd66:	80 f9 03             	cmp    cl,0x3
c001bd69:	77 4f                	ja     c001bdba <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bd6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd6f:	0f b6 fa             	movzx  edi,dl
c001bd72:	0f b6 db             	movzx  ebx,bl
c001bd75:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bd78:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bd7d:	80 ca 80             	or     dl,0x80
c001bd80:	52                   	push   edx
c001bd81:	6a 0c                	push   0xc
c001bd83:	57                   	push   edi
c001bd84:	56                   	push   esi
c001bd85:	e8 c2 ff ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd8a:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bd8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd93:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bd97:	ee                   	out    dx,al
c001bd98:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bd9d:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001bda1:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bda5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bda9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bdb1:	83 c4 2c             	add    esp,0x2c
c001bdb4:	5b                   	pop    ebx
c001bdb5:	5e                   	pop    esi
c001bdb6:	5f                   	pop    edi
c001bdb7:	5d                   	pop    ebp
c001bdb8:	eb 92                	jmp    c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdba:	0f b6 cb             	movzx  ecx,bl
c001bdbd:	83 f9 07             	cmp    ecx,0x7
c001bdc0:	77 12                	ja     c001bdd4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bdc2:	0f b6 d2             	movzx  edx,dl
c001bdc5:	0f b6 db             	movzx  ebx,bl
c001bdc8:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001bdd0:	01 da                	add    edx,ebx
c001bdd2:	eb 2f                	jmp    c001be03 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bdd4:	83 f9 0d             	cmp    ecx,0xd
c001bdd7:	77 13                	ja     c001bdec <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bdd9:	0f b6 d2             	movzx  edx,dl
c001bddc:	0f b6 db             	movzx  ebx,bl
c001bddf:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001bde6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bdea:	eb 17                	jmp    c001be03 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bdec:	83 f9 15             	cmp    ecx,0x15
c001bdef:	77 13                	ja     c001be04 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bdf1:	0f b6 d2             	movzx  edx,dl
c001bdf4:	0f b6 db             	movzx  ebx,bl
c001bdf7:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001bdff:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001be03:	ee                   	out    dx,al
c001be04:	83 c4 1c             	add    esp,0x1c
c001be07:	5b                   	pop    ebx
c001be08:	5e                   	pop    esi
c001be09:	5f                   	pop    edi
c001be0a:	5d                   	pop    ebp
c001be0b:	c3                   	ret    

c001be0c <IDE::read(unsigned char, unsigned char)>:
c001be0c:	55                   	push   ebp
c001be0d:	57                   	push   edi
c001be0e:	56                   	push   esi
c001be0f:	53                   	push   ebx
c001be10:	83 ec 1c             	sub    esp,0x1c
c001be13:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be1b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001be1e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001be22:	3c 03                	cmp    al,0x3
c001be24:	77 40                	ja     c001be66 <IDE::read(unsigned char, unsigned char)+0x5a>
c001be26:	0f b6 f9             	movzx  edi,cl
c001be29:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001be2c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be31:	0c 80                	or     al,0x80
c001be33:	50                   	push   eax
c001be34:	6a 0c                	push   0xc
c001be36:	57                   	push   edi
c001be37:	56                   	push   esi
c001be38:	e8 0f ff ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be3d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001be42:	0f b6 d3             	movzx  edx,bl
c001be45:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be49:	ec                   	in     al,dx
c001be4a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001be4e:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001be53:	52                   	push   edx
c001be54:	6a 0c                	push   0xc
c001be56:	57                   	push   edi
c001be57:	56                   	push   esi
c001be58:	e8 ef fe ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be5d:	83 c4 20             	add    esp,0x20
c001be60:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001be64:	eb 4c                	jmp    c001beb2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001be66:	0f b6 d3             	movzx  edx,bl
c001be69:	83 fa 07             	cmp    edx,0x7
c001be6c:	77 12                	ja     c001be80 <IDE::read(unsigned char, unsigned char)+0x74>
c001be6e:	0f b6 c9             	movzx  ecx,cl
c001be71:	0f b6 d3             	movzx  edx,bl
c001be74:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001be7c:	01 c2                	add    edx,eax
c001be7e:	eb 31                	jmp    c001beb1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001be80:	83 fa 0d             	cmp    edx,0xd
c001be83:	77 13                	ja     c001be98 <IDE::read(unsigned char, unsigned char)+0x8c>
c001be85:	0f b6 c9             	movzx  ecx,cl
c001be88:	0f b6 d3             	movzx  edx,bl
c001be8b:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001be92:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001be96:	eb 19                	jmp    c001beb1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001be98:	31 c0                	xor    eax,eax
c001be9a:	83 fa 15             	cmp    edx,0x15
c001be9d:	77 13                	ja     c001beb2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001be9f:	0f b6 c9             	movzx  ecx,cl
c001bea2:	0f b6 d3             	movzx  edx,bl
c001bea5:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001bead:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001beb1:	ec                   	in     al,dx
c001beb2:	83 c4 1c             	add    esp,0x1c
c001beb5:	5b                   	pop    ebx
c001beb6:	5e                   	pop    esi
c001beb7:	5f                   	pop    edi
c001beb8:	5d                   	pop    ebp
c001beb9:	c3                   	ret    

c001beba <IDE::waitInterrupt(unsigned char)>:
c001beba:	55                   	push   ebp
c001bebb:	57                   	push   edi
c001bebc:	56                   	push   esi
c001bebd:	53                   	push   ebx
c001bebe:	31 db                	xor    ebx,ebx
c001bec0:	83 ec 0c             	sub    esp,0xc
c001bec3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bec7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001becc:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bed4:	89 e8                	mov    eax,ebp
c001bed6:	84 c0                	test   al,al
c001bed8:	75 30                	jne    c001bf0a <IDE::waitInterrupt(unsigned char)+0x50>
c001beda:	50                   	push   eax
c001bedb:	6a 0c                	push   0xc
c001bedd:	56                   	push   esi
c001bede:	57                   	push   edi
c001bedf:	e8 28 ff ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001bee4:	83 c4 10             	add    esp,0x10
c001bee7:	a8 01                	test   al,0x1
c001bee9:	75 27                	jne    c001bf12 <IDE::waitInterrupt(unsigned char)+0x58>
c001beeb:	f6 c3 04             	test   bl,0x4
c001beee:	75 12                	jne    c001bf02 <IDE::waitInterrupt(unsigned char)+0x48>
c001bef0:	83 fb 32             	cmp    ebx,0x32
c001bef3:	7e 0d                	jle    c001bf02 <IDE::waitInterrupt(unsigned char)+0x48>
c001bef5:	83 ec 0c             	sub    esp,0xc
c001bef8:	6a 64                	push   0x64
c001befa:	e8 b1 a4 ff ff       	call   c00163b0 <milliTenthSleep(unsigned int)>
c001beff:	83 c4 10             	add    esp,0x10
c001bf02:	83 fb 3c             	cmp    ebx,0x3c
c001bf05:	74 0b                	je     c001bf12 <IDE::waitInterrupt(unsigned char)+0x58>
c001bf07:	43                   	inc    ebx
c001bf08:	eb c2                	jmp    c001becc <IDE::waitInterrupt(unsigned char)+0x12>
c001bf0a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bf12:	83 c4 0c             	add    esp,0xc
c001bf15:	89 e8                	mov    eax,ebp
c001bf17:	5b                   	pop    ebx
c001bf18:	5e                   	pop    esi
c001bf19:	5f                   	pop    edi
c001bf1a:	5d                   	pop    ebp
c001bf1b:	c3                   	ret    

c001bf1c <ideChannel0IRQHandler(regs*, void*)>:
c001bf1c:	83 ec 10             	sub    esp,0x10
c001bf1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf23:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bf2a:	6a 07                	push   0x7
c001bf2c:	6a 00                	push   0x0
c001bf2e:	50                   	push   eax
c001bf2f:	e8 d8 fe ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001bf34:	83 c4 1c             	add    esp,0x1c
c001bf37:	c3                   	ret    

c001bf38 <ideChannel1IRQHandler(regs*, void*)>:
c001bf38:	83 ec 10             	sub    esp,0x10
c001bf3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf3f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bf46:	6a 07                	push   0x7
c001bf48:	6a 01                	push   0x1
c001bf4a:	50                   	push   eax
c001bf4b:	e8 bc fe ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001bf50:	83 c4 1c             	add    esp,0x1c
c001bf53:	c3                   	ret    

c001bf54 <IDE::enableIRQs(unsigned char, bool)>:
c001bf54:	57                   	push   edi
c001bf55:	b8 02 00 00 00       	mov    eax,0x2
c001bf5a:	56                   	push   esi
c001bf5b:	53                   	push   ebx
c001bf5c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf60:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bf64:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bf69:	74 02                	je     c001bf6d <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bf6b:	31 c0                	xor    eax,eax
c001bf6d:	0f b6 db             	movzx  ebx,bl
c001bf70:	bf 04 00 00 00       	mov    edi,0x4
c001bf75:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bf7c:	50                   	push   eax
c001bf7d:	6a 0c                	push   0xc
c001bf7f:	53                   	push   ebx
c001bf80:	56                   	push   esi
c001bf81:	e8 c6 fd ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf86:	83 c4 10             	add    esp,0x10
c001bf89:	50                   	push   eax
c001bf8a:	6a 0c                	push   0xc
c001bf8c:	53                   	push   ebx
c001bf8d:	56                   	push   esi
c001bf8e:	e8 79 fe ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001bf93:	83 c4 10             	add    esp,0x10
c001bf96:	4f                   	dec    edi
c001bf97:	75 f0                	jne    c001bf89 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bf99:	5b                   	pop    ebx
c001bf9a:	5e                   	pop    esi
c001bf9b:	5f                   	pop    edi
c001bf9c:	c3                   	ret    
c001bf9d:	90                   	nop

c001bf9e <IDE::open(int, int, void*)>:
c001bf9e:	55                   	push   ebp
c001bf9f:	57                   	push   edi
c001bfa0:	56                   	push   esi
c001bfa1:	53                   	push   ebx
c001bfa2:	83 ec 1c             	sub    esp,0x1c
c001bfa5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bfa9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bfb2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bfbb:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bfc2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bfc9:	0f 85 de 02 00 00    	jne    c001c2ad <IDE::open(int, int, void*)+0x30f>
c001bfcf:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bfd5:	88 04 24             	mov    BYTE PTR [esp],al
c001bfd8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bfdb:	83 e0 7f             	and    eax,0x7f
c001bfde:	83 f8 05             	cmp    eax,0x5
c001bfe1:	74 05                	je     c001bfe8 <IDE::open(int, int, void*)+0x4a>
c001bfe3:	83 f8 0f             	cmp    eax,0xf
c001bfe6:	75 32                	jne    c001c01a <IDE::open(int, int, void*)+0x7c>
c001bfe8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bfee:	83 e0 fc             	and    eax,0xfffffffc
c001bff1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bff8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bffe:	83 e0 fc             	and    eax,0xfffffffc
c001c001:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c008:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c00e:	83 e0 fc             	and    eax,0xfffffffc
c001c011:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c018:	eb 14                	jmp    c001c02e <IDE::open(int, int, void*)+0x90>
c001c01a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c024:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c02e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c035:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c03c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c040:	89 c6                	mov    esi,eax
c001c042:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c047:	c1 e6 10             	shl    esi,0x10
c001c04a:	89 e8                	mov    eax,ebp
c001c04c:	89 fa                	mov    edx,edi
c001c04e:	c1 e0 0b             	shl    eax,0xb
c001c051:	09 f0                	or     eax,esi
c001c053:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c05a:	c1 e6 08             	shl    esi,0x8
c001c05d:	09 c6                	or     esi,eax
c001c05f:	89 f0                	mov    eax,esi
c001c061:	0d 08 00 00 80       	or     eax,0x80000008
c001c066:	ef                   	out    dx,eax
c001c067:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c06c:	89 ca                	mov    edx,ecx
c001c06e:	ed                   	in     eax,dx
c001c06f:	c1 e8 10             	shr    eax,0x10
c001c072:	3d ff ff 00 00       	cmp    eax,0xffff
c001c077:	0f 84 f9 00 00 00    	je     c001c176 <IDE::open(int, int, void*)+0x1d8>
c001c07d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c083:	89 fa                	mov    edx,edi
c001c085:	89 f0                	mov    eax,esi
c001c087:	ef                   	out    dx,eax
c001c088:	b0 fe                	mov    al,0xfe
c001c08a:	89 ca                	mov    edx,ecx
c001c08c:	ee                   	out    dx,al
c001c08d:	89 f0                	mov    eax,esi
c001c08f:	89 fa                	mov    edx,edi
c001c091:	ef                   	out    dx,eax
c001c092:	89 ca                	mov    edx,ecx
c001c094:	ed                   	in     eax,dx
c001c095:	3c fe                	cmp    al,0xfe
c001c097:	0f 85 a9 00 00 00    	jne    c001c146 <IDE::open(int, int, void*)+0x1a8>
c001c09d:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c0a3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c0aa:	74 33                	je     c001c0df <IDE::open(int, int, void*)+0x141>
c001c0ac:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c0b2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c0b6:	40                   	inc    eax
c001c0b7:	83 ec 0c             	sub    esp,0xc
c001c0ba:	0f b6 c0             	movzx  eax,al
c001c0bd:	50                   	push   eax
c001c0be:	55                   	push   ebp
c001c0bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c0c3:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c0c9:	51                   	push   ecx
c001c0ca:	e8 29 38 ff ff       	call   c000f8f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c0cf:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c0d4:	83 c4 1c             	add    esp,0x1c
c001c0d7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c0dd:	eb 0a                	jmp    c001c0e9 <IDE::open(int, int, void*)+0x14b>
c001c0df:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c0e9:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c0f0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c0f7:	c1 e1 10             	shl    ecx,0x10
c001c0fa:	c1 e0 08             	shl    eax,0x8
c001c0fd:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c102:	09 c1                	or     ecx,eax
c001c104:	89 fa                	mov    edx,edi
c001c106:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c10d:	c1 e0 0b             	shl    eax,0xb
c001c110:	09 c1                	or     ecx,eax
c001c112:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c118:	89 c8                	mov    eax,ecx
c001c11a:	ef                   	out    dx,eax
c001c11b:	be fc 0c 00 00       	mov    esi,0xcfc
c001c120:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c126:	89 f2                	mov    edx,esi
c001c128:	ee                   	out    dx,al
c001c129:	89 c8                	mov    eax,ecx
c001c12b:	89 fa                	mov    edx,edi
c001c12d:	ef                   	out    dx,eax
c001c12e:	89 f2                	mov    edx,esi
c001c130:	ed                   	in     eax,dx
c001c131:	0f b6 c0             	movzx  eax,al
c001c134:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c13a:	74 4a                	je     c001c186 <IDE::open(int, int, void*)+0x1e8>
c001c13c:	83 ec 0c             	sub    esp,0xc
c001c13f:	68 88 31 02 c0       	push   0xc0023188
c001c144:	eb 38                	jmp    c001c17e <IDE::open(int, int, void*)+0x1e0>
c001c146:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c14f:	75 1b                	jne    c001c16c <IDE::open(int, int, void*)+0x1ce>
c001c151:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c155:	3d 80 00 00 00       	cmp    eax,0x80
c001c15a:	74 07                	je     c001c163 <IDE::open(int, int, void*)+0x1c5>
c001c15c:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c161:	75 09                	jne    c001c16c <IDE::open(int, int, void*)+0x1ce>
c001c163:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c16a:	eb 1a                	jmp    c001c186 <IDE::open(int, int, void*)+0x1e8>
c001c16c:	83 ec 0c             	sub    esp,0xc
c001c16f:	68 90 31 02 c0       	push   0xc0023190
c001c174:	eb 08                	jmp    c001c17e <IDE::open(int, int, void*)+0x1e0>
c001c176:	83 ec 0c             	sub    esp,0xc
c001c179:	68 c1 31 02 c0       	push   0xc00231c1
c001c17e:	e8 5c 54 ff ff       	call   c00115df <KePanic(char const*)>
c001c183:	83 c4 10             	add    esp,0x10
c001c186:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c18d:	74 1a                	je     c001c1a9 <IDE::open(int, int, void*)+0x20b>
c001c18f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c195:	83 e0 fc             	and    eax,0xfffffffc
c001c198:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c19f:	83 c0 08             	add    eax,0x8
c001c1a2:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c1a9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c1af:	89 c2                	mov    edx,eax
c001c1b1:	83 e2 0f             	and    edx,0xf
c001c1b4:	83 fa 08             	cmp    edx,0x8
c001c1b7:	75 0a                	jne    c001c1c3 <IDE::open(int, int, void*)+0x225>
c001c1b9:	83 e8 02             	sub    eax,0x2
c001c1bc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c1c3:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c1c9:	89 c2                	mov    edx,eax
c001c1cb:	83 e2 0f             	and    edx,0xf
c001c1ce:	83 fa 08             	cmp    edx,0x8
c001c1d1:	75 0a                	jne    c001c1dd <IDE::open(int, int, void*)+0x23f>
c001c1d3:	83 e8 02             	sub    eax,0x2
c001c1d6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c1dd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c1e4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c1eb:	89 d0                	mov    eax,edx
c001c1ed:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c1f0:	8d 7a 01             	lea    edi,[edx+0x1]
c001c1f3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c1f7:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c1fb:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c1ff:	83 e1 3f             	and    ecx,0x3f
c001c202:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c206:	89 f9                	mov    ecx,edi
c001c208:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c20f:	0f b6 c9             	movzx  ecx,cl
c001c212:	8d 78 02             	lea    edi,[eax+0x2]
c001c215:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c218:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c21c:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c220:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c224:	83 e2 3f             	and    edx,0x3f
c001c227:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c22b:	89 f9                	mov    ecx,edi
c001c22d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c233:	0f b6 d1             	movzx  edx,cl
c001c236:	8d 78 03             	lea    edi,[eax+0x3]
c001c239:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c23c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c240:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c244:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c248:	83 e1 3f             	and    ecx,0x3f
c001c24b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c24f:	89 f9                	mov    ecx,edi
c001c251:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c257:	0f b6 c9             	movzx  ecx,cl
c001c25a:	8d 78 04             	lea    edi,[eax+0x4]
c001c25d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c260:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c264:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c268:	89 fa                	mov    edx,edi
c001c26a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c270:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c274:	83 e2 3f             	and    edx,0x3f
c001c277:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c27b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c282:	66 85 f6             	test   si,si
c001c285:	74 65                	je     c001c2ec <IDE::open(int, int, void*)+0x34e>
c001c287:	89 f9                	mov    ecx,edi
c001c289:	83 c0 05             	add    eax,0x5
c001c28c:	0f b6 d1             	movzx  edx,cl
c001c28f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c292:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c296:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c29a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c2a0:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c2a4:	83 e0 3f             	and    eax,0x3f
c001c2a7:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c2ab:	eb 3f                	jmp    c001c2ec <IDE::open(int, int, void*)+0x34e>
c001c2ad:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c2b3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c2ba:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c2c1:	05 06 02 00 00       	add    eax,0x206
c001c2c6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c2cd:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c2d4:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c2db:	05 06 02 00 00       	add    eax,0x206
c001c2e0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c2e7:	e9 bd fe ff ff       	jmp    c001c1a9 <IDE::open(int, int, void*)+0x20b>
c001c2ec:	50                   	push   eax
c001c2ed:	50                   	push   eax
c001c2ee:	6a 00                	push   0x0
c001c2f0:	53                   	push   ebx
c001c2f1:	e8 30 fa ff ff       	call   c001bd26 <IDE::prepareInterrupt(unsigned char)>
c001c2f6:	5a                   	pop    edx
c001c2f7:	59                   	pop    ecx
c001c2f8:	6a 01                	push   0x1
c001c2fa:	53                   	push   ebx
c001c2fb:	e8 26 fa ff ff       	call   c001bd26 <IDE::prepareInterrupt(unsigned char)>
c001c300:	83 c4 0c             	add    esp,0xc
c001c303:	6a 00                	push   0x0
c001c305:	6a 00                	push   0x0
c001c307:	53                   	push   ebx
c001c308:	e8 47 fc ff ff       	call   c001bf54 <IDE::enableIRQs(unsigned char, bool)>
c001c30d:	83 c4 0c             	add    esp,0xc
c001c310:	6a 00                	push   0x0
c001c312:	6a 01                	push   0x1
c001c314:	53                   	push   ebx
c001c315:	e8 3a fc ff ff       	call   c001bf54 <IDE::enableIRQs(unsigned char, bool)>
c001c31a:	83 c4 10             	add    esp,0x10
c001c31d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c324:	74 34                	je     c001c35a <IDE::open(int, int, void*)+0x3bc>
c001c326:	83 ec 0c             	sub    esp,0xc
c001c329:	53                   	push   ebx
c001c32a:	6a 01                	push   0x1
c001c32c:	68 1c bf 01 c0       	push   0xc001bf1c
c001c331:	6a 0e                	push   0xe
c001c333:	53                   	push   ebx
c001c334:	e8 f9 05 ff ff       	call   c000c932 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c339:	83 c4 14             	add    esp,0x14
c001c33c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c342:	53                   	push   ebx
c001c343:	6a 01                	push   0x1
c001c345:	68 38 bf 01 c0       	push   0xc001bf38
c001c34a:	6a 0f                	push   0xf
c001c34c:	53                   	push   ebx
c001c34d:	e8 e0 05 ff ff       	call   c000c932 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c352:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c358:	eb 38                	jmp    c001c392 <IDE::open(int, int, void*)+0x3f4>
c001c35a:	83 ec 0c             	sub    esp,0xc
c001c35d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c367:	53                   	push   ebx
c001c368:	6a 00                	push   0x0
c001c36a:	68 1c bf 01 c0       	push   0xc001bf1c
c001c36f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c375:	53                   	push   ebx
c001c376:	e8 b7 05 ff ff       	call   c000c932 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c37b:	83 c4 14             	add    esp,0x14
c001c37e:	53                   	push   ebx
c001c37f:	6a 00                	push   0x0
c001c381:	68 38 bf 01 c0       	push   0xc001bf38
c001c386:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c38c:	53                   	push   ebx
c001c38d:	e8 a0 05 ff ff       	call   c000c932 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c392:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c394:	83 c4 20             	add    esp,0x20
c001c397:	83 ec 0c             	sub    esp,0xc
c001c39a:	53                   	push   ebx
c001c39b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c39e:	83 c4 0c             	add    esp,0xc
c001c3a1:	6a 07                	push   0x7
c001c3a3:	6a 00                	push   0x0
c001c3a5:	53                   	push   ebx
c001c3a6:	e8 61 fa ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c3ab:	83 c4 0c             	add    esp,0xc
c001c3ae:	6a 07                	push   0x7
c001c3b0:	6a 01                	push   0x1
c001c3b2:	53                   	push   ebx
c001c3b3:	e8 54 fa ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c3b8:	83 c4 0c             	add    esp,0xc
c001c3bb:	6a 01                	push   0x1
c001c3bd:	6a 00                	push   0x0
c001c3bf:	53                   	push   ebx
c001c3c0:	e8 8f fb ff ff       	call   c001bf54 <IDE::enableIRQs(unsigned char, bool)>
c001c3c5:	83 c4 0c             	add    esp,0xc
c001c3c8:	6a 01                	push   0x1
c001c3ca:	6a 01                	push   0x1
c001c3cc:	53                   	push   ebx
c001c3cd:	e8 82 fb ff ff       	call   c001bf54 <IDE::enableIRQs(unsigned char, bool)>
c001c3d2:	83 c4 2c             	add    esp,0x2c
c001c3d5:	31 c0                	xor    eax,eax
c001c3d7:	5b                   	pop    ebx
c001c3d8:	5e                   	pop    esi
c001c3d9:	5f                   	pop    edi
c001c3da:	5d                   	pop    ebp
c001c3db:	c3                   	ret    

c001c3dc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c3dc:	55                   	push   ebp
c001c3dd:	57                   	push   edi
c001c3de:	56                   	push   esi
c001c3df:	53                   	push   ebx
c001c3e0:	83 ec 1c             	sub    esp,0x1c
c001c3e3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c3e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c3eb:	8d 42 f8             	lea    eax,[edx-0x8]
c001c3ee:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c3f2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c3f6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c3fa:	3c 03                	cmp    al,0x3
c001c3fc:	77 5a                	ja     c001c458 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c3fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c402:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c406:	0f b6 db             	movzx  ebx,bl
c001c409:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c40c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c411:	0c 80                	or     al,0x80
c001c413:	50                   	push   eax
c001c414:	6a 0c                	push   0xc
c001c416:	53                   	push   ebx
c001c417:	56                   	push   esi
c001c418:	e8 2f f9 ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c41d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c422:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c426:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c42a:	0f b6 d2             	movzx  edx,dl
c001c42d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c431:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c433:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c438:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c43c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c440:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c444:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c44c:	83 c4 2c             	add    esp,0x2c
c001c44f:	5b                   	pop    ebx
c001c450:	5e                   	pop    esi
c001c451:	5f                   	pop    edi
c001c452:	5d                   	pop    ebp
c001c453:	e9 f4 f8 ff ff       	jmp    c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c458:	0f b6 c2             	movzx  eax,dl
c001c45b:	83 f8 07             	cmp    eax,0x7
c001c45e:	77 12                	ja     c001c472 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c460:	0f b6 c2             	movzx  eax,dl
c001c463:	0f b6 db             	movzx  ebx,bl
c001c466:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c46e:	01 c2                	add    edx,eax
c001c470:	eb 2f                	jmp    c001c4a1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c472:	83 f8 0d             	cmp    eax,0xd
c001c475:	77 13                	ja     c001c48a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c477:	0f b6 db             	movzx  ebx,bl
c001c47a:	0f b6 d2             	movzx  edx,dl
c001c47d:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c484:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c488:	eb 17                	jmp    c001c4a1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c48a:	83 f8 15             	cmp    eax,0x15
c001c48d:	77 14                	ja     c001c4a3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c48f:	0f b6 db             	movzx  ebx,bl
c001c492:	0f b6 d2             	movzx  edx,dl
c001c495:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c49d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c4a1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c4a3:	83 c4 1c             	add    esp,0x1c
c001c4a6:	5b                   	pop    ebx
c001c4a7:	5e                   	pop    esi
c001c4a8:	5f                   	pop    edi
c001c4a9:	5d                   	pop    ebp
c001c4aa:	c3                   	ret    
c001c4ab:	90                   	nop

c001c4ac <IDE::detect()>:
c001c4ac:	55                   	push   ebp
c001c4ad:	57                   	push   edi
c001c4ae:	56                   	push   esi
c001c4af:	53                   	push   ebx
c001c4b0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c4b6:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c4bd:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c4c4:	0f 85 a4 02 00 00    	jne    c001c76e <IDE::detect()+0x2c2>
c001c4ca:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c4d1:	31 f6                	xor    esi,esi
c001c4d3:	31 ed                	xor    ebp,ebp
c001c4d5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c4dd:	89 e8                	mov    eax,ebp
c001c4df:	c1 e0 06             	shl    eax,0x6
c001c4e2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c4ea:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c4ee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c4f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4f6:	c1 e0 04             	shl    eax,0x4
c001c4f9:	83 c8 a0             	or     eax,0xffffffa0
c001c4fc:	0f b6 c0             	movzx  eax,al
c001c4ff:	50                   	push   eax
c001c500:	6a 06                	push   0x6
c001c502:	56                   	push   esi
c001c503:	53                   	push   ebx
c001c504:	e8 43 f8 ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c509:	83 c4 0c             	add    esp,0xc
c001c50c:	6a 0c                	push   0xc
c001c50e:	56                   	push   esi
c001c50f:	53                   	push   ebx
c001c510:	e8 f7 f8 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c515:	83 c4 0c             	add    esp,0xc
c001c518:	6a 0c                	push   0xc
c001c51a:	56                   	push   esi
c001c51b:	53                   	push   ebx
c001c51c:	e8 eb f8 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c521:	83 c4 0c             	add    esp,0xc
c001c524:	6a 0c                	push   0xc
c001c526:	56                   	push   esi
c001c527:	53                   	push   ebx
c001c528:	e8 df f8 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c52d:	83 c4 0c             	add    esp,0xc
c001c530:	6a 0c                	push   0xc
c001c532:	56                   	push   esi
c001c533:	53                   	push   ebx
c001c534:	e8 d3 f8 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c539:	68 ec 00 00 00       	push   0xec
c001c53e:	6a 07                	push   0x7
c001c540:	56                   	push   esi
c001c541:	53                   	push   ebx
c001c542:	e8 05 f8 ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c547:	83 c4 1c             	add    esp,0x1c
c001c54a:	6a 0c                	push   0xc
c001c54c:	56                   	push   esi
c001c54d:	53                   	push   ebx
c001c54e:	e8 b9 f8 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c553:	83 c4 0c             	add    esp,0xc
c001c556:	6a 0c                	push   0xc
c001c558:	56                   	push   esi
c001c559:	53                   	push   ebx
c001c55a:	e8 ad f8 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c55f:	83 c4 0c             	add    esp,0xc
c001c562:	6a 0c                	push   0xc
c001c564:	56                   	push   esi
c001c565:	53                   	push   ebx
c001c566:	e8 a1 f8 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c56b:	83 c4 0c             	add    esp,0xc
c001c56e:	6a 0c                	push   0xc
c001c570:	56                   	push   esi
c001c571:	53                   	push   ebx
c001c572:	e8 95 f8 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c577:	83 c4 0c             	add    esp,0xc
c001c57a:	6a 0c                	push   0xc
c001c57c:	56                   	push   esi
c001c57d:	53                   	push   ebx
c001c57e:	e8 89 f8 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c583:	83 c4 10             	add    esp,0x10
c001c586:	84 c0                	test   al,al
c001c588:	0f 84 60 01 00 00    	je     c001c6ee <IDE::detect()+0x242>
c001c58e:	31 ff                	xor    edi,edi
c001c590:	50                   	push   eax
c001c591:	6a 0c                	push   0xc
c001c593:	56                   	push   esi
c001c594:	53                   	push   ebx
c001c595:	e8 72 f8 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c59a:	83 c4 10             	add    esp,0x10
c001c59d:	a8 01                	test   al,0x1
c001c59f:	0f 85 6a 01 00 00    	jne    c001c70f <IDE::detect()+0x263>
c001c5a5:	a8 80                	test   al,0x80
c001c5a7:	75 04                	jne    c001c5ad <IDE::detect()+0x101>
c001c5a9:	a8 08                	test   al,0x8
c001c5ab:	75 23                	jne    c001c5d0 <IDE::detect()+0x124>
c001c5ad:	47                   	inc    edi
c001c5ae:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c5b4:	7e da                	jle    c001c590 <IDE::detect()+0xe4>
c001c5b6:	83 ec 0c             	sub    esp,0xc
c001c5b9:	6a 32                	push   0x32
c001c5bb:	e8 f0 9d ff ff       	call   c00163b0 <milliTenthSleep(unsigned int)>
c001c5c0:	83 c4 10             	add    esp,0x10
c001c5c3:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c5c9:	75 c5                	jne    c001c590 <IDE::detect()+0xe4>
c001c5cb:	e9 3f 01 00 00       	jmp    c001c70f <IDE::detect()+0x263>
c001c5d0:	31 c9                	xor    ecx,ecx
c001c5d2:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c5d6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c5da:	83 ec 0c             	sub    esp,0xc
c001c5dd:	68 80 00 00 00       	push   0x80
c001c5e2:	57                   	push   edi
c001c5e3:	6a 00                	push   0x0
c001c5e5:	56                   	push   esi
c001c5e6:	53                   	push   ebx
c001c5e7:	e8 f0 fd ff ff       	call   c001c3dc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c5ec:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c5f1:	89 e8                	mov    eax,ebp
c001c5f3:	89 d1                	mov    ecx,edx
c001c5f5:	c1 e0 06             	shl    eax,0x6
c001c5f8:	01 d8                	add    eax,ebx
c001c5fa:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c601:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c608:	89 f2                	mov    edx,esi
c001c60a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c610:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c614:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c61a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c61e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c625:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c62d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c634:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c63c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c642:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c649:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c64f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c653:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c657:	83 c4 20             	add    esp,0x20
c001c65a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c65d:	83 c0 02             	add    eax,0x2
c001c660:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c666:	83 c7 02             	add    edi,0x2
c001c669:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c66c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c672:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c676:	75 e2                	jne    c001c65a <IDE::detect()+0x1ae>
c001c678:	89 e8                	mov    eax,ebp
c001c67a:	c1 e0 06             	shl    eax,0x6
c001c67d:	01 d8                	add    eax,ebx
c001c67f:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c686:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c68d:	c1 ea 09             	shr    edx,0x9
c001c690:	83 e2 01             	and    edx,0x1
c001c693:	80 e1 01             	and    cl,0x1
c001c696:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c69c:	75 22                	jne    c001c6c0 <IDE::detect()+0x214>
c001c69e:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c6a5:	74 46                	je     c001c6ed <IDE::detect()+0x241>
c001c6a7:	83 ec 0c             	sub    esp,0xc
c001c6aa:	68 7c 01 00 00       	push   0x17c
c001c6af:	e8 02 b4 fe ff       	call   c0007ab6 <malloc>
c001c6b4:	89 c7                	mov    edi,eax
c001c6b6:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6b9:	e8 1a 05 00 00       	call   c001cbd8 <ATA::ATA()>
c001c6be:	eb 17                	jmp    c001c6d7 <IDE::detect()+0x22b>
c001c6c0:	83 ec 0c             	sub    esp,0xc
c001c6c3:	68 84 01 00 00       	push   0x184
c001c6c8:	e8 e9 b3 fe ff       	call   c0007ab6 <malloc>
c001c6cd:	89 c7                	mov    edi,eax
c001c6cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6d2:	e8 45 0e 00 00       	call   c001d51c <ATAPI::ATAPI()>
c001c6d7:	5a                   	pop    edx
c001c6d8:	59                   	pop    ecx
c001c6d9:	57                   	push   edi
c001c6da:	53                   	push   ebx
c001c6db:	e8 a6 02 ff ff       	call   c000c986 <Device::addChild(Device*)>
c001c6e0:	8b 07                	mov    eax,DWORD PTR [edi]
c001c6e2:	53                   	push   ebx
c001c6e3:	55                   	push   ebp
c001c6e4:	6a 00                	push   0x0
c001c6e6:	57                   	push   edi
c001c6e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c6ea:	83 c4 20             	add    esp,0x20
c001c6ed:	45                   	inc    ebp
c001c6ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c6f3:	74 0d                	je     c001c702 <IDE::detect()+0x256>
c001c6f5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c6fd:	e9 db fd ff ff       	jmp    c001c4dd <IDE::detect()+0x31>
c001c702:	4e                   	dec    esi
c001c703:	74 69                	je     c001c76e <IDE::detect()+0x2c2>
c001c705:	be 01 00 00 00       	mov    esi,0x1
c001c70a:	e9 c6 fd ff ff       	jmp    c001c4d5 <IDE::detect()+0x29>
c001c70f:	50                   	push   eax
c001c710:	6a 04                	push   0x4
c001c712:	56                   	push   esi
c001c713:	53                   	push   ebx
c001c714:	e8 f3 f6 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c719:	83 c4 0c             	add    esp,0xc
c001c71c:	89 c7                	mov    edi,eax
c001c71e:	6a 05                	push   0x5
c001c720:	56                   	push   esi
c001c721:	53                   	push   ebx
c001c722:	e8 e5 f6 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c727:	83 c4 10             	add    esp,0x10
c001c72a:	89 f9                	mov    ecx,edi
c001c72c:	0f b6 c0             	movzx  eax,al
c001c72f:	0f b6 f9             	movzx  edi,cl
c001c732:	83 ff 14             	cmp    edi,0x14
c001c735:	75 07                	jne    c001c73e <IDE::detect()+0x292>
c001c737:	3d eb 00 00 00       	cmp    eax,0xeb
c001c73c:	eb 0a                	jmp    c001c748 <IDE::detect()+0x29c>
c001c73e:	3d 96 00 00 00       	cmp    eax,0x96
c001c743:	75 a9                	jne    c001c6ee <IDE::detect()+0x242>
c001c745:	83 ff 69             	cmp    edi,0x69
c001c748:	75 a4                	jne    c001c6ee <IDE::detect()+0x242>
c001c74a:	68 a1 00 00 00       	push   0xa1
c001c74f:	6a 07                	push   0x7
c001c751:	56                   	push   esi
c001c752:	53                   	push   ebx
c001c753:	e8 f4 f5 ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c758:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c75f:	e8 4c 9c ff ff       	call   c00163b0 <milliTenthSleep(unsigned int)>
c001c764:	83 c4 10             	add    esp,0x10
c001c767:	b1 01                	mov    cl,0x1
c001c769:	e9 64 fe ff ff       	jmp    c001c5d2 <IDE::detect()+0x126>
c001c76e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c774:	5b                   	pop    ebx
c001c775:	5e                   	pop    esi
c001c776:	5f                   	pop    edi
c001c777:	5d                   	pop    ebp
c001c778:	c3                   	ret    
c001c779:	90                   	nop

c001c77a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c77a:	55                   	push   ebp
c001c77b:	57                   	push   edi
c001c77c:	56                   	push   esi
c001c77d:	53                   	push   ebx
c001c77e:	83 ec 1c             	sub    esp,0x1c
c001c781:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c785:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c789:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c78d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c791:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c795:	88 c3                	mov    bl,al
c001c797:	25 ff 00 00 00       	and    eax,0xff
c001c79c:	0f 84 88 00 00 00    	je     c001c82a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7a2:	83 ec 0c             	sub    esp,0xc
c001c7a5:	89 c7                	mov    edi,eax
c001c7a7:	68 eb 31 02 c0       	push   0xc00231eb
c001c7ac:	e8 94 e1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c7b1:	83 c4 10             	add    esp,0x10
c001c7b4:	83 ff 01             	cmp    edi,0x1
c001c7b7:	74 6b                	je     c001c824 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c7b9:	83 ff 02             	cmp    edi,0x2
c001c7bc:	75 58                	jne    c001c816 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c7be:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c7c3:	01 ff                	add    edi,edi
c001c7c5:	50                   	push   eax
c001c7c6:	09 fe                	or     esi,edi
c001c7c8:	6a 01                	push   0x1
c001c7ca:	89 f0                	mov    eax,esi
c001c7cc:	0f b6 f0             	movzx  esi,al
c001c7cf:	c1 e6 06             	shl    esi,0x6
c001c7d2:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c7da:	50                   	push   eax
c001c7db:	55                   	push   ebp
c001c7dc:	e8 2b f6 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c7e1:	83 c4 10             	add    esp,0x10
c001c7e4:	a8 01                	test   al,0x1
c001c7e6:	74 02                	je     c001c7ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c7e8:	b3 07                	mov    bl,0x7
c001c7ea:	a8 02                	test   al,0x2
c001c7ec:	74 02                	je     c001c7f0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c7ee:	b3 03                	mov    bl,0x3
c001c7f0:	a8 04                	test   al,0x4
c001c7f2:	74 02                	je     c001c7f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c7f4:	b3 14                	mov    bl,0x14
c001c7f6:	a8 08                	test   al,0x8
c001c7f8:	74 02                	je     c001c7fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c7fa:	b3 03                	mov    bl,0x3
c001c7fc:	a8 10                	test   al,0x10
c001c7fe:	74 02                	je     c001c802 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c800:	b3 15                	mov    bl,0x15
c001c802:	a8 20                	test   al,0x20
c001c804:	74 02                	je     c001c808 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c806:	b3 03                	mov    bl,0x3
c001c808:	a8 40                	test   al,0x40
c001c80a:	74 02                	je     c001c80e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c80c:	b3 16                	mov    bl,0x16
c001c80e:	a8 80                	test   al,0x80
c001c810:	74 18                	je     c001c82a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c812:	b3 0d                	mov    bl,0xd
c001c814:	eb 14                	jmp    c001c82a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c816:	83 ff 03             	cmp    edi,0x3
c001c819:	74 0d                	je     c001c828 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c81b:	83 ff 04             	cmp    edi,0x4
c001c81e:	75 0a                	jne    c001c82a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c820:	b3 08                	mov    bl,0x8
c001c822:	eb 06                	jmp    c001c82a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c824:	b3 13                	mov    bl,0x13
c001c826:	eb 02                	jmp    c001c82a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c828:	b3 17                	mov    bl,0x17
c001c82a:	83 c4 1c             	add    esp,0x1c
c001c82d:	88 d8                	mov    al,bl
c001c82f:	5b                   	pop    ebx
c001c830:	5e                   	pop    esi
c001c831:	5f                   	pop    edi
c001c832:	5d                   	pop    ebp
c001c833:	c3                   	ret    

c001c834 <IDE::polling(unsigned char, unsigned int)>:
c001c834:	57                   	push   edi
c001c835:	56                   	push   esi
c001c836:	53                   	push   ebx
c001c837:	bb 04 00 00 00       	mov    ebx,0x4
c001c83c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c840:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c845:	52                   	push   edx
c001c846:	6a 0c                	push   0xc
c001c848:	56                   	push   esi
c001c849:	57                   	push   edi
c001c84a:	e8 bd f5 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c84f:	83 c4 10             	add    esp,0x10
c001c852:	4b                   	dec    ebx
c001c853:	75 f0                	jne    c001c845 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c855:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c85a:	50                   	push   eax
c001c85b:	6a 0c                	push   0xc
c001c85d:	56                   	push   esi
c001c85e:	57                   	push   edi
c001c85f:	e8 a8 f5 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001c864:	83 c4 10             	add    esp,0x10
c001c867:	a8 01                	test   al,0x1
c001c869:	75 17                	jne    c001c882 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c86b:	a8 20                	test   al,0x20
c001c86d:	75 0f                	jne    c001c87e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c86f:	4b                   	dec    ebx
c001c870:	74 10                	je     c001c882 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c872:	a8 80                	test   al,0x80
c001c874:	75 e4                	jne    c001c85a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c876:	a8 08                	test   al,0x8
c001c878:	74 e0                	je     c001c85a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c87a:	31 c0                	xor    eax,eax
c001c87c:	eb 06                	jmp    c001c884 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c87e:	b0 01                	mov    al,0x1
c001c880:	eb 02                	jmp    c001c884 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c882:	b0 02                	mov    al,0x2
c001c884:	5b                   	pop    ebx
c001c885:	5e                   	pop    esi
c001c886:	5f                   	pop    edi
c001c887:	c3                   	ret    

c001c888 <SATABus::close(int, int, void*)>:
c001c888:	31 c0                	xor    eax,eax
c001c88a:	c3                   	ret    
c001c88b:	90                   	nop

c001c88c <SATABus::detect()>:
c001c88c:	c3                   	ret    
c001c88d:	90                   	nop

c001c88e <SATABus::SATABus()>:
c001c88e:	83 ec 0c             	sub    esp,0xc
c001c891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c895:	83 ec 08             	sub    esp,0x8
c001c898:	68 24 32 02 c0       	push   0xc0023224
c001c89d:	50                   	push   eax
c001c89e:	e8 25 04 ff ff       	call   c000ccc8 <HardDiskController::HardDiskController(char const*)>
c001c8a3:	83 c4 10             	add    esp,0x10
c001c8a6:	ba 50 32 02 c0       	mov    edx,0xc0023250
c001c8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8af:	89 10                	mov    DWORD PTR [eax],edx
c001c8b1:	83 ec 0c             	sub    esp,0xc
c001c8b4:	6a 50                	push   0x50
c001c8b6:	e8 d3 b5 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c8bb:	83 c4 10             	add    esp,0x10
c001c8be:	89 c2                	mov    edx,eax
c001c8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c8ca:	83 ec 0c             	sub    esp,0xc
c001c8cd:	6a 50                	push   0x50
c001c8cf:	e8 39 cd fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c8d4:	83 c4 10             	add    esp,0x10
c001c8d7:	89 c2                	mov    edx,eax
c001c8d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8dd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c8e3:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c8e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c8ec:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c8f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c8f6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c8fc:	83 ec 0c             	sub    esp,0xc
c001c8ff:	6a 03                	push   0x3
c001c901:	6a 50                	push   0x50
c001c903:	51                   	push   ecx
c001c904:	52                   	push   edx
c001c905:	50                   	push   eax
c001c906:	e8 0f d6 fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c90b:	83 c4 20             	add    esp,0x20
c001c90e:	90                   	nop
c001c90f:	83 c4 0c             	add    esp,0xc
c001c912:	c3                   	ret    
c001c913:	90                   	nop

c001c914 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c914:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c918:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c91b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c91e:	09 c2                	or     edx,eax
c001c920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c924:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c92a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c92c:	31 c0                	xor    eax,eax
c001c92e:	c1 e9 08             	shr    ecx,0x8
c001c931:	83 e1 0f             	and    ecx,0xf
c001c934:	39 c8                	cmp    eax,ecx
c001c936:	74 0a                	je     c001c942 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c938:	f6 c2 01             	test   dl,0x1
c001c93b:	74 08                	je     c001c945 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c93d:	d1 ea                	shr    edx,1
c001c93f:	40                   	inc    eax
c001c940:	eb f2                	jmp    c001c934 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c942:	83 c8 ff             	or     eax,0xffffffff
c001c945:	c3                   	ret    

c001c946 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c946:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c94a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c94d:	89 c2                	mov    edx,eax
c001c94f:	c1 ea 08             	shr    edx,0x8
c001c952:	83 e2 0f             	and    edx,0xf
c001c955:	4a                   	dec    edx
c001c956:	75 32                	jne    c001c98a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c958:	83 e0 0f             	and    eax,0xf
c001c95b:	83 f8 03             	cmp    eax,0x3
c001c95e:	75 2a                	jne    c001c98a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c960:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c963:	b8 02 00 00 00       	mov    eax,0x2
c001c968:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c96e:	74 1c                	je     c001c98c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c970:	b8 04 00 00 00       	mov    eax,0x4
c001c975:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c97b:	74 0f                	je     c001c98c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c97d:	31 c0                	xor    eax,eax
c001c97f:	83 fa 03             	cmp    edx,0x3
c001c982:	0f 94 c0             	sete   al
c001c985:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c989:	c3                   	ret    
c001c98a:	31 c0                	xor    eax,eax
c001c98c:	c3                   	ret    
c001c98d:	90                   	nop

c001c98e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c98e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c992:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c995:	0f ba e2 0f          	bt     edx,0xf
c001c999:	72 f7                	jb     c001c992 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c99b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c99e:	83 ca 10             	or     edx,0x10
c001c9a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9a4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9a7:	83 ca 01             	or     edx,0x1
c001c9aa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9ad:	c3                   	ret    

c001c9ae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c9ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9b2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9b5:	83 e2 fe             	and    edx,0xfffffffe
c001c9b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9bb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9be:	83 e2 ef             	and    edx,0xffffffef
c001c9c1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9c4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9c7:	0f ba e2 0e          	bt     edx,0xe
c001c9cb:	72 f7                	jb     c001c9c4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c9cd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9d0:	0f ba e2 0f          	bt     edx,0xf
c001c9d4:	72 ee                	jb     c001c9c4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c9d6:	c3                   	ret    
c001c9d7:	90                   	nop

c001c9d8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c9d8:	55                   	push   ebp
c001c9d9:	57                   	push   edi
c001c9da:	56                   	push   esi
c001c9db:	53                   	push   ebx
c001c9dc:	83 ec 1c             	sub    esp,0x1c
c001c9df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c9e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c9e7:	53                   	push   ebx
c001c9e8:	56                   	push   esi
c001c9e9:	e8 c0 ff ff ff       	call   c001c9ae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c9ee:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c9f2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c9f8:	83 ec 0c             	sub    esp,0xc
c001c9fb:	c1 e5 0a             	shl    ebp,0xa
c001c9fe:	01 e8                	add    eax,ebp
c001ca00:	89 03                	mov    DWORD PTR [ebx],eax
c001ca02:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca04:	68 00 04 00 00       	push   0x400
c001ca09:	6a 00                	push   0x0
c001ca0b:	50                   	push   eax
c001ca0c:	e8 df 3a fe ff       	call   c00004f0 <memset>
c001ca11:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001ca17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ca1b:	01 e8                	add    eax,ebp
c001ca1d:	83 c4 1c             	add    esp,0x1c
c001ca20:	89 03                	mov    DWORD PTR [ebx],eax
c001ca22:	c1 e2 08             	shl    edx,0x8
c001ca25:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca2c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001ca32:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ca38:	01 f8                	add    eax,edi
c001ca3a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca3d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ca40:	68 00 01 00 00       	push   0x100
c001ca45:	6a 00                	push   0x0
c001ca47:	50                   	push   eax
c001ca48:	e8 a3 3a fe ff       	call   c00004f0 <memset>
c001ca4d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001ca53:	01 fa                	add    edx,edi
c001ca55:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ca59:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001ca5c:	c1 e7 0d             	shl    edi,0xd
c001ca5f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ca66:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001ca6c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001ca72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ca76:	31 ff                	xor    edi,edi
c001ca78:	83 c4 10             	add    esp,0x10
c001ca7b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001ca81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca85:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001ca8b:	83 c5 20             	add    ebp,0x20
c001ca8e:	01 f8                	add    eax,edi
c001ca90:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ca93:	52                   	push   edx
c001ca94:	68 00 01 00 00       	push   0x100
c001ca99:	6a 00                	push   0x0
c001ca9b:	50                   	push   eax
c001ca9c:	e8 4f 3a fe ff       	call   c00004f0 <memset>
c001caa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001caa5:	83 c4 10             	add    esp,0x10
c001caa8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001caae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001cab5:	01 f8                	add    eax,edi
c001cab7:	81 c7 00 01 00 00    	add    edi,0x100
c001cabd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cac0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001cac6:	75 b3                	jne    c001ca7b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001cac8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cacf:	50                   	push   eax
c001cad0:	50                   	push   eax
c001cad1:	53                   	push   ebx
c001cad2:	56                   	push   esi
c001cad3:	e8 b6 fe ff ff       	call   c001c98e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cad8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cadf:	83 c4 2c             	add    esp,0x2c
c001cae2:	5b                   	pop    ebx
c001cae3:	5e                   	pop    esi
c001cae4:	5f                   	pop    edi
c001cae5:	5d                   	pop    ebp
c001cae6:	c3                   	ret    
c001cae7:	90                   	nop

c001cae8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cae8:	55                   	push   ebp
c001cae9:	57                   	push   edi
c001caea:	56                   	push   esi
c001caeb:	53                   	push   ebx
c001caec:	31 db                	xor    ebx,ebx
c001caee:	83 ec 0c             	sub    esp,0xc
c001caf1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001caf5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001caf9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cafc:	f7 c7 01 00 00 00    	test   edi,0x1
c001cb02:	74 7a                	je     c001cb7e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb04:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cb08:	89 d8                	mov    eax,ebx
c001cb0a:	c1 e0 07             	shl    eax,0x7
c001cb0d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cb14:	55                   	push   ebp
c001cb15:	56                   	push   esi
c001cb16:	e8 2b fe ff ff       	call   c001c946 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cb1b:	5a                   	pop    edx
c001cb1c:	83 f8 01             	cmp    eax,0x1
c001cb1f:	59                   	pop    ecx
c001cb20:	75 21                	jne    c001cb43 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cb22:	50                   	push   eax
c001cb23:	53                   	push   ebx
c001cb24:	55                   	push   ebp
c001cb25:	56                   	push   esi
c001cb26:	e8 ad fe ff ff       	call   c001c9d8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb2b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cb32:	e8 7f af fe ff       	call   c0007ab6 <malloc>
c001cb37:	89 c5                	mov    ebp,eax
c001cb39:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb3c:	e8 99 10 00 00       	call   c001dbda <SATA::SATA()>
c001cb41:	eb 24                	jmp    c001cb67 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cb43:	83 f8 04             	cmp    eax,0x4
c001cb46:	75 36                	jne    c001cb7e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb48:	51                   	push   ecx
c001cb49:	53                   	push   ebx
c001cb4a:	55                   	push   ebp
c001cb4b:	56                   	push   esi
c001cb4c:	e8 87 fe ff ff       	call   c001c9d8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb51:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cb58:	e8 59 af fe ff       	call   c0007ab6 <malloc>
c001cb5d:	89 c5                	mov    ebp,eax
c001cb5f:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb62:	e8 d5 17 00 00       	call   c001e33c <SATAPI::SATAPI()>
c001cb67:	58                   	pop    eax
c001cb68:	5a                   	pop    edx
c001cb69:	55                   	push   ebp
c001cb6a:	56                   	push   esi
c001cb6b:	e8 16 fe fe ff       	call   c000c986 <Device::addChild(Device*)>
c001cb70:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cb73:	56                   	push   esi
c001cb74:	6a 00                	push   0x0
c001cb76:	53                   	push   ebx
c001cb77:	55                   	push   ebp
c001cb78:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cb7b:	83 c4 20             	add    esp,0x20
c001cb7e:	d1 ef                	shr    edi,1
c001cb80:	43                   	inc    ebx
c001cb81:	83 fb 20             	cmp    ebx,0x20
c001cb84:	0f 85 72 ff ff ff    	jne    c001cafc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cb8a:	83 c4 0c             	add    esp,0xc
c001cb8d:	5b                   	pop    ebx
c001cb8e:	5e                   	pop    esi
c001cb8f:	5f                   	pop    edi
c001cb90:	5d                   	pop    ebp
c001cb91:	c3                   	ret    

c001cb92 <SATABus::open(int, int, void*)>:
c001cb92:	83 ec 14             	sub    esp,0x14
c001cb95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb99:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cb9f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cba5:	52                   	push   edx
c001cba6:	50                   	push   eax
c001cba7:	e8 3c ff ff ff       	call   c001cae8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cbac:	31 c0                	xor    eax,eax
c001cbae:	83 c4 1c             	add    esp,0x1c
c001cbb1:	c3                   	ret    

c001cbb2 <ATA::close(int, int, void*)>:
c001cbb2:	83 ec 0c             	sub    esp,0xc
c001cbb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cbbf:	85 c0                	test   eax,eax
c001cbc1:	74 0c                	je     c001cbcf <ATA::close(int, int, void*)+0x1d>
c001cbc3:	83 ec 0c             	sub    esp,0xc
c001cbc6:	8b 10                	mov    edx,DWORD PTR [eax]
c001cbc8:	50                   	push   eax
c001cbc9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cbcc:	83 c4 10             	add    esp,0x10
c001cbcf:	31 c0                	xor    eax,eax
c001cbd1:	83 c4 0c             	add    esp,0xc
c001cbd4:	c3                   	ret    
c001cbd5:	90                   	nop

c001cbd6 <ATA::powerSaving(PowerSavingLevel)>:
c001cbd6:	c3                   	ret    
c001cbd7:	90                   	nop

c001cbd8 <ATA::ATA()>:
c001cbd8:	83 ec 0c             	sub    esp,0xc
c001cbdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbdf:	83 ec 04             	sub    esp,0x4
c001cbe2:	68 00 02 00 00       	push   0x200
c001cbe7:	68 1d 33 02 c0       	push   0xc002331d
c001cbec:	50                   	push   eax
c001cbed:	e8 60 01 ff ff       	call   c000cd52 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cbf2:	83 c4 10             	add    esp,0x10
c001cbf5:	ba 90 32 02 c0       	mov    edx,0xc0023290
c001cbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbfe:	89 10                	mov    DWORD PTR [eax],edx
c001cc00:	90                   	nop
c001cc01:	83 c4 0c             	add    esp,0xc
c001cc04:	c3                   	ret    
c001cc05:	90                   	nop

c001cc06 <ATA::flush(bool)>:
c001cc06:	53                   	push   ebx
c001cc07:	83 ec 08             	sub    esp,0x8
c001cc0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc0e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cc13:	83 f8 01             	cmp    eax,0x1
c001cc16:	19 c0                	sbb    eax,eax
c001cc18:	83 e0 fd             	and    eax,0xfffffffd
c001cc1b:	05 ea 00 00 00       	add    eax,0xea
c001cc20:	50                   	push   eax
c001cc21:	6a 07                	push   0x7
c001cc23:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc2a:	50                   	push   eax
c001cc2b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc31:	e8 16 f1 ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc36:	83 c4 0c             	add    esp,0xc
c001cc39:	6a 00                	push   0x0
c001cc3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc42:	50                   	push   eax
c001cc43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc49:	e8 e6 fb ff ff       	call   c001c834 <IDE::polling(unsigned char, unsigned int)>
c001cc4e:	83 c4 18             	add    esp,0x18
c001cc51:	5b                   	pop    ebx
c001cc52:	c3                   	ret    
c001cc53:	90                   	nop

c001cc54 <ATA::readyForCommand()>:
c001cc54:	56                   	push   esi
c001cc55:	53                   	push   ebx
c001cc56:	53                   	push   ebx
c001cc57:	31 db                	xor    ebx,ebx
c001cc59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc5d:	51                   	push   ecx
c001cc5e:	6a 0c                	push   0xc
c001cc60:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cc67:	50                   	push   eax
c001cc68:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cc6e:	e8 99 f1 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001cc73:	83 c4 10             	add    esp,0x10
c001cc76:	a8 88                	test   al,0x88
c001cc78:	74 1f                	je     c001cc99 <ATA::readyForCommand()+0x45>
c001cc7a:	43                   	inc    ebx
c001cc7b:	83 fb 63             	cmp    ebx,0x63
c001cc7e:	7e dd                	jle    c001cc5d <ATA::readyForCommand()+0x9>
c001cc80:	83 ec 0c             	sub    esp,0xc
c001cc83:	6a 0a                	push   0xa
c001cc85:	e8 26 97 ff ff       	call   c00163b0 <milliTenthSleep(unsigned int)>
c001cc8a:	83 c4 10             	add    esp,0x10
c001cc8d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cc93:	75 c8                	jne    c001cc5d <ATA::readyForCommand()+0x9>
c001cc95:	31 c0                	xor    eax,eax
c001cc97:	eb 02                	jmp    c001cc9b <ATA::readyForCommand()+0x47>
c001cc99:	b0 01                	mov    al,0x1
c001cc9b:	5a                   	pop    edx
c001cc9c:	5b                   	pop    ebx
c001cc9d:	5e                   	pop    esi
c001cc9e:	c3                   	ret    
c001cc9f:	90                   	nop

c001cca0 <ATA::access(unsigned long long, int, void*, bool)>:
c001cca0:	55                   	push   ebp
c001cca1:	57                   	push   edi
c001cca2:	56                   	push   esi
c001cca3:	53                   	push   ebx
c001cca4:	83 ec 2c             	sub    esp,0x2c
c001cca7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ccab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ccaf:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ccb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccb7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ccbb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ccbf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ccc3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ccc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cccd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ccd3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ccd7:	c1 e0 06             	shl    eax,0x6
c001ccda:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cce2:	74 5d                	je     c001cd41 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001cce4:	89 fa                	mov    edx,edi
c001cce6:	89 f0                	mov    eax,esi
c001cce8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001ccec:	c1 ea 1c             	shr    edx,0x1c
c001ccef:	89 d1                	mov    ecx,edx
c001ccf1:	09 c1                	or     ecx,eax
c001ccf3:	74 25                	je     c001cd1a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001ccf5:	31 ed                	xor    ebp,ebp
c001ccf7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001ccfe:	89 fa                	mov    edx,edi
c001cd00:	89 f0                	mov    eax,esi
c001cd02:	0f ad d0             	shrd   eax,edx,cl
c001cd05:	d3 ea                	shr    edx,cl
c001cd07:	f6 c1 20             	test   cl,0x20
c001cd0a:	74 02                	je     c001cd0e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cd0c:	89 d0                	mov    eax,edx
c001cd0e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cd12:	45                   	inc    ebp
c001cd13:	83 fd 06             	cmp    ebp,0x6
c001cd16:	75 df                	jne    c001ccf7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cd18:	eb 76                	jmp    c001cd90 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001cd1a:	89 f0                	mov    eax,esi
c001cd1c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cd21:	89 fa                	mov    edx,edi
c001cd23:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd2a:	0f ac d0 10          	shrd   eax,edx,0x10
c001cd2e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd33:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cd37:	c1 ee 18             	shr    esi,0x18
c001cd3a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001cd3f:	eb 56                	jmp    c001cd97 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cd41:	6a 00                	push   0x0
c001cd43:	6a 3f                	push   0x3f
c001cd45:	57                   	push   edi
c001cd46:	56                   	push   esi
c001cd47:	e8 a4 2a 00 00       	call   c001f7f0 <__umoddi3>
c001cd4c:	83 c4 10             	add    esp,0x10
c001cd4f:	40                   	inc    eax
c001cd50:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cd54:	6a 00                	push   0x0
c001cd56:	68 f0 03 00 00       	push   0x3f0
c001cd5b:	57                   	push   edi
c001cd5c:	56                   	push   esi
c001cd5d:	e8 8e 29 00 00       	call   c001f6f0 <__udivdi3>
c001cd62:	83 c4 10             	add    esp,0x10
c001cd65:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cd6a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd71:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd76:	6a 00                	push   0x0
c001cd78:	6a 3f                	push   0x3f
c001cd7a:	57                   	push   edi
c001cd7b:	56                   	push   esi
c001cd7c:	e8 6f 29 00 00       	call   c001f6f0 <__udivdi3>
c001cd81:	83 c4 10             	add    esp,0x10
c001cd84:	83 e0 0f             	and    eax,0xf
c001cd87:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001cd8c:	89 c6                	mov    esi,eax
c001cd8e:	eb 07                	jmp    c001cd97 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cd90:	31 f6                	xor    esi,esi
c001cd92:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001cd97:	bf 01 00 00 00       	mov    edi,0x1
c001cd9c:	50                   	push   eax
c001cd9d:	6a 00                	push   0x0
c001cd9f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cda6:	50                   	push   eax
c001cda7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdab:	e8 a4 f1 ff ff       	call   c001bf54 <IDE::enableIRQs(unsigned char, bool)>
c001cdb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdb3:	e8 9c fe ff ff       	call   c001cc54 <ATA::readyForCommand()>
c001cdb8:	83 c4 10             	add    esp,0x10
c001cdbb:	84 c0                	test   al,al
c001cdbd:	0f 84 69 02 00 00    	je     c001d02c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cdc3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cdc9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cdcf:	c1 e0 04             	shl    eax,0x4
c001cdd2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cdd9:	09 c6                	or     esi,eax
c001cddb:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001cde0:	75 05                	jne    c001cde7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cde2:	83 ce a0             	or     esi,0xffffffa0
c001cde5:	eb 03                	jmp    c001cdea <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001cde7:	83 ce e0             	or     esi,0xffffffe0
c001cdea:	89 f0                	mov    eax,esi
c001cdec:	0f b6 f0             	movzx  esi,al
c001cdef:	56                   	push   esi
c001cdf0:	6a 06                	push   0x6
c001cdf2:	51                   	push   ecx
c001cdf3:	52                   	push   edx
c001cdf4:	e8 53 ef ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdf9:	83 c4 10             	add    esp,0x10
c001cdfc:	6a 00                	push   0x0
c001cdfe:	6a 01                	push   0x1
c001ce00:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce07:	50                   	push   eax
c001ce08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce0e:	e8 39 ef ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce13:	83 c4 10             	add    esp,0x10
c001ce16:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ce1b:	83 f8 02             	cmp    eax,0x2
c001ce1e:	75 6e                	jne    c001ce8e <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001ce20:	6a 00                	push   0x0
c001ce22:	6a 08                	push   0x8
c001ce24:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce2b:	50                   	push   eax
c001ce2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce32:	e8 15 ef ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce37:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ce3c:	50                   	push   eax
c001ce3d:	6a 09                	push   0x9
c001ce3f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce46:	50                   	push   eax
c001ce47:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce4d:	e8 fa ee ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce52:	83 c4 20             	add    esp,0x20
c001ce55:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ce5a:	50                   	push   eax
c001ce5b:	6a 0a                	push   0xa
c001ce5d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce64:	50                   	push   eax
c001ce65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce6b:	e8 dc ee ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce70:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ce75:	50                   	push   eax
c001ce76:	6a 0b                	push   0xb
c001ce78:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce7f:	50                   	push   eax
c001ce80:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce86:	e8 c1 ee ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce8b:	83 c4 20             	add    esp,0x20
c001ce8e:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ce93:	50                   	push   eax
c001ce94:	6a 02                	push   0x2
c001ce96:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce9d:	50                   	push   eax
c001ce9e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cea4:	e8 a3 ee ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cea9:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ceae:	50                   	push   eax
c001ceaf:	6a 03                	push   0x3
c001ceb1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ceb8:	50                   	push   eax
c001ceb9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cebf:	e8 88 ee ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cec4:	83 c4 20             	add    esp,0x20
c001cec7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cecc:	50                   	push   eax
c001cecd:	6a 04                	push   0x4
c001cecf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ced6:	50                   	push   eax
c001ced7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cedd:	e8 6a ee ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cee2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cee7:	50                   	push   eax
c001cee8:	6a 05                	push   0x5
c001ceea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cef1:	50                   	push   eax
c001cef2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cef8:	e8 4f ee ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cefd:	83 c4 20             	add    esp,0x20
c001cf00:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cf05:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cf0a:	74 11                	je     c001cf1d <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cf0c:	b8 30 00 00 00       	mov    eax,0x30
c001cf11:	83 fa 02             	cmp    edx,0x2
c001cf14:	75 16                	jne    c001cf2c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf16:	b8 34 00 00 00       	mov    eax,0x34
c001cf1b:	eb 0f                	jmp    c001cf2c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf1d:	b8 20 00 00 00       	mov    eax,0x20
c001cf22:	83 fa 02             	cmp    edx,0x2
c001cf25:	75 05                	jne    c001cf2c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf27:	b8 24 00 00 00       	mov    eax,0x24
c001cf2c:	50                   	push   eax
c001cf2d:	6a 07                	push   0x7
c001cf2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf36:	50                   	push   eax
c001cf37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf3d:	e8 0a ee ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf42:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cf46:	83 c4 10             	add    esp,0x10
c001cf49:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cf4e:	85 f6                	test   esi,esi
c001cf50:	0f 84 b3 00 00 00    	je     c001d009 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001cf56:	50                   	push   eax
c001cf57:	6a 01                	push   0x1
c001cf59:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf60:	50                   	push   eax
c001cf61:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf67:	e8 c8 f8 ff ff       	call   c001c834 <IDE::polling(unsigned char, unsigned int)>
c001cf6c:	83 c4 10             	add    esp,0x10
c001cf6f:	0f b6 f8             	movzx  edi,al
c001cf72:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cf78:	85 ff                	test   edi,edi
c001cf7a:	74 1d                	je     c001cf99 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001cf7c:	57                   	push   edi
c001cf7d:	0f b6 d2             	movzx  edx,dl
c001cf80:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cf87:	50                   	push   eax
c001cf88:	52                   	push   edx
c001cf89:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf8f:	e8 e6 f7 ff ff       	call   c001c77a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cf94:	e9 90 00 00 00       	jmp    c001d029 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001cf99:	85 ed                	test   ebp,ebp
c001cf9b:	74 3b                	je     c001cfd8 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001cf9d:	31 c9                	xor    ecx,ecx
c001cf9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cfa3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cfa7:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001cfab:	50                   	push   eax
c001cfac:	50                   	push   eax
c001cfad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfb4:	50                   	push   eax
c001cfb5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfbb:	e8 7a ed ff ff       	call   c001bd3a <IDE::getBase(unsigned char)>
c001cfc0:	89 c2                	mov    edx,eax
c001cfc2:	89 f8                	mov    eax,edi
c001cfc4:	66 ef                	out    dx,ax
c001cfc6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cfca:	83 c4 10             	add    esp,0x10
c001cfcd:	41                   	inc    ecx
c001cfce:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cfd4:	75 c9                	jne    c001cf9f <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001cfd6:	eb 23                	jmp    c001cffb <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001cfd8:	0f b6 d2             	movzx  edx,dl
c001cfdb:	51                   	push   ecx
c001cfdc:	51                   	push   ecx
c001cfdd:	52                   	push   edx
c001cfde:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfe4:	e8 51 ed ff ff       	call   c001bd3a <IDE::getBase(unsigned char)>
c001cfe9:	b9 00 01 00 00       	mov    ecx,0x100
c001cfee:	89 c2                	mov    edx,eax
c001cff0:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cff4:	fc                   	cld    
c001cff5:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cff8:	83 c4 10             	add    esp,0x10
c001cffb:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d003:	4e                   	dec    esi
c001d004:	e9 45 ff ff ff       	jmp    c001cf4e <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001d009:	31 ff                	xor    edi,edi
c001d00b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d010:	74 1a                	je     c001d02c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001d012:	50                   	push   eax
c001d013:	50                   	push   eax
c001d014:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d019:	83 f8 02             	cmp    eax,0x2
c001d01c:	0f 94 c0             	sete   al
c001d01f:	0f b6 c0             	movzx  eax,al
c001d022:	50                   	push   eax
c001d023:	53                   	push   ebx
c001d024:	e8 dd fb ff ff       	call   c001cc06 <ATA::flush(bool)>
c001d029:	83 c4 10             	add    esp,0x10
c001d02c:	83 c4 2c             	add    esp,0x2c
c001d02f:	89 f8                	mov    eax,edi
c001d031:	5b                   	pop    ebx
c001d032:	5e                   	pop    esi
c001d033:	5f                   	pop    edi
c001d034:	5d                   	pop    ebp
c001d035:	c3                   	ret    

c001d036 <ATA::detectCHS()>:
c001d036:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d03a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d040:	c1 e0 06             	shl    eax,0x6
c001d043:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d049:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d053:	c7 44 24 04 74 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023274
c001d05b:	e9 7f 45 ff ff       	jmp    c00115df <KePanic(char const*)>

c001d060 <ATA::open(int, int, void*)>:
c001d060:	53                   	push   ebx
c001d061:	83 ec 08             	sub    esp,0x8
c001d064:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d068:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d06c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d070:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d076:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d07c:	c1 e0 06             	shl    eax,0x6
c001d07f:	01 d0                	add    eax,edx
c001d081:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d088:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d08e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d095:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d09f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d0a5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d0ac:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d0b3:	75 0c                	jne    c001d0c1 <ATA::open(int, int, void*)+0x61>
c001d0b5:	83 ec 0c             	sub    esp,0xc
c001d0b8:	53                   	push   ebx
c001d0b9:	e8 78 ff ff ff       	call   c001d036 <ATA::detectCHS()>
c001d0be:	83 c4 10             	add    esp,0x10
c001d0c1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d0c7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d0cd:	c1 e0 06             	shl    eax,0x6
c001d0d0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d0d7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d0e1:	d1 e8                	shr    eax,1
c001d0e3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d0e9:	6a 04                	push   0x4
c001d0eb:	6a 0c                	push   0xc
c001d0ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0f4:	50                   	push   eax
c001d0f5:	52                   	push   edx
c001d0f6:	e8 51 ec ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0fb:	90                   	nop
c001d0fc:	90                   	nop
c001d0fd:	6a 00                	push   0x0
c001d0ff:	6a 0c                	push   0xc
c001d101:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d108:	50                   	push   eax
c001d109:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d10f:	e8 38 ec ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d114:	83 c4 14             	add    esp,0x14
c001d117:	53                   	push   ebx
c001d118:	e8 9d fc fe ff       	call   c000cdba <PhysicalDisk::startCache()>
c001d11d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d120:	e8 d9 0e ff ff       	call   c000dffe <createPartitionsForDisk(PhysicalDisk*)>
c001d125:	31 c0                	xor    eax,eax
c001d127:	83 c4 18             	add    esp,0x18
c001d12a:	5b                   	pop    ebx
c001d12b:	c3                   	ret    

c001d12c <combineCharAndColour(char, unsigned char)>:
c001d12c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d131:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d137:	c1 e0 08             	shl    eax,0x8
c001d13a:	09 d0                	or     eax,edx
c001d13c:	c3                   	ret    

c001d13d <combineColours(unsigned char, unsigned char)>:
c001d13d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d142:	c1 e0 04             	shl    eax,0x4
c001d145:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d149:	c3                   	ret    

c001d14a <ATA::read(unsigned long long, int, void*)>:
c001d14a:	55                   	push   ebp
c001d14b:	57                   	push   edi
c001d14c:	56                   	push   esi
c001d14d:	be 04 00 00 00       	mov    esi,0x4
c001d152:	53                   	push   ebx
c001d153:	83 ec 0c             	sub    esp,0xc
c001d156:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d15a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d15e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d161:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d165:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d169:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d16f:	0f 87 a1 01 00 00    	ja     c001d316 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d175:	be 06 00 00 00       	mov    esi,0x6
c001d17a:	85 c9                	test   ecx,ecx
c001d17c:	0f 84 94 01 00 00    	je     c001d316 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d182:	55                   	push   ebp
c001d183:	55                   	push   ebp
c001d184:	6a 00                	push   0x0
c001d186:	51                   	push   ecx
c001d187:	53                   	push   ebx
c001d188:	52                   	push   edx
c001d189:	50                   	push   eax
c001d18a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d18e:	e8 0d fb ff ff       	call   c001cca0 <ATA::access(unsigned long long, int, void*, bool)>
c001d193:	83 c4 20             	add    esp,0x20
c001d196:	89 c6                	mov    esi,eax
c001d198:	85 c0                	test   eax,eax
c001d19a:	0f 85 71 01 00 00    	jne    c001d311 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d1a0:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d1a6:	89 da                	mov    edx,ebx
c001d1a8:	50                   	push   eax
c001d1a9:	bd 10 27 00 00       	mov    ebp,0x2710
c001d1ae:	50                   	push   eax
c001d1af:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d1b5:	6a 0f                	push   0xf
c001d1b7:	6a 00                	push   0x0
c001d1b9:	e8 7f ff ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001d1be:	59                   	pop    ecx
c001d1bf:	b9 0a 00 00 00       	mov    ecx,0xa
c001d1c4:	5b                   	pop    ebx
c001d1c5:	0f b6 d8             	movzx  ebx,al
c001d1c8:	89 d0                	mov    eax,edx
c001d1ca:	53                   	push   ebx
c001d1cb:	99                   	cdq    
c001d1cc:	f7 fd                	idiv   ebp
c001d1ce:	99                   	cdq    
c001d1cf:	f7 f9                	idiv   ecx
c001d1d1:	83 c2 30             	add    edx,0x30
c001d1d4:	0f b6 d2             	movzx  edx,dl
c001d1d7:	52                   	push   edx
c001d1d8:	e8 4f ff ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d1dd:	5f                   	pop    edi
c001d1de:	bf e8 03 00 00       	mov    edi,0x3e8
c001d1e3:	5a                   	pop    edx
c001d1e4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d1ea:	53                   	push   ebx
c001d1eb:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d1f0:	99                   	cdq    
c001d1f1:	f7 ff                	idiv   edi
c001d1f3:	99                   	cdq    
c001d1f4:	f7 f9                	idiv   ecx
c001d1f6:	8d 42 30             	lea    eax,[edx+0x30]
c001d1f9:	0f b6 c0             	movzx  eax,al
c001d1fc:	50                   	push   eax
c001d1fd:	e8 2a ff ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d202:	5f                   	pop    edi
c001d203:	bf 64 00 00 00       	mov    edi,0x64
c001d208:	5a                   	pop    edx
c001d209:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d20f:	53                   	push   ebx
c001d210:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d215:	99                   	cdq    
c001d216:	f7 ff                	idiv   edi
c001d218:	99                   	cdq    
c001d219:	f7 f9                	idiv   ecx
c001d21b:	8d 42 30             	lea    eax,[edx+0x30]
c001d21e:	0f b6 c0             	movzx  eax,al
c001d221:	50                   	push   eax
c001d222:	e8 05 ff ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d227:	5a                   	pop    edx
c001d228:	5a                   	pop    edx
c001d229:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d22f:	53                   	push   ebx
c001d230:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d235:	99                   	cdq    
c001d236:	f7 f9                	idiv   ecx
c001d238:	99                   	cdq    
c001d239:	f7 f9                	idiv   ecx
c001d23b:	8d 42 30             	lea    eax,[edx+0x30]
c001d23e:	0f b6 c0             	movzx  eax,al
c001d241:	50                   	push   eax
c001d242:	e8 e5 fe ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d247:	5a                   	pop    edx
c001d248:	5a                   	pop    edx
c001d249:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d24f:	53                   	push   ebx
c001d250:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d255:	99                   	cdq    
c001d256:	f7 f9                	idiv   ecx
c001d258:	83 c2 30             	add    edx,0x30
c001d25b:	0f b6 d2             	movzx  edx,dl
c001d25e:	52                   	push   edx
c001d25f:	e8 c8 fe ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d264:	5a                   	pop    edx
c001d265:	5a                   	pop    edx
c001d266:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d26c:	53                   	push   ebx
c001d26d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d272:	99                   	cdq    
c001d273:	f7 fd                	idiv   ebp
c001d275:	99                   	cdq    
c001d276:	f7 f9                	idiv   ecx
c001d278:	8d 42 30             	lea    eax,[edx+0x30]
c001d27b:	0f b6 c0             	movzx  eax,al
c001d27e:	50                   	push   eax
c001d27f:	e8 a8 fe ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d284:	5d                   	pop    ebp
c001d285:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d28a:	5a                   	pop    edx
c001d28b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d291:	53                   	push   ebx
c001d292:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d297:	99                   	cdq    
c001d298:	f7 fd                	idiv   ebp
c001d29a:	99                   	cdq    
c001d29b:	f7 f9                	idiv   ecx
c001d29d:	8d 42 30             	lea    eax,[edx+0x30]
c001d2a0:	0f b6 c0             	movzx  eax,al
c001d2a3:	50                   	push   eax
c001d2a4:	e8 83 fe ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d2a9:	5d                   	pop    ebp
c001d2aa:	5a                   	pop    edx
c001d2ab:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d2b1:	53                   	push   ebx
c001d2b2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2b7:	99                   	cdq    
c001d2b8:	f7 ff                	idiv   edi
c001d2ba:	99                   	cdq    
c001d2bb:	f7 f9                	idiv   ecx
c001d2bd:	8d 42 30             	lea    eax,[edx+0x30]
c001d2c0:	0f b6 c0             	movzx  eax,al
c001d2c3:	50                   	push   eax
c001d2c4:	e8 63 fe ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d2c9:	5f                   	pop    edi
c001d2ca:	5d                   	pop    ebp
c001d2cb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d2d1:	53                   	push   ebx
c001d2d2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2d7:	99                   	cdq    
c001d2d8:	f7 f9                	idiv   ecx
c001d2da:	99                   	cdq    
c001d2db:	f7 f9                	idiv   ecx
c001d2dd:	8d 42 30             	lea    eax,[edx+0x30]
c001d2e0:	0f b6 c0             	movzx  eax,al
c001d2e3:	50                   	push   eax
c001d2e4:	e8 43 fe ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d2e9:	5a                   	pop    edx
c001d2ea:	5f                   	pop    edi
c001d2eb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d2f1:	53                   	push   ebx
c001d2f2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2f7:	99                   	cdq    
c001d2f8:	f7 f9                	idiv   ecx
c001d2fa:	83 c2 30             	add    edx,0x30
c001d2fd:	0f b6 d2             	movzx  edx,dl
c001d300:	52                   	push   edx
c001d301:	e8 26 fe ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d306:	83 c4 10             	add    esp,0x10
c001d309:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d30f:	eb 05                	jmp    c001d316 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d311:	be 01 00 00 00       	mov    esi,0x1
c001d316:	83 c4 0c             	add    esp,0xc
c001d319:	89 f0                	mov    eax,esi
c001d31b:	5b                   	pop    ebx
c001d31c:	5e                   	pop    esi
c001d31d:	5f                   	pop    edi
c001d31e:	5d                   	pop    ebp
c001d31f:	c3                   	ret    

c001d320 <ATA::write(unsigned long long, int, void*)>:
c001d320:	55                   	push   ebp
c001d321:	57                   	push   edi
c001d322:	56                   	push   esi
c001d323:	be 04 00 00 00       	mov    esi,0x4
c001d328:	53                   	push   ebx
c001d329:	83 ec 0c             	sub    esp,0xc
c001d32c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d330:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d334:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d337:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d33b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d33f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d345:	0f 87 9c 01 00 00    	ja     c001d4e7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d34b:	be 06 00 00 00       	mov    esi,0x6
c001d350:	85 c9                	test   ecx,ecx
c001d352:	0f 84 8f 01 00 00    	je     c001d4e7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d358:	55                   	push   ebp
c001d359:	55                   	push   ebp
c001d35a:	6a 01                	push   0x1
c001d35c:	51                   	push   ecx
c001d35d:	53                   	push   ebx
c001d35e:	52                   	push   edx
c001d35f:	50                   	push   eax
c001d360:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d364:	e8 37 f9 ff ff       	call   c001cca0 <ATA::access(unsigned long long, int, void*, bool)>
c001d369:	83 c4 20             	add    esp,0x20
c001d36c:	89 c6                	mov    esi,eax
c001d36e:	85 c0                	test   eax,eax
c001d370:	0f 85 6c 01 00 00    	jne    c001d4e2 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d376:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d37c:	bd 10 27 00 00       	mov    ebp,0x2710
c001d381:	50                   	push   eax
c001d382:	50                   	push   eax
c001d383:	6a 0f                	push   0xf
c001d385:	6a 00                	push   0x0
c001d387:	e8 b1 fd ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001d38c:	5a                   	pop    edx
c001d38d:	0f b6 d8             	movzx  ebx,al
c001d390:	59                   	pop    ecx
c001d391:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d396:	53                   	push   ebx
c001d397:	b9 0a 00 00 00       	mov    ecx,0xa
c001d39c:	99                   	cdq    
c001d39d:	f7 fd                	idiv   ebp
c001d39f:	99                   	cdq    
c001d3a0:	f7 f9                	idiv   ecx
c001d3a2:	8d 42 30             	lea    eax,[edx+0x30]
c001d3a5:	0f b6 c0             	movzx  eax,al
c001d3a8:	50                   	push   eax
c001d3a9:	e8 7e fd ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d3ae:	5f                   	pop    edi
c001d3af:	bf e8 03 00 00       	mov    edi,0x3e8
c001d3b4:	5a                   	pop    edx
c001d3b5:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d3bb:	53                   	push   ebx
c001d3bc:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3c1:	99                   	cdq    
c001d3c2:	f7 ff                	idiv   edi
c001d3c4:	99                   	cdq    
c001d3c5:	f7 f9                	idiv   ecx
c001d3c7:	8d 42 30             	lea    eax,[edx+0x30]
c001d3ca:	0f b6 c0             	movzx  eax,al
c001d3cd:	50                   	push   eax
c001d3ce:	e8 59 fd ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d3d3:	5f                   	pop    edi
c001d3d4:	bf 64 00 00 00       	mov    edi,0x64
c001d3d9:	5a                   	pop    edx
c001d3da:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d3e0:	53                   	push   ebx
c001d3e1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3e6:	99                   	cdq    
c001d3e7:	f7 ff                	idiv   edi
c001d3e9:	99                   	cdq    
c001d3ea:	f7 f9                	idiv   ecx
c001d3ec:	8d 42 30             	lea    eax,[edx+0x30]
c001d3ef:	0f b6 c0             	movzx  eax,al
c001d3f2:	50                   	push   eax
c001d3f3:	e8 34 fd ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d3f8:	5a                   	pop    edx
c001d3f9:	5a                   	pop    edx
c001d3fa:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d400:	53                   	push   ebx
c001d401:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d406:	99                   	cdq    
c001d407:	f7 f9                	idiv   ecx
c001d409:	99                   	cdq    
c001d40a:	f7 f9                	idiv   ecx
c001d40c:	8d 42 30             	lea    eax,[edx+0x30]
c001d40f:	0f b6 c0             	movzx  eax,al
c001d412:	50                   	push   eax
c001d413:	e8 14 fd ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d418:	5a                   	pop    edx
c001d419:	5a                   	pop    edx
c001d41a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d420:	53                   	push   ebx
c001d421:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d426:	99                   	cdq    
c001d427:	f7 f9                	idiv   ecx
c001d429:	8d 42 30             	lea    eax,[edx+0x30]
c001d42c:	0f b6 c0             	movzx  eax,al
c001d42f:	50                   	push   eax
c001d430:	e8 f7 fc ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d435:	5a                   	pop    edx
c001d436:	5a                   	pop    edx
c001d437:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d43d:	53                   	push   ebx
c001d43e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d443:	99                   	cdq    
c001d444:	f7 fd                	idiv   ebp
c001d446:	99                   	cdq    
c001d447:	f7 f9                	idiv   ecx
c001d449:	8d 42 30             	lea    eax,[edx+0x30]
c001d44c:	0f b6 c0             	movzx  eax,al
c001d44f:	50                   	push   eax
c001d450:	e8 d7 fc ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d455:	5d                   	pop    ebp
c001d456:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d45b:	5a                   	pop    edx
c001d45c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d462:	53                   	push   ebx
c001d463:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d468:	99                   	cdq    
c001d469:	f7 fd                	idiv   ebp
c001d46b:	99                   	cdq    
c001d46c:	f7 f9                	idiv   ecx
c001d46e:	8d 42 30             	lea    eax,[edx+0x30]
c001d471:	0f b6 c0             	movzx  eax,al
c001d474:	50                   	push   eax
c001d475:	e8 b2 fc ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d47a:	5d                   	pop    ebp
c001d47b:	5a                   	pop    edx
c001d47c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d482:	53                   	push   ebx
c001d483:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d488:	99                   	cdq    
c001d489:	f7 ff                	idiv   edi
c001d48b:	99                   	cdq    
c001d48c:	f7 f9                	idiv   ecx
c001d48e:	8d 42 30             	lea    eax,[edx+0x30]
c001d491:	0f b6 c0             	movzx  eax,al
c001d494:	50                   	push   eax
c001d495:	e8 92 fc ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d49a:	5f                   	pop    edi
c001d49b:	5d                   	pop    ebp
c001d49c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d4a2:	53                   	push   ebx
c001d4a3:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4a8:	99                   	cdq    
c001d4a9:	f7 f9                	idiv   ecx
c001d4ab:	99                   	cdq    
c001d4ac:	f7 f9                	idiv   ecx
c001d4ae:	8d 42 30             	lea    eax,[edx+0x30]
c001d4b1:	0f b6 c0             	movzx  eax,al
c001d4b4:	50                   	push   eax
c001d4b5:	e8 72 fc ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d4ba:	5a                   	pop    edx
c001d4bb:	5f                   	pop    edi
c001d4bc:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d4c2:	53                   	push   ebx
c001d4c3:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4c8:	99                   	cdq    
c001d4c9:	f7 f9                	idiv   ecx
c001d4cb:	83 c2 30             	add    edx,0x30
c001d4ce:	0f b6 d2             	movzx  edx,dl
c001d4d1:	52                   	push   edx
c001d4d2:	e8 55 fc ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001d4d7:	83 c4 10             	add    esp,0x10
c001d4da:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d4e0:	eb 05                	jmp    c001d4e7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d4e2:	be 01 00 00 00       	mov    esi,0x1
c001d4e7:	83 c4 0c             	add    esp,0xc
c001d4ea:	89 f0                	mov    eax,esi
c001d4ec:	5b                   	pop    ebx
c001d4ed:	5e                   	pop    esi
c001d4ee:	5f                   	pop    edi
c001d4ef:	5d                   	pop    ebp
c001d4f0:	c3                   	ret    
c001d4f1:	90                   	nop

c001d4f2 <ATAPI::write(unsigned long long, int, void*)>:
c001d4f2:	b8 03 00 00 00       	mov    eax,0x3
c001d4f7:	c3                   	ret    

c001d4f8 <ATAPI::close(int, int, void*)>:
c001d4f8:	83 ec 0c             	sub    esp,0xc
c001d4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4ff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d505:	85 c0                	test   eax,eax
c001d507:	74 0c                	je     c001d515 <ATAPI::close(int, int, void*)+0x1d>
c001d509:	83 ec 0c             	sub    esp,0xc
c001d50c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d50e:	50                   	push   eax
c001d50f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d512:	83 c4 10             	add    esp,0x10
c001d515:	31 c0                	xor    eax,eax
c001d517:	83 c4 0c             	add    esp,0xc
c001d51a:	c3                   	ret    
c001d51b:	90                   	nop

c001d51c <ATAPI::ATAPI()>:
c001d51c:	83 ec 0c             	sub    esp,0xc
c001d51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d523:	83 ec 04             	sub    esp,0x4
c001d526:	68 00 08 00 00       	push   0x800
c001d52b:	68 bd 33 02 c0       	push   0xc00233bd
c001d530:	50                   	push   eax
c001d531:	e8 1c f8 fe ff       	call   c000cd52 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d536:	83 c4 10             	add    esp,0x10
c001d539:	ba d8 32 02 c0       	mov    edx,0xc00232d8
c001d53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d542:	89 10                	mov    DWORD PTR [eax],edx
c001d544:	90                   	nop
c001d545:	83 c4 0c             	add    esp,0xc
c001d548:	c3                   	ret    
c001d549:	90                   	nop

c001d54a <ATAPI::readyForCommand()>:
c001d54a:	56                   	push   esi
c001d54b:	53                   	push   ebx
c001d54c:	53                   	push   ebx
c001d54d:	31 db                	xor    ebx,ebx
c001d54f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d553:	51                   	push   ecx
c001d554:	6a 0c                	push   0xc
c001d556:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d55d:	50                   	push   eax
c001d55e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d564:	e8 a3 e8 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001d569:	83 c4 10             	add    esp,0x10
c001d56c:	a8 88                	test   al,0x88
c001d56e:	74 25                	je     c001d595 <ATAPI::readyForCommand()+0x4b>
c001d570:	43                   	inc    ebx
c001d571:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d577:	7e da                	jle    c001d553 <ATAPI::readyForCommand()+0x9>
c001d579:	83 ec 0c             	sub    esp,0xc
c001d57c:	68 5e 01 00 00       	push   0x15e
c001d581:	e8 2a 8e ff ff       	call   c00163b0 <milliTenthSleep(unsigned int)>
c001d586:	83 c4 10             	add    esp,0x10
c001d589:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d58f:	75 c2                	jne    c001d553 <ATAPI::readyForCommand()+0x9>
c001d591:	31 c0                	xor    eax,eax
c001d593:	eb 02                	jmp    c001d597 <ATAPI::readyForCommand()+0x4d>
c001d595:	b0 01                	mov    al,0x1
c001d597:	5a                   	pop    edx
c001d598:	5b                   	pop    ebx
c001d599:	5e                   	pop    esi
c001d59a:	c3                   	ret    
c001d59b:	90                   	nop

c001d59c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d59c:	55                   	push   ebp
c001d59d:	57                   	push   edi
c001d59e:	56                   	push   esi
c001d59f:	53                   	push   ebx
c001d5a0:	83 ec 20             	sub    esp,0x20
c001d5a3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d5a7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d5ab:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d5af:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d5b3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d5b7:	6a 01                	push   0x1
c001d5b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5c0:	50                   	push   eax
c001d5c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5c7:	e8 88 e9 ff ff       	call   c001bf54 <IDE::enableIRQs(unsigned char, bool)>
c001d5cc:	5e                   	pop    esi
c001d5cd:	58                   	pop    eax
c001d5ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5d5:	50                   	push   eax
c001d5d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5dc:	e8 45 e7 ff ff       	call   c001bd26 <IDE::prepareInterrupt(unsigned char)>
c001d5e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5e4:	e8 61 ff ff ff       	call   c001d54a <ATAPI::readyForCommand()>
c001d5e9:	83 c4 10             	add    esp,0x10
c001d5ec:	84 c0                	test   al,al
c001d5ee:	75 0a                	jne    c001d5fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d5f0:	bb 01 00 00 00       	mov    ebx,0x1
c001d5f5:	e9 60 02 00 00       	jmp    c001d85a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d5fa:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d600:	c1 e0 04             	shl    eax,0x4
c001d603:	0f b6 c0             	movzx  eax,al
c001d606:	50                   	push   eax
c001d607:	6a 06                	push   0x6
c001d609:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d610:	50                   	push   eax
c001d611:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d617:	e8 30 e7 ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d61c:	6a 00                	push   0x0
c001d61e:	6a 01                	push   0x1
c001d620:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d627:	50                   	push   eax
c001d628:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d62e:	e8 19 e7 ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d633:	83 c4 20             	add    esp,0x20
c001d636:	0f b6 c3             	movzx  eax,bl
c001d639:	0f b6 df             	movzx  ebx,bh
c001d63c:	50                   	push   eax
c001d63d:	6a 04                	push   0x4
c001d63f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d646:	50                   	push   eax
c001d647:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d64d:	e8 fa e6 ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d652:	53                   	push   ebx
c001d653:	6a 05                	push   0x5
c001d655:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d65c:	50                   	push   eax
c001d65d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d663:	e8 e4 e6 ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d668:	83 c4 20             	add    esp,0x20
c001d66b:	68 a0 00 00 00       	push   0xa0
c001d670:	6a 07                	push   0x7
c001d672:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d679:	50                   	push   eax
c001d67a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d680:	e8 c7 e6 ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d685:	83 c4 0c             	add    esp,0xc
c001d688:	6a 01                	push   0x1
c001d68a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d691:	50                   	push   eax
c001d692:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d698:	e8 97 f1 ff ff       	call   c001c834 <IDE::polling(unsigned char, unsigned int)>
c001d69d:	83 c4 10             	add    esp,0x10
c001d6a0:	0f b6 d8             	movzx  ebx,al
c001d6a3:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d6a9:	85 db                	test   ebx,ebx
c001d6ab:	74 20                	je     c001d6cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d6ad:	53                   	push   ebx
c001d6ae:	0f b6 c0             	movzx  eax,al
c001d6b1:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d6b8:	52                   	push   edx
c001d6b9:	50                   	push   eax
c001d6ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6c0:	e8 b5 f0 ff ff       	call   c001c77a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d6c5:	83 c4 10             	add    esp,0x10
c001d6c8:	e9 8d 01 00 00       	jmp    c001d85a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d6cd:	0f b6 c0             	movzx  eax,al
c001d6d0:	53                   	push   ebx
c001d6d1:	53                   	push   ebx
c001d6d2:	50                   	push   eax
c001d6d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6d9:	e8 5c e6 ff ff       	call   c001bd3a <IDE::getBase(unsigned char)>
c001d6de:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d6e2:	b9 06 00 00 00       	mov    ecx,0x6
c001d6e7:	89 c2                	mov    edx,eax
c001d6e9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d6ec:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d6f0:	83 c4 10             	add    esp,0x10
c001d6f3:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d6f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6fc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d702:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d709:	85 db                	test   ebx,ebx
c001d70b:	0f 84 ec 00 00 00    	je     c001d7fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d711:	51                   	push   ecx
c001d712:	51                   	push   ecx
c001d713:	52                   	push   edx
c001d714:	50                   	push   eax
c001d715:	e8 a0 e7 ff ff       	call   c001beba <IDE::waitInterrupt(unsigned char)>
c001d71a:	83 c4 10             	add    esp,0x10
c001d71d:	84 c0                	test   al,al
c001d71f:	0f 84 cb fe ff ff    	je     c001d5f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d725:	56                   	push   esi
c001d726:	56                   	push   esi
c001d727:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d72e:	50                   	push   eax
c001d72f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d735:	e8 ec e5 ff ff       	call   c001bd26 <IDE::prepareInterrupt(unsigned char)>
c001d73a:	83 c4 0c             	add    esp,0xc
c001d73d:	6a 04                	push   0x4
c001d73f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d746:	50                   	push   eax
c001d747:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d74d:	e8 ba e6 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001d752:	83 c4 0c             	add    esp,0xc
c001d755:	89 c6                	mov    esi,eax
c001d757:	6a 05                	push   0x5
c001d759:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d760:	50                   	push   eax
c001d761:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d767:	e8 a0 e6 ff ff       	call   c001be0c <IDE::read(unsigned char, unsigned char)>
c001d76c:	89 f1                	mov    ecx,esi
c001d76e:	0f b6 c0             	movzx  eax,al
c001d771:	0f b6 f1             	movzx  esi,cl
c001d774:	c1 e0 08             	shl    eax,0x8
c001d777:	09 c6                	or     esi,eax
c001d779:	d1 fe                	sar    esi,1
c001d77b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d77f:	83 c4 10             	add    esp,0x10
c001d782:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d787:	74 41                	je     c001d7ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d789:	31 c9                	xor    ecx,ecx
c001d78b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d791:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d798:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d79c:	75 0a                	jne    c001d7a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d79e:	01 c9                	add    ecx,ecx
c001d7a0:	01 cd                	add    ebp,ecx
c001d7a2:	4b                   	dec    ebx
c001d7a3:	e9 54 ff ff ff       	jmp    c001d6fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d7a8:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d7ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d7b1:	51                   	push   ecx
c001d7b2:	51                   	push   ecx
c001d7b3:	52                   	push   edx
c001d7b4:	50                   	push   eax
c001d7b5:	e8 80 e5 ff ff       	call   c001bd3a <IDE::getBase(unsigned char)>
c001d7ba:	89 c2                	mov    edx,eax
c001d7bc:	89 f0                	mov    eax,esi
c001d7be:	66 ef                	out    dx,ax
c001d7c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d7c4:	83 c4 10             	add    esp,0x10
c001d7c7:	41                   	inc    ecx
c001d7c8:	eb c1                	jmp    c001d78b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d7ca:	31 f6                	xor    esi,esi
c001d7cc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7d2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7d9:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d7dd:	75 06                	jne    c001d7e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d7df:	01 f6                	add    esi,esi
c001d7e1:	01 f5                	add    ebp,esi
c001d7e3:	eb bd                	jmp    c001d7a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d7e5:	51                   	push   ecx
c001d7e6:	51                   	push   ecx
c001d7e7:	52                   	push   edx
c001d7e8:	50                   	push   eax
c001d7e9:	e8 4c e5 ff ff       	call   c001bd3a <IDE::getBase(unsigned char)>
c001d7ee:	89 c2                	mov    edx,eax
c001d7f0:	66 ed                	in     ax,dx
c001d7f2:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d7f7:	83 c4 10             	add    esp,0x10
c001d7fa:	46                   	inc    esi
c001d7fb:	eb cf                	jmp    c001d7cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d7fd:	51                   	push   ecx
c001d7fe:	51                   	push   ecx
c001d7ff:	52                   	push   edx
c001d800:	50                   	push   eax
c001d801:	e8 b4 e6 ff ff       	call   c001beba <IDE::waitInterrupt(unsigned char)>
c001d806:	83 c4 10             	add    esp,0x10
c001d809:	84 c0                	test   al,al
c001d80b:	0f 84 df fd ff ff    	je     c001d5f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d811:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d816:	52                   	push   edx
c001d817:	52                   	push   edx
c001d818:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d81f:	50                   	push   eax
c001d820:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d826:	e8 fb e4 ff ff       	call   c001bd26 <IDE::prepareInterrupt(unsigned char)>
c001d82b:	83 c4 10             	add    esp,0x10
c001d82e:	50                   	push   eax
c001d82f:	50                   	push   eax
c001d830:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d837:	50                   	push   eax
c001d838:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d83e:	e8 f7 e4 ff ff       	call   c001bd3a <IDE::getBase(unsigned char)>
c001d843:	8d 50 07             	lea    edx,[eax+0x7]
c001d846:	ec                   	in     al,dx
c001d847:	83 c4 10             	add    esp,0x10
c001d84a:	a8 88                	test   al,0x88
c001d84c:	74 0a                	je     c001d858 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d84e:	4b                   	dec    ebx
c001d84f:	75 dd                	jne    c001d82e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d851:	bb 02 00 00 00       	mov    ebx,0x2
c001d856:	eb 02                	jmp    c001d85a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d858:	31 db                	xor    ebx,ebx
c001d85a:	83 c4 1c             	add    esp,0x1c
c001d85d:	89 d8                	mov    eax,ebx
c001d85f:	5b                   	pop    ebx
c001d860:	5e                   	pop    esi
c001d861:	5f                   	pop    edi
c001d862:	5d                   	pop    ebp
c001d863:	c3                   	ret    

c001d864 <ATAPI::diskRemoved()>:
c001d864:	53                   	push   ebx
c001d865:	83 ec 14             	sub    esp,0x14
c001d868:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d86c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d873:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d879:	e8 70 04 ff ff       	call   c000dcee <LogicalDisk::unmount()>
c001d87e:	58                   	pop    eax
c001d87f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d885:	e8 46 0e ff ff       	call   c000e6d0 <VCache::writeWriteBuffer()>
c001d88a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d890:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d894:	83 c4 18             	add    esp,0x18
c001d897:	5b                   	pop    ebx
c001d898:	e9 23 0e ff ff       	jmp    c000e6c0 <VCache::invalidateReadBuffer()>
c001d89d:	90                   	nop

c001d89e <ATAPI::eject()>:
c001d89e:	57                   	push   edi
c001d89f:	b9 03 00 00 00       	mov    ecx,0x3
c001d8a4:	53                   	push   ebx
c001d8a5:	83 ec 14             	sub    esp,0x14
c001d8a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d8ac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d8b0:	fc                   	cld    
c001d8b1:	31 c0                	xor    eax,eax
c001d8b3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d8b5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d8ba:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d8bf:	50                   	push   eax
c001d8c0:	50                   	push   eax
c001d8c1:	6a 00                	push   0x0
c001d8c3:	6a 00                	push   0x0
c001d8c5:	6a 00                	push   0x0
c001d8c7:	6a 02                	push   0x2
c001d8c9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d8cd:	50                   	push   eax
c001d8ce:	53                   	push   ebx
c001d8cf:	e8 c8 fc ff ff       	call   c001d59c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d8d4:	83 c4 14             	add    esp,0x14
c001d8d7:	53                   	push   ebx
c001d8d8:	e8 87 ff ff ff       	call   c001d864 <ATAPI::diskRemoved()>
c001d8dd:	83 c4 24             	add    esp,0x24
c001d8e0:	31 c0                	xor    eax,eax
c001d8e2:	5b                   	pop    ebx
c001d8e3:	5f                   	pop    edi
c001d8e4:	c3                   	ret    
c001d8e5:	90                   	nop

c001d8e6 <ATAPI::diskInserted()>:
c001d8e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8ea:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d8f1:	c3                   	ret    

c001d8f2 <ATAPI::detectMedia()>:
c001d8f2:	56                   	push   esi
c001d8f3:	53                   	push   ebx
c001d8f4:	83 ec 28             	sub    esp,0x28
c001d8f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d8fb:	6a 0c                	push   0xc
c001d8fd:	6a 00                	push   0x0
c001d8ff:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d903:	56                   	push   esi
c001d904:	e8 e7 2b fe ff       	call   c00004f0 <memset>
c001d909:	58                   	pop    eax
c001d90a:	5a                   	pop    edx
c001d90b:	6a 00                	push   0x0
c001d90d:	6a 00                	push   0x0
c001d90f:	6a 00                	push   0x0
c001d911:	6a 00                	push   0x0
c001d913:	56                   	push   esi
c001d914:	53                   	push   ebx
c001d915:	e8 82 fc ff ff       	call   c001d59c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d91a:	83 c4 1c             	add    esp,0x1c
c001d91d:	6a 0c                	push   0xc
c001d91f:	6a 00                	push   0x0
c001d921:	56                   	push   esi
c001d922:	e8 c9 2b fe ff       	call   c00004f0 <memset>
c001d927:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d92c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d931:	59                   	pop    ecx
c001d932:	58                   	pop    eax
c001d933:	6a 01                	push   0x1
c001d935:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d939:	50                   	push   eax
c001d93a:	6a 00                	push   0x0
c001d93c:	6a 12                	push   0x12
c001d93e:	56                   	push   esi
c001d93f:	53                   	push   ebx
c001d940:	e8 57 fc ff ff       	call   c001d59c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d945:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d949:	83 c4 20             	add    esp,0x20
c001d94c:	83 e0 7f             	and    eax,0x7f
c001d94f:	83 f8 70             	cmp    eax,0x70
c001d952:	74 15                	je     c001d969 <ATAPI::detectMedia()+0x77>
c001d954:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d95b:	75 0c                	jne    c001d969 <ATAPI::detectMedia()+0x77>
c001d95d:	83 ec 0c             	sub    esp,0xc
c001d960:	53                   	push   ebx
c001d961:	e8 80 ff ff ff       	call   c001d8e6 <ATAPI::diskInserted()>
c001d966:	83 c4 10             	add    esp,0x10
c001d969:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d96d:	83 e0 0f             	and    eax,0xf
c001d970:	83 f8 02             	cmp    eax,0x2
c001d973:	75 1b                	jne    c001d990 <ATAPI::detectMedia()+0x9e>
c001d975:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d97a:	75 2d                	jne    c001d9a9 <ATAPI::detectMedia()+0xb7>
c001d97c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d983:	74 24                	je     c001d9a9 <ATAPI::detectMedia()+0xb7>
c001d985:	83 ec 0c             	sub    esp,0xc
c001d988:	53                   	push   ebx
c001d989:	e8 d6 fe ff ff       	call   c001d864 <ATAPI::diskRemoved()>
c001d98e:	eb 16                	jmp    c001d9a6 <ATAPI::detectMedia()+0xb4>
c001d990:	85 c0                	test   eax,eax
c001d992:	75 15                	jne    c001d9a9 <ATAPI::detectMedia()+0xb7>
c001d994:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d99b:	75 0c                	jne    c001d9a9 <ATAPI::detectMedia()+0xb7>
c001d99d:	83 ec 0c             	sub    esp,0xc
c001d9a0:	53                   	push   ebx
c001d9a1:	e8 40 ff ff ff       	call   c001d8e6 <ATAPI::diskInserted()>
c001d9a6:	83 c4 10             	add    esp,0x10
c001d9a9:	83 c4 24             	add    esp,0x24
c001d9ac:	5b                   	pop    ebx
c001d9ad:	5e                   	pop    esi
c001d9ae:	c3                   	ret    
c001d9af:	90                   	nop

c001d9b0 <ATAPI::open(int, int, void*)>:
c001d9b0:	56                   	push   esi
c001d9b1:	53                   	push   ebx
c001d9b2:	50                   	push   eax
c001d9b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9bf:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d9c5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d9cb:	c1 e0 06             	shl    eax,0x6
c001d9ce:	01 d0                	add    eax,edx
c001d9d0:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d9d7:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d9dd:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d9e4:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d9ee:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d9f4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d9fb:	6a 04                	push   0x4
c001d9fd:	6a 0c                	push   0xc
c001d9ff:	51                   	push   ecx
c001da00:	52                   	push   edx
c001da01:	e8 46 e3 ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da06:	90                   	nop
c001da07:	90                   	nop
c001da08:	6a 00                	push   0x0
c001da0a:	6a 0c                	push   0xc
c001da0c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da13:	50                   	push   eax
c001da14:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da1a:	e8 2d e3 ff ff       	call   c001bd4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da1f:	83 c4 14             	add    esp,0x14
c001da22:	68 78 01 00 00       	push   0x178
c001da27:	e8 8a a0 fe ff       	call   c0007ab6 <malloc>
c001da2c:	83 c4 0c             	add    esp,0xc
c001da2f:	89 c6                	mov    esi,eax
c001da31:	6a 00                	push   0x0
c001da33:	68 ff ff ff 7f       	push   0x7fffffff
c001da38:	6a 00                	push   0x0
c001da3a:	6a 00                	push   0x0
c001da3c:	53                   	push   ebx
c001da3d:	68 6f 34 02 c0       	push   0xc002346f
c001da42:	50                   	push   eax
c001da43:	e8 e4 00 ff ff       	call   c000db2c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001da48:	83 c4 14             	add    esp,0x14
c001da4b:	56                   	push   esi
c001da4c:	e8 9b 01 ff ff       	call   c000dbec <LogicalDisk::assignDriveLetter()>
c001da51:	5a                   	pop    edx
c001da52:	0f be c0             	movsx  eax,al
c001da55:	59                   	pop    ecx
c001da56:	50                   	push   eax
c001da57:	68 c0 32 02 c0       	push   0xc00232c0
c001da5c:	e8 e4 ce fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001da61:	58                   	pop    eax
c001da62:	5a                   	pop    edx
c001da63:	56                   	push   esi
c001da64:	53                   	push   ebx
c001da65:	e8 1c ef fe ff       	call   c000c986 <Device::addChild(Device*)>
c001da6a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001da70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da73:	e8 42 f3 fe ff       	call   c000cdba <PhysicalDisk::startCache()>
c001da78:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001da7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da82:	e8 6b fe ff ff       	call   c001d8f2 <ATAPI::detectMedia()>
c001da87:	83 c4 14             	add    esp,0x14
c001da8a:	31 c0                	xor    eax,eax
c001da8c:	5b                   	pop    ebx
c001da8d:	5e                   	pop    esi
c001da8e:	c3                   	ret    
c001da8f:	90                   	nop

c001da90 <ATAPI::read(unsigned long long, int, void*)>:
c001da90:	55                   	push   ebp
c001da91:	57                   	push   edi
c001da92:	56                   	push   esi
c001da93:	53                   	push   ebx
c001da94:	83 ec 1c             	sub    esp,0x1c
c001da97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001da9b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001da9f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001daa3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001daaa:	74 3c                	je     c001dae8 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001daac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dab0:	b9 03 00 00 00       	mov    ecx,0x3
c001dab5:	fc                   	cld    
c001dab6:	31 c0                	xor    eax,eax
c001dab8:	0f ce                	bswap  esi
c001daba:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dabc:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dac1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dac5:	89 e8                	mov    eax,ebp
c001dac7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dacb:	50                   	push   eax
c001dacc:	50                   	push   eax
c001dacd:	55                   	push   ebp
c001dace:	c1 e5 0b             	shl    ebp,0xb
c001dad1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dad5:	6a 00                	push   0x0
c001dad7:	55                   	push   ebp
c001dad8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dadc:	50                   	push   eax
c001dadd:	53                   	push   ebx
c001dade:	e8 b9 fa ff ff       	call   c001d59c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dae3:	83 c4 20             	add    esp,0x20
c001dae6:	eb 1a                	jmp    c001db02 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dae8:	83 ec 0c             	sub    esp,0xc
c001daeb:	53                   	push   ebx
c001daec:	e8 01 fe ff ff       	call   c001d8f2 <ATAPI::detectMedia()>
c001daf1:	83 c4 10             	add    esp,0x10
c001daf4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dafb:	75 af                	jne    c001daac <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dafd:	b8 02 00 00 00       	mov    eax,0x2
c001db02:	83 c4 1c             	add    esp,0x1c
c001db05:	5b                   	pop    ebx
c001db06:	5e                   	pop    esi
c001db07:	5f                   	pop    edi
c001db08:	5d                   	pop    ebp
c001db09:	c3                   	ret    

c001db0a <SATA::close(int, int, void*)>:
c001db0a:	83 ec 0c             	sub    esp,0xc
c001db0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db11:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db17:	85 c0                	test   eax,eax
c001db19:	74 0c                	je     c001db27 <SATA::close(int, int, void*)+0x1d>
c001db1b:	83 ec 0c             	sub    esp,0xc
c001db1e:	8b 10                	mov    edx,DWORD PTR [eax]
c001db20:	50                   	push   eax
c001db21:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db24:	83 c4 10             	add    esp,0x10
c001db27:	31 c0                	xor    eax,eax
c001db29:	83 c4 0c             	add    esp,0xc
c001db2c:	c3                   	ret    
c001db2d:	90                   	nop

c001db2e <SATA::powerSaving(PowerSavingLevel)>:
c001db2e:	c3                   	ret    
c001db2f:	90                   	nop

c001db30 <SATA::open(int, int, void*)>:
c001db30:	56                   	push   esi
c001db31:	53                   	push   ebx
c001db32:	50                   	push   eax
c001db33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db3b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001db45:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001db4b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001db55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db59:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001db63:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001db69:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001db70:	e8 4a a2 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001db75:	89 c6                	mov    esi,eax
c001db77:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db7d:	81 c6 00 10 00 00    	add    esi,0x1000
c001db83:	e8 37 a2 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001db88:	39 c6                	cmp    esi,eax
c001db8a:	74 10                	je     c001db9c <SATA::open(int, int, void*)+0x6c>
c001db8c:	83 ec 0c             	sub    esp,0xc
c001db8f:	68 08 33 02 c0       	push   0xc0023308
c001db94:	e8 46 3a ff ff       	call   c00115df <KePanic(char const*)>
c001db99:	83 c4 10             	add    esp,0x10
c001db9c:	83 ec 0c             	sub    esp,0xc
c001db9f:	6a 02                	push   0x2
c001dba1:	e8 67 ba fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001dba6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dbac:	6a 03                	push   0x3
c001dbae:	50                   	push   eax
c001dbaf:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dbb5:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dbbb:	e8 60 c1 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dbc0:	83 c4 14             	add    esp,0x14
c001dbc3:	53                   	push   ebx
c001dbc4:	e8 f1 f1 fe ff       	call   c000cdba <PhysicalDisk::startCache()>
c001dbc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbcc:	e8 2d 04 ff ff       	call   c000dffe <createPartitionsForDisk(PhysicalDisk*)>
c001dbd1:	83 c4 14             	add    esp,0x14
c001dbd4:	31 c0                	xor    eax,eax
c001dbd6:	5b                   	pop    ebx
c001dbd7:	5e                   	pop    esi
c001dbd8:	c3                   	ret    
c001dbd9:	90                   	nop

c001dbda <SATA::SATA()>:
c001dbda:	83 ec 0c             	sub    esp,0xc
c001dbdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbe1:	83 ec 04             	sub    esp,0x4
c001dbe4:	68 00 02 00 00       	push   0x200
c001dbe9:	68 1c 33 02 c0       	push   0xc002331c
c001dbee:	50                   	push   eax
c001dbef:	e8 5e f1 fe ff       	call   c000cd52 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dbf4:	83 c4 10             	add    esp,0x10
c001dbf7:	ba 8c 33 02 c0       	mov    edx,0xc002338c
c001dbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc00:	89 10                	mov    DWORD PTR [eax],edx
c001dc02:	90                   	nop
c001dc03:	83 c4 0c             	add    esp,0xc
c001dc06:	c3                   	ret    
c001dc07:	90                   	nop

c001dc08 <SATA::access(unsigned long long, int, void*, bool)>:
c001dc08:	55                   	push   ebp
c001dc09:	57                   	push   edi
c001dc0a:	56                   	push   esi
c001dc0b:	53                   	push   ebx
c001dc0c:	83 ec 2c             	sub    esp,0x2c
c001dc0f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dc17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc1b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dc1f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc23:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dc28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc2c:	7e 10                	jle    c001dc3e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dc2e:	83 ec 0c             	sub    esp,0xc
c001dc31:	68 2c 33 02 c0       	push   0xc002332c
c001dc36:	e8 a4 39 ff ff       	call   c00115df <KePanic(char const*)>
c001dc3b:	83 c4 10             	add    esp,0x10
c001dc3e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dc44:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dc4a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc54:	89 d0                	mov    eax,edx
c001dc56:	c1 e0 07             	shl    eax,0x7
c001dc59:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dc5d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dc67:	51                   	push   ecx
c001dc68:	8d 42 02             	lea    eax,[edx+0x2]
c001dc6b:	51                   	push   ecx
c001dc6c:	c1 e0 07             	shl    eax,0x7
c001dc6f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dc73:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dc77:	50                   	push   eax
c001dc78:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dc7e:	e8 91 ec ff ff       	call   c001c914 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dc83:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dc87:	83 c4 10             	add    esp,0x10
c001dc8a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001dc8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc93:	0f 84 57 01 00 00    	je     c001ddf0 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dc99:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dc9d:	c1 e0 09             	shl    eax,0x9
c001dca0:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dca5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dca9:	74 0e                	je     c001dcb9 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001dcab:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dcb1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dcb5:	89 c1                	mov    ecx,eax
c001dcb7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dcb9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dcbf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dcc3:	8d 42 02             	lea    eax,[edx+0x2]
c001dcc6:	c1 e0 07             	shl    eax,0x7
c001dcc9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dccd:	8b 00                	mov    eax,DWORD PTR [eax]
c001dccf:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dcd5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dcdb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcdf:	c1 e1 05             	shl    ecx,0x5
c001dce2:	01 c8                	add    eax,ecx
c001dce4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dce8:	83 e1 01             	and    ecx,0x1
c001dceb:	89 ce                	mov    esi,ecx
c001dced:	8a 08                	mov    cl,BYTE PTR [eax]
c001dcef:	c1 e6 06             	shl    esi,0x6
c001dcf2:	83 e1 bf             	and    ecx,0xffffffbf
c001dcf5:	09 f1                	or     ecx,esi
c001dcf7:	88 08                	mov    BYTE PTR [eax],cl
c001dcf9:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dcfb:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dd01:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dd07:	89 08                	mov    DWORD PTR [eax],ecx
c001dd09:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd0f:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dd15:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001dd1b:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001dd1e:	50                   	push   eax
c001dd1f:	68 90 00 00 00       	push   0x90
c001dd24:	6a 00                	push   0x0
c001dd26:	56                   	push   esi
c001dd27:	e8 c4 27 fe ff       	call   c00004f0 <memset>
c001dd2c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dd32:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001dd38:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dd3c:	83 c4 10             	add    esp,0x10
c001dd3f:	48                   	dec    eax
c001dd40:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dd45:	89 c1                	mov    ecx,eax
c001dd47:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001dd4d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dd52:	09 c8                	or     eax,ecx
c001dd54:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001dd5a:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dd60:	83 c8 80             	or     eax,0xffffff80
c001dd63:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dd69:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dd6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd70:	25 00 7f 00 00       	and    eax,0x7f00
c001dd75:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dd7a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dd7f:	66 89 06             	mov    WORD PTR [esi],ax
c001dd82:	b0 35                	mov    al,0x35
c001dd84:	75 02                	jne    c001dd88 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001dd86:	b0 25                	mov    al,0x25
c001dd88:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001dd8b:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001dd8f:	89 e8                	mov    eax,ebp
c001dd91:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001dd95:	c1 e8 10             	shr    eax,0x10
c001dd98:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001dd9b:	89 e8                	mov    eax,ebp
c001dd9d:	c1 e8 18             	shr    eax,0x18
c001dda0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001dda3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001dda7:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ddaa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddae:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ddb1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ddb5:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ddb9:	89 d6                	mov    esi,edx
c001ddbb:	31 c0                	xor    eax,eax
c001ddbd:	c1 e6 07             	shl    esi,0x7
c001ddc0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ddc4:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ddca:	80 e1 88             	and    cl,0x88
c001ddcd:	74 0a                	je     c001ddd9 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001ddcf:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ddd4:	74 0a                	je     c001dde0 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ddd6:	40                   	inc    eax
c001ddd7:	eb eb                	jmp    c001ddc4 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001ddd9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ddde:	75 17                	jne    c001ddf7 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001dde0:	83 ec 0c             	sub    esp,0xc
c001dde3:	68 65 33 02 c0       	push   0xc0023365
c001dde8:	e8 58 cb fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001dded:	83 c4 10             	add    esp,0x10
c001ddf0:	b8 01 00 00 00       	mov    eax,0x1
c001ddf5:	eb 5d                	jmp    c001de54 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001ddf7:	b8 01 00 00 00       	mov    eax,0x1
c001ddfc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001de00:	c1 e2 07             	shl    edx,0x7
c001de03:	d3 e0                	shl    eax,cl
c001de05:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001de09:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001de0f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001de15:	85 c8                	test   eax,ecx
c001de17:	74 16                	je     c001de2f <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001de19:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001de1f:	0f ba e1 1e          	bt     ecx,0x1e
c001de23:	73 ea                	jae    c001de0f <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001de25:	83 ec 0c             	sub    esp,0xc
c001de28:	68 73 33 02 c0       	push   0xc0023373
c001de2d:	eb b9                	jmp    c001dde8 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001de2f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001de35:	0f ba e0 1e          	bt     eax,0x1e
c001de39:	72 b5                	jb     c001ddf0 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001de3b:	31 c0                	xor    eax,eax
c001de3d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001de42:	75 10                	jne    c001de54 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001de44:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001de4a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001de4e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001de52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de54:	83 c4 2c             	add    esp,0x2c
c001de57:	5b                   	pop    ebx
c001de58:	5e                   	pop    esi
c001de59:	5f                   	pop    edi
c001de5a:	5d                   	pop    ebp
c001de5b:	c3                   	ret    

c001de5c <SATA::read(unsigned long long, int, void*)>:
c001de5c:	55                   	push   ebp
c001de5d:	57                   	push   edi
c001de5e:	56                   	push   esi
c001de5f:	be 04 00 00 00       	mov    esi,0x4
c001de64:	53                   	push   ebx
c001de65:	83 ec 0c             	sub    esp,0xc
c001de68:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001de6c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de70:	8d 7b ff             	lea    edi,[ebx-0x1]
c001de73:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de77:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001de7b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001de81:	0f 87 1a 02 00 00    	ja     c001e0a1 <SATA::read(unsigned long long, int, void*)+0x245>
c001de87:	be 06 00 00 00       	mov    esi,0x6
c001de8c:	85 c9                	test   ecx,ecx
c001de8e:	0f 84 0d 02 00 00    	je     c001e0a1 <SATA::read(unsigned long long, int, void*)+0x245>
c001de94:	56                   	push   esi
c001de95:	56                   	push   esi
c001de96:	6a 00                	push   0x0
c001de98:	51                   	push   ecx
c001de99:	53                   	push   ebx
c001de9a:	52                   	push   edx
c001de9b:	50                   	push   eax
c001de9c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dea0:	e8 63 fd ff ff       	call   c001dc08 <SATA::access(unsigned long long, int, void*, bool)>
c001dea5:	83 c4 20             	add    esp,0x20
c001dea8:	89 c6                	mov    esi,eax
c001deaa:	85 c0                	test   eax,eax
c001deac:	0f 85 ea 01 00 00    	jne    c001e09c <SATA::read(unsigned long long, int, void*)+0x240>
c001deb2:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001deb8:	bb 0a 00 00 00       	mov    ebx,0xa
c001debd:	50                   	push   eax
c001debe:	50                   	push   eax
c001debf:	6a 0f                	push   0xf
c001dec1:	6a 00                	push   0x0
c001dec3:	e8 75 f2 ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001dec8:	5a                   	pop    edx
c001dec9:	0f b6 c0             	movzx  eax,al
c001decc:	59                   	pop    ecx
c001decd:	b9 10 27 00 00       	mov    ecx,0x2710
c001ded2:	50                   	push   eax
c001ded3:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001ded8:	99                   	cdq    
c001ded9:	f7 f9                	idiv   ecx
c001dedb:	99                   	cdq    
c001dedc:	f7 fb                	idiv   ebx
c001dede:	8d 42 30             	lea    eax,[edx+0x30]
c001dee1:	0f b6 c0             	movzx  eax,al
c001dee4:	50                   	push   eax
c001dee5:	e8 42 f2 ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001deea:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001def0:	5f                   	pop    edi
c001def1:	5d                   	pop    ebp
c001def2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001def7:	6a 0f                	push   0xf
c001def9:	6a 00                	push   0x0
c001defb:	e8 3d f2 ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001df00:	5a                   	pop    edx
c001df01:	0f b6 c0             	movzx  eax,al
c001df04:	59                   	pop    ecx
c001df05:	50                   	push   eax
c001df06:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df0b:	99                   	cdq    
c001df0c:	f7 fd                	idiv   ebp
c001df0e:	99                   	cdq    
c001df0f:	f7 fb                	idiv   ebx
c001df11:	8d 42 30             	lea    eax,[edx+0x30]
c001df14:	0f b6 c0             	movzx  eax,al
c001df17:	50                   	push   eax
c001df18:	e8 0f f2 ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001df1d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001df23:	5f                   	pop    edi
c001df24:	bf 64 00 00 00       	mov    edi,0x64
c001df29:	58                   	pop    eax
c001df2a:	6a 0f                	push   0xf
c001df2c:	6a 00                	push   0x0
c001df2e:	e8 0a f2 ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001df33:	5a                   	pop    edx
c001df34:	0f b6 c0             	movzx  eax,al
c001df37:	59                   	pop    ecx
c001df38:	50                   	push   eax
c001df39:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df3e:	99                   	cdq    
c001df3f:	f7 ff                	idiv   edi
c001df41:	99                   	cdq    
c001df42:	f7 fb                	idiv   ebx
c001df44:	8d 42 30             	lea    eax,[edx+0x30]
c001df47:	0f b6 c0             	movzx  eax,al
c001df4a:	50                   	push   eax
c001df4b:	e8 dc f1 ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001df50:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001df56:	58                   	pop    eax
c001df57:	5a                   	pop    edx
c001df58:	6a 0f                	push   0xf
c001df5a:	6a 00                	push   0x0
c001df5c:	e8 dc f1 ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001df61:	59                   	pop    ecx
c001df62:	0f b6 c0             	movzx  eax,al
c001df65:	5a                   	pop    edx
c001df66:	50                   	push   eax
c001df67:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df6c:	99                   	cdq    
c001df6d:	f7 fb                	idiv   ebx
c001df6f:	99                   	cdq    
c001df70:	f7 fb                	idiv   ebx
c001df72:	8d 42 30             	lea    eax,[edx+0x30]
c001df75:	0f b6 c0             	movzx  eax,al
c001df78:	50                   	push   eax
c001df79:	e8 ae f1 ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001df7e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001df84:	59                   	pop    ecx
c001df85:	58                   	pop    eax
c001df86:	6a 0f                	push   0xf
c001df88:	6a 00                	push   0x0
c001df8a:	e8 ae f1 ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001df8f:	5a                   	pop    edx
c001df90:	0f b6 c0             	movzx  eax,al
c001df93:	59                   	pop    ecx
c001df94:	50                   	push   eax
c001df95:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df9a:	99                   	cdq    
c001df9b:	f7 fb                	idiv   ebx
c001df9d:	8d 42 30             	lea    eax,[edx+0x30]
c001dfa0:	0f b6 c0             	movzx  eax,al
c001dfa3:	50                   	push   eax
c001dfa4:	e8 83 f1 ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001dfa9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dfaf:	58                   	pop    eax
c001dfb0:	5a                   	pop    edx
c001dfb1:	6a 0f                	push   0xf
c001dfb3:	6a 00                	push   0x0
c001dfb5:	e8 83 f1 ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001dfba:	59                   	pop    ecx
c001dfbb:	0f b6 c0             	movzx  eax,al
c001dfbe:	5a                   	pop    edx
c001dfbf:	b9 10 27 00 00       	mov    ecx,0x2710
c001dfc4:	50                   	push   eax
c001dfc5:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dfca:	99                   	cdq    
c001dfcb:	f7 f9                	idiv   ecx
c001dfcd:	99                   	cdq    
c001dfce:	f7 fb                	idiv   ebx
c001dfd0:	8d 42 30             	lea    eax,[edx+0x30]
c001dfd3:	0f b6 c0             	movzx  eax,al
c001dfd6:	50                   	push   eax
c001dfd7:	e8 50 f1 ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001dfdc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dfe2:	59                   	pop    ecx
c001dfe3:	58                   	pop    eax
c001dfe4:	6a 0f                	push   0xf
c001dfe6:	6a 00                	push   0x0
c001dfe8:	e8 50 f1 ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001dfed:	5a                   	pop    edx
c001dfee:	0f b6 c0             	movzx  eax,al
c001dff1:	59                   	pop    ecx
c001dff2:	50                   	push   eax
c001dff3:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dff8:	99                   	cdq    
c001dff9:	f7 fd                	idiv   ebp
c001dffb:	99                   	cdq    
c001dffc:	f7 fb                	idiv   ebx
c001dffe:	8d 42 30             	lea    eax,[edx+0x30]
c001e001:	0f b6 c0             	movzx  eax,al
c001e004:	50                   	push   eax
c001e005:	e8 22 f1 ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001e00a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e010:	5d                   	pop    ebp
c001e011:	58                   	pop    eax
c001e012:	6a 0f                	push   0xf
c001e014:	6a 00                	push   0x0
c001e016:	e8 22 f1 ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001e01b:	5a                   	pop    edx
c001e01c:	0f b6 c0             	movzx  eax,al
c001e01f:	59                   	pop    ecx
c001e020:	50                   	push   eax
c001e021:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e026:	99                   	cdq    
c001e027:	f7 ff                	idiv   edi
c001e029:	99                   	cdq    
c001e02a:	f7 fb                	idiv   ebx
c001e02c:	8d 42 30             	lea    eax,[edx+0x30]
c001e02f:	0f b6 c0             	movzx  eax,al
c001e032:	50                   	push   eax
c001e033:	e8 f4 f0 ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001e038:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e03e:	5f                   	pop    edi
c001e03f:	5d                   	pop    ebp
c001e040:	6a 0f                	push   0xf
c001e042:	6a 00                	push   0x0
c001e044:	e8 f4 f0 ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001e049:	5a                   	pop    edx
c001e04a:	0f b6 c0             	movzx  eax,al
c001e04d:	59                   	pop    ecx
c001e04e:	50                   	push   eax
c001e04f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e054:	99                   	cdq    
c001e055:	f7 fb                	idiv   ebx
c001e057:	99                   	cdq    
c001e058:	f7 fb                	idiv   ebx
c001e05a:	8d 42 30             	lea    eax,[edx+0x30]
c001e05d:	0f b6 c0             	movzx  eax,al
c001e060:	50                   	push   eax
c001e061:	e8 c6 f0 ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001e066:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e06c:	5f                   	pop    edi
c001e06d:	5d                   	pop    ebp
c001e06e:	6a 0f                	push   0xf
c001e070:	6a 00                	push   0x0
c001e072:	e8 c6 f0 ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001e077:	5a                   	pop    edx
c001e078:	0f b6 c0             	movzx  eax,al
c001e07b:	59                   	pop    ecx
c001e07c:	50                   	push   eax
c001e07d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e082:	99                   	cdq    
c001e083:	f7 fb                	idiv   ebx
c001e085:	83 c2 30             	add    edx,0x30
c001e088:	0f b6 d2             	movzx  edx,dl
c001e08b:	52                   	push   edx
c001e08c:	e8 9b f0 ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001e091:	83 c4 10             	add    esp,0x10
c001e094:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e09a:	eb 05                	jmp    c001e0a1 <SATA::read(unsigned long long, int, void*)+0x245>
c001e09c:	be 01 00 00 00       	mov    esi,0x1
c001e0a1:	83 c4 0c             	add    esp,0xc
c001e0a4:	89 f0                	mov    eax,esi
c001e0a6:	5b                   	pop    ebx
c001e0a7:	5e                   	pop    esi
c001e0a8:	5f                   	pop    edi
c001e0a9:	5d                   	pop    ebp
c001e0aa:	c3                   	ret    
c001e0ab:	90                   	nop

c001e0ac <SATA::write(unsigned long long, int, void*)>:
c001e0ac:	55                   	push   ebp
c001e0ad:	b8 04 00 00 00       	mov    eax,0x4
c001e0b2:	57                   	push   edi
c001e0b3:	56                   	push   esi
c001e0b4:	53                   	push   ebx
c001e0b5:	83 ec 1c             	sub    esp,0x1c
c001e0b8:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e0bc:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e0c0:	8d 75 ff             	lea    esi,[ebp-0x1]
c001e0c3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e0c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001e0cb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e0d1:	0f 87 32 02 00 00    	ja     c001e309 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e0d7:	b8 06 00 00 00       	mov    eax,0x6
c001e0dc:	85 ff                	test   edi,edi
c001e0de:	0f 84 25 02 00 00    	je     c001e309 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e0e4:	89 ee                	mov    esi,ebp
c001e0e6:	c1 e6 09             	shl    esi,0x9
c001e0e9:	01 fe                	add    esi,edi
c001e0eb:	89 c8                	mov    eax,ecx
c001e0ed:	89 da                	mov    edx,ebx
c001e0ef:	83 c0 01             	add    eax,0x1
c001e0f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e0f6:	83 d2 00             	adc    edx,0x0
c001e0f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e0fd:	50                   	push   eax
c001e0fe:	50                   	push   eax
c001e0ff:	6a 01                	push   0x1
c001e101:	57                   	push   edi
c001e102:	81 c7 00 02 00 00    	add    edi,0x200
c001e108:	6a 01                	push   0x1
c001e10a:	53                   	push   ebx
c001e10b:	51                   	push   ecx
c001e10c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e110:	e8 f3 fa ff ff       	call   c001dc08 <SATA::access(unsigned long long, int, void*, bool)>
c001e115:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e119:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e11d:	83 c4 20             	add    esp,0x20
c001e120:	39 f7                	cmp    edi,esi
c001e122:	75 c7                	jne    c001e0eb <SATA::write(unsigned long long, int, void*)+0x3f>
c001e124:	bb 0a 00 00 00       	mov    ebx,0xa
c001e129:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001e12f:	bd 10 27 00 00       	mov    ebp,0x2710
c001e134:	50                   	push   eax
c001e135:	50                   	push   eax
c001e136:	6a 0f                	push   0xf
c001e138:	6a 00                	push   0x0
c001e13a:	e8 fe ef ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001e13f:	5a                   	pop    edx
c001e140:	0f b6 c0             	movzx  eax,al
c001e143:	59                   	pop    ecx
c001e144:	50                   	push   eax
c001e145:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e14a:	99                   	cdq    
c001e14b:	f7 fd                	idiv   ebp
c001e14d:	99                   	cdq    
c001e14e:	f7 fb                	idiv   ebx
c001e150:	8d 42 30             	lea    eax,[edx+0x30]
c001e153:	0f b6 c0             	movzx  eax,al
c001e156:	50                   	push   eax
c001e157:	e8 d0 ef ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001e15c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e162:	5e                   	pop    esi
c001e163:	5f                   	pop    edi
c001e164:	bf e8 03 00 00       	mov    edi,0x3e8
c001e169:	6a 0f                	push   0xf
c001e16b:	6a 00                	push   0x0
c001e16d:	e8 cb ef ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001e172:	5a                   	pop    edx
c001e173:	0f b6 c0             	movzx  eax,al
c001e176:	59                   	pop    ecx
c001e177:	50                   	push   eax
c001e178:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e17d:	99                   	cdq    
c001e17e:	f7 ff                	idiv   edi
c001e180:	99                   	cdq    
c001e181:	f7 fb                	idiv   ebx
c001e183:	8d 42 30             	lea    eax,[edx+0x30]
c001e186:	0f b6 c0             	movzx  eax,al
c001e189:	50                   	push   eax
c001e18a:	e8 9d ef ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001e18f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e195:	5e                   	pop    esi
c001e196:	be 64 00 00 00       	mov    esi,0x64
c001e19b:	58                   	pop    eax
c001e19c:	6a 0f                	push   0xf
c001e19e:	6a 00                	push   0x0
c001e1a0:	e8 98 ef ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001e1a5:	5a                   	pop    edx
c001e1a6:	0f b6 c0             	movzx  eax,al
c001e1a9:	59                   	pop    ecx
c001e1aa:	50                   	push   eax
c001e1ab:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1b0:	99                   	cdq    
c001e1b1:	f7 fe                	idiv   esi
c001e1b3:	99                   	cdq    
c001e1b4:	f7 fb                	idiv   ebx
c001e1b6:	8d 42 30             	lea    eax,[edx+0x30]
c001e1b9:	0f b6 c0             	movzx  eax,al
c001e1bc:	50                   	push   eax
c001e1bd:	e8 6a ef ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001e1c2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e1c8:	58                   	pop    eax
c001e1c9:	5a                   	pop    edx
c001e1ca:	6a 0f                	push   0xf
c001e1cc:	6a 00                	push   0x0
c001e1ce:	e8 6a ef ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001e1d3:	59                   	pop    ecx
c001e1d4:	0f b6 c0             	movzx  eax,al
c001e1d7:	5a                   	pop    edx
c001e1d8:	50                   	push   eax
c001e1d9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1de:	99                   	cdq    
c001e1df:	f7 fb                	idiv   ebx
c001e1e1:	99                   	cdq    
c001e1e2:	f7 fb                	idiv   ebx
c001e1e4:	8d 42 30             	lea    eax,[edx+0x30]
c001e1e7:	0f b6 c0             	movzx  eax,al
c001e1ea:	50                   	push   eax
c001e1eb:	e8 3c ef ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001e1f0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e1f6:	59                   	pop    ecx
c001e1f7:	58                   	pop    eax
c001e1f8:	6a 0f                	push   0xf
c001e1fa:	6a 00                	push   0x0
c001e1fc:	e8 3c ef ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001e201:	5a                   	pop    edx
c001e202:	0f b6 c0             	movzx  eax,al
c001e205:	59                   	pop    ecx
c001e206:	50                   	push   eax
c001e207:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e20c:	99                   	cdq    
c001e20d:	f7 fb                	idiv   ebx
c001e20f:	83 c2 30             	add    edx,0x30
c001e212:	0f b6 d2             	movzx  edx,dl
c001e215:	52                   	push   edx
c001e216:	e8 11 ef ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001e21b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e221:	58                   	pop    eax
c001e222:	5a                   	pop    edx
c001e223:	6a 0f                	push   0xf
c001e225:	6a 00                	push   0x0
c001e227:	e8 11 ef ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001e22c:	59                   	pop    ecx
c001e22d:	0f b6 c0             	movzx  eax,al
c001e230:	5a                   	pop    edx
c001e231:	50                   	push   eax
c001e232:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e237:	99                   	cdq    
c001e238:	f7 fd                	idiv   ebp
c001e23a:	99                   	cdq    
c001e23b:	f7 fb                	idiv   ebx
c001e23d:	8d 42 30             	lea    eax,[edx+0x30]
c001e240:	0f b6 c0             	movzx  eax,al
c001e243:	50                   	push   eax
c001e244:	e8 e3 ee ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001e249:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e24f:	59                   	pop    ecx
c001e250:	5d                   	pop    ebp
c001e251:	6a 0f                	push   0xf
c001e253:	6a 00                	push   0x0
c001e255:	e8 e3 ee ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001e25a:	5a                   	pop    edx
c001e25b:	0f b6 c0             	movzx  eax,al
c001e25e:	59                   	pop    ecx
c001e25f:	50                   	push   eax
c001e260:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e265:	99                   	cdq    
c001e266:	f7 ff                	idiv   edi
c001e268:	99                   	cdq    
c001e269:	f7 fb                	idiv   ebx
c001e26b:	8d 42 30             	lea    eax,[edx+0x30]
c001e26e:	0f b6 c0             	movzx  eax,al
c001e271:	50                   	push   eax
c001e272:	e8 b5 ee ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001e277:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e27d:	5f                   	pop    edi
c001e27e:	5d                   	pop    ebp
c001e27f:	6a 0f                	push   0xf
c001e281:	6a 00                	push   0x0
c001e283:	e8 b5 ee ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001e288:	5a                   	pop    edx
c001e289:	0f b6 c0             	movzx  eax,al
c001e28c:	59                   	pop    ecx
c001e28d:	50                   	push   eax
c001e28e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e293:	99                   	cdq    
c001e294:	f7 fe                	idiv   esi
c001e296:	99                   	cdq    
c001e297:	f7 fb                	idiv   ebx
c001e299:	8d 42 30             	lea    eax,[edx+0x30]
c001e29c:	0f b6 c0             	movzx  eax,al
c001e29f:	50                   	push   eax
c001e2a0:	e8 87 ee ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001e2a5:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e2ab:	5e                   	pop    esi
c001e2ac:	5f                   	pop    edi
c001e2ad:	6a 0f                	push   0xf
c001e2af:	6a 00                	push   0x0
c001e2b1:	e8 87 ee ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001e2b6:	5d                   	pop    ebp
c001e2b7:	0f b6 c0             	movzx  eax,al
c001e2ba:	5a                   	pop    edx
c001e2bb:	50                   	push   eax
c001e2bc:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2c1:	99                   	cdq    
c001e2c2:	f7 fb                	idiv   ebx
c001e2c4:	99                   	cdq    
c001e2c5:	f7 fb                	idiv   ebx
c001e2c7:	8d 42 30             	lea    eax,[edx+0x30]
c001e2ca:	0f b6 c0             	movzx  eax,al
c001e2cd:	50                   	push   eax
c001e2ce:	e8 59 ee ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001e2d3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e2d9:	59                   	pop    ecx
c001e2da:	5e                   	pop    esi
c001e2db:	6a 0f                	push   0xf
c001e2dd:	6a 00                	push   0x0
c001e2df:	e8 59 ee ff ff       	call   c001d13d <combineColours(unsigned char, unsigned char)>
c001e2e4:	5f                   	pop    edi
c001e2e5:	0f b6 c0             	movzx  eax,al
c001e2e8:	5d                   	pop    ebp
c001e2e9:	50                   	push   eax
c001e2ea:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2ef:	99                   	cdq    
c001e2f0:	f7 fb                	idiv   ebx
c001e2f2:	83 c2 30             	add    edx,0x30
c001e2f5:	0f b6 d2             	movzx  edx,dl
c001e2f8:	52                   	push   edx
c001e2f9:	e8 2e ee ff ff       	call   c001d12c <combineCharAndColour(char, unsigned char)>
c001e2fe:	83 c4 10             	add    esp,0x10
c001e301:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e307:	31 c0                	xor    eax,eax
c001e309:	83 c4 1c             	add    esp,0x1c
c001e30c:	5b                   	pop    ebx
c001e30d:	5e                   	pop    esi
c001e30e:	5f                   	pop    edi
c001e30f:	5d                   	pop    ebp
c001e310:	c3                   	ret    
c001e311:	90                   	nop

c001e312 <SATAPI::write(unsigned long long, int, void*)>:
c001e312:	b8 03 00 00 00       	mov    eax,0x3
c001e317:	c3                   	ret    

c001e318 <SATAPI::close(int, int, void*)>:
c001e318:	83 ec 0c             	sub    esp,0xc
c001e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e31f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e325:	85 c0                	test   eax,eax
c001e327:	74 0c                	je     c001e335 <SATAPI::close(int, int, void*)+0x1d>
c001e329:	83 ec 0c             	sub    esp,0xc
c001e32c:	8b 10                	mov    edx,DWORD PTR [eax]
c001e32e:	50                   	push   eax
c001e32f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e332:	83 c4 10             	add    esp,0x10
c001e335:	31 c0                	xor    eax,eax
c001e337:	83 c4 0c             	add    esp,0xc
c001e33a:	c3                   	ret    
c001e33b:	90                   	nop

c001e33c <SATAPI::SATAPI()>:
c001e33c:	83 ec 0c             	sub    esp,0xc
c001e33f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e343:	83 ec 04             	sub    esp,0x4
c001e346:	68 00 08 00 00       	push   0x800
c001e34b:	68 bc 33 02 c0       	push   0xc00233bc
c001e350:	50                   	push   eax
c001e351:	e8 fc e9 fe ff       	call   c000cd52 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e356:	83 c4 10             	add    esp,0x10
c001e359:	ba b0 34 02 c0       	mov    edx,0xc00234b0
c001e35e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e362:	89 10                	mov    DWORD PTR [eax],edx
c001e364:	90                   	nop
c001e365:	83 c4 0c             	add    esp,0xc
c001e368:	c3                   	ret    
c001e369:	90                   	nop

c001e36a <SATAPI::diskRemoved()>:
c001e36a:	c3                   	ret    
c001e36b:	90                   	nop

c001e36c <SATAPI::diskInserted()>:
c001e36c:	83 ec 18             	sub    esp,0x18
c001e36f:	68 c8 33 02 c0       	push   0xc00233c8
c001e374:	e8 cc c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e379:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e37d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e384:	83 c4 1c             	add    esp,0x1c
c001e387:	c3                   	ret    

c001e388 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e388:	55                   	push   ebp
c001e389:	57                   	push   edi
c001e38a:	56                   	push   esi
c001e38b:	53                   	push   ebx
c001e38c:	83 ec 34             	sub    esp,0x34
c001e38f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e393:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e397:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e39b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e39f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e3a3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e3a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e3af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e3b3:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e3b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e3bd:	83 c0 02             	add    eax,0x2
c001e3c0:	c1 e0 07             	shl    eax,0x7
c001e3c3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e3c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e3cf:	c1 e0 07             	shl    eax,0x7
c001e3d2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e3d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e3da:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e3e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e3e8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e3ee:	e8 21 e5 ff ff       	call   c001c914 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e3f3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e3f7:	83 c4 10             	add    esp,0x10
c001e3fa:	b8 01 00 00 00       	mov    eax,0x1
c001e3ff:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e404:	0f 84 53 02 00 00    	je     c001e65d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e40a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e414:	8b 00                	mov    eax,DWORD PTR [eax]
c001e416:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e41c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e422:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e426:	c1 e1 05             	shl    ecx,0x5
c001e429:	01 c8                	add    eax,ecx
c001e42b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e42d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e433:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e439:	89 08                	mov    DWORD PTR [eax],ecx
c001e43b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e441:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e447:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e44d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e450:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e453:	50                   	push   eax
c001e454:	68 90 00 00 00       	push   0x90
c001e459:	6a 00                	push   0x0
c001e45b:	53                   	push   ebx
c001e45c:	e8 8f 20 fe ff       	call   c00004f0 <memset>
c001e461:	b9 0c 00 00 00       	mov    ecx,0xc
c001e466:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e46a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e46c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e472:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e476:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e47c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e480:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e484:	48                   	dec    eax
c001e485:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e48a:	89 c1                	mov    ecx,eax
c001e48c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e492:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e497:	09 c8                	or     eax,ecx
c001e499:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e49f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e4a5:	83 c8 80             	or     eax,0xffffff80
c001e4a8:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e4ae:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e4b1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e4b5:	25 00 7f 00 00       	and    eax,0x7f00
c001e4ba:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e4be:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e4c3:	66 89 03             	mov    WORD PTR [ebx],ax
c001e4c6:	89 d0                	mov    eax,edx
c001e4c8:	c1 ea 18             	shr    edx,0x18
c001e4cb:	c1 e8 10             	shr    eax,0x10
c001e4ce:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e4d1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e4d4:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e4d8:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e4db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4df:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e4e2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e4e6:	83 c4 10             	add    esp,0x10
c001e4e9:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e4ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e4f1:	31 c0                	xor    eax,eax
c001e4f3:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e4f9:	80 e1 88             	and    cl,0x88
c001e4fc:	74 0a                	je     c001e508 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e4fe:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e503:	74 0a                	je     c001e50f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e505:	40                   	inc    eax
c001e506:	eb eb                	jmp    c001e4f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e508:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e50d:	75 43                	jne    c001e552 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e50f:	83 ec 0c             	sub    esp,0xc
c001e512:	68 e0 33 02 c0       	push   0xc00233e0
c001e517:	e8 29 c4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e51c:	58                   	pop    eax
c001e51d:	5a                   	pop    edx
c001e51e:	68 f5 33 02 c0       	push   0xc00233f5
c001e523:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e529:	e8 78 a5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e52e:	59                   	pop    ecx
c001e52f:	5b                   	pop    ebx
c001e530:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e534:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e53a:	e8 6f e4 ff ff       	call   c001c9ae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e53f:	5e                   	pop    esi
c001e540:	5f                   	pop    edi
c001e541:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e545:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e54b:	e8 3e e4 ff ff       	call   c001c98e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e550:	eb 48                	jmp    c001e59a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e552:	be 01 00 00 00       	mov    esi,0x1
c001e557:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e55b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e55f:	d3 e6                	shl    esi,cl
c001e561:	c1 e7 07             	shl    edi,0x7
c001e564:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e56a:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e56f:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e573:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e579:	85 c6                	test   esi,eax
c001e57b:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e581:	0f 84 a3 00 00 00    	je     c001e62a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e587:	0f ba e0 1e          	bt     eax,0x1e
c001e58b:	73 1a                	jae    c001e5a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e58d:	83 ec 0c             	sub    esp,0xc
c001e590:	68 07 34 02 c0       	push   0xc0023407
c001e595:	e8 ab c3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e59a:	83 c4 10             	add    esp,0x10
c001e59d:	b8 01 00 00 00       	mov    eax,0x1
c001e5a2:	e9 b6 00 00 00       	jmp    c001e65d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e5a7:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e5ad:	83 f8 0d             	cmp    eax,0xd
c001e5b0:	77 0a                	ja     c001e5bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e5b2:	83 ec 0c             	sub    esp,0xc
c001e5b5:	68 c8 00 00 00       	push   0xc8
c001e5ba:	eb 28                	jmp    c001e5e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e5bc:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e5c2:	83 f8 0d             	cmp    eax,0xd
c001e5c5:	77 0a                	ja     c001e5d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e5c7:	83 ec 0c             	sub    esp,0xc
c001e5ca:	68 58 02 00 00       	push   0x258
c001e5cf:	eb 13                	jmp    c001e5e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e5d1:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e5d7:	83 f8 06             	cmp    eax,0x6
c001e5da:	77 10                	ja     c001e5ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e5dc:	83 ec 0c             	sub    esp,0xc
c001e5df:	68 dc 05 00 00       	push   0x5dc
c001e5e4:	e8 c7 7d ff ff       	call   c00163b0 <milliTenthSleep(unsigned int)>
c001e5e9:	83 c4 10             	add    esp,0x10
c001e5ec:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e5f0:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e5f3:	75 06                	jne    c001e5fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e5f5:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e5f9:	74 15                	je     c001e610 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e5fb:	83 fb 06             	cmp    ebx,0x6
c001e5fe:	77 10                	ja     c001e610 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e600:	83 ec 0c             	sub    esp,0xc
c001e603:	68 c4 09 00 00       	push   0x9c4
c001e608:	e8 a3 7d ff ff       	call   c00163b0 <milliTenthSleep(unsigned int)>
c001e60d:	83 c4 10             	add    esp,0x10
c001e610:	43                   	inc    ebx
c001e611:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e617:	0f 85 56 ff ff ff    	jne    c001e573 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e61d:	83 ec 0c             	sub    esp,0xc
c001e620:	68 1a 34 02 c0       	push   0xc002341a
c001e625:	e9 6b ff ff ff       	jmp    c001e595 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e62a:	0f ba e0 1e          	bt     eax,0x1e
c001e62e:	73 0d                	jae    c001e63d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e630:	83 ec 0c             	sub    esp,0xc
c001e633:	68 2e 34 02 c0       	push   0xc002342e
c001e638:	e9 58 ff ff ff       	jmp    c001e595 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e63d:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e642:	74 17                	je     c001e65b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e644:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e649:	74 10                	je     c001e65b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e64b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e651:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e655:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e659:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e65b:	31 c0                	xor    eax,eax
c001e65d:	83 c4 2c             	add    esp,0x2c
c001e660:	5b                   	pop    ebx
c001e661:	5e                   	pop    esi
c001e662:	5f                   	pop    edi
c001e663:	5d                   	pop    ebp
c001e664:	c3                   	ret    
c001e665:	90                   	nop

c001e666 <SATAPI::eject()>:
c001e666:	57                   	push   edi
c001e667:	b9 03 00 00 00       	mov    ecx,0x3
c001e66c:	83 ec 18             	sub    esp,0x18
c001e66f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e673:	fc                   	cld    
c001e674:	31 c0                	xor    eax,eax
c001e676:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e678:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e67d:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e682:	50                   	push   eax
c001e683:	6a 00                	push   0x0
c001e685:	6a 00                	push   0x0
c001e687:	6a 00                	push   0x0
c001e689:	6a 00                	push   0x0
c001e68b:	6a 02                	push   0x2
c001e68d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e691:	50                   	push   eax
c001e692:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e696:	e8 ed fc ff ff       	call   c001e388 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e69b:	31 c0                	xor    eax,eax
c001e69d:	83 c4 38             	add    esp,0x38
c001e6a0:	5f                   	pop    edi
c001e6a1:	c3                   	ret    

c001e6a2 <SATAPI::detectMedia()>:
c001e6a2:	53                   	push   ebx
c001e6a3:	83 ec 14             	sub    esp,0x14
c001e6a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e6aa:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6b0:	e8 1b 00 ff ff       	call   c000e6d0 <VCache::writeWriteBuffer()>
c001e6b5:	59                   	pop    ecx
c001e6b6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6bc:	e8 ff ff fe ff       	call   c000e6c0 <VCache::invalidateReadBuffer()>
c001e6c1:	c7 04 24 43 34 02 c0 	mov    DWORD PTR [esp],0xc0023443
c001e6c8:	e8 78 c2 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e6cd:	83 c4 10             	add    esp,0x10
c001e6d0:	31 c0                	xor    eax,eax
c001e6d2:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e6d9:	85 d2                	test   edx,edx
c001e6db:	74 0f                	je     c001e6ec <SATAPI::detectMedia()+0x4a>
c001e6dd:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e6e3:	75 07                	jne    c001e6ec <SATAPI::detectMedia()+0x4a>
c001e6e5:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e6ec:	40                   	inc    eax
c001e6ed:	83 f8 1a             	cmp    eax,0x1a
c001e6f0:	75 e0                	jne    c001e6d2 <SATAPI::detectMedia()+0x30>
c001e6f2:	83 c4 08             	add    esp,0x8
c001e6f5:	5b                   	pop    ebx
c001e6f6:	c3                   	ret    
c001e6f7:	90                   	nop

c001e6f8 <SATAPI::open(int, int, void*)>:
c001e6f8:	56                   	push   esi
c001e6f9:	53                   	push   ebx
c001e6fa:	51                   	push   ecx
c001e6fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e703:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e70d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e713:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e71d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e721:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e72b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e731:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e738:	e8 82 96 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e73d:	89 c6                	mov    esi,eax
c001e73f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e745:	81 c6 00 10 00 00    	add    esi,0x1000
c001e74b:	e8 6f 96 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e750:	39 c6                	cmp    esi,eax
c001e752:	74 10                	je     c001e764 <SATAPI::open(int, int, void*)+0x6c>
c001e754:	83 ec 0c             	sub    esp,0xc
c001e757:	68 58 34 02 c0       	push   0xc0023458
c001e75c:	e8 7e 2e ff ff       	call   c00115df <KePanic(char const*)>
c001e761:	83 c4 10             	add    esp,0x10
c001e764:	83 ec 0c             	sub    esp,0xc
c001e767:	6a 02                	push   0x2
c001e769:	e8 9f ae fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e76e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e774:	6a 03                	push   0x3
c001e776:	50                   	push   eax
c001e777:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e77d:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e783:	e8 98 b5 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e788:	83 c4 14             	add    esp,0x14
c001e78b:	68 78 01 00 00       	push   0x178
c001e790:	e8 21 93 fe ff       	call   c0007ab6 <malloc>
c001e795:	83 c4 0c             	add    esp,0xc
c001e798:	89 c6                	mov    esi,eax
c001e79a:	6a 00                	push   0x0
c001e79c:	68 ff ff ff 7f       	push   0x7fffffff
c001e7a1:	6a 00                	push   0x0
c001e7a3:	6a 00                	push   0x0
c001e7a5:	53                   	push   ebx
c001e7a6:	68 6e 34 02 c0       	push   0xc002346e
c001e7ab:	50                   	push   eax
c001e7ac:	e8 7b f3 fe ff       	call   c000db2c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e7b1:	83 c4 14             	add    esp,0x14
c001e7b4:	56                   	push   esi
c001e7b5:	e8 32 f4 fe ff       	call   c000dbec <LogicalDisk::assignDriveLetter()>
c001e7ba:	5a                   	pop    edx
c001e7bb:	0f be c0             	movsx  eax,al
c001e7be:	59                   	pop    ecx
c001e7bf:	50                   	push   eax
c001e7c0:	68 c0 32 02 c0       	push   0xc00232c0
c001e7c5:	e8 7b c1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e7ca:	58                   	pop    eax
c001e7cb:	5a                   	pop    edx
c001e7cc:	56                   	push   esi
c001e7cd:	53                   	push   ebx
c001e7ce:	e8 b3 e1 fe ff       	call   c000c986 <Device::addChild(Device*)>
c001e7d3:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e7d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7dc:	e8 d9 e5 fe ff       	call   c000cdba <PhysicalDisk::startCache()>
c001e7e1:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e7e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7eb:	e8 b2 fe ff ff       	call   c001e6a2 <SATAPI::detectMedia()>
c001e7f0:	83 c4 14             	add    esp,0x14
c001e7f3:	31 c0                	xor    eax,eax
c001e7f5:	5b                   	pop    ebx
c001e7f6:	5e                   	pop    esi
c001e7f7:	c3                   	ret    

c001e7f8 <SATAPI::read(unsigned long long, int, void*)>:
c001e7f8:	57                   	push   edi
c001e7f9:	56                   	push   esi
c001e7fa:	53                   	push   ebx
c001e7fb:	83 ec 30             	sub    esp,0x30
c001e7fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e802:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e806:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e80a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e80e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e812:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e816:	83 fe 04             	cmp    esi,0x4
c001e819:	7e 10                	jle    c001e82b <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e81b:	83 ec 0c             	sub    esp,0xc
c001e81e:	68 7c 34 02 c0       	push   0xc002347c
c001e823:	e8 b7 2d ff ff       	call   c00115df <KePanic(char const*)>
c001e828:	83 c4 10             	add    esp,0x10
c001e82b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e831:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e837:	51                   	push   ecx
c001e838:	50                   	push   eax
c001e839:	83 c0 02             	add    eax,0x2
c001e83c:	c1 e0 07             	shl    eax,0x7
c001e83f:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e845:	50                   	push   eax
c001e846:	52                   	push   edx
c001e847:	e8 8c e1 ff ff       	call   c001c9d8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e84c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e850:	b9 03 00 00 00       	mov    ecx,0x3
c001e855:	fc                   	cld    
c001e856:	31 c0                	xor    eax,eax
c001e858:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e85a:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e85f:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e864:	83 c4 0c             	add    esp,0xc
c001e867:	6a 00                	push   0x0
c001e869:	6a 00                	push   0x0
c001e86b:	6a 00                	push   0x0
c001e86d:	6a 00                	push   0x0
c001e86f:	6a 02                	push   0x2
c001e871:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e875:	50                   	push   eax
c001e876:	53                   	push   ebx
c001e877:	e8 0c fb ff ff       	call   c001e388 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e87c:	83 c4 20             	add    esp,0x20
c001e87f:	85 c0                	test   eax,eax
c001e881:	75 44                	jne    c001e8c7 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e883:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e887:	b9 03 00 00 00       	mov    ecx,0x3
c001e88c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e88e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e892:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e897:	0f c8                	bswap  eax
c001e899:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e89d:	89 f0                	mov    eax,esi
c001e89f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e8a3:	50                   	push   eax
c001e8a4:	56                   	push   esi
c001e8a5:	c1 e6 0b             	shl    esi,0xb
c001e8a8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e8ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e8b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e8b4:	56                   	push   esi
c001e8b5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e8b9:	50                   	push   eax
c001e8ba:	53                   	push   ebx
c001e8bb:	e8 c8 fa ff ff       	call   c001e388 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e8c0:	83 c4 20             	add    esp,0x20
c001e8c3:	85 c0                	test   eax,eax
c001e8c5:	74 14                	je     c001e8db <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e8c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8cb:	83 ec 0c             	sub    esp,0xc
c001e8ce:	53                   	push   ebx
c001e8cf:	e8 ce fd ff ff       	call   c001e6a2 <SATAPI::detectMedia()>
c001e8d4:	83 c4 10             	add    esp,0x10
c001e8d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8db:	83 c4 30             	add    esp,0x30
c001e8de:	5b                   	pop    ebx
c001e8df:	5e                   	pop    esi
c001e8e0:	5f                   	pop    edi
c001e8e1:	c3                   	ret    

c001e8e2 <IOAPIC::close(int, int, void*)>:
c001e8e2:	b8 00 00 00 00       	mov    eax,0x0
c001e8e7:	c3                   	ret    

c001e8e8 <apicGetBase()>:
c001e8e8:	55                   	push   ebp
c001e8e9:	89 e5                	mov    ebp,esp
c001e8eb:	83 ec 18             	sub    esp,0x18
c001e8ee:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e8f3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e8f9:	83 e0 08             	and    eax,0x8
c001e8fc:	0f b6 c0             	movzx  eax,al
c001e8ff:	85 c0                	test   eax,eax
c001e901:	75 07                	jne    c001e90a <apicGetBase()+0x22>
c001e903:	b8 00 00 00 00       	mov    eax,0x0
c001e908:	eb 21                	jmp    c001e92b <apicGetBase()+0x43>
c001e90a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e90f:	83 ec 08             	sub    esp,0x8
c001e912:	6a 1b                	push   0x1b
c001e914:	50                   	push   eax
c001e915:	e8 a6 87 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e91a:	83 c4 10             	add    esp,0x10
c001e91d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e920:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e923:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e926:	25 00 00 ff ff       	and    eax,0xffff0000
c001e92b:	c9                   	leave  
c001e92c:	c3                   	ret    
c001e92d:	90                   	nop

c001e92e <IOAPIC::IOAPIC()>:
c001e92e:	83 ec 0c             	sub    esp,0xc
c001e931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e935:	83 ec 08             	sub    esp,0x8
c001e938:	68 e0 34 02 c0       	push   0xc00234e0
c001e93d:	50                   	push   eax
c001e93e:	e8 db e1 fe ff       	call   c000cb1e <Device::Device(char const*)>
c001e943:	83 c4 10             	add    esp,0x10
c001e946:	ba f0 34 02 c0       	mov    edx,0xc00234f0
c001e94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94f:	89 10                	mov    DWORD PTR [eax],edx
c001e951:	90                   	nop
c001e952:	83 c4 0c             	add    esp,0xc
c001e955:	c3                   	ret    

c001e956 <apicOpen()>:
c001e956:	55                   	push   ebp
c001e957:	89 e5                	mov    ebp,esp
c001e959:	53                   	push   ebx
c001e95a:	83 ec 34             	sub    esp,0x34
c001e95d:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e962:	83 f0 01             	xor    eax,0x1
c001e965:	0f b6 c0             	movzx  eax,al
c001e968:	85 c0                	test   eax,eax
c001e96a:	0f 84 a3 00 00 00    	je     c001ea13 <apicOpen()+0xbd>
c001e970:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e974:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001e979:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e97d:	0f b6 c0             	movzx  eax,al
c001e980:	39 c2                	cmp    edx,eax
c001e982:	0f 83 84 00 00 00    	jae    c001ea0c <apicOpen()+0xb6>
c001e988:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e98f:	83 ec 0c             	sub    esp,0xc
c001e992:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e995:	e8 1c 91 fe ff       	call   c0007ab6 <malloc>
c001e99a:	83 c4 10             	add    esp,0x10
c001e99d:	89 c3                	mov    ebx,eax
c001e99f:	83 ec 0c             	sub    esp,0xc
c001e9a2:	53                   	push   ebx
c001e9a3:	e8 86 ff ff ff       	call   c001e92e <IOAPIC::IOAPIC()>
c001e9a8:	83 c4 10             	add    esp,0x10
c001e9ab:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e9ae:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e9b2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e9b5:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001e9bc:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001e9c1:	83 c0 01             	add    eax,0x1
c001e9c4:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001e9c9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9ce:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e9d4:	83 ec 08             	sub    esp,0x8
c001e9d7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e9da:	50                   	push   eax
c001e9db:	e8 a6 df fe ff       	call   c000c986 <Device::addChild(Device*)>
c001e9e0:	83 c4 10             	add    esp,0x10
c001e9e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e9e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9e8:	83 c0 08             	add    eax,0x8
c001e9eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9ed:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e9f1:	6a 00                	push   0x0
c001e9f3:	6a 00                	push   0x0
c001e9f5:	52                   	push   edx
c001e9f6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e9f9:	ff d0                	call   eax
c001e9fb:	83 c4 10             	add    esp,0x10
c001e9fe:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ea01:	83 c0 01             	add    eax,0x1
c001ea04:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ea07:	e9 68 ff ff ff       	jmp    c001e974 <apicOpen()+0x1e>
c001ea0c:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001ea13:	e8 d0 fe ff ff       	call   c001e8e8 <apicGetBase()>
c001ea18:	05 f0 00 00 00       	add    eax,0xf0
c001ea1d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ea20:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea23:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea25:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ea28:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ea2f:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ea36:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea39:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ea3c:	89 10                	mov    DWORD PTR [eax],edx
c001ea3e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ea45:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001ea4a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ea4d:	7d 7c                	jge    c001eacb <apicOpen()+0x175>
c001ea4f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea52:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea59:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ea5c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea5f:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea66:	c1 e8 08             	shr    eax,0x8
c001ea69:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ea6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea70:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea77:	c1 e8 18             	shr    eax,0x18
c001ea7a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ea7d:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ea81:	3d ff 00 00 00       	cmp    eax,0xff
c001ea86:	75 3a                	jne    c001eac2 <apicOpen()+0x16c>
c001ea88:	e8 5b fe ff ff       	call   c001e8e8 <apicGetBase()>
c001ea8d:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ea91:	83 fa 01             	cmp    edx,0x1
c001ea94:	75 07                	jne    c001ea9d <apicOpen()+0x147>
c001ea96:	ba 60 03 00 00       	mov    edx,0x360
c001ea9b:	eb 05                	jmp    c001eaa2 <apicOpen()+0x14c>
c001ea9d:	ba 50 03 00 00       	mov    edx,0x350
c001eaa2:	01 d0                	add    eax,edx
c001eaa4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eaa7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eaaa:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaac:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eaaf:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eab6:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eaba:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eabd:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eac0:	89 10                	mov    DWORD PTR [eax],edx
c001eac2:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eac6:	e9 7a ff ff ff       	jmp    c001ea45 <apicOpen()+0xef>
c001eacb:	90                   	nop
c001eacc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eacf:	c9                   	leave  
c001ead0:	c3                   	ret    
c001ead1:	90                   	nop

c001ead2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ead2:	55                   	push   ebp
c001ead3:	89 e5                	mov    ebp,esp
c001ead5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ead8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eade:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eae1:	72 1d                	jb     c001eb00 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eae6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eaec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eaef:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eaf5:	01 d0                	add    eax,edx
c001eaf7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eafa:	73 04                	jae    c001eb00 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eafc:	b0 01                	mov    al,0x1
c001eafe:	eb 02                	jmp    c001eb02 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eb00:	b0 00                	mov    al,0x0
c001eb02:	5d                   	pop    ebp
c001eb03:	c3                   	ret    

c001eb04 <IOAPIC::read(int)>:
c001eb04:	55                   	push   ebp
c001eb05:	89 e5                	mov    ebp,esp
c001eb07:	83 ec 10             	sub    esp,0x10
c001eb0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb0d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eb13:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eb16:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb19:	0f b6 d0             	movzx  edx,al
c001eb1c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb1f:	89 10                	mov    DWORD PTR [eax],edx
c001eb21:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb24:	83 c0 10             	add    eax,0x10
c001eb27:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb29:	c9                   	leave  
c001eb2a:	c3                   	ret    
c001eb2b:	90                   	nop

c001eb2c <IOAPIC::open(int, int, void*)>:
c001eb2c:	55                   	push   ebp
c001eb2d:	89 e5                	mov    ebp,esp
c001eb2f:	57                   	push   edi
c001eb30:	56                   	push   esi
c001eb31:	53                   	push   ebx
c001eb32:	83 ec 04             	sub    esp,0x4
c001eb35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb38:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eb3b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb44:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb4a:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001eb51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb54:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eb5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb5d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb63:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001eb6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb6d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001eb73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb76:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001eb7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb7f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb85:	0f b6 f0             	movzx  esi,al
c001eb88:	89 d0                	mov    eax,edx
c001eb8a:	ba 00 00 00 00       	mov    edx,0x0
c001eb8f:	89 c7                	mov    edi,eax
c001eb91:	83 e7 ff             	and    edi,0xffffffff
c001eb94:	89 f9                	mov    ecx,edi
c001eb96:	0f b6 da             	movzx  ebx,dl
c001eb99:	89 c8                	mov    eax,ecx
c001eb9b:	89 da                	mov    edx,ebx
c001eb9d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001eba0:	8d 5e 08             	lea    ebx,[esi+0x8]
c001eba3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001eba7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ebab:	83 e0 00             	and    eax,0x0
c001ebae:	09 d0                	or     eax,edx
c001ebb0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ebb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebb7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ebbd:	8d 50 01             	lea    edx,[eax+0x1]
c001ebc0:	88 d1                	mov    cl,dl
c001ebc2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ebc5:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ebcb:	0f b6 d0             	movzx  edx,al
c001ebce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebd1:	83 c2 08             	add    edx,0x8
c001ebd4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ebd8:	0f b6 c9             	movzx  ecx,cl
c001ebdb:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ebe1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ebe5:	6a 01                	push   0x1
c001ebe7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebea:	e8 15 ff ff ff       	call   c001eb04 <IOAPIC::read(int)>
c001ebef:	83 c4 08             	add    esp,0x8
c001ebf2:	c1 f8 10             	sar    eax,0x10
c001ebf5:	0f b6 c0             	movzx  eax,al
c001ebf8:	8d 50 01             	lea    edx,[eax+0x1]
c001ebfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebfe:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ec04:	b8 00 00 00 00       	mov    eax,0x0
c001ec09:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ec0c:	5b                   	pop    ebx
c001ec0d:	5e                   	pop    esi
c001ec0e:	5f                   	pop    edi
c001ec0f:	5d                   	pop    ebp
c001ec10:	c3                   	ret    
c001ec11:	90                   	nop

c001ec12 <IOAPIC::write(int, int)>:
c001ec12:	55                   	push   ebp
c001ec13:	89 e5                	mov    ebp,esp
c001ec15:	83 ec 10             	sub    esp,0x10
c001ec18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec1b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec21:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec27:	0f b6 d0             	movzx  edx,al
c001ec2a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec2d:	89 10                	mov    DWORD PTR [eax],edx
c001ec2f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec32:	8d 50 10             	lea    edx,[eax+0x10]
c001ec35:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec38:	89 02                	mov    DWORD PTR [edx],eax
c001ec3a:	90                   	nop
c001ec3b:	c9                   	leave  
c001ec3c:	c3                   	ret    
c001ec3d:	90                   	nop

c001ec3e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ec3e:	55                   	push   ebp
c001ec3f:	89 e5                	mov    ebp,esp
c001ec41:	53                   	push   ebx
c001ec42:	83 ec 2c             	sub    esp,0x2c
c001ec45:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec48:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ec4b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ec4e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ec51:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ec54:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec57:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ec5a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ec5d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ec60:	88 d8                	mov    al,bl
c001ec62:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ec65:	88 c8                	mov    al,cl
c001ec67:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ec6a:	88 d0                	mov    al,dl
c001ec6c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ec6f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec73:	83 c0 08             	add    eax,0x8
c001ec76:	01 c0                	add    eax,eax
c001ec78:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ec7b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec7f:	83 c0 08             	add    eax,0x8
c001ec82:	01 c0                	add    eax,eax
c001ec84:	83 c0 01             	add    eax,0x1
c001ec87:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ec8a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ec8d:	50                   	push   eax
c001ec8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec91:	e8 6e fe ff ff       	call   c001eb04 <IOAPIC::read(int)>
c001ec96:	83 c4 08             	add    esp,0x8
c001ec99:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ec9c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001eca3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eca6:	c1 e0 18             	shl    eax,0x18
c001eca9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ecac:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ecaf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ecb2:	52                   	push   edx
c001ecb3:	50                   	push   eax
c001ecb4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecb7:	e8 56 ff ff ff       	call   c001ec12 <IOAPIC::write(int, int)>
c001ecbc:	83 c4 0c             	add    esp,0xc
c001ecbf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ecc2:	50                   	push   eax
c001ecc3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecc6:	e8 39 fe ff ff       	call   c001eb04 <IOAPIC::read(int)>
c001eccb:	83 c4 08             	add    esp,0x8
c001ecce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ecd1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ecd8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ecdf:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ece6:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ecea:	85 c0                	test   eax,eax
c001ecec:	74 09                	je     c001ecf7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ecee:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ecf5:	eb 07                	jmp    c001ecfe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ecf7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ecfe:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ed02:	85 c0                	test   eax,eax
c001ed04:	74 09                	je     c001ed0f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ed06:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ed0d:	eb 07                	jmp    c001ed16 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ed0f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ed16:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ed1d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ed21:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ed24:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ed27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed2a:	52                   	push   edx
c001ed2b:	50                   	push   eax
c001ed2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed2f:	e8 de fe ff ff       	call   c001ec12 <IOAPIC::write(int, int)>
c001ed34:	83 c4 0c             	add    esp,0xc
c001ed37:	90                   	nop
c001ed38:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ed3b:	c9                   	leave  
c001ed3c:	c3                   	ret    
c001ed3d:	66 90                	xchg   ax,ax
c001ed3f:	90                   	nop

c001ed40 <APICTimer::close(int, int, void*)>:
c001ed40:	b8 00 00 00 00       	mov    eax,0x0
c001ed45:	c3                   	ret    
c001ed46:	66 90                	xchg   ax,ax

c001ed48 <apicTimerHandler(regs*, void*)>:
c001ed48:	83 ec 0c             	sub    esp,0xc
c001ed4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ed51:	b8 10 27 00 00       	mov    eax,0x2710
c001ed56:	ba 00 00 00 00       	mov    edx,0x0
c001ed5b:	f7 f1                	div    ecx
c001ed5d:	83 ec 0c             	sub    esp,0xc
c001ed60:	50                   	push   eax
c001ed61:	e8 82 f6 fe ff       	call   c000e3e8 <timerHandler(unsigned int)>
c001ed66:	83 c4 10             	add    esp,0x10
c001ed69:	90                   	nop
c001ed6a:	83 c4 0c             	add    esp,0xc
c001ed6d:	c3                   	ret    
c001ed6e:	66 90                	xchg   ax,ax

c001ed70 <APICTimer::open(int, int, void*)>:
c001ed70:	83 ec 0c             	sub    esp,0xc
c001ed73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed77:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed79:	83 c0 24             	add    eax,0x24
c001ed7c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed7e:	83 ec 08             	sub    esp,0x8
c001ed81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed89:	ff d0                	call   eax
c001ed8b:	83 c4 10             	add    esp,0x10
c001ed8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed92:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ed96:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ed9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eda4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001edaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001edae:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001edb4:	83 ec 0c             	sub    esp,0xc
c001edb7:	51                   	push   ecx
c001edb8:	6a 01                	push   0x1
c001edba:	68 48 ed 01 c0       	push   0xc001ed48
c001edbf:	52                   	push   edx
c001edc0:	50                   	push   eax
c001edc1:	e8 6c db fe ff       	call   c000c932 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001edc6:	83 c4 20             	add    esp,0x20
c001edc9:	89 c2                	mov    edx,eax
c001edcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edcf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001edd5:	b8 00 00 00 00       	mov    eax,0x0
c001edda:	83 c4 0c             	add    esp,0xc
c001eddd:	c3                   	ret    
c001edde:	66 90                	xchg   ax,ax

c001ede0 <APICTimer::write(int)>:
c001ede0:	83 ec 0c             	sub    esp,0xc
c001ede3:	83 ec 0c             	sub    esp,0xc
c001ede6:	68 14 35 02 c0       	push   0xc0023514
c001edeb:	e8 ef 27 ff ff       	call   c00115df <KePanic(char const*)>
c001edf0:	83 c4 10             	add    esp,0x10
c001edf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001edfb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee01:	90                   	nop
c001ee02:	83 c4 0c             	add    esp,0xc
c001ee05:	c3                   	ret    
c001ee06:	66 90                	xchg   ax,ax

c001ee08 <APICTimer::APICTimer()>:
c001ee08:	83 ec 0c             	sub    esp,0xc
c001ee0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0f:	83 ec 08             	sub    esp,0x8
c001ee12:	68 24 35 02 c0       	push   0xc0023524
c001ee17:	50                   	push   eax
c001ee18:	e8 ff f4 fe ff       	call   c000e31c <Timer::Timer(char const*)>
c001ee1d:	83 c4 10             	add    esp,0x10
c001ee20:	ba 38 35 02 c0       	mov    edx,0xc0023538
c001ee25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee29:	89 10                	mov    DWORD PTR [eax],edx
c001ee2b:	90                   	nop
c001ee2c:	83 c4 0c             	add    esp,0xc
c001ee2f:	c3                   	ret    

c001ee30 <PIT::write(int)>:
c001ee30:	83 ec 10             	sub    esp,0x10
c001ee33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee3b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee45:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ee4a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ee4f:	89 c2                	mov    edx,eax
c001ee51:	c1 fa 1f             	sar    edx,0x1f
c001ee54:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ee58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee5c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ee63:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ee68:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ee6c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ee71:	ee                   	out    dx,al
c001ee72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee76:	0f b6 c0             	movzx  eax,al
c001ee79:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ee80:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ee84:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ee88:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ee8d:	ee                   	out    dx,al
c001ee8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee92:	c1 f8 08             	sar    eax,0x8
c001ee95:	0f b6 c0             	movzx  eax,al
c001ee98:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ee9f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eea3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eea7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eeac:	ee                   	out    dx,al
c001eead:	90                   	nop
c001eeae:	83 c4 10             	add    esp,0x10
c001eeb1:	c3                   	ret    
c001eeb2:	66 90                	xchg   ax,ax

c001eeb4 <pitHandler(regs*, void*)>:
c001eeb4:	83 ec 0c             	sub    esp,0xc
c001eeb7:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001eebd:	b8 10 27 00 00       	mov    eax,0x2710
c001eec2:	89 c2                	mov    edx,eax
c001eec4:	c1 fa 1f             	sar    edx,0x1f
c001eec7:	f7 f9                	idiv   ecx
c001eec9:	83 ec 0c             	sub    esp,0xc
c001eecc:	50                   	push   eax
c001eecd:	e8 16 f5 fe ff       	call   c000e3e8 <timerHandler(unsigned int)>
c001eed2:	83 c4 10             	add    esp,0x10
c001eed5:	90                   	nop
c001eed6:	83 c4 0c             	add    esp,0xc
c001eed9:	c3                   	ret    
c001eeda:	66 90                	xchg   ax,ax

c001eedc <PIT::open(int, int, void*)>:
c001eedc:	83 ec 0c             	sub    esp,0xc
c001eedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee3:	8b 00                	mov    eax,DWORD PTR [eax]
c001eee5:	83 c0 24             	add    eax,0x24
c001eee8:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeea:	83 ec 08             	sub    esp,0x8
c001eeed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eef5:	ff d0                	call   eax
c001eef7:	83 c4 10             	add    esp,0x10
c001eefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefe:	83 ec 0c             	sub    esp,0xc
c001ef01:	6a 00                	push   0x0
c001ef03:	6a 01                	push   0x1
c001ef05:	68 b4 ee 01 c0       	push   0xc001eeb4
c001ef0a:	6a 00                	push   0x0
c001ef0c:	50                   	push   eax
c001ef0d:	e8 20 da fe ff       	call   c000c932 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef12:	83 c4 20             	add    esp,0x20
c001ef15:	89 c2                	mov    edx,eax
c001ef17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef1b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef21:	b8 00 00 00 00       	mov    eax,0x0
c001ef26:	83 c4 0c             	add    esp,0xc
c001ef29:	c3                   	ret    
c001ef2a:	66 90                	xchg   ax,ax

c001ef2c <PIT::close(int, int, void*)>:
c001ef2c:	83 ec 0c             	sub    esp,0xc
c001ef2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef33:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ef3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef41:	6a 01                	push   0x1
c001ef43:	68 b4 ee 01 c0       	push   0xc001eeb4
c001ef48:	6a 00                	push   0x0
c001ef4a:	50                   	push   eax
c001ef4b:	e8 18 da fe ff       	call   c000c968 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ef50:	83 c4 10             	add    esp,0x10
c001ef53:	b8 00 00 00 00       	mov    eax,0x0
c001ef58:	83 c4 0c             	add    esp,0xc
c001ef5b:	c3                   	ret    

c001ef5c <PIT::PIT()>:
c001ef5c:	83 ec 0c             	sub    esp,0xc
c001ef5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef63:	83 ec 08             	sub    esp,0x8
c001ef66:	68 60 35 02 c0       	push   0xc0023560
c001ef6b:	50                   	push   eax
c001ef6c:	e8 ab f3 fe ff       	call   c000e31c <Timer::Timer(char const*)>
c001ef71:	83 c4 10             	add    esp,0x10
c001ef74:	ba 88 35 02 c0       	mov    edx,0xc0023588
c001ef79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7d:	89 10                	mov    DWORD PTR [eax],edx
c001ef7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef83:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef89:	0f b6 d0             	movzx  edx,al
c001ef8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef90:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ef97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efa1:	0f b6 d0             	movzx  edx,al
c001efa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001efad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efb7:	8d 50 01             	lea    edx,[eax+0x1]
c001efba:	88 d1                	mov    cl,dl
c001efbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001efc0:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001efc6:	0f b6 d0             	movzx  edx,al
c001efc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efcd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001efd1:	83 e1 3f             	and    ecx,0x3f
c001efd4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001efd8:	90                   	nop
c001efd9:	83 c4 0c             	add    esp,0xc
c001efdc:	c3                   	ret    
c001efdd:	66 90                	xchg   ax,ax
c001efdf:	90                   	nop

c001efe0 <avxDetect>:
c001efe0:	b8 01 00 00 00       	mov    eax,0x1
c001efe5:	0f a2                	cpuid  
c001efe7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001efed:	74 15                	je     c001f004 <avxDetect.noAVX>
c001efef:	b8 01 00 00 00       	mov    eax,0x1
c001eff4:	0f a2                	cpuid  
c001eff6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001effc:	74 06                	je     c001f004 <avxDetect.noAVX>
c001effe:	b8 01 00 00 00       	mov    eax,0x1
c001f003:	c3                   	ret    

c001f004 <avxDetect.noAVX>:
c001f004:	b8 00 00 00 00       	mov    eax,0x0
c001f009:	c3                   	ret    

c001f00a <avxSave>:
c001f00a:	53                   	push   ebx
c001f00b:	52                   	push   edx
c001f00c:	31 c0                	xor    eax,eax
c001f00e:	48                   	dec    eax
c001f00f:	89 c2                	mov    edx,eax
c001f011:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f015:	0f ae 23             	xsave  [ebx]
c001f018:	5a                   	pop    edx
c001f019:	5b                   	pop    ebx
c001f01a:	c3                   	ret    

c001f01b <avxLoad>:
c001f01b:	53                   	push   ebx
c001f01c:	52                   	push   edx
c001f01d:	31 c0                	xor    eax,eax
c001f01f:	48                   	dec    eax
c001f020:	89 c2                	mov    edx,eax
c001f022:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f026:	0f ae 2b             	xrstor [ebx]
c001f029:	5a                   	pop    edx
c001f02a:	5b                   	pop    ebx
c001f02b:	c3                   	ret    

c001f02c <avxInit>:
c001f02c:	e8 67 03 00 00       	call   c001f398 <sseInit>
c001f031:	50                   	push   eax
c001f032:	51                   	push   ecx
c001f033:	0f 20 e0             	mov    eax,cr4
c001f036:	0d 00 00 04 00       	or     eax,0x40000
c001f03b:	0f 22 e0             	mov    cr4,eax
c001f03e:	31 c9                	xor    ecx,ecx
c001f040:	0f 01 d0             	xgetbv 
c001f043:	0d 07 00 00 00       	or     eax,0x7
c001f048:	0f 01 d1             	xsetbv 
c001f04b:	59                   	pop    ecx
c001f04c:	58                   	pop    eax
c001f04d:	c3                   	ret    

c001f04e <avxClose>:
c001f04e:	c3                   	ret    

c001f04f <wouldSheSayYes>:
c001f04f:	c3                   	ret    
c001f050:	49                   	dec    ecx
c001f051:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f055:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f059:	75 20                	jne    c001f07b <isr0+0xb>
c001f05b:	4e                   	dec    esi
c001f05c:	79 61                	jns    c001f0bf <isr7+0x3>
c001f05e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f063:	66 90                	xchg   ax,ax
c001f065:	66 90                	xchg   ax,ax
c001f067:	66 90                	xchg   ax,ax
c001f069:	66 90                	xchg   ax,ax
c001f06b:	66 90                	xchg   ax,ax
c001f06d:	66 90                	xchg   ax,ax
c001f06f:	90                   	nop

c001f070 <isr0>:
c001f070:	fa                   	cli    
c001f071:	68 00 00 00 00       	push   0x0
c001f076:	68 00 00 00 00       	push   0x0
c001f07b:	e9 56 01 00 00       	jmp    c001f1d6 <int_common_stub>

c001f080 <isr1>:
c001f080:	fa                   	cli    
c001f081:	6a 00                	push   0x0
c001f083:	6a 01                	push   0x1
c001f085:	e9 4c 01 00 00       	jmp    c001f1d6 <int_common_stub>

c001f08a <isr2>:
c001f08a:	fa                   	cli    
c001f08b:	6a 00                	push   0x0
c001f08d:	6a 02                	push   0x2
c001f08f:	e9 42 01 00 00       	jmp    c001f1d6 <int_common_stub>

c001f094 <isr3>:
c001f094:	fa                   	cli    
c001f095:	6a 00                	push   0x0
c001f097:	6a 03                	push   0x3
c001f099:	e9 38 01 00 00       	jmp    c001f1d6 <int_common_stub>

c001f09e <isr4>:
c001f09e:	fa                   	cli    
c001f09f:	6a 00                	push   0x0
c001f0a1:	6a 04                	push   0x4
c001f0a3:	e9 2e 01 00 00       	jmp    c001f1d6 <int_common_stub>

c001f0a8 <isr5>:
c001f0a8:	fa                   	cli    
c001f0a9:	6a 00                	push   0x0
c001f0ab:	6a 05                	push   0x5
c001f0ad:	e9 24 01 00 00       	jmp    c001f1d6 <int_common_stub>

c001f0b2 <isr6>:
c001f0b2:	fa                   	cli    
c001f0b3:	6a 00                	push   0x0
c001f0b5:	6a 06                	push   0x6
c001f0b7:	e9 1a 01 00 00       	jmp    c001f1d6 <int_common_stub>

c001f0bc <isr7>:
c001f0bc:	fa                   	cli    
c001f0bd:	6a 00                	push   0x0
c001f0bf:	6a 07                	push   0x7
c001f0c1:	e9 10 01 00 00       	jmp    c001f1d6 <int_common_stub>

c001f0c6 <isr8>:
c001f0c6:	fa                   	cli    
c001f0c7:	6a 08                	push   0x8
c001f0c9:	e9 08 01 00 00       	jmp    c001f1d6 <int_common_stub>

c001f0ce <isr9>:
c001f0ce:	fa                   	cli    
c001f0cf:	6a 00                	push   0x0
c001f0d1:	6a 09                	push   0x9
c001f0d3:	e9 fe 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f0d8 <isr10>:
c001f0d8:	fa                   	cli    
c001f0d9:	6a 0a                	push   0xa
c001f0db:	e9 f6 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f0e0 <isr11>:
c001f0e0:	fa                   	cli    
c001f0e1:	6a 0b                	push   0xb
c001f0e3:	e9 ee 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f0e8 <isr12>:
c001f0e8:	fa                   	cli    
c001f0e9:	6a 0c                	push   0xc
c001f0eb:	e9 e6 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f0f0 <isr13>:
c001f0f0:	fa                   	cli    
c001f0f1:	6a 0d                	push   0xd
c001f0f3:	53                   	push   ebx
c001f0f4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0f8:	81 fb c6 f2 01 c0    	cmp    ebx,0xc001f2c6
c001f0fe:	5b                   	pop    ebx
c001f0ff:	0f 84 c3 01 00 00    	je     c001f2c8 <finishSignal2>
c001f105:	e9 cc 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f10a <isr14>:
c001f10a:	fa                   	cli    
c001f10b:	6a 0e                	push   0xe
c001f10d:	e9 c4 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f112 <isr15>:
c001f112:	fa                   	cli    
c001f113:	6a 00                	push   0x0
c001f115:	6a 0f                	push   0xf
c001f117:	e9 ba 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f11c <isr16>:
c001f11c:	fa                   	cli    
c001f11d:	6a 00                	push   0x0
c001f11f:	6a 10                	push   0x10
c001f121:	e9 b0 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f126 <isr17>:
c001f126:	fa                   	cli    
c001f127:	6a 00                	push   0x0
c001f129:	6a 11                	push   0x11
c001f12b:	e9 a6 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f130 <isr18>:
c001f130:	fa                   	cli    
c001f131:	6a 00                	push   0x0
c001f133:	6a 12                	push   0x12
c001f135:	e9 9c 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f13a <irq3>:
c001f13a:	fa                   	cli    
c001f13b:	6a 00                	push   0x0
c001f13d:	6a 23                	push   0x23
c001f13f:	e9 92 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f144 <irq4>:
c001f144:	fa                   	cli    
c001f145:	6a 00                	push   0x0
c001f147:	6a 24                	push   0x24
c001f149:	e9 88 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f14e <irq5>:
c001f14e:	fa                   	cli    
c001f14f:	6a 00                	push   0x0
c001f151:	6a 25                	push   0x25
c001f153:	e9 7e 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f158 <irq6>:
c001f158:	fa                   	cli    
c001f159:	6a 00                	push   0x0
c001f15b:	6a 26                	push   0x26
c001f15d:	e9 74 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f162 <irq7>:
c001f162:	fa                   	cli    
c001f163:	6a 00                	push   0x0
c001f165:	6a 27                	push   0x27
c001f167:	e9 6a 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f16c <irq8>:
c001f16c:	fa                   	cli    
c001f16d:	6a 00                	push   0x0
c001f16f:	6a 28                	push   0x28
c001f171:	e9 60 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f176 <irq9>:
c001f176:	fa                   	cli    
c001f177:	6a 00                	push   0x0
c001f179:	6a 29                	push   0x29
c001f17b:	e9 56 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f180 <irq10>:
c001f180:	fa                   	cli    
c001f181:	6a 00                	push   0x0
c001f183:	6a 2a                	push   0x2a
c001f185:	e9 4c 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f18a <irq11>:
c001f18a:	fa                   	cli    
c001f18b:	6a 00                	push   0x0
c001f18d:	6a 2b                	push   0x2b
c001f18f:	e9 42 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f194 <irq12>:
c001f194:	fa                   	cli    
c001f195:	6a 00                	push   0x0
c001f197:	6a 2c                	push   0x2c
c001f199:	e9 38 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f19e <irq13>:
c001f19e:	fa                   	cli    
c001f19f:	6a 00                	push   0x0
c001f1a1:	6a 2d                	push   0x2d
c001f1a3:	e9 2e 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f1a8 <irq14>:
c001f1a8:	fa                   	cli    
c001f1a9:	6a 00                	push   0x0
c001f1ab:	6a 2e                	push   0x2e
c001f1ad:	e9 24 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f1b2 <irq15>:
c001f1b2:	fa                   	cli    
c001f1b3:	6a 00                	push   0x0
c001f1b5:	6a 2f                	push   0x2f
c001f1b7:	e9 1a 00 00 00       	jmp    c001f1d6 <int_common_stub>

c001f1bc <irq1>:
c001f1bc:	fa                   	cli    
c001f1bd:	6a 00                	push   0x0
c001f1bf:	6a 21                	push   0x21
c001f1c1:	eb 13                	jmp    c001f1d6 <int_common_stub>

c001f1c3 <irq2>:
c001f1c3:	fa                   	cli    
c001f1c4:	6a 00                	push   0x0
c001f1c6:	6a 22                	push   0x22
c001f1c8:	eb 0c                	jmp    c001f1d6 <int_common_stub>

c001f1ca <isr96>:
c001f1ca:	6a 00                	push   0x0
c001f1cc:	6a 60                	push   0x60
c001f1ce:	fb                   	sti    
c001f1cf:	eb 37                	jmp    c001f208 <syscall_common_stub>

c001f1d1 <irq0>:
c001f1d1:	fa                   	cli    
c001f1d2:	6a 00                	push   0x0
c001f1d4:	6a 20                	push   0x20

c001f1d6 <int_common_stub>:
c001f1d6:	60                   	pusha  
c001f1d7:	1e                   	push   ds
c001f1d8:	06                   	push   es
c001f1d9:	0f a0                	push   fs
c001f1db:	0f a8                	push   gs
c001f1dd:	66 b8 10 00          	mov    ax,0x10
c001f1e1:	66 8e d8             	mov    ds,ax
c001f1e4:	66 8e c0             	mov    es,ax
c001f1e7:	66 8e e0             	mov    fs,ax
c001f1ea:	66 8e e8             	mov    gs,ax
c001f1ed:	54                   	push   esp
c001f1ee:	fc                   	cld    
c001f1ef:	e8 3c dc fe ff       	call   c000ce30 <int_handler>
c001f1f4:	81 c4 04 00 00 00    	add    esp,0x4
c001f1fa:	0f a9                	pop    gs
c001f1fc:	0f a1                	pop    fs
c001f1fe:	07                   	pop    es
c001f1ff:	1f                   	pop    ds
c001f200:	61                   	popa   
c001f201:	81 c4 08 00 00 00    	add    esp,0x8
c001f207:	cf                   	iret   

c001f208 <syscall_common_stub>:
c001f208:	60                   	pusha  
c001f209:	1e                   	push   ds
c001f20a:	06                   	push   es
c001f20b:	0f a0                	push   fs
c001f20d:	0f a8                	push   gs
c001f20f:	66 b8 10 00          	mov    ax,0x10
c001f213:	66 8e d8             	mov    ds,ax
c001f216:	66 8e c0             	mov    es,ax
c001f219:	66 8e e0             	mov    fs,ax
c001f21c:	66 8e e8             	mov    gs,ax
c001f21f:	54                   	push   esp
c001f220:	fc                   	cld    
c001f221:	e8 0a dc fe ff       	call   c000ce30 <int_handler>
c001f226:	81 c4 04 00 00 00    	add    esp,0x4
c001f22c:	0f a9                	pop    gs
c001f22e:	0f a1                	pop    fs
c001f230:	07                   	pop    es
c001f231:	1f                   	pop    ds
c001f232:	e8 bf 29 ff ff       	call   c0011bf6 <KiCheckSignalZ>
c001f237:	3d 00 00 00 00       	cmp    eax,0x0
c001f23c:	0f 84 c0 00 00 00    	je     c001f302 <skipSignals>
c001f242:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f247:	61                   	popa   
c001f248:	53                   	push   ebx
c001f249:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f24f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f252:	5b                   	pop    ebx
c001f253:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f258:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f25b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f25e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f261:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f264:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f267:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f26a:	81 c4 08 00 00 00    	add    esp,0x8
c001f270:	5e                   	pop    esi
c001f271:	5b                   	pop    ebx
c001f272:	59                   	pop    ecx
c001f273:	5a                   	pop    edx
c001f274:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f277:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f27a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f27d:	52                   	push   edx
c001f27e:	51                   	push   ecx
c001f27f:	53                   	push   ebx
c001f280:	56                   	push   esi
c001f281:	81 ec 08 00 00 00    	sub    esp,0x8
c001f287:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f28a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f28d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f290:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f293:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f296:	60                   	pusha  
c001f297:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f29d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f2a0:	89 e3                	mov    ebx,esp
c001f2a2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f2a5:	52                   	push   edx
c001f2a6:	68 c6 f2 01 c0       	push   0xc001f2c6
c001f2ab:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f2ae:	89 dc                	mov    esp,ebx
c001f2b0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f2b3:	68 23 00 00 00       	push   0x23
c001f2b8:	51                   	push   ecx
c001f2b9:	68 02 02 00 00       	push   0x202
c001f2be:	68 1b 00 00 00       	push   0x1b
c001f2c3:	ff 36                	push   DWORD PTR [esi]
c001f2c5:	cf                   	iret   

c001f2c6 <finishSignal>:
c001f2c6:	cd 0f                	int    0xf

c001f2c8 <finishSignal2>:
c001f2c8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f2ce:	e8 a0 29 ff ff       	call   c0011c73 <KiFinishSignalZ>
c001f2d3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f2d9:	68 23 00 00 00       	push   0x23
c001f2de:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f2e1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f2e4:	68 1b 00 00 00       	push   0x1b
c001f2e9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f2ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f2ef:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f2f2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f2f5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f2f8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f2fb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f2fe:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f301:	cf                   	iret   

c001f302 <skipSignals>:
c001f302:	61                   	popa   
c001f303:	81 c4 08 00 00 00    	add    esp,0x8
c001f309:	cf                   	iret   
c001f30a:	90                   	nop
c001f30b:	90                   	nop

c001f30c <irq16>:
c001f30c:	fa                   	cli    
c001f30d:	6a 00                	push   0x0
c001f30f:	6a 30                	push   0x30
c001f311:	e9 c0 fe ff ff       	jmp    c001f1d6 <int_common_stub>

c001f316 <irq17>:
c001f316:	fa                   	cli    
c001f317:	6a 00                	push   0x0
c001f319:	6a 31                	push   0x31
c001f31b:	e9 b6 fe ff ff       	jmp    c001f1d6 <int_common_stub>

c001f320 <irq18>:
c001f320:	fa                   	cli    
c001f321:	6a 00                	push   0x0
c001f323:	6a 32                	push   0x32
c001f325:	e9 ac fe ff ff       	jmp    c001f1d6 <int_common_stub>

c001f32a <irq19>:
c001f32a:	fa                   	cli    
c001f32b:	6a 00                	push   0x0
c001f32d:	6a 33                	push   0x33
c001f32f:	e9 a2 fe ff ff       	jmp    c001f1d6 <int_common_stub>

c001f334 <irq20>:
c001f334:	fa                   	cli    
c001f335:	6a 00                	push   0x0
c001f337:	6a 34                	push   0x34
c001f339:	e9 98 fe ff ff       	jmp    c001f1d6 <int_common_stub>

c001f33e <irq21>:
c001f33e:	fa                   	cli    
c001f33f:	6a 00                	push   0x0
c001f341:	6a 35                	push   0x35
c001f343:	e9 8e fe ff ff       	jmp    c001f1d6 <int_common_stub>

c001f348 <irq22>:
c001f348:	fa                   	cli    
c001f349:	6a 00                	push   0x0
c001f34b:	6a 36                	push   0x36
c001f34d:	e9 84 fe ff ff       	jmp    c001f1d6 <int_common_stub>

c001f352 <irq23>:
c001f352:	fa                   	cli    
c001f353:	6a 00                	push   0x0
c001f355:	6a 37                	push   0x37
c001f357:	e9 7a fe ff ff       	jmp    c001f1d6 <int_common_stub>
c001f35c:	66 90                	xchg   ax,ax
c001f35e:	66 90                	xchg   ax,ax

c001f360 <i386GetRDRAND>:
c001f360:	b9 64 00 00 00       	mov    ecx,0x64

c001f365 <retry>:
c001f365:	0f c7 f0             	rdrand eax
c001f368:	72 05                	jb     c001f36f <retry.done>
c001f36a:	e2 f9                	loop   c001f365 <retry>

c001f36c <retry.fail>:
c001f36c:	31 c0                	xor    eax,eax
c001f36e:	c3                   	ret    

c001f36f <retry.done>:
c001f36f:	c3                   	ret    

c001f370 <absolutelyNoChanceInHell>:
c001f370:	b8 01 00 00 00       	mov    eax,0x1
c001f375:	0f a2                	cpuid  
c001f377:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f37d:	74 06                	je     c001f385 <sseDetect.noSSE>
c001f37f:	b8 01 00 00 00       	mov    eax,0x1
c001f384:	c3                   	ret    

c001f385 <sseDetect.noSSE>:
c001f385:	31 c0                	xor    eax,eax
c001f387:	c3                   	ret    

c001f388 <sseSave>:
c001f388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f38c:	0f ae 00             	fxsave [eax]
c001f38f:	c3                   	ret    

c001f390 <sseLoad>:
c001f390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f394:	0f ae 08             	fxrstor [eax]
c001f397:	c3                   	ret    

c001f398 <sseInit>:
c001f398:	e8 42 00 00 00       	call   c001f3df <x87Init>
c001f39d:	0f 20 e0             	mov    eax,cr4
c001f3a0:	66 0d 00 06          	or     ax,0x600
c001f3a4:	0f 22 e0             	mov    cr4,eax
c001f3a7:	c3                   	ret    

c001f3a8 <sseClose>:
c001f3a8:	c3                   	ret    
c001f3a9:	66 90                	xchg   ax,ax
c001f3ab:	66 90                	xchg   ax,ax
c001f3ad:	66 90                	xchg   ax,ax
c001f3af:	90                   	nop

c001f3b0 <value_37F>:
c001f3b0:	7f 03                	jg     c001f3b5 <value_37A+0x1>

c001f3b2 <value_37E>:
c001f3b2:	7e 03                	jle    c001f3b7 <x87Detect+0x1>

c001f3b4 <value_37A>:
c001f3b4:	7a 03                	jp     c001f3b9 <x87Detect+0x3>

c001f3b6 <x87Detect>:
c001f3b6:	b8 01 00 00 00       	mov    eax,0x1
c001f3bb:	0f a2                	cpuid  
c001f3bd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f3c3:	74 06                	je     c001f3cb <x87Detect.nox87>
c001f3c5:	b8 01 00 00 00       	mov    eax,0x1
c001f3ca:	c3                   	ret    

c001f3cb <x87Detect.nox87>:
c001f3cb:	b8 00 00 00 00       	mov    eax,0x0
c001f3d0:	c3                   	ret    

c001f3d1 <x87Save>:
c001f3d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3d5:	dd 30                	fnsave [eax]
c001f3d7:	c3                   	ret    

c001f3d8 <x87Load>:
c001f3d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3dc:	dd 20                	frstor [eax]
c001f3de:	c3                   	ret    

c001f3df <x87Init>:
c001f3df:	0f 20 c0             	mov    eax,cr0
c001f3e2:	66 25 fb ff          	and    ax,0xfffb
c001f3e6:	66 0d 22 00          	or     ax,0x22
c001f3ea:	0f 22 c0             	mov    cr0,eax
c001f3ed:	db e3                	fninit 
c001f3ef:	0f 06                	clts   
c001f3f1:	d9 2d b4 f3 01 c0    	fldcw  WORD PTR ds:0xc001f3b4
c001f3f7:	c3                   	ret    

c001f3f8 <x87Close>:
c001f3f8:	c3                   	ret    
c001f3f9:	66 90                	xchg   ax,ax
c001f3fb:	90                   	nop

c001f3fc <__do_global_ctors_aux>:
c001f3fc:	a1 b0 03 02 c0       	mov    eax,ds:0xc00203b0
c001f401:	83 f8 ff             	cmp    eax,0xffffffff
c001f404:	74 1a                	je     c001f420 <__do_global_ctors_aux+0x24>
c001f406:	55                   	push   ebp
c001f407:	89 e5                	mov    ebp,esp
c001f409:	53                   	push   ebx
c001f40a:	52                   	push   edx
c001f40b:	bb b0 03 02 c0       	mov    ebx,0xc00203b0
c001f410:	ff d0                	call   eax
c001f412:	83 eb 04             	sub    ebx,0x4
c001f415:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f417:	83 f8 ff             	cmp    eax,0xffffffff
c001f41a:	75 f4                	jne    c001f410 <__do_global_ctors_aux+0x14>
c001f41c:	58                   	pop    eax
c001f41d:	5b                   	pop    ebx
c001f41e:	5d                   	pop    ebp
c001f41f:	c3                   	ret    
c001f420:	c3                   	ret    
c001f421:	66 90                	xchg   ax,ax
c001f423:	90                   	nop

c001f424 <__divdi3>:
c001f424:	55                   	push   ebp
c001f425:	57                   	push   edi
c001f426:	56                   	push   esi
c001f427:	53                   	push   ebx
c001f428:	83 ec 1c             	sub    esp,0x1c
c001f42b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f42f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f433:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f436:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f43a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f43e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f442:	85 db                	test   ebx,ebx
c001f444:	0f 88 8e 00 00 00    	js     c001f4d8 <__divdi3+0xb4>
c001f44a:	89 dd                	mov    ebp,ebx
c001f44c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f454:	89 d3                	mov    ebx,edx
c001f456:	85 d2                	test   edx,edx
c001f458:	79 0d                	jns    c001f467 <__divdi3+0x43>
c001f45a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f45e:	f7 d8                	neg    eax
c001f460:	83 d2 00             	adc    edx,0x0
c001f463:	f7 da                	neg    edx
c001f465:	89 d3                	mov    ebx,edx
c001f467:	89 c7                	mov    edi,eax
c001f469:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f46c:	85 db                	test   ebx,ebx
c001f46e:	75 48                	jne    c001f4b8 <__divdi3+0x94>
c001f470:	39 ef                	cmp    edi,ebp
c001f472:	76 24                	jbe    c001f498 <__divdi3+0x74>
c001f474:	89 ea                	mov    edx,ebp
c001f476:	f7 f7                	div    edi
c001f478:	89 c1                	mov    ecx,eax
c001f47a:	31 f6                	xor    esi,esi
c001f47c:	89 c8                	mov    eax,ecx
c001f47e:	89 f2                	mov    edx,esi
c001f480:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f484:	85 c9                	test   ecx,ecx
c001f486:	74 07                	je     c001f48f <__divdi3+0x6b>
c001f488:	f7 d8                	neg    eax
c001f48a:	83 d2 00             	adc    edx,0x0
c001f48d:	f7 da                	neg    edx
c001f48f:	83 c4 1c             	add    esp,0x1c
c001f492:	5b                   	pop    ebx
c001f493:	5e                   	pop    esi
c001f494:	5f                   	pop    edi
c001f495:	5d                   	pop    ebp
c001f496:	c3                   	ret    
c001f497:	90                   	nop
c001f498:	85 ff                	test   edi,edi
c001f49a:	75 0b                	jne    c001f4a7 <__divdi3+0x83>
c001f49c:	b8 01 00 00 00       	mov    eax,0x1
c001f4a1:	31 d2                	xor    edx,edx
c001f4a3:	f7 f3                	div    ebx
c001f4a5:	89 c7                	mov    edi,eax
c001f4a7:	31 d2                	xor    edx,edx
c001f4a9:	89 e8                	mov    eax,ebp
c001f4ab:	f7 f7                	div    edi
c001f4ad:	89 c6                	mov    esi,eax
c001f4af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f4b2:	f7 f7                	div    edi
c001f4b4:	89 c1                	mov    ecx,eax
c001f4b6:	eb c4                	jmp    c001f47c <__divdi3+0x58>
c001f4b8:	39 eb                	cmp    ebx,ebp
c001f4ba:	77 3c                	ja     c001f4f8 <__divdi3+0xd4>
c001f4bc:	0f bd f3             	bsr    esi,ebx
c001f4bf:	83 f6 1f             	xor    esi,0x1f
c001f4c2:	75 40                	jne    c001f504 <__divdi3+0xe0>
c001f4c4:	39 eb                	cmp    ebx,ebp
c001f4c6:	72 09                	jb     c001f4d1 <__divdi3+0xad>
c001f4c8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f4cb:	0f 87 97 00 00 00    	ja     c001f568 <__divdi3+0x144>
c001f4d1:	b9 01 00 00 00       	mov    ecx,0x1
c001f4d6:	eb a4                	jmp    c001f47c <__divdi3+0x58>
c001f4d8:	f7 d9                	neg    ecx
c001f4da:	83 d3 00             	adc    ebx,0x0
c001f4dd:	f7 db                	neg    ebx
c001f4df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f4e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f4e6:	89 dd                	mov    ebp,ebx
c001f4e8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f4f0:	e9 5f ff ff ff       	jmp    c001f454 <__divdi3+0x30>
c001f4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001f4f8:	31 f6                	xor    esi,esi
c001f4fa:	31 c9                	xor    ecx,ecx
c001f4fc:	e9 7b ff ff ff       	jmp    c001f47c <__divdi3+0x58>
c001f501:	8d 76 00             	lea    esi,[esi+0x0]
c001f504:	b8 20 00 00 00       	mov    eax,0x20
c001f509:	29 f0                	sub    eax,esi
c001f50b:	89 f1                	mov    ecx,esi
c001f50d:	d3 e3                	shl    ebx,cl
c001f50f:	89 fa                	mov    edx,edi
c001f511:	88 c1                	mov    cl,al
c001f513:	d3 ea                	shr    edx,cl
c001f515:	09 da                	or     edx,ebx
c001f517:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f51b:	89 f1                	mov    ecx,esi
c001f51d:	d3 e7                	shl    edi,cl
c001f51f:	89 eb                	mov    ebx,ebp
c001f521:	88 c1                	mov    cl,al
c001f523:	d3 eb                	shr    ebx,cl
c001f525:	89 f1                	mov    ecx,esi
c001f527:	d3 e5                	shl    ebp,cl
c001f529:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f52c:	88 c1                	mov    cl,al
c001f52e:	d3 ea                	shr    edx,cl
c001f530:	09 d5                	or     ebp,edx
c001f532:	89 e8                	mov    eax,ebp
c001f534:	89 da                	mov    edx,ebx
c001f536:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f53a:	89 d3                	mov    ebx,edx
c001f53c:	89 c5                	mov    ebp,eax
c001f53e:	f7 e7                	mul    edi
c001f540:	39 d3                	cmp    ebx,edx
c001f542:	72 18                	jb     c001f55c <__divdi3+0x138>
c001f544:	74 0a                	je     c001f550 <__divdi3+0x12c>
c001f546:	89 e9                	mov    ecx,ebp
c001f548:	31 f6                	xor    esi,esi
c001f54a:	e9 2d ff ff ff       	jmp    c001f47c <__divdi3+0x58>
c001f54f:	90                   	nop
c001f550:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f553:	89 f1                	mov    ecx,esi
c001f555:	d3 e7                	shl    edi,cl
c001f557:	39 c7                	cmp    edi,eax
c001f559:	73 eb                	jae    c001f546 <__divdi3+0x122>
c001f55b:	90                   	nop
c001f55c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f55f:	31 f6                	xor    esi,esi
c001f561:	e9 16 ff ff ff       	jmp    c001f47c <__divdi3+0x58>
c001f566:	66 90                	xchg   ax,ax
c001f568:	31 c9                	xor    ecx,ecx
c001f56a:	e9 0d ff ff ff       	jmp    c001f47c <__divdi3+0x58>
c001f56f:	90                   	nop

c001f570 <__moddi3>:
c001f570:	55                   	push   ebp
c001f571:	57                   	push   edi
c001f572:	56                   	push   esi
c001f573:	53                   	push   ebx
c001f574:	83 ec 2c             	sub    esp,0x2c
c001f577:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f57b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f57f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f583:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f587:	85 db                	test   ebx,ebx
c001f589:	0f 88 85 00 00 00    	js     c001f614 <__moddi3+0xa4>
c001f58f:	89 de                	mov    esi,ebx
c001f591:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f599:	89 d7                	mov    edi,edx
c001f59b:	85 d2                	test   edx,edx
c001f59d:	79 09                	jns    c001f5a8 <__moddi3+0x38>
c001f59f:	f7 d8                	neg    eax
c001f5a1:	83 d2 00             	adc    edx,0x0
c001f5a4:	f7 da                	neg    edx
c001f5a6:	89 d7                	mov    edi,edx
c001f5a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5ac:	89 cd                	mov    ebp,ecx
c001f5ae:	85 ff                	test   edi,edi
c001f5b0:	75 52                	jne    c001f604 <__moddi3+0x94>
c001f5b2:	89 c3                	mov    ebx,eax
c001f5b4:	39 f0                	cmp    eax,esi
c001f5b6:	76 24                	jbe    c001f5dc <__moddi3+0x6c>
c001f5b8:	89 c8                	mov    eax,ecx
c001f5ba:	89 f2                	mov    edx,esi
c001f5bc:	f7 f3                	div    ebx
c001f5be:	89 d6                	mov    esi,edx
c001f5c0:	89 f0                	mov    eax,esi
c001f5c2:	31 d2                	xor    edx,edx
c001f5c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f5c8:	85 c9                	test   ecx,ecx
c001f5ca:	74 07                	je     c001f5d3 <__moddi3+0x63>
c001f5cc:	f7 d8                	neg    eax
c001f5ce:	83 d2 00             	adc    edx,0x0
c001f5d1:	f7 da                	neg    edx
c001f5d3:	83 c4 2c             	add    esp,0x2c
c001f5d6:	5b                   	pop    ebx
c001f5d7:	5e                   	pop    esi
c001f5d8:	5f                   	pop    edi
c001f5d9:	5d                   	pop    ebp
c001f5da:	c3                   	ret    
c001f5db:	90                   	nop
c001f5dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f5e0:	85 db                	test   ebx,ebx
c001f5e2:	75 0d                	jne    c001f5f1 <__moddi3+0x81>
c001f5e4:	b8 01 00 00 00       	mov    eax,0x1
c001f5e9:	31 d2                	xor    edx,edx
c001f5eb:	f7 f7                	div    edi
c001f5ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5f1:	89 f0                	mov    eax,esi
c001f5f3:	31 d2                	xor    edx,edx
c001f5f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f5f9:	f7 f7                	div    edi
c001f5fb:	89 e8                	mov    eax,ebp
c001f5fd:	f7 f7                	div    edi
c001f5ff:	89 d6                	mov    esi,edx
c001f601:	eb bd                	jmp    c001f5c0 <__moddi3+0x50>
c001f603:	90                   	nop
c001f604:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f608:	39 f7                	cmp    edi,esi
c001f60a:	76 20                	jbe    c001f62c <__moddi3+0xbc>
c001f60c:	89 c8                	mov    eax,ecx
c001f60e:	89 f2                	mov    edx,esi
c001f610:	eb b2                	jmp    c001f5c4 <__moddi3+0x54>
c001f612:	66 90                	xchg   ax,ax
c001f614:	f7 d9                	neg    ecx
c001f616:	83 d3 00             	adc    ebx,0x0
c001f619:	f7 db                	neg    ebx
c001f61b:	89 de                	mov    esi,ebx
c001f61d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f625:	e9 6f ff ff ff       	jmp    c001f599 <__moddi3+0x29>
c001f62a:	66 90                	xchg   ax,ax
c001f62c:	0f bd c7             	bsr    eax,edi
c001f62f:	83 f0 1f             	xor    eax,0x1f
c001f632:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f636:	75 24                	jne    c001f65c <__moddi3+0xec>
c001f638:	39 f7                	cmp    edi,esi
c001f63a:	72 06                	jb     c001f642 <__moddi3+0xd2>
c001f63c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f640:	77 0c                	ja     c001f64e <__moddi3+0xde>
c001f642:	89 e9                	mov    ecx,ebp
c001f644:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f648:	19 fe                	sbb    esi,edi
c001f64a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f64e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f652:	89 f2                	mov    edx,esi
c001f654:	e9 6b ff ff ff       	jmp    c001f5c4 <__moddi3+0x54>
c001f659:	8d 76 00             	lea    esi,[esi+0x0]
c001f65c:	b8 20 00 00 00       	mov    eax,0x20
c001f661:	89 c2                	mov    edx,eax
c001f663:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f667:	29 da                	sub    edx,ebx
c001f669:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f66d:	88 d9                	mov    cl,bl
c001f66f:	d3 e7                	shl    edi,cl
c001f671:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f675:	88 d1                	mov    cl,dl
c001f677:	d3 e8                	shr    eax,cl
c001f679:	09 c7                	or     edi,eax
c001f67b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f67f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f683:	89 d8                	mov    eax,ebx
c001f685:	88 d9                	mov    cl,bl
c001f687:	d3 e7                	shl    edi,cl
c001f689:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f68d:	89 f3                	mov    ebx,esi
c001f68f:	88 d1                	mov    cl,dl
c001f691:	d3 eb                	shr    ebx,cl
c001f693:	89 c7                	mov    edi,eax
c001f695:	88 c1                	mov    cl,al
c001f697:	d3 e6                	shl    esi,cl
c001f699:	89 e8                	mov    eax,ebp
c001f69b:	88 d1                	mov    cl,dl
c001f69d:	d3 e8                	shr    eax,cl
c001f69f:	09 f0                	or     eax,esi
c001f6a1:	89 f9                	mov    ecx,edi
c001f6a3:	d3 e5                	shl    ebp,cl
c001f6a5:	89 da                	mov    edx,ebx
c001f6a7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f6ab:	89 d3                	mov    ebx,edx
c001f6ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6b1:	89 c6                	mov    esi,eax
c001f6b3:	89 d1                	mov    ecx,edx
c001f6b5:	39 d3                	cmp    ebx,edx
c001f6b7:	72 27                	jb     c001f6e0 <__moddi3+0x170>
c001f6b9:	74 21                	je     c001f6dc <__moddi3+0x16c>
c001f6bb:	29 f5                	sub    ebp,esi
c001f6bd:	19 cb                	sbb    ebx,ecx
c001f6bf:	89 de                	mov    esi,ebx
c001f6c1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f6c5:	d3 e6                	shl    esi,cl
c001f6c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f6cb:	89 f9                	mov    ecx,edi
c001f6cd:	d3 ed                	shr    ebp,cl
c001f6cf:	09 ee                	or     esi,ebp
c001f6d1:	89 f0                	mov    eax,esi
c001f6d3:	d3 eb                	shr    ebx,cl
c001f6d5:	89 da                	mov    edx,ebx
c001f6d7:	e9 e8 fe ff ff       	jmp    c001f5c4 <__moddi3+0x54>
c001f6dc:	39 c5                	cmp    ebp,eax
c001f6de:	73 db                	jae    c001f6bb <__moddi3+0x14b>
c001f6e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f6e4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f6e8:	89 d1                	mov    ecx,edx
c001f6ea:	89 c6                	mov    esi,eax
c001f6ec:	eb cd                	jmp    c001f6bb <__moddi3+0x14b>
c001f6ee:	66 90                	xchg   ax,ax

c001f6f0 <__udivdi3>:
c001f6f0:	55                   	push   ebp
c001f6f1:	57                   	push   edi
c001f6f2:	56                   	push   esi
c001f6f3:	53                   	push   ebx
c001f6f4:	83 ec 1c             	sub    esp,0x1c
c001f6f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f6fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f6ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f703:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f707:	85 d2                	test   edx,edx
c001f709:	75 41                	jne    c001f74c <__udivdi3+0x5c>
c001f70b:	39 f7                	cmp    edi,esi
c001f70d:	76 15                	jbe    c001f724 <__udivdi3+0x34>
c001f70f:	89 e8                	mov    eax,ebp
c001f711:	89 f2                	mov    edx,esi
c001f713:	f7 f7                	div    edi
c001f715:	31 db                	xor    ebx,ebx
c001f717:	89 da                	mov    edx,ebx
c001f719:	83 c4 1c             	add    esp,0x1c
c001f71c:	5b                   	pop    ebx
c001f71d:	5e                   	pop    esi
c001f71e:	5f                   	pop    edi
c001f71f:	5d                   	pop    ebp
c001f720:	c3                   	ret    
c001f721:	8d 76 00             	lea    esi,[esi+0x0]
c001f724:	89 f9                	mov    ecx,edi
c001f726:	85 ff                	test   edi,edi
c001f728:	75 0b                	jne    c001f735 <__udivdi3+0x45>
c001f72a:	b8 01 00 00 00       	mov    eax,0x1
c001f72f:	31 d2                	xor    edx,edx
c001f731:	f7 f7                	div    edi
c001f733:	89 c1                	mov    ecx,eax
c001f735:	31 d2                	xor    edx,edx
c001f737:	89 f0                	mov    eax,esi
c001f739:	f7 f1                	div    ecx
c001f73b:	89 c3                	mov    ebx,eax
c001f73d:	89 e8                	mov    eax,ebp
c001f73f:	f7 f1                	div    ecx
c001f741:	89 da                	mov    edx,ebx
c001f743:	83 c4 1c             	add    esp,0x1c
c001f746:	5b                   	pop    ebx
c001f747:	5e                   	pop    esi
c001f748:	5f                   	pop    edi
c001f749:	5d                   	pop    ebp
c001f74a:	c3                   	ret    
c001f74b:	90                   	nop
c001f74c:	39 f2                	cmp    edx,esi
c001f74e:	77 1c                	ja     c001f76c <__udivdi3+0x7c>
c001f750:	0f bd da             	bsr    ebx,edx
c001f753:	83 f3 1f             	xor    ebx,0x1f
c001f756:	75 24                	jne    c001f77c <__udivdi3+0x8c>
c001f758:	39 f2                	cmp    edx,esi
c001f75a:	72 08                	jb     c001f764 <__udivdi3+0x74>
c001f75c:	39 ef                	cmp    edi,ebp
c001f75e:	0f 87 84 00 00 00    	ja     c001f7e8 <__udivdi3+0xf8>
c001f764:	b8 01 00 00 00       	mov    eax,0x1
c001f769:	eb ac                	jmp    c001f717 <__udivdi3+0x27>
c001f76b:	90                   	nop
c001f76c:	31 db                	xor    ebx,ebx
c001f76e:	31 c0                	xor    eax,eax
c001f770:	89 da                	mov    edx,ebx
c001f772:	83 c4 1c             	add    esp,0x1c
c001f775:	5b                   	pop    ebx
c001f776:	5e                   	pop    esi
c001f777:	5f                   	pop    edi
c001f778:	5d                   	pop    ebp
c001f779:	c3                   	ret    
c001f77a:	66 90                	xchg   ax,ax
c001f77c:	b8 20 00 00 00       	mov    eax,0x20
c001f781:	29 d8                	sub    eax,ebx
c001f783:	88 d9                	mov    cl,bl
c001f785:	d3 e2                	shl    edx,cl
c001f787:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f78b:	89 fa                	mov    edx,edi
c001f78d:	88 c1                	mov    cl,al
c001f78f:	d3 ea                	shr    edx,cl
c001f791:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f795:	09 d1                	or     ecx,edx
c001f797:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f79b:	88 d9                	mov    cl,bl
c001f79d:	d3 e7                	shl    edi,cl
c001f79f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f7a3:	89 f7                	mov    edi,esi
c001f7a5:	88 c1                	mov    cl,al
c001f7a7:	d3 ef                	shr    edi,cl
c001f7a9:	88 d9                	mov    cl,bl
c001f7ab:	d3 e6                	shl    esi,cl
c001f7ad:	89 ea                	mov    edx,ebp
c001f7af:	88 c1                	mov    cl,al
c001f7b1:	d3 ea                	shr    edx,cl
c001f7b3:	09 d6                	or     esi,edx
c001f7b5:	89 f0                	mov    eax,esi
c001f7b7:	89 fa                	mov    edx,edi
c001f7b9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f7bd:	89 d7                	mov    edi,edx
c001f7bf:	89 c6                	mov    esi,eax
c001f7c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f7c5:	39 d7                	cmp    edi,edx
c001f7c7:	72 13                	jb     c001f7dc <__udivdi3+0xec>
c001f7c9:	74 09                	je     c001f7d4 <__udivdi3+0xe4>
c001f7cb:	89 f0                	mov    eax,esi
c001f7cd:	31 db                	xor    ebx,ebx
c001f7cf:	e9 43 ff ff ff       	jmp    c001f717 <__udivdi3+0x27>
c001f7d4:	88 d9                	mov    cl,bl
c001f7d6:	d3 e5                	shl    ebp,cl
c001f7d8:	39 c5                	cmp    ebp,eax
c001f7da:	73 ef                	jae    c001f7cb <__udivdi3+0xdb>
c001f7dc:	8d 46 ff             	lea    eax,[esi-0x1]
c001f7df:	31 db                	xor    ebx,ebx
c001f7e1:	e9 31 ff ff ff       	jmp    c001f717 <__udivdi3+0x27>
c001f7e6:	66 90                	xchg   ax,ax
c001f7e8:	31 c0                	xor    eax,eax
c001f7ea:	e9 28 ff ff ff       	jmp    c001f717 <__udivdi3+0x27>
c001f7ef:	90                   	nop

c001f7f0 <__umoddi3>:
c001f7f0:	55                   	push   ebp
c001f7f1:	57                   	push   edi
c001f7f2:	56                   	push   esi
c001f7f3:	53                   	push   ebx
c001f7f4:	83 ec 1c             	sub    esp,0x1c
c001f7f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f7fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f7ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f803:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f807:	89 da                	mov    edx,ebx
c001f809:	85 c0                	test   eax,eax
c001f80b:	75 37                	jne    c001f844 <__umoddi3+0x54>
c001f80d:	39 df                	cmp    edi,ebx
c001f80f:	76 13                	jbe    c001f824 <__umoddi3+0x34>
c001f811:	89 f0                	mov    eax,esi
c001f813:	f7 f7                	div    edi
c001f815:	89 d0                	mov    eax,edx
c001f817:	31 d2                	xor    edx,edx
c001f819:	83 c4 1c             	add    esp,0x1c
c001f81c:	5b                   	pop    ebx
c001f81d:	5e                   	pop    esi
c001f81e:	5f                   	pop    edi
c001f81f:	5d                   	pop    ebp
c001f820:	c3                   	ret    
c001f821:	8d 76 00             	lea    esi,[esi+0x0]
c001f824:	89 fd                	mov    ebp,edi
c001f826:	85 ff                	test   edi,edi
c001f828:	75 0b                	jne    c001f835 <__umoddi3+0x45>
c001f82a:	b8 01 00 00 00       	mov    eax,0x1
c001f82f:	31 d2                	xor    edx,edx
c001f831:	f7 f7                	div    edi
c001f833:	89 c5                	mov    ebp,eax
c001f835:	89 d8                	mov    eax,ebx
c001f837:	31 d2                	xor    edx,edx
c001f839:	f7 f5                	div    ebp
c001f83b:	89 f0                	mov    eax,esi
c001f83d:	f7 f5                	div    ebp
c001f83f:	89 d0                	mov    eax,edx
c001f841:	eb d4                	jmp    c001f817 <__umoddi3+0x27>
c001f843:	90                   	nop
c001f844:	89 f1                	mov    ecx,esi
c001f846:	39 d8                	cmp    eax,ebx
c001f848:	76 0a                	jbe    c001f854 <__umoddi3+0x64>
c001f84a:	89 f0                	mov    eax,esi
c001f84c:	83 c4 1c             	add    esp,0x1c
c001f84f:	5b                   	pop    ebx
c001f850:	5e                   	pop    esi
c001f851:	5f                   	pop    edi
c001f852:	5d                   	pop    ebp
c001f853:	c3                   	ret    
c001f854:	0f bd e8             	bsr    ebp,eax
c001f857:	83 f5 1f             	xor    ebp,0x1f
c001f85a:	75 1c                	jne    c001f878 <__umoddi3+0x88>
c001f85c:	39 d8                	cmp    eax,ebx
c001f85e:	72 04                	jb     c001f864 <__umoddi3+0x74>
c001f860:	39 f7                	cmp    edi,esi
c001f862:	77 08                	ja     c001f86c <__umoddi3+0x7c>
c001f864:	89 da                	mov    edx,ebx
c001f866:	29 fe                	sub    esi,edi
c001f868:	19 c2                	sbb    edx,eax
c001f86a:	89 f1                	mov    ecx,esi
c001f86c:	89 c8                	mov    eax,ecx
c001f86e:	83 c4 1c             	add    esp,0x1c
c001f871:	5b                   	pop    ebx
c001f872:	5e                   	pop    esi
c001f873:	5f                   	pop    edi
c001f874:	5d                   	pop    ebp
c001f875:	c3                   	ret    
c001f876:	66 90                	xchg   ax,ax
c001f878:	ba 20 00 00 00       	mov    edx,0x20
c001f87d:	29 ea                	sub    edx,ebp
c001f87f:	89 e9                	mov    ecx,ebp
c001f881:	d3 e0                	shl    eax,cl
c001f883:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f887:	89 f8                	mov    eax,edi
c001f889:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f88d:	88 d1                	mov    cl,dl
c001f88f:	d3 e8                	shr    eax,cl
c001f891:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f895:	09 c1                	or     ecx,eax
c001f897:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f89b:	89 e9                	mov    ecx,ebp
c001f89d:	d3 e7                	shl    edi,cl
c001f89f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f8a3:	89 d8                	mov    eax,ebx
c001f8a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8a9:	88 d1                	mov    cl,dl
c001f8ab:	d3 e8                	shr    eax,cl
c001f8ad:	89 c7                	mov    edi,eax
c001f8af:	89 e9                	mov    ecx,ebp
c001f8b1:	d3 e3                	shl    ebx,cl
c001f8b3:	89 f0                	mov    eax,esi
c001f8b5:	88 d1                	mov    cl,dl
c001f8b7:	d3 e8                	shr    eax,cl
c001f8b9:	09 d8                	or     eax,ebx
c001f8bb:	89 e9                	mov    ecx,ebp
c001f8bd:	d3 e6                	shl    esi,cl
c001f8bf:	89 f3                	mov    ebx,esi
c001f8c1:	89 fa                	mov    edx,edi
c001f8c3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f8c7:	89 d1                	mov    ecx,edx
c001f8c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f8cd:	89 c6                	mov    esi,eax
c001f8cf:	89 d7                	mov    edi,edx
c001f8d1:	39 d1                	cmp    ecx,edx
c001f8d3:	72 27                	jb     c001f8fc <__umoddi3+0x10c>
c001f8d5:	74 21                	je     c001f8f8 <__umoddi3+0x108>
c001f8d7:	89 ca                	mov    edx,ecx
c001f8d9:	29 f3                	sub    ebx,esi
c001f8db:	19 fa                	sbb    edx,edi
c001f8dd:	89 d0                	mov    eax,edx
c001f8df:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f8e3:	d3 e0                	shl    eax,cl
c001f8e5:	89 e9                	mov    ecx,ebp
c001f8e7:	d3 eb                	shr    ebx,cl
c001f8e9:	09 d8                	or     eax,ebx
c001f8eb:	d3 ea                	shr    edx,cl
c001f8ed:	83 c4 1c             	add    esp,0x1c
c001f8f0:	5b                   	pop    ebx
c001f8f1:	5e                   	pop    esi
c001f8f2:	5f                   	pop    edi
c001f8f3:	5d                   	pop    ebp
c001f8f4:	c3                   	ret    
c001f8f5:	8d 76 00             	lea    esi,[esi+0x0]
c001f8f8:	39 c3                	cmp    ebx,eax
c001f8fa:	73 db                	jae    c001f8d7 <__umoddi3+0xe7>
c001f8fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f900:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f904:	89 d7                	mov    edi,edx
c001f906:	89 c6                	mov    esi,eax
c001f908:	eb cd                	jmp    c001f8d7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f90a <_init>:
c001f90a:	55                   	push   ebp
c001f90b:	89 e5                	mov    ebp,esp
c001f90d:	e8 e2 07 fe ff       	call   c00000f4 <frame_dummy>
c001f912:	e8 e5 fa ff ff       	call   c001f3fc <__do_global_ctors_aux>
c001f917:	5d                   	pop    ebp
c001f918:	c3                   	ret    

Disassembly of section .fini:

c001f919 <_fini>:
c001f919:	55                   	push   ebp
c001f91a:	89 e5                	mov    ebp,esp
c001f91c:	e8 63 07 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f921:	5d                   	pop    ebp
c001f922:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f924 <Computer::~Computer()>:
c001f924:	83 ec 0c             	sub    esp,0xc
c001f927:	ba 34 0c 02 c0       	mov    edx,0xc0020c34
c001f92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f930:	89 10                	mov    DWORD PTR [eax],edx
c001f932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f936:	83 ec 0c             	sub    esp,0xc
c001f939:	50                   	push   eax
c001f93a:	e8 49 cf fe ff       	call   c000c888 <Device::~Device()>
c001f93f:	83 c4 10             	add    esp,0x10
c001f942:	90                   	nop
c001f943:	83 c4 0c             	add    esp,0xc
c001f946:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f948 <Computer::~Computer()>:
c001f948:	83 ec 0c             	sub    esp,0xc
c001f94b:	83 ec 0c             	sub    esp,0xc
c001f94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f952:	e8 cd ff ff ff       	call   c001f924 <Computer::~Computer()>
c001f957:	83 c4 10             	add    esp,0x10
c001f95a:	83 ec 08             	sub    esp,0x8
c001f95d:	68 70 01 00 00       	push   0x170
c001f962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f966:	e8 ad ae fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f96b:	83 c4 10             	add    esp,0x10
c001f96e:	83 c4 0c             	add    esp,0xc
c001f971:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f972 <idleCommon()>:
c001f972:	83 ec 0c             	sub    esp,0xc
c001f975:	fa                   	cli    
c001f976:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001f97c:	e8 ff 66 ff ff       	call   c0016080 <schedule()>
c001f981:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001f986:	48                   	dec    eax
c001f987:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001f98c:	75 01                	jne    c001f98f <idleCommon()+0x1d>
c001f98e:	fb                   	sti    
c001f98f:	83 c4 0c             	add    esp,0xc
c001f992:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f994 <LinkedList<UnixFile>::~LinkedList()>:
c001f994:	90                   	nop
c001f995:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f996 <LinkedList<UnixFile>::LinkedList()>:
c001f996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f99a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9d6:	90                   	nop
c001f9d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f9d8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f9d8:	83 ec 0c             	sub    esp,0xc
c001f9db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f9e0:	75 10                	jne    c001f9f2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f9e2:	83 ec 0c             	sub    esp,0xc
c001f9e5:	68 48 0e 02 c0       	push   0xc0020e48
c001f9ea:	e8 f0 1b ff ff       	call   c00115df <KePanic(char const*)>
c001f9ef:	83 c4 10             	add    esp,0x10
c001f9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9f8:	85 c0                	test   eax,eax
c001f9fa:	74 34                	je     c001fa30 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa03:	85 c0                	test   eax,eax
c001fa05:	74 29                	je     c001fa30 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa12:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa1d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa2e:	eb 65                	jmp    c001fa95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa36:	85 c0                	test   eax,eax
c001fa38:	75 4b                	jne    c001fa85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa41:	85 c0                	test   eax,eax
c001fa43:	75 40                	jne    c001fa85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa4d:	89 10                	mov    DWORD PTR [eax],edx
c001fa4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa61:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa6f:	85 c0                	test   eax,eax
c001fa71:	74 22                	je     c001fa95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa73:	83 ec 0c             	sub    esp,0xc
c001fa76:	68 6a 0e 02 c0       	push   0xc0020e6a
c001fa7b:	e8 5f 1b ff ff       	call   c00115df <KePanic(char const*)>
c001fa80:	83 c4 10             	add    esp,0x10
c001fa83:	eb 10                	jmp    c001fa95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa85:	83 ec 0c             	sub    esp,0xc
c001fa88:	68 74 0e 02 c0       	push   0xc0020e74
c001fa8d:	e8 4d 1b ff ff       	call   c00115df <KePanic(char const*)>
c001fa92:	83 c4 10             	add    esp,0x10
c001fa95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa99:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa9c:	8d 50 01             	lea    edx,[eax+0x1]
c001fa9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001faa6:	90                   	nop
c001faa7:	83 c4 0c             	add    esp,0xc
c001faaa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001faac <LinkedList<UnixFile>::getFirstElement()>:
c001faac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fab2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fab4 <LinkedList<UnixFile>::removeFirst()>:
c001fab4:	83 ec 0c             	sub    esp,0xc
c001fab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fabb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fabd:	85 c0                	test   eax,eax
c001fabf:	75 12                	jne    c001fad3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fac1:	83 ec 0c             	sub    esp,0xc
c001fac4:	68 80 0e 02 c0       	push   0xc0020e80
c001fac9:	e8 11 1b ff ff       	call   c00115df <KePanic(char const*)>
c001face:	83 c4 10             	add    esp,0x10
c001fad1:	eb 7e                	jmp    c001fb51 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fada:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fadd:	85 c0                	test   eax,eax
c001fadf:	74 10                	je     c001faf1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fae1:	83 ec 0c             	sub    esp,0xc
c001fae4:	68 cb 0e 02 c0       	push   0xc0020ecb
c001fae9:	e8 f1 1a ff ff       	call   c00115df <KePanic(char const*)>
c001faee:	83 c4 10             	add    esp,0x10
c001faf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001faf7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fafa:	85 c0                	test   eax,eax
c001fafc:	75 33                	jne    c001fb31 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb1a:	83 f8 01             	cmp    eax,0x1
c001fb1d:	74 21                	je     c001fb40 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb1f:	83 ec 0c             	sub    esp,0xc
c001fb22:	68 a4 0e 02 c0       	push   0xc0020ea4
c001fb27:	e8 b3 1a ff ff       	call   c00115df <KePanic(char const*)>
c001fb2c:	83 c4 10             	add    esp,0x10
c001fb2f:	eb 0f                	jmp    c001fb40 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb35:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb37:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3e:	89 10                	mov    DWORD PTR [eax],edx
c001fb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb47:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb51:	83 c4 0c             	add    esp,0xc
c001fb54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fb56 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fb56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb5d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fb5e <DriverlessDevice::~DriverlessDevice()>:
c001fb5e:	ba dc 1a 02 c0       	mov    edx,0xc0021adc
c001fb63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb67:	89 10                	mov    DWORD PTR [eax],edx
c001fb69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb6d:	50                   	push   eax
c001fb6e:	e8 15 cd fe ff       	call   c000c888 <Device::~Device()>
c001fb73:	83 c4 04             	add    esp,0x4
c001fb76:	90                   	nop
c001fb77:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fb78 <DriverlessDevice::~DriverlessDevice()>:
c001fb78:	83 ec 0c             	sub    esp,0xc
c001fb7b:	83 ec 0c             	sub    esp,0xc
c001fb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb82:	e8 d7 ff ff ff       	call   c001fb5e <DriverlessDevice::~DriverlessDevice()>
c001fb87:	83 c4 10             	add    esp,0x10
c001fb8a:	83 ec 08             	sub    esp,0x8
c001fb8d:	68 58 01 00 00       	push   0x158
c001fb92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb96:	e8 7d ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fb9b:	83 c4 10             	add    esp,0x10
c001fb9e:	83 c4 0c             	add    esp,0xc
c001fba1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fba2 <LinkedList<Device>::addElement(Device*)>:
c001fba2:	83 ec 0c             	sub    esp,0xc
c001fba5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fbaa:	75 10                	jne    c001fbbc <LinkedList<Device>::addElement(Device*)+0x1a>
c001fbac:	83 ec 0c             	sub    esp,0xc
c001fbaf:	68 48 0e 02 c0       	push   0xc0020e48
c001fbb4:	e8 26 1a ff ff       	call   c00115df <KePanic(char const*)>
c001fbb9:	83 c4 10             	add    esp,0x10
c001fbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbc2:	85 c0                	test   eax,eax
c001fbc4:	74 3a                	je     c001fc00 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fbc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbcd:	85 c0                	test   eax,eax
c001fbcf:	74 2f                	je     c001fc00 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fbd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbdc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fbe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbf4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fbfe:	eb 68                	jmp    c001fc68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc04:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc06:	85 c0                	test   eax,eax
c001fc08:	75 4e                	jne    c001fc58 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc11:	85 c0                	test   eax,eax
c001fc13:	75 43                	jne    c001fc58 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc1d:	89 10                	mov    DWORD PTR [eax],edx
c001fc1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc31:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc42:	85 c0                	test   eax,eax
c001fc44:	74 22                	je     c001fc68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc46:	83 ec 0c             	sub    esp,0xc
c001fc49:	68 6a 0e 02 c0       	push   0xc0020e6a
c001fc4e:	e8 8c 19 ff ff       	call   c00115df <KePanic(char const*)>
c001fc53:	83 c4 10             	add    esp,0x10
c001fc56:	eb 10                	jmp    c001fc68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	68 74 0e 02 c0       	push   0xc0020e74
c001fc60:	e8 7a 19 ff ff       	call   c00115df <KePanic(char const*)>
c001fc65:	83 c4 10             	add    esp,0x10
c001fc68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc6f:	8d 50 01             	lea    edx,[eax+0x1]
c001fc72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc76:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc79:	90                   	nop
c001fc7a:	83 c4 0c             	add    esp,0xc
c001fc7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fc7e <LinkedList<Device>::LinkedList()>:
c001fc7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fca2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcb7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcbe:	90                   	nop
c001fcbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fcc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fcc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcc6:	85 c0                	test   eax,eax
c001fcc8:	75 0e                	jne    c001fcd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fcca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcd1:	85 c0                	test   eax,eax
c001fcd3:	75 03                	jne    c001fcd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fcd5:	b0 01                	mov    al,0x1
c001fcd7:	c3                   	ret    
c001fcd8:	b0 00                	mov    al,0x0
c001fcda:	90                   	nop
c001fcdb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fcdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fce0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fce2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fce4:	83 ec 0c             	sub    esp,0xc
c001fce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fceb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fced:	85 c0                	test   eax,eax
c001fcef:	75 17                	jne    c001fd08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fcf1:	83 ec 0c             	sub    esp,0xc
c001fcf4:	68 80 0e 02 c0       	push   0xc0020e80
c001fcf9:	e8 e1 18 ff ff       	call   c00115df <KePanic(char const*)>
c001fcfe:	83 c4 10             	add    esp,0x10
c001fd01:	e9 96 00 00 00       	jmp    c001fd9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fd06:	66 90                	xchg   ax,ax
c001fd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd12:	85 c0                	test   eax,eax
c001fd14:	0f 95 c0             	setne  al
c001fd17:	0f b6 c0             	movzx  eax,al
c001fd1a:	85 c0                	test   eax,eax
c001fd1c:	74 12                	je     c001fd30 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fd1e:	83 ec 0c             	sub    esp,0xc
c001fd21:	68 cb 0e 02 c0       	push   0xc0020ecb
c001fd26:	e8 b4 18 ff ff       	call   c00115df <KePanic(char const*)>
c001fd2b:	83 c4 10             	add    esp,0x10
c001fd2e:	66 90                	xchg   ax,ax
c001fd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd36:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd39:	85 c0                	test   eax,eax
c001fd3b:	0f 94 c0             	sete   al
c001fd3e:	0f b6 c0             	movzx  eax,al
c001fd41:	85 c0                	test   eax,eax
c001fd43:	74 33                	je     c001fd78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fd45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd61:	83 f8 01             	cmp    eax,0x1
c001fd64:	74 22                	je     c001fd88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd66:	83 ec 0c             	sub    esp,0xc
c001fd69:	68 a4 0e 02 c0       	push   0xc0020ea4
c001fd6e:	e8 6c 18 ff ff       	call   c00115df <KePanic(char const*)>
c001fd73:	83 c4 10             	add    esp,0x10
c001fd76:	eb 10                	jmp    c001fd88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd7e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fd81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd85:	89 10                	mov    DWORD PTR [eax],edx
c001fd87:	90                   	nop
c001fd88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd8f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fd92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd96:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd99:	8d 76 00             	lea    esi,[esi+0x0]
c001fd9c:	83 c4 0c             	add    esp,0xc
c001fd9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fda0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fda0:	83 ec 0c             	sub    esp,0xc
c001fda3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fda8:	75 12                	jne    c001fdbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fdaa:	83 ec 0c             	sub    esp,0xc
c001fdad:	68 48 0e 02 c0       	push   0xc0020e48
c001fdb2:	e8 28 18 ff ff       	call   c00115df <KePanic(char const*)>
c001fdb7:	83 c4 10             	add    esp,0x10
c001fdba:	66 90                	xchg   ax,ax
c001fdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdc2:	85 c0                	test   eax,eax
c001fdc4:	74 36                	je     c001fdfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdcd:	85 c0                	test   eax,eax
c001fdcf:	74 2b                	je     c001fdfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fdd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fddc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fde7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fdea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdf1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fdf8:	eb 6a                	jmp    c001fe64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fdfa:	66 90                	xchg   ax,ax
c001fdfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe00:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe02:	85 c0                	test   eax,eax
c001fe04:	75 4e                	jne    c001fe54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe0d:	85 c0                	test   eax,eax
c001fe0f:	75 43                	jne    c001fe54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe15:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe19:	89 10                	mov    DWORD PTR [eax],edx
c001fe1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe2d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe3b:	85 c0                	test   eax,eax
c001fe3d:	74 25                	je     c001fe64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe3f:	83 ec 0c             	sub    esp,0xc
c001fe42:	68 6a 0e 02 c0       	push   0xc0020e6a
c001fe47:	e8 93 17 ff ff       	call   c00115df <KePanic(char const*)>
c001fe4c:	83 c4 10             	add    esp,0x10
c001fe4f:	eb 13                	jmp    c001fe64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe51:	8d 76 00             	lea    esi,[esi+0x0]
c001fe54:	83 ec 0c             	sub    esp,0xc
c001fe57:	68 74 0e 02 c0       	push   0xc0020e74
c001fe5c:	e8 7e 17 ff ff       	call   c00115df <KePanic(char const*)>
c001fe61:	83 c4 10             	add    esp,0x10
c001fe64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe6b:	8d 50 01             	lea    edx,[eax+0x1]
c001fe6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe75:	90                   	nop
c001fe76:	83 c4 0c             	add    esp,0xc
c001fe79:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fe7c <ACPI::~ACPI()>:
c001fe7c:	83 ec 0c             	sub    esp,0xc
c001fe7f:	ba c4 20 02 c0       	mov    edx,0xc00220c4
c001fe84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe88:	89 10                	mov    DWORD PTR [eax],edx
c001fe8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8e:	83 ec 0c             	sub    esp,0xc
c001fe91:	50                   	push   eax
c001fe92:	e8 f1 c9 fe ff       	call   c000c888 <Device::~Device()>
c001fe97:	83 c4 10             	add    esp,0x10
c001fe9a:	90                   	nop
c001fe9b:	83 c4 0c             	add    esp,0xc
c001fe9e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fea0 <ACPI::~ACPI()>:
c001fea0:	83 ec 0c             	sub    esp,0xc
c001fea3:	83 ec 0c             	sub    esp,0xc
c001fea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feaa:	e8 cd ff ff ff       	call   c001fe7c <ACPI::~ACPI()>
c001feaf:	83 c4 10             	add    esp,0x10
c001feb2:	83 ec 08             	sub    esp,0x8
c001feb5:	68 64 12 00 00       	push   0x1264
c001feba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001febe:	e8 55 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fec3:	83 c4 10             	add    esp,0x10
c001fec6:	83 c4 0c             	add    esp,0xc
c001fec9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fecc <LinkedList<Device>::~LinkedList()>:
c001fecc:	90                   	nop
c001fecd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fed0 <LinkedList<Device>::isEmpty()>:
c001fed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fed4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fed6:	85 c0                	test   eax,eax
c001fed8:	75 0e                	jne    c001fee8 <LinkedList<Device>::isEmpty()+0x18>
c001feda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fede:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fee1:	85 c0                	test   eax,eax
c001fee3:	75 03                	jne    c001fee8 <LinkedList<Device>::isEmpty()+0x18>
c001fee5:	b0 01                	mov    al,0x1
c001fee7:	c3                   	ret    
c001fee8:	b0 00                	mov    al,0x0
c001feea:	90                   	nop
c001feeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001feec <LinkedList<Device>::getFirstElement()>:
c001feec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fef0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fef2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fef4 <LinkedList<Device>::removeFirst()>:
c001fef4:	83 ec 0c             	sub    esp,0xc
c001fef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fefd:	85 c0                	test   eax,eax
c001feff:	75 17                	jne    c001ff18 <LinkedList<Device>::removeFirst()+0x24>
c001ff01:	83 ec 0c             	sub    esp,0xc
c001ff04:	68 80 0e 02 c0       	push   0xc0020e80
c001ff09:	e8 d1 16 ff ff       	call   c00115df <KePanic(char const*)>
c001ff0e:	83 c4 10             	add    esp,0x10
c001ff11:	e9 92 00 00 00       	jmp    c001ffa8 <LinkedList<Device>::removeFirst()+0xb4>
c001ff16:	66 90                	xchg   ax,ax
c001ff18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff1f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff25:	85 c0                	test   eax,eax
c001ff27:	74 13                	je     c001ff3c <LinkedList<Device>::removeFirst()+0x48>
c001ff29:	83 ec 0c             	sub    esp,0xc
c001ff2c:	68 cb 0e 02 c0       	push   0xc0020ecb
c001ff31:	e8 a9 16 ff ff       	call   c00115df <KePanic(char const*)>
c001ff36:	83 c4 10             	add    esp,0x10
c001ff39:	8d 76 00             	lea    esi,[esi+0x0]
c001ff3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff42:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff48:	85 c0                	test   eax,eax
c001ff4a:	75 34                	jne    c001ff80 <LinkedList<Device>::removeFirst()+0x8c>
c001ff4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff65:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff68:	83 f8 01             	cmp    eax,0x1
c001ff6b:	74 27                	je     c001ff94 <LinkedList<Device>::removeFirst()+0xa0>
c001ff6d:	83 ec 0c             	sub    esp,0xc
c001ff70:	68 a4 0e 02 c0       	push   0xc0020ea4
c001ff75:	e8 65 16 ff ff       	call   c00115df <KePanic(char const*)>
c001ff7a:	83 c4 10             	add    esp,0x10
c001ff7d:	eb 15                	jmp    c001ff94 <LinkedList<Device>::removeFirst()+0xa0>
c001ff7f:	90                   	nop
c001ff80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff86:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ff8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff90:	89 10                	mov    DWORD PTR [eax],edx
c001ff92:	66 90                	xchg   ax,ax
c001ff94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff9b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ff9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffa5:	8d 76 00             	lea    esi,[esi+0x0]
c001ffa8:	83 c4 0c             	add    esp,0xc
c001ffab:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ffac <CPU::~CPU()>:
c001ffac:	83 ec 0c             	sub    esp,0xc
c001ffaf:	ba 6c 22 02 c0       	mov    edx,0xc002226c
c001ffb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb8:	89 10                	mov    DWORD PTR [eax],edx
c001ffba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffbe:	83 ec 0c             	sub    esp,0xc
c001ffc1:	50                   	push   eax
c001ffc2:	e8 c1 c8 fe ff       	call   c000c888 <Device::~Device()>
c001ffc7:	83 c4 10             	add    esp,0x10
c001ffca:	90                   	nop
c001ffcb:	83 c4 0c             	add    esp,0xc
c001ffce:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ffd0 <CPU::~CPU()>:
c001ffd0:	83 ec 0c             	sub    esp,0xc
c001ffd3:	83 ec 0c             	sub    esp,0xc
c001ffd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffda:	e8 cd ff ff ff       	call   c001ffac <CPU::~CPU()>
c001ffdf:	83 c4 10             	add    esp,0x10
c001ffe2:	83 ec 08             	sub    esp,0x8
c001ffe5:	68 94 11 00 00       	push   0x1194
c001ffea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffee:	e8 25 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fff3:	83 c4 10             	add    esp,0x10
c001fff6:	83 c4 0c             	add    esp,0xc
c001fff9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fffc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fffc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020000:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020003:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020004 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020004:	90                   	nop
c0020005:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020008 <ThreadControlBlock::ThreadControlBlock()>:
c0020008:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002000c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020013:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020017:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002001e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020022:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020029:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002002d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020038:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002003f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020043:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020047:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002004b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002004f:	90                   	nop
c0020050:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020054 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020054:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020058:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002005e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020069:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002006d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020078:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002007e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020082:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020089:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002008d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020094:	90                   	nop
c0020095:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020096 <PCI::~PCI()>:
c0020096:	83 ec 0c             	sub    esp,0xc
c0020099:	ba 4c 31 02 c0       	mov    edx,0xc002314c
c002009e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a2:	89 10                	mov    DWORD PTR [eax],edx
c00200a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a8:	83 ec 0c             	sub    esp,0xc
c00200ab:	50                   	push   eax
c00200ac:	e8 6f c2 fe ff       	call   c000c320 <Bus::~Bus()>
c00200b1:	83 c4 10             	add    esp,0x10
c00200b4:	90                   	nop
c00200b5:	83 c4 0c             	add    esp,0xc
c00200b8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00200ba <PCI::~PCI()>:
c00200ba:	83 ec 0c             	sub    esp,0xc
c00200bd:	83 ec 0c             	sub    esp,0xc
c00200c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200c4:	e8 cd ff ff ff       	call   c0020096 <PCI::~PCI()>
c00200c9:	83 c4 10             	add    esp,0x10
c00200cc:	83 ec 08             	sub    esp,0x8
c00200cf:	68 5c 01 00 00       	push   0x15c
c00200d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200d8:	e8 3b a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00200dd:	83 c4 10             	add    esp,0x10
c00200e0:	83 c4 0c             	add    esp,0xc
c00200e3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00200e4 <IDE::~IDE()>:
c00200e4:	83 ec 0c             	sub    esp,0xc
c00200e7:	ba 00 32 02 c0       	mov    edx,0xc0023200
c00200ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f0:	89 10                	mov    DWORD PTR [eax],edx
c00200f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f6:	83 ec 0c             	sub    esp,0xc
c00200f9:	50                   	push   eax
c00200fa:	e8 01 cc fe ff       	call   c000cd00 <HardDiskController::~HardDiskController()>
c00200ff:	83 c4 10             	add    esp,0x10
c0020102:	90                   	nop
c0020103:	83 c4 0c             	add    esp,0xc
c0020106:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020108 <IDE::~IDE()>:
c0020108:	83 ec 0c             	sub    esp,0xc
c002010b:	83 ec 0c             	sub    esp,0xc
c002010e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020112:	e8 cd ff ff ff       	call   c00200e4 <IDE::~IDE()>
c0020117:	83 c4 10             	add    esp,0x10
c002011a:	83 ec 08             	sub    esp,0x8
c002011d:	68 70 02 00 00       	push   0x270
c0020122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020126:	e8 ed a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002012b:	83 c4 10             	add    esp,0x10
c002012e:	83 c4 0c             	add    esp,0xc
c0020131:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020132 <SATABus::~SATABus()>:
c0020132:	83 ec 0c             	sub    esp,0xc
c0020135:	ba 50 32 02 c0       	mov    edx,0xc0023250
c002013a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002013e:	89 10                	mov    DWORD PTR [eax],edx
c0020140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020144:	83 ec 0c             	sub    esp,0xc
c0020147:	50                   	push   eax
c0020148:	e8 b3 cb fe ff       	call   c000cd00 <HardDiskController::~HardDiskController()>
c002014d:	83 c4 10             	add    esp,0x10
c0020150:	90                   	nop
c0020151:	83 c4 0c             	add    esp,0xc
c0020154:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020156 <SATABus::~SATABus()>:
c0020156:	83 ec 0c             	sub    esp,0xc
c0020159:	83 ec 0c             	sub    esp,0xc
c002015c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020160:	e8 cd ff ff ff       	call   c0020132 <SATABus::~SATABus()>
c0020165:	83 c4 10             	add    esp,0x10
c0020168:	83 ec 08             	sub    esp,0x8
c002016b:	68 64 01 00 00       	push   0x164
c0020170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020174:	e8 9f a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020179:	83 c4 10             	add    esp,0x10
c002017c:	83 c4 0c             	add    esp,0xc
c002017f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020180 <ATA::~ATA()>:
c0020180:	83 ec 0c             	sub    esp,0xc
c0020183:	ba 90 32 02 c0       	mov    edx,0xc0023290
c0020188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002018c:	89 10                	mov    DWORD PTR [eax],edx
c002018e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020192:	83 ec 0c             	sub    esp,0xc
c0020195:	50                   	push   eax
c0020196:	e8 47 cc fe ff       	call   c000cde2 <PhysicalDisk::~PhysicalDisk()>
c002019b:	83 c4 10             	add    esp,0x10
c002019e:	90                   	nop
c002019f:	83 c4 0c             	add    esp,0xc
c00201a2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00201a4 <ATA::~ATA()>:
c00201a4:	83 ec 0c             	sub    esp,0xc
c00201a7:	83 ec 0c             	sub    esp,0xc
c00201aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201ae:	e8 cd ff ff ff       	call   c0020180 <ATA::~ATA()>
c00201b3:	83 c4 10             	add    esp,0x10
c00201b6:	83 ec 08             	sub    esp,0x8
c00201b9:	68 7c 01 00 00       	push   0x17c
c00201be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201c2:	e8 51 a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00201c7:	83 c4 10             	add    esp,0x10
c00201ca:	83 c4 0c             	add    esp,0xc
c00201cd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00201ce <ATAPI::~ATAPI()>:
c00201ce:	83 ec 0c             	sub    esp,0xc
c00201d1:	ba d8 32 02 c0       	mov    edx,0xc00232d8
c00201d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201da:	89 10                	mov    DWORD PTR [eax],edx
c00201dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201e0:	83 ec 0c             	sub    esp,0xc
c00201e3:	50                   	push   eax
c00201e4:	e8 f9 cb fe ff       	call   c000cde2 <PhysicalDisk::~PhysicalDisk()>
c00201e9:	83 c4 10             	add    esp,0x10
c00201ec:	90                   	nop
c00201ed:	83 c4 0c             	add    esp,0xc
c00201f0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00201f2 <ATAPI::~ATAPI()>:
c00201f2:	83 ec 0c             	sub    esp,0xc
c00201f5:	83 ec 0c             	sub    esp,0xc
c00201f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201fc:	e8 cd ff ff ff       	call   c00201ce <ATAPI::~ATAPI()>
c0020201:	83 c4 10             	add    esp,0x10
c0020204:	83 ec 08             	sub    esp,0x8
c0020207:	68 84 01 00 00       	push   0x184
c002020c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020210:	e8 03 a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020215:	83 c4 10             	add    esp,0x10
c0020218:	83 c4 0c             	add    esp,0xc
c002021b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002021c <SATA::~SATA()>:
c002021c:	83 ec 0c             	sub    esp,0xc
c002021f:	ba 8c 33 02 c0       	mov    edx,0xc002338c
c0020224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020228:	89 10                	mov    DWORD PTR [eax],edx
c002022a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002022e:	83 ec 0c             	sub    esp,0xc
c0020231:	50                   	push   eax
c0020232:	e8 ab cb fe ff       	call   c000cde2 <PhysicalDisk::~PhysicalDisk()>
c0020237:	83 c4 10             	add    esp,0x10
c002023a:	90                   	nop
c002023b:	83 c4 0c             	add    esp,0xc
c002023e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020240 <SATA::~SATA()>:
c0020240:	83 ec 0c             	sub    esp,0xc
c0020243:	83 ec 0c             	sub    esp,0xc
c0020246:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002024a:	e8 cd ff ff ff       	call   c002021c <SATA::~SATA()>
c002024f:	83 c4 10             	add    esp,0x10
c0020252:	83 ec 08             	sub    esp,0x8
c0020255:	68 7c 01 00 00       	push   0x17c
c002025a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002025e:	e8 b5 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020263:	83 c4 10             	add    esp,0x10
c0020266:	83 c4 0c             	add    esp,0xc
c0020269:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002026a <SATAPI::~SATAPI()>:
c002026a:	83 ec 0c             	sub    esp,0xc
c002026d:	ba b0 34 02 c0       	mov    edx,0xc00234b0
c0020272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020276:	89 10                	mov    DWORD PTR [eax],edx
c0020278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002027c:	83 ec 0c             	sub    esp,0xc
c002027f:	50                   	push   eax
c0020280:	e8 5d cb fe ff       	call   c000cde2 <PhysicalDisk::~PhysicalDisk()>
c0020285:	83 c4 10             	add    esp,0x10
c0020288:	90                   	nop
c0020289:	83 c4 0c             	add    esp,0xc
c002028c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002028e <SATAPI::~SATAPI()>:
c002028e:	83 ec 0c             	sub    esp,0xc
c0020291:	83 ec 0c             	sub    esp,0xc
c0020294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020298:	e8 cd ff ff ff       	call   c002026a <SATAPI::~SATAPI()>
c002029d:	83 c4 10             	add    esp,0x10
c00202a0:	83 ec 08             	sub    esp,0x8
c00202a3:	68 84 01 00 00       	push   0x184
c00202a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ac:	e8 67 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00202b1:	83 c4 10             	add    esp,0x10
c00202b4:	83 c4 0c             	add    esp,0xc
c00202b7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00202b8 <IOAPIC::~IOAPIC()>:
c00202b8:	83 ec 0c             	sub    esp,0xc
c00202bb:	ba f0 34 02 c0       	mov    edx,0xc00234f0
c00202c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c4:	89 10                	mov    DWORD PTR [eax],edx
c00202c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ca:	83 ec 0c             	sub    esp,0xc
c00202cd:	50                   	push   eax
c00202ce:	e8 b5 c5 fe ff       	call   c000c888 <Device::~Device()>
c00202d3:	83 c4 10             	add    esp,0x10
c00202d6:	90                   	nop
c00202d7:	83 c4 0c             	add    esp,0xc
c00202da:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00202dc <IOAPIC::~IOAPIC()>:
c00202dc:	83 ec 0c             	sub    esp,0xc
c00202df:	83 ec 0c             	sub    esp,0xc
c00202e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202e6:	e8 cd ff ff ff       	call   c00202b8 <IOAPIC::~IOAPIC()>
c00202eb:	83 c4 10             	add    esp,0x10
c00202ee:	83 ec 08             	sub    esp,0x8
c00202f1:	68 68 01 00 00       	push   0x168
c00202f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202fa:	e8 19 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00202ff:	83 c4 10             	add    esp,0x10
c0020302:	83 c4 0c             	add    esp,0xc
c0020305:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020308 <APICTimer::~APICTimer()>:
c0020308:	83 ec 0c             	sub    esp,0xc
c002030b:	ba 38 35 02 c0       	mov    edx,0xc0023538
c0020310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020314:	89 10                	mov    DWORD PTR [eax],edx
c0020316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002031a:	83 ec 0c             	sub    esp,0xc
c002031d:	50                   	push   eax
c002031e:	e8 31 e0 fe ff       	call   c000e354 <Timer::~Timer()>
c0020323:	83 c4 10             	add    esp,0x10
c0020326:	90                   	nop
c0020327:	83 c4 0c             	add    esp,0xc
c002032a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002032c <APICTimer::~APICTimer()>:
c002032c:	83 ec 0c             	sub    esp,0xc
c002032f:	83 ec 0c             	sub    esp,0xc
c0020332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020336:	e8 cd ff ff ff       	call   c0020308 <APICTimer::~APICTimer()>
c002033b:	83 c4 10             	add    esp,0x10
c002033e:	83 ec 08             	sub    esp,0x8
c0020341:	68 60 01 00 00       	push   0x160
c0020346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002034a:	e8 c9 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002034f:	83 c4 10             	add    esp,0x10
c0020352:	83 c4 0c             	add    esp,0xc
c0020355:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020358 <PIT::~PIT()>:
c0020358:	83 ec 0c             	sub    esp,0xc
c002035b:	ba 88 35 02 c0       	mov    edx,0xc0023588
c0020360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020364:	89 10                	mov    DWORD PTR [eax],edx
c0020366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002036a:	83 ec 0c             	sub    esp,0xc
c002036d:	50                   	push   eax
c002036e:	e8 e1 df fe ff       	call   c000e354 <Timer::~Timer()>
c0020373:	83 c4 10             	add    esp,0x10
c0020376:	90                   	nop
c0020377:	83 c4 0c             	add    esp,0xc
c002037a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002037c <PIT::~PIT()>:
c002037c:	83 ec 0c             	sub    esp,0xc
c002037f:	83 ec 0c             	sub    esp,0xc
c0020382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020386:	e8 cd ff ff ff       	call   c0020358 <PIT::~PIT()>
c002038b:	83 c4 10             	add    esp,0x10
c002038e:	83 ec 08             	sub    esp,0x8
c0020391:	68 5c 01 00 00       	push   0x15c
c0020396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002039a:	e8 79 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002039f:	83 c4 10             	add    esp,0x10
c00203a2:	83 c4 0c             	add    esp,0xc
c00203a5:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 9d 23 02 c0       	mov    esi,0xc002239d
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be b9 23 02 c0       	mov    esi,0xc00223b9
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
