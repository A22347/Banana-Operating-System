
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 75 f8 00 00       	call   c000f895 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 43 87 02 00       	call   c0028768 <_init>
c0000025:	c3                   	ret    
c0000026:	bb bc 93 02 c0       	mov    ebx,0xc00293bc
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb c8 93 02 c0    	cmp    ebx,0xc00293c8
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 d4 02 c0       	mov    eax,0xc002d4b8
c0000049:	3d b8 d4 02 c0       	cmp    eax,0xc002d4b8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 d4 02 c0       	push   0xc002d4b8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 d4 02 c0       	mov    eax,0xc002d4b8
c0000075:	2d b8 d4 02 c0       	sub    eax,0xc002d4b8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 d4 02 c0       	push   0xc002d4b8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e8 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dae8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d0 93 02 c0       	mov    ebx,0xc00293d0
c00000bb:	81 eb cc 93 02 c0    	sub    ebx,0xc00293cc
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be cc 93 02 c0       	mov    esi,0xc00293cc
c00000ca:	a1 ec da 02 c0       	mov    eax,ds:0xc002daec
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ec da 02 c0       	mov    ds:0xc002daec,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ec da 02 c0       	mov    eax,ds:0xc002daec
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 d4 02 c0       	push   0xc002d4b8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e8 da 02 c0 01 	mov    BYTE PTR ds:0xc002dae8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f0 da 02 c0       	push   0xc002daf0
c000012c:	68 b8 d4 02 c0       	push   0xc002d4b8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 cd d0 01 00       	call   c001d470 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 e2 21 01 00       	call   c001259d <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 ab d0 01 00       	call   c001d470 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 53 d5 01 00       	call   c001d937 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 78 db 01 00       	call   c001df65 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 30 df 02 c0 	lgdtd  ds:0xc002df30
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 4b 3f 01 00       	call   c001452d <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 15 e1 00 00       	jmp    c000e760 <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 08 db 02 c0       	mov    ds:0xc002db08,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 08 db 02 c0    	mov    DWORD PTR ds:0xc002db08,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 08 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db08
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 e0 93 02 c0 02 	test   BYTE PTR [edx-0x3ffd6c20],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 e0 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6c20],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 e0 93 02 c0 08 	test   BYTE PTR [edx-0x3ffd6c20],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 e0 93 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6c20],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 e0 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6c20],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 20 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db20
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 20 db 02 c0    	mov    DWORD PTR ds:0xc002db20,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 24 db 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd24dc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 24 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24dc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 20 db 02 c0    	mov    DWORD PTR ds:0xc002db20,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 4c db 02 c0    	cmp    DWORD PTR ds:0xc002db4c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 5c db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db5c
c0000e38:	c7 42 0c 54 db 02 c0 	mov    DWORD PTR [edx+0xc],0xc002db54
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 5c db 02 c0    	mov    DWORD PTR ds:0xc002db5c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 4c db 02 c0    	mov    DWORD PTR ds:0xc002db4c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 20 db 02 c0 02 	test   BYTE PTR ds:0xc002db20,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 20 db 02 c0       	mov    eax,0xc002db20
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 15 e7 00 00       	call   c000f62e <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 57 e6 00 00       	call   c000f62e <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 41 e6 00 00       	call   c000f62e <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 1d e6 00 00       	call   c000f62e <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 20 db 02 c0    	mov    edi,DWORD PTR ds:0xc002db20
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 20 db 02 c0       	mov    eax,0xc002db20
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 24 db 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd24dc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 24 db 02 c0 	mov    DWORD PTR [edx*4-0x3ffd24dc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 54 db 02 c0 	lea    edx,[eax*8-0x3ffd24ac]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 20 db 02 c0       	mov    eax,0xc002db20
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 60 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db60
c00011ba:	81 fb 54 db 02 c0    	cmp    ebx,0xc002db54
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 54 db 02 c0       	cmp    eax,0xc002db54
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 50 db 02 c0    	cmp    DWORD PTR ds:0xc002db50,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 5c db 02 c0       	mov    ds:0xc002db5c,eax
c00011f6:	a3 60 db 02 c0       	mov    ds:0xc002db60,eax
c00011fb:	a3 50 db 02 c0       	mov    ds:0xc002db50,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 54 db 02 c0 	mov    DWORD PTR [eax+0x8],0xc002db54
c0001209:	c7 40 0c 54 db 02 c0 	mov    DWORD PTR [eax+0xc],0xc002db54
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 60 db 02 c0       	mov    ds:0xc002db60,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 54 db 02 c0 	mov    DWORD PTR [eax+0x8],0xc002db54
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 18 db 02 c0 	lea    ebp,[edx*4-0x3ffd24e8]
c000125a:	8b 14 95 20 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd24e0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 20 db 02 c0 	lea    ecx,[edx*4-0x3ffd24e0]
c0001275:	8b 14 95 20 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd24e0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 54 de 02 c0 	or     DWORD PTR [edi*4-0x3ffd21ac],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 54 db 02 c0 	lea    eax,[eax*8-0x3ffd24ac]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 5c db 02 c0    	mov    DWORD PTR ds:0xc002db5c,ecx
c000132f:	89 0d 60 db 02 c0    	mov    DWORD PTR ds:0xc002db60,ecx
c0001335:	c7 41 08 54 db 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002db54
c000133c:	c7 41 0c 54 db 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002db54
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 4c db 02 c0 	lea    edx,[ecx*8-0x3ffd24b4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 54 de 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd21ac]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 54 de 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd21ac]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 4c db 02 c0 	lea    edx,[eax*4-0x3ffd24b4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 54 de 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd21ac],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 5c db 02 c0    	mov    DWORD PTR ds:0xc002db5c,edi
c0001402:	89 3d 60 db 02 c0    	mov    DWORD PTR ds:0xc002db60,edi
c0001408:	c7 47 08 54 db 02 c0 	mov    DWORD PTR [edi+0x8],0xc002db54
c000140f:	c7 47 0c 54 db 02 c0 	mov    DWORD PTR [edi+0xc],0xc002db54
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 50 db 02 c0    	mov    DWORD PTR ds:0xc002db50,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 4c db 02 c0       	mov    eax,ds:0xc002db4c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 4c db 02 c0    	mov    DWORD PTR ds:0xc002db4c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 20 db 02 c0       	mov    edx,0xc002db20
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 20 db 02 c0 00 	cmp    DWORD PTR ds:0xc002db20,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 20 db 02 c0       	mov    eax,0xc002db20
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 74 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de74
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 74 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de74,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 74 de 02 c0    	mov    DWORD PTR ds:0xc002de74,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 4c db 02 c0    	cmp    DWORD PTR ds:0xc002db4c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 4c db 02 c0    	mov    DWORD PTR ds:0xc002db4c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 20 db 02 c0 00 	cmp    DWORD PTR ds:0xc002db20,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 20 db 02 c0       	mov    eax,0xc002db20
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 7c de 02 c0    	push   DWORD PTR ds:0xc002de7c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 20 db 02 c0 00 	cmp    DWORD PTR ds:0xc002db20,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 20 db 02 c0       	mov    eax,0xc002db20
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 7c de 02 c0       	mov    eax,ds:0xc002de7c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 20 db 02 c0       	mov    eax,0xc002db20
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 4c db 02 c0 00 	cmp    DWORD PTR ds:0xc002db4c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 20 db 02 c0       	mov    eax,0xc002db20
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 4c db 02 c0       	mov    eax,ds:0xc002db4c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 24 db 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd24dc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 54 db 02 c0       	mov    eax,0xc002db54
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 4c de 02 c0       	cmp    eax,0xc002de4c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 88 de 02 c0       	mov    eax,ds:0xc002de88
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 70 de 02 c0    	mov    esi,DWORD PTR ds:0xc002de70
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 84 de 02 c0    	mov    esi,DWORD PTR ds:0xc002de84
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 94 de 02 c0    	mov    esi,DWORD PTR ds:0xc002de94
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 20 db 02 c0       	mov    eax,0xc002db20
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 e4 94 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6b1c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 20 db 02 c0       	mov    ds:0xc002db20,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 64 de 02 c0    	mov    DWORD PTR ds:0xc002de64,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 68 de 02 c0    	mov    DWORD PTR ds:0xc002de68,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 6c de 02 c0    	mov    DWORD PTR ds:0xc002de6c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 74 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de74,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 c0 f5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0a40]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 e2 ee 01 00       	jmp    c0020ad4 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 c0 f5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0a40]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 13 ef 01 00       	jmp    c0020b1b <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 c0 f5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0a40]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 3b ef 01 00       	jmp    c0020b62 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 ba 4b 02 00       	call   c0026ac4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 00 96 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6a00]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 00 96 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6a00]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 00 95 02 c0       	mov    edx,0xc0029500
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 20 96 02 c0       	mov    edx,0xc0029620
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba c0 c3 02 c0       	mov    edx,0xc002c3c0
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 2c 96 02 c0       	mov    edx,0xc002962c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 10 96 02 c0       	mov    edx,0xc0029610
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 c0 de 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2140]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 a0 de 02 c0    	mov    ax,ds:0xc002dea0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 a0 de 02 c0    	mov    ds:0xc002dea0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 b7 39 02 00       	call   c0026ac4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 6b 50 00 00       	call   c0008690 <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 fd 4f 00 00       	call   c00086a6 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 32 96 02 c0       	mov    eax,0xc0029632
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 7e 48 00 00       	call   c00086bd <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 80 95 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6a80]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 3b 96 02 c0       	mov    eax,0xc002963b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 54 48 00 00       	call   c00087b9 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 00 96 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6a00]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 30 47 00 00       	call   c00087b9 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 17 47 00 00       	call   c00087b9 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 44 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 31 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 82 23 02 00       	call   c0026ac4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 10 96 02 c0       	mov    edx,0xc0029610
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 00 95 02 c0       	mov    edx,0xc0029500
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 10 95 02 c0       	mov    edx,0xc0029510
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 7c 3a 00 00       	call   c000874d <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 c0 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2140]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 c0 de 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2140],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 d9 36 00 00       	call   c0008690 <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 2a 33 00 00       	call   c00086a6 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 26 2d 00 00       	call   c0008690 <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 65 2c 00 00       	call   c00086a6 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 49 0d 02 00       	call   c0026ac4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 2f 0d 02 00       	call   c0026ac4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 c1 26 00 00       	call   c0008690 <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 38 26 00 00       	call   c00086a6 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 a4 25 00 00       	call   c0008690 <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 66 25 00 00       	call   c00086a6 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 11 25 00 00       	call   c0008690 <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 d5 24 00 00       	call   c00086a6 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 b6 21 00 00       	call   c0008690 <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 93 20 00 00       	call   c00086a6 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 2e 20 00 00       	call   c0008690 <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 c5 1f 00 00       	call   c00086a6 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 f9 1d 00 00       	call   c0008690 <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 76 1b 00 00       	call   c00086a6 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 11 1b 00 00       	call   c0008690 <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 94 1a 00 00       	call   c00086a6 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 38 1a 00 00       	call   c0008690 <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 b5 19 00 00       	call   c00086a6 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 39 19 00 00       	call   c000874d <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 57 95 02 c0       	mov    eax,0xc0029557
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 cd 17 00 00       	call   c00087b9 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 c4 16 00 00       	call   c00086bd <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 50 95 02 c0       	mov    eax,0xc0029550
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_expand>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 3c             	sub    esp,0x3c
c0007160:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007164:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007168:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000716c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007170:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007174:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007178:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000717c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007180:	89 d8                	mov    eax,ebx
c0007182:	e8 a3 b1 ff ff       	call   c000232a <validate>
c0007187:	89 c5                	mov    ebp,eax
c0007189:	85 c0                	test   eax,eax
c000718b:	0f 85 f4 01 00 00    	jne    c0007385 <f_expand+0x22c>
c0007191:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007195:	85 ed                	test   ebp,ebp
c0007197:	0f 85 e8 01 00 00    	jne    c0007385 <f_expand+0x22c>
c000719d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071a1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00071a5:	75 0a                	jne    c00071b1 <f_expand+0x58>
c00071a7:	bd 07 00 00 00       	mov    ebp,0x7
c00071ac:	e9 d4 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c00071b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00071b4:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00071b7:	75 ee                	jne    c00071a7 <f_expand+0x4e>
c00071b9:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00071bd:	74 e8                	je     c00071a7 <f_expand+0x4e>
c00071bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00071c3:	8a 0e                	mov    cl,BYTE PTR [esi]
c00071c5:	80 f9 04             	cmp    cl,0x4
c00071c8:	74 07                	je     c00071d1 <f_expand+0x78>
c00071ca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00071cf:	77 d6                	ja     c00071a7 <f_expand+0x4e>
c00071d1:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00071d5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00071d9:	c1 e0 09             	shl    eax,0x9
c00071dc:	8d 50 ff             	lea    edx,[eax-0x1]
c00071df:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c00071e3:	0f 95 c2             	setne  dl
c00071e6:	0f b6 d2             	movzx  edx,dl
c00071e9:	89 d7                	mov    edi,edx
c00071eb:	31 d2                	xor    edx,edx
c00071ed:	52                   	push   edx
c00071ee:	50                   	push   eax
c00071ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f7:	e8 c8 f8 01 00       	call   c0026ac4 <__udivdi3>
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	01 f8                	add    eax,edi
c0007201:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007205:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000720c:	83 ff 01             	cmp    edi,0x1
c000720f:	76 05                	jbe    c0007216 <f_expand+0xbd>
c0007211:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007214:	77 05                	ja     c000721b <f_expand+0xc2>
c0007216:	bf 02 00 00 00       	mov    edi,0x2
c000721b:	80 f9 04             	cmp    cl,0x4
c000721e:	75 19                	jne    c0007239 <f_expand+0xe0>
c0007220:	89 f0                	mov    eax,esi
c0007222:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007226:	89 fa                	mov    edx,edi
c0007228:	e8 f3 b9 ff ff       	call   c0002c20 <find_bitmap>
c000722d:	89 c6                	mov    esi,eax
c000722f:	85 c0                	test   eax,eax
c0007231:	0f 84 70 ff ff ff    	je     c00071a7 <f_expand+0x4e>
c0007237:	eb 7f                	jmp    c00072b8 <f_expand+0x15f>
c0007239:	89 fe                	mov    esi,edi
c000723b:	89 f9                	mov    ecx,edi
c000723d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007245:	89 ca                	mov    edx,ecx
c0007247:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000724b:	89 d8                	mov    eax,ebx
c000724d:	e8 3b bd ff ff       	call   c0002f8d <get_fat>
c0007252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000725a:	41                   	inc    ecx
c000725b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000725f:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007262:	77 05                	ja     c0007269 <f_expand+0x110>
c0007264:	b9 02 00 00 00       	mov    ecx,0x2
c0007269:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000726e:	74 3e                	je     c00072ae <f_expand+0x155>
c0007270:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0007275:	75 0a                	jne    c0007281 <f_expand+0x128>
c0007277:	bd 01 00 00 00       	mov    ebp,0x1
c000727c:	e9 04 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c0007281:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007286:	75 13                	jne    c000729b <f_expand+0x142>
c0007288:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000728c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007290:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0007294:	75 0f                	jne    c00072a5 <f_expand+0x14c>
c0007296:	e9 ce 00 00 00       	jmp    c0007369 <f_expand+0x210>
c000729b:	89 ce                	mov    esi,ecx
c000729d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072a5:	39 f9                	cmp    ecx,edi
c00072a7:	75 9c                	jne    c0007245 <f_expand+0xec>
c00072a9:	e9 f9 fe ff ff       	jmp    c00071a7 <f_expand+0x4e>
c00072ae:	bd 02 00 00 00       	mov    ebp,0x2
c00072b3:	e9 cd 00 00 00       	jmp    c0007385 <f_expand+0x22c>
c00072b8:	83 f8 ff             	cmp    eax,0xffffffff
c00072bb:	74 ba                	je     c0007277 <f_expand+0x11e>
c00072bd:	8d 7e ff             	lea    edi,[esi-0x1]
c00072c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00072c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00072c8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072cd:	74 51                	je     c0007320 <f_expand+0x1c7>
c00072cf:	83 ec 0c             	sub    esp,0xc
c00072d2:	89 f2                	mov    edx,esi
c00072d4:	6a 01                	push   0x1
c00072d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00072da:	e8 f4 b9 ff ff       	call   c0002cd3 <change_bitmap>
c00072df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00072e3:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c00072e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00072eb:	83 c4 10             	add    esp,0x10
c00072ee:	85 c0                	test   eax,eax
c00072f0:	74 2e                	je     c0007320 <f_expand+0x1c7>
c00072f2:	eb 71                	jmp    c0007365 <f_expand+0x20c>
c00072f4:	83 c9 ff             	or     ecx,0xffffffff
c00072f7:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00072fc:	74 03                	je     c0007301 <f_expand+0x1a8>
c00072fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007301:	89 fa                	mov    edx,edi
c0007303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007307:	e8 7c ba ff ff       	call   c0002d88 <put_fat>
c000730c:	85 c0                	test   eax,eax
c000730e:	75 55                	jne    c0007365 <f_expand+0x20c>
c0007310:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007314:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007318:	47                   	inc    edi
c0007319:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000731e:	75 d4                	jne    c00072f4 <f_expand+0x19b>
c0007320:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007328:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000732d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007330:	74 53                	je     c0007385 <f_expand+0x22c>
c0007332:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007335:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007339:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c000733d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007341:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007345:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007348:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000734b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000734e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007351:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007354:	39 ca                	cmp    edx,ecx
c0007356:	77 2d                	ja     c0007385 <f_expand+0x22c>
c0007358:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c000735c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007360:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007363:	eb 20                	jmp    c0007385 <f_expand+0x22c>
c0007365:	89 c5                	mov    ebp,eax
c0007367:	eb 1c                	jmp    c0007385 <f_expand+0x22c>
c0007369:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000736e:	74 0c                	je     c000737c <f_expand+0x223>
c0007370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007374:	89 f7                	mov    edi,esi
c0007376:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000737a:	eb 9d                	jmp    c0007319 <f_expand+0x1c0>
c000737c:	8d 46 ff             	lea    eax,[esi-0x1]
c000737f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007383:	eb 9b                	jmp    c0007320 <f_expand+0x1c7>
c0007385:	83 c4 3c             	add    esp,0x3c
c0007388:	89 e8                	mov    eax,ebp
c000738a:	5b                   	pop    ebx
c000738b:	5e                   	pop    esi
c000738c:	5f                   	pop    edi
c000738d:	5d                   	pop    ebp
c000738e:	c3                   	ret    

c000738f <f_forward>:
c000738f:	55                   	push   ebp
c0007390:	57                   	push   edi
c0007391:	56                   	push   esi
c0007392:	53                   	push   ebx
c0007393:	83 ec 2c             	sub    esp,0x2c
c0007396:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000739a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000739e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073a4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00073a8:	89 d8                	mov    eax,ebx
c00073aa:	e8 7b af ff ff       	call   c000232a <validate>
c00073af:	89 c5                	mov    ebp,eax
c00073b1:	85 c0                	test   eax,eax
c00073b3:	0f 85 aa 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073b9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00073bd:	85 ed                	test   ebp,ebp
c00073bf:	0f 85 9e 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073c5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00073c9:	0f 84 8f 01 00 00    	je     c000755e <f_forward+0x1cf>
c00073cf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00073d2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00073d5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00073d8:	bf 00 00 00 00       	mov    edi,0x0
c00073dd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00073e0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00073e4:	89 d1                	mov    ecx,edx
c00073e6:	19 f9                	sbb    ecx,edi
c00073e8:	0f 83 cf 00 00 00    	jae    c00074bd <f_forward+0x12e>
c00073ee:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00073f2:	e9 c6 00 00 00       	jmp    c00074bd <f_forward+0x12e>
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 00                	push   0x0
c00073fb:	6a 00                	push   0x0
c00073fd:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	0f 84 57 01 00 00    	je     c0007563 <f_forward+0x1d4>
c000740c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000740f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007416:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000741a:	89 d7                	mov    edi,edx
c000741c:	8d 4e ff             	lea    ecx,[esi-0x1]
c000741f:	89 c6                	mov    esi,eax
c0007421:	0f ac fe 09          	shrd   esi,edi,0x9
c0007425:	21 ce                	and    esi,ecx
c0007427:	89 c1                	mov    ecx,eax
c0007429:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000742f:	0f 84 98 00 00 00    	je     c00074cd <f_forward+0x13e>
c0007435:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007439:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000743c:	89 c8                	mov    eax,ecx
c000743e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007442:	e8 79 aa ff ff       	call   c0001ec0 <clst2sect>
c0007447:	89 d7                	mov    edi,edx
c0007449:	09 c7                	or     edi,eax
c000744b:	0f 84 9e 00 00 00    	je     c00074ef <f_forward+0x160>
c0007451:	31 ff                	xor    edi,edi
c0007453:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007456:	01 c6                	add    esi,eax
c0007458:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000745c:	11 d7                	adc    edi,edx
c000745e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007461:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007464:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007468:	39 fa                	cmp    edx,edi
c000746a:	0f 85 a2 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007470:	39 f0                	cmp    eax,esi
c0007472:	0f 85 9a 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007478:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000747b:	ba 00 02 00 00       	mov    edx,0x200
c0007480:	25 ff 01 00 00       	and    eax,0x1ff
c0007485:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007489:	29 c2                	sub    edx,eax
c000748b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000748e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007491:	39 d1                	cmp    ecx,edx
c0007493:	76 02                	jbe    c0007497 <f_forward+0x108>
c0007495:	89 d1                	mov    ecx,edx
c0007497:	8d 73 50             	lea    esi,[ebx+0x50]
c000749a:	52                   	push   edx
c000749b:	01 c6                	add    esi,eax
c000749d:	52                   	push   edx
c000749e:	51                   	push   ecx
c000749f:	56                   	push   esi
c00074a0:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00074a4:	83 c4 10             	add    esp,0x10
c00074a7:	85 c0                	test   eax,eax
c00074a9:	74 44                	je     c00074ef <f_forward+0x160>
c00074ab:	31 ff                	xor    edi,edi
c00074ad:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00074b0:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00074b3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00074b7:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00074bb:	01 07                	add    DWORD PTR [edi],eax
c00074bd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00074c2:	0f 85 2f ff ff ff    	jne    c00073f7 <f_forward+0x68>
c00074c8:	e9 96 00 00 00       	jmp    c0007563 <f_forward+0x1d4>
c00074cd:	85 f6                	test   esi,esi
c00074cf:	0f 85 60 ff ff ff    	jne    c0007435 <f_forward+0xa6>
c00074d5:	89 d7                	mov    edi,edx
c00074d7:	09 c7                	or     edi,eax
c00074d9:	75 05                	jne    c00074e0 <f_forward+0x151>
c00074db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00074de:	eb 0a                	jmp    c00074ea <f_forward+0x15b>
c00074e0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00074e3:	89 d8                	mov    eax,ebx
c00074e5:	e8 a3 ba ff ff       	call   c0002f8d <get_fat>
c00074ea:	83 f8 01             	cmp    eax,0x1
c00074ed:	77 0b                	ja     c00074fa <f_forward+0x16b>
c00074ef:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00074f3:	bd 02 00 00 00       	mov    ebp,0x2
c00074f8:	eb 69                	jmp    c0007563 <f_forward+0x1d4>
c00074fa:	83 f8 ff             	cmp    eax,0xffffffff
c00074fd:	75 0b                	jne    c000750a <f_forward+0x17b>
c00074ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007503:	bd 01 00 00 00       	mov    ebp,0x1
c0007508:	eb 59                	jmp    c0007563 <f_forward+0x1d4>
c000750a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000750d:	e9 23 ff ff ff       	jmp    c0007435 <f_forward+0xa6>
c0007512:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007516:	79 20                	jns    c0007538 <f_forward+0x1a9>
c0007518:	83 ec 0c             	sub    esp,0xc
c000751b:	6a 01                	push   0x1
c000751d:	52                   	push   edx
c000751e:	50                   	push   eax
c000751f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007523:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007527:	50                   	push   eax
c0007528:	e8 c5 a6 ff ff       	call   c0001bf2 <disk_write>
c000752d:	83 c4 20             	add    esp,0x20
c0007530:	85 c0                	test   eax,eax
c0007532:	75 cb                	jne    c00074ff <f_forward+0x170>
c0007534:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007538:	83 ec 0c             	sub    esp,0xc
c000753b:	6a 01                	push   0x1
c000753d:	57                   	push   edi
c000753e:	56                   	push   esi
c000753f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007543:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007547:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000754b:	50                   	push   eax
c000754c:	e8 8b a6 ff ff       	call   c0001bdc <disk_read>
c0007551:	83 c4 20             	add    esp,0x20
c0007554:	85 c0                	test   eax,eax
c0007556:	0f 84 1c ff ff ff    	je     c0007478 <f_forward+0xe9>
c000755c:	eb a1                	jmp    c00074ff <f_forward+0x170>
c000755e:	bd 07 00 00 00       	mov    ebp,0x7
c0007563:	83 c4 2c             	add    esp,0x2c
c0007566:	89 e8                	mov    eax,ebp
c0007568:	5b                   	pop    ebx
c0007569:	5e                   	pop    esi
c000756a:	5f                   	pop    edi
c000756b:	5d                   	pop    ebp
c000756c:	c3                   	ret    

c000756d <f_mkfs>:
c000756d:	55                   	push   ebp
c000756e:	57                   	push   edi
c000756f:	56                   	push   esi
c0007570:	53                   	push   ebx
c0007571:	bb 0b 00 00 00       	mov    ebx,0xb
c0007576:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000757c:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007583:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000758a:	e8 7a ac ff ff       	call   c0002209 <get_ldnumber>
c000758f:	85 c0                	test   eax,eax
c0007591:	0f 88 ec 10 00 00    	js     c0008683 <f_mkfs+0x1116>
c0007597:	8b 14 85 c0 de 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2140]
c000759e:	85 d2                	test   edx,edx
c00075a0:	74 03                	je     c00075a5 <f_mkfs+0x38>
c00075a2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00075a5:	85 f6                	test   esi,esi
c00075a7:	75 05                	jne    c00075ae <f_mkfs+0x41>
c00075a9:	be 40 95 02 c0       	mov    esi,0xc0029540
c00075ae:	83 ec 0c             	sub    esp,0xc
c00075b1:	0f b6 c0             	movzx  eax,al
c00075b4:	bb 03 00 00 00       	mov    ebx,0x3
c00075b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00075bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075c1:	e8 13 a6 ff ff       	call   c0001bd9 <disk_initialize>
c00075c6:	83 c4 10             	add    esp,0x10
c00075c9:	a8 01                	test   al,0x1
c00075cb:	0f 85 b2 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075d1:	bb 0a 00 00 00       	mov    ebx,0xa
c00075d6:	a8 04                	test   al,0x4
c00075d8:	0f 85 a5 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00075e1:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00075e5:	85 c0                	test   eax,eax
c00075e7:	75 20                	jne    c0007609 <f_mkfs+0x9c>
c00075e9:	51                   	push   ecx
c00075ea:	8d 44 24 78          	lea    eax,[esp+0x78]
c00075ee:	50                   	push   eax
c00075ef:	6a 03                	push   0x3
c00075f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f5:	e8 0e a6 ff ff       	call   c0001c08 <disk_ioctl>
c00075fa:	83 c4 10             	add    esp,0x10
c00075fd:	85 c0                	test   eax,eax
c00075ff:	74 08                	je     c0007609 <f_mkfs+0x9c>
c0007601:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007609:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000760d:	8d 42 ff             	lea    eax,[edx-0x1]
c0007610:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007615:	77 04                	ja     c000761b <f_mkfs+0xae>
c0007617:	85 c2                	test   edx,eax
c0007619:	74 08                	je     c0007623 <f_mkfs+0xb6>
c000761b:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007623:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007626:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000762a:	48                   	dec    eax
c000762b:	3c 01                	cmp    al,0x1
c000762d:	76 05                	jbe    c0007634 <f_mkfs+0xc7>
c000762f:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007634:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007637:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000763b:	48                   	dec    eax
c000763c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007641:	77 07                	ja     c000764a <f_mkfs+0xdd>
c0007643:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007648:	74 08                	je     c0007652 <f_mkfs+0xe5>
c000764a:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007652:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007655:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000765b:	77 07                	ja     c0007664 <f_mkfs+0xf7>
c000765d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007660:	85 d8                	test   eax,ebx
c0007662:	74 02                	je     c0007666 <f_mkfs+0xf9>
c0007664:	31 db                	xor    ebx,ebx
c0007666:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007671:	77 0a                	ja     c000767d <f_mkfs+0x110>
c0007673:	bb 11 00 00 00       	mov    ebx,0x11
c0007678:	e9 06 10 00 00       	jmp    c0008683 <f_mkfs+0x1116>
c000767d:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007684:	8b 36                	mov    esi,DWORD PTR [esi]
c0007686:	85 ed                	test   ebp,ebp
c0007688:	75 1e                	jne    c00076a8 <f_mkfs+0x13b>
c000768a:	83 ec 0c             	sub    esp,0xc
c000768d:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	50                   	push   eax
c000769a:	e8 f1 0f 00 00       	call   c0008690 <ff_memalloc>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	89 c5                	mov    ebp,eax
c00076a4:	85 c0                	test   eax,eax
c00076a6:	74 cb                	je     c0007673 <f_mkfs+0x106>
c00076a8:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00076b0:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00076b8:	52                   	push   edx
c00076b9:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00076bd:	50                   	push   eax
c00076be:	6a 01                	push   0x1
c00076c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00076c4:	e8 3f a5 ff ff       	call   c0001c08 <disk_ioctl>
c00076c9:	83 c4 10             	add    esp,0x10
c00076cc:	85 c0                	test   eax,eax
c00076ce:	0f 85 4a 0f 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00076d4:	89 f1                	mov    ecx,esi
c00076d6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00076de:	83 e1 0f             	and    ecx,0xf
c00076e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00076e9:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00076ed:	83 e6 08             	and    esi,0x8
c00076f0:	75 56                	jne    c0007748 <f_mkfs+0x1db>
c00076f2:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00076f6:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00076fa:	83 ff 00             	cmp    edi,0x0
c00076fd:	76 20                	jbe    c000771f <f_mkfs+0x1b2>
c00076ff:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007704:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000770c:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007712:	83 d7 ff             	adc    edi,0xffffffff
c0007715:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007719:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000771d:	eb 21                	jmp    c0007740 <f_mkfs+0x1d3>
c000771f:	ba 3f 00 00 00       	mov    edx,0x3f
c0007724:	39 f2                	cmp    edx,esi
c0007726:	19 f8                	sbb    eax,edi
c0007728:	73 1e                	jae    c0007748 <f_mkfs+0x1db>
c000772a:	83 c6 c1             	add    esi,0xffffffc1
c000772d:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007735:	83 d7 ff             	adc    edi,0xffffffff
c0007738:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000773c:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007740:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007748:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000774c:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007750:	89 04 24             	mov    DWORD PTR [esp],eax
c0007753:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007757:	31 c0                	xor    eax,eax
c0007759:	ba 7f 00 00 00       	mov    edx,0x7f
c000775e:	89 c7                	mov    edi,eax
c0007760:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007763:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007767:	0f 83 c5 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c000776d:	89 df                	mov    edi,ebx
c000776f:	c1 ef 09             	shr    edi,0x9
c0007772:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007776:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000777d:	c1 ef 09             	shr    edi,0x9
c0007780:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007785:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007789:	74 29                	je     c00077b4 <f_mkfs+0x247>
c000778b:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007791:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007796:	0f 97 c2             	seta   dl
c0007799:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000779c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00077a0:	0f 92 c0             	setb   al
c00077a3:	08 c2                	or     dl,al
c00077a5:	75 5b                	jne    c0007802 <f_mkfs+0x295>
c00077a7:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077ab:	83 e0 07             	and    eax,0x7
c00077ae:	3c 04                	cmp    al,0x4
c00077b0:	74 50                	je     c0007802 <f_mkfs+0x295>
c00077b2:	eb 1b                	jmp    c00077cf <f_mkfs+0x262>
c00077b4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00077b9:	0f 87 73 0a 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c00077bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00077c5:	76 08                	jbe    c00077cf <f_mkfs+0x262>
c00077c7:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00077cf:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077d3:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00077d7:	83 e0 01             	and    eax,0x1
c00077da:	80 e1 02             	and    cl,0x2
c00077dd:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00077e1:	74 0d                	je     c00077f0 <f_mkfs+0x283>
c00077e3:	84 c0                	test   al,al
c00077e5:	0f 84 53 09 00 00    	je     c000813e <f_mkfs+0xbd1>
c00077eb:	e9 12 08 00 00       	jmp    c0008002 <f_mkfs+0xa95>
c00077f0:	bb 13 00 00 00       	mov    ebx,0x13
c00077f5:	84 c0                	test   al,al
c00077f7:	0f 85 05 08 00 00    	jne    c0008002 <f_mkfs+0xa95>
c00077fd:	e9 39 0e 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c0007802:	31 c0                	xor    eax,eax
c0007804:	ba ff 0f 00 00       	mov    edx,0xfff
c0007809:	89 c7                	mov    edi,eax
c000780b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000780e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007812:	0f 83 1a 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c0007818:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000781e:	77 39                	ja     c0007859 <f_mkfs+0x2ec>
c0007820:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007825:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000782d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007830:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007834:	73 08                	jae    c000783e <f_mkfs+0x2d1>
c0007836:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000783e:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007843:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007846:	b8 00 00 00 00       	mov    eax,0x0
c000784b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000784f:	73 08                	jae    c0007859 <f_mkfs+0x2ec>
c0007851:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000785d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007861:	83 c0 20             	add    eax,0x20
c0007864:	83 d2 00             	adc    edx,0x0
c0007867:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000786b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000786f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007873:	31 d2                	xor    edx,edx
c0007875:	31 ff                	xor    edi,edi
c0007877:	52                   	push   edx
c0007878:	89 fb                	mov    ebx,edi
c000787a:	50                   	push   eax
c000787b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000787f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007883:	e8 3c f2 01 00       	call   c0026ac4 <__udivdi3>
c0007888:	83 c4 10             	add    esp,0x10
c000788b:	c1 e0 02             	shl    eax,0x2
c000788e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007892:	05 07 02 00 00       	add    eax,0x207
c0007897:	89 f1                	mov    ecx,esi
c0007899:	c1 e8 09             	shr    eax,0x9
c000789c:	83 c1 ff             	add    ecx,0xffffffff
c000789f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00078a3:	83 d3 ff             	adc    ebx,0xffffffff
c00078a6:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00078aa:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00078ae:	31 d2                	xor    edx,edx
c00078b0:	01 c8                	add    eax,ecx
c00078b2:	11 da                	adc    edx,ebx
c00078b4:	89 c1                	mov    ecx,eax
c00078b6:	f7 de                	neg    esi
c00078b8:	89 d0                	mov    eax,edx
c00078ba:	83 d7 00             	adc    edi,0x0
c00078bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00078c1:	f7 df                	neg    edi
c00078c3:	21 f1                	and    ecx,esi
c00078c5:	21 f8                	and    eax,edi
c00078c7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00078cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00078cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00078d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00078d7:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00078db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078de:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00078e2:	0f ac d0 01          	shrd   eax,edx,0x1
c00078e6:	89 df                	mov    edi,ebx
c00078e8:	d1 ea                	shr    edx,1
c00078ea:	39 c1                	cmp    ecx,eax
c00078ec:	19 d7                	sbb    edi,edx
c00078ee:	0f 83 3e 09 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c00078f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00078f8:	31 d2                	xor    edx,edx
c00078fa:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00078fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007902:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007906:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007909:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000790d:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007911:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007915:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007919:	83 f8 0f             	cmp    eax,0xf
c000791c:	0f 86 10 09 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0007922:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000792a:	0f 87 02 09 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c0007930:	31 d2                	xor    edx,edx
c0007932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007936:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000793e:	83 c0 07             	add    eax,0x7
c0007941:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007949:	c1 e8 03             	shr    eax,0x3
c000794c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007953:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795b:	c1 e0 09             	shl    eax,0x9
c000795e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007962:	48                   	dec    eax
c0007963:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007967:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000796b:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000796f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007973:	31 d2                	xor    edx,edx
c0007975:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007979:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007984:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007989:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000798d:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007991:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007995:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007999:	31 ff                	xor    edi,edi
c000799b:	31 f6                	xor    esi,esi
c000799d:	31 db                	xor    ebx,ebx
c000799f:	85 ff                	test   edi,edi
c00079a1:	74 05                	je     c00079a8 <f_mkfs+0x43b>
c00079a3:	4f                   	dec    edi
c00079a4:	74 44                	je     c00079ea <f_mkfs+0x47d>
c00079a6:	eb 4f                	jmp    c00079f7 <f_mkfs+0x48a>
c00079a8:	83 ec 0c             	sub    esp,0xc
c00079ab:	0f b7 c3             	movzx  eax,bx
c00079ae:	50                   	push   eax
c00079af:	e8 05 0e 00 00       	call   c00087b9 <ff_wtoupper>
c00079b4:	83 c4 10             	add    esp,0x10
c00079b7:	89 c1                	mov    ecx,eax
c00079b9:	8d 53 01             	lea    edx,[ebx+0x1]
c00079bc:	66 39 c3             	cmp    bx,ax
c00079bf:	75 3e                	jne    c00079ff <f_mkfs+0x492>
c00079c1:	be 01 00 00 00       	mov    esi,0x1
c00079c6:	89 df                	mov    edi,ebx
c00079c8:	66 01 f7             	add    di,si
c00079cb:	75 07                	jne    c00079d4 <f_mkfs+0x467>
c00079cd:	83 fe 7f             	cmp    esi,0x7f
c00079d0:	77 31                	ja     c0007a03 <f_mkfs+0x496>
c00079d2:	eb 16                	jmp    c00079ea <f_mkfs+0x47d>
c00079d4:	83 ec 0c             	sub    esp,0xc
c00079d7:	0f b7 ff             	movzx  edi,di
c00079da:	57                   	push   edi
c00079db:	e8 d9 0d 00 00       	call   c00087b9 <ff_wtoupper>
c00079e0:	83 c4 10             	add    esp,0x10
c00079e3:	39 c7                	cmp    edi,eax
c00079e5:	75 e6                	jne    c00079cd <f_mkfs+0x460>
c00079e7:	46                   	inc    esi
c00079e8:	eb dc                	jmp    c00079c6 <f_mkfs+0x459>
c00079ea:	31 c0                	xor    eax,eax
c00079ec:	89 d9                	mov    ecx,ebx
c00079ee:	4e                   	dec    esi
c00079ef:	0f 95 c0             	setne  al
c00079f2:	43                   	inc    ebx
c00079f3:	89 c7                	mov    edi,eax
c00079f5:	eb 14                	jmp    c0007a0b <f_mkfs+0x49e>
c00079f7:	89 f1                	mov    ecx,esi
c00079f9:	01 f3                	add    ebx,esi
c00079fb:	31 ff                	xor    edi,edi
c00079fd:	eb 0c                	jmp    c0007a0b <f_mkfs+0x49e>
c00079ff:	89 d3                	mov    ebx,edx
c0007a01:	eb 08                	jmp    c0007a0b <f_mkfs+0x49e>
c0007a03:	bf 02 00 00 00       	mov    edi,0x2
c0007a08:	83 c9 ff             	or     ecx,0xffffffff
c0007a0b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a12:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007a16:	0f b6 c1             	movzx  eax,cl
c0007a19:	e8 04 a7 ff ff       	call   c0002122 <xsum32>
c0007a1e:	66 c1 e9 08          	shr    cx,0x8
c0007a22:	89 c2                	mov    edx,eax
c0007a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a27:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007a2b:	0f b7 c1             	movzx  eax,cx
c0007a2e:	e8 ef a6 ff ff       	call   c0002122 <xsum32>
c0007a33:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007a38:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007a3c:	66 85 db             	test   bx,bx
c0007a3f:	74 1f                	je     c0007a60 <f_mkfs+0x4f3>
c0007a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a44:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007a4b:	83 c0 02             	add    eax,0x2
c0007a4e:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007a54:	39 c2                	cmp    edx,eax
c0007a56:	74 08                	je     c0007a60 <f_mkfs+0x4f3>
c0007a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5b:	e9 3f ff ff ff       	jmp    c000799f <f_mkfs+0x432>
c0007a60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a63:	83 ec 0c             	sub    esp,0xc
c0007a66:	05 01 02 00 00       	add    eax,0x201
c0007a6b:	c1 e8 09             	shr    eax,0x9
c0007a6e:	50                   	push   eax
c0007a6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007a73:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 6d a1 ff ff       	call   c0001bf2 <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007a8d:	0f 85 8b 0b 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007a93:	89 d0                	mov    eax,edx
c0007a95:	31 d2                	xor    edx,edx
c0007a97:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007a9b:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007a9f:	66 85 db             	test   bx,bx
c0007aa2:	74 04                	je     c0007aa8 <f_mkfs+0x53b>
c0007aa4:	31 c0                	xor    eax,eax
c0007aa6:	eb b0                	jmp    c0007a58 <f_mkfs+0x4eb>
c0007aa8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007aac:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007ab0:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007ab4:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007aba:	31 d2                	xor    edx,edx
c0007abc:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007ac7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007acb:	c1 eb 09             	shr    ebx,0x9
c0007ace:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007ad5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007ad9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007add:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ae1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007ae5:	8d 70 01             	lea    esi,[eax+0x1]
c0007ae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007af0:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007af7:	31 d2                	xor    edx,edx
c0007af9:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007afe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b01:	89 c1                	mov    ecx,eax
c0007b03:	89 e8                	mov    eax,ebp
c0007b05:	e8 b1 a1 ff ff       	call   c0001cbb <mem_set>
c0007b0a:	31 c0                	xor    eax,eax
c0007b0c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b0f:	76 10                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b11:	83 fe 07             	cmp    esi,0x7
c0007b14:	76 0b                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b16:	40                   	inc    eax
c0007b17:	83 ee 08             	sub    esi,0x8
c0007b1a:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007b1f:	eb eb                	jmp    c0007b0c <f_mkfs+0x59f>
c0007b21:	b2 01                	mov    dl,0x1
c0007b23:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007b27:	85 f6                	test   esi,esi
c0007b29:	74 0c                	je     c0007b37 <f_mkfs+0x5ca>
c0007b2b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b2e:	76 07                	jbe    c0007b37 <f_mkfs+0x5ca>
c0007b30:	08 11                	or     BYTE PTR [ecx],dl
c0007b32:	4e                   	dec    esi
c0007b33:	d1 e2                	shl    edx,1
c0007b35:	eb f0                	jmp    c0007b27 <f_mkfs+0x5ba>
c0007b37:	89 df                	mov    edi,ebx
c0007b39:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007b3d:	76 04                	jbe    c0007b43 <f_mkfs+0x5d6>
c0007b3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007b43:	83 ec 0c             	sub    esp,0xc
c0007b46:	57                   	push   edi
c0007b47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4f:	55                   	push   ebp
c0007b50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b54:	e8 99 a0 ff ff       	call   c0001bf2 <disk_write>
c0007b59:	83 c4 20             	add    esp,0x20
c0007b5c:	85 c0                	test   eax,eax
c0007b5e:	0f 85 ba 0a 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007b64:	31 d2                	xor    edx,edx
c0007b66:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007b6a:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007b6e:	29 fb                	sub    ebx,edi
c0007b70:	0f 85 7a ff ff ff    	jne    c0007af0 <f_mkfs+0x583>
c0007b76:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007b7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007b82:	31 f6                	xor    esi,esi
c0007b84:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b88:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b8b:	31 d2                	xor    edx,edx
c0007b8d:	89 e8                	mov    eax,ebp
c0007b8f:	e8 27 a1 ff ff       	call   c0001cbb <mem_set>
c0007b94:	31 c9                	xor    ecx,ecx
c0007b96:	85 db                	test   ebx,ebx
c0007b98:	75 40                	jne    c0007bda <f_mkfs+0x66d>
c0007b9a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007b9f:	89 e8                	mov    eax,ebp
c0007ba1:	bb 02 00 00 00       	mov    ebx,0x2
c0007ba6:	e8 f2 a0 ff ff       	call   c0001c9d <st_dword>
c0007bab:	8d 45 04             	lea    eax,[ebp+0x4]
c0007bae:	83 ca ff             	or     edx,0xffffffff
c0007bb1:	e8 e7 a0 ff ff       	call   c0001c9d <st_dword>
c0007bb6:	b9 08 00 00 00       	mov    ecx,0x8
c0007bbb:	eb 1d                	jmp    c0007bda <f_mkfs+0x66d>
c0007bbd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bc0:	76 3b                	jbe    c0007bfd <f_mkfs+0x690>
c0007bc2:	43                   	inc    ebx
c0007bc3:	83 fe 01             	cmp    esi,0x1
c0007bc6:	89 da                	mov    edx,ebx
c0007bc8:	77 03                	ja     c0007bcd <f_mkfs+0x660>
c0007bca:	83 ca ff             	or     edx,0xffffffff
c0007bcd:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007bd1:	4e                   	dec    esi
c0007bd2:	e8 c6 a0 ff ff       	call   c0001c9d <st_dword>
c0007bd7:	83 c1 04             	add    ecx,0x4
c0007bda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bde:	85 f6                	test   esi,esi
c0007be0:	75 db                	jne    c0007bbd <f_mkfs+0x650>
c0007be2:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007be7:	77 14                	ja     c0007bfd <f_mkfs+0x690>
c0007be9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007bed:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007bf4:	85 f6                	test   esi,esi
c0007bf6:	74 05                	je     c0007bfd <f_mkfs+0x690>
c0007bf8:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bfb:	77 dd                	ja     c0007bda <f_mkfs+0x66d>
c0007bfd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007c01:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c05:	39 cf                	cmp    edi,ecx
c0007c07:	76 02                	jbe    c0007c0b <f_mkfs+0x69e>
c0007c09:	89 cf                	mov    edi,ecx
c0007c0b:	83 ec 0c             	sub    esp,0xc
c0007c0e:	57                   	push   edi
c0007c0f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c17:	55                   	push   ebp
c0007c18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c1c:	e8 d1 9f ff ff       	call   c0001bf2 <disk_write>
c0007c21:	83 c4 20             	add    esp,0x20
c0007c24:	85 c0                	test   eax,eax
c0007c26:	0f 85 f2 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007c32:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007c36:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007c3a:	0f 85 48 ff ff ff    	jne    c0007b88 <f_mkfs+0x61b>
c0007c40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c43:	31 d2                	xor    edx,edx
c0007c45:	89 e8                	mov    eax,ebp
c0007c47:	31 ff                	xor    edi,edi
c0007c49:	e8 6d a0 ff ff       	call   c0001cbb <mem_set>
c0007c4e:	8d 45 34             	lea    eax,[ebp+0x34]
c0007c51:	ba 02 00 00 00       	mov    edx,0x2
c0007c56:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007c5a:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007c5e:	e8 3a a0 ff ff       	call   c0001c9d <st_dword>
c0007c63:	8d 45 38             	lea    eax,[ebp+0x38]
c0007c66:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007c6a:	e8 2e a0 ff ff       	call   c0001c9d <st_dword>
c0007c6f:	8d 45 44             	lea    eax,[ebp+0x44]
c0007c72:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007c76:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007c7a:	e8 1e a0 ff ff       	call   c0001c9d <st_dword>
c0007c7f:	8d 45 54             	lea    eax,[ebp+0x54]
c0007c82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007c86:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c8a:	83 c2 02             	add    edx,0x2
c0007c8d:	e8 0b a0 ff ff       	call   c0001c9d <st_dword>
c0007c92:	8d 45 58             	lea    eax,[ebp+0x58]
c0007c95:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007c99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c9d:	e8 fb 9f ff ff       	call   c0001c9d <st_dword>
c0007ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007cab:	89 c6                	mov    esi,eax
c0007cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007cb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cb8:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007cbc:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007cbf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007cc3:	39 cb                	cmp    ebx,ecx
c0007cc5:	76 02                	jbe    c0007cc9 <f_mkfs+0x75c>
c0007cc7:	89 cb                	mov    ebx,ecx
c0007cc9:	83 ec 0c             	sub    esp,0xc
c0007ccc:	53                   	push   ebx
c0007ccd:	57                   	push   edi
c0007cce:	56                   	push   esi
c0007ccf:	55                   	push   ebp
c0007cd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cd4:	e8 19 9f ff ff       	call   c0001bf2 <disk_write>
c0007cd9:	83 c4 20             	add    esp,0x20
c0007cdc:	85 c0                	test   eax,eax
c0007cde:	0f 85 3a 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ce4:	31 d2                	xor    edx,edx
c0007ce6:	b9 00 02 00 00       	mov    ecx,0x200
c0007ceb:	89 e8                	mov    eax,ebp
c0007ced:	e8 c9 9f ff ff       	call   c0001cbb <mem_set>
c0007cf2:	31 d2                	xor    edx,edx
c0007cf4:	01 de                	add    esi,ebx
c0007cf6:	11 d7                	adc    edi,edx
c0007cf8:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007cfb:	75 bf                	jne    c0007cbc <f_mkfs+0x74f>
c0007cfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007d01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007d05:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007d0d:	b9 00 02 00 00       	mov    ecx,0x200
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	89 e8                	mov    eax,ebp
c0007d16:	e8 a0 9f ff ff       	call   c0001cbb <mem_set>
c0007d1b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d20:	ba 20 96 02 c0       	mov    edx,0xc0029620
c0007d25:	89 e8                	mov    eax,ebp
c0007d27:	e8 7a 9f ff ff       	call   c0001ca6 <mem_cpy>
c0007d2c:	8d 45 40             	lea    eax,[ebp+0x40]
c0007d2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d33:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007d37:	e8 64 9f ff ff       	call   c0001ca0 <st_qword>
c0007d3c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007d40:	8d 45 48             	lea    eax,[ebp+0x48]
c0007d43:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007d47:	e8 54 9f ff ff       	call   c0001ca0 <st_qword>
c0007d4c:	8d 45 50             	lea    eax,[ebp+0x50]
c0007d4f:	ba 20 00 00 00       	mov    edx,0x20
c0007d54:	e8 44 9f ff ff       	call   c0001c9d <st_dword>
c0007d59:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007d5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007d61:	e8 37 9f ff ff       	call   c0001c9d <st_dword>
c0007d66:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007d6a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007d6e:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007d72:	e8 26 9f ff ff       	call   c0001c9d <st_dword>
c0007d77:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007d7a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d7e:	e8 1a 9f ff ff       	call   c0001c9d <st_dword>
c0007d83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007d87:	8d 50 02             	lea    edx,[eax+0x2]
c0007d8a:	8d 45 60             	lea    eax,[ebp+0x60]
c0007d8d:	e8 0b 9f ff ff       	call   c0001c9d <st_dword>
c0007d92:	8d 45 64             	lea    eax,[ebp+0x64]
c0007d95:	ba 00 00 21 50       	mov    edx,0x50210000
c0007d9a:	e8 fe 9e ff ff       	call   c0001c9d <st_dword>
c0007d9f:	8d 45 68             	lea    eax,[ebp+0x68]
c0007da2:	ba 00 01 00 00       	mov    edx,0x100
c0007da7:	e8 ed 9e ff ff       	call   c0001c99 <st_word>
c0007dac:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007db0:	b8 0a 00 00 00       	mov    eax,0xa
c0007db5:	48                   	dec    eax
c0007db6:	74 05                	je     c0007dbd <f_mkfs+0x850>
c0007db8:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007dbb:	eb f8                	jmp    c0007db5 <f_mkfs+0x848>
c0007dbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc1:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007dc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dc9:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007dcd:	74 05                	je     c0007dd4 <f_mkfs+0x867>
c0007dcf:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007dd2:	eb f5                	jmp    c0007dc9 <f_mkfs+0x85c>
c0007dd4:	8d 45 78             	lea    eax,[ebp+0x78]
c0007dd7:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ddc:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	e8 b0 9e ff ff       	call   c0001c99 <st_word>
c0007de9:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007def:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 9d 9e ff ff       	call   c0001c99 <st_word>
c0007dfc:	31 c9                	xor    ecx,ecx
c0007dfe:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007e01:	83 f8 01             	cmp    eax,0x1
c0007e04:	76 13                	jbe    c0007e19 <f_mkfs+0x8ac>
c0007e06:	83 f9 70             	cmp    ecx,0x70
c0007e09:	74 0e                	je     c0007e19 <f_mkfs+0x8ac>
c0007e0b:	89 da                	mov    edx,ebx
c0007e0d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007e12:	e8 0b a3 ff ff       	call   c0002122 <xsum32>
c0007e17:	89 c3                	mov    ebx,eax
c0007e19:	41                   	inc    ecx
c0007e1a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e20:	75 dc                	jne    c0007dfe <f_mkfs+0x891>
c0007e22:	89 f0                	mov    eax,esi
c0007e24:	89 fa                	mov    edx,edi
c0007e26:	83 c0 01             	add    eax,0x1
c0007e29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e2d:	83 d2 00             	adc    edx,0x0
c0007e30:	83 ec 0c             	sub    esp,0xc
c0007e33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007e37:	6a 01                	push   0x1
c0007e39:	57                   	push   edi
c0007e3a:	56                   	push   esi
c0007e3b:	55                   	push   ebp
c0007e3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e40:	e8 ad 9d ff ff       	call   c0001bf2 <disk_write>
c0007e45:	83 c4 20             	add    esp,0x20
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	0f 85 ce 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	b9 00 02 00 00       	mov    ecx,0x200
c0007e57:	89 e8                	mov    eax,ebp
c0007e59:	e8 5d 9e ff ff       	call   c0001cbb <mem_set>
c0007e5e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007e63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e66:	e8 2e 9e ff ff       	call   c0001c99 <st_word>
c0007e6b:	89 f0                	mov    eax,esi
c0007e6d:	89 fa                	mov    edx,edi
c0007e6f:	83 c0 09             	add    eax,0x9
c0007e72:	83 d2 00             	adc    edx,0x0
c0007e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e78:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007e7c:	31 c9                	xor    ecx,ecx
c0007e7e:	41                   	inc    ecx
c0007e7f:	89 da                	mov    edx,ebx
c0007e81:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e86:	e8 97 a2 ff ff       	call   c0002122 <xsum32>
c0007e8b:	89 c3                	mov    ebx,eax
c0007e8d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e93:	75 e9                	jne    c0007e7e <f_mkfs+0x911>
c0007e95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ea4:	83 d2 00             	adc    edx,0x0
c0007ea7:	83 ec 0c             	sub    esp,0xc
c0007eaa:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007eae:	6a 01                	push   0x1
c0007eb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb8:	55                   	push   ebp
c0007eb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ebd:	e8 30 9d ff ff       	call   c0001bf2 <disk_write>
c0007ec2:	83 c4 20             	add    esp,0x20
c0007ec5:	85 c0                	test   eax,eax
c0007ec7:	0f 85 51 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ecd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ed1:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ed5:	75 09                	jne    c0007ee0 <f_mkfs+0x973>
c0007ed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007eda:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ede:	74 12                	je     c0007ef2 <f_mkfs+0x985>
c0007ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ee4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ee8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007eec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ef0:	eb 8a                	jmp    c0007e7c <f_mkfs+0x90f>
c0007ef2:	31 d2                	xor    edx,edx
c0007ef4:	b9 00 02 00 00       	mov    ecx,0x200
c0007ef9:	89 e8                	mov    eax,ebp
c0007efb:	e8 bb 9d ff ff       	call   c0001cbb <mem_set>
c0007f00:	83 c6 0b             	add    esi,0xb
c0007f03:	83 d7 00             	adc    edi,0x0
c0007f06:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007f0a:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007f0e:	31 c9                	xor    ecx,ecx
c0007f10:	41                   	inc    ecx
c0007f11:	89 da                	mov    edx,ebx
c0007f13:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007f18:	e8 05 a2 ff ff       	call   c0002122 <xsum32>
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007f25:	75 e9                	jne    c0007f10 <f_mkfs+0x9a3>
c0007f27:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f2a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f2e:	83 c6 01             	add    esi,0x1
c0007f31:	83 d7 00             	adc    edi,0x0
c0007f34:	83 ec 0c             	sub    esp,0xc
c0007f37:	6a 01                	push   0x1
c0007f39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f41:	55                   	push   ebp
c0007f42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f46:	e8 a7 9c ff ff       	call   c0001bf2 <disk_write>
c0007f4b:	83 c4 20             	add    esp,0x20
c0007f4e:	85 c0                	test   eax,eax
c0007f50:	0f 85 c8 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007f56:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007f5a:	75 06                	jne    c0007f62 <f_mkfs+0x9f5>
c0007f5c:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007f60:	74 09                	je     c0007f6b <f_mkfs+0x9fe>
c0007f62:	89 34 24             	mov    DWORD PTR [esp],esi
c0007f65:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007f69:	eb a3                	jmp    c0007f0e <f_mkfs+0x9a1>
c0007f6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007f6f:	89 da                	mov    edx,ebx
c0007f71:	01 e8                	add    eax,ebp
c0007f73:	e8 25 9d ff ff       	call   c0001c9d <st_dword>
c0007f78:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007f7d:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007f85:	75 e4                	jne    c0007f6b <f_mkfs+0x9fe>
c0007f87:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f8a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f8e:	83 c6 02             	add    esi,0x2
c0007f91:	83 d7 00             	adc    edi,0x0
c0007f94:	83 ec 0c             	sub    esp,0xc
c0007f97:	6a 01                	push   0x1
c0007f99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007f9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007fa1:	55                   	push   ebp
c0007fa2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa6:	e8 47 9c ff ff       	call   c0001bf2 <disk_write>
c0007fab:	83 c4 20             	add    esp,0x20
c0007fae:	85 c0                	test   eax,eax
c0007fb0:	0f 85 68 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007fb6:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007fbb:	74 0d                	je     c0007fca <f_mkfs+0xa5d>
c0007fbd:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007fc5:	e9 43 fd ff ff       	jmp    c0007d0d <f_mkfs+0x7a0>
c0007fca:	b1 07                	mov    cl,0x7
c0007fcc:	e9 e3 05 00 00       	jmp    c00085b4 <f_mkfs+0x1047>
c0007fd1:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007fd6:	0f 85 4f 02 00 00    	jne    c000822b <f_mkfs+0xcbe>
c0007fdc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007fe1:	0f 86 22 02 00 00    	jbe    c0008209 <f_mkfs+0xc9c>
c0007fe7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fec:	0f 85 81 06 00 00    	jne    c0008673 <f_mkfs+0x1106>
c0007ff2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ff5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ff9:	83 f8 40             	cmp    eax,0x40
c0007ffc:	0f 87 51 06 00 00    	ja     c0008653 <f_mkfs+0x10e6>
c0008002:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008006:	85 ff                	test   edi,edi
c0008008:	75 1c                	jne    c0008026 <f_mkfs+0xab9>
c000800a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000800d:	ba 20 95 02 c0       	mov    edx,0xc0029520
c0008012:	c1 e9 0c             	shr    ecx,0xc
c0008015:	bf 01 00 00 00       	mov    edi,0x1
c000801a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000801d:	66 85 c0             	test   ax,ax
c0008020:	0f 85 95 01 00 00    	jne    c00081bb <f_mkfs+0xc4e>
c0008026:	31 d2                	xor    edx,edx
c0008028:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000802b:	f7 f7                	div    edi
c000802d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008032:	0f 86 95 01 00 00    	jbe    c00081cd <f_mkfs+0xc60>
c0008038:	83 c0 02             	add    eax,0x2
c000803b:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0008040:	01 c0                	add    eax,eax
c0008042:	05 ff 01 00 00       	add    eax,0x1ff
c0008047:	be 01 00 00 00       	mov    esi,0x1
c000804c:	c1 e8 09             	shr    eax,0x9
c000804f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008057:	c1 e0 05             	shl    eax,0x5
c000805a:	c1 e8 09             	shr    eax,0x9
c000805d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0008061:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0008066:	31 d2                	xor    edx,edx
c0008068:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000806c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0008070:	89 f0                	mov    eax,esi
c0008072:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0008076:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000807a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000807e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0008082:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008086:	31 d2                	xor    edx,edx
c0008088:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c000808d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0008091:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0008095:	31 db                	xor    ebx,ebx
c0008097:	01 c8                	add    eax,ecx
c0008099:	11 da                	adc    edx,ebx
c000809b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000809f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c00080a3:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c00080a7:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00080ab:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c00080af:	f7 da                	neg    edx
c00080b1:	21 d1                	and    ecx,edx
c00080b3:	29 d9                	sub    ecx,ebx
c00080b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ba:	0f 85 20 01 00 00    	jne    c00081e0 <f_mkfs+0xc73>
c00080c0:	31 db                	xor    ebx,ebx
c00080c2:	01 ce                	add    esi,ecx
c00080c4:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c00080c8:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c00080cc:	31 d2                	xor    edx,edx
c00080ce:	89 f8                	mov    eax,edi
c00080d0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00080d4:	c1 e0 04             	shl    eax,0x4
c00080d7:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00080db:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00080df:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c00080e3:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c00080e7:	39 04 24             	cmp    DWORD PTR [esp],eax
c00080ea:	19 d3                	sbb    ebx,edx
c00080ec:	0f 82 40 01 00 00    	jb     c0008232 <f_mkfs+0xcc5>
c00080f2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00080f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f9:	89 c8                	mov    eax,ecx
c00080fb:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008100:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008104:	29 f0                	sub    eax,esi
c0008106:	29 d0                	sub    eax,edx
c0008108:	31 d2                	xor    edx,edx
c000810a:	f7 f7                	div    edi
c000810c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008111:	89 c3                	mov    ebx,eax
c0008113:	0f 85 b8 fe ff ff    	jne    c0007fd1 <f_mkfs+0xa64>
c0008119:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000811e:	0f 87 1d 01 00 00    	ja     c0008241 <f_mkfs+0xcd4>
c0008124:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008129:	0f 85 03 01 00 00    	jne    c0008232 <f_mkfs+0xcc5>
c000812f:	83 ff 01             	cmp    edi,0x1
c0008132:	0f 86 fa 00 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0008138:	d1 ef                	shr    edi,1
c000813a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000813e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008142:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008145:	85 db                	test   ebx,ebx
c0008147:	75 2d                	jne    c0008176 <f_mkfs+0xc09>
c0008149:	89 cb                	mov    ebx,ecx
c000814b:	ba 30 95 02 c0       	mov    edx,0xc0029530
c0008150:	c1 eb 11             	shr    ebx,0x11
c0008153:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000815b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000815e:	66 85 c0             	test   ax,ax
c0008161:	74 11                	je     c0008174 <f_mkfs+0xc07>
c0008163:	83 c2 02             	add    edx,0x2
c0008166:	39 d8                	cmp    eax,ebx
c0008168:	77 0a                	ja     c0008174 <f_mkfs+0xc07>
c000816a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000816e:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0008172:	eb e7                	jmp    c000815b <f_mkfs+0xbee>
c0008174:	31 db                	xor    ebx,ebx
c0008176:	31 d2                	xor    edx,edx
c0008178:	89 c8                	mov    eax,ecx
c000817a:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000817e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0008185:	2d f6 ff 00 00       	sub    eax,0xfff6
c000818a:	c1 ea 09             	shr    edx,0x9
c000818d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0008192:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0008196:	0f 87 96 00 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c000819c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081a0:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00081a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00081ac:	be 20 00 00 00       	mov    esi,0x20
c00081b1:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00081b6:	e9 a6 fe ff ff       	jmp    c0008061 <f_mkfs+0xaf4>
c00081bb:	83 c2 02             	add    edx,0x2
c00081be:	39 c8                	cmp    eax,ecx
c00081c0:	0f 87 60 fe ff ff    	ja     c0008026 <f_mkfs+0xab9>
c00081c6:	01 ff                	add    edi,edi
c00081c8:	e9 4d fe ff ff       	jmp    c000801a <f_mkfs+0xaad>
c00081cd:	8d 04 40             	lea    eax,[eax+eax*2]
c00081d0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c00081d5:	40                   	inc    eax
c00081d6:	d1 e8                	shr    eax,1
c00081d8:	83 c0 03             	add    eax,0x3
c00081db:	e9 62 fe ff ff       	jmp    c0008042 <f_mkfs+0xad5>
c00081e0:	31 d2                	xor    edx,edx
c00081e2:	89 c8                	mov    eax,ecx
c00081e4:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c00081e8:	85 d2                	test   edx,edx
c00081ea:	74 0c                	je     c00081f8 <f_mkfs+0xc8b>
c00081ec:	49                   	dec    ecx
c00081ed:	46                   	inc    esi
c00081ee:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00081f3:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c00081f8:	89 c8                	mov    eax,ecx
c00081fa:	31 d2                	xor    edx,edx
c00081fc:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008200:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008204:	e9 c3 fe ff ff       	jmp    c00080cc <f_mkfs+0xb5f>
c0008209:	3d f5 0f 00 00       	cmp    eax,0xff5
c000820e:	77 31                	ja     c0008241 <f_mkfs+0xcd4>
c0008210:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008215:	75 1b                	jne    c0008232 <f_mkfs+0xcc5>
c0008217:	8d 04 3f             	lea    eax,[edi+edi*1]
c000821a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000821e:	3d 80 00 00 00       	cmp    eax,0x80
c0008223:	0f 86 d9 fd ff ff    	jbe    c0008002 <f_mkfs+0xa95>
c0008229:	eb 07                	jmp    c0008232 <f_mkfs+0xcc5>
c000822b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008230:	76 0a                	jbe    c000823c <f_mkfs+0xccf>
c0008232:	bb 0e 00 00 00       	mov    ebx,0xe
c0008237:	e9 ff 03 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c000823c:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008241:	31 d2                	xor    edx,edx
c0008243:	b9 00 02 00 00       	mov    ecx,0x200
c0008248:	89 e8                	mov    eax,ebp
c000824a:	e8 6c 9a ff ff       	call   c0001cbb <mem_set>
c000824f:	b9 0b 00 00 00       	mov    ecx,0xb
c0008254:	ba 42 96 02 c0       	mov    edx,0xc0029642
c0008259:	89 e8                	mov    eax,ebp
c000825b:	e8 46 9a ff ff       	call   c0001ca6 <mem_cpy>
c0008260:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008263:	ba 00 02 00 00       	mov    edx,0x200
c0008268:	e8 2c 9a ff ff       	call   c0001c99 <st_word>
c000826d:	89 f8                	mov    eax,edi
c000826f:	0f b7 d6             	movzx  edx,si
c0008272:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008275:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008278:	e8 1c 9a ff ff       	call   c0001c99 <st_word>
c000827d:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008281:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008286:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008289:	75 08                	jne    c0008293 <f_mkfs+0xd26>
c000828b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008293:	8d 45 11             	lea    eax,[ebp+0x11]
c0008296:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000829a:	e8 fa 99 ff ff       	call   c0001c99 <st_word>
c000829f:	b8 ff ff 00 00       	mov    eax,0xffff
c00082a4:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00082a8:	39 d0                	cmp    eax,edx
c00082aa:	b8 00 00 00 00       	mov    eax,0x0
c00082af:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00082b3:	72 0a                	jb     c00082bf <f_mkfs+0xd52>
c00082b5:	8d 45 13             	lea    eax,[ebp+0x13]
c00082b8:	e8 dc 99 ff ff       	call   c0001c99 <st_word>
c00082bd:	eb 08                	jmp    c00082c7 <f_mkfs+0xd5a>
c00082bf:	8d 45 20             	lea    eax,[ebp+0x20]
c00082c2:	e8 d6 99 ff ff       	call   c0001c9d <st_dword>
c00082c7:	8d 45 18             	lea    eax,[ebp+0x18]
c00082ca:	ba 3f 00 00 00       	mov    edx,0x3f
c00082cf:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00082d3:	e8 c1 99 ff ff       	call   c0001c99 <st_word>
c00082d8:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00082db:	ba ff 00 00 00       	mov    edx,0xff
c00082e0:	e8 b4 99 ff ff       	call   c0001c99 <st_word>
c00082e5:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00082e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00082ec:	e8 ac 99 ff ff       	call   c0001c9d <st_dword>
c00082f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f6:	75 57                	jne    c000834f <f_mkfs+0xde2>
c00082f8:	8d 45 43             	lea    eax,[ebp+0x43]
c00082fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0008300:	e8 98 99 ff ff       	call   c0001c9d <st_dword>
c0008305:	8d 45 24             	lea    eax,[ebp+0x24]
c0008308:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000830c:	e8 8c 99 ff ff       	call   c0001c9d <st_dword>
c0008311:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008314:	ba 02 00 00 00       	mov    edx,0x2
c0008319:	e8 7f 99 ff ff       	call   c0001c9d <st_dword>
c000831e:	8d 45 30             	lea    eax,[ebp+0x30]
c0008321:	ba 01 00 00 00       	mov    edx,0x1
c0008326:	e8 6e 99 ff ff       	call   c0001c99 <st_word>
c000832b:	8d 45 32             	lea    eax,[ebp+0x32]
c000832e:	ba 06 00 00 00       	mov    edx,0x6
c0008333:	e8 61 99 ff ff       	call   c0001c99 <st_word>
c0008338:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000833c:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008340:	8d 45 47             	lea    eax,[ebp+0x47]
c0008343:	b9 13 00 00 00       	mov    ecx,0x13
c0008348:	ba 4e 96 02 c0       	mov    edx,0xc002964e
c000834d:	eb 2f                	jmp    c000837e <f_mkfs+0xe11>
c000834f:	8d 45 27             	lea    eax,[ebp+0x27]
c0008352:	ba 00 00 21 50       	mov    edx,0x50210000
c0008357:	e8 41 99 ff ff       	call   c0001c9d <st_dword>
c000835c:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008361:	8d 45 16             	lea    eax,[ebp+0x16]
c0008364:	e8 30 99 ff ff       	call   c0001c99 <st_word>
c0008369:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c000836d:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008371:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008374:	b9 13 00 00 00       	mov    ecx,0x13
c0008379:	ba 62 96 02 c0       	mov    edx,0xc0029662
c000837e:	e8 23 99 ff ff       	call   c0001ca6 <mem_cpy>
c0008383:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008389:	ba 55 aa 00 00       	mov    edx,0xaa55
c000838e:	89 f0                	mov    eax,esi
c0008390:	e8 04 99 ff ff       	call   c0001c99 <st_word>
c0008395:	83 ec 0c             	sub    esp,0xc
c0008398:	6a 01                	push   0x1
c000839a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000839e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00083a2:	55                   	push   ebp
c00083a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a7:	e8 46 98 ff ff       	call   c0001bf2 <disk_write>
c00083ac:	83 c4 20             	add    esp,0x20
c00083af:	85 c0                	test   eax,eax
c00083b1:	0f 85 67 02 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00083b7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083bc:	0f 85 b7 00 00 00    	jne    c0008479 <f_mkfs+0xf0c>
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	6a 01                	push   0x1
c00083c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083cf:	83 c0 06             	add    eax,0x6
c00083d2:	83 d2 00             	adc    edx,0x0
c00083d5:	52                   	push   edx
c00083d6:	50                   	push   eax
c00083d7:	55                   	push   ebp
c00083d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083dc:	e8 11 98 ff ff       	call   c0001bf2 <disk_write>
c00083e1:	83 c4 20             	add    esp,0x20
c00083e4:	b9 00 02 00 00       	mov    ecx,0x200
c00083e9:	31 d2                	xor    edx,edx
c00083eb:	89 e8                	mov    eax,ebp
c00083ed:	e8 c9 98 ff ff       	call   c0001cbb <mem_set>
c00083f2:	ba 52 52 61 41       	mov    edx,0x41615252
c00083f7:	89 e8                	mov    eax,ebp
c00083f9:	e8 9f 98 ff ff       	call   c0001c9d <st_dword>
c00083fe:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008404:	ba 72 72 41 61       	mov    edx,0x61417272
c0008409:	e8 8f 98 ff ff       	call   c0001c9d <st_dword>
c000840e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008411:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008417:	e8 81 98 ff ff       	call   c0001c9d <st_dword>
c000841c:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008422:	ba 02 00 00 00       	mov    edx,0x2
c0008427:	e8 71 98 ff ff       	call   c0001c9d <st_dword>
c000842c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008431:	89 f0                	mov    eax,esi
c0008433:	e8 61 98 ff ff       	call   c0001c99 <st_word>
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	6a 01                	push   0x1
c000843d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008441:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008445:	83 c0 07             	add    eax,0x7
c0008448:	83 d2 00             	adc    edx,0x0
c000844b:	52                   	push   edx
c000844c:	50                   	push   eax
c000844d:	55                   	push   ebp
c000844e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008452:	e8 9b 97 ff ff       	call   c0001bf2 <disk_write>
c0008457:	83 c4 14             	add    esp,0x14
c000845a:	6a 01                	push   0x1
c000845c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008460:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008464:	83 c0 01             	add    eax,0x1
c0008467:	83 d2 00             	adc    edx,0x0
c000846a:	52                   	push   edx
c000846b:	50                   	push   eax
c000846c:	55                   	push   ebp
c000846d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008471:	e8 7c 97 ff ff       	call   c0001bf2 <disk_write>
c0008476:	83 c4 20             	add    esp,0x20
c0008479:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008480:	31 d2                	xor    edx,edx
c0008482:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008488:	31 db                	xor    ebx,ebx
c000848a:	89 e8                	mov    eax,ebp
c000848c:	e8 2a 98 ff ff       	call   c0001cbb <mem_set>
c0008491:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008496:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000849d:	0f 94 c3             	sete   bl
c00084a0:	4b                   	dec    ebx
c00084a1:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00084a7:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00084ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084b2:	75 21                	jne    c00084d5 <f_mkfs+0xf68>
c00084b4:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00084b9:	89 e8                	mov    eax,ebp
c00084bb:	e8 dd 97 ff ff       	call   c0001c9d <st_dword>
c00084c0:	8d 45 04             	lea    eax,[ebp+0x4]
c00084c3:	83 ca ff             	or     edx,0xffffffff
c00084c6:	e8 d2 97 ff ff       	call   c0001c9d <st_dword>
c00084cb:	8d 45 08             	lea    eax,[ebp+0x8]
c00084ce:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00084d3:	eb 04                	jmp    c00084d9 <f_mkfs+0xf6c>
c00084d5:	89 da                	mov    edx,ebx
c00084d7:	89 e8                	mov    eax,ebp
c00084d9:	e8 bf 97 ff ff       	call   c0001c9d <st_dword>
c00084de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00084e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084e6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00084ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00084ee:	39 ce                	cmp    esi,ecx
c00084f0:	76 02                	jbe    c00084f4 <f_mkfs+0xf87>
c00084f2:	89 ce                	mov    esi,ecx
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	56                   	push   esi
c00084f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008500:	55                   	push   ebp
c0008501:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008505:	e8 e8 96 ff ff       	call   c0001bf2 <disk_write>
c000850a:	83 c4 20             	add    esp,0x20
c000850d:	85 c0                	test   eax,eax
c000850f:	0f 85 09 01 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008515:	31 d2                	xor    edx,edx
c0008517:	b9 00 02 00 00       	mov    ecx,0x200
c000851c:	89 e8                	mov    eax,ebp
c000851e:	e8 98 97 ff ff       	call   c0001cbb <mem_set>
c0008523:	31 d2                	xor    edx,edx
c0008525:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008529:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000852d:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008531:	75 b3                	jne    c00084e6 <f_mkfs+0xf79>
c0008533:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008536:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000853d:	40                   	inc    eax
c000853e:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008542:	0f 87 65 ff ff ff    	ja     c00084ad <f_mkfs+0xf40>
c0008548:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000854d:	74 04                	je     c0008553 <f_mkfs+0xfe6>
c000854f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008553:	89 fb                	mov    ebx,edi
c0008555:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008559:	76 04                	jbe    c000855f <f_mkfs+0xff2>
c000855b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000855f:	83 ec 0c             	sub    esp,0xc
c0008562:	53                   	push   ebx
c0008563:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008567:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000856b:	55                   	push   ebp
c000856c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008570:	e8 7d 96 ff ff       	call   c0001bf2 <disk_write>
c0008575:	83 c4 20             	add    esp,0x20
c0008578:	85 c0                	test   eax,eax
c000857a:	0f 85 9e 00 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008580:	31 d2                	xor    edx,edx
c0008582:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008586:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000858a:	29 df                	sub    edi,ebx
c000858c:	75 c5                	jne    c0008553 <f_mkfs+0xfe6>
c000858e:	b1 0c                	mov    cl,0xc
c0008590:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008595:	74 1d                	je     c00085b4 <f_mkfs+0x1047>
c0008597:	b8 ff ff 00 00       	mov    eax,0xffff
c000859c:	b1 06                	mov    cl,0x6
c000859e:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00085a2:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00085a6:	72 0c                	jb     c00085b4 <f_mkfs+0x1047>
c00085a8:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00085ad:	0f 94 c1             	sete   cl
c00085b0:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00085b4:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00085b9:	75 4c                	jne    c0008607 <f_mkfs+0x109a>
c00085bb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00085bf:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00085c3:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00085ca:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00085d1:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00085dc:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00085e7:	0f b6 c9             	movzx  ecx,cl
c00085ea:	83 ec 0c             	sub    esp,0xc
c00085ed:	55                   	push   ebp
c00085ee:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00085f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f9:	e8 f9 bf ff ff       	call   c00045f7 <create_partition>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	89 c3                	mov    ebx,eax
c0008603:	85 c0                	test   eax,eax
c0008605:	75 34                	jne    c000863b <f_mkfs+0x10ce>
c0008607:	31 db                	xor    ebx,ebx
c0008609:	50                   	push   eax
c000860a:	6a 00                	push   0x0
c000860c:	6a 00                	push   0x0
c000860e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008612:	e8 f1 95 ff ff       	call   c0001c08 <disk_ioctl>
c0008617:	83 c4 10             	add    esp,0x10
c000861a:	85 c0                	test   eax,eax
c000861c:	74 1d                	je     c000863b <f_mkfs+0x10ce>
c000861e:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008626:	75 0c                	jne    c0008634 <f_mkfs+0x10c7>
c0008628:	83 ec 0c             	sub    esp,0xc
c000862b:	55                   	push   ebp
c000862c:	e8 75 00 00 00       	call   c00086a6 <ff_memfree>
c0008631:	83 c4 10             	add    esp,0x10
c0008634:	bb 01 00 00 00       	mov    ebx,0x1
c0008639:	eb 48                	jmp    c0008683 <f_mkfs+0x1116>
c000863b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008643:	75 3e                	jne    c0008683 <f_mkfs+0x1116>
c0008645:	83 ec 0c             	sub    esp,0xc
c0008648:	55                   	push   ebp
c0008649:	e8 58 00 00 00       	call   c00086a6 <ff_memfree>
c000864e:	83 c4 10             	add    esp,0x10
c0008651:	eb 30                	jmp    c0008683 <f_mkfs+0x1116>
c0008653:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008658:	0f 85 eb fa ff ff    	jne    c0008149 <f_mkfs+0xbdc>
c000865e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008662:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008668:	0f 86 b8 f9 ff ff    	jbe    c0008026 <f_mkfs+0xab9>
c000866e:	e9 bf fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008673:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008678:	0f 85 c0 fa ff ff    	jne    c000813e <f_mkfs+0xbd1>
c000867e:	e9 af fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008683:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008689:	89 d8                	mov    eax,ebx
c000868b:	5b                   	pop    ebx
c000868c:	5e                   	pop    esi
c000868d:	5f                   	pop    edi
c000868e:	5d                   	pop    ebp
c000868f:	c3                   	ret    

c0008690 <ff_memalloc>:
c0008690:	83 ec 0c             	sub    esp,0xc
c0008693:	83 ec 0c             	sub    esp,0xc
c0008696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000869a:	e8 30 71 00 00       	call   c000f7cf <malloc>
c000869f:	83 c4 10             	add    esp,0x10
c00086a2:	83 c4 0c             	add    esp,0xc
c00086a5:	c3                   	ret    

c00086a6 <ff_memfree>:
c00086a6:	83 ec 0c             	sub    esp,0xc
c00086a9:	83 ec 0c             	sub    esp,0xc
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	e8 2a 71 00 00       	call   c000f7df <free>
c00086b5:	83 c4 10             	add    esp,0x10
c00086b8:	90                   	nop
c00086b9:	83 c4 0c             	add    esp,0xc
c00086bc:	c3                   	ret    

c00086bd <ff_uni2oem>:
c00086bd:	83 ec 14             	sub    esp,0x14
c00086c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086c4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086c8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00086cf:	c7 44 24 0c 80 99 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029980
c00086d7:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00086dc:	77 0b                	ja     c00086e9 <ff_uni2oem+0x2c>
c00086de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00086e2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00086e7:	eb 5b                	jmp    c0008744 <ff_uni2oem+0x87>
c00086e9:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00086f1:	77 51                	ja     c0008744 <ff_uni2oem+0x87>
c00086f3:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086f9:	75 49                	jne    c0008744 <ff_uni2oem+0x87>
c00086fb:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008702:	eb 0b                	jmp    c000870f <ff_uni2oem+0x52>
c0008704:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008709:	40                   	inc    eax
c000870a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000870f:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008715:	77 1b                	ja     c0008732 <ff_uni2oem+0x75>
c0008717:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000871c:	01 c0                	add    eax,eax
c000871e:	89 c2                	mov    edx,eax
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	01 d0                	add    eax,edx
c0008726:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008729:	0f b7 c0             	movzx  eax,ax
c000872c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008730:	75 d2                	jne    c0008704 <ff_uni2oem+0x47>
c0008732:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008737:	83 e8 80             	sub    eax,0xffffff80
c000873a:	25 ff 00 00 00       	and    eax,0xff
c000873f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008744:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008749:	83 c4 14             	add    esp,0x14
c000874c:	c3                   	ret    

c000874d <ff_oem2uni>:
c000874d:	83 ec 18             	sub    esp,0x18
c0008750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008758:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000875d:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008761:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008768:	c7 44 24 10 80 99 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029980
c0008770:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008776:	77 0b                	ja     c0008783 <ff_oem2uni+0x36>
c0008778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000877c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008781:	eb 2d                	jmp    c00087b0 <ff_oem2uni+0x63>
c0008783:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008789:	75 25                	jne    c00087b0 <ff_oem2uni+0x63>
c000878b:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008792:	77 1c                	ja     c00087b0 <ff_oem2uni+0x63>
c0008794:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008799:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000879e:	01 c0                	add    eax,eax
c00087a0:	89 c2                	mov    edx,eax
c00087a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087a6:	01 d0                	add    eax,edx
c00087a8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087ab:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00087b0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00087b5:	83 c4 18             	add    esp,0x18
c00087b8:	c3                   	ret    

c00087b9 <ff_wtoupper>:
c00087b9:	83 ec 10             	sub    esp,0x10
c00087bc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00087c4:	0f 87 3e 01 00 00    	ja     c0008908 <ff_wtoupper+0x14f>
c00087ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087ce:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d3:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00087da:	77 07                	ja     c00087e3 <ff_wtoupper+0x2a>
c00087dc:	b8 80 97 02 c0       	mov    eax,0xc0029780
c00087e1:	eb 05                	jmp    c00087e8 <ff_wtoupper+0x2f>
c00087e3:	b8 c0 96 02 c0       	mov    eax,0xc00296c0
c00087e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f0:	8d 50 02             	lea    edx,[eax+0x2]
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087fa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00087ff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008805:	0f 84 f4 00 00 00    	je     c00088ff <ff_wtoupper+0x146>
c000880b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008810:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008815:	0f 82 e4 00 00 00    	jb     c00088ff <ff_wtoupper+0x146>
c000881b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000881f:	8d 50 02             	lea    edx,[eax+0x2]
c0008822:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008826:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008829:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000882e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008833:	66 c1 e8 08          	shr    ax,0x8
c0008837:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000883c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008843:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008848:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000884d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008852:	01 ca                	add    edx,ecx
c0008854:	39 d0                	cmp    eax,edx
c0008856:	0f 8d 86 00 00 00    	jge    c00088e2 <ff_wtoupper+0x129>
c000885c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008861:	83 f8 08             	cmp    eax,0x8
c0008864:	0f 87 94 00 00 00    	ja     c00088fe <ff_wtoupper+0x145>
c000886a:	8b 04 85 80 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6980]
c0008871:	ff e0                	jmp    eax
c0008873:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008878:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000887d:	29 c2                	sub    edx,eax
c000887f:	89 d0                	mov    eax,edx
c0008881:	01 c0                	add    eax,eax
c0008883:	89 c2                	mov    edx,eax
c0008885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008889:	01 d0                	add    eax,edx
c000888b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000888e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008893:	eb 4b                	jmp    c00088e0 <ff_wtoupper+0x127>
c0008895:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000889a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000889e:	83 e0 01             	and    eax,0x1
c00088a1:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00088a6:	eb 38                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088a8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00088ae:	eb 30                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00088b6:	eb 28                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00088be:	eb 20                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00088c6:	eb 18                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00088ce:	eb 10                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00088d6:	eb 08                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00088df:	90                   	nop
c00088e0:	eb 1c                	jmp    c00088fe <ff_wtoupper+0x145>
c00088e2:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00088e8:	0f 85 fe fe ff ff    	jne    c00087ec <ff_wtoupper+0x33>
c00088ee:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00088f3:	01 c0                	add    eax,eax
c00088f5:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00088f9:	e9 ee fe ff ff       	jmp    c00087ec <ff_wtoupper+0x33>
c00088fe:	90                   	nop
c00088ff:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008904:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008908:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000890c:	83 c4 10             	add    esp,0x10
c000890f:	c3                   	ret    

c0008910 <psrc_set_converter>:
c0008910:	56                   	push   esi
c0008911:	89 d6                	mov    esi,edx
c0008913:	53                   	push   ebx
c0008914:	89 c3                	mov    ebx,eax
c0008916:	83 ec 0c             	sub    esp,0xc
c0008919:	52                   	push   edx
c000891a:	50                   	push   eax
c000891b:	e8 6f 55 00 00       	call   c000de8f <sinc_set_converter>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	85 c0                	test   eax,eax
c0008925:	74 25                	je     c000894c <psrc_set_converter+0x3c>
c0008927:	50                   	push   eax
c0008928:	50                   	push   eax
c0008929:	56                   	push   esi
c000892a:	53                   	push   ebx
c000892b:	e8 17 5d 00 00       	call   c000e647 <zoh_set_converter>
c0008930:	83 c4 10             	add    esp,0x10
c0008933:	85 c0                	test   eax,eax
c0008935:	74 15                	je     c000894c <psrc_set_converter+0x3c>
c0008937:	51                   	push   ecx
c0008938:	51                   	push   ecx
c0008939:	56                   	push   esi
c000893a:	53                   	push   ebx
c000893b:	e8 0f 11 00 00       	call   c0009a4f <linear_set_converter>
c0008940:	83 c4 10             	add    esp,0x10
c0008943:	ba 0a 00 00 00       	mov    edx,0xa
c0008948:	85 c0                	test   eax,eax
c000894a:	75 02                	jne    c000894e <psrc_set_converter+0x3e>
c000894c:	31 d2                	xor    edx,edx
c000894e:	89 d0                	mov    eax,edx
c0008950:	5a                   	pop    edx
c0008951:	5b                   	pop    ebx
c0008952:	5e                   	pop    esi
c0008953:	c3                   	ret    

c0008954 <src_delete>:
c0008954:	53                   	push   ebx
c0008955:	83 ec 08             	sub    esp,0x8
c0008958:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000895c:	85 db                	test   ebx,ebx
c000895e:	74 29                	je     c0008989 <src_delete+0x35>
c0008960:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008963:	85 c0                	test   eax,eax
c0008965:	74 0c                	je     c0008973 <src_delete+0x1f>
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	50                   	push   eax
c000896b:	e8 6f 6e 00 00       	call   c000f7df <free>
c0008970:	83 c4 10             	add    esp,0x10
c0008973:	50                   	push   eax
c0008974:	6a 3c                	push   0x3c
c0008976:	6a 00                	push   0x0
c0008978:	53                   	push   ebx
c0008979:	e8 d2 7d ff ff       	call   c0000750 <memset>
c000897e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008981:	e8 59 6e 00 00       	call   c000f7df <free>
c0008986:	83 c4 10             	add    esp,0x10
c0008989:	31 c0                	xor    eax,eax
c000898b:	83 c4 08             	add    esp,0x8
c000898e:	5b                   	pop    ebx
c000898f:	c3                   	ret    

c0008990 <src_process>:
c0008990:	55                   	push   ebp
c0008991:	57                   	push   edi
c0008992:	56                   	push   esi
c0008993:	53                   	push   ebx
c0008994:	83 ec 1c             	sub    esp,0x1c
c0008997:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000899b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000899f:	85 ed                	test   ebp,ebp
c00089a1:	0f 84 6f 01 00 00    	je     c0008b16 <src_process+0x186>
c00089a7:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00089ab:	0f 84 6c 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089b1:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00089b5:	0f 84 62 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089bb:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00089c2:	0f 85 5c 01 00 00    	jne    c0008b24 <src_process+0x194>
c00089c8:	85 db                	test   ebx,ebx
c00089ca:	0f 84 5b 01 00 00    	je     c0008b2b <src_process+0x19b>
c00089d0:	8b 33                	mov    esi,DWORD PTR [ebx]
c00089d2:	85 f6                	test   esi,esi
c00089d4:	0f 84 58 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089da:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00089dd:	85 ff                	test   edi,edi
c00089df:	0f 84 4d 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089e5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00089e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00089eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00089f3:	68 00 00 70 3f       	push   0x3f700000
c00089f8:	6a 00                	push   0x0
c00089fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a02:	e8 90 fb 01 00       	call   c0028597 <__ltdf2>
c0008a07:	83 c4 10             	add    esp,0x10
c0008a0a:	85 c0                	test   eax,eax
c0008a0c:	0f 88 27 01 00 00    	js     c0008b39 <src_process+0x1a9>
c0008a12:	68 00 00 70 40       	push   0x40700000
c0008a17:	6a 00                	push   0x0
c0008a19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a21:	e8 53 fb 01 00       	call   c0028579 <__gtdf2>
c0008a26:	83 c4 10             	add    esp,0x10
c0008a29:	85 c0                	test   eax,eax
c0008a2b:	0f 8f 08 01 00 00    	jg     c0008b39 <src_process+0x1a9>
c0008a31:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008a35:	79 07                	jns    c0008a3e <src_process+0xae>
c0008a37:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008a3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a41:	85 c0                	test   eax,eax
c0008a43:	79 50                	jns    c0008a95 <src_process+0x105>
c0008a45:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008a4c:	39 fe                	cmp    esi,edi
c0008a4e:	72 37                	jb     c0008a87 <src_process+0xf7>
c0008a50:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008a57:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008a5e:	68 00 00 70 3f       	push   0x3f700000
c0008a63:	6a 00                	push   0x0
c0008a65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008a68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008a6b:	e8 27 fb 01 00       	call   c0028597 <__ltdf2>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	85 c0                	test   eax,eax
c0008a75:	79 37                	jns    c0008aae <src_process+0x11e>
c0008a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008a7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008a82:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008a85:	eb 27                	jmp    c0008aae <src_process+0x11e>
c0008a87:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008a8a:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a8e:	8d 04 86             	lea    eax,[esi+eax*4]
c0008a91:	39 c7                	cmp    edi,eax
c0008a93:	eb 0d                	jmp    c0008aa2 <src_process+0x112>
c0008a95:	39 fe                	cmp    esi,edi
c0008a97:	72 ee                	jb     c0008a87 <src_process+0xf7>
c0008a99:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a9d:	8d 04 87             	lea    eax,[edi+eax*4]
c0008aa0:	39 c6                	cmp    esi,eax
c0008aa2:	73 ac                	jae    c0008a50 <src_process+0xc0>
c0008aa4:	b8 10 00 00 00       	mov    eax,0x10
c0008aa9:	e9 90 00 00 00       	jmp    c0008b3e <src_process+0x1ae>
c0008aae:	83 ec 10             	sub    esp,0x10
c0008ab1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008ab4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008ab7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008aba:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008abd:	e8 da f1 01 00       	call   c0027c9c <__subdf3>
c0008ac2:	83 c4 18             	add    esp,0x18
c0008ac5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ac9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008acd:	52                   	push   edx
c0008ace:	50                   	push   eax
c0008acf:	e8 5c fc 01 00       	call   c0028730 <fabs>
c0008ad4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ad8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008adc:	83 c4 10             	add    esp,0x10
c0008adf:	68 af 03 d2 3c       	push   0x3cd203af
c0008ae4:	68 16 56 e7 9e       	push   0x9ee75616
c0008ae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af1:	e8 a1 fa 01 00       	call   c0028597 <__ltdf2>
c0008af6:	83 c4 10             	add    esp,0x10
c0008af9:	85 c0                	test   eax,eax
c0008afb:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008aff:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008b03:	79 05                	jns    c0008b0a <src_process+0x17a>
c0008b05:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008b08:	eb 03                	jmp    c0008b0d <src_process+0x17d>
c0008b0a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008b0d:	83 c4 1c             	add    esp,0x1c
c0008b10:	5b                   	pop    ebx
c0008b11:	5e                   	pop    esi
c0008b12:	5f                   	pop    edi
c0008b13:	5d                   	pop    ebp
c0008b14:	ff e0                	jmp    eax
c0008b16:	b8 02 00 00 00       	mov    eax,0x2
c0008b1b:	eb 21                	jmp    c0008b3e <src_process+0x1ae>
c0008b1d:	b8 07 00 00 00       	mov    eax,0x7
c0008b22:	eb 1a                	jmp    c0008b3e <src_process+0x1ae>
c0008b24:	b8 12 00 00 00       	mov    eax,0x12
c0008b29:	eb 13                	jmp    c0008b3e <src_process+0x1ae>
c0008b2b:	b8 03 00 00 00       	mov    eax,0x3
c0008b30:	eb 0c                	jmp    c0008b3e <src_process+0x1ae>
c0008b32:	b8 04 00 00 00       	mov    eax,0x4
c0008b37:	eb 05                	jmp    c0008b3e <src_process+0x1ae>
c0008b39:	b8 06 00 00 00       	mov    eax,0x6
c0008b3e:	83 c4 1c             	add    esp,0x1c
c0008b41:	5b                   	pop    ebx
c0008b42:	5e                   	pop    esi
c0008b43:	5f                   	pop    edi
c0008b44:	5d                   	pop    ebp
c0008b45:	c3                   	ret    

c0008b46 <src_callback_read>:
c0008b46:	55                   	push   ebp
c0008b47:	57                   	push   edi
c0008b48:	56                   	push   esi
c0008b49:	53                   	push   ebx
c0008b4a:	83 ec 3c             	sub    esp,0x3c
c0008b4d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008b51:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008b55:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008b59:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008b5d:	85 ed                	test   ebp,ebp
c0008b5f:	0f 8e 52 01 00 00    	jle    c0008cb7 <src_callback_read+0x171>
c0008b65:	85 db                	test   ebx,ebx
c0008b67:	0f 84 4a 01 00 00    	je     c0008cb7 <src_callback_read+0x171>
c0008b6d:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008b74:	74 0c                	je     c0008b82 <src_callback_read+0x3c>
c0008b76:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008b7d:	e9 35 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b82:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008b86:	75 0c                	jne    c0008b94 <src_callback_read+0x4e>
c0008b88:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008b8f:	e9 23 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b94:	51                   	push   ecx
c0008b95:	6a 24                	push   0x24
c0008b97:	6a 00                	push   0x0
c0008b99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008b9d:	50                   	push   eax
c0008b9e:	e8 ad 7b ff ff       	call   c0000750 <memset>
c0008ba3:	83 c4 10             	add    esp,0x10
c0008ba6:	68 00 00 70 3f       	push   0x3f700000
c0008bab:	6a 00                	push   0x0
c0008bad:	57                   	push   edi
c0008bae:	56                   	push   esi
c0008baf:	e8 e3 f9 01 00       	call   c0028597 <__ltdf2>
c0008bb4:	83 c4 10             	add    esp,0x10
c0008bb7:	85 c0                	test   eax,eax
c0008bb9:	78 3e                	js     c0008bf9 <src_callback_read+0xb3>
c0008bbb:	68 00 00 70 40       	push   0x40700000
c0008bc0:	6a 00                	push   0x0
c0008bc2:	57                   	push   edi
c0008bc3:	56                   	push   esi
c0008bc4:	e8 b0 f9 01 00       	call   c0028579 <__gtdf2>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	85 c0                	test   eax,eax
c0008bce:	7f 29                	jg     c0008bf9 <src_callback_read+0xb3>
c0008bd0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008bd4:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0008bd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bdc:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008be0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008be3:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0008be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008beb:	31 f6                	xor    esi,esi
c0008bed:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008bf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008bf4:	e9 97 00 00 00       	jmp    c0008c90 <src_callback_read+0x14a>
c0008bf9:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008c00:	e9 b2 00 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008c05:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0d:	52                   	push   edx
c0008c0e:	52                   	push   edx
c0008c0f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008c13:	50                   	push   eax
c0008c14:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c17:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008c1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008c1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008c22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008c26:	83 c4 10             	add    esp,0x10
c0008c29:	85 c0                	test   eax,eax
c0008c2b:	75 08                	jne    c0008c35 <src_callback_read+0xef>
c0008c2d:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008c35:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008c3c:	50                   	push   eax
c0008c3d:	50                   	push   eax
c0008c3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008c42:	50                   	push   eax
c0008c43:	53                   	push   ebx
c0008c44:	e8 47 fd ff ff       	call   c0008990 <src_process>
c0008c49:	83 c4 10             	add    esp,0x10
c0008c4c:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c53:	85 c0                	test   eax,eax
c0008c55:	75 49                	jne    c0008ca0 <src_callback_read+0x15a>
c0008c57:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008c5b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c5e:	89 f9                	mov    ecx,edi
c0008c60:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008c64:	0f af ca             	imul   ecx,edx
c0008c67:	c1 e1 02             	shl    ecx,0x2
c0008c6a:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008c6e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008c72:	0f af d1             	imul   edx,ecx
c0008c75:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008c79:	c1 e2 02             	shl    edx,0x2
c0008c7c:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008c80:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008c83:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008c88:	74 12                	je     c0008c9c <src_callback_read+0x156>
c0008c8a:	39 d5                	cmp    ebp,edx
c0008c8c:	7e 14                	jle    c0008ca2 <src_callback_read+0x15c>
c0008c8e:	89 d6                	mov    esi,edx
c0008c90:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008c95:	75 9e                	jne    c0008c35 <src_callback_read+0xef>
c0008c97:	e9 69 ff ff ff       	jmp    c0008c05 <src_callback_read+0xbf>
c0008c9c:	85 c9                	test   ecx,ecx
c0008c9e:	75 ea                	jne    c0008c8a <src_callback_read+0x144>
c0008ca0:	89 f2                	mov    edx,esi
c0008ca2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ca6:	85 c0                	test   eax,eax
c0008ca8:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008cab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008caf:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008cb2:	74 05                	je     c0008cb9 <src_callback_read+0x173>
c0008cb4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008cb7:	31 d2                	xor    edx,edx
c0008cb9:	83 c4 3c             	add    esp,0x3c
c0008cbc:	89 d0                	mov    eax,edx
c0008cbe:	5b                   	pop    ebx
c0008cbf:	5e                   	pop    esi
c0008cc0:	5f                   	pop    edi
c0008cc1:	5d                   	pop    ebp
c0008cc2:	c3                   	ret    

c0008cc3 <src_set_ratio>:
c0008cc3:	57                   	push   edi
c0008cc4:	ba 02 00 00 00       	mov    edx,0x2
c0008cc9:	56                   	push   esi
c0008cca:	53                   	push   ebx
c0008ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ccf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008cd3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008cd7:	85 db                	test   ebx,ebx
c0008cd9:	74 4c                	je     c0008d27 <src_set_ratio+0x64>
c0008cdb:	ba 07 00 00 00       	mov    edx,0x7
c0008ce0:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ce4:	74 41                	je     c0008d27 <src_set_ratio+0x64>
c0008ce6:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008cea:	74 3b                	je     c0008d27 <src_set_ratio+0x64>
c0008cec:	68 00 00 70 3f       	push   0x3f700000
c0008cf1:	6a 00                	push   0x0
c0008cf3:	57                   	push   edi
c0008cf4:	56                   	push   esi
c0008cf5:	e8 9d f8 01 00       	call   c0028597 <__ltdf2>
c0008cfa:	83 c4 10             	add    esp,0x10
c0008cfd:	ba 06 00 00 00       	mov    edx,0x6
c0008d02:	85 c0                	test   eax,eax
c0008d04:	78 21                	js     c0008d27 <src_set_ratio+0x64>
c0008d06:	68 00 00 70 40       	push   0x40700000
c0008d0b:	6a 00                	push   0x0
c0008d0d:	57                   	push   edi
c0008d0e:	56                   	push   esi
c0008d0f:	e8 65 f8 01 00       	call   c0028579 <__gtdf2>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	ba 06 00 00 00       	mov    edx,0x6
c0008d1c:	85 c0                	test   eax,eax
c0008d1e:	7f 07                	jg     c0008d27 <src_set_ratio+0x64>
c0008d20:	89 33                	mov    DWORD PTR [ebx],esi
c0008d22:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008d25:	31 d2                	xor    edx,edx
c0008d27:	5b                   	pop    ebx
c0008d28:	89 d0                	mov    eax,edx
c0008d2a:	5e                   	pop    esi
c0008d2b:	5f                   	pop    edi
c0008d2c:	c3                   	ret    

c0008d2d <src_get_channels>:
c0008d2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d31:	b8 02 00 00 00       	mov    eax,0x2
c0008d36:	85 d2                	test   edx,edx
c0008d38:	74 14                	je     c0008d4e <src_get_channels+0x21>
c0008d3a:	b8 07 00 00 00       	mov    eax,0x7
c0008d3f:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008d43:	74 09                	je     c0008d4e <src_get_channels+0x21>
c0008d45:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008d49:	74 03                	je     c0008d4e <src_get_channels+0x21>
c0008d4b:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008d4e:	c3                   	ret    

c0008d4f <src_reset>:
c0008d4f:	53                   	push   ebx
c0008d50:	b8 02 00 00 00       	mov    eax,0x2
c0008d55:	83 ec 08             	sub    esp,0x8
c0008d58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008d5c:	85 db                	test   ebx,ebx
c0008d5e:	74 36                	je     c0008d96 <src_reset+0x47>
c0008d60:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008d63:	85 c0                	test   eax,eax
c0008d65:	74 09                	je     c0008d70 <src_reset+0x21>
c0008d67:	83 ec 0c             	sub    esp,0xc
c0008d6a:	53                   	push   ebx
c0008d6b:	ff d0                	call   eax
c0008d6d:	83 c4 10             	add    esp,0x10
c0008d70:	31 c0                	xor    eax,eax
c0008d72:	31 d2                	xor    edx,edx
c0008d74:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008d77:	89 03                	mov    DWORD PTR [ebx],eax
c0008d79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008d7c:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008d7f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008d86:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008d8d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d94:	31 c0                	xor    eax,eax
c0008d96:	83 c4 08             	add    esp,0x8
c0008d99:	5b                   	pop    ebx
c0008d9a:	c3                   	ret    

c0008d9b <src_new>:
c0008d9b:	57                   	push   edi
c0008d9c:	56                   	push   esi
c0008d9d:	53                   	push   ebx
c0008d9e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008da2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008da6:	85 f6                	test   esi,esi
c0008da8:	74 73                	je     c0008e1d <src_new+0x82>
c0008daa:	85 ff                	test   edi,edi
c0008dac:	7f 08                	jg     c0008db6 <src_new+0x1b>
c0008dae:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008db4:	eb 1e                	jmp    c0008dd4 <src_new+0x39>
c0008db6:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008dbc:	50                   	push   eax
c0008dbd:	50                   	push   eax
c0008dbe:	6a 3c                	push   0x3c
c0008dc0:	6a 01                	push   0x1
c0008dc2:	e8 38 6a 00 00       	call   c000f7ff <calloc>
c0008dc7:	83 c4 10             	add    esp,0x10
c0008dca:	89 c3                	mov    ebx,eax
c0008dcc:	85 c0                	test   eax,eax
c0008dce:	75 10                	jne    c0008de0 <src_new+0x45>
c0008dd0:	85 f6                	test   esi,esi
c0008dd2:	75 04                	jne    c0008dd8 <src_new+0x3d>
c0008dd4:	31 db                	xor    ebx,ebx
c0008dd6:	eb 4b                	jmp    c0008e23 <src_new+0x88>
c0008dd8:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008dde:	eb 43                	jmp    c0008e23 <src_new+0x88>
c0008de0:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008de3:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008dea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008dee:	e8 1d fb ff ff       	call   c0008910 <psrc_set_converter>
c0008df3:	85 c0                	test   eax,eax
c0008df5:	74 18                	je     c0008e0f <src_new+0x74>
c0008df7:	85 f6                	test   esi,esi
c0008df9:	74 06                	je     c0008e01 <src_new+0x66>
c0008dfb:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008e01:	83 ec 0c             	sub    esp,0xc
c0008e04:	53                   	push   ebx
c0008e05:	31 db                	xor    ebx,ebx
c0008e07:	e8 d3 69 00 00       	call   c000f7df <free>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	83 ec 0c             	sub    esp,0xc
c0008e12:	53                   	push   ebx
c0008e13:	e8 37 ff ff ff       	call   c0008d4f <src_reset>
c0008e18:	83 c4 10             	add    esp,0x10
c0008e1b:	eb 06                	jmp    c0008e23 <src_new+0x88>
c0008e1d:	85 ff                	test   edi,edi
c0008e1f:	7f 9b                	jg     c0008dbc <src_new+0x21>
c0008e21:	eb b1                	jmp    c0008dd4 <src_new+0x39>
c0008e23:	89 d8                	mov    eax,ebx
c0008e25:	5b                   	pop    ebx
c0008e26:	5e                   	pop    esi
c0008e27:	5f                   	pop    edi
c0008e28:	c3                   	ret    

c0008e29 <src_callback_new>:
c0008e29:	56                   	push   esi
c0008e2a:	53                   	push   ebx
c0008e2b:	53                   	push   ebx
c0008e2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008e30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008e34:	85 f6                	test   esi,esi
c0008e36:	75 0e                	jne    c0008e46 <src_callback_new+0x1d>
c0008e38:	31 db                	xor    ebx,ebx
c0008e3a:	85 c0                	test   eax,eax
c0008e3c:	74 47                	je     c0008e85 <src_callback_new+0x5c>
c0008e3e:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008e44:	eb 3f                	jmp    c0008e85 <src_callback_new+0x5c>
c0008e46:	85 c0                	test   eax,eax
c0008e48:	74 06                	je     c0008e50 <src_callback_new+0x27>
c0008e4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008e50:	51                   	push   ecx
c0008e51:	50                   	push   eax
c0008e52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e5a:	e8 3c ff ff ff       	call   c0008d9b <src_new>
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	89 c3                	mov    ebx,eax
c0008e64:	85 c0                	test   eax,eax
c0008e66:	74 1d                	je     c0008e85 <src_callback_new+0x5c>
c0008e68:	83 ec 0c             	sub    esp,0xc
c0008e6b:	50                   	push   eax
c0008e6c:	e8 de fe ff ff       	call   c0008d4f <src_reset>
c0008e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e75:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008e7c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008e7f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008e82:	83 c4 10             	add    esp,0x10
c0008e85:	89 d8                	mov    eax,ebx
c0008e87:	5a                   	pop    edx
c0008e88:	5b                   	pop    ebx
c0008e89:	5e                   	pop    esi
c0008e8a:	c3                   	ret    

c0008e8b <src_get_name>:
c0008e8b:	53                   	push   ebx
c0008e8c:	83 ec 14             	sub    esp,0x14
c0008e8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008e93:	53                   	push   ebx
c0008e94:	e8 d0 4f 00 00       	call   c000de69 <sinc_get_name>
c0008e99:	83 c4 10             	add    esp,0x10
c0008e9c:	85 c0                	test   eax,eax
c0008e9e:	75 1d                	jne    c0008ebd <src_get_name+0x32>
c0008ea0:	83 ec 0c             	sub    esp,0xc
c0008ea3:	53                   	push   ebx
c0008ea4:	e8 80 57 00 00       	call   c000e629 <zoh_get_name>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	75 0d                	jne    c0008ebd <src_get_name+0x32>
c0008eb0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eb4:	83 c4 08             	add    esp,0x8
c0008eb7:	5b                   	pop    ebx
c0008eb8:	e9 74 0b 00 00       	jmp    c0009a31 <linear_get_name>
c0008ebd:	83 c4 08             	add    esp,0x8
c0008ec0:	5b                   	pop    ebx
c0008ec1:	c3                   	ret    

c0008ec2 <src_get_description>:
c0008ec2:	53                   	push   ebx
c0008ec3:	83 ec 14             	sub    esp,0x14
c0008ec6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008eca:	53                   	push   ebx
c0008ecb:	e8 ac 4f 00 00       	call   c000de7c <sinc_get_description>
c0008ed0:	83 c4 10             	add    esp,0x10
c0008ed3:	85 c0                	test   eax,eax
c0008ed5:	75 1d                	jne    c0008ef4 <src_get_description+0x32>
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	53                   	push   ebx
c0008edb:	e8 58 57 00 00       	call   c000e638 <zoh_get_description>
c0008ee0:	83 c4 10             	add    esp,0x10
c0008ee3:	85 c0                	test   eax,eax
c0008ee5:	75 0d                	jne    c0008ef4 <src_get_description+0x32>
c0008ee7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eeb:	83 c4 08             	add    esp,0x8
c0008eee:	5b                   	pop    ebx
c0008eef:	e9 4c 0b 00 00       	jmp    c0009a40 <linear_get_description>
c0008ef4:	83 c4 08             	add    esp,0x8
c0008ef7:	5b                   	pop    ebx
c0008ef8:	c3                   	ret    

c0008ef9 <src_get_version>:
c0008ef9:	b8 80 9a 02 c0       	mov    eax,0xc0029a80
c0008efe:	c3                   	ret    

c0008eff <src_is_valid_ratio>:
c0008eff:	83 ec 1c             	sub    esp,0x1c
c0008f02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	68 00 00 70 3f       	push   0x3f700000
c0008f17:	6a 00                	push   0x0
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	e8 71 f6 01 00       	call   c0028597 <__ltdf2>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	31 d2                	xor    edx,edx
c0008f2b:	85 c0                	test   eax,eax
c0008f2d:	78 1e                	js     c0008f4d <src_is_valid_ratio+0x4e>
c0008f2f:	68 00 00 70 40       	push   0x40700000
c0008f34:	6a 00                	push   0x0
c0008f36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3e:	e8 36 f6 01 00       	call   c0028579 <__gtdf2>
c0008f43:	31 d2                	xor    edx,edx
c0008f45:	83 c4 10             	add    esp,0x10
c0008f48:	85 c0                	test   eax,eax
c0008f4a:	0f 9e c2             	setle  dl
c0008f4d:	89 d0                	mov    eax,edx
c0008f4f:	83 c4 1c             	add    esp,0x1c
c0008f52:	c3                   	ret    

c0008f53 <src_error>:
c0008f53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f57:	31 c0                	xor    eax,eax
c0008f59:	85 d2                	test   edx,edx
c0008f5b:	74 03                	je     c0008f60 <src_error+0xd>
c0008f5d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008f60:	c3                   	ret    

c0008f61 <src_strerror>:
c0008f61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f65:	31 c0                	xor    eax,eax
c0008f67:	83 fa 17             	cmp    edx,0x17
c0008f6a:	77 07                	ja     c0008f73 <src_strerror+0x12>
c0008f6c:	8b 04 95 e0 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6120]
c0008f73:	c3                   	ret    

c0008f74 <src_simple>:
c0008f74:	56                   	push   esi
c0008f75:	53                   	push   ebx
c0008f76:	83 ec 18             	sub    esp,0x18
c0008f79:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f7d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008f81:	50                   	push   eax
c0008f82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f8a:	e8 0c fe ff ff       	call   c0008d9b <src_new>
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	85 c0                	test   eax,eax
c0008f94:	75 06                	jne    c0008f9c <src_simple+0x28>
c0008f96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f9a:	eb 25                	jmp    c0008fc1 <src_simple+0x4d>
c0008f9c:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008fa3:	89 c3                	mov    ebx,eax
c0008fa5:	50                   	push   eax
c0008fa6:	50                   	push   eax
c0008fa7:	56                   	push   esi
c0008fa8:	53                   	push   ebx
c0008fa9:	e8 e2 f9 ff ff       	call   c0008990 <src_process>
c0008fae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008fb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fb5:	e8 9a f9 ff ff       	call   c0008954 <src_delete>
c0008fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	83 c4 14             	add    esp,0x14
c0008fc4:	5b                   	pop    ebx
c0008fc5:	5e                   	pop    esi
c0008fc6:	c3                   	ret    

c0008fc7 <src_short_to_float_array>:
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 18             	sub    esp,0x18
c0008fcb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008fcf:	85 db                	test   ebx,ebx
c0008fd1:	74 54                	je     c0009027 <src_short_to_float_array+0x60>
c0008fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fd7:	4b                   	dec    ebx
c0008fd8:	83 ec 0c             	sub    esp,0xc
c0008fdb:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008fdf:	50                   	push   eax
c0008fe0:	e8 46 f3 01 00       	call   c002832b <__floatsidf>
c0008fe5:	83 c4 10             	add    esp,0x10
c0008fe8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ff0:	68 00 00 00 3f       	push   0x3f000000
c0008ff5:	6a 00                	push   0x0
c0008ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fff:	e8 c4 ec 01 00       	call   c0027cc8 <__muldf3>
c0009004:	59                   	pop    ecx
c0009005:	59                   	pop    ecx
c0009006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000900e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009012:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009016:	e8 80 f5 01 00       	call   c002859b <__truncdfsf2>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009022:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009025:	eb a8                	jmp    c0008fcf <src_short_to_float_array+0x8>
c0009027:	83 c4 18             	add    esp,0x18
c000902a:	5b                   	pop    ebx
c000902b:	c3                   	ret    

c000902c <src_float_to_short_array>:
c000902c:	56                   	push   esi
c000902d:	53                   	push   ebx
c000902e:	83 ec 14             	sub    esp,0x14
c0009031:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009035:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009039:	85 db                	test   ebx,ebx
c000903b:	0f 84 a4 00 00 00    	je     c00090e5 <src_float_to_short_array+0xb9>
c0009041:	83 ec 0c             	sub    esp,0xc
c0009044:	4b                   	dec    ebx
c0009045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009049:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000904c:	e8 6e f6 01 00       	call   c00286bf <__extendsfdf2>
c0009051:	83 c4 10             	add    esp,0x10
c0009054:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009058:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000905c:	68 00 00 e0 41       	push   0x41e00000
c0009061:	6a 00                	push   0x0
c0009063:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009067:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000906b:	e8 58 ec 01 00       	call   c0027cc8 <__muldf3>
c0009070:	83 c4 10             	add    esp,0x10
c0009073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009077:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000907b:	68 ff ff df 41       	push   0x41dfffff
c0009080:	68 00 00 c0 ff       	push   0xffc00000
c0009085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009089:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000908d:	e8 03 f5 01 00       	call   c0028595 <__gedf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	85 c0                	test   eax,eax
c0009097:	78 08                	js     c00090a1 <src_float_to_short_array+0x75>
c0009099:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c000909f:	eb 98                	jmp    c0009039 <src_float_to_short_array+0xd>
c00090a1:	68 00 00 e0 c1       	push   0xc1e00000
c00090a6:	6a 00                	push   0x0
c00090a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b0:	e8 e4 f4 01 00       	call   c0028599 <__ledf2>
c00090b5:	83 c4 10             	add    esp,0x10
c00090b8:	85 c0                	test   eax,eax
c00090ba:	7f 0b                	jg     c00090c7 <src_float_to_short_array+0x9b>
c00090bc:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c00090c2:	e9 72 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090c7:	50                   	push   eax
c00090c8:	50                   	push   eax
c00090c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d1:	e8 7a f6 01 00       	call   c0028750 <lrint>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	c1 f8 10             	sar    eax,0x10
c00090dc:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00090e0:	e9 54 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090e5:	83 c4 14             	add    esp,0x14
c00090e8:	5b                   	pop    ebx
c00090e9:	5e                   	pop    esi
c00090ea:	c3                   	ret    

c00090eb <src_int_to_float_array>:
c00090eb:	53                   	push   ebx
c00090ec:	83 ec 18             	sub    esp,0x18
c00090ef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00090f3:	85 db                	test   ebx,ebx
c00090f5:	74 52                	je     c0009149 <src_int_to_float_array+0x5e>
c00090f7:	83 ec 0c             	sub    esp,0xc
c00090fa:	4b                   	dec    ebx
c00090fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00090ff:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0009102:	e8 24 f2 01 00       	call   c002832b <__floatsidf>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000910e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009112:	68 00 00 00 3e       	push   0x3e000000
c0009117:	6a 00                	push   0x0
c0009119:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009121:	e8 a2 eb 01 00       	call   c0027cc8 <__muldf3>
c0009126:	59                   	pop    ecx
c0009127:	59                   	pop    ecx
c0009128:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000912c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	e8 5e f4 01 00       	call   c002859b <__truncdfsf2>
c000913d:	83 c4 10             	add    esp,0x10
c0009140:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009144:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009147:	eb aa                	jmp    c00090f3 <src_int_to_float_array+0x8>
c0009149:	83 c4 18             	add    esp,0x18
c000914c:	5b                   	pop    ebx
c000914d:	c3                   	ret    

c000914e <src_float_to_int_array>:
c000914e:	56                   	push   esi
c000914f:	53                   	push   ebx
c0009150:	83 ec 14             	sub    esp,0x14
c0009153:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009157:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000915b:	85 db                	test   ebx,ebx
c000915d:	0f 84 a2 00 00 00    	je     c0009205 <src_float_to_int_array+0xb7>
c0009163:	83 ec 0c             	sub    esp,0xc
c0009166:	4b                   	dec    ebx
c0009167:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000916b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000916e:	e8 4c f5 01 00       	call   c00286bf <__extendsfdf2>
c0009173:	83 c4 10             	add    esp,0x10
c0009176:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000917a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000917e:	68 00 00 e0 41       	push   0x41e00000
c0009183:	6a 00                	push   0x0
c0009185:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009189:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000918d:	e8 36 eb 01 00       	call   c0027cc8 <__muldf3>
c0009192:	83 c4 10             	add    esp,0x10
c0009195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000919d:	68 ff ff df 41       	push   0x41dfffff
c00091a2:	68 00 00 c0 ff       	push   0xffc00000
c00091a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091af:	e8 e1 f3 01 00       	call   c0028595 <__gedf2>
c00091b4:	83 c4 10             	add    esp,0x10
c00091b7:	85 c0                	test   eax,eax
c00091b9:	78 09                	js     c00091c4 <src_float_to_int_array+0x76>
c00091bb:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c00091c2:	eb 97                	jmp    c000915b <src_float_to_int_array+0xd>
c00091c4:	68 00 00 e0 c1       	push   0xc1e00000
c00091c9:	6a 00                	push   0x0
c00091cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d3:	e8 c1 f3 01 00       	call   c0028599 <__ledf2>
c00091d8:	83 c4 10             	add    esp,0x10
c00091db:	85 c0                	test   eax,eax
c00091dd:	7f 0c                	jg     c00091eb <src_float_to_int_array+0x9d>
c00091df:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c00091e6:	e9 70 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c00091eb:	50                   	push   eax
c00091ec:	50                   	push   eax
c00091ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f5:	e8 56 f5 01 00       	call   c0028750 <lrint>
c00091fa:	83 c4 10             	add    esp,0x10
c00091fd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009200:	e9 56 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c0009205:	83 c4 14             	add    esp,0x14
c0009208:	5b                   	pop    ebx
c0009209:	5e                   	pop    esi
c000920a:	c3                   	ret    

c000920b <linear_vari_process>:
c000920b:	55                   	push   ebp
c000920c:	31 d2                	xor    edx,edx
c000920e:	57                   	push   edi
c000920f:	56                   	push   esi
c0009210:	53                   	push   ebx
c0009211:	83 ec 3c             	sub    esp,0x3c
c0009214:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009218:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000921c:	0f 8e d3 07 00 00    	jle    c00099f5 <linear_vari_process+0x7ea>
c0009222:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009226:	ba 05 00 00 00       	mov    edx,0x5
c000922b:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000922e:	85 db                	test   ebx,ebx
c0009230:	0f 84 bf 07 00 00    	je     c00099f5 <linear_vari_process+0x7ea>
c0009236:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009239:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000923d:	74 19                	je     c0009258 <linear_vari_process+0x4d>
c000923f:	31 d2                	xor    edx,edx
c0009241:	39 c2                	cmp    edx,eax
c0009243:	7d 0c                	jge    c0009251 <linear_vari_process+0x46>
c0009245:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009247:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000924a:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000924e:	42                   	inc    edx
c000924f:	eb f0                	jmp    c0009241 <linear_vari_process+0x36>
c0009251:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009258:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000925b:	0f af d0             	imul   edx,eax
c000925e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009261:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009265:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000926c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000926f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009276:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000927a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000927d:	8b 00                	mov    eax,DWORD PTR [eax]
c000927f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009283:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009287:	68 00 00 70 3f       	push   0x3f700000
c000928c:	6a 00                	push   0x0
c000928e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009296:	e8 fc f2 01 00       	call   c0028597 <__ltdf2>
c000929b:	83 c4 10             	add    esp,0x10
c000929e:	ba 16 00 00 00       	mov    edx,0x16
c00092a3:	85 c0                	test   eax,eax
c00092a5:	0f 88 4a 07 00 00    	js     c00099f5 <linear_vari_process+0x7ea>
c00092ab:	68 00 00 70 40       	push   0x40700000
c00092b0:	6a 00                	push   0x0
c00092b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092ba:	e8 ba f2 01 00       	call   c0028579 <__gtdf2>
c00092bf:	83 c4 10             	add    esp,0x10
c00092c2:	ba 16 00 00 00       	mov    edx,0x16
c00092c7:	85 c0                	test   eax,eax
c00092c9:	0f 8f 26 07 00 00    	jg     c00099f5 <linear_vari_process+0x7ea>
c00092cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00092d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00092d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e1:	68 00 00 f0 3f       	push   0x3ff00000
c00092e6:	6a 00                	push   0x0
c00092e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f0:	e8 a2 f2 01 00       	call   c0028597 <__ltdf2>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	85 c0                	test   eax,eax
c00092fa:	0f 89 89 02 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c0009300:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009303:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009306:	0f 8d 7d 02 00 00    	jge    c0009589 <linear_vari_process+0x37e>
c000930c:	83 ec 0c             	sub    esp,0xc
c000930f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009312:	e8 14 f0 01 00       	call   c002832b <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 04 24             	mov    DWORD PTR [esp],eax
c000931d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009321:	68 00 00 f0 3f       	push   0x3ff00000
c0009326:	6a 00                	push   0x0
c0009328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009330:	e8 16 e3 01 00       	call   c002764b <__adddf3>
c0009335:	83 c4 10             	add    esp,0x10
c0009338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009340:	52                   	push   edx
c0009341:	50                   	push   eax
c0009342:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000934a:	e8 79 e9 01 00       	call   c0027cc8 <__muldf3>
c000934f:	5d                   	pop    ebp
c0009350:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009354:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009358:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000935b:	e8 cb ef 01 00       	call   c002832b <__floatsidf>
c0009360:	83 c4 10             	add    esp,0x10
c0009363:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009367:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000936b:	52                   	push   edx
c000936c:	50                   	push   eax
c000936d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009371:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009375:	e8 d1 e2 01 00       	call   c002764b <__adddf3>
c000937a:	59                   	pop    ecx
c000937b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000937f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009383:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009386:	e8 a0 ef 01 00       	call   c002832b <__floatsidf>
c000938b:	83 c4 10             	add    esp,0x10
c000938e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009392:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009396:	52                   	push   edx
c0009397:	50                   	push   eax
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a0:	e8 f0 f1 01 00       	call   c0028595 <__gedf2>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	85 c0                	test   eax,eax
c00093aa:	0f 89 d9 01 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c00093b0:	85 ff                	test   edi,edi
c00093b2:	0f 8e f4 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c00093b8:	83 ec 10             	sub    esp,0x10
c00093bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00093be:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00093c1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00093c5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00093c8:	ff 30                	push   DWORD PTR [eax]
c00093ca:	e8 cd e8 01 00       	call   c0027c9c <__subdf3>
c00093cf:	83 c4 18             	add    esp,0x18
c00093d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093da:	52                   	push   edx
c00093db:	50                   	push   eax
c00093dc:	e8 4f f3 01 00       	call   c0028730 <fabs>
c00093e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00093f1:	68 23 42 92 0c       	push   0xc924223
c00093f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fe:	e8 76 f1 01 00       	call   c0028579 <__gtdf2>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	85 c0                	test   eax,eax
c0009408:	0f 8e 9e 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c000940e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009412:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009415:	8b 00                	mov    eax,DWORD PTR [eax]
c0009417:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000941b:	89 04 24             	mov    DWORD PTR [esp],eax
c000941e:	52                   	push   edx
c000941f:	50                   	push   eax
c0009420:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009423:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009426:	e8 71 e8 01 00       	call   c0027c9c <__subdf3>
c000942b:	59                   	pop    ecx
c000942c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009430:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009434:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009437:	e8 ef ee 01 00       	call   c002832b <__floatsidf>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009443:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009447:	52                   	push   edx
c0009448:	50                   	push   eax
c0009449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009451:	e8 72 e8 01 00       	call   c0027cc8 <__muldf3>
c0009456:	5f                   	pop    edi
c0009457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000945b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000945f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009462:	e8 c4 ee 01 00       	call   c002832b <__floatsidf>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	52                   	push   edx
c0009473:	50                   	push   eax
c0009474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947c:	e8 2b eb 01 00       	call   c0027fac <__divdf3>
c0009481:	83 c4 10             	add    esp,0x10
c0009484:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009488:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000948c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009490:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949c:	e8 aa e1 01 00       	call   c002764b <__adddf3>
c00094a1:	83 c4 10             	add    esp,0x10
c00094a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ac:	31 ff                	xor    edi,edi
c00094ae:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00094b1:	0f 8e 9d 00 00 00    	jle    c0009554 <linear_vari_process+0x349>
c00094b7:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00094ba:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00094be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00094c1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00094c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00094c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00094ca:	52                   	push   edx
c00094cb:	52                   	push   edx
c00094cc:	55                   	push   ebp
c00094cd:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00094d0:	47                   	inc    edi
c00094d1:	e8 0a db 01 00       	call   c0026fe0 <__subsf3>
c00094d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00094d9:	e8 e1 f1 01 00       	call   c00286bf <__extendsfdf2>
c00094de:	83 c4 10             	add    esp,0x10
c00094e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f9:	e8 ca e7 01 00       	call   c0027cc8 <__muldf3>
c00094fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009501:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009509:	e8 b1 f1 01 00       	call   c00286bf <__extendsfdf2>
c000950e:	83 c4 10             	add    esp,0x10
c0009511:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009515:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009519:	52                   	push   edx
c000951a:	50                   	push   eax
c000951b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000951f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009523:	e8 23 e1 01 00       	call   c002764b <__adddf3>
c0009528:	59                   	pop    ecx
c0009529:	5d                   	pop    ebp
c000952a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000952e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009532:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	e8 5c f0 01 00       	call   c002859b <__truncdfsf2>
c000953f:	83 c4 10             	add    esp,0x10
c0009542:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009545:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009549:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000954c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000954f:	e9 5a ff ff ff       	jmp    c00094ae <linear_vari_process+0x2a3>
c0009554:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000955c:	68 00 00 f0 3f       	push   0x3ff00000
c0009561:	6a 00                	push   0x0
c0009563:	e8 44 ea 01 00       	call   c0027fac <__divdf3>
c0009568:	83 c4 10             	add    esp,0x10
c000956b:	89 04 24             	mov    DWORD PTR [esp],eax
c000956e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000957c:	e8 ca e0 01 00       	call   c002764b <__adddf3>
c0009581:	83 c4 10             	add    esp,0x10
c0009584:	e9 50 fd ff ff       	jmp    c00092d9 <linear_vari_process+0xce>
c0009589:	50                   	push   eax
c000958a:	50                   	push   eax
c000958b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000958f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009593:	e8 b8 f1 01 00       	call   c0028750 <lrint>
c0009598:	83 ec 0c             	sub    esp,0xc
c000959b:	50                   	push   eax
c000959c:	e8 8a ed 01 00       	call   c002832b <__floatsidf>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095ac:	52                   	push   edx
c00095ad:	50                   	push   eax
c00095ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b6:	e8 e1 e6 01 00       	call   c0027c9c <__subdf3>
c00095bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00095bf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00095c3:	83 c4 20             	add    esp,0x20
c00095c6:	6a 00                	push   0x0
c00095c8:	6a 00                	push   0x0
c00095ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095d2:	e8 c0 ef 01 00       	call   c0028597 <__ltdf2>
c00095d7:	83 c4 10             	add    esp,0x10
c00095da:	85 c0                	test   eax,eax
c00095dc:	79 1e                	jns    c00095fc <linear_vari_process+0x3f1>
c00095de:	68 00 00 f0 3f       	push   0x3ff00000
c00095e3:	6a 00                	push   0x0
c00095e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ed:	e8 59 e0 01 00       	call   c002764b <__adddf3>
c00095f2:	83 c4 10             	add    esp,0x10
c00095f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00095fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00095ff:	83 ec 10             	sub    esp,0x10
c0009602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000960a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000960e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009612:	e8 85 e6 01 00       	call   c0027c9c <__subdf3>
c0009617:	83 c4 18             	add    esp,0x18
c000961a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000961e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009622:	52                   	push   edx
c0009623:	50                   	push   eax
c0009624:	e8 27 f1 01 00       	call   c0028750 <lrint>
c0009629:	83 c4 10             	add    esp,0x10
c000962c:	0f af f8             	imul   edi,eax
c000962f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009632:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009635:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009638:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000963b:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000963e:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009642:	0f 8d 13 03 00 00    	jge    c000995b <linear_vari_process+0x750>
c0009648:	83 ec 0c             	sub    esp,0xc
c000964b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000964e:	e8 d8 ec 01 00       	call   c002832b <__floatsidf>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000965a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000965e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009662:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966e:	e8 55 e6 01 00       	call   c0027cc8 <__muldf3>
c0009673:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000967a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000967e:	e8 a8 ec 01 00       	call   c002832b <__floatsidf>
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000968a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000968e:	52                   	push   edx
c000968f:	50                   	push   eax
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	e8 ae df 01 00       	call   c002764b <__adddf3>
c000969d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00096a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096a8:	e8 7e ec 01 00       	call   c002832b <__floatsidf>
c00096ad:	83 c4 10             	add    esp,0x10
c00096b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096b8:	52                   	push   edx
c00096b9:	50                   	push   eax
c00096ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c2:	e8 d0 ee 01 00       	call   c0028597 <__ltdf2>
c00096c7:	83 c4 10             	add    esp,0x10
c00096ca:	85 c0                	test   eax,eax
c00096cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096d0:	0f 89 85 02 00 00    	jns    c000995b <linear_vari_process+0x750>
c00096d6:	85 c9                	test   ecx,ecx
c00096d8:	0f 8e f5 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c00096de:	83 ec 10             	sub    esp,0x10
c00096e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00096e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00096e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00096eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00096ee:	ff 30                	push   DWORD PTR [eax]
c00096f0:	e8 a7 e5 01 00       	call   c0027c9c <__subdf3>
c00096f5:	83 c4 18             	add    esp,0x18
c00096f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009700:	52                   	push   edx
c0009701:	50                   	push   eax
c0009702:	e8 29 f0 01 00       	call   c0028730 <fabs>
c0009707:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000970b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000970f:	83 c4 10             	add    esp,0x10
c0009712:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009717:	68 23 42 92 0c       	push   0xc924223
c000971c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009720:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009724:	e8 50 ee 01 00       	call   c0028579 <__gtdf2>
c0009729:	83 c4 10             	add    esp,0x10
c000972c:	85 c0                	test   eax,eax
c000972e:	0f 8e 9f 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c0009734:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009738:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000973b:	8b 00                	mov    eax,DWORD PTR [eax]
c000973d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009741:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000974a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000974d:	e8 4a e5 01 00       	call   c0027c9c <__subdf3>
c0009752:	5f                   	pop    edi
c0009753:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009757:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000975b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000975e:	e8 c8 eb 01 00       	call   c002832b <__floatsidf>
c0009763:	83 c4 10             	add    esp,0x10
c0009766:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000976a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000976e:	52                   	push   edx
c000976f:	50                   	push   eax
c0009770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009778:	e8 4b e5 01 00       	call   c0027cc8 <__muldf3>
c000977d:	5d                   	pop    ebp
c000977e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009782:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009786:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009789:	e8 9d eb 01 00       	call   c002832b <__floatsidf>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009795:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009799:	52                   	push   edx
c000979a:	50                   	push   eax
c000979b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000979f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097a3:	e8 04 e8 01 00       	call   c0027fac <__divdf3>
c00097a8:	83 c4 10             	add    esp,0x10
c00097ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097c3:	e8 83 de 01 00       	call   c002764b <__adddf3>
c00097c8:	83 c4 10             	add    esp,0x10
c00097cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097d3:	31 ff                	xor    edi,edi
c00097d5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00097d8:	39 f8                	cmp    eax,edi
c00097da:	0f 8e ac 00 00 00    	jle    c000988c <linear_vari_process+0x681>
c00097e0:	8b 16                	mov    edx,DWORD PTR [esi]
c00097e2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00097e5:	29 c1                	sub    ecx,eax
c00097e7:	89 c8                	mov    eax,ecx
c00097e9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00097ec:	01 f8                	add    eax,edi
c00097ee:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00097f2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00097f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097ff:	51                   	push   ecx
c0009800:	01 f8                	add    eax,edi
c0009802:	51                   	push   ecx
c0009803:	47                   	inc    edi
c0009804:	55                   	push   ebp
c0009805:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009808:	e8 d3 d7 01 00       	call   c0026fe0 <__subsf3>
c000980d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009810:	e8 aa ee 01 00       	call   c00286bf <__extendsfdf2>
c0009815:	83 c4 10             	add    esp,0x10
c0009818:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000981c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009820:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009824:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009828:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000982c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009830:	e8 93 e4 01 00       	call   c0027cc8 <__muldf3>
c0009835:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009838:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000983c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009840:	e8 7a ee 01 00       	call   c00286bf <__extendsfdf2>
c0009845:	83 c4 10             	add    esp,0x10
c0009848:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000984c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009850:	52                   	push   edx
c0009851:	50                   	push   eax
c0009852:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009856:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000985a:	e8 ec dd 01 00       	call   c002764b <__adddf3>
c000985f:	5d                   	pop    ebp
c0009860:	59                   	pop    ecx
c0009861:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009865:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009869:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000986d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009871:	e8 25 ed 01 00       	call   c002859b <__truncdfsf2>
c0009876:	83 c4 10             	add    esp,0x10
c0009879:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000987d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009881:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009884:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009887:	e9 49 ff ff ff       	jmp    c00097d5 <linear_vari_process+0x5ca>
c000988c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009894:	68 00 00 f0 3f       	push   0x3ff00000
c0009899:	6a 00                	push   0x0
c000989b:	e8 0c e7 01 00       	call   c0027fac <__divdf3>
c00098a0:	83 c4 10             	add    esp,0x10
c00098a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ab:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098bb:	e8 8b dd 01 00       	call   c002764b <__adddf3>
c00098c0:	59                   	pop    ecx
c00098c1:	5f                   	pop    edi
c00098c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d2:	e8 79 ee 01 00       	call   c0028750 <lrint>
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	50                   	push   eax
c00098db:	e8 4b ea 01 00       	call   c002832b <__floatsidf>
c00098e0:	83 c4 10             	add    esp,0x10
c00098e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098eb:	52                   	push   edx
c00098ec:	50                   	push   eax
c00098ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f5:	e8 a2 e3 01 00       	call   c0027c9c <__subdf3>
c00098fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098fe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009902:	83 c4 20             	add    esp,0x20
c0009905:	6a 00                	push   0x0
c0009907:	6a 00                	push   0x0
c0009909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000990d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009911:	e8 81 ec 01 00       	call   c0028597 <__ltdf2>
c0009916:	83 c4 10             	add    esp,0x10
c0009919:	85 c0                	test   eax,eax
c000991b:	79 1e                	jns    c000993b <linear_vari_process+0x730>
c000991d:	68 00 00 f0 3f       	push   0x3ff00000
c0009922:	6a 00                	push   0x0
c0009924:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009928:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000992c:	e8 1a dd 01 00       	call   c002764b <__adddf3>
c0009931:	83 c4 10             	add    esp,0x10
c0009934:	89 04 24             	mov    DWORD PTR [esp],eax
c0009937:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000993b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000993e:	83 ec 10             	sub    esp,0x10
c0009941:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009945:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009949:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000994d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009951:	e8 46 e3 01 00       	call   c0027c9c <__subdf3>
c0009956:	e9 bc fc ff ff       	jmp    c0009617 <linear_vari_process+0x40c>
c000995b:	39 fd                	cmp    ebp,edi
c000995d:	7d 38                	jge    c0009997 <linear_vari_process+0x78c>
c000995f:	83 ec 0c             	sub    esp,0xc
c0009962:	89 f8                	mov    eax,edi
c0009964:	29 e8                	sub    eax,ebp
c0009966:	99                   	cdq    
c0009967:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000996a:	50                   	push   eax
c000996b:	e8 bb e9 01 00       	call   c002832b <__floatsidf>
c0009970:	83 c4 10             	add    esp,0x10
c0009973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009977:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000997b:	52                   	push   edx
c000997c:	50                   	push   eax
c000997d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009981:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009985:	e8 c1 dc 01 00       	call   c002764b <__adddf3>
c000998a:	83 c4 10             	add    esp,0x10
c000998d:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009990:	89 04 24             	mov    DWORD PTR [esp],eax
c0009993:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009997:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000999b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000999e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099a2:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00099a5:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00099a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099ab:	85 c0                	test   eax,eax
c00099ad:	7f 29                	jg     c00099d8 <linear_vari_process+0x7cd>
c00099af:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00099b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00099bb:	89 01                	mov    DWORD PTR [ecx],eax
c00099bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00099c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099c3:	99                   	cdq    
c00099c4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099c7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00099ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099cd:	99                   	cdq    
c00099ce:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099d1:	31 d2                	xor    edx,edx
c00099d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00099d6:	eb 1d                	jmp    c00099f5 <linear_vari_process+0x7ea>
c00099d8:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00099db:	31 d2                	xor    edx,edx
c00099dd:	29 c8                	sub    eax,ecx
c00099df:	c1 e0 02             	shl    eax,0x2
c00099e2:	39 d1                	cmp    ecx,edx
c00099e4:	7e c9                	jle    c00099af <linear_vari_process+0x7a4>
c00099e6:	8b 3e                	mov    edi,DWORD PTR [esi]
c00099e8:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00099eb:	83 c0 04             	add    eax,0x4
c00099ee:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00099f2:	42                   	inc    edx
c00099f3:	eb ed                	jmp    c00099e2 <linear_vari_process+0x7d7>
c00099f5:	83 c4 3c             	add    esp,0x3c
c00099f8:	89 d0                	mov    eax,edx
c00099fa:	5b                   	pop    ebx
c00099fb:	5e                   	pop    esi
c00099fc:	5f                   	pop    edi
c00099fd:	5d                   	pop    ebp
c00099fe:	c3                   	ret    

c00099ff <linear_reset>:
c00099ff:	83 ec 0c             	sub    esp,0xc
c0009a02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a06:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009a09:	85 c0                	test   eax,eax
c0009a0b:	74 20                	je     c0009a2d <linear_reset+0x2e>
c0009a0d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009a10:	83 c0 1c             	add    eax,0x1c
c0009a13:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009a16:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009a1d:	c1 e2 02             	shl    edx,0x2
c0009a20:	51                   	push   ecx
c0009a21:	52                   	push   edx
c0009a22:	6a 00                	push   0x0
c0009a24:	50                   	push   eax
c0009a25:	e8 26 6d ff ff       	call   c0000750 <memset>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	83 c4 0c             	add    esp,0xc
c0009a30:	c3                   	ret    

c0009a31 <linear_get_name>:
c0009a31:	31 c0                	xor    eax,eax
c0009a33:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a38:	75 05                	jne    c0009a3f <linear_get_name+0xe>
c0009a3a:	b8 40 9f 02 c0       	mov    eax,0xc0029f40
c0009a3f:	c3                   	ret    

c0009a40 <linear_get_description>:
c0009a40:	31 c0                	xor    eax,eax
c0009a42:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a47:	75 05                	jne    c0009a4e <linear_get_description+0xe>
c0009a49:	b8 54 9f 02 c0       	mov    eax,0xc0029f54
c0009a4e:	c3                   	ret    

c0009a4f <linear_set_converter>:
c0009a4f:	53                   	push   ebx
c0009a50:	b8 0a 00 00 00       	mov    eax,0xa
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009a5c:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009a61:	75 6e                	jne    c0009ad1 <linear_set_converter+0x82>
c0009a63:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009a66:	85 c0                	test   eax,eax
c0009a68:	74 13                	je     c0009a7d <linear_set_converter+0x2e>
c0009a6a:	83 ec 0c             	sub    esp,0xc
c0009a6d:	50                   	push   eax
c0009a6e:	e8 6c 5d 00 00       	call   c000f7df <free>
c0009a73:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009a7a:	83 c4 10             	add    esp,0x10
c0009a7d:	50                   	push   eax
c0009a7e:	50                   	push   eax
c0009a7f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009a82:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009a89:	50                   	push   eax
c0009a8a:	6a 01                	push   0x1
c0009a8c:	e8 6e 5d 00 00       	call   c000f7ff <calloc>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 c2                	mov    edx,eax
c0009a96:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009a99:	85 d2                	test   edx,edx
c0009a9b:	b8 01 00 00 00       	mov    eax,0x1
c0009aa0:	74 2f                	je     c0009ad1 <linear_set_converter+0x82>
c0009aa2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009aa5:	83 ec 0c             	sub    esp,0xc
c0009aa8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009aab:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009ab1:	c7 43 24 0b 92 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000920b
c0009ab8:	c7 43 20 0b 92 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000920b
c0009abf:	c7 43 28 ff 99 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00099ff
c0009ac6:	53                   	push   ebx
c0009ac7:	e8 33 ff ff ff       	call   c00099ff <linear_reset>
c0009acc:	83 c4 10             	add    esp,0x10
c0009acf:	31 c0                	xor    eax,eax
c0009ad1:	83 c4 08             	add    esp,0x8
c0009ad4:	5b                   	pop    ebx
c0009ad5:	c3                   	ret    

c0009ad6 <int_to_fp>:
c0009ad6:	c1 e0 0c             	shl    eax,0xc
c0009ad9:	c3                   	ret    

c0009ada <fp_to_int>:
c0009ada:	c1 f8 0c             	sar    eax,0xc
c0009add:	c3                   	ret    

c0009ade <fp_fraction_part>:
c0009ade:	25 ff 0f 00 00       	and    eax,0xfff
c0009ae3:	c3                   	ret    

c0009ae4 <fp_to_double>:
c0009ae4:	83 ec 1c             	sub    esp,0x1c
c0009ae7:	e8 f2 ff ff ff       	call   c0009ade <fp_fraction_part>
c0009aec:	83 ec 0c             	sub    esp,0xc
c0009aef:	50                   	push   eax
c0009af0:	e8 36 e8 01 00       	call   c002832b <__floatsidf>
c0009af5:	83 c4 10             	add    esp,0x10
c0009af8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009afc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b00:	68 00 00 30 3f       	push   0x3f300000
c0009b05:	6a 00                	push   0x0
c0009b07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0f:	e8 b4 e1 01 00       	call   c0027cc8 <__muldf3>
c0009b14:	83 c4 2c             	add    esp,0x2c
c0009b17:	c3                   	ret    

c0009b18 <calc_output_single>:
c0009b18:	55                   	push   ebp
c0009b19:	57                   	push   edi
c0009b1a:	56                   	push   esi
c0009b1b:	89 c6                	mov    esi,eax
c0009b1d:	53                   	push   ebx
c0009b1e:	89 d3                	mov    ebx,edx
c0009b20:	83 ec 4c             	sub    esp,0x4c
c0009b23:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009b27:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009b2a:	e8 a7 ff ff ff       	call   c0009ad6 <int_to_fp>
c0009b2f:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009b32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b36:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009b3a:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009b3e:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009b41:	99                   	cdq    
c0009b42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009b4a:	f7 fb                	idiv   ebx
c0009b4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009b54:	89 da                	mov    edx,ebx
c0009b56:	0f af d0             	imul   edx,eax
c0009b59:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009b61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009b65:	29 c2                	sub    edx,eax
c0009b67:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b6e:	83 c5 04             	add    ebp,0x4
c0009b71:	e8 6e ff ff ff       	call   c0009ae4 <fp_to_double>
c0009b76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009b7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b82:	e8 53 ff ff ff       	call   c0009ada <fp_to_int>
c0009b87:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009b8a:	52                   	push   edx
c0009b8b:	52                   	push   edx
c0009b8c:	51                   	push   ecx
c0009b8d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009b91:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009b95:	e8 46 d4 01 00       	call   c0026fe0 <__subsf3>
c0009b9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b9d:	e8 1d eb 01 00       	call   c00286bf <__extendsfdf2>
c0009ba2:	83 c4 10             	add    esp,0x10
c0009ba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ba9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009bad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bbd:	e8 06 e1 01 00       	call   c0027cc8 <__muldf3>
c0009bc2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009bc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bca:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009bcd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bd1:	e8 e9 ea 01 00       	call   c00286bf <__extendsfdf2>
c0009bd6:	83 c4 10             	add    esp,0x10
c0009bd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009bdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009be1:	52                   	push   edx
c0009be2:	50                   	push   eax
c0009be3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009beb:	e8 5b da 01 00       	call   c002764b <__adddf3>
c0009bf0:	59                   	pop    ecx
c0009bf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009bf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009bf9:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009bff:	e8 bb ea 01 00       	call   c00286bf <__extendsfdf2>
c0009c04:	83 c4 10             	add    esp,0x10
c0009c07:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c0b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c0f:	52                   	push   edx
c0009c10:	50                   	push   eax
c0009c11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c19:	e8 aa e0 01 00       	call   c0027cc8 <__muldf3>
c0009c1e:	83 c4 10             	add    esp,0x10
c0009c21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c29:	52                   	push   edx
c0009c2a:	50                   	push   eax
c0009c2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c33:	e8 13 da 01 00       	call   c002764b <__adddf3>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c43:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009c47:	0f 89 1d ff ff ff    	jns    c0009b6a <calc_output_single+0x52>
c0009c4d:	89 d9                	mov    ecx,ebx
c0009c4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009c53:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009c57:	89 dd                	mov    ebp,ebx
c0009c59:	29 c8                	sub    eax,ecx
c0009c5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009c63:	99                   	cdq    
c0009c64:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c6c:	f7 fb                	idiv   ebx
c0009c6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c72:	0f af e8             	imul   ebp,eax
c0009c75:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009c79:	01 cd                	add    ebp,ecx
c0009c7b:	8d 34 86             	lea    esi,[esi+eax*4]
c0009c7e:	89 e8                	mov    eax,ebp
c0009c80:	83 ee 04             	sub    esi,0x4
c0009c83:	e8 5c fe ff ff       	call   c0009ae4 <fp_to_double>
c0009c88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c90:	89 e8                	mov    eax,ebp
c0009c92:	29 dd                	sub    ebp,ebx
c0009c94:	e8 41 fe ff ff       	call   c0009ada <fp_to_int>
c0009c99:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009c9c:	52                   	push   edx
c0009c9d:	52                   	push   edx
c0009c9e:	51                   	push   ecx
c0009c9f:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009ca3:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ca7:	e8 34 d3 01 00       	call   c0026fe0 <__subsf3>
c0009cac:	89 04 24             	mov    DWORD PTR [esp],eax
c0009caf:	e8 0b ea 01 00       	call   c00286bf <__extendsfdf2>
c0009cb4:	83 c4 10             	add    esp,0x10
c0009cb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccf:	e8 f4 df 01 00       	call   c0027cc8 <__muldf3>
c0009cd4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009cd8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cdc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009cdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ce3:	e8 d7 e9 01 00       	call   c00286bf <__extendsfdf2>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf3:	52                   	push   edx
c0009cf4:	50                   	push   eax
c0009cf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cfd:	e8 49 d9 01 00       	call   c002764b <__adddf3>
c0009d02:	59                   	pop    ecx
c0009d03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d07:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009d0b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009d11:	e8 a9 e9 01 00       	call   c00286bf <__extendsfdf2>
c0009d16:	83 c4 10             	add    esp,0x10
c0009d19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d1d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d21:	52                   	push   edx
c0009d22:	50                   	push   eax
c0009d23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d2b:	e8 98 df 01 00       	call   c0027cc8 <__muldf3>
c0009d30:	83 c4 10             	add    esp,0x10
c0009d33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d3b:	52                   	push   edx
c0009d3c:	50                   	push   eax
c0009d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d45:	e8 01 d9 01 00       	call   c002764b <__adddf3>
c0009d4a:	83 c4 10             	add    esp,0x10
c0009d4d:	85 ed                	test   ebp,ebp
c0009d4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d53:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d57:	0f 8f 21 ff ff ff    	jg     c0009c7e <calc_output_single+0x166>
c0009d5d:	52                   	push   edx
c0009d5e:	50                   	push   eax
c0009d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d67:	e8 df d8 01 00       	call   c002764b <__adddf3>
c0009d6c:	83 c4 5c             	add    esp,0x5c
c0009d6f:	5b                   	pop    ebx
c0009d70:	5e                   	pop    esi
c0009d71:	5f                   	pop    edi
c0009d72:	5d                   	pop    ebp
c0009d73:	c3                   	ret    

c0009d74 <calc_output_stereo>:
c0009d74:	55                   	push   ebp
c0009d75:	89 cd                	mov    ebp,ecx
c0009d77:	57                   	push   edi
c0009d78:	56                   	push   esi
c0009d79:	53                   	push   ebx
c0009d7a:	89 c3                	mov    ebx,eax
c0009d7c:	83 ec 6c             	sub    esp,0x6c
c0009d7f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d83:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009d8a:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009d91:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d95:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d99:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009d9c:	e8 35 fd ff ff       	call   c0009ad6 <int_to_fp>
c0009da1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009da9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dad:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009db5:	29 c8                	sub    eax,ecx
c0009db7:	99                   	cdq    
c0009db8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009dbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009dc0:	0f af d0             	imul   edx,eax
c0009dc3:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009dc6:	31 d2                	xor    edx,edx
c0009dc8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009dcc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009dd0:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009dd3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009dd7:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009dda:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009dde:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009de2:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009de5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009dea:	29 c1                	sub    ecx,eax
c0009dec:	31 c0                	xor    eax,eax
c0009dee:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009df1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009df9:	83 c7 08             	add    edi,0x8
c0009dfc:	e8 e3 fc ff ff       	call   c0009ae4 <fp_to_double>
c0009e01:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009e05:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009e09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e0d:	e8 c8 fc ff ff       	call   c0009ada <fp_to_int>
c0009e12:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009e15:	52                   	push   edx
c0009e16:	52                   	push   edx
c0009e17:	51                   	push   ecx
c0009e18:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009e1c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009e20:	e8 bb d1 01 00       	call   c0026fe0 <__subsf3>
c0009e25:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e28:	e8 92 e8 01 00       	call   c00286bf <__extendsfdf2>
c0009e2d:	83 c4 10             	add    esp,0x10
c0009e30:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e34:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e40:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e48:	e8 7b de 01 00       	call   c0027cc8 <__muldf3>
c0009e4d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009e51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009e55:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e58:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009e5c:	e8 5e e8 01 00       	call   c00286bf <__extendsfdf2>
c0009e61:	83 c4 10             	add    esp,0x10
c0009e64:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e68:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e6c:	52                   	push   edx
c0009e6d:	50                   	push   eax
c0009e6e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e76:	e8 d0 d7 01 00       	call   c002764b <__adddf3>
c0009e7b:	59                   	pop    ecx
c0009e7c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009e80:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009e84:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009e8a:	e8 30 e8 01 00       	call   c00286bf <__extendsfdf2>
c0009e8f:	83 c4 10             	add    esp,0x10
c0009e92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ea2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ea6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009eaa:	e8 19 de 01 00       	call   c0027cc8 <__muldf3>
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009eb6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009eba:	52                   	push   edx
c0009ebb:	50                   	push   eax
c0009ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec4:	e8 82 d7 01 00       	call   c002764b <__adddf3>
c0009ec9:	59                   	pop    ecx
c0009eca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ece:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ed2:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ed8:	e8 e2 e7 01 00       	call   c00286bf <__extendsfdf2>
c0009edd:	83 c4 10             	add    esp,0x10
c0009ee0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ee4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ee8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009eec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ef0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef8:	e8 cb dd 01 00       	call   c0027cc8 <__muldf3>
c0009efd:	83 c4 10             	add    esp,0x10
c0009f00:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009f04:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009f08:	52                   	push   edx
c0009f09:	50                   	push   eax
c0009f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f12:	e8 34 d7 01 00       	call   c002764b <__adddf3>
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009f22:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009f26:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009f2a:	0f 89 c5 fe ff ff    	jns    c0009df5 <calc_output_stereo+0x81>
c0009f30:	29 e9                	sub    ecx,ebp
c0009f32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009f3a:	29 c8                	sub    eax,ecx
c0009f3c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009f44:	99                   	cdq    
c0009f45:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f49:	31 d2                	xor    edx,edx
c0009f4b:	0f af f8             	imul   edi,eax
c0009f4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f52:	40                   	inc    eax
c0009f53:	01 cf                	add    edi,ecx
c0009f55:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009f5a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009f5e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009f66:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009f69:	31 c0                	xor    eax,eax
c0009f6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f6f:	89 f8                	mov    eax,edi
c0009f71:	83 eb 08             	sub    ebx,0x8
c0009f74:	e8 6b fb ff ff       	call   c0009ae4 <fp_to_double>
c0009f79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f81:	89 f8                	mov    eax,edi
c0009f83:	e8 52 fb ff ff       	call   c0009ada <fp_to_int>
c0009f88:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009f8b:	52                   	push   edx
c0009f8c:	52                   	push   edx
c0009f8d:	55                   	push   ebp
c0009f8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009f92:	e8 49 d0 01 00       	call   c0026fe0 <__subsf3>
c0009f97:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f9a:	e8 20 e7 01 00       	call   c00286bf <__extendsfdf2>
c0009f9f:	83 c4 10             	add    esp,0x10
c0009fa2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fa6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009faa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fb2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fba:	e8 09 dd 01 00       	call   c0027cc8 <__muldf3>
c0009fbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009fc2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fc6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fca:	e8 f0 e6 01 00       	call   c00286bf <__extendsfdf2>
c0009fcf:	83 c4 10             	add    esp,0x10
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	52                   	push   edx
c0009fdb:	50                   	push   eax
c0009fdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe4:	e8 62 d6 01 00       	call   c002764b <__adddf3>
c0009fe9:	59                   	pop    ecx
c0009fea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009fee:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ff2:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009ff8:	e8 c2 e6 01 00       	call   c00286bf <__extendsfdf2>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a004:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a008:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a00c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a010:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a014:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a018:	e8 ab dc 01 00       	call   c0027cc8 <__muldf3>
c000a01d:	83 c4 10             	add    esp,0x10
c000a020:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a024:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a028:	52                   	push   edx
c000a029:	50                   	push   eax
c000a02a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a032:	e8 14 d6 01 00       	call   c002764b <__adddf3>
c000a037:	5d                   	pop    ebp
c000a038:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a03c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a040:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a046:	e8 74 e6 01 00       	call   c00286bf <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a052:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a056:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a062:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a066:	e8 5d dc 01 00       	call   c0027cc8 <__muldf3>
c000a06b:	83 c4 10             	add    esp,0x10
c000a06e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a072:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a076:	52                   	push   edx
c000a077:	50                   	push   eax
c000a078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a080:	e8 c6 d5 01 00       	call   c002764b <__adddf3>
c000a085:	83 c4 10             	add    esp,0x10
c000a088:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c000a08c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a090:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a094:	85 ff                	test   edi,edi
c000a096:	0f 8f d3 fe ff ff    	jg     c0009f6f <calc_output_stereo+0x1fb>
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ac:	e8 9a d5 01 00       	call   c002764b <__adddf3>
c000a0b1:	83 c4 10             	add    esp,0x10
c000a0b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a0b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0cc:	e8 f7 db 01 00       	call   c0027cc8 <__muldf3>
c000a0d1:	59                   	pop    ecx
c000a0d2:	5b                   	pop    ebx
c000a0d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a0d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0e3:	e8 b3 e4 01 00       	call   c002859b <__truncdfsf2>
c000a0e8:	83 c4 10             	add    esp,0x10
c000a0eb:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c000a0f2:	89 03                	mov    DWORD PTR [ebx],eax
c000a0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a104:	e8 42 d5 01 00       	call   c002764b <__adddf3>
c000a109:	83 c4 10             	add    esp,0x10
c000a10c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a110:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a114:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a118:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a11c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a124:	e8 9f db 01 00       	call   c0027cc8 <__muldf3>
c000a129:	5e                   	pop    esi
c000a12a:	5f                   	pop    edi
c000a12b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a12f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a13b:	e8 5b e4 01 00       	call   c002859b <__truncdfsf2>
c000a140:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c000a147:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a14a:	83 c4 7c             	add    esp,0x7c
c000a14d:	5b                   	pop    ebx
c000a14e:	5e                   	pop    esi
c000a14f:	5f                   	pop    edi
c000a150:	5d                   	pop    ebp
c000a151:	c3                   	ret    

c000a152 <calc_output_quad>:
c000a152:	55                   	push   ebp
c000a153:	57                   	push   edi
c000a154:	56                   	push   esi
c000a155:	89 c6                	mov    esi,eax
c000a157:	53                   	push   ebx
c000a158:	83 ec 7c             	sub    esp,0x7c
c000a15b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a15f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a163:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000a16a:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000a171:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a179:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000a17c:	e8 55 f9 ff ff       	call   c0009ad6 <int_to_fp>
c000a181:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000a184:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000a187:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a18b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a18f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a193:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000a197:	99                   	cdq    
c000a198:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000a19c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1a0:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000a1a3:	31 d2                	xor    edx,edx
c000a1a5:	0f af d8             	imul   ebx,eax
c000a1a8:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000a1b0:	0f af c7             	imul   eax,edi
c000a1b3:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c000a1b7:	29 c1                	sub    ecx,eax
c000a1b9:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000a1c1:	31 c0                	xor    eax,eax
c000a1c3:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c000a1c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a1ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a1ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a1d2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a1d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1da:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a1de:	89 d8                	mov    eax,ebx
c000a1e0:	83 c7 10             	add    edi,0x10
c000a1e3:	e8 fc f8 ff ff       	call   c0009ae4 <fp_to_double>
c000a1e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1f0:	89 d8                	mov    eax,ebx
c000a1f2:	e8 e3 f8 ff ff       	call   c0009ada <fp_to_int>
c000a1f7:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a1fb:	52                   	push   edx
c000a1fc:	52                   	push   edx
c000a1fd:	51                   	push   ecx
c000a1fe:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a202:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a206:	e8 d5 cd 01 00       	call   c0026fe0 <__subsf3>
c000a20b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a20e:	e8 ac e4 01 00       	call   c00286bf <__extendsfdf2>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a21a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a226:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22e:	e8 95 da 01 00       	call   c0027cc8 <__muldf3>
c000a233:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a237:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a23b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a23e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a242:	e8 78 e4 01 00       	call   c00286bf <__extendsfdf2>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a24e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a252:	52                   	push   edx
c000a253:	50                   	push   eax
c000a254:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a258:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25c:	e8 ea d3 01 00       	call   c002764b <__adddf3>
c000a261:	59                   	pop    ecx
c000a262:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a266:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26a:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a270:	e8 4a e4 01 00       	call   c00286bf <__extendsfdf2>
c000a275:	83 c4 10             	add    esp,0x10
c000a278:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a288:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a290:	e8 33 da 01 00       	call   c0027cc8 <__muldf3>
c000a295:	83 c4 10             	add    esp,0x10
c000a298:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a0:	52                   	push   edx
c000a2a1:	50                   	push   eax
c000a2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2aa:	e8 9c d3 01 00       	call   c002764b <__adddf3>
c000a2af:	59                   	pop    ecx
c000a2b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a2b4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a2b8:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a2be:	e8 fc e3 01 00       	call   c00286bf <__extendsfdf2>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ca:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2de:	e8 e5 d9 01 00       	call   c0027cc8 <__muldf3>
c000a2e3:	83 c4 10             	add    esp,0x10
c000a2e6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ea:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ee:	52                   	push   edx
c000a2ef:	50                   	push   eax
c000a2f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f8:	e8 4e d3 01 00       	call   c002764b <__adddf3>
c000a2fd:	59                   	pop    ecx
c000a2fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a302:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a306:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a30c:	e8 ae e3 01 00       	call   c00286bf <__extendsfdf2>
c000a311:	83 c4 10             	add    esp,0x10
c000a314:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a318:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a324:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a328:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32c:	e8 97 d9 01 00       	call   c0027cc8 <__muldf3>
c000a331:	83 c4 10             	add    esp,0x10
c000a334:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a338:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33c:	52                   	push   edx
c000a33d:	50                   	push   eax
c000a33e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a346:	e8 00 d3 01 00       	call   c002764b <__adddf3>
c000a34b:	59                   	pop    ecx
c000a34c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a350:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a354:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a35a:	e8 60 e3 01 00       	call   c00286bf <__extendsfdf2>
c000a35f:	83 c4 10             	add    esp,0x10
c000a362:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a366:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a372:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a376:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37a:	e8 49 d9 01 00       	call   c0027cc8 <__muldf3>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	52                   	push   edx
c000a38b:	50                   	push   eax
c000a38c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a390:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a394:	e8 b2 d2 01 00       	call   c002764b <__adddf3>
c000a399:	83 c4 10             	add    esp,0x10
c000a39c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3a0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3a4:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a8:	0f 89 30 fe ff ff    	jns    c000a1de <calc_output_quad+0x8c>
c000a3ae:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a3b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a3b6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a3ba:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a3be:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a3c6:	29 c8                	sub    eax,ecx
c000a3c8:	99                   	cdq    
c000a3c9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a3cd:	31 d2                	xor    edx,edx
c000a3cf:	0f af d8             	imul   ebx,eax
c000a3d2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a3d6:	40                   	inc    eax
c000a3d7:	01 cb                	add    ebx,ecx
c000a3d9:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a3de:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a3e2:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a3e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3ea:	8d 34 86             	lea    esi,[esi+eax*4]
c000a3ed:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a3f5:	31 c0                	xor    eax,eax
c000a3f7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a3fb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a3ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a403:	89 d8                	mov    eax,ebx
c000a405:	83 ee 10             	sub    esi,0x10
c000a408:	e8 d7 f6 ff ff       	call   c0009ae4 <fp_to_double>
c000a40d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a415:	89 d8                	mov    eax,ebx
c000a417:	e8 be f6 ff ff       	call   c0009ada <fp_to_int>
c000a41c:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a420:	52                   	push   edx
c000a421:	52                   	push   edx
c000a422:	57                   	push   edi
c000a423:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a427:	e8 b4 cb 01 00       	call   c0026fe0 <__subsf3>
c000a42c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a42f:	e8 8b e2 01 00       	call   c00286bf <__extendsfdf2>
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a447:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44f:	e8 74 d8 01 00       	call   c0027cc8 <__muldf3>
c000a454:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a457:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a45b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a45f:	e8 5b e2 01 00       	call   c00286bf <__extendsfdf2>
c000a464:	83 c4 10             	add    esp,0x10
c000a467:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46f:	52                   	push   edx
c000a470:	50                   	push   eax
c000a471:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a475:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a479:	e8 cd d1 01 00       	call   c002764b <__adddf3>
c000a47e:	59                   	pop    ecx
c000a47f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a483:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a487:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a48d:	e8 2d e2 01 00       	call   c00286bf <__extendsfdf2>
c000a492:	83 c4 10             	add    esp,0x10
c000a495:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a499:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a49d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ad:	e8 16 d8 01 00       	call   c0027cc8 <__muldf3>
c000a4b2:	83 c4 10             	add    esp,0x10
c000a4b5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bd:	52                   	push   edx
c000a4be:	50                   	push   eax
c000a4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c7:	e8 7f d1 01 00       	call   c002764b <__adddf3>
c000a4cc:	5f                   	pop    edi
c000a4cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a4d1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a4d5:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a4db:	e8 df e1 01 00       	call   c00286bf <__extendsfdf2>
c000a4e0:	83 c4 10             	add    esp,0x10
c000a4e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4e7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4fb:	e8 c8 d7 01 00       	call   c0027cc8 <__muldf3>
c000a500:	83 c4 10             	add    esp,0x10
c000a503:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a507:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50b:	52                   	push   edx
c000a50c:	50                   	push   eax
c000a50d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a511:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a515:	e8 31 d1 01 00       	call   c002764b <__adddf3>
c000a51a:	59                   	pop    ecx
c000a51b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a51f:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a523:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a529:	e8 91 e1 01 00       	call   c00286bf <__extendsfdf2>
c000a52e:	83 c4 10             	add    esp,0x10
c000a531:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a535:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a53d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a541:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a545:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a549:	e8 7a d7 01 00       	call   c0027cc8 <__muldf3>
c000a54e:	83 c4 10             	add    esp,0x10
c000a551:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a555:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a559:	52                   	push   edx
c000a55a:	50                   	push   eax
c000a55b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a55f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a563:	e8 e3 d0 01 00       	call   c002764b <__adddf3>
c000a568:	5f                   	pop    edi
c000a569:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a56d:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a571:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a577:	e8 43 e1 01 00       	call   c00286bf <__extendsfdf2>
c000a57c:	83 c4 10             	add    esp,0x10
c000a57f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a583:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a593:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a597:	e8 2c d7 01 00       	call   c0027cc8 <__muldf3>
c000a59c:	83 c4 10             	add    esp,0x10
c000a59f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a7:	52                   	push   edx
c000a5a8:	50                   	push   eax
c000a5a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5b1:	e8 95 d0 01 00       	call   c002764b <__adddf3>
c000a5b6:	83 c4 10             	add    esp,0x10
c000a5b9:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a5bd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a5c1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a5c5:	85 db                	test   ebx,ebx
c000a5c7:	0f 8f 36 fe ff ff    	jg     c000a403 <calc_output_quad+0x2b1>
c000a5cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5dd:	e8 69 d0 01 00       	call   c002764b <__adddf3>
c000a5e2:	83 c4 10             	add    esp,0x10
c000a5e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a5e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	e8 c6 d6 01 00       	call   c0027cc8 <__muldf3>
c000a602:	59                   	pop    ecx
c000a603:	5b                   	pop    ebx
c000a604:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a608:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a60c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a614:	e8 82 df 01 00       	call   c002859b <__truncdfsf2>
c000a619:	83 c4 10             	add    esp,0x10
c000a61c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a623:	89 06                	mov    DWORD PTR [esi],eax
c000a625:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a629:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a62d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a631:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a635:	e8 11 d0 01 00       	call   c002764b <__adddf3>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a641:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a655:	e8 6e d6 01 00       	call   c0027cc8 <__muldf3>
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a660:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a664:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a668:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66c:	e8 2a df 01 00       	call   c002859b <__truncdfsf2>
c000a671:	83 c4 10             	add    esp,0x10
c000a674:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a67b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a67e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a682:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a686:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68e:	e8 b8 cf 01 00       	call   c002764b <__adddf3>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a69a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a69e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ae:	e8 15 d6 01 00       	call   c0027cc8 <__muldf3>
c000a6b3:	5d                   	pop    ebp
c000a6b4:	59                   	pop    ecx
c000a6b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c5:	e8 d1 de 01 00       	call   c002859b <__truncdfsf2>
c000a6ca:	83 c4 10             	add    esp,0x10
c000a6cd:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a6d4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a6d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e7:	e8 5f cf 01 00       	call   c002764b <__adddf3>
c000a6ec:	83 c4 10             	add    esp,0x10
c000a6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a707:	e8 bc d5 01 00       	call   c0027cc8 <__muldf3>
c000a70c:	5b                   	pop    ebx
c000a70d:	5e                   	pop    esi
c000a70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a712:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71e:	e8 78 de 01 00       	call   c002859b <__truncdfsf2>
c000a723:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a72a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a72d:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a733:	5b                   	pop    ebx
c000a734:	5e                   	pop    esi
c000a735:	5f                   	pop    edi
c000a736:	5d                   	pop    ebp
c000a737:	c3                   	ret    

c000a738 <calc_output_hex>:
c000a738:	55                   	push   ebp
c000a739:	89 cd                	mov    ebp,ecx
c000a73b:	57                   	push   edi
c000a73c:	56                   	push   esi
c000a73d:	53                   	push   ebx
c000a73e:	89 c3                	mov    ebx,eax
c000a740:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a746:	89 14 24             	mov    DWORD PTR [esp],edx
c000a749:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a750:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a75b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a75f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a762:	e8 6f f3 ff ff       	call   c0009ad6 <int_to_fp>
c000a767:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a76a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a76e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a771:	29 c8                	sub    eax,ecx
c000a773:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a777:	99                   	cdq    
c000a778:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a780:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a783:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a78b:	0f af f8             	imul   edi,eax
c000a78e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a791:	01 cf                	add    edi,ecx
c000a793:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a797:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a79a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a79e:	0f af c2             	imul   eax,edx
c000a7a1:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a7a5:	29 c1                	sub    ecx,eax
c000a7a7:	31 d2                	xor    edx,edx
c000a7a9:	31 c0                	xor    eax,eax
c000a7ab:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a7b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a7ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a7be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7c2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a7c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a7ca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a7ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a7d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a7d6:	89 f8                	mov    eax,edi
c000a7d8:	e8 07 f3 ff ff       	call   c0009ae4 <fp_to_double>
c000a7dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7e5:	89 f8                	mov    eax,edi
c000a7e7:	e8 ee f2 ff ff       	call   c0009ada <fp_to_int>
c000a7ec:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a7f0:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a7f3:	52                   	push   edx
c000a7f4:	52                   	push   edx
c000a7f5:	51                   	push   ecx
c000a7f6:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a7fa:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a801:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a805:	e8 d6 c7 01 00       	call   c0026fe0 <__subsf3>
c000a80a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a80d:	e8 ad de 01 00       	call   c00286bf <__extendsfdf2>
c000a812:	83 c4 10             	add    esp,0x10
c000a815:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a819:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a829:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a82d:	e8 96 d4 01 00       	call   c0027cc8 <__muldf3>
c000a832:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a836:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a83a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a83d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a841:	e8 79 de 01 00       	call   c00286bf <__extendsfdf2>
c000a846:	83 c4 10             	add    esp,0x10
c000a849:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a84d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a851:	52                   	push   edx
c000a852:	50                   	push   eax
c000a853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a85b:	e8 eb cd 01 00       	call   c002764b <__adddf3>
c000a860:	59                   	pop    ecx
c000a861:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a865:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a869:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a86f:	e8 4b de 01 00       	call   c00286bf <__extendsfdf2>
c000a874:	83 c4 10             	add    esp,0x10
c000a877:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a87b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a87f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a883:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a887:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88f:	e8 34 d4 01 00       	call   c0027cc8 <__muldf3>
c000a894:	83 c4 10             	add    esp,0x10
c000a897:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a89b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a89f:	52                   	push   edx
c000a8a0:	50                   	push   eax
c000a8a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a9:	e8 9d cd 01 00       	call   c002764b <__adddf3>
c000a8ae:	59                   	pop    ecx
c000a8af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a8b3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a8b7:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a8bd:	e8 fd dd 01 00       	call   c00286bf <__extendsfdf2>
c000a8c2:	83 c4 10             	add    esp,0x10
c000a8c5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8c9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8dd:	e8 e6 d3 01 00       	call   c0027cc8 <__muldf3>
c000a8e2:	83 c4 10             	add    esp,0x10
c000a8e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8ed:	52                   	push   edx
c000a8ee:	50                   	push   eax
c000a8ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f7:	e8 4f cd 01 00       	call   c002764b <__adddf3>
c000a8fc:	59                   	pop    ecx
c000a8fd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a901:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a905:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a90b:	e8 af dd 01 00       	call   c00286bf <__extendsfdf2>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a917:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a923:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a927:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a92b:	e8 98 d3 01 00       	call   c0027cc8 <__muldf3>
c000a930:	83 c4 10             	add    esp,0x10
c000a933:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a937:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a93b:	52                   	push   edx
c000a93c:	50                   	push   eax
c000a93d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a941:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a945:	e8 01 cd 01 00       	call   c002764b <__adddf3>
c000a94a:	59                   	pop    ecx
c000a94b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a94f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a953:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a959:	e8 61 dd 01 00       	call   c00286bf <__extendsfdf2>
c000a95e:	83 c4 10             	add    esp,0x10
c000a961:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a965:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a969:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a971:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a975:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a979:	e8 4a d3 01 00       	call   c0027cc8 <__muldf3>
c000a97e:	83 c4 10             	add    esp,0x10
c000a981:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a985:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a989:	52                   	push   edx
c000a98a:	50                   	push   eax
c000a98b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a98f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a993:	e8 b3 cc 01 00       	call   c002764b <__adddf3>
c000a998:	59                   	pop    ecx
c000a999:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a99d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a9a1:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a9a7:	e8 13 dd 01 00       	call   c00286bf <__extendsfdf2>
c000a9ac:	83 c4 10             	add    esp,0x10
c000a9af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c7:	e8 fc d2 01 00       	call   c0027cc8 <__muldf3>
c000a9cc:	83 c4 10             	add    esp,0x10
c000a9cf:	83 c6 18             	add    esi,0x18
c000a9d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9da:	52                   	push   edx
c000a9db:	50                   	push   eax
c000a9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e4:	e8 62 cc 01 00       	call   c002764b <__adddf3>
c000a9e9:	59                   	pop    ecx
c000a9ea:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a9ee:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a9f2:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a9f8:	e8 c2 dc 01 00       	call   c00286bf <__extendsfdf2>
c000a9fd:	83 c4 10             	add    esp,0x10
c000aa00:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000aa04:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000aa08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	e8 ab d2 01 00       	call   c0027cc8 <__muldf3>
c000aa1d:	83 c4 10             	add    esp,0x10
c000aa20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa24:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aa28:	52                   	push   edx
c000aa29:	50                   	push   eax
c000aa2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa32:	e8 14 cc 01 00       	call   c002764b <__adddf3>
c000aa37:	83 c4 10             	add    esp,0x10
c000aa3a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000aa3e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000aa42:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000aa45:	0f 89 8b fd ff ff    	jns    c000a7d6 <calc_output_hex+0x9e>
c000aa4b:	31 f6                	xor    esi,esi
c000aa4d:	31 ff                	xor    edi,edi
c000aa4f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000aa53:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa56:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000aa5a:	29 e9                	sub    ecx,ebp
c000aa5c:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000aa60:	29 c8                	sub    eax,ecx
c000aa62:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000aa65:	99                   	cdq    
c000aa66:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000aa6a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000aa6d:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000aa71:	0f af e8             	imul   ebp,eax
c000aa74:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000aa78:	40                   	inc    eax
c000aa79:	01 cd                	add    ebp,ecx
c000aa7b:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000aa80:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000aa84:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aa88:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000aa8c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000aa8f:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000aa93:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000aa97:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000aa9b:	89 e8                	mov    eax,ebp
c000aa9d:	e8 42 f0 ff ff       	call   c0009ae4 <fp_to_double>
c000aaa2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaaa:	89 e8                	mov    eax,ebp
c000aaac:	e8 29 f0 ff ff       	call   c0009ada <fp_to_int>
c000aab1:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000aab5:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000aab8:	52                   	push   edx
c000aab9:	52                   	push   edx
c000aaba:	51                   	push   ecx
c000aabb:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000aac2:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000aac9:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000aacd:	e8 0e c5 01 00       	call   c0026fe0 <__subsf3>
c000aad2:	89 04 24             	mov    DWORD PTR [esp],eax
c000aad5:	e8 e5 db 01 00       	call   c00286bf <__extendsfdf2>
c000aada:	83 c4 10             	add    esp,0x10
c000aadd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aae1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aae5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaed:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf5:	e8 ce d1 01 00       	call   c0027cc8 <__muldf3>
c000aafa:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000ab01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab05:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ab08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab0c:	e8 ae db 01 00       	call   c00286bf <__extendsfdf2>
c000ab11:	83 c4 10             	add    esp,0x10
c000ab14:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab18:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab1c:	52                   	push   edx
c000ab1d:	50                   	push   eax
c000ab1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab26:	e8 20 cb 01 00       	call   c002764b <__adddf3>
c000ab2b:	59                   	pop    ecx
c000ab2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab30:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab34:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000ab3a:	e8 80 db 01 00       	call   c00286bf <__extendsfdf2>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab46:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab52:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab56:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab5a:	e8 69 d1 01 00       	call   c0027cc8 <__muldf3>
c000ab5f:	83 c4 10             	add    esp,0x10
c000ab62:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab66:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab6a:	52                   	push   edx
c000ab6b:	50                   	push   eax
c000ab6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab74:	e8 d2 ca 01 00       	call   c002764b <__adddf3>
c000ab79:	59                   	pop    ecx
c000ab7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ab7e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ab82:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000ab88:	e8 32 db 01 00       	call   c00286bf <__extendsfdf2>
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab94:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aba0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba8:	e8 1b d1 01 00       	call   c0027cc8 <__muldf3>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abb4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abb8:	52                   	push   edx
c000abb9:	50                   	push   eax
c000abba:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abbe:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abc2:	e8 84 ca 01 00       	call   c002764b <__adddf3>
c000abc7:	59                   	pop    ecx
c000abc8:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000abcc:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000abd0:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000abd6:	e8 e4 da 01 00       	call   c00286bf <__extendsfdf2>
c000abdb:	83 c4 10             	add    esp,0x10
c000abde:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abe2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abee:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf6:	e8 cd d0 01 00       	call   c0027cc8 <__muldf3>
c000abfb:	83 c4 10             	add    esp,0x10
c000abfe:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac02:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac06:	52                   	push   edx
c000ac07:	50                   	push   eax
c000ac08:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac10:	e8 36 ca 01 00       	call   c002764b <__adddf3>
c000ac15:	59                   	pop    ecx
c000ac16:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000ac1a:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000ac1e:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000ac24:	e8 96 da 01 00       	call   c00286bf <__extendsfdf2>
c000ac29:	83 c4 10             	add    esp,0x10
c000ac2c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac30:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac44:	e8 7f d0 01 00       	call   c0027cc8 <__muldf3>
c000ac49:	83 c4 10             	add    esp,0x10
c000ac4c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac50:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac54:	52                   	push   edx
c000ac55:	50                   	push   eax
c000ac56:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5e:	e8 e8 c9 01 00       	call   c002764b <__adddf3>
c000ac63:	59                   	pop    ecx
c000ac64:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000ac68:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000ac6c:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000ac72:	e8 48 da 01 00       	call   c00286bf <__extendsfdf2>
c000ac77:	83 c4 10             	add    esp,0x10
c000ac7a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac7e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac8a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac92:	e8 31 d0 01 00       	call   c0027cc8 <__muldf3>
c000ac97:	83 c4 10             	add    esp,0x10
c000ac9a:	83 eb 18             	sub    ebx,0x18
c000ac9d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aca1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aca5:	52                   	push   edx
c000aca6:	50                   	push   eax
c000aca7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acaf:	e8 97 c9 01 00       	call   c002764b <__adddf3>
c000acb4:	59                   	pop    ecx
c000acb5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000acb9:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000acbd:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000acc3:	e8 f7 d9 01 00       	call   c00286bf <__extendsfdf2>
c000acc8:	83 c4 10             	add    esp,0x10
c000accb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000accf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000acd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acdb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000acdf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ace3:	e8 e0 cf 01 00       	call   c0027cc8 <__muldf3>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acf3:	52                   	push   edx
c000acf4:	50                   	push   eax
c000acf5:	57                   	push   edi
c000acf6:	56                   	push   esi
c000acf7:	e8 4f c9 01 00       	call   c002764b <__adddf3>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	89 c6                	mov    esi,eax
c000ad01:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ad04:	89 d7                	mov    edi,edx
c000ad06:	85 ed                	test   ebp,ebp
c000ad08:	0f 8f 8d fd ff ff    	jg     c000aa9b <calc_output_hex+0x363>
c000ad0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1e:	e8 28 c9 01 00       	call   c002764b <__adddf3>
c000ad23:	83 c4 10             	add    esp,0x10
c000ad26:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad3d:	e8 86 cf 01 00       	call   c0027cc8 <__muldf3>
c000ad42:	59                   	pop    ecx
c000ad43:	5b                   	pop    ebx
c000ad44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad54:	e8 42 d8 01 00       	call   c002859b <__truncdfsf2>
c000ad59:	83 c4 10             	add    esp,0x10
c000ad5c:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ad63:	89 03                	mov    DWORD PTR [ebx],eax
c000ad65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad75:	e8 d1 c8 01 00       	call   c002764b <__adddf3>
c000ad7a:	83 c4 10             	add    esp,0x10
c000ad7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad94:	e8 2f cf 01 00       	call   c0027cc8 <__muldf3>
c000ad99:	5d                   	pop    ebp
c000ad9a:	59                   	pop    ecx
c000ad9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ada3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ada7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adab:	e8 eb d7 01 00       	call   c002859b <__truncdfsf2>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000adba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000adbd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adcd:	e8 79 c8 01 00       	call   c002764b <__adddf3>
c000add2:	83 c4 10             	add    esp,0x10
c000add5:	89 04 24             	mov    DWORD PTR [esp],eax
c000add8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000addc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adec:	e8 d7 ce 01 00       	call   c0027cc8 <__muldf3>
c000adf1:	5b                   	pop    ebx
c000adf2:	5d                   	pop    ebp
c000adf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adfb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae03:	e8 93 d7 01 00       	call   c002859b <__truncdfsf2>
c000ae08:	83 c4 10             	add    esp,0x10
c000ae0b:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ae15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae25:	e8 21 c8 01 00       	call   c002764b <__adddf3>
c000ae2a:	83 c4 10             	add    esp,0x10
c000ae2d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae44:	e8 7f ce 01 00       	call   c0027cc8 <__muldf3>
c000ae49:	59                   	pop    ecx
c000ae4a:	5b                   	pop    ebx
c000ae4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae53:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae5b:	e8 3b d7 01 00       	call   c002859b <__truncdfsf2>
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae6a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ae6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae7d:	e8 c9 c7 01 00       	call   c002764b <__adddf3>
c000ae82:	83 c4 10             	add    esp,0x10
c000ae85:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae88:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae9c:	e8 27 ce 01 00       	call   c0027cc8 <__muldf3>
c000aea1:	5d                   	pop    ebp
c000aea2:	59                   	pop    ecx
c000aea3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aeab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeb3:	e8 e3 d6 01 00       	call   c002859b <__truncdfsf2>
c000aeb8:	83 c4 10             	add    esp,0x10
c000aebb:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aec2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aec5:	57                   	push   edi
c000aec6:	56                   	push   esi
c000aec7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecf:	e8 77 c7 01 00       	call   c002764b <__adddf3>
c000aed4:	83 c4 10             	add    esp,0x10
c000aed7:	89 04 24             	mov    DWORD PTR [esp],eax
c000aeda:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aede:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeee:	e8 d5 cd 01 00       	call   c0027cc8 <__muldf3>
c000aef3:	5b                   	pop    ebx
c000aef4:	5e                   	pop    esi
c000aef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aef9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aefd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af05:	e8 91 d6 01 00       	call   c002859b <__truncdfsf2>
c000af0a:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000af11:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000af14:	81 c4 9c 00 00 00    	add    esp,0x9c
c000af1a:	5b                   	pop    ebx
c000af1b:	5e                   	pop    esi
c000af1c:	5f                   	pop    edi
c000af1d:	5d                   	pop    ebp
c000af1e:	c3                   	ret    

c000af1f <sinc_reset>:
c000af1f:	56                   	push   esi
c000af20:	53                   	push   ebx
c000af21:	51                   	push   ecx
c000af22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af26:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000af29:	85 db                	test   ebx,ebx
c000af2b:	74 59                	je     c000af86 <sinc_reset+0x67>
c000af2d:	31 d2                	xor    edx,edx
c000af2f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000af36:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000af39:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000af3c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000af43:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000af4a:	31 c0                	xor    eax,eax
c000af4c:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000af52:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000af55:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000af58:	52                   	push   edx
c000af59:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af5c:	c1 e0 02             	shl    eax,0x2
c000af5f:	50                   	push   eax
c000af60:	6a 00                	push   0x0
c000af62:	56                   	push   esi
c000af63:	e8 e8 57 ff ff       	call   c0000750 <memset>
c000af68:	83 c4 0c             	add    esp,0xc
c000af6b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000af6e:	c1 e0 02             	shl    eax,0x2
c000af71:	50                   	push   eax
c000af72:	68 aa 00 00 00       	push   0xaa
c000af77:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af7a:	8d 04 86             	lea    eax,[esi+eax*4]
c000af7d:	50                   	push   eax
c000af7e:	e8 cd 57 ff ff       	call   c0000750 <memset>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	58                   	pop    eax
c000af87:	5b                   	pop    ebx
c000af88:	5e                   	pop    esi
c000af89:	c3                   	ret    

c000af8a <calc_output_multi>:
c000af8a:	55                   	push   ebp
c000af8b:	57                   	push   edi
c000af8c:	56                   	push   esi
c000af8d:	89 c6                	mov    esi,eax
c000af8f:	53                   	push   ebx
c000af90:	83 ec 4c             	sub    esp,0x4c
c000af93:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000af97:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000af9b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000af9f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000afa3:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000afa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000afab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000afaf:	8d 46 44             	lea    eax,[esi+0x44]
c000afb2:	89 04 24             	mov    DWORD PTR [esp],eax
c000afb5:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000afbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000afbf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000afc2:	e8 0f eb ff ff       	call   c0009ad6 <int_to_fp>
c000afc7:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000afca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000afce:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000afd2:	99                   	cdq    
c000afd3:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afdb:	0f af d0             	imul   edx,eax
c000afde:	0f af c3             	imul   eax,ebx
c000afe1:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000afe5:	29 c1                	sub    ecx,eax
c000afe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000afeb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000afef:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000aff6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000affa:	57                   	push   edi
c000affb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afff:	6a 00                	push   0x0
c000b001:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b005:	e8 46 57 ff ff       	call   c0000750 <memset>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b011:	89 df                	mov    edi,ebx
c000b013:	e8 cc ea ff ff       	call   c0009ae4 <fp_to_double>
c000b018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b020:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b024:	e8 b1 ea ff ff       	call   c0009ada <fp_to_int>
c000b029:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b02c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b02f:	51                   	push   ecx
c000b030:	51                   	push   ecx
c000b031:	55                   	push   ebp
c000b032:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b036:	e8 a5 bf 01 00       	call   c0026fe0 <__subsf3>
c000b03b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b03e:	e8 7c d6 01 00       	call   c00286bf <__extendsfdf2>
c000b043:	83 c4 10             	add    esp,0x10
c000b046:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b04a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b04e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b052:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b056:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05e:	e8 65 cc 01 00       	call   c0027cc8 <__muldf3>
c000b063:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b066:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b06a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b06e:	e8 4c d6 01 00       	call   c00286bf <__extendsfdf2>
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07e:	52                   	push   edx
c000b07f:	50                   	push   eax
c000b080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b088:	e8 be c5 01 00       	call   c002764b <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b094:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b098:	89 f8                	mov    eax,edi
c000b09a:	b9 08 00 00 00       	mov    ecx,0x8
c000b09f:	99                   	cdq    
c000b0a0:	f7 f9                	idiv   ecx
c000b0a2:	4a                   	dec    edx
c000b0a3:	83 fa 06             	cmp    edx,0x6
c000b0a6:	77 07                	ja     c000b0af <calc_output_multi+0x125>
c000b0a8:	ff 24 95 84 9f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd607c]
c000b0af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b2:	4f                   	dec    edi
c000b0b3:	83 ec 0c             	sub    esp,0xc
c000b0b6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0bd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0c8:	e8 f2 d5 01 00       	call   c00286bf <__extendsfdf2>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	e8 db cb 01 00       	call   c0027cc8 <__muldf3>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f8:	52                   	push   edx
c000b0f9:	50                   	push   eax
c000b0fa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0fd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b100:	e8 46 c5 01 00       	call   c002764b <__adddf3>
c000b105:	83 c4 10             	add    esp,0x10
c000b108:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b10e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b111:	4f                   	dec    edi
c000b112:	83 ec 0c             	sub    esp,0xc
c000b115:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b118:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b11c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b123:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b127:	e8 93 d5 01 00       	call   c00286bf <__extendsfdf2>
c000b12c:	83 c4 10             	add    esp,0x10
c000b12f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b133:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	e8 7c cb 01 00       	call   c0027cc8 <__muldf3>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b153:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b157:	52                   	push   edx
c000b158:	50                   	push   eax
c000b159:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b15c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b15f:	e8 e7 c4 01 00       	call   c002764b <__adddf3>
c000b164:	83 c4 10             	add    esp,0x10
c000b167:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b16d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b170:	4f                   	dec    edi
c000b171:	83 ec 0c             	sub    esp,0xc
c000b174:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b177:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b17b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b182:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b186:	e8 34 d5 01 00       	call   c00286bf <__extendsfdf2>
c000b18b:	83 c4 10             	add    esp,0x10
c000b18e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b192:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a6:	e8 1d cb 01 00       	call   c0027cc8 <__muldf3>
c000b1ab:	83 c4 10             	add    esp,0x10
c000b1ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1b2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1b6:	52                   	push   edx
c000b1b7:	50                   	push   eax
c000b1b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1bb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1be:	e8 88 c4 01 00       	call   c002764b <__adddf3>
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1c9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b1cf:	4f                   	dec    edi
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1da:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1e5:	e8 d5 d4 01 00       	call   c00286bf <__extendsfdf2>
c000b1ea:	83 c4 10             	add    esp,0x10
c000b1ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1f1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b201:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b205:	e8 be ca 01 00       	call   c0027cc8 <__muldf3>
c000b20a:	83 c4 10             	add    esp,0x10
c000b20d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b211:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b215:	52                   	push   edx
c000b216:	50                   	push   eax
c000b217:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b21a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b21d:	e8 29 c4 01 00       	call   c002764b <__adddf3>
c000b222:	83 c4 10             	add    esp,0x10
c000b225:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b228:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b22b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b22e:	4f                   	dec    edi
c000b22f:	83 ec 0c             	sub    esp,0xc
c000b232:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b235:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b239:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b240:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b244:	e8 76 d4 01 00       	call   c00286bf <__extendsfdf2>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b250:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b260:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b264:	e8 5f ca 01 00       	call   c0027cc8 <__muldf3>
c000b269:	83 c4 10             	add    esp,0x10
c000b26c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b270:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b274:	52                   	push   edx
c000b275:	50                   	push   eax
c000b276:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b279:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b27c:	e8 ca c3 01 00       	call   c002764b <__adddf3>
c000b281:	83 c4 10             	add    esp,0x10
c000b284:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b287:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b28a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b28d:	4f                   	dec    edi
c000b28e:	83 ec 0c             	sub    esp,0xc
c000b291:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b298:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b29f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2a3:	e8 17 d4 01 00       	call   c00286bf <__extendsfdf2>
c000b2a8:	83 c4 10             	add    esp,0x10
c000b2ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2c3:	e8 00 ca 01 00       	call   c0027cc8 <__muldf3>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2cf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2d3:	52                   	push   edx
c000b2d4:	50                   	push   eax
c000b2d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2db:	e8 6b c3 01 00       	call   c002764b <__adddf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b2ec:	4f                   	dec    edi
c000b2ed:	83 ec 0c             	sub    esp,0xc
c000b2f0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2fe:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b302:	e8 b8 d3 01 00       	call   c00286bf <__extendsfdf2>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b30e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b312:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b316:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b31e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b322:	e8 a1 c9 01 00       	call   c0027cc8 <__muldf3>
c000b327:	83 c4 10             	add    esp,0x10
c000b32a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b32e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b332:	52                   	push   edx
c000b333:	50                   	push   eax
c000b334:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b337:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b33a:	e8 0c c3 01 00       	call   c002764b <__adddf3>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b345:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b348:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b34b:	4f                   	dec    edi
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b352:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b356:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b35d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b361:	e8 59 d3 01 00       	call   c00286bf <__extendsfdf2>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b36d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b379:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b37d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b381:	e8 42 c9 01 00       	call   c0027cc8 <__muldf3>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b38d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b391:	52                   	push   edx
c000b392:	50                   	push   eax
c000b393:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b396:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b399:	e8 ad c2 01 00       	call   c002764b <__adddf3>
c000b39e:	83 c4 10             	add    esp,0x10
c000b3a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a7:	85 ff                	test   edi,edi
c000b3a9:	0f 8f e9 fc ff ff    	jg     c000b098 <calc_output_multi+0x10e>
c000b3af:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b3b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3b7:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3bb:	0f 89 4c fc ff ff    	jns    c000b00d <calc_output_multi+0x83>
c000b3c1:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b3c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3c9:	29 c8                	sub    eax,ecx
c000b3cb:	99                   	cdq    
c000b3cc:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b3d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b3d4:	0f af d0             	imul   edx,eax
c000b3d7:	40                   	inc    eax
c000b3d8:	01 d1                	add    ecx,edx
c000b3da:	0f af c3             	imul   eax,ebx
c000b3dd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b3e1:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b3e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e8:	55                   	push   ebp
c000b3e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ed:	6a 00                	push   0x0
c000b3ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3f3:	e8 58 53 ff ff       	call   c0000750 <memset>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3ff:	e8 e0 e6 ff ff       	call   c0009ae4 <fp_to_double>
c000b404:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b40c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b410:	e8 c5 e6 ff ff       	call   c0009ada <fp_to_int>
c000b415:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b418:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b41b:	57                   	push   edi
c000b41c:	57                   	push   edi
c000b41d:	89 df                	mov    edi,ebx
c000b41f:	55                   	push   ebp
c000b420:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b424:	e8 b7 bb 01 00       	call   c0026fe0 <__subsf3>
c000b429:	89 04 24             	mov    DWORD PTR [esp],eax
c000b42c:	e8 8e d2 01 00       	call   c00286bf <__extendsfdf2>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b438:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b444:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b44c:	e8 77 c8 01 00       	call   c0027cc8 <__muldf3>
c000b451:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b454:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b458:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b45c:	e8 5e d2 01 00       	call   c00286bf <__extendsfdf2>
c000b461:	83 c4 10             	add    esp,0x10
c000b464:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b468:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46c:	52                   	push   edx
c000b46d:	50                   	push   eax
c000b46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b476:	e8 d0 c1 01 00       	call   c002764b <__adddf3>
c000b47b:	83 c4 10             	add    esp,0x10
c000b47e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b486:	89 f8                	mov    eax,edi
c000b488:	b9 08 00 00 00       	mov    ecx,0x8
c000b48d:	99                   	cdq    
c000b48e:	f7 f9                	idiv   ecx
c000b490:	4a                   	dec    edx
c000b491:	83 fa 06             	cmp    edx,0x6
c000b494:	77 07                	ja     c000b49d <calc_output_multi+0x513>
c000b496:	ff 24 95 a0 9f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6060]
c000b49d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a1:	4f                   	dec    edi
c000b4a2:	83 ec 0c             	sub    esp,0xc
c000b4a5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4ac:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4b3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4b7:	e8 03 d2 01 00       	call   c00286bf <__extendsfdf2>
c000b4bc:	83 c4 10             	add    esp,0x10
c000b4bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d7:	e8 ec c7 01 00       	call   c0027cc8 <__muldf3>
c000b4dc:	83 c4 10             	add    esp,0x10
c000b4df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4e7:	52                   	push   edx
c000b4e8:	50                   	push   eax
c000b4e9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4ec:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4ef:	e8 57 c1 01 00       	call   c002764b <__adddf3>
c000b4f4:	83 c4 10             	add    esp,0x10
c000b4f7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4fa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b501:	4f                   	dec    edi
c000b502:	83 ec 0c             	sub    esp,0xc
c000b505:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b508:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b50c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b513:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b517:	e8 a3 d1 01 00       	call   c00286bf <__extendsfdf2>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b523:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b527:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b533:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b537:	e8 8c c7 01 00       	call   c0027cc8 <__muldf3>
c000b53c:	83 c4 10             	add    esp,0x10
c000b53f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b543:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b547:	52                   	push   edx
c000b548:	50                   	push   eax
c000b549:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b54c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b54f:	e8 f7 c0 01 00       	call   c002764b <__adddf3>
c000b554:	83 c4 10             	add    esp,0x10
c000b557:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b55a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b55d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b561:	4f                   	dec    edi
c000b562:	83 ec 0c             	sub    esp,0xc
c000b565:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b568:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b56c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b573:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b577:	e8 43 d1 01 00       	call   c00286bf <__extendsfdf2>
c000b57c:	83 c4 10             	add    esp,0x10
c000b57f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b583:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b593:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b597:	e8 2c c7 01 00       	call   c0027cc8 <__muldf3>
c000b59c:	83 c4 10             	add    esp,0x10
c000b59f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5a7:	52                   	push   edx
c000b5a8:	50                   	push   eax
c000b5a9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b5ac:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b5af:	e8 97 c0 01 00       	call   c002764b <__adddf3>
c000b5b4:	83 c4 10             	add    esp,0x10
c000b5b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5ba:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5c1:	4f                   	dec    edi
c000b5c2:	83 ec 0c             	sub    esp,0xc
c000b5c5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b5c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b5cc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b5d3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b5d7:	e8 e3 d0 01 00       	call   c00286bf <__extendsfdf2>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f7:	e8 cc c6 01 00       	call   c0027cc8 <__muldf3>
c000b5fc:	83 c4 10             	add    esp,0x10
c000b5ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b603:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b607:	52                   	push   edx
c000b608:	50                   	push   eax
c000b609:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b60c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b60f:	e8 37 c0 01 00       	call   c002764b <__adddf3>
c000b614:	83 c4 10             	add    esp,0x10
c000b617:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b61a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b621:	4f                   	dec    edi
c000b622:	83 ec 0c             	sub    esp,0xc
c000b625:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b628:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b62c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b633:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b637:	e8 83 d0 01 00       	call   c00286bf <__extendsfdf2>
c000b63c:	83 c4 10             	add    esp,0x10
c000b63f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b643:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b653:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b657:	e8 6c c6 01 00       	call   c0027cc8 <__muldf3>
c000b65c:	83 c4 10             	add    esp,0x10
c000b65f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b663:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b667:	52                   	push   edx
c000b668:	50                   	push   eax
c000b669:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b66c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b66f:	e8 d7 bf 01 00       	call   c002764b <__adddf3>
c000b674:	83 c4 10             	add    esp,0x10
c000b677:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b67a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b67d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b681:	4f                   	dec    edi
c000b682:	83 ec 0c             	sub    esp,0xc
c000b685:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b688:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b68c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b693:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b697:	e8 23 d0 01 00       	call   c00286bf <__extendsfdf2>
c000b69c:	83 c4 10             	add    esp,0x10
c000b69f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b7:	e8 0c c6 01 00       	call   c0027cc8 <__muldf3>
c000b6bc:	83 c4 10             	add    esp,0x10
c000b6bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6c7:	52                   	push   edx
c000b6c8:	50                   	push   eax
c000b6c9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b6cc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b6cf:	e8 77 bf 01 00       	call   c002764b <__adddf3>
c000b6d4:	83 c4 10             	add    esp,0x10
c000b6d7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b6da:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b6dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e1:	4f                   	dec    edi
c000b6e2:	83 ec 0c             	sub    esp,0xc
c000b6e5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b6e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b6ec:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b6f3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b6f7:	e8 c3 cf 01 00       	call   c00286bf <__extendsfdf2>
c000b6fc:	83 c4 10             	add    esp,0x10
c000b6ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b703:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b713:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b717:	e8 ac c5 01 00       	call   c0027cc8 <__muldf3>
c000b71c:	83 c4 10             	add    esp,0x10
c000b71f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b723:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b727:	52                   	push   edx
c000b728:	50                   	push   eax
c000b729:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b72c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b72f:	e8 17 bf 01 00       	call   c002764b <__adddf3>
c000b734:	83 c4 10             	add    esp,0x10
c000b737:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b73a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b73d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b741:	4f                   	dec    edi
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b748:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b74c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b753:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b757:	e8 63 cf 01 00       	call   c00286bf <__extendsfdf2>
c000b75c:	83 c4 10             	add    esp,0x10
c000b75f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b777:	e8 4c c5 01 00       	call   c0027cc8 <__muldf3>
c000b77c:	83 c4 10             	add    esp,0x10
c000b77f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b783:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b787:	52                   	push   edx
c000b788:	50                   	push   eax
c000b789:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b78c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b78f:	e8 b7 be 01 00       	call   c002764b <__adddf3>
c000b794:	83 c4 10             	add    esp,0x10
c000b797:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b79a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b79d:	85 ff                	test   edi,edi
c000b79f:	0f 8f e1 fc ff ff    	jg     c000b486 <calc_output_multi+0x4fc>
c000b7a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b7a9:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b7ad:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b7b1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b7b6:	0f 8f 3f fc ff ff    	jg     c000b3fb <calc_output_multi+0x471>
c000b7bc:	be 08 00 00 00       	mov    esi,0x8
c000b7c1:	89 d8                	mov    eax,ebx
c000b7c3:	99                   	cdq    
c000b7c4:	f7 fe                	idiv   esi
c000b7c6:	4a                   	dec    edx
c000b7c7:	83 fa 06             	cmp    edx,0x6
c000b7ca:	77 07                	ja     c000b7d3 <calc_output_multi+0x849>
c000b7cc:	ff 24 95 bc 9f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6044]
c000b7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d7:	4b                   	dec    ebx
c000b7d8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7dc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7e3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7e7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7ea:	e8 5c be 01 00       	call   c002764b <__adddf3>
c000b7ef:	83 c4 10             	add    esp,0x10
c000b7f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b80a:	e8 b9 c4 01 00       	call   c0027cc8 <__muldf3>
c000b80f:	5d                   	pop    ebp
c000b810:	59                   	pop    ecx
c000b811:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b815:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b821:	e8 75 cd 01 00       	call   c002859b <__truncdfsf2>
c000b826:	83 c4 10             	add    esp,0x10
c000b829:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b82d:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b834:	4b                   	dec    ebx
c000b835:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b839:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b840:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b844:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b847:	e8 ff bd 01 00       	call   c002764b <__adddf3>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b867:	e8 5c c4 01 00       	call   c0027cc8 <__muldf3>
c000b86c:	59                   	pop    ecx
c000b86d:	5f                   	pop    edi
c000b86e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b872:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b876:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87e:	e8 18 cd 01 00       	call   c002859b <__truncdfsf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b88a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b88d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b891:	4b                   	dec    ebx
c000b892:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b896:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b89d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8a1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8a4:	e8 a2 bd 01 00       	call   c002764b <__adddf3>
c000b8a9:	83 c4 10             	add    esp,0x10
c000b8ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c4:	e8 ff c3 01 00       	call   c0027cc8 <__muldf3>
c000b8c9:	5f                   	pop    edi
c000b8ca:	5d                   	pop    ebp
c000b8cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8db:	e8 bb cc 01 00       	call   c002859b <__truncdfsf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b8e7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8ee:	4b                   	dec    ebx
c000b8ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8fa:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8fe:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b901:	e8 45 bd 01 00       	call   c002764b <__adddf3>
c000b906:	83 c4 10             	add    esp,0x10
c000b909:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b90d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b921:	e8 a2 c3 01 00       	call   c0027cc8 <__muldf3>
c000b926:	5d                   	pop    ebp
c000b927:	59                   	pop    ecx
c000b928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b92c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b938:	e8 5e cc 01 00       	call   c002859b <__truncdfsf2>
c000b93d:	83 c4 10             	add    esp,0x10
c000b940:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b944:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b947:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b94b:	4b                   	dec    ebx
c000b94c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b950:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b953:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b957:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b95b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b95e:	e8 e8 bc 01 00       	call   c002764b <__adddf3>
c000b963:	83 c4 10             	add    esp,0x10
c000b966:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b96a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97e:	e8 45 c3 01 00       	call   c0027cc8 <__muldf3>
c000b983:	59                   	pop    ecx
c000b984:	5f                   	pop    edi
c000b985:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b989:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b98d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b995:	e8 01 cc 01 00       	call   c002859b <__truncdfsf2>
c000b99a:	83 c4 10             	add    esp,0x10
c000b99d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9a1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9a8:	4b                   	dec    ebx
c000b9a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9b4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9b8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9bb:	e8 8b bc 01 00       	call   c002764b <__adddf3>
c000b9c0:	83 c4 10             	add    esp,0x10
c000b9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9db:	e8 e8 c2 01 00       	call   c0027cc8 <__muldf3>
c000b9e0:	5f                   	pop    edi
c000b9e1:	5d                   	pop    ebp
c000b9e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9f2:	e8 a4 cb 01 00       	call   c002859b <__truncdfsf2>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9fe:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba05:	4b                   	dec    ebx
c000ba06:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba0a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba11:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba15:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba18:	e8 2e bc 01 00       	call   c002764b <__adddf3>
c000ba1d:	83 c4 10             	add    esp,0x10
c000ba20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba38:	e8 8b c2 01 00       	call   c0027cc8 <__muldf3>
c000ba3d:	5d                   	pop    ebp
c000ba3e:	59                   	pop    ecx
c000ba3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba43:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4f:	e8 47 cb 01 00       	call   c002859b <__truncdfsf2>
c000ba54:	83 c4 10             	add    esp,0x10
c000ba57:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000ba5b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba62:	4b                   	dec    ebx
c000ba63:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba67:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba72:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba75:	e8 d1 bb 01 00       	call   c002764b <__adddf3>
c000ba7a:	83 c4 10             	add    esp,0x10
c000ba7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba95:	e8 2e c2 01 00       	call   c0027cc8 <__muldf3>
c000ba9a:	59                   	pop    ecx
c000ba9b:	5f                   	pop    edi
c000ba9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000baa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baac:	e8 ea ca 01 00       	call   c002859b <__truncdfsf2>
c000bab1:	83 c4 10             	add    esp,0x10
c000bab4:	85 db                	test   ebx,ebx
c000bab6:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000baba:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000babd:	0f 8f fe fc ff ff    	jg     c000b7c1 <calc_output_multi+0x837>
c000bac3:	83 c4 4c             	add    esp,0x4c
c000bac6:	5b                   	pop    ebx
c000bac7:	5e                   	pop    esi
c000bac8:	5f                   	pop    edi
c000bac9:	5d                   	pop    ebp
c000baca:	c3                   	ret    

c000bacb <double_to_fp>:
c000bacb:	83 ec 0c             	sub    esp,0xc
c000bace:	68 00 00 b0 40       	push   0x40b00000
c000bad3:	6a 00                	push   0x0
c000bad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000badd:	e8 e6 c1 01 00       	call   c0027cc8 <__muldf3>
c000bae2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bae6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baea:	83 c4 1c             	add    esp,0x1c
c000baed:	e9 5e cc 01 00       	jmp    c0028750 <lrint>

c000baf2 <prepare_data>:
c000baf2:	55                   	push   ebp
c000baf3:	57                   	push   edi
c000baf4:	56                   	push   esi
c000baf5:	53                   	push   ebx
c000baf6:	83 ec 1c             	sub    esp,0x1c
c000baf9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bafd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bb01:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000bb05:	0f 89 57 01 00 00    	jns    c000bc62 <prepare_data+0x170>
c000bb0b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000bb0e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb11:	85 d2                	test   edx,edx
c000bb13:	75 0d                	jne    c000bb22 <prepare_data+0x30>
c000bb15:	8d 14 36             	lea    edx,[esi+esi*1]
c000bb18:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000bb1b:	29 d0                	sub    eax,edx
c000bb1d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb20:	eb 44                	jmp    c000bb66 <prepare_data+0x74>
c000bb22:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000bb25:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000bb28:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000bb2b:	39 c1                	cmp    ecx,eax
c000bb2d:	7d 04                	jge    c000bb33 <prepare_data+0x41>
c000bb2f:	29 d0                	sub    eax,edx
c000bb31:	eb 2d                	jmp    c000bb60 <prepare_data+0x6e>
c000bb33:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000bb39:	29 d7                	sub    edi,edx
c000bb3b:	01 f7                	add    edi,esi
c000bb3d:	51                   	push   ecx
c000bb3e:	29 f2                	sub    edx,esi
c000bb40:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000bb47:	8d 14 90             	lea    edx,[eax+edx*4]
c000bb4a:	51                   	push   ecx
c000bb4b:	52                   	push   edx
c000bb4c:	50                   	push   eax
c000bb4d:	e8 36 4b ff ff       	call   c0000688 <memmove>
c000bb52:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb55:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb58:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bb5b:	29 f0                	sub    eax,esi
c000bb5d:	83 c4 10             	add    esp,0x10
c000bb60:	29 f0                	sub    eax,esi
c000bb62:	79 02                	jns    c000bb66 <prepare_data+0x74>
c000bb64:	31 c0                	xor    eax,eax
c000bb66:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000bb69:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000bb6c:	29 ef                	sub    edi,ebp
c000bb6e:	39 c7                	cmp    edi,eax
c000bb70:	7e 02                	jle    c000bb74 <prepare_data+0x82>
c000bb72:	89 c7                	mov    edi,eax
c000bb74:	89 f8                	mov    eax,edi
c000bb76:	99                   	cdq    
c000bb77:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb7a:	b8 15 00 00 00       	mov    eax,0x15
c000bb7f:	29 d7                	sub    edi,edx
c000bb81:	0f 88 dd 00 00 00    	js     c000bc64 <prepare_data+0x172>
c000bb87:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000bb8a:	8d 14 39             	lea    edx,[ecx+edi*1]
c000bb8d:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000bb90:	0f 8f ce 00 00 00    	jg     c000bc64 <prepare_data+0x172>
c000bb96:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000bb9c:	50                   	push   eax
c000bb9d:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bba4:	50                   	push   eax
c000bba5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bba9:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbab:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000bbae:	50                   	push   eax
c000bbaf:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bbb2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bbb6:	50                   	push   eax
c000bbb7:	e8 8a 4a ff ff       	call   c0000646 <memcpy>
c000bbbc:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000bbbf:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000bbc2:	01 fd                	add    ebp,edi
c000bbc4:	01 f9                	add    ecx,edi
c000bbc6:	83 c4 10             	add    esp,0x10
c000bbc9:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000bbcc:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000bbcf:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000bbd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbd6:	0f 85 86 00 00 00    	jne    c000bc62 <prepare_data+0x170>
c000bbdc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000bbdf:	89 e8                	mov    eax,ebp
c000bbe1:	8d 3c 36             	lea    edi,[esi+esi*1]
c000bbe4:	29 c8                	sub    eax,ecx
c000bbe6:	39 f8                	cmp    eax,edi
c000bbe8:	7d 78                	jge    c000bc62 <prepare_data+0x170>
c000bbea:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bbee:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000bbf2:	74 6e                	je     c000bc62 <prepare_data+0x170>
c000bbf4:	8d 7e 04             	lea    edi,[esi+0x4]
c000bbf7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bbfb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000bbfe:	29 ef                	sub    edi,ebp
c000bc00:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000bc04:	7c 29                	jl     c000bc2f <prepare_data+0x13d>
c000bc06:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc09:	29 f1                	sub    ecx,esi
c000bc0b:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bc12:	55                   	push   ebp
c000bc13:	50                   	push   eax
c000bc14:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bc17:	50                   	push   eax
c000bc18:	52                   	push   edx
c000bc19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1d:	e8 66 4a ff ff       	call   c0000688 <memmove>
c000bc22:	83 c4 10             	add    esp,0x10
c000bc25:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bc28:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bc2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc2f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bc32:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bc35:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000bc38:	83 c6 05             	add    esi,0x5
c000bc3b:	78 07                	js     c000bc44 <prepare_data+0x152>
c000bc3d:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc40:	39 cf                	cmp    edi,ecx
c000bc42:	7e 04                	jle    c000bc48 <prepare_data+0x156>
c000bc44:	89 ce                	mov    esi,ecx
c000bc46:	29 c6                	sub    esi,eax
c000bc48:	8d 04 82             	lea    eax,[edx+eax*4]
c000bc4b:	51                   	push   ecx
c000bc4c:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000bc53:	51                   	push   ecx
c000bc54:	6a 00                	push   0x0
c000bc56:	50                   	push   eax
c000bc57:	e8 f4 4a ff ff       	call   c0000750 <memset>
c000bc5c:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000bc5f:	83 c4 10             	add    esp,0x10
c000bc62:	31 c0                	xor    eax,eax
c000bc64:	83 c4 1c             	add    esp,0x1c
c000bc67:	5b                   	pop    ebx
c000bc68:	5e                   	pop    esi
c000bc69:	5f                   	pop    edi
c000bc6a:	5d                   	pop    ebp
c000bc6b:	c3                   	ret    

c000bc6c <sinc_multichan_vari_process>:
c000bc6c:	55                   	push   ebp
c000bc6d:	ba 05 00 00 00       	mov    edx,0x5
c000bc72:	57                   	push   edi
c000bc73:	56                   	push   esi
c000bc74:	53                   	push   ebx
c000bc75:	83 ec 4c             	sub    esp,0x4c
c000bc78:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000bc7c:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000bc80:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000bc83:	85 db                	test   ebx,ebx
c000bc85:	0f 84 9b 06 00 00    	je     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bc8b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bc8e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc91:	0f af c5             	imul   eax,ebp
c000bc94:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bc97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bc9a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bca1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bca8:	0f af c5             	imul   eax,ebp
c000bcab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bcae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bcb1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcb3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcbb:	68 00 00 70 3f       	push   0x3f700000
c000bcc0:	6a 00                	push   0x0
c000bcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcca:	e8 c8 c8 01 00       	call   c0028597 <__ltdf2>
c000bccf:	83 c4 10             	add    esp,0x10
c000bcd2:	ba 16 00 00 00       	mov    edx,0x16
c000bcd7:	85 c0                	test   eax,eax
c000bcd9:	0f 88 47 06 00 00    	js     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bcdf:	68 00 00 70 40       	push   0x40700000
c000bce4:	6a 00                	push   0x0
c000bce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcee:	e8 86 c8 01 00       	call   c0028579 <__gtdf2>
c000bcf3:	83 c4 10             	add    esp,0x10
c000bcf6:	ba 16 00 00 00       	mov    edx,0x16
c000bcfb:	85 c0                	test   eax,eax
c000bcfd:	0f 8f 23 06 00 00    	jg     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bd03:	83 ec 0c             	sub    esp,0xc
c000bd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bd09:	e8 1d c6 01 00       	call   c002832b <__floatsidf>
c000bd0e:	83 c4 10             	add    esp,0x10
c000bd11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd19:	68 00 00 00 40       	push   0x40000000
c000bd1e:	6a 00                	push   0x0
c000bd20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd28:	e8 1e b9 01 00       	call   c002764b <__adddf3>
c000bd2d:	59                   	pop    ecx
c000bd2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd32:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd36:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd39:	e8 ed c5 01 00       	call   c002832b <__floatsidf>
c000bd3e:	83 c4 10             	add    esp,0x10
c000bd41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd49:	52                   	push   edx
c000bd4a:	50                   	push   eax
c000bd4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd53:	e8 54 c2 01 00       	call   c0027fac <__divdf3>
c000bd58:	83 c4 10             	add    esp,0x10
c000bd5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd63:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bd66:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bd69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd81:	e8 f3 c7 01 00       	call   c0028579 <__gtdf2>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	85 c0                	test   eax,eax
c000bd8b:	7e 2d                	jle    c000bdba <sinc_multichan_vari_process+0x14e>
c000bd8d:	68 00 00 f0 3f       	push   0x3ff00000
c000bd92:	6a 00                	push   0x0
c000bd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9c:	e8 f6 c7 01 00       	call   c0028597 <__ltdf2>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	85 c0                	test   eax,eax
c000bda6:	79 4d                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bdb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bdb8:	eb 1b                	jmp    c000bdd5 <sinc_multichan_vari_process+0x169>
c000bdba:	68 00 00 f0 3f       	push   0x3ff00000
c000bdbf:	6a 00                	push   0x0
c000bdc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc9:	e8 c9 c7 01 00       	call   c0028597 <__ltdf2>
c000bdce:	83 c4 10             	add    esp,0x10
c000bdd1:	85 c0                	test   eax,eax
c000bdd3:	79 20                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bdd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde5:	e8 c2 c1 01 00       	call   c0027fac <__divdf3>
c000bdea:	83 c4 10             	add    esp,0x10
c000bded:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdf1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdf5:	50                   	push   eax
c000bdf6:	50                   	push   eax
c000bdf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdff:	e8 4c c9 01 00       	call   c0028750 <lrint>
c000be04:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000be07:	40                   	inc    eax
c000be08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be0c:	0f af c5             	imul   eax,ebp
c000be0f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be13:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000be16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1a:	58                   	pop    eax
c000be1b:	5a                   	pop    edx
c000be1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be24:	e8 27 c9 01 00       	call   c0028750 <lrint>
c000be29:	83 ec 0c             	sub    esp,0xc
c000be2c:	50                   	push   eax
c000be2d:	e8 f9 c4 01 00       	call   c002832b <__floatsidf>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3d:	52                   	push   edx
c000be3e:	50                   	push   eax
c000be3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be47:	e8 50 be 01 00       	call   c0027c9c <__subdf3>
c000be4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be54:	83 c4 20             	add    esp,0x20
c000be57:	6a 00                	push   0x0
c000be59:	6a 00                	push   0x0
c000be5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be63:	e8 2f c7 01 00       	call   c0028597 <__ltdf2>
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	85 c0                	test   eax,eax
c000be6d:	79 1f                	jns    c000be8e <sinc_multichan_vari_process+0x222>
c000be6f:	68 00 00 f0 3f       	push   0x3ff00000
c000be74:	6a 00                	push   0x0
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 c8 b7 01 00       	call   c002764b <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bea7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beab:	e8 ec bd 01 00       	call   c0027c9c <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 8e c8 01 00       	call   c0028750 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bec9:	01 e8                	add    eax,ebp
c000becb:	99                   	cdq    
c000becc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000becf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bed6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000beda:	68 00 00 f0 3f       	push   0x3ff00000
c000bedf:	6a 00                	push   0x0
c000bee1:	e8 c6 c0 01 00       	call   c0027fac <__divdf3>
c000bee6:	83 c4 10             	add    esp,0x10
c000bee9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bef6:	68 23 42 92 0c       	push   0xc924223
c000befb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf03:	e8 43 b7 01 00       	call   c002764b <__adddf3>
c000bf08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf0c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bf10:	83 c4 20             	add    esp,0x20
c000bf13:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf1b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bf23:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bf26:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bf29:	7d 50                	jge    c000bf7b <sinc_multichan_vari_process+0x30f>
c000bf2b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf2e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf31:	01 c8                	add    eax,ecx
c000bf33:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf36:	99                   	cdq    
c000bf37:	f7 f9                	idiv   ecx
c000bf39:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf3d:	7d 0c                	jge    c000bf4b <sinc_multichan_vari_process+0x2df>
c000bf3f:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bf42:	85 ed                	test   ebp,ebp
c000bf44:	79 6b                	jns    c000bfb1 <sinc_multichan_vari_process+0x345>
c000bf46:	e9 e6 00 00 00       	jmp    c000c031 <sinc_multichan_vari_process+0x3c5>
c000bf4b:	50                   	push   eax
c000bf4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bf50:	57                   	push   edi
c000bf51:	53                   	push   ebx
c000bf52:	e8 9b fb ff ff       	call   c000baf2 <prepare_data>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	89 c2                	mov    edx,eax
c000bf5c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bf5f:	85 c0                	test   eax,eax
c000bf61:	0f 85 bf 03 00 00    	jne    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf6d:	01 c8                	add    eax,ecx
c000bf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf72:	99                   	cdq    
c000bf73:	f7 f9                	idiv   ecx
c000bf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf79:	7c c4                	jl     c000bf3f <sinc_multichan_vari_process+0x2d3>
c000bf7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf83:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bf86:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bf89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf91:	89 06                	mov    DWORD PTR [esi],eax
c000bf93:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bf96:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bf99:	99                   	cdq    
c000bf9a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bf9d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bfa0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bfa3:	99                   	cdq    
c000bfa4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bfa7:	31 d2                	xor    edx,edx
c000bfa9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bfac:	e9 75 03 00 00       	jmp    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bfb1:	83 ec 0c             	sub    esp,0xc
c000bfb4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bfb7:	e8 6f c3 01 00       	call   c002832b <__floatsidf>
c000bfbc:	83 c4 10             	add    esp,0x10
c000bfbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfc3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd7:	e8 6f b6 01 00       	call   c002764b <__adddf3>
c000bfdc:	83 c4 10             	add    esp,0x10
c000bfdf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfe3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff7:	e8 4f b6 01 00       	call   c002764b <__adddf3>
c000bffc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bfff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c003:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c007:	e8 1f c3 01 00       	call   c002832b <__floatsidf>
c000c00c:	83 c4 10             	add    esp,0x10
c000c00f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c013:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c017:	52                   	push   edx
c000c018:	50                   	push   eax
c000c019:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c021:	e8 6f c5 01 00       	call   c0028595 <__gedf2>
c000c026:	83 c4 10             	add    esp,0x10
c000c029:	85 c0                	test   eax,eax
c000c02b:	0f 89 4a ff ff ff    	jns    c000bf7b <sinc_multichan_vari_process+0x30f>
c000c031:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c035:	0f 8e ed 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c03b:	83 ec 10             	sub    esp,0x10
c000c03e:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c041:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c044:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000c047:	ff 36                	push   DWORD PTR [esi]
c000c049:	e8 4e bc 01 00       	call   c0027c9c <__subdf3>
c000c04e:	83 c4 18             	add    esp,0x18
c000c051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c059:	52                   	push   edx
c000c05a:	50                   	push   eax
c000c05b:	e8 d0 c6 01 00       	call   c0028730 <fabs>
c000c060:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c064:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c068:	83 c4 10             	add    esp,0x10
c000c06b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c070:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c075:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07d:	e8 f7 c4 01 00       	call   c0028579 <__gtdf2>
c000c082:	83 c4 10             	add    esp,0x10
c000c085:	85 c0                	test   eax,eax
c000c087:	0f 8e 9b 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c08d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c08f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000c092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c09a:	52                   	push   edx
c000c09b:	50                   	push   eax
c000c09c:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c09f:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c0a2:	e8 f5 bb 01 00       	call   c0027c9c <__subdf3>
c000c0a7:	59                   	pop    ecx
c000c0a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0ac:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0b0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c0b3:	e8 73 c2 01 00       	call   c002832b <__floatsidf>
c000c0b8:	83 c4 10             	add    esp,0x10
c000c0bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0c3:	52                   	push   edx
c000c0c4:	50                   	push   eax
c000c0c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0cd:	e8 f6 bb 01 00       	call   c0027cc8 <__muldf3>
c000c0d2:	5d                   	pop    ebp
c000c0d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0db:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c0de:	e8 48 c2 01 00       	call   c002832b <__floatsidf>
c000c0e3:	83 c4 10             	add    esp,0x10
c000c0e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ee:	52                   	push   edx
c000c0ef:	50                   	push   eax
c000c0f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f8:	e8 af be 01 00       	call   c0027fac <__divdf3>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c104:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c10c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c118:	e8 2e b5 01 00       	call   c002764b <__adddf3>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c124:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c12e:	e8 f8 c1 01 00       	call   c002832b <__floatsidf>
c000c133:	83 c4 10             	add    esp,0x10
c000c136:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c13a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14e:	e8 44 c4 01 00       	call   c0028597 <__ltdf2>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	85 c0                	test   eax,eax
c000c158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c15c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c160:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c164:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c168:	78 10                	js     c000c17a <sinc_multichan_vari_process+0x50e>
c000c16a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c16e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c172:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c176:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c17a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c17e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c182:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c186:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c18a:	e8 39 bb 01 00       	call   c0027cc8 <__muldf3>
c000c18f:	59                   	pop    ecx
c000c190:	5d                   	pop    ebp
c000c191:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c195:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c199:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c19d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c1a1:	e8 25 f9 ff ff       	call   c000bacb <double_to_fp>
c000c1a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1aa:	89 c5                	mov    ebp,eax
c000c1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b8:	e8 0b bb 01 00       	call   c0027cc8 <__muldf3>
c000c1bd:	83 c4 18             	add    esp,0x18
c000c1c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c1c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c8:	52                   	push   edx
c000c1c9:	50                   	push   eax
c000c1ca:	e8 fc f8 ff ff       	call   c000bacb <double_to_fp>
c000c1cf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c1d2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c1d6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1d9:	8d 04 90             	lea    eax,[eax+edx*4]
c000c1dc:	50                   	push   eax
c000c1dd:	50                   	push   eax
c000c1de:	50                   	push   eax
c000c1df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e2:	e8 44 c1 01 00       	call   c002832b <__floatsidf>
c000c1e7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c1eb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000c1ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1ff:	e8 a8 bd 01 00       	call   c0027fac <__divdf3>
c000c204:	83 c4 1c             	add    esp,0x1c
c000c207:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c20b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c20f:	52                   	push   edx
c000c210:	89 ea                	mov    edx,ebp
c000c212:	50                   	push   eax
c000c213:	89 d8                	mov    eax,ebx
c000c215:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c218:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c21c:	e8 69 ed ff ff       	call   c000af8a <calc_output_multi>
c000c221:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c224:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c227:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c233:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c237:	e8 70 bd 01 00       	call   c0027fac <__divdf3>
c000c23c:	83 c4 10             	add    esp,0x10
c000c23f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c243:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c253:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c257:	e8 ef b3 01 00       	call   c002764b <__adddf3>
c000c25c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c260:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c264:	83 c4 28             	add    esp,0x28
c000c267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26f:	e8 dc c4 01 00       	call   c0028750 <lrint>
c000c274:	83 ec 0c             	sub    esp,0xc
c000c277:	50                   	push   eax
c000c278:	e8 ae c0 01 00       	call   c002832b <__floatsidf>
c000c27d:	83 c4 10             	add    esp,0x10
c000c280:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c284:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c288:	52                   	push   edx
c000c289:	50                   	push   eax
c000c28a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c28e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c292:	e8 05 ba 01 00       	call   c0027c9c <__subdf3>
c000c297:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c29b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29f:	83 c4 20             	add    esp,0x20
c000c2a2:	6a 00                	push   0x0
c000c2a4:	6a 00                	push   0x0
c000c2a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ae:	e8 e4 c2 01 00       	call   c0028597 <__ltdf2>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	85 c0                	test   eax,eax
c000c2b8:	79 20                	jns    c000c2da <sinc_multichan_vari_process+0x66e>
c000c2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ca:	e8 7c b3 01 00       	call   c002764b <__adddf3>
c000c2cf:	83 c4 10             	add    esp,0x10
c000c2d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c2dd:	83 ec 10             	sub    esp,0x10
c000c2e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c2e4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f7:	e8 a0 b9 01 00       	call   c0027c9c <__subdf3>
c000c2fc:	83 c4 18             	add    esp,0x18
c000c2ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c307:	52                   	push   edx
c000c308:	50                   	push   eax
c000c309:	e8 42 c4 01 00       	call   c0028750 <lrint>
c000c30e:	0f af e8             	imul   ebp,eax
c000c311:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c315:	83 c4 10             	add    esp,0x10
c000c318:	01 e8                	add    eax,ebp
c000c31a:	99                   	cdq    
c000c31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c321:	e9 fd fb ff ff       	jmp    c000bf23 <sinc_multichan_vari_process+0x2b7>
c000c326:	83 c4 4c             	add    esp,0x4c
c000c329:	89 d0                	mov    eax,edx
c000c32b:	5b                   	pop    ebx
c000c32c:	5e                   	pop    esi
c000c32d:	5f                   	pop    edi
c000c32e:	5d                   	pop    ebp
c000c32f:	c3                   	ret    

c000c330 <sinc_hex_vari_process>:
c000c330:	55                   	push   ebp
c000c331:	ba 05 00 00 00       	mov    edx,0x5
c000c336:	57                   	push   edi
c000c337:	56                   	push   esi
c000c338:	53                   	push   ebx
c000c339:	83 ec 4c             	sub    esp,0x4c
c000c33c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c340:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c344:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c347:	85 db                	test   ebx,ebx
c000c349:	0f 84 9c 06 00 00    	je     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c34f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c352:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c355:	0f af c7             	imul   eax,edi
c000c358:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c35b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c35e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c365:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c36c:	0f af c7             	imul   eax,edi
c000c36f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c372:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c375:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c378:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c37c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c380:	68 00 00 70 3f       	push   0x3f700000
c000c385:	6a 00                	push   0x0
c000c387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38f:	e8 03 c2 01 00       	call   c0028597 <__ltdf2>
c000c394:	83 c4 10             	add    esp,0x10
c000c397:	ba 16 00 00 00       	mov    edx,0x16
c000c39c:	85 c0                	test   eax,eax
c000c39e:	0f 88 47 06 00 00    	js     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3a4:	68 00 00 70 40       	push   0x40700000
c000c3a9:	6a 00                	push   0x0
c000c3ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b3:	e8 c1 c1 01 00       	call   c0028579 <__gtdf2>
c000c3b8:	83 c4 10             	add    esp,0x10
c000c3bb:	ba 16 00 00 00       	mov    edx,0x16
c000c3c0:	85 c0                	test   eax,eax
c000c3c2:	0f 8f 23 06 00 00    	jg     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c3ce:	e8 58 bf 01 00       	call   c002832b <__floatsidf>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3de:	68 00 00 00 40       	push   0x40000000
c000c3e3:	6a 00                	push   0x0
c000c3e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3ed:	e8 59 b2 01 00       	call   c002764b <__adddf3>
c000c3f2:	59                   	pop    ecx
c000c3f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3f7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c3fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3fe:	e8 28 bf 01 00       	call   c002832b <__floatsidf>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c40a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c40e:	52                   	push   edx
c000c40f:	50                   	push   eax
c000c410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c418:	e8 8f bb 01 00       	call   c0027fac <__divdf3>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c424:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c428:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c42b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c42e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c432:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c442:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c446:	e8 2e c1 01 00       	call   c0028579 <__gtdf2>
c000c44b:	83 c4 10             	add    esp,0x10
c000c44e:	85 c0                	test   eax,eax
c000c450:	7e 2d                	jle    c000c47f <sinc_hex_vari_process+0x14f>
c000c452:	68 00 00 f0 3f       	push   0x3ff00000
c000c457:	6a 00                	push   0x0
c000c459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c461:	e8 31 c1 01 00       	call   c0028597 <__ltdf2>
c000c466:	83 c4 10             	add    esp,0x10
c000c469:	85 c0                	test   eax,eax
c000c46b:	79 4d                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c471:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c475:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c479:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c47d:	eb 1b                	jmp    c000c49a <sinc_hex_vari_process+0x16a>
c000c47f:	68 00 00 f0 3f       	push   0x3ff00000
c000c484:	6a 00                	push   0x0
c000c486:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48e:	e8 04 c1 01 00       	call   c0028597 <__ltdf2>
c000c493:	83 c4 10             	add    esp,0x10
c000c496:	85 c0                	test   eax,eax
c000c498:	79 20                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c49a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4aa:	e8 fd ba 01 00       	call   c0027fac <__divdf3>
c000c4af:	83 c4 10             	add    esp,0x10
c000c4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4ba:	50                   	push   eax
c000c4bb:	50                   	push   eax
c000c4bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c4:	e8 87 c2 01 00       	call   c0028750 <lrint>
c000c4c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c4cc:	40                   	inc    eax
c000c4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d1:	0f af c7             	imul   eax,edi
c000c4d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c4d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4df:	58                   	pop    eax
c000c4e0:	5a                   	pop    edx
c000c4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e9:	e8 62 c2 01 00       	call   c0028750 <lrint>
c000c4ee:	83 ec 0c             	sub    esp,0xc
c000c4f1:	50                   	push   eax
c000c4f2:	e8 34 be 01 00       	call   c002832b <__floatsidf>
c000c4f7:	83 c4 10             	add    esp,0x10
c000c4fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c502:	52                   	push   edx
c000c503:	50                   	push   eax
c000c504:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c508:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c50c:	e8 8b b7 01 00       	call   c0027c9c <__subdf3>
c000c511:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c515:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c519:	83 c4 20             	add    esp,0x20
c000c51c:	6a 00                	push   0x0
c000c51e:	6a 00                	push   0x0
c000c520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c528:	e8 6a c0 01 00       	call   c0028597 <__ltdf2>
c000c52d:	83 c4 10             	add    esp,0x10
c000c530:	85 c0                	test   eax,eax
c000c532:	79 1f                	jns    c000c553 <sinc_hex_vari_process+0x223>
c000c534:	68 00 00 f0 3f       	push   0x3ff00000
c000c539:	6a 00                	push   0x0
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 03 b1 01 00       	call   c002764b <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c56c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c570:	e8 27 b7 01 00       	call   c0027c9c <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c57c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 c9 c1 01 00       	call   c0028750 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c58e:	01 f8                	add    eax,edi
c000c590:	99                   	cdq    
c000c591:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c594:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59f:	68 00 00 f0 3f       	push   0x3ff00000
c000c5a4:	6a 00                	push   0x0
c000c5a6:	e8 01 ba 01 00       	call   c0027fac <__divdf3>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c5bb:	68 23 42 92 0c       	push   0xc924223
c000c5c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c8:	e8 7e b0 01 00       	call   c002764b <__adddf3>
c000c5cd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c5d1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c5d5:	83 c4 20             	add    esp,0x20
c000c5d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c5e0:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c5e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c5eb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c5ee:	7d 50                	jge    c000c640 <sinc_hex_vari_process+0x310>
c000c5f0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c5f3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c5f6:	01 c8                	add    eax,ecx
c000c5f8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c5fb:	99                   	cdq    
c000c5fc:	f7 f9                	idiv   ecx
c000c5fe:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c602:	7d 0c                	jge    c000c610 <sinc_hex_vari_process+0x2e0>
c000c604:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c607:	85 ff                	test   edi,edi
c000c609:	79 6c                	jns    c000c677 <sinc_hex_vari_process+0x347>
c000c60b:	e9 e7 00 00 00       	jmp    c000c6f7 <sinc_hex_vari_process+0x3c7>
c000c610:	50                   	push   eax
c000c611:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c615:	56                   	push   esi
c000c616:	53                   	push   ebx
c000c617:	e8 d6 f4 ff ff       	call   c000baf2 <prepare_data>
c000c61c:	83 c4 10             	add    esp,0x10
c000c61f:	89 c2                	mov    edx,eax
c000c621:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c624:	85 c0                	test   eax,eax
c000c626:	0f 85 bf 03 00 00    	jne    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c62c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c62f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c632:	01 c8                	add    eax,ecx
c000c634:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c637:	99                   	cdq    
c000c638:	f7 f9                	idiv   ecx
c000c63a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c63e:	7c c4                	jl     c000c604 <sinc_hex_vari_process+0x2d4>
c000c640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c644:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c648:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c64b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c652:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c656:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c659:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c65c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c65f:	99                   	cdq    
c000c660:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c663:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c666:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c669:	99                   	cdq    
c000c66a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c66d:	31 d2                	xor    edx,edx
c000c66f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c672:	e9 74 03 00 00       	jmp    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c677:	83 ec 0c             	sub    esp,0xc
c000c67a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c67d:	e8 a9 bc 01 00       	call   c002832b <__floatsidf>
c000c682:	83 c4 10             	add    esp,0x10
c000c685:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c689:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c68d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c69d:	e8 a9 af 01 00       	call   c002764b <__adddf3>
c000c6a2:	83 c4 10             	add    esp,0x10
c000c6a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6bd:	e8 89 af 01 00       	call   c002764b <__adddf3>
c000c6c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c6c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6cd:	e8 59 bc 01 00       	call   c002832b <__floatsidf>
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	50                   	push   eax
c000c6df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e7:	e8 a9 be 01 00       	call   c0028595 <__gedf2>
c000c6ec:	83 c4 10             	add    esp,0x10
c000c6ef:	85 c0                	test   eax,eax
c000c6f1:	0f 89 49 ff ff ff    	jns    c000c640 <sinc_hex_vari_process+0x310>
c000c6f7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c6fb:	0f 8e ef 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c701:	83 ec 10             	sub    esp,0x10
c000c704:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c707:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c70a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c70d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c710:	e8 87 b5 01 00       	call   c0027c9c <__subdf3>
c000c715:	83 c4 18             	add    esp,0x18
c000c718:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c71c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c720:	52                   	push   edx
c000c721:	50                   	push   eax
c000c722:	e8 09 c0 01 00       	call   c0028730 <fabs>
c000c727:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c72b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c72f:	83 c4 10             	add    esp,0x10
c000c732:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c737:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c744:	e8 30 be 01 00       	call   c0028579 <__gtdf2>
c000c749:	83 c4 10             	add    esp,0x10
c000c74c:	85 c0                	test   eax,eax
c000c74e:	0f 8e 9c 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c754:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c757:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c75a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c75e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c762:	52                   	push   edx
c000c763:	50                   	push   eax
c000c764:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c767:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c76a:	e8 2d b5 01 00       	call   c0027c9c <__subdf3>
c000c76f:	59                   	pop    ecx
c000c770:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c774:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c778:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c77b:	e8 ab bb 01 00       	call   c002832b <__floatsidf>
c000c780:	83 c4 10             	add    esp,0x10
c000c783:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c787:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c78b:	52                   	push   edx
c000c78c:	50                   	push   eax
c000c78d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c791:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c795:	e8 2e b5 01 00       	call   c0027cc8 <__muldf3>
c000c79a:	5f                   	pop    edi
c000c79b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c79f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c7a3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c7a6:	e8 80 bb 01 00       	call   c002832b <__floatsidf>
c000c7ab:	83 c4 10             	add    esp,0x10
c000c7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b6:	52                   	push   edx
c000c7b7:	50                   	push   eax
c000c7b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7c0:	e8 e7 b7 01 00       	call   c0027fac <__divdf3>
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7e0:	e8 66 ae 01 00       	call   c002764b <__adddf3>
c000c7e5:	83 c4 10             	add    esp,0x10
c000c7e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c7f6:	e8 30 bb 01 00       	call   c002832b <__floatsidf>
c000c7fb:	83 c4 10             	add    esp,0x10
c000c7fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c802:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	e8 7c bd 01 00       	call   c0028597 <__ltdf2>
c000c81b:	83 c4 10             	add    esp,0x10
c000c81e:	85 c0                	test   eax,eax
c000c820:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c824:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c828:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c82c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c830:	78 10                	js     c000c842 <sinc_hex_vari_process+0x512>
c000c832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c836:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c83a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c83e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c842:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c846:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c84e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c852:	e8 71 b4 01 00       	call   c0027cc8 <__muldf3>
c000c857:	59                   	pop    ecx
c000c858:	5f                   	pop    edi
c000c859:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c85d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c861:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c869:	e8 5d f2 ff ff       	call   c000bacb <double_to_fp>
c000c86e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c872:	89 c7                	mov    edi,eax
c000c874:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c878:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c87c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c880:	e8 43 b4 01 00       	call   c0027cc8 <__muldf3>
c000c885:	83 c4 18             	add    esp,0x18
c000c888:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c88c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c890:	52                   	push   edx
c000c891:	50                   	push   eax
c000c892:	e8 34 f2 ff ff       	call   c000bacb <double_to_fp>
c000c897:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c89a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c89e:	83 c4 0c             	add    esp,0xc
c000c8a1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c8a4:	8d 04 90             	lea    eax,[eax+edx*4]
c000c8a7:	50                   	push   eax
c000c8a8:	50                   	push   eax
c000c8a9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8ac:	e8 7a ba 01 00       	call   c002832b <__floatsidf>
c000c8b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c8b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c8b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c9:	e8 de b6 01 00       	call   c0027fac <__divdf3>
c000c8ce:	83 c4 18             	add    esp,0x18
c000c8d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8d9:	52                   	push   edx
c000c8da:	89 fa                	mov    edx,edi
c000c8dc:	50                   	push   eax
c000c8dd:	89 d8                	mov    eax,ebx
c000c8df:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c8e3:	e8 50 de ff ff       	call   c000a738 <calc_output_hex>
c000c8e8:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c8ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8fc:	e8 ab b6 01 00       	call   c0027fac <__divdf3>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c908:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c914:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c918:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c91c:	e8 2a ad 01 00       	call   c002764b <__adddf3>
c000c921:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c925:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c929:	83 c4 18             	add    esp,0x18
c000c92c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c930:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c934:	e8 17 be 01 00       	call   c0028750 <lrint>
c000c939:	83 ec 0c             	sub    esp,0xc
c000c93c:	50                   	push   eax
c000c93d:	e8 e9 b9 01 00       	call   c002832b <__floatsidf>
c000c942:	83 c4 10             	add    esp,0x10
c000c945:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c949:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c94d:	52                   	push   edx
c000c94e:	50                   	push   eax
c000c94f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c957:	e8 40 b3 01 00       	call   c0027c9c <__subdf3>
c000c95c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c960:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c964:	83 c4 20             	add    esp,0x20
c000c967:	6a 00                	push   0x0
c000c969:	6a 00                	push   0x0
c000c96b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c96f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c973:	e8 1f bc 01 00       	call   c0028597 <__ltdf2>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	85 c0                	test   eax,eax
c000c97d:	79 20                	jns    c000c99f <sinc_hex_vari_process+0x66f>
c000c97f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c987:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98f:	e8 b7 ac 01 00       	call   c002764b <__adddf3>
c000c994:	83 c4 10             	add    esp,0x10
c000c997:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c99b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c99f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9a2:	83 ec 10             	sub    esp,0x10
c000c9a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9a9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9bc:	e8 db b2 01 00       	call   c0027c9c <__subdf3>
c000c9c1:	83 c4 18             	add    esp,0x18
c000c9c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9cc:	52                   	push   edx
c000c9cd:	50                   	push   eax
c000c9ce:	e8 7d bd 01 00       	call   c0028750 <lrint>
c000c9d3:	0f af f8             	imul   edi,eax
c000c9d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9da:	83 c4 10             	add    esp,0x10
c000c9dd:	01 f8                	add    eax,edi
c000c9df:	99                   	cdq    
c000c9e0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c9e3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c9e6:	e9 fd fb ff ff       	jmp    c000c5e8 <sinc_hex_vari_process+0x2b8>
c000c9eb:	83 c4 4c             	add    esp,0x4c
c000c9ee:	89 d0                	mov    eax,edx
c000c9f0:	5b                   	pop    ebx
c000c9f1:	5e                   	pop    esi
c000c9f2:	5f                   	pop    edi
c000c9f3:	5d                   	pop    ebp
c000c9f4:	c3                   	ret    

c000c9f5 <sinc_quad_vari_process>:
c000c9f5:	55                   	push   ebp
c000c9f6:	ba 05 00 00 00       	mov    edx,0x5
c000c9fb:	57                   	push   edi
c000c9fc:	56                   	push   esi
c000c9fd:	53                   	push   ebx
c000c9fe:	83 ec 4c             	sub    esp,0x4c
c000ca01:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ca05:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ca09:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ca0c:	85 db                	test   ebx,ebx
c000ca0e:	0f 84 9c 06 00 00    	je     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca14:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ca17:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca1a:	0f af c7             	imul   eax,edi
c000ca1d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ca20:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ca23:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ca2a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ca31:	0f af c7             	imul   eax,edi
c000ca34:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca37:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca3d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca45:	68 00 00 70 3f       	push   0x3f700000
c000ca4a:	6a 00                	push   0x0
c000ca4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca54:	e8 3e bb 01 00       	call   c0028597 <__ltdf2>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	ba 16 00 00 00       	mov    edx,0x16
c000ca61:	85 c0                	test   eax,eax
c000ca63:	0f 88 47 06 00 00    	js     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca69:	68 00 00 70 40       	push   0x40700000
c000ca6e:	6a 00                	push   0x0
c000ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca78:	e8 fc ba 01 00       	call   c0028579 <__gtdf2>
c000ca7d:	83 c4 10             	add    esp,0x10
c000ca80:	ba 16 00 00 00       	mov    edx,0x16
c000ca85:	85 c0                	test   eax,eax
c000ca87:	0f 8f 23 06 00 00    	jg     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca8d:	83 ec 0c             	sub    esp,0xc
c000ca90:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ca93:	e8 93 b8 01 00       	call   c002832b <__floatsidf>
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000caa3:	68 00 00 00 40       	push   0x40000000
c000caa8:	6a 00                	push   0x0
c000caaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cab2:	e8 94 ab 01 00       	call   c002764b <__adddf3>
c000cab7:	59                   	pop    ecx
c000cab8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cabc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cac0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cac3:	e8 63 b8 01 00       	call   c002832b <__floatsidf>
c000cac8:	83 c4 10             	add    esp,0x10
c000cacb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cacf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cad3:	52                   	push   edx
c000cad4:	50                   	push   eax
c000cad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cadd:	e8 ca b4 01 00       	call   c0027fac <__divdf3>
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000caed:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000caf0:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000caf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000caf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cafb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0b:	e8 69 ba 01 00       	call   c0028579 <__gtdf2>
c000cb10:	83 c4 10             	add    esp,0x10
c000cb13:	85 c0                	test   eax,eax
c000cb15:	7e 2d                	jle    c000cb44 <sinc_quad_vari_process+0x14f>
c000cb17:	68 00 00 f0 3f       	push   0x3ff00000
c000cb1c:	6a 00                	push   0x0
c000cb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb26:	e8 6c ba 01 00       	call   c0028597 <__ltdf2>
c000cb2b:	83 c4 10             	add    esp,0x10
c000cb2e:	85 c0                	test   eax,eax
c000cb30:	79 4d                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb42:	eb 1b                	jmp    c000cb5f <sinc_quad_vari_process+0x16a>
c000cb44:	68 00 00 f0 3f       	push   0x3ff00000
c000cb49:	6a 00                	push   0x0
c000cb4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb53:	e8 3f ba 01 00       	call   c0028597 <__ltdf2>
c000cb58:	83 c4 10             	add    esp,0x10
c000cb5b:	85 c0                	test   eax,eax
c000cb5d:	79 20                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6f:	e8 38 b4 01 00       	call   c0027fac <__divdf3>
c000cb74:	83 c4 10             	add    esp,0x10
c000cb77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb7f:	50                   	push   eax
c000cb80:	50                   	push   eax
c000cb81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb89:	e8 c2 bb 01 00       	call   c0028750 <lrint>
c000cb8e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cb91:	40                   	inc    eax
c000cb92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb96:	0f af c7             	imul   eax,edi
c000cb99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000cb9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba4:	58                   	pop    eax
c000cba5:	5a                   	pop    edx
c000cba6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbae:	e8 9d bb 01 00       	call   c0028750 <lrint>
c000cbb3:	83 ec 0c             	sub    esp,0xc
c000cbb6:	50                   	push   eax
c000cbb7:	e8 6f b7 01 00       	call   c002832b <__floatsidf>
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc7:	52                   	push   edx
c000cbc8:	50                   	push   eax
c000cbc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbd1:	e8 c6 b0 01 00       	call   c0027c9c <__subdf3>
c000cbd6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbda:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbde:	83 c4 20             	add    esp,0x20
c000cbe1:	6a 00                	push   0x0
c000cbe3:	6a 00                	push   0x0
c000cbe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbed:	e8 a5 b9 01 00       	call   c0028597 <__ltdf2>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	85 c0                	test   eax,eax
c000cbf7:	79 1f                	jns    c000cc18 <sinc_quad_vari_process+0x223>
c000cbf9:	68 00 00 f0 3f       	push   0x3ff00000
c000cbfe:	6a 00                	push   0x0
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 3e aa 01 00       	call   c002764b <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc35:	e8 62 b0 01 00       	call   c0027c9c <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 04 bb 01 00       	call   c0028750 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc53:	01 f8                	add    eax,edi
c000cc55:	99                   	cdq    
c000cc56:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc59:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc64:	68 00 00 f0 3f       	push   0x3ff00000
c000cc69:	6a 00                	push   0x0
c000cc6b:	e8 3c b3 01 00       	call   c0027fac <__divdf3>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cc80:	68 23 42 92 0c       	push   0xc924223
c000cc85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc8d:	e8 b9 a9 01 00       	call   c002764b <__adddf3>
c000cc92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cc96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cc9a:	83 c4 20             	add    esp,0x20
c000cc9d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cca5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ccad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ccb0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccb3:	7d 50                	jge    c000cd05 <sinc_quad_vari_process+0x310>
c000ccb5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccb8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccbb:	01 c8                	add    eax,ecx
c000ccbd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccc0:	99                   	cdq    
c000ccc1:	f7 f9                	idiv   ecx
c000ccc3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ccc7:	7d 0c                	jge    c000ccd5 <sinc_quad_vari_process+0x2e0>
c000ccc9:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cccc:	85 ff                	test   edi,edi
c000ccce:	79 6c                	jns    c000cd3c <sinc_quad_vari_process+0x347>
c000ccd0:	e9 e7 00 00 00       	jmp    c000cdbc <sinc_quad_vari_process+0x3c7>
c000ccd5:	50                   	push   eax
c000ccd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ccda:	56                   	push   esi
c000ccdb:	53                   	push   ebx
c000ccdc:	e8 11 ee ff ff       	call   c000baf2 <prepare_data>
c000cce1:	83 c4 10             	add    esp,0x10
c000cce4:	89 c2                	mov    edx,eax
c000cce6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cce9:	85 c0                	test   eax,eax
c000cceb:	0f 85 bf 03 00 00    	jne    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ccf1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccf4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccf7:	01 c8                	add    eax,ecx
c000ccf9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccfc:	99                   	cdq    
c000ccfd:	f7 f9                	idiv   ecx
c000ccff:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cd03:	7c c4                	jl     c000ccc9 <sinc_quad_vari_process+0x2d4>
c000cd05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd0d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd10:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd24:	99                   	cdq    
c000cd25:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd28:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd2b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd2e:	99                   	cdq    
c000cd2f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd32:	31 d2                	xor    edx,edx
c000cd34:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd37:	e9 74 03 00 00       	jmp    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd42:	e8 e4 b5 01 00       	call   c002832b <__floatsidf>
c000cd47:	83 c4 10             	add    esp,0x10
c000cd4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd4e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd62:	e8 e4 a8 01 00       	call   c002764b <__adddf3>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd82:	e8 c4 a8 01 00       	call   c002764b <__adddf3>
c000cd87:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd8e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd92:	e8 94 b5 01 00       	call   c002832b <__floatsidf>
c000cd97:	83 c4 10             	add    esp,0x10
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	50                   	push   eax
c000cda4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cda8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdac:	e8 e4 b7 01 00       	call   c0028595 <__gedf2>
c000cdb1:	83 c4 10             	add    esp,0x10
c000cdb4:	85 c0                	test   eax,eax
c000cdb6:	0f 89 49 ff ff ff    	jns    c000cd05 <sinc_quad_vari_process+0x310>
c000cdbc:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdc0:	0f 8e ef 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000cdc6:	83 ec 10             	sub    esp,0x10
c000cdc9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cdcc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cdcf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cdd2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cdd5:	e8 c2 ae 01 00       	call   c0027c9c <__subdf3>
c000cdda:	83 c4 18             	add    esp,0x18
c000cddd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cde1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cde5:	52                   	push   edx
c000cde6:	50                   	push   eax
c000cde7:	e8 44 b9 01 00       	call   c0028730 <fabs>
c000cdec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cdfc:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce09:	e8 6b b7 01 00       	call   c0028579 <__gtdf2>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	85 c0                	test   eax,eax
c000ce13:	0f 8e 9c 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000ce19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce1c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce23:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ce27:	52                   	push   edx
c000ce28:	50                   	push   eax
c000ce29:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce2c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce2f:	e8 68 ae 01 00       	call   c0027c9c <__subdf3>
c000ce34:	59                   	pop    ecx
c000ce35:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce39:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce3d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce40:	e8 e6 b4 01 00       	call   c002832b <__floatsidf>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce50:	52                   	push   edx
c000ce51:	50                   	push   eax
c000ce52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce5a:	e8 69 ae 01 00       	call   c0027cc8 <__muldf3>
c000ce5f:	5f                   	pop    edi
c000ce60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce64:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce68:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ce6b:	e8 bb b4 01 00       	call   c002832b <__floatsidf>
c000ce70:	83 c4 10             	add    esp,0x10
c000ce73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce7b:	52                   	push   edx
c000ce7c:	50                   	push   eax
c000ce7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce85:	e8 22 b1 01 00       	call   c0027fac <__divdf3>
c000ce8a:	83 c4 10             	add    esp,0x10
c000ce8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce91:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea5:	e8 a1 a7 01 00       	call   c002764b <__adddf3>
c000ceaa:	83 c4 10             	add    esp,0x10
c000cead:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ceb1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceb5:	83 ec 0c             	sub    esp,0xc
c000ceb8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cebb:	e8 6b b4 01 00       	call   c002832b <__floatsidf>
c000cec0:	83 c4 10             	add    esp,0x10
c000cec3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cec7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	e8 b7 b6 01 00       	call   c0028597 <__ltdf2>
c000cee0:	83 c4 10             	add    esp,0x10
c000cee3:	85 c0                	test   eax,eax
c000cee5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cee9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ceed:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cef1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cef5:	78 10                	js     c000cf07 <sinc_quad_vari_process+0x512>
c000cef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cefb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ceff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf17:	e8 ac ad 01 00       	call   c0027cc8 <__muldf3>
c000cf1c:	59                   	pop    ecx
c000cf1d:	5f                   	pop    edi
c000cf1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2e:	e8 98 eb ff ff       	call   c000bacb <double_to_fp>
c000cf33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf37:	89 c7                	mov    edi,eax
c000cf39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf45:	e8 7e ad 01 00       	call   c0027cc8 <__muldf3>
c000cf4a:	83 c4 18             	add    esp,0x18
c000cf4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf55:	52                   	push   edx
c000cf56:	50                   	push   eax
c000cf57:	e8 6f eb ff ff       	call   c000bacb <double_to_fp>
c000cf5c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf5f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cf63:	83 c4 0c             	add    esp,0xc
c000cf66:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cf69:	8d 04 90             	lea    eax,[eax+edx*4]
c000cf6c:	50                   	push   eax
c000cf6d:	50                   	push   eax
c000cf6e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf71:	e8 b5 b3 01 00       	call   c002832b <__floatsidf>
c000cf76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cf7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cf7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8e:	e8 19 b0 01 00       	call   c0027fac <__divdf3>
c000cf93:	83 c4 18             	add    esp,0x18
c000cf96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf9e:	52                   	push   edx
c000cf9f:	89 fa                	mov    edx,edi
c000cfa1:	50                   	push   eax
c000cfa2:	89 d8                	mov    eax,ebx
c000cfa4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfa8:	e8 a5 d1 ff ff       	call   c000a152 <calc_output_quad>
c000cfad:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cfb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfc1:	e8 e6 af 01 00       	call   c0027fac <__divdf3>
c000cfc6:	83 c4 10             	add    esp,0x10
c000cfc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe1:	e8 65 a6 01 00       	call   c002764b <__adddf3>
c000cfe6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cfea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cfee:	83 c4 18             	add    esp,0x18
c000cff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff9:	e8 52 b7 01 00       	call   c0028750 <lrint>
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	50                   	push   eax
c000d002:	e8 24 b3 01 00       	call   c002832b <__floatsidf>
c000d007:	83 c4 10             	add    esp,0x10
c000d00a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d012:	52                   	push   edx
c000d013:	50                   	push   eax
c000d014:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d018:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d01c:	e8 7b ac 01 00       	call   c0027c9c <__subdf3>
c000d021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d029:	83 c4 20             	add    esp,0x20
c000d02c:	6a 00                	push   0x0
c000d02e:	6a 00                	push   0x0
c000d030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d034:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d038:	e8 5a b5 01 00       	call   c0028597 <__ltdf2>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	85 c0                	test   eax,eax
c000d042:	79 20                	jns    c000d064 <sinc_quad_vari_process+0x66f>
c000d044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d04c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d054:	e8 f2 a5 01 00       	call   c002764b <__adddf3>
c000d059:	83 c4 10             	add    esp,0x10
c000d05c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d060:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d064:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d067:	83 ec 10             	sub    esp,0x10
c000d06a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d06e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d079:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d07d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d081:	e8 16 ac 01 00       	call   c0027c9c <__subdf3>
c000d086:	83 c4 18             	add    esp,0x18
c000d089:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d091:	52                   	push   edx
c000d092:	50                   	push   eax
c000d093:	e8 b8 b6 01 00       	call   c0028750 <lrint>
c000d098:	0f af f8             	imul   edi,eax
c000d09b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d09f:	83 c4 10             	add    esp,0x10
c000d0a2:	01 f8                	add    eax,edi
c000d0a4:	99                   	cdq    
c000d0a5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0a8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0ab:	e9 fd fb ff ff       	jmp    c000ccad <sinc_quad_vari_process+0x2b8>
c000d0b0:	83 c4 4c             	add    esp,0x4c
c000d0b3:	89 d0                	mov    eax,edx
c000d0b5:	5b                   	pop    ebx
c000d0b6:	5e                   	pop    esi
c000d0b7:	5f                   	pop    edi
c000d0b8:	5d                   	pop    ebp
c000d0b9:	c3                   	ret    

c000d0ba <sinc_stereo_vari_process>:
c000d0ba:	55                   	push   ebp
c000d0bb:	ba 05 00 00 00       	mov    edx,0x5
c000d0c0:	57                   	push   edi
c000d0c1:	56                   	push   esi
c000d0c2:	53                   	push   ebx
c000d0c3:	83 ec 4c             	sub    esp,0x4c
c000d0c6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0ca:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0ce:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0d1:	85 db                	test   ebx,ebx
c000d0d3:	0f 84 9c 06 00 00    	je     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d0d9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d0dc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0df:	0f af c7             	imul   eax,edi
c000d0e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d0e5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d0e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0ef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0f6:	0f af c7             	imul   eax,edi
c000d0f9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0fc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d102:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d106:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d10a:	68 00 00 70 3f       	push   0x3f700000
c000d10f:	6a 00                	push   0x0
c000d111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d119:	e8 79 b4 01 00       	call   c0028597 <__ltdf2>
c000d11e:	83 c4 10             	add    esp,0x10
c000d121:	ba 16 00 00 00       	mov    edx,0x16
c000d126:	85 c0                	test   eax,eax
c000d128:	0f 88 47 06 00 00    	js     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d12e:	68 00 00 70 40       	push   0x40700000
c000d133:	6a 00                	push   0x0
c000d135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13d:	e8 37 b4 01 00       	call   c0028579 <__gtdf2>
c000d142:	83 c4 10             	add    esp,0x10
c000d145:	ba 16 00 00 00       	mov    edx,0x16
c000d14a:	85 c0                	test   eax,eax
c000d14c:	0f 8f 23 06 00 00    	jg     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d152:	83 ec 0c             	sub    esp,0xc
c000d155:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d158:	e8 ce b1 01 00       	call   c002832b <__floatsidf>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d164:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d168:	68 00 00 00 40       	push   0x40000000
c000d16d:	6a 00                	push   0x0
c000d16f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d173:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d177:	e8 cf a4 01 00       	call   c002764b <__adddf3>
c000d17c:	59                   	pop    ecx
c000d17d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d181:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d185:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d188:	e8 9e b1 01 00       	call   c002832b <__floatsidf>
c000d18d:	83 c4 10             	add    esp,0x10
c000d190:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d194:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d198:	52                   	push   edx
c000d199:	50                   	push   eax
c000d19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d19e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1a2:	e8 05 ae 01 00       	call   c0027fac <__divdf3>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1b2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d1b5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d1b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1d0:	e8 a4 b3 01 00       	call   c0028579 <__gtdf2>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	85 c0                	test   eax,eax
c000d1da:	7e 2d                	jle    c000d209 <sinc_stereo_vari_process+0x14f>
c000d1dc:	68 00 00 f0 3f       	push   0x3ff00000
c000d1e1:	6a 00                	push   0x0
c000d1e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1eb:	e8 a7 b3 01 00       	call   c0028597 <__ltdf2>
c000d1f0:	83 c4 10             	add    esp,0x10
c000d1f3:	85 c0                	test   eax,eax
c000d1f5:	79 4d                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d203:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d207:	eb 1b                	jmp    c000d224 <sinc_stereo_vari_process+0x16a>
c000d209:	68 00 00 f0 3f       	push   0x3ff00000
c000d20e:	6a 00                	push   0x0
c000d210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d218:	e8 7a b3 01 00       	call   c0028597 <__ltdf2>
c000d21d:	83 c4 10             	add    esp,0x10
c000d220:	85 c0                	test   eax,eax
c000d222:	79 20                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d224:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d228:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d230:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d234:	e8 73 ad 01 00       	call   c0027fac <__divdf3>
c000d239:	83 c4 10             	add    esp,0x10
c000d23c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d240:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d244:	50                   	push   eax
c000d245:	50                   	push   eax
c000d246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24e:	e8 fd b4 01 00       	call   c0028750 <lrint>
c000d253:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d256:	40                   	inc    eax
c000d257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d25b:	0f af c7             	imul   eax,edi
c000d25e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d269:	58                   	pop    eax
c000d26a:	5a                   	pop    edx
c000d26b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d273:	e8 d8 b4 01 00       	call   c0028750 <lrint>
c000d278:	83 ec 0c             	sub    esp,0xc
c000d27b:	50                   	push   eax
c000d27c:	e8 aa b0 01 00       	call   c002832b <__floatsidf>
c000d281:	83 c4 10             	add    esp,0x10
c000d284:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d288:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28c:	52                   	push   edx
c000d28d:	50                   	push   eax
c000d28e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d292:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d296:	e8 01 aa 01 00       	call   c0027c9c <__subdf3>
c000d29b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a3:	83 c4 20             	add    esp,0x20
c000d2a6:	6a 00                	push   0x0
c000d2a8:	6a 00                	push   0x0
c000d2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b2:	e8 e0 b2 01 00       	call   c0028597 <__ltdf2>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	85 c0                	test   eax,eax
c000d2bc:	79 1f                	jns    c000d2dd <sinc_stereo_vari_process+0x223>
c000d2be:	68 00 00 f0 3f       	push   0x3ff00000
c000d2c3:	6a 00                	push   0x0
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 79 a3 01 00       	call   c002764b <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2fa:	e8 9d a9 01 00       	call   c0027c9c <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d306:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 3f b4 01 00       	call   c0028750 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d318:	01 f8                	add    eax,edi
c000d31a:	99                   	cdq    
c000d31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d321:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d329:	68 00 00 f0 3f       	push   0x3ff00000
c000d32e:	6a 00                	push   0x0
c000d330:	e8 77 ac 01 00       	call   c0027fac <__divdf3>
c000d335:	83 c4 10             	add    esp,0x10
c000d338:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d33c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d340:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d345:	68 23 42 92 0c       	push   0xc924223
c000d34a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d34e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d352:	e8 f4 a2 01 00       	call   c002764b <__adddf3>
c000d357:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d35b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d35f:	83 c4 20             	add    esp,0x20
c000d362:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d36a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d372:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d375:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d378:	7d 50                	jge    c000d3ca <sinc_stereo_vari_process+0x310>
c000d37a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d37d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d380:	01 c8                	add    eax,ecx
c000d382:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d385:	99                   	cdq    
c000d386:	f7 f9                	idiv   ecx
c000d388:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d38c:	7d 0c                	jge    c000d39a <sinc_stereo_vari_process+0x2e0>
c000d38e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d391:	85 ff                	test   edi,edi
c000d393:	79 6c                	jns    c000d401 <sinc_stereo_vari_process+0x347>
c000d395:	e9 e7 00 00 00       	jmp    c000d481 <sinc_stereo_vari_process+0x3c7>
c000d39a:	50                   	push   eax
c000d39b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d39f:	56                   	push   esi
c000d3a0:	53                   	push   ebx
c000d3a1:	e8 4c e7 ff ff       	call   c000baf2 <prepare_data>
c000d3a6:	83 c4 10             	add    esp,0x10
c000d3a9:	89 c2                	mov    edx,eax
c000d3ab:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d3ae:	85 c0                	test   eax,eax
c000d3b0:	0f 85 bf 03 00 00    	jne    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d3b6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d3b9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d3bc:	01 c8                	add    eax,ecx
c000d3be:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d3c1:	99                   	cdq    
c000d3c2:	f7 f9                	idiv   ecx
c000d3c4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d3c8:	7c c4                	jl     c000d38e <sinc_stereo_vari_process+0x2d4>
c000d3ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3d2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d3d5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d3e0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d3e3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d3e6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d3e9:	99                   	cdq    
c000d3ea:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3ed:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d3f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d3f3:	99                   	cdq    
c000d3f4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3f7:	31 d2                	xor    edx,edx
c000d3f9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d3fc:	e9 74 03 00 00       	jmp    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d401:	83 ec 0c             	sub    esp,0xc
c000d404:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d407:	e8 1f af 01 00       	call   c002832b <__floatsidf>
c000d40c:	83 c4 10             	add    esp,0x10
c000d40f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d413:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d417:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d423:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d427:	e8 1f a2 01 00       	call   c002764b <__adddf3>
c000d42c:	83 c4 10             	add    esp,0x10
c000d42f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d433:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d443:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d447:	e8 ff a1 01 00       	call   c002764b <__adddf3>
c000d44c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d44f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d453:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d457:	e8 cf ae 01 00       	call   c002832b <__floatsidf>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	50                   	push   eax
c000d469:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d46d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d471:	e8 1f b1 01 00       	call   c0028595 <__gedf2>
c000d476:	83 c4 10             	add    esp,0x10
c000d479:	85 c0                	test   eax,eax
c000d47b:	0f 89 49 ff ff ff    	jns    c000d3ca <sinc_stereo_vari_process+0x310>
c000d481:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d485:	0f 8e ef 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d48b:	83 ec 10             	sub    esp,0x10
c000d48e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d491:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d494:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d497:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d49a:	e8 fd a7 01 00       	call   c0027c9c <__subdf3>
c000d49f:	83 c4 18             	add    esp,0x18
c000d4a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4aa:	52                   	push   edx
c000d4ab:	50                   	push   eax
c000d4ac:	e8 7f b2 01 00       	call   c0028730 <fabs>
c000d4b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4b9:	83 c4 10             	add    esp,0x10
c000d4bc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d4c1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ce:	e8 a6 b0 01 00       	call   c0028579 <__gtdf2>
c000d4d3:	83 c4 10             	add    esp,0x10
c000d4d6:	85 c0                	test   eax,eax
c000d4d8:	0f 8e 9c 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d4de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d4e1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d4e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d4ec:	52                   	push   edx
c000d4ed:	50                   	push   eax
c000d4ee:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d4f1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d4f4:	e8 a3 a7 01 00       	call   c0027c9c <__subdf3>
c000d4f9:	59                   	pop    ecx
c000d4fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d4fe:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d502:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d505:	e8 21 ae 01 00       	call   c002832b <__floatsidf>
c000d50a:	83 c4 10             	add    esp,0x10
c000d50d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d511:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d515:	52                   	push   edx
c000d516:	50                   	push   eax
c000d517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51f:	e8 a4 a7 01 00       	call   c0027cc8 <__muldf3>
c000d524:	5f                   	pop    edi
c000d525:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d529:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d52d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d530:	e8 f6 ad 01 00       	call   c002832b <__floatsidf>
c000d535:	83 c4 10             	add    esp,0x10
c000d538:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d540:	52                   	push   edx
c000d541:	50                   	push   eax
c000d542:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d546:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d54a:	e8 5d aa 01 00       	call   c0027fac <__divdf3>
c000d54f:	83 c4 10             	add    esp,0x10
c000d552:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d556:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d55e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d562:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d566:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d56a:	e8 dc a0 01 00       	call   c002764b <__adddf3>
c000d56f:	83 c4 10             	add    esp,0x10
c000d572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d57a:	83 ec 0c             	sub    esp,0xc
c000d57d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d580:	e8 a6 ad 01 00       	call   c002832b <__floatsidf>
c000d585:	83 c4 10             	add    esp,0x10
c000d588:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d58c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a0:	e8 f2 af 01 00       	call   c0028597 <__ltdf2>
c000d5a5:	83 c4 10             	add    esp,0x10
c000d5a8:	85 c0                	test   eax,eax
c000d5aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d5b2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d5b6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d5ba:	78 10                	js     c000d5cc <sinc_stereo_vari_process+0x512>
c000d5bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d5c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5dc:	e8 e7 a6 01 00       	call   c0027cc8 <__muldf3>
c000d5e1:	59                   	pop    ecx
c000d5e2:	5f                   	pop    edi
c000d5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5f3:	e8 d3 e4 ff ff       	call   c000bacb <double_to_fp>
c000d5f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5fc:	89 c7                	mov    edi,eax
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d606:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d60a:	e8 b9 a6 01 00       	call   c0027cc8 <__muldf3>
c000d60f:	83 c4 18             	add    esp,0x18
c000d612:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d616:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d61a:	52                   	push   edx
c000d61b:	50                   	push   eax
c000d61c:	e8 aa e4 ff ff       	call   c000bacb <double_to_fp>
c000d621:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d624:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d628:	83 c4 0c             	add    esp,0xc
c000d62b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d62e:	8d 04 90             	lea    eax,[eax+edx*4]
c000d631:	50                   	push   eax
c000d632:	50                   	push   eax
c000d633:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d636:	e8 f0 ac 01 00       	call   c002832b <__floatsidf>
c000d63b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d63f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d643:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d647:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d653:	e8 54 a9 01 00       	call   c0027fac <__divdf3>
c000d658:	83 c4 18             	add    esp,0x18
c000d65b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d65f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d663:	52                   	push   edx
c000d664:	89 fa                	mov    edx,edi
c000d666:	50                   	push   eax
c000d667:	89 d8                	mov    eax,ebx
c000d669:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d66d:	e8 02 c7 ff ff       	call   c0009d74 <calc_output_stereo>
c000d672:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d676:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d682:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d686:	e8 21 a9 01 00       	call   c0027fac <__divdf3>
c000d68b:	83 c4 10             	add    esp,0x10
c000d68e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d692:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a6:	e8 a0 9f 01 00       	call   c002764b <__adddf3>
c000d6ab:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d6af:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6b3:	83 c4 18             	add    esp,0x18
c000d6b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6be:	e8 8d b0 01 00       	call   c0028750 <lrint>
c000d6c3:	83 ec 0c             	sub    esp,0xc
c000d6c6:	50                   	push   eax
c000d6c7:	e8 5f ac 01 00       	call   c002832b <__floatsidf>
c000d6cc:	83 c4 10             	add    esp,0x10
c000d6cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d7:	52                   	push   edx
c000d6d8:	50                   	push   eax
c000d6d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6e1:	e8 b6 a5 01 00       	call   c0027c9c <__subdf3>
c000d6e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ee:	83 c4 20             	add    esp,0x20
c000d6f1:	6a 00                	push   0x0
c000d6f3:	6a 00                	push   0x0
c000d6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6fd:	e8 95 ae 01 00       	call   c0028597 <__ltdf2>
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	85 c0                	test   eax,eax
c000d707:	79 20                	jns    c000d729 <sinc_stereo_vari_process+0x66f>
c000d709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d715:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d719:	e8 2d 9f 01 00       	call   c002764b <__adddf3>
c000d71e:	83 c4 10             	add    esp,0x10
c000d721:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d725:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d729:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d72c:	83 ec 10             	sub    esp,0x10
c000d72f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d733:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d742:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d746:	e8 51 a5 01 00       	call   c0027c9c <__subdf3>
c000d74b:	83 c4 18             	add    esp,0x18
c000d74e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d752:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d756:	52                   	push   edx
c000d757:	50                   	push   eax
c000d758:	e8 f3 af 01 00       	call   c0028750 <lrint>
c000d75d:	0f af f8             	imul   edi,eax
c000d760:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d764:	83 c4 10             	add    esp,0x10
c000d767:	01 f8                	add    eax,edi
c000d769:	99                   	cdq    
c000d76a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d76d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d770:	e9 fd fb ff ff       	jmp    c000d372 <sinc_stereo_vari_process+0x2b8>
c000d775:	83 c4 4c             	add    esp,0x4c
c000d778:	89 d0                	mov    eax,edx
c000d77a:	5b                   	pop    ebx
c000d77b:	5e                   	pop    esi
c000d77c:	5f                   	pop    edi
c000d77d:	5d                   	pop    ebp
c000d77e:	c3                   	ret    

c000d77f <sinc_mono_vari_process>:
c000d77f:	55                   	push   ebp
c000d780:	ba 05 00 00 00       	mov    edx,0x5
c000d785:	57                   	push   edi
c000d786:	56                   	push   esi
c000d787:	53                   	push   ebx
c000d788:	83 ec 4c             	sub    esp,0x4c
c000d78b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d78f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d793:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d796:	85 db                	test   ebx,ebx
c000d798:	0f 84 c1 06 00 00    	je     c000de5f <sinc_mono_vari_process+0x6e0>
c000d79e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d7a1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7a4:	0f af c7             	imul   eax,edi
c000d7a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d7aa:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d7ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d7b4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d7bb:	0f af c7             	imul   eax,edi
c000d7be:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d7c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d7c5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7d2:	68 00 00 70 3f       	push   0x3f700000
c000d7d7:	6a 00                	push   0x0
c000d7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e1:	e8 b1 ad 01 00       	call   c0028597 <__ltdf2>
c000d7e6:	83 c4 10             	add    esp,0x10
c000d7e9:	ba 16 00 00 00       	mov    edx,0x16
c000d7ee:	85 c0                	test   eax,eax
c000d7f0:	0f 88 69 06 00 00    	js     c000de5f <sinc_mono_vari_process+0x6e0>
c000d7f6:	68 00 00 70 40       	push   0x40700000
c000d7fb:	6a 00                	push   0x0
c000d7fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d801:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d805:	e8 6f ad 01 00       	call   c0028579 <__gtdf2>
c000d80a:	83 c4 10             	add    esp,0x10
c000d80d:	ba 16 00 00 00       	mov    edx,0x16
c000d812:	85 c0                	test   eax,eax
c000d814:	0f 8f 45 06 00 00    	jg     c000de5f <sinc_mono_vari_process+0x6e0>
c000d81a:	83 ec 0c             	sub    esp,0xc
c000d81d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d820:	e8 06 ab 01 00       	call   c002832b <__floatsidf>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d82c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d830:	68 00 00 00 40       	push   0x40000000
c000d835:	6a 00                	push   0x0
c000d837:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83f:	e8 07 9e 01 00       	call   c002764b <__adddf3>
c000d844:	59                   	pop    ecx
c000d845:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d849:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d84d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d850:	e8 d6 aa 01 00       	call   c002832b <__floatsidf>
c000d855:	83 c4 10             	add    esp,0x10
c000d858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d85c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d860:	52                   	push   edx
c000d861:	50                   	push   eax
c000d862:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d866:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d86a:	e8 3d a7 01 00       	call   c0027fac <__divdf3>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d876:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d87a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d87d:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d880:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d884:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d888:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d88c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d898:	e8 dc ac 01 00       	call   c0028579 <__gtdf2>
c000d89d:	83 c4 10             	add    esp,0x10
c000d8a0:	85 c0                	test   eax,eax
c000d8a2:	7e 2d                	jle    c000d8d1 <sinc_mono_vari_process+0x152>
c000d8a4:	68 00 00 f0 3f       	push   0x3ff00000
c000d8a9:	6a 00                	push   0x0
c000d8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b3:	e8 df ac 01 00       	call   c0028597 <__ltdf2>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	85 c0                	test   eax,eax
c000d8bd:	79 4d                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8cf:	eb 1b                	jmp    c000d8ec <sinc_mono_vari_process+0x16d>
c000d8d1:	68 00 00 f0 3f       	push   0x3ff00000
c000d8d6:	6a 00                	push   0x0
c000d8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8e0:	e8 b2 ac 01 00       	call   c0028597 <__ltdf2>
c000d8e5:	83 c4 10             	add    esp,0x10
c000d8e8:	85 c0                	test   eax,eax
c000d8ea:	79 20                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8fc:	e8 ab a6 01 00       	call   c0027fac <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d908:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d90c:	50                   	push   eax
c000d90d:	50                   	push   eax
c000d90e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d912:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d916:	e8 35 ae 01 00       	call   c0028750 <lrint>
c000d91b:	40                   	inc    eax
c000d91c:	0f af c7             	imul   eax,edi
c000d91f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d923:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d927:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d92a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d92d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d931:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d935:	58                   	pop    eax
c000d936:	5a                   	pop    edx
c000d937:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93f:	e8 0c ae 01 00       	call   c0028750 <lrint>
c000d944:	83 ec 0c             	sub    esp,0xc
c000d947:	50                   	push   eax
c000d948:	e8 de a9 01 00       	call   c002832b <__floatsidf>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d954:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d958:	52                   	push   edx
c000d959:	50                   	push   eax
c000d95a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d962:	e8 35 a3 01 00       	call   c0027c9c <__subdf3>
c000d967:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d96b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d96f:	83 c4 20             	add    esp,0x20
c000d972:	6a 00                	push   0x0
c000d974:	6a 00                	push   0x0
c000d976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97e:	e8 14 ac 01 00       	call   c0028597 <__ltdf2>
c000d983:	83 c4 10             	add    esp,0x10
c000d986:	85 c0                	test   eax,eax
c000d988:	79 1f                	jns    c000d9a9 <sinc_mono_vari_process+0x22a>
c000d98a:	68 00 00 f0 3f       	push   0x3ff00000
c000d98f:	6a 00                	push   0x0
c000d991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d995:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d999:	e8 ad 9c 01 00       	call   c002764b <__adddf3>
c000d99e:	83 c4 10             	add    esp,0x10
c000d9a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9a9:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9ac:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9af:	83 ec 10             	sub    esp,0x10
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9c2:	e8 d5 a2 01 00       	call   c0027c9c <__subdf3>
c000d9c7:	83 c4 18             	add    esp,0x18
c000d9ca:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d9ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d9d2:	52                   	push   edx
c000d9d3:	50                   	push   eax
c000d9d4:	e8 77 ad 01 00       	call   c0028750 <lrint>
c000d9d9:	0f af f8             	imul   edi,eax
c000d9dc:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9df:	31 ff                	xor    edi,edi
c000d9e1:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d9e6:	99                   	cdq    
c000d9e7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9ea:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d9ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f5:	55                   	push   ebp
c000d9f6:	57                   	push   edi
c000d9f7:	e8 b0 a5 01 00       	call   c0027fac <__divdf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da07:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da0c:	68 23 42 92 0c       	push   0xc924223
c000da11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da19:	e8 2d 9c 01 00       	call   c002764b <__adddf3>
c000da1e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000da22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000da26:	83 c4 20             	add    esp,0x20
c000da29:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000da2d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000da31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000da34:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000da37:	7d 54                	jge    c000da8d <sinc_mono_vari_process+0x30e>
c000da39:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da3f:	01 c8                	add    eax,ecx
c000da41:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da44:	99                   	cdq    
c000da45:	f7 f9                	idiv   ecx
c000da47:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da4b:	7d 0c                	jge    c000da59 <sinc_mono_vari_process+0x2da>
c000da4d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000da50:	85 ff                	test   edi,edi
c000da52:	79 73                	jns    c000dac7 <sinc_mono_vari_process+0x348>
c000da54:	e9 ee 00 00 00       	jmp    c000db47 <sinc_mono_vari_process+0x3c8>
c000da59:	50                   	push   eax
c000da5a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da5e:	56                   	push   esi
c000da5f:	53                   	push   ebx
c000da60:	e8 8d e0 ff ff       	call   c000baf2 <prepare_data>
c000da65:	89 c2                	mov    edx,eax
c000da67:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000da71:	85 d2                	test   edx,edx
c000da73:	0f 85 e6 03 00 00    	jne    c000de5f <sinc_mono_vari_process+0x6e0>
c000da79:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da7c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da7f:	01 c8                	add    eax,ecx
c000da81:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da84:	99                   	cdq    
c000da85:	f7 f9                	idiv   ecx
c000da87:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da8b:	7c c0                	jl     c000da4d <sinc_mono_vari_process+0x2ce>
c000da8d:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000da91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da99:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000da9c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000da9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000daa7:	89 01                	mov    DWORD PTR [ecx],eax
c000daa9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000daac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000daaf:	99                   	cdq    
c000dab0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dab3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000dab6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000dab9:	99                   	cdq    
c000daba:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dabd:	31 d2                	xor    edx,edx
c000dabf:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000dac2:	e9 98 03 00 00       	jmp    c000de5f <sinc_mono_vari_process+0x6e0>
c000dac7:	83 ec 0c             	sub    esp,0xc
c000daca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000dacd:	e8 59 a8 01 00       	call   c002832b <__floatsidf>
c000dad2:	83 c4 10             	add    esp,0x10
c000dad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dadd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daed:	e8 59 9b 01 00       	call   c002764b <__adddf3>
c000daf2:	83 c4 10             	add    esp,0x10
c000daf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dafd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db0d:	e8 39 9b 01 00       	call   c002764b <__adddf3>
c000db12:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1d:	e8 09 a8 01 00       	call   c002832b <__floatsidf>
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db2d:	52                   	push   edx
c000db2e:	50                   	push   eax
c000db2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db37:	e8 3d aa 01 00       	call   c0028579 <__gtdf2>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	85 c0                	test   eax,eax
c000db41:	0f 8f 46 ff ff ff    	jg     c000da8d <sinc_mono_vari_process+0x30e>
c000db47:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000db4b:	0f 8e f5 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000db51:	83 ec 10             	sub    esp,0x10
c000db54:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000db57:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000db5a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000db5e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000db61:	ff 30                	push   DWORD PTR [eax]
c000db63:	e8 34 a1 01 00       	call   c0027c9c <__subdf3>
c000db68:	83 c4 18             	add    esp,0x18
c000db6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db73:	52                   	push   edx
c000db74:	50                   	push   eax
c000db75:	e8 b6 ab 01 00       	call   c0028730 <fabs>
c000db7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	68 df 7c db 3d       	push   0x3ddb7cdf
c000db8a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000db8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db97:	e8 dd a9 01 00       	call   c0028579 <__gtdf2>
c000db9c:	83 c4 10             	add    esp,0x10
c000db9f:	85 c0                	test   eax,eax
c000dba1:	0f 8e 9f 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000dba7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dbab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dbae:	8b 00                	mov    eax,DWORD PTR [eax]
c000dbb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbb8:	52                   	push   edx
c000dbb9:	50                   	push   eax
c000dbba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dbbd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dbc0:	e8 d7 a0 01 00       	call   c0027c9c <__subdf3>
c000dbc5:	5f                   	pop    edi
c000dbc6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbca:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbce:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dbd1:	e8 55 a7 01 00       	call   c002832b <__floatsidf>
c000dbd6:	83 c4 10             	add    esp,0x10
c000dbd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dbe1:	52                   	push   edx
c000dbe2:	50                   	push   eax
c000dbe3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbeb:	e8 d8 a0 01 00       	call   c0027cc8 <__muldf3>
c000dbf0:	5d                   	pop    ebp
c000dbf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbf9:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dbfc:	e8 2a a7 01 00       	call   c002832b <__floatsidf>
c000dc01:	83 c4 10             	add    esp,0x10
c000dc04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc0c:	52                   	push   edx
c000dc0d:	50                   	push   eax
c000dc0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc16:	e8 91 a3 01 00       	call   c0027fac <__divdf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc36:	e8 10 9a 01 00       	call   c002764b <__adddf3>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc46:	83 ec 0c             	sub    esp,0xc
c000dc49:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dc4c:	e8 da a6 01 00       	call   c002832b <__floatsidf>
c000dc51:	83 c4 10             	add    esp,0x10
c000dc54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6c:	e8 26 a9 01 00       	call   c0028597 <__ltdf2>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	85 c0                	test   eax,eax
c000dc76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000dc7a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dc7e:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000dc82:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000dc86:	78 10                	js     c000dc98 <sinc_mono_vari_process+0x519>
c000dc88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dc8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dc90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dca0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca8:	e8 1b a0 01 00       	call   c0027cc8 <__muldf3>
c000dcad:	59                   	pop    ecx
c000dcae:	5f                   	pop    edi
c000dcaf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dcb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbf:	e8 07 de ff ff       	call   c000bacb <double_to_fp>
c000dcc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcc8:	89 c7                	mov    edi,eax
c000dcca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd6:	e8 ed 9f 01 00       	call   c0027cc8 <__muldf3>
c000dcdb:	83 c4 18             	add    esp,0x18
c000dcde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dce2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dce6:	52                   	push   edx
c000dce7:	50                   	push   eax
c000dce8:	e8 de dd ff ff       	call   c000bacb <double_to_fp>
c000dced:	83 ec 0c             	sub    esp,0xc
c000dcf0:	89 c5                	mov    ebp,eax
c000dcf2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dcf5:	e8 31 a6 01 00       	call   c002832b <__floatsidf>
c000dcfa:	83 c4 10             	add    esp,0x10
c000dcfd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd01:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd05:	52                   	push   edx
c000dd06:	50                   	push   eax
c000dd07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0f:	e8 98 a2 01 00       	call   c0027fac <__divdf3>
c000dd14:	83 c4 10             	add    esp,0x10
c000dd17:	89 e9                	mov    ecx,ebp
c000dd19:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd1d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd21:	89 d8                	mov    eax,ebx
c000dd23:	89 fa                	mov    edx,edi
c000dd25:	e8 ee bd ff ff       	call   c0009b18 <calc_output_single>
c000dd2a:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dd2d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dd30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd34:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd38:	52                   	push   edx
c000dd39:	50                   	push   eax
c000dd3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd42:	e8 81 9f 01 00       	call   c0027cc8 <__muldf3>
c000dd47:	59                   	pop    ecx
c000dd48:	59                   	pop    ecx
c000dd49:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd4d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd59:	e8 3d a8 01 00       	call   c002859b <__truncdfsf2>
c000dd5e:	83 c4 10             	add    esp,0x10
c000dd61:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000dd64:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000dd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd77:	e8 30 a2 01 00       	call   c0027fac <__divdf3>
c000dd7c:	83 c4 10             	add    esp,0x10
c000dd7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd97:	e8 af 98 01 00       	call   c002764b <__adddf3>
c000dd9c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dda0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dda4:	83 c4 18             	add    esp,0x18
c000dda7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddaf:	e8 9c a9 01 00       	call   c0028750 <lrint>
c000ddb4:	83 ec 0c             	sub    esp,0xc
c000ddb7:	50                   	push   eax
c000ddb8:	e8 6e a5 01 00       	call   c002832b <__floatsidf>
c000ddbd:	83 c4 10             	add    esp,0x10
c000ddc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ddc8:	52                   	push   edx
c000ddc9:	50                   	push   eax
c000ddca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddd2:	e8 c5 9e 01 00       	call   c0027c9c <__subdf3>
c000ddd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dddb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dddf:	83 c4 20             	add    esp,0x20
c000dde2:	6a 00                	push   0x0
c000dde4:	6a 00                	push   0x0
c000dde6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddee:	e8 a4 a7 01 00       	call   c0028597 <__ltdf2>
c000ddf3:	83 c4 10             	add    esp,0x10
c000ddf6:	85 c0                	test   eax,eax
c000ddf8:	79 20                	jns    c000de1a <sinc_mono_vari_process+0x69b>
c000ddfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de0a:	e8 3c 98 01 00       	call   c002764b <__adddf3>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de1a:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000de1d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000de20:	83 ec 10             	sub    esp,0x10
c000de23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de33:	e8 64 9e 01 00       	call   c0027c9c <__subdf3>
c000de38:	83 c4 18             	add    esp,0x18
c000de3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de43:	52                   	push   edx
c000de44:	50                   	push   eax
c000de45:	e8 06 a9 01 00       	call   c0028750 <lrint>
c000de4a:	83 c4 10             	add    esp,0x10
c000de4d:	0f af f8             	imul   edi,eax
c000de50:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000de53:	99                   	cdq    
c000de54:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000de57:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000de5a:	e9 d2 fb ff ff       	jmp    c000da31 <sinc_mono_vari_process+0x2b2>
c000de5f:	83 c4 4c             	add    esp,0x4c
c000de62:	89 d0                	mov    eax,edx
c000de64:	5b                   	pop    ebx
c000de65:	5e                   	pop    esi
c000de66:	5f                   	pop    edi
c000de67:	5d                   	pop    ebp
c000de68:	c3                   	ret    

c000de69 <sinc_get_name>:
c000de69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de6d:	31 c0                	xor    eax,eax
c000de6f:	83 fa 02             	cmp    edx,0x2
c000de72:	77 07                	ja     c000de7b <sinc_get_name+0x12>
c000de74:	8b 04 95 e4 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd601c]
c000de7b:	c3                   	ret    

c000de7c <sinc_get_description>:
c000de7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de80:	31 c0                	xor    eax,eax
c000de82:	83 fa 02             	cmp    edx,0x2
c000de85:	77 07                	ja     c000de8e <sinc_get_description+0x12>
c000de87:	8b 04 95 d8 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6028]
c000de8e:	c3                   	ret    

c000de8f <sinc_set_converter>:
c000de8f:	53                   	push   ebx
c000de90:	81 ec 58 08 00 00    	sub    esp,0x858
c000de96:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000de9d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dea0:	85 c0                	test   eax,eax
c000dea2:	74 13                	je     c000deb7 <sinc_set_converter+0x28>
c000dea4:	83 ec 0c             	sub    esp,0xc
c000dea7:	50                   	push   eax
c000dea8:	e8 32 19 00 00       	call   c000f7df <free>
c000dead:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000deb4:	83 c4 10             	add    esp,0x10
c000deb7:	50                   	push   eax
c000deb8:	68 44 08 00 00       	push   0x844
c000debd:	6a 00                	push   0x0
c000debf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dec3:	50                   	push   eax
c000dec4:	e8 87 28 ff ff       	call   c0000750 <memset>
c000dec9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000decc:	83 c4 10             	add    esp,0x10
c000decf:	b8 0b 00 00 00       	mov    eax,0xb
c000ded4:	81 fa 80 00 00 00    	cmp    edx,0x80
c000deda:	7f 6e                	jg     c000df4a <sinc_set_converter+0xbb>
c000dedc:	83 fa 01             	cmp    edx,0x1
c000dedf:	75 10                	jne    c000def1 <sinc_set_converter+0x62>
c000dee1:	c7 43 24 7f d7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d77f
c000dee8:	c7 43 20 7f d7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d77f
c000deef:	eb 4d                	jmp    c000df3e <sinc_set_converter+0xaf>
c000def1:	83 fa 02             	cmp    edx,0x2
c000def4:	75 10                	jne    c000df06 <sinc_set_converter+0x77>
c000def6:	c7 43 24 ba d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d0ba
c000defd:	c7 43 20 ba d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d0ba
c000df04:	eb 38                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df06:	83 fa 04             	cmp    edx,0x4
c000df09:	75 10                	jne    c000df1b <sinc_set_converter+0x8c>
c000df0b:	c7 43 24 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c9f5
c000df12:	c7 43 20 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c9f5
c000df19:	eb 23                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df1b:	83 fa 06             	cmp    edx,0x6
c000df1e:	75 10                	jne    c000df30 <sinc_set_converter+0xa1>
c000df20:	c7 43 24 30 c3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c330
c000df27:	c7 43 20 30 c3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c330
c000df2e:	eb 0e                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df30:	c7 43 24 6c bc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bc6c
c000df37:	c7 43 20 6c bc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bc6c
c000df3e:	c7 43 28 1f af 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000af1f
c000df45:	b8 0a 00 00 00       	mov    eax,0xa
c000df4a:	81 c4 58 08 00 00    	add    esp,0x858
c000df50:	5b                   	pop    ebx
c000df51:	c3                   	ret    

c000df52 <zoh_vari_process>:
c000df52:	55                   	push   ebp
c000df53:	31 d2                	xor    edx,edx
c000df55:	57                   	push   edi
c000df56:	56                   	push   esi
c000df57:	53                   	push   ebx
c000df58:	83 ec 3c             	sub    esp,0x3c
c000df5b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000df5f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000df63:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000df67:	0f 8e 80 06 00 00    	jle    c000e5ed <zoh_vari_process+0x69b>
c000df6d:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000df70:	ba 05 00 00 00       	mov    edx,0x5
c000df75:	85 db                	test   ebx,ebx
c000df77:	0f 84 70 06 00 00    	je     c000e5ed <zoh_vari_process+0x69b>
c000df7d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df80:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000df84:	74 19                	je     c000df9f <zoh_vari_process+0x4d>
c000df86:	31 d2                	xor    edx,edx
c000df88:	39 c2                	cmp    edx,eax
c000df8a:	7d 0c                	jge    c000df98 <zoh_vari_process+0x46>
c000df8c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df8e:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000df91:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000df95:	42                   	inc    edx
c000df96:	eb f0                	jmp    c000df88 <zoh_vari_process+0x36>
c000df98:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000df9f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dfa2:	0f af d0             	imul   edx,eax
c000dfa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dfa8:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dfac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dfb3:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dfb6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dfbd:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfc0:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	68 00 00 70 3f       	push   0x3f700000
c000dfcf:	6a 00                	push   0x0
c000dfd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd9:	e8 b9 a5 01 00       	call   c0028597 <__ltdf2>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	ba 16 00 00 00       	mov    edx,0x16
c000dfe6:	85 c0                	test   eax,eax
c000dfe8:	0f 88 ff 05 00 00    	js     c000e5ed <zoh_vari_process+0x69b>
c000dfee:	68 00 00 70 40       	push   0x40700000
c000dff3:	6a 00                	push   0x0
c000dff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dffd:	e8 77 a5 01 00       	call   c0028579 <__gtdf2>
c000e002:	83 c4 10             	add    esp,0x10
c000e005:	ba 16 00 00 00       	mov    edx,0x16
c000e00a:	85 c0                	test   eax,eax
c000e00c:	0f 8f db 05 00 00    	jg     c000e5ed <zoh_vari_process+0x69b>
c000e012:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e015:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000e018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e020:	68 00 00 f0 3f       	push   0x3ff00000
c000e025:	6a 00                	push   0x0
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 63 a5 01 00       	call   c0028597 <__ltdf2>
c000e034:	83 c4 10             	add    esp,0x10
c000e037:	85 c0                	test   eax,eax
c000e039:	0f 89 da 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e03f:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000e042:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000e045:	0f 8d ce 01 00 00    	jge    c000e219 <zoh_vari_process+0x2c7>
c000e04b:	83 ec 0c             	sub    esp,0xc
c000e04e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e051:	e8 d5 a2 01 00       	call   c002832b <__floatsidf>
c000e056:	83 c4 10             	add    esp,0x10
c000e059:	89 04 24             	mov    DWORD PTR [esp],eax
c000e05c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e068:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e070:	e8 53 9c 01 00       	call   c0027cc8 <__muldf3>
c000e075:	59                   	pop    ecx
c000e076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e07a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e07e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e081:	e8 a5 a2 01 00       	call   c002832b <__floatsidf>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e08d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e091:	52                   	push   edx
c000e092:	50                   	push   eax
c000e093:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e097:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e09b:	e8 ab 95 01 00       	call   c002764b <__adddf3>
c000e0a0:	59                   	pop    ecx
c000e0a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0a5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e0a9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000e0ac:	e8 7a a2 01 00       	call   c002832b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	52                   	push   edx
c000e0bd:	50                   	push   eax
c000e0be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c6:	e8 ca a4 01 00       	call   c0028595 <__gedf2>
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	85 c0                	test   eax,eax
c000e0d0:	0f 89 43 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e0d6:	85 ed                	test   ebp,ebp
c000e0d8:	0f 8e ec 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e0de:	83 ec 10             	sub    esp,0x10
c000e0e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e0e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e0e7:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e0ea:	ff 37                	push   DWORD PTR [edi]
c000e0ec:	e8 ab 9b 01 00       	call   c0027c9c <__subdf3>
c000e0f1:	83 c4 18             	add    esp,0x18
c000e0f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e0fc:	52                   	push   edx
c000e0fd:	50                   	push   eax
c000e0fe:	e8 2d a6 01 00       	call   c0028730 <fabs>
c000e103:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e107:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e113:	68 23 42 92 0c       	push   0xc924223
c000e118:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e11c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e120:	e8 54 a4 01 00       	call   c0028579 <__gtdf2>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	85 c0                	test   eax,eax
c000e12a:	0f 8e 9a 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e130:	8b 07                	mov    eax,DWORD PTR [edi]
c000e132:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e135:	89 04 24             	mov    DWORD PTR [esp],eax
c000e138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13c:	52                   	push   edx
c000e13d:	50                   	push   eax
c000e13e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e141:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e144:	e8 53 9b 01 00       	call   c0027c9c <__subdf3>
c000e149:	59                   	pop    ecx
c000e14a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e14e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e152:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e155:	e8 d1 a1 01 00       	call   c002832b <__floatsidf>
c000e15a:	83 c4 10             	add    esp,0x10
c000e15d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e161:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e165:	52                   	push   edx
c000e166:	50                   	push   eax
c000e167:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16f:	e8 54 9b 01 00       	call   c0027cc8 <__muldf3>
c000e174:	5d                   	pop    ebp
c000e175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e179:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e17d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e180:	e8 a6 a1 01 00       	call   c002832b <__floatsidf>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e18c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e190:	52                   	push   edx
c000e191:	50                   	push   eax
c000e192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e19a:	e8 0d 9e 01 00       	call   c0027fac <__divdf3>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1ba:	e8 8c 94 01 00       	call   c002764b <__adddf3>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1ca:	31 c0                	xor    eax,eax
c000e1cc:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000e1cf:	7e 13                	jle    c000e1e4 <zoh_vari_process+0x292>
c000e1d1:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000e1d5:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e1d8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000e1db:	40                   	inc    eax
c000e1dc:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000e1df:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e1e2:	eb e8                	jmp    c000e1cc <zoh_vari_process+0x27a>
c000e1e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1ec:	68 00 00 f0 3f       	push   0x3ff00000
c000e1f1:	6a 00                	push   0x0
c000e1f3:	e8 b4 9d 01 00       	call   c0027fac <__divdf3>
c000e1f8:	83 c4 10             	add    esp,0x10
c000e1fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e202:	52                   	push   edx
c000e203:	50                   	push   eax
c000e204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20c:	e8 3a 94 01 00       	call   c002764b <__adddf3>
c000e211:	83 c4 10             	add    esp,0x10
c000e214:	e9 ff fd ff ff       	jmp    c000e018 <zoh_vari_process+0xc6>
c000e219:	55                   	push   ebp
c000e21a:	55                   	push   ebp
c000e21b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e223:	e8 28 a5 01 00       	call   c0028750 <lrint>
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	50                   	push   eax
c000e22c:	e8 fa a0 01 00       	call   c002832b <__floatsidf>
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e238:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e23c:	52                   	push   edx
c000e23d:	50                   	push   eax
c000e23e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e242:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e246:	e8 51 9a 01 00       	call   c0027c9c <__subdf3>
c000e24b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e24f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e253:	83 c4 20             	add    esp,0x20
c000e256:	6a 00                	push   0x0
c000e258:	6a 00                	push   0x0
c000e25a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e25e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e262:	e8 30 a3 01 00       	call   c0028597 <__ltdf2>
c000e267:	83 c4 10             	add    esp,0x10
c000e26a:	85 c0                	test   eax,eax
c000e26c:	79 1e                	jns    c000e28c <zoh_vari_process+0x33a>
c000e26e:	68 00 00 f0 3f       	push   0x3ff00000
c000e273:	6a 00                	push   0x0
c000e275:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e279:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e27d:	e8 c9 93 01 00       	call   c002764b <__adddf3>
c000e282:	83 c4 10             	add    esp,0x10
c000e285:	89 04 24             	mov    DWORD PTR [esp],eax
c000e288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e28c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e28f:	83 ec 10             	sub    esp,0x10
c000e292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e29e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2a2:	e8 f5 99 01 00       	call   c0027c9c <__subdf3>
c000e2a7:	83 c4 18             	add    esp,0x18
c000e2aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2b2:	52                   	push   edx
c000e2b3:	50                   	push   eax
c000e2b4:	e8 97 a4 01 00       	call   c0028750 <lrint>
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	0f af e8             	imul   ebp,eax
c000e2bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e2c2:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e2c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e2c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e2cc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e2cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d3:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e2d6:	0f 8d 7a 02 00 00    	jge    c000e556 <zoh_vari_process+0x604>
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2e2:	e8 44 a0 01 00       	call   c002832b <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2f2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e2fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e302:	e8 c1 99 01 00       	call   c0027cc8 <__muldf3>
c000e307:	59                   	pop    ecx
c000e308:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e30c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 12 a0 01 00       	call   c002832b <__floatsidf>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e324:	52                   	push   edx
c000e325:	50                   	push   eax
c000e326:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32e:	e8 18 93 01 00       	call   c002764b <__adddf3>
c000e333:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e33a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e33e:	e8 e8 9f 01 00       	call   c002832b <__floatsidf>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e34a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e34e:	52                   	push   edx
c000e34f:	50                   	push   eax
c000e350:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e354:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e358:	e8 3c a2 01 00       	call   c0028599 <__ledf2>
c000e35d:	83 c4 10             	add    esp,0x10
c000e360:	85 c0                	test   eax,eax
c000e362:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e366:	0f 8f ea 01 00 00    	jg     c000e556 <zoh_vari_process+0x604>
c000e36c:	85 c9                	test   ecx,ecx
c000e36e:	0f 8e ed 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e374:	83 ec 10             	sub    esp,0x10
c000e377:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e37a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e37d:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e380:	ff 37                	push   DWORD PTR [edi]
c000e382:	e8 15 99 01 00       	call   c0027c9c <__subdf3>
c000e387:	83 c4 18             	add    esp,0x18
c000e38a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e38e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e392:	52                   	push   edx
c000e393:	50                   	push   eax
c000e394:	e8 97 a3 01 00       	call   c0028730 <fabs>
c000e399:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e39d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e3a1:	83 c4 10             	add    esp,0x10
c000e3a4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e3a9:	68 23 42 92 0c       	push   0xc924223
c000e3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b6:	e8 be a1 01 00       	call   c0028579 <__gtdf2>
c000e3bb:	83 c4 10             	add    esp,0x10
c000e3be:	85 c0                	test   eax,eax
c000e3c0:	0f 8e 9b 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e3c6:	8b 07                	mov    eax,DWORD PTR [edi]
c000e3c8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e3d3:	52                   	push   edx
c000e3d4:	50                   	push   eax
c000e3d5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e3d8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e3db:	e8 bc 98 01 00       	call   c0027c9c <__subdf3>
c000e3e0:	5d                   	pop    ebp
c000e3e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e3e5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e3e9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e3ec:	e8 3a 9f 01 00       	call   c002832b <__floatsidf>
c000e3f1:	83 c4 10             	add    esp,0x10
c000e3f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e3f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e3fc:	52                   	push   edx
c000e3fd:	50                   	push   eax
c000e3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e406:	e8 bd 98 01 00       	call   c0027cc8 <__muldf3>
c000e40b:	59                   	pop    ecx
c000e40c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e410:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e414:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e417:	e8 0f 9f 01 00       	call   c002832b <__floatsidf>
c000e41c:	83 c4 10             	add    esp,0x10
c000e41f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e423:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e427:	52                   	push   edx
c000e428:	50                   	push   eax
c000e429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e431:	e8 76 9b 01 00       	call   c0027fac <__divdf3>
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e43d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e441:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e445:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e451:	e8 f5 91 01 00       	call   c002764b <__adddf3>
c000e456:	83 c4 10             	add    esp,0x10
c000e459:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e45d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e461:	31 d2                	xor    edx,edx
c000e463:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e466:	39 d0                	cmp    eax,edx
c000e468:	7e 1d                	jle    c000e487 <zoh_vari_process+0x535>
c000e46a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e46d:	29 c1                	sub    ecx,eax
c000e46f:	89 c8                	mov    eax,ecx
c000e471:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e473:	01 d0                	add    eax,edx
c000e475:	42                   	inc    edx
c000e476:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e479:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e47c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e47f:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e482:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e485:	eb dc                	jmp    c000e463 <zoh_vari_process+0x511>
c000e487:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48f:	68 00 00 f0 3f       	push   0x3ff00000
c000e494:	6a 00                	push   0x0
c000e496:	e8 11 9b 01 00       	call   c0027fac <__divdf3>
c000e49b:	83 c4 10             	add    esp,0x10
c000e49e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4a6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b6:	e8 90 91 01 00       	call   c002764b <__adddf3>
c000e4bb:	5d                   	pop    ebp
c000e4bc:	59                   	pop    ecx
c000e4bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e4c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4cd:	e8 7e a2 01 00       	call   c0028750 <lrint>
c000e4d2:	83 ec 0c             	sub    esp,0xc
c000e4d5:	50                   	push   eax
c000e4d6:	e8 50 9e 01 00       	call   c002832b <__floatsidf>
c000e4db:	83 c4 10             	add    esp,0x10
c000e4de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4e6:	52                   	push   edx
c000e4e7:	50                   	push   eax
c000e4e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4f0:	e8 a7 97 01 00       	call   c0027c9c <__subdf3>
c000e4f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e4f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e4fd:	83 c4 20             	add    esp,0x20
c000e500:	6a 00                	push   0x0
c000e502:	6a 00                	push   0x0
c000e504:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e50c:	e8 86 a0 01 00       	call   c0028597 <__ltdf2>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	79 1e                	jns    c000e536 <zoh_vari_process+0x5e4>
c000e518:	68 00 00 f0 3f       	push   0x3ff00000
c000e51d:	6a 00                	push   0x0
c000e51f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e523:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e527:	e8 1f 91 01 00       	call   c002764b <__adddf3>
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e532:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e536:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e539:	83 ec 10             	sub    esp,0x10
c000e53c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e54c:	e8 4b 97 01 00       	call   c0027c9c <__subdf3>
c000e551:	e9 51 fd ff ff       	jmp    c000e2a7 <zoh_vari_process+0x355>
c000e556:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e55a:	7d 3a                	jge    c000e596 <zoh_vari_process+0x644>
c000e55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e560:	83 ec 0c             	sub    esp,0xc
c000e563:	29 e8                	sub    eax,ebp
c000e565:	99                   	cdq    
c000e566:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e569:	50                   	push   eax
c000e56a:	e8 bc 9d 01 00       	call   c002832b <__floatsidf>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e57a:	52                   	push   edx
c000e57b:	50                   	push   eax
c000e57c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e580:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e584:	e8 c2 90 01 00       	call   c002764b <__adddf3>
c000e589:	83 c4 10             	add    esp,0x10
c000e58c:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e58f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e592:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e596:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e599:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e59d:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e5a0:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e5a3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5a6:	85 c0                	test   eax,eax
c000e5a8:	7f 25                	jg     c000e5cf <zoh_vari_process+0x67d>
c000e5aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5b2:	89 07                	mov    DWORD PTR [edi],eax
c000e5b4:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e5b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5ba:	99                   	cdq    
c000e5bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5be:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e5c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e5c4:	99                   	cdq    
c000e5c5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5c8:	31 d2                	xor    edx,edx
c000e5ca:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e5cd:	eb 1e                	jmp    c000e5ed <zoh_vari_process+0x69b>
c000e5cf:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e5d2:	31 d2                	xor    edx,edx
c000e5d4:	29 c8                	sub    eax,ecx
c000e5d6:	c1 e0 02             	shl    eax,0x2
c000e5d9:	39 d1                	cmp    ecx,edx
c000e5db:	7e cd                	jle    c000e5aa <zoh_vari_process+0x658>
c000e5dd:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e5df:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e5e3:	83 c0 04             	add    eax,0x4
c000e5e6:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e5ea:	42                   	inc    edx
c000e5eb:	eb ec                	jmp    c000e5d9 <zoh_vari_process+0x687>
c000e5ed:	83 c4 3c             	add    esp,0x3c
c000e5f0:	89 d0                	mov    eax,edx
c000e5f2:	5b                   	pop    ebx
c000e5f3:	5e                   	pop    esi
c000e5f4:	5f                   	pop    edi
c000e5f5:	5d                   	pop    ebp
c000e5f6:	c3                   	ret    

c000e5f7 <zoh_reset>:
c000e5f7:	83 ec 0c             	sub    esp,0xc
c000e5fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5fe:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e601:	85 c0                	test   eax,eax
c000e603:	74 20                	je     c000e625 <zoh_reset+0x2e>
c000e605:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e608:	83 c0 1c             	add    eax,0x1c
c000e60b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e60e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e615:	c1 e2 02             	shl    edx,0x2
c000e618:	51                   	push   ecx
c000e619:	52                   	push   edx
c000e61a:	6a 00                	push   0x0
c000e61c:	50                   	push   eax
c000e61d:	e8 2e 21 ff ff       	call   c0000750 <memset>
c000e622:	83 c4 10             	add    esp,0x10
c000e625:	83 c4 0c             	add    esp,0xc
c000e628:	c3                   	ret    

c000e629 <zoh_get_name>:
c000e629:	31 c0                	xor    eax,eax
c000e62b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e630:	75 05                	jne    c000e637 <zoh_get_name+0xe>
c000e632:	b8 fe a0 02 c0       	mov    eax,0xc002a0fe
c000e637:	c3                   	ret    

c000e638 <zoh_get_description>:
c000e638:	31 c0                	xor    eax,eax
c000e63a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e63f:	75 05                	jne    c000e646 <zoh_get_description+0xe>
c000e641:	b8 0f a1 02 c0       	mov    eax,0xc002a10f
c000e646:	c3                   	ret    

c000e647 <zoh_set_converter>:
c000e647:	53                   	push   ebx
c000e648:	b8 0a 00 00 00       	mov    eax,0xa
c000e64d:	83 ec 08             	sub    esp,0x8
c000e650:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e654:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e659:	75 6e                	jne    c000e6c9 <zoh_set_converter+0x82>
c000e65b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e65e:	85 c0                	test   eax,eax
c000e660:	74 13                	je     c000e675 <zoh_set_converter+0x2e>
c000e662:	83 ec 0c             	sub    esp,0xc
c000e665:	50                   	push   eax
c000e666:	e8 74 11 00 00       	call   c000f7df <free>
c000e66b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e672:	83 c4 10             	add    esp,0x10
c000e675:	50                   	push   eax
c000e676:	50                   	push   eax
c000e677:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e67a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e681:	50                   	push   eax
c000e682:	6a 01                	push   0x1
c000e684:	e8 76 11 00 00       	call   c000f7ff <calloc>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	89 c2                	mov    edx,eax
c000e68e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e691:	85 d2                	test   edx,edx
c000e693:	b8 01 00 00 00       	mov    eax,0x1
c000e698:	74 2f                	je     c000e6c9 <zoh_set_converter+0x82>
c000e69a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e69d:	83 ec 0c             	sub    esp,0xc
c000e6a0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e6a3:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e6a9:	c7 43 24 52 df 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000df52
c000e6b0:	c7 43 20 52 df 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000df52
c000e6b7:	c7 43 28 f7 e5 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e5f7
c000e6be:	53                   	push   ebx
c000e6bf:	e8 33 ff ff ff       	call   c000e5f7 <zoh_reset>
c000e6c4:	83 c4 10             	add    esp,0x10
c000e6c7:	31 c0                	xor    eax,eax
c000e6c9:	83 c4 08             	add    esp,0x8
c000e6cc:	5b                   	pop    ebx
c000e6cd:	c3                   	ret    

c000e6ce <CPU::current()>:
c000e6ce:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c000e6d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6d9:	c3                   	ret    

c000e6da <operator new(unsigned long)>:
c000e6da:	e9 f0 10 00 00       	jmp    c000f7cf <malloc>

c000e6df <operator delete(void*)>:
c000e6df:	e9 0b 11 00 00       	jmp    c000f7ef <rfree>

c000e6e4 <disableIRQs()>:
c000e6e4:	fa                   	cli    
c000e6e5:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c000e6eb:	c3                   	ret    

c000e6ec <enableIRQs()>:
c000e6ec:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c000e6f1:	48                   	dec    eax
c000e6f2:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c000e6f7:	75 01                	jne    c000e6fa <enableIRQs()+0xe>
c000e6f9:	fb                   	sti    
c000e6fa:	c3                   	ret    

c000e6fb <lockScheduler()>:
c000e6fb:	fa                   	cli    
c000e6fc:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c000e702:	c3                   	ret    

c000e703 <unlockScheduler()>:
c000e703:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c000e708:	48                   	dec    eax
c000e709:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c000e70e:	75 01                	jne    c000e711 <unlockScheduler()+0xe>
c000e710:	fb                   	sti    
c000e711:	c3                   	ret    

c000e712 <lockStuff()>:
c000e712:	fa                   	cli    
c000e713:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c000e719:	ff 05 24 f4 02 c0    	inc    DWORD PTR ds:0xc002f424
c000e71f:	c3                   	ret    

c000e720 <unlockStuff()>:
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c000e728:	48                   	dec    eax
c000e729:	a3 24 f4 02 c0       	mov    ds:0xc002f424,eax
c000e72e:	75 18                	jne    c000e748 <unlockStuff()+0x28>
c000e730:	83 3d 20 f4 02 c0 00 	cmp    DWORD PTR ds:0xc002f420,0x0
c000e737:	74 0f                	je     c000e748 <unlockStuff()+0x28>
c000e739:	c7 05 20 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f420,0x0
c000e743:	e8 5d f4 00 00       	call   c001dba5 <schedule()>
c000e748:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c000e74d:	48                   	dec    eax
c000e74e:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c000e753:	75 01                	jne    c000e756 <unlockStuff()+0x36>
c000e755:	fb                   	sti    
c000e756:	83 c4 0c             	add    esp,0xc
c000e759:	c3                   	ret    

c000e75a <Virt::getAKernelVAS()>:
c000e75a:	a1 90 e0 02 c0       	mov    eax,ds:0xc002e090
c000e75f:	c3                   	ret    

c000e760 <__not_memcpy>:
c000e760:	57                   	push   edi
c000e761:	56                   	push   esi
c000e762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e76a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e76e:	89 c7                	mov    edi,eax
c000e770:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e772:	5e                   	pop    esi
c000e773:	5f                   	pop    edi
c000e774:	c3                   	ret    

c000e775 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e775:	83 ec 0c             	sub    esp,0xc
c000e778:	83 ec 08             	sub    esp,0x8
c000e77b:	68 46 a1 02 c0       	push   0xc002a146
c000e780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e784:	e8 0f 21 ff ff       	call   c0000898 <strcmp>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	85 c0                	test   eax,eax
c000e78e:	0f 94 c0             	sete   al
c000e791:	84 c0                	test   al,al
c000e793:	74 0a                	je     c000e79f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e795:	b8 28 df 02 c0       	mov    eax,0xc002df28
c000e79a:	e9 e3 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e79f:	83 ec 08             	sub    esp,0x8
c000e7a2:	68 4f a1 02 c0       	push   0xc002a14f
c000e7a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ab:	e8 e8 20 ff ff       	call   c0000898 <strcmp>
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	85 c0                	test   eax,eax
c000e7b5:	0f 94 c0             	sete   al
c000e7b8:	84 c0                	test   al,al
c000e7ba:	74 0a                	je     c000e7c6 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e7bc:	b8 c4 6a 02 c0       	mov    eax,0xc0026ac4
c000e7c1:	e9 bc 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	68 59 a1 02 c0       	push   0xc002a159
c000e7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d2:	e8 c1 20 ff ff       	call   c0000898 <strcmp>
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	85 c0                	test   eax,eax
c000e7dc:	0f 94 c0             	sete   al
c000e7df:	84 c0                	test   al,al
c000e7e1:	74 0a                	je     c000e7ed <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e7e3:	b8 f8 67 02 c0       	mov    eax,0xc00267f8
c000e7e8:	e9 95 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7ed:	83 ec 08             	sub    esp,0x8
c000e7f0:	68 62 a1 02 c0       	push   0xc002a162
c000e7f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f9:	e8 9a 20 ff ff       	call   c0000898 <strcmp>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	85 c0                	test   eax,eax
c000e803:	0f 94 c0             	sete   al
c000e806:	84 c0                	test   al,al
c000e808:	74 07                	je     c000e811 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e80a:	b8 c4 6b 02 c0       	mov    eax,0xc0026bc4
c000e80f:	eb 71                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e811:	83 ec 08             	sub    esp,0x8
c000e814:	68 6c a1 02 c0       	push   0xc002a16c
c000e819:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e81d:	e8 76 20 ff ff       	call   c0000898 <strcmp>
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	85 c0                	test   eax,eax
c000e827:	0f 94 c0             	sete   al
c000e82a:	84 c0                	test   al,al
c000e82c:	74 07                	je     c000e835 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e82e:	b8 44 69 02 c0       	mov    eax,0xc0026944
c000e833:	eb 4d                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e835:	83 ec 08             	sub    esp,0x8
c000e838:	68 75 a1 02 c0       	push   0xc002a175
c000e83d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e841:	e8 52 20 ff ff       	call   c0000898 <strcmp>
c000e846:	83 c4 10             	add    esp,0x10
c000e849:	85 c0                	test   eax,eax
c000e84b:	0f 94 c0             	sete   al
c000e84e:	84 c0                	test   al,al
c000e850:	74 07                	je     c000e859 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e852:	b8 2c df 02 c0       	mov    eax,0xc002df2c
c000e857:	eb 29                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e859:	83 ec 08             	sub    esp,0x8
c000e85c:	68 82 a1 02 c0       	push   0xc002a182
c000e861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e865:	e8 2e 20 ff ff       	call   c0000898 <strcmp>
c000e86a:	83 c4 10             	add    esp,0x10
c000e86d:	85 c0                	test   eax,eax
c000e86f:	0f 94 c0             	sete   al
c000e872:	84 c0                	test   al,al
c000e874:	74 07                	je     c000e87d <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e876:	b8 2d df 02 c0       	mov    eax,0xc002df2d
c000e87b:	eb 05                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e87d:	b8 00 00 00 00       	mov    eax,0x0
c000e882:	83 c4 0c             	add    esp,0xc
c000e885:	c3                   	ret    

c000e886 <Computer::close(int, int, void*)>:
c000e886:	57                   	push   edi
c000e887:	56                   	push   esi
c000e888:	53                   	push   ebx
c000e889:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e88d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e891:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e895:	83 ec 0c             	sub    esp,0xc
c000e898:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e89e:	e8 47 55 00 00       	call   c0013dea <Device::closeAll()>
c000e8a3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e8b2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e8ba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e8be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8c2:	5b                   	pop    ebx
c000e8c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e8c6:	5e                   	pop    esi
c000e8c7:	5f                   	pop    edi
c000e8c8:	ff e0                	jmp    eax

c000e8ca <Krnl::firstTask()>:
c000e8ca:	53                   	push   ebx
c000e8cb:	83 ec 14             	sub    esp,0x14
c000e8ce:	fb                   	sti    
c000e8cf:	68 8f a1 02 c0       	push   0xc002a18f
c000e8d4:	e8 50 0f 00 00       	call   c000f829 <Krnl::setBootMessage(char const*)>
c000e8d9:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e8e0:	e8 ea 0e 00 00       	call   c000f7cf <malloc>
c000e8e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e8ec:	89 c3                	mov    ebx,eax
c000e8ee:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c000e8f4:	68 a8 a1 02 c0       	push   0xc002a1a8
c000e8f9:	6a 01                	push   0x1
c000e8fb:	50                   	push   eax
c000e8fc:	e8 87 ee 00 00       	call   c001d788 <Process::Process(bool, char const*, Process*, char**)>
c000e901:	83 c4 20             	add    esp,0x20
c000e904:	68 ff 00 00 00       	push   0xff
c000e909:	6a 00                	push   0x0
c000e90b:	68 65 f1 00 c0       	push   0xc000f165
c000e910:	53                   	push   ebx
c000e911:	e8 6a f0 00 00       	call   c001d980 <Process::createThread(void (*)(void*), void*, int)>
c000e916:	6a 7a                	push   0x7a
c000e918:	6a 00                	push   0x0
c000e91a:	68 73 e3 01 c0       	push   0xc001e373
c000e91f:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c000e925:	e8 56 f0 00 00       	call   c001d980 <Process::createThread(void (*)(void*), void*, int)>
c000e92a:	83 c4 14             	add    esp,0x14
c000e92d:	a3 08 f4 02 c0       	mov    ds:0xc002f408,eax
c000e932:	68 8c a2 02 c0       	push   0xc002a28c
c000e937:	c6 05 2d df 02 c0 01 	mov    BYTE PTR ds:0xc002df2d,0x1
c000e93e:	e8 e6 0e 00 00       	call   c000f829 <Krnl::setBootMessage(char const*)>
c000e943:	e8 d7 fd 00 00       	call   c001e71f <Vm::initialise8086()>
c000e948:	e8 65 42 00 00       	call   c0012bb2 <Fs::initVFS()>
c000e94d:	c7 04 24 b5 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1b5
c000e954:	e8 d0 0e 00 00       	call   c000f829 <Krnl::setBootMessage(char const*)>
c000e959:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c000e95e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e964:	8b 10                	mov    edx,DWORD PTR [eax]
c000e966:	6a 00                	push   0x0
c000e968:	6a 00                	push   0x0
c000e96a:	6a 00                	push   0x0
c000e96c:	50                   	push   eax
c000e96d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e970:	83 c4 14             	add    esp,0x14
c000e973:	68 8c a2 02 c0       	push   0xc002a28c
c000e978:	e8 ac 0e 00 00       	call   c000f829 <Krnl::setBootMessage(char const*)>
c000e97d:	e8 8e d6 00 00       	call   c001c010 <Sys::loadSyscalls()>
c000e982:	e8 83 b5 00 00       	call   c0019f0a <Krnl::loadSystemEnv()>
c000e987:	83 c4 0c             	add    esp,0xc
c000e98a:	6a 3a                	push   0x3a
c000e98c:	68 cf a1 02 c0       	push   0xc002a1cf
c000e991:	68 d8 a1 02 c0       	push   0xc002a1d8
c000e996:	e8 34 c4 00 00       	call   c001adcf <Reg::readIntWithDefault(char*, char*, int)>
c000e99b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e99e:	e8 ff 4c 00 00       	call   c00136a2 <User::loadClockSettings(int)>
c000e9a3:	c7 04 24 b0 a2 02 c0 	mov    DWORD PTR [esp],0xc002a2b0
c000e9aa:	e8 7a 0e 00 00       	call   c000f829 <Krnl::setBootMessage(char const*)>
c000e9af:	58                   	pop    eax
c000e9b0:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c000e9b5:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e9bb:	e8 ea 53 00 00       	call   c0013daa <Device::loadDriversForAll()>
c000e9c0:	c7 04 24 e0 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1e0
c000e9c7:	e8 5d 0e 00 00       	call   c000f829 <Krnl::setBootMessage(char const*)>
c000e9cc:	e8 a1 b0 00 00       	call   c0019a72 <Krnl::startCPUs()>
c000e9d1:	c7 04 24 fa a1 02 c0 	mov    DWORD PTR [esp],0xc002a1fa
c000e9d8:	e8 4c 0e 00 00       	call   c000f829 <Krnl::setBootMessage(char const*)>
c000e9dd:	5a                   	pop    edx
c000e9de:	8b 1d 28 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df28
c000e9e4:	59                   	pop    ecx
c000e9e5:	6a 01                	push   0x1
c000e9e7:	68 0b a2 02 c0       	push   0xc002a20b
c000e9ec:	e8 ef e7 00 00       	call   c001d1e0 <Thr::loadDLL(char const*, bool)>
c000e9f1:	5a                   	pop    edx
c000e9f2:	59                   	pop    ecx
c000e9f3:	53                   	push   ebx
c000e9f4:	50                   	push   eax
c000e9f5:	e8 17 ea 00 00       	call   c001d411 <Thr::executeDLL(unsigned long, void*)>
c000e9fa:	83 c4 10             	add    esp,0x10
c000e9fd:	83 ec 0c             	sub    esp,0xc
c000ea00:	6a 02                	push   0x2
c000ea02:	e8 74 f3 00 00       	call   c001dd7b <blockTask(TaskState)>
c000ea07:	83 c4 10             	add    esp,0x10
c000ea0a:	eb f1                	jmp    c000e9fd <Krnl::firstTask()+0x133>

c000ea0c <Computer::Computer()>:
c000ea0c:	83 ec 0c             	sub    esp,0xc
c000ea0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea13:	83 ec 08             	sub    esp,0x8
c000ea16:	68 27 a2 02 c0       	push   0xc002a227
c000ea1b:	50                   	push   eax
c000ea1c:	e8 43 54 00 00       	call   c0013e64 <Device::Device(char const*)>
c000ea21:	83 c4 10             	add    esp,0x10
c000ea24:	ba fc a2 02 c0       	mov    edx,0xc002a2fc
c000ea29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea2d:	89 10                	mov    DWORD PTR [eax],edx
c000ea2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea33:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ea3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea41:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ea4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea4f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ea55:	83 ca 04             	or     edx,0x4
c000ea58:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ea5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea68:	0f b6 d0             	movzx  edx,al
c000ea6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea6f:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ea76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea80:	0f b6 d0             	movzx  edx,al
c000ea83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea87:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ea8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea90:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea96:	8d 50 01             	lea    edx,[eax+0x1]
c000ea99:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ea9d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eaa3:	0f b6 d0             	movzx  edx,al
c000eaa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaaa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eaae:	83 e1 3f             	and    ecx,0x3f
c000eab1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eabf:	0f b6 d0             	movzx  edx,al
c000eac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eac6:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000eacd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ead7:	0f b6 d0             	movzx  edx,al
c000eada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eade:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eae7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaed:	8d 50 01             	lea    edx,[eax+0x1]
c000eaf0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eaf4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eafa:	0f b6 d0             	movzx  edx,al
c000eafd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb01:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb05:	83 e1 3f             	and    ecx,0x3f
c000eb08:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb16:	0f b6 d0             	movzx  edx,al
c000eb19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1d:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000eb24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb2e:	0f b6 d0             	movzx  edx,al
c000eb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb35:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb44:	8d 50 01             	lea    edx,[eax+0x1]
c000eb47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb51:	0f b6 d0             	movzx  edx,al
c000eb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb5c:	83 e1 3f             	and    ecx,0x3f
c000eb5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb63:	90                   	nop
c000eb64:	83 c4 0c             	add    esp,0xc
c000eb67:	c3                   	ret    

c000eb68 <Computer::setBootMessage(char const*)>:
c000eb68:	c3                   	ret    
c000eb69:	90                   	nop

c000eb6a <Computer::detectFeatures()>:
c000eb6a:	55                   	push   ebp
c000eb6b:	57                   	push   edi
c000eb6c:	56                   	push   esi
c000eb6d:	53                   	push   ebx
c000eb6e:	83 ec 1c             	sub    esp,0x1c
c000eb71:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000eb75:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000eb7f:	e8 60 17 ff ff       	call   c00002e4 <detectCPUID>
c000eb84:	85 c0                	test   eax,eax
c000eb86:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb8c:	0f 95 c2             	setne  dl
c000eb8f:	83 e0 fd             	and    eax,0xfffffffd
c000eb92:	d1 e2                	shl    edx,1
c000eb94:	09 d0                	or     eax,edx
c000eb96:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb9c:	a8 02                	test   al,0x2
c000eb9e:	75 46                	jne    c000ebe6 <Computer::detectFeatures()+0x7c>
c000eba0:	f6 05 41 df 02 c0 04 	test   BYTE PTR ds:0xc002df41,0x4
c000eba7:	74 07                	je     c000ebb0 <Computer::detectFeatures()+0x46>
c000eba9:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000ebb0:	e8 d1 7b 01 00       	call   c0026786 <x87Detect>
c000ebb5:	83 e0 01             	and    eax,0x1
c000ebb8:	c1 e0 04             	shl    eax,0x4
c000ebbb:	88 c2                	mov    dl,al
c000ebbd:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ebc3:	83 e0 ef             	and    eax,0xffffffef
c000ebc6:	09 d0                	or     eax,edx
c000ebc8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ebce:	a8 10                	test   al,0x10
c000ebd0:	0f 85 2a 01 00 00    	jne    c000ed00 <Computer::detectFeatures()+0x196>
c000ebd6:	84 c0                	test   al,al
c000ebd8:	0f 88 45 01 00 00    	js     c000ed23 <Computer::detectFeatures()+0x1b9>
c000ebde:	83 c4 1c             	add    esp,0x1c
c000ebe1:	5b                   	pop    ebx
c000ebe2:	5e                   	pop    esi
c000ebe3:	5f                   	pop    edi
c000ebe4:	5d                   	pop    ebp
c000ebe5:	c3                   	ret    
c000ebe6:	83 ec 0c             	sub    esp,0xc
c000ebe9:	6a 20                	push   0x20
c000ebeb:	e8 14 9e 00 00       	call   c0018a04 <CPU::cpuidCheckEDX(unsigned int)>
c000ebf0:	83 e0 01             	and    eax,0x1
c000ebf3:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ebfa:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec00:	83 e0 f7             	and    eax,0xfffffff7
c000ec03:	09 d0                	or     eax,edx
c000ec05:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec0b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000ec12:	e8 ed 9d 00 00       	call   c0018a04 <CPU::cpuidCheckEDX(unsigned int)>
c000ec17:	83 e0 01             	and    eax,0x1
c000ec1a:	88 c2                	mov    dl,al
c000ec1c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec22:	83 e0 fe             	and    eax,0xfffffffe
c000ec25:	09 d0                	or     eax,edx
c000ec27:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec2d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ec34:	e8 cb 9d 00 00       	call   c0018a04 <CPU::cpuidCheckEDX(unsigned int)>
c000ec39:	c1 e0 07             	shl    eax,0x7
c000ec3c:	88 c2                	mov    dl,al
c000ec3e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec44:	83 e0 7f             	and    eax,0x7f
c000ec47:	09 d0                	or     eax,edx
c000ec49:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec4f:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ec56:	e8 a9 9d 00 00       	call   c0018a04 <CPU::cpuidCheckEDX(unsigned int)>
c000ec5b:	83 c4 10             	add    esp,0x10
c000ec5e:	83 e0 01             	and    eax,0x1
c000ec61:	c1 e0 05             	shl    eax,0x5
c000ec64:	88 c2                	mov    dl,al
c000ec66:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec6c:	83 e0 df             	and    eax,0xffffffdf
c000ec6f:	09 d0                	or     eax,edx
c000ec71:	f7 05 40 df 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002df40,0x401
c000ec7b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec81:	0f 84 c2 00 00 00    	je     c000ed49 <Computer::detectFeatures()+0x1df>
c000ec87:	83 e0 fe             	and    eax,0xfffffffe
c000ec8a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec90:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec96:	88 c2                	mov    dl,al
c000ec98:	83 e2 09             	and    edx,0x9
c000ec9b:	fe ca                	dec    dl
c000ec9d:	75 09                	jne    c000eca8 <Computer::detectFeatures()+0x13e>
c000ec9f:	83 e0 fe             	and    eax,0xfffffffe
c000eca2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eca8:	83 ec 0c             	sub    esp,0xc
c000ecab:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ecaf:	50                   	push   eax
c000ecb0:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ecb4:	55                   	push   ebp
c000ecb5:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ecb9:	57                   	push   edi
c000ecba:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ecbe:	56                   	push   esi
c000ecbf:	68 00 00 00 80       	push   0x80000000
c000ecc4:	e8 b7 9c 00 00       	call   c0018980 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecc9:	83 c4 20             	add    esp,0x20
c000eccc:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ecd3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ecd7:	0f 86 c3 fe ff ff    	jbe    c000eba0 <Computer::detectFeatures()+0x36>
c000ecdd:	83 ec 0c             	sub    esp,0xc
c000ece0:	50                   	push   eax
c000ece1:	55                   	push   ebp
c000ece2:	57                   	push   edi
c000ece3:	56                   	push   esi
c000ece4:	68 01 00 00 80       	push   0x80000001
c000ece9:	e8 92 9c 00 00       	call   c0018980 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecee:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ecf8:	83 c4 20             	add    esp,0x20
c000ecfb:	e9 a0 fe ff ff       	jmp    c000eba0 <Computer::detectFeatures()+0x36>
c000ed00:	e8 3b 7a 01 00       	call   c0026740 <absolutelyNoChanceInHell>
c000ed05:	88 c2                	mov    dl,al
c000ed07:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed0d:	c1 e2 07             	shl    edx,0x7
c000ed10:	83 e0 7f             	and    eax,0x7f
c000ed13:	09 d0                	or     eax,edx
c000ed15:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed1b:	84 c0                	test   al,al
c000ed1d:	0f 89 bb fe ff ff    	jns    c000ebde <Computer::detectFeatures()+0x74>
c000ed23:	e8 f8 79 01 00       	call   c0026720 <avxDetect>
c000ed28:	83 e0 01             	and    eax,0x1
c000ed2b:	c1 e0 05             	shl    eax,0x5
c000ed2e:	88 c2                	mov    dl,al
c000ed30:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ed36:	83 e0 df             	and    eax,0xffffffdf
c000ed39:	09 d0                	or     eax,edx
c000ed3b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ed41:	83 c4 1c             	add    esp,0x1c
c000ed44:	5b                   	pop    ebx
c000ed45:	5e                   	pop    esi
c000ed46:	5f                   	pop    edi
c000ed47:	5d                   	pop    ebp
c000ed48:	c3                   	ret    
c000ed49:	83 ec 0c             	sub    esp,0xc
c000ed4c:	68 00 02 00 00       	push   0x200
c000ed51:	e8 ae 9c 00 00       	call   c0018a04 <CPU::cpuidCheckEDX(unsigned int)>
c000ed56:	83 c4 10             	add    esp,0x10
c000ed59:	83 e0 01             	and    eax,0x1
c000ed5c:	88 c2                	mov    dl,al
c000ed5e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed64:	83 e0 fe             	and    eax,0xfffffffe
c000ed67:	09 d0                	or     eax,edx
c000ed69:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed6f:	e9 1c ff ff ff       	jmp    c000ec90 <Computer::detectFeatures()+0x126>

c000ed74 <Computer::displayFeatures()>:
c000ed74:	c3                   	ret    
c000ed75:	90                   	nop

c000ed76 <Computer::rdmsr(unsigned int)>:
c000ed76:	83 ec 0c             	sub    esp,0xc
c000ed79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed7d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ed84:	74 0a                	je     c000ed90 <Computer::rdmsr(unsigned int)+0x1a>
c000ed86:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ed8a:	0f 32                	rdmsr  
c000ed8c:	83 c4 0c             	add    esp,0xc
c000ed8f:	c3                   	ret    
c000ed90:	83 ec 0c             	sub    esp,0xc
c000ed93:	68 30 a2 02 c0       	push   0xc002a230
c000ed98:	e8 76 b2 00 00       	call   c001a013 <Krnl::panic(char const*)>
c000ed9d:	83 c4 10             	add    esp,0x10
c000eda0:	eb e4                	jmp    c000ed86 <Computer::rdmsr(unsigned int)+0x10>

c000eda2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eda2:	57                   	push   edi
c000eda3:	56                   	push   esi
c000eda4:	52                   	push   edx
c000eda5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eda9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000edad:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000edb1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edb8:	74 0e                	je     c000edc8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000edba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edbe:	89 f0                	mov    eax,esi
c000edc0:	89 fa                	mov    edx,edi
c000edc2:	0f 30                	wrmsr  
c000edc4:	58                   	pop    eax
c000edc5:	5e                   	pop    esi
c000edc6:	5f                   	pop    edi
c000edc7:	c3                   	ret    
c000edc8:	83 ec 0c             	sub    esp,0xc
c000edcb:	68 36 a2 02 c0       	push   0xc002a236
c000edd0:	e8 3e b2 00 00       	call   c001a013 <Krnl::panic(char const*)>
c000edd5:	83 c4 10             	add    esp,0x10
c000edd8:	eb e0                	jmp    c000edba <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000edda <Computer::nmiEnabled()>:
c000edda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edde:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ede4:	c3                   	ret    
c000ede5:	90                   	nop

c000ede6 <Computer::readCMOS(unsigned char)>:
c000ede6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edea:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000edf1:	19 c0                	sbb    eax,eax
c000edf3:	83 e0 80             	and    eax,0xffffff80
c000edf6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000edfa:	e6 70                	out    0x70,al
c000edfc:	e4 71                	in     al,0x71
c000edfe:	c3                   	ret    
c000edff:	90                   	nop

c000ee00 <Computer::enableNMI(bool)>:
c000ee00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee0e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee16:	eb ce                	jmp    c000ede6 <Computer::readCMOS(unsigned char)>

c000ee18 <Computer::open(int, int, void*)>:
c000ee18:	56                   	push   esi
c000ee19:	53                   	push   ebx
c000ee1a:	83 ec 10             	sub    esp,0x10
c000ee1d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee21:	68 d0 a2 02 c0       	push   0xc002a2d0
c000ee26:	e8 fe 09 00 00       	call   c000f829 <Krnl::setBootMessage(char const*)>
c000ee2b:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ee32:	f6 05 40 df 02 c0 04 	test   BYTE PTR ds:0xc002df40,0x4
c000ee39:	0f 94 05 60 ce 02 c0 	sete   BYTE PTR ds:0xc002ce60
c000ee40:	e8 8a 09 00 00       	call   c000f7cf <malloc>
c000ee45:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee48:	89 c6                	mov    esi,eax
c000ee4a:	e8 29 8e 00 00       	call   c0017c78 <ACPI::ACPI()>
c000ee4f:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ee55:	58                   	pop    eax
c000ee56:	5a                   	pop    edx
c000ee57:	56                   	push   esi
c000ee58:	53                   	push   ebx
c000ee59:	e8 02 4e 00 00       	call   c0013c60 <Device::addChild(Device*)>
c000ee5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee61:	e8 04 fd ff ff       	call   c000eb6a <Computer::detectFeatures()>
c000ee66:	59                   	pop    ecx
c000ee67:	5e                   	pop    esi
c000ee68:	6a 01                	push   0x1
c000ee6a:	53                   	push   ebx
c000ee6b:	e8 90 ff ff ff       	call   c000ee00 <Computer::enableNMI(bool)>
c000ee70:	c7 04 24 e0 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1e0
c000ee77:	e8 ad 09 00 00       	call   c000f829 <Krnl::setBootMessage(char const*)>
c000ee7c:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ee83:	e8 47 09 00 00       	call   c000f7cf <malloc>
c000ee88:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee8b:	89 c6                	mov    esi,eax
c000ee8d:	e8 2a 9c 00 00       	call   c0018abc <CPU::CPU()>
c000ee92:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ee98:	58                   	pop    eax
c000ee99:	5a                   	pop    edx
c000ee9a:	56                   	push   esi
c000ee9b:	53                   	push   ebx
c000ee9c:	e8 bf 4d 00 00       	call   c0013c60 <Device::addChild(Device*)>
c000eea1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eea7:	8b 10                	mov    edx,DWORD PTR [eax]
c000eea9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eead:	6a 00                	push   0x0
c000eeaf:	6a 00                	push   0x0
c000eeb1:	50                   	push   eax
c000eeb2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eeb5:	83 c4 20             	add    esp,0x20
c000eeb8:	e8 3b 53 00 00       	call   c00141f8 <setupFPU()>
c000eebd:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000eec3:	85 c0                	test   eax,eax
c000eec5:	74 1f                	je     c000eee6 <Computer::open(int, int, void*)+0xce>
c000eec7:	83 ec 08             	sub    esp,0x8
c000eeca:	50                   	push   eax
c000eecb:	53                   	push   ebx
c000eecc:	e8 8f 4d 00 00       	call   c0013c60 <Device::addChild(Device*)>
c000eed1:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eed7:	8b 10                	mov    edx,DWORD PTR [eax]
c000eed9:	6a 00                	push   0x0
c000eedb:	6a 00                	push   0x0
c000eedd:	6a 00                	push   0x0
c000eedf:	50                   	push   eax
c000eee0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eee3:	83 c4 20             	add    esp,0x20
c000eee6:	83 ec 0c             	sub    esp,0xc
c000eee9:	68 3c a2 02 c0       	push   0xc002a23c
c000eeee:	e8 36 09 00 00       	call   c000f829 <Krnl::setBootMessage(char const*)>
c000eef3:	c7 04 24 ca e8 00 c0 	mov    DWORD PTR [esp],0xc000e8ca
c000eefa:	e8 a3 eb 00 00       	call   c001daa2 <setupMultitasking(void (*)())>
c000eeff:	83 c4 14             	add    esp,0x14
c000ef02:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef07:	5b                   	pop    ebx
c000ef08:	5e                   	pop    esi
c000ef09:	c3                   	ret    

c000ef0a <Computer::disableNMI()>:
c000ef0a:	6a 00                	push   0x0
c000ef0c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef10:	e8 eb fe ff ff       	call   c000ee00 <Computer::enableNMI(bool)>
c000ef15:	58                   	pop    eax
c000ef16:	5a                   	pop    edx
c000ef17:	c3                   	ret    

c000ef18 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef1c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef23:	19 c0                	sbb    eax,eax
c000ef25:	83 e0 80             	and    eax,0xffffff80
c000ef28:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef2c:	e6 70                	out    0x70,al
c000ef2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef32:	e6 71                	out    0x71,al
c000ef34:	c3                   	ret    
c000ef35:	90                   	nop

c000ef36 <Computer::handleNMI()>:
c000ef36:	56                   	push   esi
c000ef37:	53                   	push   ebx
c000ef38:	83 ec 10             	sub    esp,0x10
c000ef3b:	e4 92                	in     al,0x92
c000ef3d:	89 c6                	mov    esi,eax
c000ef3f:	e4 61                	in     al,0x61
c000ef41:	68 57 a2 02 c0       	push   0xc002a257
c000ef46:	88 c3                	mov    bl,al
c000ef48:	e8 da 38 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c000ef4d:	83 c4 10             	add    esp,0x10
c000ef50:	83 e6 10             	and    esi,0x10
c000ef53:	75 0d                	jne    c000ef62 <Computer::handleNMI()+0x2c>
c000ef55:	f6 c3 40             	test   bl,0x40
c000ef58:	75 1d                	jne    c000ef77 <Computer::handleNMI()+0x41>
c000ef5a:	84 db                	test   bl,bl
c000ef5c:	78 2d                	js     c000ef8b <Computer::handleNMI()+0x55>
c000ef5e:	58                   	pop    eax
c000ef5f:	5b                   	pop    ebx
c000ef60:	5e                   	pop    esi
c000ef61:	c3                   	ret    
c000ef62:	83 ec 0c             	sub    esp,0xc
c000ef65:	68 68 a2 02 c0       	push   0xc002a268
c000ef6a:	e8 a4 b0 00 00       	call   c001a013 <Krnl::panic(char const*)>
c000ef6f:	83 c4 10             	add    esp,0x10
c000ef72:	f6 c3 40             	test   bl,0x40
c000ef75:	74 e3                	je     c000ef5a <Computer::handleNMI()+0x24>
c000ef77:	83 ec 0c             	sub    esp,0xc
c000ef7a:	68 75 a2 02 c0       	push   0xc002a275
c000ef7f:	e8 8f b0 00 00       	call   c001a013 <Krnl::panic(char const*)>
c000ef84:	83 c4 10             	add    esp,0x10
c000ef87:	84 db                	test   bl,bl
c000ef89:	79 d3                	jns    c000ef5e <Computer::handleNMI()+0x28>
c000ef8b:	c7 44 24 10 7f a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a27f
c000ef93:	5a                   	pop    edx
c000ef94:	5b                   	pop    ebx
c000ef95:	5e                   	pop    esi
c000ef96:	e9 78 b0 00 00       	jmp    c001a013 <Krnl::panic(char const*)>
c000ef9b:	90                   	nop

c000ef9c <Computer::setDiskActivityLight(int, bool)>:
c000ef9c:	56                   	push   esi
c000ef9d:	53                   	push   ebx
c000ef9e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000efa2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000efa7:	77 1b                	ja     c000efc4 <Computer::setDiskActivityLight(int, bool)+0x28>
c000efa9:	e4 92                	in     al,0x92
c000efab:	bb 40 00 00 00       	mov    ebx,0x40
c000efb0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000efb4:	89 da                	mov    edx,ebx
c000efb6:	d3 e2                	shl    edx,cl
c000efb8:	89 f1                	mov    ecx,esi
c000efba:	f7 d2                	not    edx
c000efbc:	d3 e3                	shl    ebx,cl
c000efbe:	21 d0                	and    eax,edx
c000efc0:	09 d8                	or     eax,ebx
c000efc2:	e6 92                	out    0x92,al
c000efc4:	5b                   	pop    ebx
c000efc5:	5e                   	pop    esi
c000efc6:	c3                   	ret    
c000efc7:	90                   	nop

c000efc8 <GDTEntry::setBase(unsigned int)>:
c000efc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efcc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000efd0:	89 c1                	mov    ecx,eax
c000efd2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000efd6:	c1 e9 10             	shr    ecx,0x10
c000efd9:	c1 e8 18             	shr    eax,0x18
c000efdc:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000efdf:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000efe2:	c3                   	ret    
c000efe3:	90                   	nop

c000efe4 <GDTEntry::setLimit(unsigned int)>:
c000efe4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000efe8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efec:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000efef:	66 89 01             	mov    WORD PTR [ecx],ax
c000eff2:	83 e2 f0             	and    edx,0xfffffff0
c000eff5:	c1 e8 10             	shr    eax,0x10
c000eff8:	83 e0 0f             	and    eax,0xf
c000effb:	09 d0                	or     eax,edx
c000effd:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f000:	c3                   	ret    
c000f001:	90                   	nop

c000f002 <GDT::GDT()>:
c000f002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f006:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f00c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f010:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f016:	90                   	nop
c000f017:	c3                   	ret    

c000f018 <GDT::addEntry(GDTEntry)>:
c000f018:	53                   	push   ebx
c000f019:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f01d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f021:	8b 02                	mov    eax,DWORD PTR [edx]
c000f023:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f027:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f02b:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f02f:	8d 48 01             	lea    ecx,[eax+0x1]
c000f032:	c1 e0 03             	shl    eax,0x3
c000f035:	89 0a                	mov    DWORD PTR [edx],ecx
c000f037:	5b                   	pop    ebx
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDT::getNumberOfEntries()>:
c000f03a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f03e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f040:	c3                   	ret    
c000f041:	90                   	nop

c000f042 <GDT::flush()>:
c000f042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f046:	8b 10                	mov    edx,DWORD PTR [eax]
c000f048:	83 c0 04             	add    eax,0x4
c000f04b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f052:	a3 32 df 02 c0       	mov    ds:0xc002df32,eax
c000f057:	66 89 15 30 df 02 c0 	mov    WORD PTR ds:0xc002df30,dx
c000f05e:	e9 ed 13 ff ff       	jmp    c0000450 <loadGDT>
c000f063:	90                   	nop

c000f064 <GDT::setup()>:
c000f064:	55                   	push   ebp
c000f065:	57                   	push   edi
c000f066:	56                   	push   esi
c000f067:	53                   	push   ebx
c000f068:	83 ec 3c             	sub    esp,0x3c
c000f06b:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f06f:	6a 00                	push   0x0
c000f071:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f075:	53                   	push   ebx
c000f076:	e8 4d ff ff ff       	call   c000efc8 <GDTEntry::setBase(unsigned int)>
c000f07b:	6a 00                	push   0x0
c000f07d:	53                   	push   ebx
c000f07e:	e8 61 ff ff ff       	call   c000efe4 <GDTEntry::setLimit(unsigned int)>
c000f083:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f08b:	6a 00                	push   0x0
c000f08d:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f091:	53                   	push   ebx
c000f092:	e8 31 ff ff ff       	call   c000efc8 <GDTEntry::setBase(unsigned int)>
c000f097:	68 ff ff ff 00       	push   0xffffff
c000f09c:	53                   	push   ebx
c000f09d:	e8 42 ff ff ff       	call   c000efe4 <GDTEntry::setLimit(unsigned int)>
c000f0a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0a6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f0ab:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f0b0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0b4:	83 c4 20             	add    esp,0x20
c000f0b7:	6a 00                	push   0x0
c000f0b9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f0bd:	53                   	push   ebx
c000f0be:	e8 05 ff ff ff       	call   c000efc8 <GDTEntry::setBase(unsigned int)>
c000f0c3:	68 ff ff ff 00       	push   0xffffff
c000f0c8:	53                   	push   ebx
c000f0c9:	e8 16 ff ff ff       	call   c000efe4 <GDTEntry::setLimit(unsigned int)>
c000f0ce:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f0d2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f0d6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f0da:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f0de:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f0e2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f0e7:	0d 00 92 c0 00       	or     eax,0xc09200
c000f0ec:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f0f0:	89 d8                	mov    eax,ebx
c000f0f2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f0f6:	80 cc 60             	or     ah,0x60
c000f0f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f0fd:	83 c4 0c             	add    esp,0xc
c000f100:	89 f8                	mov    eax,edi
c000f102:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f106:	80 cc 60             	or     ah,0x60
c000f109:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f10d:	89 c7                	mov    edi,eax
c000f10f:	55                   	push   ebp
c000f110:	e8 03 ff ff ff       	call   c000f018 <GDT::addEntry(GDTEntry)>
c000f115:	83 c4 0c             	add    esp,0xc
c000f118:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f11c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f120:	55                   	push   ebp
c000f121:	e8 f2 fe ff ff       	call   c000f018 <GDT::addEntry(GDTEntry)>
c000f126:	83 c4 0c             	add    esp,0xc
c000f129:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f12d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f131:	55                   	push   ebp
c000f132:	e8 e1 fe ff ff       	call   c000f018 <GDT::addEntry(GDTEntry)>
c000f137:	83 c4 0c             	add    esp,0xc
c000f13a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f13e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f142:	53                   	push   ebx
c000f143:	51                   	push   ecx
c000f144:	55                   	push   ebp
c000f145:	e8 ce fe ff ff       	call   c000f018 <GDT::addEntry(GDTEntry)>
c000f14a:	83 c4 0c             	add    esp,0xc
c000f14d:	57                   	push   edi
c000f14e:	56                   	push   esi
c000f14f:	55                   	push   ebp
c000f150:	e8 c3 fe ff ff       	call   c000f018 <GDT::addEntry(GDTEntry)>
c000f155:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f158:	e8 e5 fe ff ff       	call   c000f042 <GDT::flush()>
c000f15d:	83 c4 4c             	add    esp,0x4c
c000f160:	5b                   	pop    ebx
c000f161:	5e                   	pop    esi
c000f162:	5f                   	pop    edi
c000f163:	5d                   	pop    ebp
c000f164:	c3                   	ret    

c000f165 <idleFunction(void*)>:
c000f165:	53                   	push   ebx
c000f166:	83 ec 08             	sub    esp,0x8
c000f169:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c000f16e:	48                   	dec    eax
c000f16f:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c000f174:	75 01                	jne    c000f177 <idleFunction(void*)+0x12>
c000f176:	fb                   	sti    
c000f177:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c000f17c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f182:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f189:	74 3c                	je     c000f1c7 <idleFunction(void*)+0x62>
c000f18b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f192:	74 33                	je     c000f1c7 <idleFunction(void*)+0x62>
c000f194:	31 db                	xor    ebx,ebx
c000f196:	52                   	push   edx
c000f197:	52                   	push   edx
c000f198:	68 e1 00 00 00       	push   0xe1
c000f19d:	50                   	push   eax
c000f19e:	e8 d3 fb ff ff       	call   c000ed76 <Computer::rdmsr(unsigned int)>
c000f1a3:	53                   	push   ebx
c000f1a4:	83 e0 02             	and    eax,0x2
c000f1a7:	50                   	push   eax
c000f1a8:	68 e1 00 00 00       	push   0xe1
c000f1ad:	ff 35 28 df 02 c0    	push   DWORD PTR ds:0xc002df28
c000f1b3:	e8 ea fb ff ff       	call   c000eda2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f1b8:	83 c4 20             	add    esp,0x20
c000f1bb:	e8 bf 10 ff ff       	call   c000027f <doTPAUSE>
c000f1c0:	e8 0b 96 01 00       	call   c00287d0 <idleCommon()>
c000f1c5:	eb f4                	jmp    c000f1bb <idleFunction(void*)+0x56>
c000f1c7:	fb                   	sti    
c000f1c8:	f4                   	hlt    
c000f1c9:	e8 02 96 01 00       	call   c00287d0 <idleCommon()>
c000f1ce:	eb f7                	jmp    c000f1c7 <idleFunction(void*)+0x62>

c000f1d0 <IDTEntry::IDTEntry(bool)>:
c000f1d0:	83 ec 04             	sub    esp,0x4
c000f1d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f1d7:	88 04 24             	mov    BYTE PTR [esp],al
c000f1da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f1de:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f1e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f1e8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f1ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f1f0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f1f3:	83 e2 f0             	and    edx,0xfffffff0
c000f1f6:	83 ca 0e             	or     edx,0xe
c000f1f9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f1fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f200:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f203:	83 e2 ef             	and    edx,0xffffffef
c000f206:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f209:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f20d:	74 04                	je     c000f213 <IDTEntry::IDTEntry(bool)+0x43>
c000f20f:	b2 03                	mov    dl,0x3
c000f211:	eb 02                	jmp    c000f215 <IDTEntry::IDTEntry(bool)+0x45>
c000f213:	b2 00                	mov    dl,0x0
c000f215:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f219:	83 e2 03             	and    edx,0x3
c000f21c:	88 d1                	mov    cl,dl
c000f21e:	c1 e1 05             	shl    ecx,0x5
c000f221:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f224:	83 e2 9f             	and    edx,0xffffff9f
c000f227:	09 ca                	or     edx,ecx
c000f229:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f22c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f230:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f233:	83 ca 80             	or     edx,0xffffff80
c000f236:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f239:	90                   	nop
c000f23a:	83 c4 04             	add    esp,0x4
c000f23d:	c3                   	ret    

c000f23e <IDTEntry::setOffset(unsigned int)>:
c000f23e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 89 02             	mov    WORD PTR [edx],ax
c000f249:	c1 e8 10             	shr    eax,0x10
c000f24c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f250:	c3                   	ret    
c000f251:	90                   	nop

c000f252 <IDT::IDT()>:
c000f252:	90                   	nop
c000f253:	c3                   	ret    

c000f254 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f258:	83 c0 30             	add    eax,0x30
c000f25b:	c3                   	ret    

c000f25c <IDT::addEntry(IDTEntry, int)>:
c000f25c:	53                   	push   ebx
c000f25d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f261:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f265:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f269:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f26d:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f270:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f274:	5b                   	pop    ebx
c000f275:	c3                   	ret    

c000f276 <IDT::addEntry(int, void (*)(), bool)>:
c000f276:	53                   	push   ebx
c000f277:	83 ec 10             	sub    esp,0x10
c000f27a:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f27f:	50                   	push   eax
c000f280:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f284:	53                   	push   ebx
c000f285:	e8 46 ff ff ff       	call   c000f1d0 <IDTEntry::IDTEntry(bool)>
c000f28a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f28e:	53                   	push   ebx
c000f28f:	e8 aa ff ff ff       	call   c000f23e <IDTEntry::setOffset(unsigned int)>
c000f294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f298:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f29c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f2a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f2a4:	e8 b3 ff ff ff       	call   c000f25c <IDT::addEntry(IDTEntry, int)>
c000f2a9:	83 c4 30             	add    esp,0x30
c000f2ac:	5b                   	pop    ebx
c000f2ad:	c3                   	ret    

c000f2ae <IDT::flush()>:
c000f2ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2b2:	66 c7 05 38 df 02 c0 ff 07 	mov    WORD PTR ds:0xc002df38,0x7ff
c000f2bb:	a3 3a df 02 c0       	mov    ds:0xc002df3a,eax
c000f2c0:	0f 01 1d 38 df 02 c0 	lidtd  ds:0xc002df38
c000f2c7:	c3                   	ret    

c000f2c8 <IDT::setup()>:
c000f2c8:	57                   	push   edi
c000f2c9:	56                   	push   esi
c000f2ca:	53                   	push   ebx
c000f2cb:	83 ec 10             	sub    esp,0x10
c000f2ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f2d2:	6a 00                	push   0x0
c000f2d4:	68 70 04 00 c0       	push   0xc0000470
c000f2d9:	6a 00                	push   0x0
c000f2db:	53                   	push   ebx
c000f2dc:	e8 95 ff ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f2e1:	6a 00                	push   0x0
c000f2e3:	68 80 04 00 c0       	push   0xc0000480
c000f2e8:	6a 01                	push   0x1
c000f2ea:	53                   	push   ebx
c000f2eb:	e8 86 ff ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f2f0:	83 c4 20             	add    esp,0x20
c000f2f3:	6a 00                	push   0x0
c000f2f5:	68 8a 04 00 c0       	push   0xc000048a
c000f2fa:	6a 02                	push   0x2
c000f2fc:	53                   	push   ebx
c000f2fd:	e8 74 ff ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f302:	6a 00                	push   0x0
c000f304:	68 94 04 00 c0       	push   0xc0000494
c000f309:	6a 03                	push   0x3
c000f30b:	53                   	push   ebx
c000f30c:	e8 65 ff ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f311:	83 c4 20             	add    esp,0x20
c000f314:	6a 00                	push   0x0
c000f316:	68 9e 04 00 c0       	push   0xc000049e
c000f31b:	6a 04                	push   0x4
c000f31d:	53                   	push   ebx
c000f31e:	e8 53 ff ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f323:	6a 00                	push   0x0
c000f325:	68 a8 04 00 c0       	push   0xc00004a8
c000f32a:	6a 05                	push   0x5
c000f32c:	53                   	push   ebx
c000f32d:	e8 44 ff ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f332:	83 c4 20             	add    esp,0x20
c000f335:	6a 00                	push   0x0
c000f337:	68 b2 04 00 c0       	push   0xc00004b2
c000f33c:	6a 06                	push   0x6
c000f33e:	53                   	push   ebx
c000f33f:	e8 32 ff ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f344:	6a 00                	push   0x0
c000f346:	68 bc 04 00 c0       	push   0xc00004bc
c000f34b:	6a 07                	push   0x7
c000f34d:	53                   	push   ebx
c000f34e:	e8 23 ff ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f353:	83 c4 20             	add    esp,0x20
c000f356:	6a 00                	push   0x0
c000f358:	68 c6 04 00 c0       	push   0xc00004c6
c000f35d:	6a 08                	push   0x8
c000f35f:	53                   	push   ebx
c000f360:	e8 11 ff ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f365:	6a 00                	push   0x0
c000f367:	68 ce 04 00 c0       	push   0xc00004ce
c000f36c:	6a 09                	push   0x9
c000f36e:	53                   	push   ebx
c000f36f:	e8 02 ff ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f374:	83 c4 20             	add    esp,0x20
c000f377:	6a 00                	push   0x0
c000f379:	68 d8 04 00 c0       	push   0xc00004d8
c000f37e:	6a 0a                	push   0xa
c000f380:	53                   	push   ebx
c000f381:	e8 f0 fe ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f386:	6a 00                	push   0x0
c000f388:	68 e0 04 00 c0       	push   0xc00004e0
c000f38d:	6a 0b                	push   0xb
c000f38f:	53                   	push   ebx
c000f390:	e8 e1 fe ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f395:	83 c4 20             	add    esp,0x20
c000f398:	6a 00                	push   0x0
c000f39a:	68 e8 04 00 c0       	push   0xc00004e8
c000f39f:	6a 0c                	push   0xc
c000f3a1:	53                   	push   ebx
c000f3a2:	e8 cf fe ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f3a7:	6a 00                	push   0x0
c000f3a9:	68 f0 04 00 c0       	push   0xc00004f0
c000f3ae:	6a 0d                	push   0xd
c000f3b0:	53                   	push   ebx
c000f3b1:	e8 c0 fe ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f3b6:	83 c4 20             	add    esp,0x20
c000f3b9:	6a 00                	push   0x0
c000f3bb:	68 f8 04 00 c0       	push   0xc00004f8
c000f3c0:	6a 0e                	push   0xe
c000f3c2:	53                   	push   ebx
c000f3c3:	e8 ae fe ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f3c8:	6a 00                	push   0x0
c000f3ca:	68 00 05 00 c0       	push   0xc0000500
c000f3cf:	6a 0f                	push   0xf
c000f3d1:	53                   	push   ebx
c000f3d2:	e8 9f fe ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f3d7:	83 c4 20             	add    esp,0x20
c000f3da:	6a 00                	push   0x0
c000f3dc:	68 0a 05 00 c0       	push   0xc000050a
c000f3e1:	6a 10                	push   0x10
c000f3e3:	53                   	push   ebx
c000f3e4:	e8 8d fe ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f3e9:	6a 00                	push   0x0
c000f3eb:	68 14 05 00 c0       	push   0xc0000514
c000f3f0:	6a 11                	push   0x11
c000f3f2:	53                   	push   ebx
c000f3f3:	e8 7e fe ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f3f8:	83 c4 20             	add    esp,0x20
c000f3fb:	6a 00                	push   0x0
c000f3fd:	68 1e 05 00 c0       	push   0xc000051e
c000f402:	6a 12                	push   0x12
c000f404:	53                   	push   ebx
c000f405:	e8 6c fe ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f40a:	6a 01                	push   0x1
c000f40c:	68 b8 05 00 c0       	push   0xc00005b8
c000f411:	6a 60                	push   0x60
c000f413:	53                   	push   ebx
c000f414:	e8 5d fe ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f419:	83 c4 20             	add    esp,0x20
c000f41c:	6a 00                	push   0x0
c000f41e:	68 bf 05 00 c0       	push   0xc00005bf
c000f423:	6a 20                	push   0x20
c000f425:	53                   	push   ebx
c000f426:	e8 4b fe ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f42b:	6a 00                	push   0x0
c000f42d:	68 aa 05 00 c0       	push   0xc00005aa
c000f432:	6a 21                	push   0x21
c000f434:	53                   	push   ebx
c000f435:	e8 3c fe ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f43a:	83 c4 20             	add    esp,0x20
c000f43d:	6a 00                	push   0x0
c000f43f:	68 b1 05 00 c0       	push   0xc00005b1
c000f444:	6a 22                	push   0x22
c000f446:	53                   	push   ebx
c000f447:	e8 2a fe ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f44c:	6a 00                	push   0x0
c000f44e:	68 28 05 00 c0       	push   0xc0000528
c000f453:	6a 23                	push   0x23
c000f455:	53                   	push   ebx
c000f456:	e8 1b fe ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f45b:	83 c4 20             	add    esp,0x20
c000f45e:	6a 00                	push   0x0
c000f460:	68 32 05 00 c0       	push   0xc0000532
c000f465:	6a 24                	push   0x24
c000f467:	53                   	push   ebx
c000f468:	e8 09 fe ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f46d:	6a 00                	push   0x0
c000f46f:	68 3c 05 00 c0       	push   0xc000053c
c000f474:	6a 25                	push   0x25
c000f476:	53                   	push   ebx
c000f477:	e8 fa fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f47c:	83 c4 20             	add    esp,0x20
c000f47f:	6a 00                	push   0x0
c000f481:	68 46 05 00 c0       	push   0xc0000546
c000f486:	6a 26                	push   0x26
c000f488:	53                   	push   ebx
c000f489:	e8 e8 fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f48e:	6a 00                	push   0x0
c000f490:	68 50 05 00 c0       	push   0xc0000550
c000f495:	6a 27                	push   0x27
c000f497:	53                   	push   ebx
c000f498:	e8 d9 fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f49d:	83 c4 20             	add    esp,0x20
c000f4a0:	6a 00                	push   0x0
c000f4a2:	68 5a 05 00 c0       	push   0xc000055a
c000f4a7:	6a 28                	push   0x28
c000f4a9:	53                   	push   ebx
c000f4aa:	e8 c7 fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f4af:	6a 00                	push   0x0
c000f4b1:	68 64 05 00 c0       	push   0xc0000564
c000f4b6:	6a 29                	push   0x29
c000f4b8:	53                   	push   ebx
c000f4b9:	e8 b8 fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f4be:	83 c4 20             	add    esp,0x20
c000f4c1:	6a 00                	push   0x0
c000f4c3:	68 6e 05 00 c0       	push   0xc000056e
c000f4c8:	6a 2a                	push   0x2a
c000f4ca:	53                   	push   ebx
c000f4cb:	e8 a6 fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f4d0:	6a 00                	push   0x0
c000f4d2:	68 78 05 00 c0       	push   0xc0000578
c000f4d7:	6a 2b                	push   0x2b
c000f4d9:	53                   	push   ebx
c000f4da:	e8 97 fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f4df:	83 c4 20             	add    esp,0x20
c000f4e2:	6a 00                	push   0x0
c000f4e4:	68 82 05 00 c0       	push   0xc0000582
c000f4e9:	6a 2c                	push   0x2c
c000f4eb:	53                   	push   ebx
c000f4ec:	e8 85 fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f4f1:	6a 00                	push   0x0
c000f4f3:	68 8c 05 00 c0       	push   0xc000058c
c000f4f8:	6a 2d                	push   0x2d
c000f4fa:	53                   	push   ebx
c000f4fb:	e8 76 fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f500:	83 c4 20             	add    esp,0x20
c000f503:	6a 00                	push   0x0
c000f505:	68 96 05 00 c0       	push   0xc0000596
c000f50a:	6a 2e                	push   0x2e
c000f50c:	53                   	push   ebx
c000f50d:	e8 64 fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f512:	6a 00                	push   0x0
c000f514:	68 a0 05 00 c0       	push   0xc00005a0
c000f519:	6a 2f                	push   0x2f
c000f51b:	53                   	push   ebx
c000f51c:	e8 55 fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f521:	83 c4 20             	add    esp,0x20
c000f524:	6a 00                	push   0x0
c000f526:	68 f6 05 00 c0       	push   0xc00005f6
c000f52b:	6a 30                	push   0x30
c000f52d:	53                   	push   ebx
c000f52e:	e8 43 fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f533:	6a 00                	push   0x0
c000f535:	68 00 06 00 c0       	push   0xc0000600
c000f53a:	6a 31                	push   0x31
c000f53c:	53                   	push   ebx
c000f53d:	e8 34 fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f542:	83 c4 20             	add    esp,0x20
c000f545:	6a 00                	push   0x0
c000f547:	68 0a 06 00 c0       	push   0xc000060a
c000f54c:	6a 32                	push   0x32
c000f54e:	53                   	push   ebx
c000f54f:	e8 22 fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f554:	6a 00                	push   0x0
c000f556:	68 14 06 00 c0       	push   0xc0000614
c000f55b:	6a 33                	push   0x33
c000f55d:	53                   	push   ebx
c000f55e:	e8 13 fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f563:	83 c4 20             	add    esp,0x20
c000f566:	6a 00                	push   0x0
c000f568:	68 1e 06 00 c0       	push   0xc000061e
c000f56d:	6a 34                	push   0x34
c000f56f:	53                   	push   ebx
c000f570:	e8 01 fd ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f575:	6a 00                	push   0x0
c000f577:	68 28 06 00 c0       	push   0xc0000628
c000f57c:	6a 35                	push   0x35
c000f57e:	53                   	push   ebx
c000f57f:	e8 f2 fc ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f584:	83 c4 20             	add    esp,0x20
c000f587:	6a 00                	push   0x0
c000f589:	68 32 06 00 c0       	push   0xc0000632
c000f58e:	6a 36                	push   0x36
c000f590:	53                   	push   ebx
c000f591:	e8 e0 fc ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f596:	6a 00                	push   0x0
c000f598:	68 3c 06 00 c0       	push   0xc000063c
c000f59d:	6a 37                	push   0x37
c000f59f:	53                   	push   ebx
c000f5a0:	e8 d1 fc ff ff       	call   c000f276 <IDT::addEntry(int, void (*)(), bool)>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	6a 03                	push   0x3
c000f5aa:	6a 02                	push   0x2
c000f5ac:	ff 35 90 e0 02 c0    	push   DWORD PTR ds:0xc002e090
c000f5b2:	e8 47 26 00 00       	call   c0011bfe <VAS::allocatePages(int, int)>
c000f5b7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f5be:	89 c6                	mov    esi,eax
c000f5c0:	e8 0a 02 00 00       	call   c000f7cf <malloc>
c000f5c5:	81 c6 00 20 00 00    	add    esi,0x2000
c000f5cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000f5ce:	89 c7                	mov    edi,eax
c000f5d0:	e8 c7 17 00 00       	call   c0010d9c <TSS::TSS()>
c000f5d5:	83 c4 0c             	add    esp,0xc
c000f5d8:	68 c6 04 00 c0       	push   0xc00004c6
c000f5dd:	56                   	push   esi
c000f5de:	57                   	push   edi
c000f5df:	e8 f8 17 00 00       	call   c0010ddc <TSS::setup(unsigned long, unsigned long)>
c000f5e4:	89 c6                	mov    esi,eax
c000f5e6:	58                   	pop    eax
c000f5e7:	5a                   	pop    edx
c000f5e8:	6a 00                	push   0x0
c000f5ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f5ee:	50                   	push   eax
c000f5ef:	e8 dc fb ff ff       	call   c000f1d0 <IDTEntry::IDTEntry(bool)>
c000f5f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f5f8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f5fd:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f604:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f60a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f60e:	80 ce 05             	or     dh,0x5
c000f611:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f614:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f618:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f61c:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f61f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f622:	e8 87 fc ff ff       	call   c000f2ae <IDT::flush()>
c000f627:	83 c4 20             	add    esp,0x20
c000f62a:	5b                   	pop    ebx
c000f62b:	5e                   	pop    esi
c000f62c:	5f                   	pop    edi
c000f62d:	c3                   	ret    

c000f62e <sbrk>:
c000f62e:	55                   	push   ebp
c000f62f:	57                   	push   edi
c000f630:	56                   	push   esi
c000f631:	53                   	push   ebx
c000f632:	83 ec 1c             	sub    esp,0x1c
c000f635:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f639:	85 c0                	test   eax,eax
c000f63b:	74 3e                	je     c000f67b <sbrk+0x4d>
c000f63d:	78 43                	js     c000f682 <sbrk+0x54>
c000f63f:	8b 15 28 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df28
c000f645:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f64b:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f651:	83 e2 01             	and    edx,0x1
c000f654:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f658:	8b 0d f4 cc 02 c0    	mov    ecx,DWORD PTR ds:0xc002ccf4
c000f65e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f662:	05 ff 0f 00 00       	add    eax,0xfff
c000f667:	89 c2                	mov    edx,eax
c000f669:	78 2f                	js     c000f69a <sbrk+0x6c>
c000f66b:	c1 fa 0c             	sar    edx,0xc
c000f66e:	89 d7                	mov    edi,edx
c000f670:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f674:	be 00 00 00 00       	mov    esi,0x0
c000f679:	eb 36                	jmp    c000f6b1 <sbrk+0x83>
c000f67b:	a1 f4 cc 02 c0       	mov    eax,ds:0xc002ccf4
c000f680:	eb 73                	jmp    c000f6f5 <sbrk+0xc7>
c000f682:	83 ec 08             	sub    esp,0x8
c000f685:	50                   	push   eax
c000f686:	68 20 a3 02 c0       	push   0xc002a320
c000f68b:	e8 97 31 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c000f690:	83 c4 10             	add    esp,0x10
c000f693:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f698:	eb 5b                	jmp    c000f6f5 <sbrk+0xc7>
c000f69a:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f6a0:	eb c9                	jmp    c000f66b <sbrk+0x3d>
c000f6a2:	81 05 f4 cc 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002ccf4,0x1000
c000f6ac:	46                   	inc    esi
c000f6ad:	39 f7                	cmp    edi,esi
c000f6af:	74 33                	je     c000f6e4 <sbrk+0xb6>
c000f6b1:	8b 1d 90 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e090
c000f6b7:	8b 2d f4 cc 02 c0    	mov    ebp,DWORD PTR ds:0xc002ccf4
c000f6bd:	e8 09 05 00 00       	call   c000fbcb <Phys::allocatePage()>
c000f6c2:	68 01 04 00 00       	push   0x401
c000f6c7:	55                   	push   ebp
c000f6c8:	50                   	push   eax
c000f6c9:	53                   	push   ebx
c000f6ca:	e8 2d 24 00 00       	call   c0011afc <VAS::mapPage(unsigned long, unsigned long, int)>
c000f6cf:	83 c4 10             	add    esp,0x10
c000f6d2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f6d7:	74 c9                	je     c000f6a2 <sbrk+0x74>
c000f6d9:	8b 1d f4 cc 02 c0    	mov    ebx,DWORD PTR ds:0xc002ccf4
c000f6df:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f6e2:	eb be                	jmp    c000f6a2 <sbrk+0x74>
c000f6e4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f6e9:	75 12                	jne    c000f6fd <sbrk+0xcf>
c000f6eb:	0f 20 d8             	mov    eax,cr3
c000f6ee:	0f 22 d8             	mov    cr3,eax
c000f6f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f6f5:	83 c4 1c             	add    esp,0x1c
c000f6f8:	5b                   	pop    ebx
c000f6f9:	5e                   	pop    esi
c000f6fa:	5f                   	pop    edi
c000f6fb:	5d                   	pop    ebp
c000f6fc:	c3                   	ret    
c000f6fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f701:	89 cb                	mov    ebx,ecx
c000f703:	c1 eb 0a             	shr    ebx,0xa
c000f706:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f70c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f712:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f716:	c1 e0 0c             	shl    eax,0xc
c000f719:	01 c8                	add    eax,ecx
c000f71b:	c1 e8 0a             	shr    eax,0xa
c000f71e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f723:	2d 00 00 40 00       	sub    eax,0x400000
c000f728:	39 c3                	cmp    ebx,eax
c000f72a:	77 c5                	ja     c000f6f1 <sbrk+0xc3>
c000f72c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f72f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f735:	39 d8                	cmp    eax,ebx
c000f737:	73 f3                	jae    c000f72c <sbrk+0xfe>
c000f739:	eb b6                	jmp    c000f6f1 <sbrk+0xc3>

c000f73b <mmap>:
c000f73b:	83 ec 18             	sub    esp,0x18
c000f73e:	68 50 a3 02 c0       	push   0xc002a350
c000f743:	e8 cb a8 00 00       	call   c001a013 <Krnl::panic(char const*)>
c000f748:	b8 00 00 00 00       	mov    eax,0x0
c000f74d:	83 c4 1c             	add    esp,0x1c
c000f750:	c3                   	ret    

c000f751 <munmap>:
c000f751:	83 ec 18             	sub    esp,0x18
c000f754:	68 55 a3 02 c0       	push   0xc002a355
c000f759:	e8 b5 a8 00 00       	call   c001a013 <Krnl::panic(char const*)>
c000f75e:	b8 00 00 00 00       	mov    eax,0x0
c000f763:	83 c4 1c             	add    esp,0x1c
c000f766:	c3                   	ret    

c000f767 <liballoc_lock()>:
c000f767:	fa                   	cli    
c000f768:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c000f76e:	b8 00 00 00 00       	mov    eax,0x0
c000f773:	c3                   	ret    

c000f774 <liballoc_unlock()>:
c000f774:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c000f779:	48                   	dec    eax
c000f77a:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c000f77f:	75 01                	jne    c000f782 <liballoc_unlock()+0xe>
c000f781:	fb                   	sti    
c000f782:	b8 00 00 00 00       	mov    eax,0x0
c000f787:	c3                   	ret    

c000f788 <liballoc_alloc(int)>:
c000f788:	83 ec 10             	sub    esp,0x10
c000f78b:	6a 01                	push   0x1
c000f78d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f791:	ff 35 90 e0 02 c0    	push   DWORD PTR ds:0xc002e090
c000f797:	e8 62 24 00 00       	call   c0011bfe <VAS::allocatePages(int, int)>
c000f79c:	83 c4 1c             	add    esp,0x1c
c000f79f:	c3                   	ret    

c000f7a0 <liballoc_free(void*, int)>:
c000f7a0:	83 ec 14             	sub    esp,0x14
c000f7a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f7a7:	ff 35 90 e0 02 c0    	push   DWORD PTR ds:0xc002e090
c000f7ad:	e8 f6 20 00 00       	call   c00118a8 <VAS::freeAllocatedPages(unsigned long)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <realloc>:
c000f7bb:	83 ec 14             	sub    esp,0x14
c000f7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7c6:	e8 61 1e ff ff       	call   c000162c <dlrealloc>
c000f7cb:	83 c4 1c             	add    esp,0x1c
c000f7ce:	c3                   	ret    

c000f7cf <malloc>:
c000f7cf:	83 ec 18             	sub    esp,0x18
c000f7d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7d6:	e8 14 19 ff ff       	call   c00010ef <dlmalloc>
c000f7db:	83 c4 1c             	add    esp,0x1c
c000f7de:	c3                   	ret    

c000f7df <free>:
c000f7df:	83 ec 18             	sub    esp,0x18
c000f7e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7e6:	e8 a9 15 ff ff       	call   c0000d94 <dlfree>
c000f7eb:	83 c4 1c             	add    esp,0x1c
c000f7ee:	c3                   	ret    

c000f7ef <rfree>:
c000f7ef:	83 ec 18             	sub    esp,0x18
c000f7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7f6:	e8 99 15 ff ff       	call   c0000d94 <dlfree>
c000f7fb:	83 c4 1c             	add    esp,0x1c
c000f7fe:	c3                   	ret    

c000f7ff <calloc>:
c000f7ff:	56                   	push   esi
c000f800:	53                   	push   ebx
c000f801:	83 ec 10             	sub    esp,0x10
c000f804:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f808:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f80d:	53                   	push   ebx
c000f80e:	e8 bc ff ff ff       	call   c000f7cf <malloc>
c000f813:	89 c6                	mov    esi,eax
c000f815:	83 c4 0c             	add    esp,0xc
c000f818:	53                   	push   ebx
c000f819:	6a 00                	push   0x0
c000f81b:	50                   	push   eax
c000f81c:	e8 2f 0f ff ff       	call   c0000750 <memset>
c000f821:	89 f0                	mov    eax,esi
c000f823:	83 c4 14             	add    esp,0x14
c000f826:	5b                   	pop    ebx
c000f827:	5e                   	pop    esi
c000f828:	c3                   	ret    

c000f829 <Krnl::setBootMessage(char const*)>:
c000f829:	57                   	push   edi
c000f82a:	56                   	push   esi
c000f82b:	53                   	push   ebx
c000f82c:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f832:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f839:	68 9e 00 00 00       	push   0x9e
c000f83e:	6a 00                	push   0x0
c000f840:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f844:	56                   	push   esi
c000f845:	e8 06 0f ff ff       	call   c0000750 <memset>
c000f84a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f84d:	e8 1a 0f ff ff       	call   c000076c <strlen>
c000f852:	ba 50 00 00 00       	mov    edx,0x50
c000f857:	83 c4 10             	add    esp,0x10
c000f85a:	29 c2                	sub    edx,eax
c000f85c:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f860:	d1 ea                	shr    edx,1
c000f862:	84 c0                	test   al,al
c000f864:	74 19                	je     c000f87f <Krnl::setBootMessage(char const*)+0x56>
c000f866:	01 d2                	add    edx,edx
c000f868:	43                   	inc    ebx
c000f869:	01 f2                	add    edx,esi
c000f86b:	80 cc 0f             	or     ah,0xf
c000f86e:	83 c2 02             	add    edx,0x2
c000f871:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f875:	43                   	inc    ebx
c000f876:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f87b:	84 c0                	test   al,al
c000f87d:	75 ec                	jne    c000f86b <Krnl::setBootMessage(char const*)+0x42>
c000f87f:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f884:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f889:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f88b:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f891:	5b                   	pop    ebx
c000f892:	5e                   	pop    esi
c000f893:	5f                   	pop    edi
c000f894:	c3                   	ret    

c000f895 <kernel_main>:
c000f895:	57                   	push   edi
c000f896:	bf f9 03 00 00       	mov    edi,0x3f9
c000f89b:	56                   	push   esi
c000f89c:	89 fa                	mov    edx,edi
c000f89e:	53                   	push   ebx
c000f89f:	31 f6                	xor    esi,esi
c000f8a1:	83 ec 2c             	sub    esp,0x2c
c000f8a4:	89 f0                	mov    eax,esi
c000f8a6:	ee                   	out    dx,al
c000f8a7:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f8ac:	b0 80                	mov    al,0x80
c000f8ae:	89 da                	mov    edx,ebx
c000f8b0:	ee                   	out    dx,al
c000f8b1:	b1 03                	mov    cl,0x3
c000f8b3:	ba f8 03 00 00       	mov    edx,0x3f8
c000f8b8:	88 c8                	mov    al,cl
c000f8ba:	ee                   	out    dx,al
c000f8bb:	89 f0                	mov    eax,esi
c000f8bd:	89 fa                	mov    edx,edi
c000f8bf:	ee                   	out    dx,al
c000f8c0:	88 c8                	mov    al,cl
c000f8c2:	89 da                	mov    edx,ebx
c000f8c4:	ee                   	out    dx,al
c000f8c5:	b0 c7                	mov    al,0xc7
c000f8c7:	ba fa 03 00 00       	mov    edx,0x3fa
c000f8cc:	ee                   	out    dx,al
c000f8cd:	b0 0b                	mov    al,0xb
c000f8cf:	ba fc 03 00 00       	mov    edx,0x3fc
c000f8d4:	ee                   	out    dx,al
c000f8d5:	68 5c a3 02 c0       	push   0xc002a35c
c000f8da:	e8 48 2f 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c000f8df:	e8 b8 09 00 00       	call   c001029c <installVgaTextImplementation()>
c000f8e4:	0f b6 05 00 cd 02 c0 	movzx  eax,BYTE PTR ds:0xc002cd00
c000f8eb:	83 c4 10             	add    esp,0x10
c000f8ee:	84 c0                	test   al,al
c000f8f0:	74 6c                	je     c000f95e <kernel_main+0xc9>
c000f8f2:	31 db                	xor    ebx,ebx
c000f8f4:	bf 0a 00 00 00       	mov    edi,0xa
c000f8f9:	be 05 00 00 00       	mov    esi,0x5
c000f8fe:	31 c9                	xor    ecx,ecx
c000f900:	eb 2a                	jmp    c000f92c <kernel_main+0x97>
c000f902:	3c 0d                	cmp    al,0xd
c000f904:	74 1a                	je     c000f920 <kernel_main+0x8b>
c000f906:	3c 0a                	cmp    al,0xa
c000f908:	74 40                	je     c000f94a <kernel_main+0xb5>
c000f90a:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f90d:	80 cc 0e             	or     ah,0xe
c000f910:	c1 e2 04             	shl    edx,0x4
c000f913:	01 ca                	add    edx,ecx
c000f915:	41                   	inc    ecx
c000f916:	01 fa                	add    edx,edi
c000f918:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f920:	43                   	inc    ebx
c000f921:	0f b6 83 00 cd 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3300]
c000f928:	84 c0                	test   al,al
c000f92a:	74 32                	je     c000f95e <kernel_main+0xc9>
c000f92c:	80 b9 36 cd 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd32ca],0xdb
c000f933:	75 cd                	jne    c000f902 <kernel_main+0x6d>
c000f935:	0f b6 91 35 cd 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd32cb]
c000f93c:	83 e2 fe             	and    edx,0xfffffffe
c000f93f:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f945:	75 bb                	jne    c000f902 <kernel_main+0x6d>
c000f947:	47                   	inc    edi
c000f948:	eb b8                	jmp    c000f902 <kernel_main+0x6d>
c000f94a:	43                   	inc    ebx
c000f94b:	46                   	inc    esi
c000f94c:	31 c9                	xor    ecx,ecx
c000f94e:	0f b6 83 00 cd 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3300]
c000f955:	bf 0a 00 00 00       	mov    edi,0xa
c000f95a:	84 c0                	test   al,al
c000f95c:	75 ce                	jne    c000f92c <kernel_main+0x97>
c000f95e:	83 ec 0c             	sub    esp,0xc
c000f961:	68 74 a3 02 c0       	push   0xc002a374
c000f966:	e8 be fe ff ff       	call   c000f829 <Krnl::setBootMessage(char const*)>
c000f96b:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f970:	a3 40 df 02 c0       	mov    ds:0xc002df40,eax
c000f975:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f97a:	05 ff 0f 00 00       	add    eax,0xfff
c000f97f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f984:	89 04 24             	mov    DWORD PTR [esp],eax
c000f987:	e8 cb 03 00 00       	call   c000fd57 <Phys::physicalMemorySetup(unsigned int)>
c000f98c:	e8 83 1c 00 00       	call   c0011614 <Virt::virtualMemorySetup()>
c000f991:	58                   	pop    eax
c000f992:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f996:	53                   	push   ebx
c000f997:	e8 34 1d 00 00       	call   c00116d0 <VAS::VAS()>
c000f99c:	89 1d 90 e0 02 c0    	mov    DWORD PTR ds:0xc002e090,ebx
c000f9a2:	e8 79 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f9a7:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f9ae:	e8 1c fe ff ff       	call   c000f7cf <malloc>
c000f9b3:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9b6:	89 c6                	mov    esi,eax
c000f9b8:	e8 4f f0 ff ff       	call   c000ea0c <Computer::Computer()>
c000f9bd:	6a 00                	push   0x0
c000f9bf:	89 35 28 df 02 c0    	mov    DWORD PTR ds:0xc002df28,esi
c000f9c5:	6a 00                	push   0x0
c000f9c7:	6a 00                	push   0x0
c000f9c9:	56                   	push   esi
c000f9ca:	e8 49 f4 ff ff       	call   c000ee18 <Computer::open(int, int, void*)>
c000f9cf:	83 c4 14             	add    esp,0x14
c000f9d2:	53                   	push   ebx
c000f9d3:	e8 a8 1f 00 00       	call   c0011980 <VAS::~VAS()>
c000f9d8:	83 c4 30             	add    esp,0x30
c000f9db:	5b                   	pop    ebx
c000f9dc:	5e                   	pop    esi
c000f9dd:	5f                   	pop    edi
c000f9de:	c3                   	ret    

c000f9df <Phys::allocateDMA(unsigned long)>:
c000f9df:	55                   	push   ebp
c000f9e0:	31 ed                	xor    ebp,ebp
c000f9e2:	57                   	push   edi
c000f9e3:	56                   	push   esi
c000f9e4:	53                   	push   ebx
c000f9e5:	31 db                	xor    ebx,ebx
c000f9e7:	83 ec 18             	sub    esp,0x18
c000f9ea:	68 93 a3 02 c0       	push   0xc002a393
c000f9ef:	e8 33 2e 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c000f9f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9f8:	31 d2                	xor    edx,edx
c000f9fa:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fa00:	83 c4 10             	add    esp,0x10
c000fa03:	c1 ee 0c             	shr    esi,0xc
c000fa06:	31 c9                	xor    ecx,ecx
c000fa08:	eb 17                	jmp    c000fa21 <Phys::allocateDMA(unsigned long)+0x42>
c000fa0a:	85 c9                	test   ecx,ecx
c000fa0c:	75 04                	jne    c000fa12 <Phys::allocateDMA(unsigned long)+0x33>
c000fa0e:	89 d5                	mov    ebp,edx
c000fa10:	89 d3                	mov    ebx,edx
c000fa12:	8d 41 01             	lea    eax,[ecx+0x1]
c000fa15:	39 c6                	cmp    esi,eax
c000fa17:	74 23                	je     c000fa3c <Phys::allocateDMA(unsigned long)+0x5d>
c000fa19:	42                   	inc    edx
c000fa1a:	89 c1                	mov    ecx,eax
c000fa1c:	83 fa 2f             	cmp    edx,0x2f
c000fa1f:	7f 11                	jg     c000fa32 <Phys::allocateDMA(unsigned long)+0x53>
c000fa21:	80 ba 80 df 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2080],0x0
c000fa28:	74 e0                	je     c000fa0a <Phys::allocateDMA(unsigned long)+0x2b>
c000fa2a:	31 c9                	xor    ecx,ecx
c000fa2c:	42                   	inc    edx
c000fa2d:	83 fa 2f             	cmp    edx,0x2f
c000fa30:	7e ef                	jle    c000fa21 <Phys::allocateDMA(unsigned long)+0x42>
c000fa32:	83 c4 0c             	add    esp,0xc
c000fa35:	31 c0                	xor    eax,eax
c000fa37:	5b                   	pop    ebx
c000fa38:	5e                   	pop    esi
c000fa39:	5f                   	pop    edi
c000fa3a:	5d                   	pop    ebp
c000fa3b:	c3                   	ret    
c000fa3c:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fa3f:	89 d7                	mov    edi,edx
c000fa41:	4f                   	dec    edi
c000fa42:	79 03                	jns    c000fa47 <Phys::allocateDMA(unsigned long)+0x68>
c000fa44:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fa47:	c1 ff 04             	sar    edi,0x4
c000fa4a:	89 da                	mov    edx,ebx
c000fa4c:	c1 fa 04             	sar    edx,0x4
c000fa4f:	39 fa                	cmp    edx,edi
c000fa51:	75 43                	jne    c000fa96 <Phys::allocateDMA(unsigned long)+0xb7>
c000fa53:	85 c0                	test   eax,eax
c000fa55:	74 1a                	je     c000fa71 <Phys::allocateDMA(unsigned long)+0x92>
c000fa57:	be 80 df 02 c0       	mov    esi,0xc002df80
c000fa5c:	8d 93 80 df 02 c0    	lea    edx,[ebx-0x3ffd2080]
c000fa62:	f7 d6                	not    esi
c000fa64:	29 de                	sub    esi,ebx
c000fa66:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fa69:	42                   	inc    edx
c000fa6a:	8d 04 16             	lea    eax,[esi+edx*1]
c000fa6d:	39 c1                	cmp    ecx,eax
c000fa6f:	7f f5                	jg     c000fa66 <Phys::allocateDMA(unsigned long)+0x87>
c000fa71:	83 ec 0c             	sub    esp,0xc
c000fa74:	68 ac a3 02 c0       	push   0xc002a3ac
c000fa79:	e8 a9 2d 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c000fa7e:	83 c4 10             	add    esp,0x10
c000fa81:	85 ff                	test   edi,edi
c000fa83:	74 17                	je     c000fa9c <Phys::allocateDMA(unsigned long)+0xbd>
c000fa85:	83 c4 0c             	add    esp,0xc
c000fa88:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000fa8e:	5b                   	pop    ebx
c000fa8f:	c1 e0 0c             	shl    eax,0xc
c000fa92:	5e                   	pop    esi
c000fa93:	5f                   	pop    edi
c000fa94:	5d                   	pop    ebp
c000fa95:	c3                   	ret    
c000fa96:	89 ea                	mov    edx,ebp
c000fa98:	31 c9                	xor    ecx,ecx
c000fa9a:	eb 90                	jmp    c000fa2c <Phys::allocateDMA(unsigned long)+0x4d>
c000fa9c:	83 c4 0c             	add    esp,0xc
c000fa9f:	c1 e3 0c             	shl    ebx,0xc
c000faa2:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000faa8:	5b                   	pop    ebx
c000faa9:	5e                   	pop    esi
c000faaa:	5f                   	pop    edi
c000faab:	5d                   	pop    ebp
c000faac:	c3                   	ret    

c000faad <Phys::freeDMA(unsigned long, unsigned long)>:
c000faad:	83 ec 18             	sub    esp,0x18
c000fab0:	68 c3 a3 02 c0       	push   0xc002a3c3
c000fab5:	e8 6d 2d 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c000faba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fabe:	83 c4 10             	add    esp,0x10
c000fac1:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000fac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000facb:	c1 e9 0c             	shr    ecx,0xc
c000face:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000fad6:	76 29                	jbe    c000fb01 <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000fad8:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000fade:	c1 ea 0c             	shr    edx,0xc
c000fae1:	83 c2 10             	add    edx,0x10
c000fae4:	85 c9                	test   ecx,ecx
c000fae6:	74 15                	je     c000fafd <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000fae8:	8d 82 80 df 02 c0    	lea    eax,[edx-0x3ffd2080]
c000faee:	8d 94 11 80 df 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2080]
c000faf5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000faf8:	40                   	inc    eax
c000faf9:	39 d0                	cmp    eax,edx
c000fafb:	75 f8                	jne    c000faf5 <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000fafd:	83 c4 0c             	add    esp,0xc
c000fb00:	c3                   	ret    
c000fb01:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fb07:	c1 ea 0c             	shr    edx,0xc
c000fb0a:	eb d8                	jmp    c000fae4 <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000fb0c <Phys::setPageState(unsigned long, bool)>:
c000fb0c:	56                   	push   esi
c000fb0d:	ba 01 00 00 00       	mov    edx,0x1
c000fb12:	53                   	push   ebx
c000fb13:	8b 35 44 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ce44
c000fb19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb21:	89 c8                	mov    eax,ecx
c000fb23:	83 e1 07             	and    ecx,0x7
c000fb26:	c1 e8 03             	shr    eax,0x3
c000fb29:	d3 e3                	shl    ebx,cl
c000fb2b:	01 c6                	add    esi,eax
c000fb2d:	d3 e2                	shl    edx,cl
c000fb2f:	f7 d2                	not    edx
c000fb31:	20 16                	and    BYTE PTR [esi],dl
c000fb33:	03 05 44 ce 02 c0    	add    eax,DWORD PTR ds:0xc002ce44
c000fb39:	08 18                	or     BYTE PTR [eax],bl
c000fb3b:	5b                   	pop    ebx
c000fb3c:	5e                   	pop    esi
c000fb3d:	c3                   	ret    

c000fb3e <Phys::getPageState(unsigned long)>:
c000fb3e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fb42:	8b 15 44 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002ce44
c000fb48:	89 c8                	mov    eax,ecx
c000fb4a:	83 e1 07             	and    ecx,0x7
c000fb4d:	c1 e8 03             	shr    eax,0x3
c000fb50:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fb54:	d3 f8                	sar    eax,cl
c000fb56:	83 e0 01             	and    eax,0x1
c000fb59:	c3                   	ret    

c000fb5a <Phys::freePage(unsigned long)>:
c000fb5a:	53                   	push   ebx
c000fb5b:	83 ec 10             	sub    esp,0x10
c000fb5e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fb62:	53                   	push   ebx
c000fb63:	68 d9 a3 02 c0       	push   0xc002a3d9
c000fb68:	e8 ba 2c 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c000fb6d:	83 c4 10             	add    esp,0x10
c000fb70:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fb76:	76 3d                	jbe    c000fbb5 <Phys::freePage(unsigned long)+0x5b>
c000fb78:	83 ec 0c             	sub    esp,0xc
c000fb7b:	c1 eb 0c             	shr    ebx,0xc
c000fb7e:	53                   	push   ebx
c000fb7f:	e8 ba ff ff ff       	call   c000fb3e <Phys::getPageState(unsigned long)>
c000fb84:	83 c4 10             	add    esp,0x10
c000fb87:	84 c0                	test   al,al
c000fb89:	74 19                	je     c000fba4 <Phys::freePage(unsigned long)+0x4a>
c000fb8b:	83 ec 08             	sub    esp,0x8
c000fb8e:	ff 0d 70 df 02 c0    	dec    DWORD PTR ds:0xc002df70
c000fb94:	6a 00                	push   0x0
c000fb96:	53                   	push   ebx
c000fb97:	e8 70 ff ff ff       	call   c000fb0c <Phys::setPageState(unsigned long, bool)>
c000fb9c:	83 c4 10             	add    esp,0x10
c000fb9f:	83 c4 08             	add    esp,0x8
c000fba2:	5b                   	pop    ebx
c000fba3:	c3                   	ret    
c000fba4:	c7 44 24 10 ec a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a3ec
c000fbac:	83 c4 08             	add    esp,0x8
c000fbaf:	5b                   	pop    ebx
c000fbb0:	e9 5e a4 00 00       	jmp    c001a013 <Krnl::panic(char const*)>
c000fbb5:	83 ec 08             	sub    esp,0x8
c000fbb8:	68 00 10 00 00       	push   0x1000
c000fbbd:	53                   	push   ebx
c000fbbe:	e8 ea fe ff ff       	call   c000faad <Phys::freeDMA(unsigned long, unsigned long)>
c000fbc3:	83 c4 10             	add    esp,0x10
c000fbc6:	83 c4 08             	add    esp,0x8
c000fbc9:	5b                   	pop    ebx
c000fbca:	c3                   	ret    

c000fbcb <Phys::allocatePage()>:
c000fbcb:	56                   	push   esi
c000fbcc:	53                   	push   ebx
c000fbcd:	83 ec 14             	sub    esp,0x14
c000fbd0:	8b 35 64 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df64
c000fbd6:	89 f3                	mov    ebx,esi
c000fbd8:	eb 0a                	jmp    c000fbe4 <Phys::allocatePage()+0x19>
c000fbda:	89 1d 64 df 02 c0    	mov    DWORD PTR ds:0xc002df64,ebx
c000fbe0:	39 de                	cmp    esi,ebx
c000fbe2:	74 24                	je     c000fc08 <Phys::allocatePage()+0x3d>
c000fbe4:	53                   	push   ebx
c000fbe5:	e8 54 ff ff ff       	call   c000fb3e <Phys::getPageState(unsigned long)>
c000fbea:	5a                   	pop    edx
c000fbeb:	84 c0                	test   al,al
c000fbed:	74 76                	je     c000fc65 <Phys::allocatePage()+0x9a>
c000fbef:	43                   	inc    ebx
c000fbf0:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fbf6:	75 e2                	jne    c000fbda <Phys::allocatePage()+0xf>
c000fbf8:	31 db                	xor    ebx,ebx
c000fbfa:	c7 05 64 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df64,0x0
c000fc04:	39 de                	cmp    esi,ebx
c000fc06:	75 dc                	jne    c000fbe4 <Phys::allocatePage()+0x19>
c000fc08:	83 ec 0c             	sub    esp,0xc
c000fc0b:	68 20 a4 02 c0       	push   0xc002a420
c000fc10:	e8 12 2c 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c000fc15:	58                   	pop    eax
c000fc16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fc1b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fc1e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fc24:	e8 8d 28 00 00       	call   c00124b6 <VAS::scanForEviction()>
c000fc29:	83 c4 10             	add    esp,0x10
c000fc2c:	85 c0                	test   eax,eax
c000fc2e:	75 76                	jne    c000fca6 <Phys::allocatePage()+0xdb>
c000fc30:	83 ec 0c             	sub    esp,0xc
c000fc33:	68 00 10 00 00       	push   0x1000
c000fc38:	e8 a2 fd ff ff       	call   c000f9df <Phys::allocateDMA(unsigned long)>
c000fc3d:	83 c4 10             	add    esp,0x10
c000fc40:	85 c0                	test   eax,eax
c000fc42:	75 5c                	jne    c000fca0 <Phys::allocatePage()+0xd5>
c000fc44:	83 ec 0c             	sub    esp,0xc
c000fc47:	68 38 a4 02 c0       	push   0xc002a438
c000fc4c:	e8 c2 a3 00 00       	call   c001a013 <Krnl::panic(char const*)>
c000fc51:	83 c4 10             	add    esp,0x10
c000fc54:	8b 1d 64 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df64
c000fc5a:	53                   	push   ebx
c000fc5b:	e8 de fe ff ff       	call   c000fb3e <Phys::getPageState(unsigned long)>
c000fc60:	5a                   	pop    edx
c000fc61:	84 c0                	test   al,al
c000fc63:	75 8a                	jne    c000fbef <Phys::allocatePage()+0x24>
c000fc65:	6a 01                	push   0x1
c000fc67:	53                   	push   ebx
c000fc68:	e8 9f fe ff ff       	call   c000fb0c <Phys::setPageState(unsigned long, bool)>
c000fc6d:	5a                   	pop    edx
c000fc6e:	a1 70 df 02 c0       	mov    eax,ds:0xc002df70
c000fc73:	59                   	pop    ecx
c000fc74:	40                   	inc    eax
c000fc75:	8b 15 64 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df64
c000fc7b:	a3 70 df 02 c0       	mov    ds:0xc002df70,eax
c000fc80:	c1 e2 0c             	shl    edx,0xc
c000fc83:	52                   	push   edx
c000fc84:	ff 35 74 df 02 c0    	push   DWORD PTR ds:0xc002df74
c000fc8a:	50                   	push   eax
c000fc8b:	68 02 a4 02 c0       	push   0xc002a402
c000fc90:	e8 92 2b 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c000fc95:	a1 64 df 02 c0       	mov    eax,ds:0xc002df64
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	c1 e0 0c             	shl    eax,0xc
c000fca0:	83 c4 14             	add    esp,0x14
c000fca3:	5b                   	pop    ebx
c000fca4:	5e                   	pop    esi
c000fca5:	c3                   	ret    
c000fca6:	83 ec 08             	sub    esp,0x8
c000fca9:	89 c2                	mov    edx,eax
c000fcab:	6a 01                	push   0x1
c000fcad:	c1 ea 0c             	shr    edx,0xc
c000fcb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fcb4:	52                   	push   edx
c000fcb5:	e8 52 fe ff ff       	call   c000fb0c <Phys::setPageState(unsigned long, bool)>
c000fcba:	83 c4 10             	add    esp,0x10
c000fcbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcc1:	eb dd                	jmp    c000fca0 <Phys::allocatePage()+0xd5>

c000fcc3 <Phys::allocateContiguousPages(int)>:
c000fcc3:	57                   	push   edi
c000fcc4:	56                   	push   esi
c000fcc5:	53                   	push   ebx
c000fcc6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fcca:	fa                   	cli    
c000fccb:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c000fcd1:	31 db                	xor    ebx,ebx
c000fcd3:	85 db                	test   ebx,ebx
c000fcd5:	75 11                	jne    c000fce8 <Phys::allocateContiguousPages(int)+0x25>
c000fcd7:	e8 ef fe ff ff       	call   c000fbcb <Phys::allocatePage()>
c000fcdc:	83 fe 01             	cmp    esi,0x1
c000fcdf:	89 c7                	mov    edi,eax
c000fce1:	74 21                	je     c000fd04 <Phys::allocateContiguousPages(int)+0x41>
c000fce3:	bb 01 00 00 00       	mov    ebx,0x1
c000fce8:	e8 de fe ff ff       	call   c000fbcb <Phys::allocatePage()>
c000fced:	89 da                	mov    edx,ebx
c000fcef:	c1 e2 0c             	shl    edx,0xc
c000fcf2:	01 fa                	add    edx,edi
c000fcf4:	39 c2                	cmp    edx,eax
c000fcf6:	74 20                	je     c000fd18 <Phys::allocateContiguousPages(int)+0x55>
c000fcf8:	bb 01 00 00 00       	mov    ebx,0x1
c000fcfd:	89 c7                	mov    edi,eax
c000fcff:	83 fe 01             	cmp    esi,0x1
c000fd02:	75 e4                	jne    c000fce8 <Phys::allocateContiguousPages(int)+0x25>
c000fd04:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c000fd09:	48                   	dec    eax
c000fd0a:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c000fd0f:	75 01                	jne    c000fd12 <Phys::allocateContiguousPages(int)+0x4f>
c000fd11:	fb                   	sti    
c000fd12:	89 f8                	mov    eax,edi
c000fd14:	5b                   	pop    ebx
c000fd15:	5e                   	pop    esi
c000fd16:	5f                   	pop    edi
c000fd17:	c3                   	ret    
c000fd18:	43                   	inc    ebx
c000fd19:	39 f3                	cmp    ebx,esi
c000fd1b:	75 b6                	jne    c000fcd3 <Phys::allocateContiguousPages(int)+0x10>
c000fd1d:	eb e5                	jmp    c000fd04 <Phys::allocateContiguousPages(int)+0x41>

c000fd1f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fd1f:	56                   	push   esi
c000fd20:	53                   	push   ebx
c000fd21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fd25:	39 1d 68 df 02 c0    	cmp    DWORD PTR ds:0xc002df68,ebx
c000fd2b:	73 06                	jae    c000fd33 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fd2d:	89 1d 68 df 02 c0    	mov    DWORD PTR ds:0xc002df68,ebx
c000fd33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd37:	c1 eb 0c             	shr    ebx,0xc
c000fd3a:	c1 e8 0c             	shr    eax,0xc
c000fd3d:	39 d8                	cmp    eax,ebx
c000fd3f:	73 13                	jae    c000fd54 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fd41:	6a 00                	push   0x0
c000fd43:	8d 70 01             	lea    esi,[eax+0x1]
c000fd46:	50                   	push   eax
c000fd47:	e8 c0 fd ff ff       	call   c000fb0c <Phys::setPageState(unsigned long, bool)>
c000fd4c:	5a                   	pop    edx
c000fd4d:	89 f0                	mov    eax,esi
c000fd4f:	59                   	pop    ecx
c000fd50:	39 f3                	cmp    ebx,esi
c000fd52:	75 ed                	jne    c000fd41 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fd54:	5b                   	pop    ebx
c000fd55:	5e                   	pop    esi
c000fd56:	c3                   	ret    

c000fd57 <Phys::physicalMemorySetup(unsigned int)>:
c000fd57:	55                   	push   ebp
c000fd58:	57                   	push   edi
c000fd59:	56                   	push   esi
c000fd5a:	53                   	push   ebx
c000fd5b:	83 ec 40             	sub    esp,0x40
c000fd5e:	6a 30                	push   0x30
c000fd60:	6a 00                	push   0x0
c000fd62:	68 80 df 02 c0       	push   0xc002df80
c000fd67:	e8 e4 09 ff ff       	call   c0000750 <memset>
c000fd6c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fd70:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd75:	05 00 10 00 00       	add    eax,0x1000
c000fd7a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fd7e:	5b                   	pop    ebx
c000fd7f:	31 db                	xor    ebx,ebx
c000fd81:	5e                   	pop    esi
c000fd82:	50                   	push   eax
c000fd83:	68 46 a4 02 c0       	push   0xc002a446
c000fd88:	e8 9a 2a 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c000fd8d:	83 c4 10             	add    esp,0x10
c000fd90:	83 ec 08             	sub    esp,0x8
c000fd93:	6a 01                	push   0x1
c000fd95:	53                   	push   ebx
c000fd96:	43                   	inc    ebx
c000fd97:	e8 70 fd ff ff       	call   c000fb0c <Phys::setPageState(unsigned long, bool)>
c000fd9c:	83 c4 10             	add    esp,0x10
c000fd9f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fda5:	75 e9                	jne    c000fd90 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fda7:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fdae:	66 85 c0             	test   ax,ax
c000fdb1:	0f 84 8e 01 00 00    	je     c000ff45 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fdb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fdbb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fdc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fdcc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fdd0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fdd8:	eb 15                	jmp    c000fdef <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fdda:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fdde:	83 c3 18             	add    ebx,0x18
c000fde1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fde5:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fde9:	0f 84 66 01 00 00    	je     c000ff55 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fdef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fdf2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fdf5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fdf8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fdfc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe00:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fe02:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fe05:	01 f0                	add    eax,esi
c000fe07:	55                   	push   ebp
c000fe08:	11 fa                	adc    edx,edi
c000fe0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe0e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fe12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fe16:	56                   	push   esi
c000fe17:	68 88 a4 02 c0       	push   0xc002a488
c000fe1c:	e8 06 2a 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c000fe21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe25:	83 c4 10             	add    esp,0x10
c000fe28:	09 f8                	or     eax,edi
c000fe2a:	0f 85 25 01 00 00    	jne    c000ff55 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fe30:	4d                   	dec    ebp
c000fe31:	75 a7                	jne    c000fdda <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fe33:	ba 00 00 08 00       	mov    edx,0x80000
c000fe38:	89 c1                	mov    ecx,eax
c000fe3a:	39 f2                	cmp    edx,esi
c000fe3c:	19 f9                	sbb    ecx,edi
c000fe3e:	0f 82 a7 00 00 00    	jb     c000feeb <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fe44:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fe48:	89 c1                	mov    ecx,eax
c000fe4a:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fe4e:	0f 83 97 00 00 00    	jae    c000feeb <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fe54:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fe59:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fe5d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fe61:	39 fa                	cmp    edx,edi
c000fe63:	19 e8                	sbb    eax,ebp
c000fe65:	0f 82 14 01 00 00    	jb     c000ff7f <Phys::physicalMemorySetup(unsigned int)+0x228>
c000fe6b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fe6f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fe73:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fe79:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe7e:	83 d5 ff             	adc    ebp,0xffffffff
c000fe81:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fe85:	31 c0                	xor    eax,eax
c000fe87:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fe8b:	39 fa                	cmp    edx,edi
c000fe8d:	89 c1                	mov    ecx,eax
c000fe8f:	19 e9                	sbb    ecx,ebp
c000fe91:	0f 83 43 ff ff ff    	jae    c000fdda <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fe97:	be 00 00 08 00       	mov    esi,0x80000
c000fe9c:	50                   	push   eax
c000fe9d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fea1:	57                   	push   edi
c000fea2:	56                   	push   esi
c000fea3:	68 ac a4 02 c0       	push   0xc002a4ac
c000fea8:	e8 7a 29 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c000fead:	5a                   	pop    edx
c000feae:	59                   	pop    ecx
c000feaf:	57                   	push   edi
c000feb0:	56                   	push   esi
c000feb1:	e8 69 fe ff ff       	call   c000fd1f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000feb6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000feba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000febe:	83 c4 0c             	add    esp,0xc
c000fec1:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fec5:	03 05 74 df 02 c0    	add    eax,DWORD PTR ds:0xc002df74
c000fecb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fed2:	a3 74 df 02 c0       	mov    ds:0xc002df74,eax
c000fed7:	52                   	push   edx
c000fed8:	50                   	push   eax
c000fed9:	68 6c a4 02 c0       	push   0xc002a46c
c000fede:	e8 44 29 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c000fee3:	83 c4 10             	add    esp,0x10
c000fee6:	e9 ef fe ff ff       	jmp    c000fdda <Phys::physicalMemorySetup(unsigned int)+0x83>
c000feeb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000feef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fef3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fef7:	39 ea                	cmp    edx,ebp
c000fef9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fefd:	0f 82 d7 fe ff ff    	jb     c000fdda <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ff03:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff08:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ff0c:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ff10:	0f 83 c4 fe ff ff    	jae    c000fdda <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ff16:	39 ee                	cmp    esi,ebp
c000ff18:	89 f8                	mov    eax,edi
c000ff1a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ff1e:	0f 83 78 ff ff ff    	jae    c000fe9c <Phys::physicalMemorySetup(unsigned int)+0x145>
c000ff24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff2c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ff30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ff34:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ff38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff40:	e9 57 ff ff ff       	jmp    c000fe9c <Phys::physicalMemorySetup(unsigned int)+0x145>
c000ff45:	83 ec 0c             	sub    esp,0xc
c000ff48:	68 5e a4 02 c0       	push   0xc002a45e
c000ff4d:	e8 c1 a0 00 00       	call   c001a013 <Krnl::panic(char const*)>
c000ff52:	83 c4 10             	add    esp,0x10
c000ff55:	bb 40 01 00 00       	mov    ebx,0x140
c000ff5a:	83 ec 08             	sub    esp,0x8
c000ff5d:	6a 00                	push   0x0
c000ff5f:	53                   	push   ebx
c000ff60:	43                   	inc    ebx
c000ff61:	e8 a6 fb ff ff       	call   c000fb0c <Phys::setPageState(unsigned long, bool)>
c000ff66:	ff 05 74 df 02 c0    	inc    DWORD PTR ds:0xc002df74
c000ff6c:	83 c4 10             	add    esp,0x10
c000ff6f:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000ff75:	75 e3                	jne    c000ff5a <Phys::physicalMemorySetup(unsigned int)+0x203>
c000ff77:	83 c4 3c             	add    esp,0x3c
c000ff7a:	5b                   	pop    ebx
c000ff7b:	5e                   	pop    esi
c000ff7c:	5f                   	pop    edi
c000ff7d:	5d                   	pop    ebp
c000ff7e:	c3                   	ret    
c000ff7f:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000ff87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ff8f:	e9 d7 fe ff ff       	jmp    c000fe6b <Phys::physicalMemorySetup(unsigned int)+0x114>

c000ff94 <Pipe::isAtty()>:
c000ff94:	31 c0                	xor    eax,eax
c000ff96:	c3                   	ret    
c000ff97:	90                   	nop

c000ff98 <Pipe::~Pipe()>:
c000ff98:	83 ec 0c             	sub    esp,0xc
c000ff9b:	ba 18 a5 02 c0       	mov    edx,0xc002a518
c000ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa4:	89 10                	mov    DWORD PTR [eax],edx
c000ffa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffaa:	83 ec 0c             	sub    esp,0xc
c000ffad:	50                   	push   eax
c000ffae:	e8 41 12 00 00       	call   c00111f4 <UnixFile::~UnixFile()>
c000ffb3:	83 c4 10             	add    esp,0x10
c000ffb6:	90                   	nop
c000ffb7:	83 c4 0c             	add    esp,0xc
c000ffba:	c3                   	ret    
c000ffbb:	90                   	nop

c000ffbc <Pipe::~Pipe()>:
c000ffbc:	83 ec 0c             	sub    esp,0xc
c000ffbf:	83 ec 0c             	sub    esp,0xc
c000ffc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffc6:	e8 cd ff ff ff       	call   c000ff98 <Pipe::~Pipe()>
c000ffcb:	83 c4 10             	add    esp,0x10
c000ffce:	83 ec 08             	sub    esp,0x8
c000ffd1:	6a 20                	push   0x20
c000ffd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffd7:	e8 73 27 00 00       	call   c001274f <operator delete(void*, unsigned long)>
c000ffdc:	83 c4 10             	add    esp,0x10
c000ffdf:	83 c4 0c             	add    esp,0xc
c000ffe2:	c3                   	ret    
c000ffe3:	90                   	nop

c000ffe4 <Pipe::read(unsigned long long, void*, int*)>:
c000ffe4:	55                   	push   ebp
c000ffe5:	57                   	push   edi
c000ffe6:	56                   	push   esi
c000ffe7:	53                   	push   ebx
c000ffe8:	83 ec 1c             	sub    esp,0x1c
c000ffeb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ffef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fff3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fff7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fffa:	89 c8                	mov    eax,ecx
c000fffc:	99                   	cdq    
c000fffd:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010001:	74 24                	je     c0010027 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010003:	39 f9                	cmp    ecx,edi
c0010005:	89 d1                	mov    ecx,edx
c0010007:	19 f1                	sbb    ecx,esi
c0010009:	73 1c                	jae    c0010027 <Pipe::read(unsigned long long, void*, int*)+0x43>
c001000b:	fa                   	cli    
c001000c:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c0010012:	e8 8e db 00 00       	call   c001dba5 <schedule()>
c0010017:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001001c:	48                   	dec    eax
c001001d:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c0010022:	75 d3                	jne    c000fff7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010024:	fb                   	sti    
c0010025:	eb d0                	jmp    c000fff7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010027:	39 f8                	cmp    eax,edi
c0010029:	89 d1                	mov    ecx,edx
c001002b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001002e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010032:	19 f1                	sbb    ecx,esi
c0010034:	73 07                	jae    c001003d <Pipe::read(unsigned long long, void*, int*)+0x59>
c0010036:	89 04 24             	mov    DWORD PTR [esp],eax
c0010039:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001003d:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010040:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010043:	29 f7                	sub    edi,esi
c0010045:	89 f8                	mov    eax,edi
c0010047:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001004b:	99                   	cdq    
c001004c:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001004f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010053:	19 d0                	sbb    eax,edx
c0010055:	73 07                	jae    c001005e <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0010057:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001005a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001005e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0010061:	89 ea                	mov    edx,ebp
c0010063:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010067:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001006c:	74 0d                	je     c001007b <Pipe::read(unsigned long long, void*, int*)+0x97>
c001006e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010071:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010075:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010079:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001007b:	85 d2                	test   edx,edx
c001007d:	74 11                	je     c0010090 <Pipe::read(unsigned long long, void*, int*)+0xac>
c001007f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010083:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010086:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001008a:	89 d1                	mov    ecx,edx
c001008c:	89 c7                	mov    edi,eax
c001008e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010090:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010093:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010096:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010099:	99                   	cdq    
c001009a:	89 f7                	mov    edi,esi
c001009c:	03 04 24             	add    eax,DWORD PTR [esp]
c001009f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00100a3:	c1 ff 1f             	sar    edi,0x1f
c00100a6:	57                   	push   edi
c00100a7:	56                   	push   esi
c00100a8:	52                   	push   edx
c00100a9:	50                   	push   eax
c00100aa:	e8 15 6b 01 00       	call   c0026bc4 <__umoddi3>
c00100af:	83 c4 10             	add    esp,0x10
c00100b2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00100b5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00100ba:	75 10                	jne    c00100cc <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00100bc:	83 ec 0c             	sub    esp,0xc
c00100bf:	68 d5 a4 02 c0       	push   0xc002a4d5
c00100c4:	e8 4a 9f 00 00       	call   c001a013 <Krnl::panic(char const*)>
c00100c9:	83 c4 10             	add    esp,0x10
c00100cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00100d0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00100d3:	89 10                	mov    DWORD PTR [eax],edx
c00100d5:	83 c4 1c             	add    esp,0x1c
c00100d8:	31 c0                	xor    eax,eax
c00100da:	5b                   	pop    ebx
c00100db:	5e                   	pop    esi
c00100dc:	5f                   	pop    edi
c00100dd:	5d                   	pop    ebp
c00100de:	c3                   	ret    
c00100df:	90                   	nop

c00100e0 <Pipe::write(unsigned long long, void*, int*)>:
c00100e0:	55                   	push   ebp
c00100e1:	57                   	push   edi
c00100e2:	56                   	push   esi
c00100e3:	53                   	push   ebx
c00100e4:	83 ec 1c             	sub    esp,0x1c
c00100e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00100eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00100ef:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00100f2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00100f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00100f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00100fd:	89 d8                	mov    eax,ebx
c00100ff:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010102:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010106:	89 d6                	mov    esi,edx
c0010108:	89 d7                	mov    edi,edx
c001010a:	c1 ff 1f             	sar    edi,0x1f
c001010d:	03 34 24             	add    esi,DWORD PTR [esp]
c0010110:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010114:	c1 f8 1f             	sar    eax,0x1f
c0010117:	39 f3                	cmp    ebx,esi
c0010119:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001011d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010121:	19 f8                	sbb    eax,edi
c0010123:	b8 01 00 00 00       	mov    eax,0x1
c0010128:	72 6e                	jb     c0010198 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c001012a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001012d:	01 d0                	add    eax,edx
c001012f:	99                   	cdq    
c0010130:	f7 fb                	idiv   ebx
c0010132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010136:	29 d3                	sub    ebx,edx
c0010138:	89 d7                	mov    edi,edx
c001013a:	89 de                	mov    esi,ebx
c001013c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001013f:	c1 fb 1f             	sar    ebx,0x1f
c0010142:	39 f2                	cmp    edx,esi
c0010144:	19 d8                	sbb    eax,ebx
c0010146:	b8 00 00 00 00       	mov    eax,0x0
c001014b:	72 04                	jb     c0010151 <Pipe::write(unsigned long long, void*, int*)+0x71>
c001014d:	89 d0                	mov    eax,edx
c001014f:	29 f0                	sub    eax,esi
c0010151:	89 d3                	mov    ebx,edx
c0010153:	29 c3                	sub    ebx,eax
c0010155:	74 0b                	je     c0010162 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010157:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001015a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001015e:	89 d9                	mov    ecx,ebx
c0010160:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010162:	85 c0                	test   eax,eax
c0010164:	74 0d                	je     c0010173 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010166:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001016a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001016d:	89 de                	mov    esi,ebx
c001016f:	89 c1                	mov    ecx,eax
c0010171:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010173:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010176:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001017b:	75 10                	jne    c001018d <Pipe::write(unsigned long long, void*, int*)+0xad>
c001017d:	83 ec 0c             	sub    esp,0xc
c0010180:	68 f1 a4 02 c0       	push   0xc002a4f1
c0010185:	e8 89 9e 00 00       	call   c001a013 <Krnl::panic(char const*)>
c001018a:	83 c4 10             	add    esp,0x10
c001018d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010191:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010194:	89 08                	mov    DWORD PTR [eax],ecx
c0010196:	31 c0                	xor    eax,eax
c0010198:	83 c4 1c             	add    esp,0x1c
c001019b:	5b                   	pop    ebx
c001019c:	5e                   	pop    esi
c001019d:	5f                   	pop    edi
c001019e:	5d                   	pop    ebp
c001019f:	c3                   	ret    

c00101a0 <Pipe::Pipe(int)>:
c00101a0:	83 ec 0c             	sub    esp,0xc
c00101a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101a7:	83 ec 08             	sub    esp,0x8
c00101aa:	6a 00                	push   0x0
c00101ac:	50                   	push   eax
c00101ad:	e8 60 0e 00 00       	call   c0011012 <UnixFile::UnixFile(int)>
c00101b2:	83 c4 10             	add    esp,0x10
c00101b5:	ba 18 a5 02 c0       	mov    edx,0xc002a518
c00101ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101be:	89 10                	mov    DWORD PTR [eax],edx
c00101c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00101c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00101cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101cf:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00101d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101da:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00101e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101e5:	83 ec 0c             	sub    esp,0xc
c00101e8:	50                   	push   eax
c00101e9:	e8 e1 f5 ff ff       	call   c000f7cf <malloc>
c00101ee:	83 c4 10             	add    esp,0x10
c00101f1:	89 c2                	mov    edx,eax
c00101f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00101fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101fe:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010202:	90                   	nop
c0010203:	83 c4 0c             	add    esp,0xc
c0010206:	c3                   	ret    
c0010207:	90                   	nop

c0010208 <VgaText::isAtty()>:
c0010208:	b0 01                	mov    al,0x1
c001020a:	c3                   	ret    
c001020b:	90                   	nop

c001020c <VgaText::~VgaText()>:
c001020c:	83 ec 0c             	sub    esp,0xc
c001020f:	ba a0 a5 02 c0       	mov    edx,0xc002a5a0
c0010214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010218:	89 10                	mov    DWORD PTR [eax],edx
c001021a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001021e:	83 ec 0c             	sub    esp,0xc
c0010221:	50                   	push   eax
c0010222:	e8 cd 0f 00 00       	call   c00111f4 <UnixFile::~UnixFile()>
c0010227:	83 c4 10             	add    esp,0x10
c001022a:	90                   	nop
c001022b:	83 c4 0c             	add    esp,0xc
c001022e:	c3                   	ret    
c001022f:	90                   	nop

c0010230 <VgaText::~VgaText()>:
c0010230:	83 ec 0c             	sub    esp,0xc
c0010233:	83 ec 0c             	sub    esp,0xc
c0010236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001023a:	e8 cd ff ff ff       	call   c001020c <VgaText::~VgaText()>
c001023f:	83 c4 10             	add    esp,0x10
c0010242:	83 ec 08             	sub    esp,0x8
c0010245:	68 c4 02 00 00       	push   0x2c4
c001024a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001024e:	e8 fc 24 00 00       	call   c001274f <operator delete(void*, unsigned long)>
c0010253:	83 c4 10             	add    esp,0x10
c0010256:	83 c4 0c             	add    esp,0xc
c0010259:	c3                   	ret    

c001025a <VgaText::read(unsigned long long, void*, int*)>:
c001025a:	83 ec 10             	sub    esp,0x10
c001025d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010261:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010269:	e8 86 5a 00 00       	call   c0015cf4 <readKeyboard(VgaText*, char*, unsigned long)>
c001026e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010272:	89 02                	mov    DWORD PTR [edx],eax
c0010274:	31 c0                	xor    eax,eax
c0010276:	83 c4 1c             	add    esp,0x1c
c0010279:	c3                   	ret    

c001027a <setTerminalScrollLock(bool)>:
c001027a:	c3                   	ret    

c001027b <addToTerminalCycle(VgaText*)>:
c001027b:	8b 15 e0 df 02 c0    	mov    edx,DWORD PTR ds:0xc002dfe0
c0010281:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010285:	85 d2                	test   edx,edx
c0010287:	75 09                	jne    c0010292 <addToTerminalCycle(VgaText*)+0x17>
c0010289:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c001028c:	a3 e0 df 02 c0       	mov    ds:0xc002dfe0,eax
c0010291:	c3                   	ret    
c0010292:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010295:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010298:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c001029b:	c3                   	ret    

c001029c <installVgaTextImplementation()>:
c001029c:	83 ec 10             	sub    esp,0x10
c001029f:	6a 20                	push   0x20
c00102a1:	6a 00                	push   0x0
c00102a3:	68 c0 df 02 c0       	push   0xc002dfc0
c00102a8:	e8 a3 04 ff ff       	call   c0000750 <memset>
c00102ad:	83 c4 1c             	add    esp,0x1c
c00102b0:	c3                   	ret    

c00102b1 <scrollTerminalScrollLock(int)>:
c00102b1:	c3                   	ret    

c00102b2 <VgaText::updateTitle()>:
c00102b2:	53                   	push   ebx
c00102b3:	31 c0                	xor    eax,eax
c00102b5:	83 ec 58             	sub    esp,0x58
c00102b8:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00102bc:	89 e1                	mov    ecx,esp
c00102be:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00102c2:	40                   	inc    eax
c00102c3:	83 f8 50             	cmp    eax,0x50
c00102c6:	75 f6                	jne    c00102be <VgaText::updateTitle()+0xc>
c00102c8:	31 c0                	xor    eax,eax
c00102ca:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c00102d1:	84 db                	test   bl,bl
c00102d3:	74 06                	je     c00102db <VgaText::updateTitle()+0x29>
c00102d5:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00102d8:	40                   	inc    eax
c00102d9:	eb ef                	jmp    c00102ca <VgaText::updateTitle()+0x18>
c00102db:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00102de:	85 c0                	test   eax,eax
c00102e0:	74 09                	je     c00102eb <VgaText::updateTitle()+0x39>
c00102e2:	53                   	push   ebx
c00102e3:	53                   	push   ebx
c00102e4:	51                   	push   ecx
c00102e5:	52                   	push   edx
c00102e6:	ff d0                	call   eax
c00102e8:	83 c4 10             	add    esp,0x10
c00102eb:	83 c4 58             	add    esp,0x58
c00102ee:	5b                   	pop    ebx
c00102ef:	c3                   	ret    

c00102f0 <VgaText::load()>:
c00102f0:	53                   	push   ebx
c00102f1:	31 c0                	xor    eax,eax
c00102f3:	83 ec 58             	sub    esp,0x58
c00102f6:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00102fa:	89 e2                	mov    edx,esp
c00102fc:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010300:	40                   	inc    eax
c0010301:	83 f8 50             	cmp    eax,0x50
c0010304:	75 f6                	jne    c00102fc <VgaText::load()+0xc>
c0010306:	31 c0                	xor    eax,eax
c0010308:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001030f:	84 c9                	test   cl,cl
c0010311:	74 06                	je     c0010319 <VgaText::load()+0x29>
c0010313:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010316:	40                   	inc    eax
c0010317:	eb ef                	jmp    c0010308 <VgaText::load()+0x18>
c0010319:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c001031c:	85 c0                	test   eax,eax
c001031e:	74 09                	je     c0010329 <VgaText::load()+0x39>
c0010320:	51                   	push   ecx
c0010321:	51                   	push   ecx
c0010322:	52                   	push   edx
c0010323:	53                   	push   ebx
c0010324:	ff d0                	call   eax
c0010326:	83 c4 10             	add    esp,0x10
c0010329:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c001032c:	85 c0                	test   eax,eax
c001032e:	74 09                	je     c0010339 <VgaText::load()+0x49>
c0010330:	83 ec 0c             	sub    esp,0xc
c0010333:	53                   	push   ebx
c0010334:	ff d0                	call   eax
c0010336:	83 c4 10             	add    esp,0x10
c0010339:	83 c4 58             	add    esp,0x58
c001033c:	5b                   	pop    ebx
c001033d:	c3                   	ret    

c001033e <VgaText::updateCursor()>:
c001033e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010342:	39 05 e4 df 02 c0    	cmp    DWORD PTR ds:0xc002dfe4,eax
c0010348:	75 09                	jne    c0010353 <VgaText::updateCursor()+0x15>
c001034a:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c001034d:	85 c0                	test   eax,eax
c001034f:	74 02                	je     c0010353 <VgaText::updateCursor()+0x15>
c0010351:	ff e0                	jmp    eax
c0010353:	c3                   	ret    

c0010354 <VgaText::doANSI_SGR(int)>:
c0010354:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001035c:	85 d2                	test   edx,edx
c001035e:	75 0b                	jne    c001036b <VgaText::doANSI_SGR(int)+0x17>
c0010360:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010363:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010366:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010369:	eb 59                	jmp    c00103c4 <VgaText::doANSI_SGR(int)+0x70>
c001036b:	83 fa 07             	cmp    edx,0x7
c001036e:	75 0b                	jne    c001037b <VgaText::doANSI_SGR(int)+0x27>
c0010370:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010373:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010376:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010379:	eb 49                	jmp    c00103c4 <VgaText::doANSI_SGR(int)+0x70>
c001037b:	83 fa 1b             	cmp    edx,0x1b
c001037e:	74 e0                	je     c0010360 <VgaText::doANSI_SGR(int)+0xc>
c0010380:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010383:	83 f9 07             	cmp    ecx,0x7
c0010386:	77 09                	ja     c0010391 <VgaText::doANSI_SGR(int)+0x3d>
c0010388:	8b 14 8d 80 ce 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3180]
c001038f:	eb 20                	jmp    c00103b1 <VgaText::doANSI_SGR(int)+0x5d>
c0010391:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010394:	83 f9 07             	cmp    ecx,0x7
c0010397:	77 09                	ja     c00103a2 <VgaText::doANSI_SGR(int)+0x4e>
c0010399:	8b 14 8d 80 ce 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3180]
c00103a0:	eb 22                	jmp    c00103c4 <VgaText::doANSI_SGR(int)+0x70>
c00103a2:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00103a5:	83 f9 07             	cmp    ecx,0x7
c00103a8:	77 0b                	ja     c00103b5 <VgaText::doANSI_SGR(int)+0x61>
c00103aa:	8b 14 95 38 cd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd32c8]
c00103b1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00103b4:	c3                   	ret    
c00103b5:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00103b8:	83 f9 07             	cmp    ecx,0x7
c00103bb:	77 0a                	ja     c00103c7 <VgaText::doANSI_SGR(int)+0x73>
c00103bd:	8b 14 95 10 cd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd32f0]
c00103c4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00103c7:	c3                   	ret    

c00103c8 <VgaText::setDefaultBgColour(VgaColour)>:
c00103c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103d0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00103d3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00103d6:	c3                   	ret    
c00103d7:	90                   	nop

c00103d8 <VgaText::setDefaultFgColour(VgaColour)>:
c00103d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103e0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00103e3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00103e6:	c3                   	ret    
c00103e7:	90                   	nop

c00103e8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00103e8:	53                   	push   ebx
c00103e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00103f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00103f5:	51                   	push   ecx
c00103f6:	e8 cd ff ff ff       	call   c00103c8 <VgaText::setDefaultBgColour(VgaColour)>
c00103fb:	58                   	pop    eax
c00103fc:	5a                   	pop    edx
c00103fd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010401:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010405:	5b                   	pop    ebx
c0010406:	eb d0                	jmp    c00103d8 <VgaText::setDefaultFgColour(VgaColour)>

c0010408 <VgaText::setTitleTextColour(VgaColour)>:
c0010408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001040c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010410:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010413:	e9 9a fe ff ff       	jmp    c00102b2 <VgaText::updateTitle()>

c0010418 <VgaText::setTitleColour(VgaColour)>:
c0010418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001041c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010420:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010423:	e9 8a fe ff ff       	jmp    c00102b2 <VgaText::updateTitle()>

c0010428 <VgaText::setTitle(char*)>:
c0010428:	53                   	push   ebx
c0010429:	83 ec 10             	sub    esp,0x10
c001042c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010434:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c001043a:	50                   	push   eax
c001043b:	e8 cc 03 ff ff       	call   c000080c <strcpy>
c0010440:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010444:	83 c4 18             	add    esp,0x18
c0010447:	5b                   	pop    ebx
c0010448:	e9 65 fe ff ff       	jmp    c00102b2 <VgaText::updateTitle()>
c001044d:	90                   	nop

c001044e <VgaText::combineColours(unsigned char, unsigned char)>:
c001044e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010452:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010457:	83 e0 0f             	and    eax,0xf
c001045a:	c1 e2 04             	shl    edx,0x4
c001045d:	09 d0                	or     eax,edx
c001045f:	c3                   	ret    

c0010460 <VgaText::scrollScreen()>:
c0010460:	55                   	push   ebp
c0010461:	b9 01 00 00 00       	mov    ecx,0x1
c0010466:	57                   	push   edi
c0010467:	56                   	push   esi
c0010468:	53                   	push   ebx
c0010469:	83 ec 0c             	sub    esp,0xc
c001046c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010470:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010476:	31 ff                	xor    edi,edi
c0010478:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001047b:	83 f9 17             	cmp    ecx,0x17
c001047e:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010481:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010488:	75 27                	jne    c00104b1 <VgaText::scrollScreen()+0x51>
c001048a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001048d:	01 f5                	add    ebp,esi
c001048f:	f7 c7 01 00 00 00    	test   edi,0x1
c0010495:	74 16                	je     c00104ad <VgaText::scrollScreen()+0x4d>
c0010497:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001049b:	50                   	push   eax
c001049c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00104a0:	50                   	push   eax
c00104a1:	e8 a8 ff ff ff       	call   c001044e <VgaText::combineColours(unsigned char, unsigned char)>
c00104a6:	5a                   	pop    edx
c00104a7:	5a                   	pop    edx
c00104a8:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00104ab:	eb 04                	jmp    c00104b1 <VgaText::scrollScreen()+0x51>
c00104ad:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00104b1:	47                   	inc    edi
c00104b2:	46                   	inc    esi
c00104b3:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00104b9:	75 bd                	jne    c0010478 <VgaText::scrollScreen()+0x18>
c00104bb:	41                   	inc    ecx
c00104bc:	83 f9 18             	cmp    ecx,0x18
c00104bf:	75 af                	jne    c0010470 <VgaText::scrollScreen()+0x10>
c00104c1:	39 1d e4 df 02 c0    	cmp    DWORD PTR ds:0xc002dfe4,ebx
c00104c7:	75 1b                	jne    c00104e4 <VgaText::scrollScreen()+0x84>
c00104c9:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00104cd:	74 05                	je     c00104d4 <VgaText::scrollScreen()+0x74>
c00104cf:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00104d2:	eb 10                	jmp    c00104e4 <VgaText::scrollScreen()+0x84>
c00104d4:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00104d7:	85 c0                	test   eax,eax
c00104d9:	74 09                	je     c00104e4 <VgaText::scrollScreen()+0x84>
c00104db:	83 ec 0c             	sub    esp,0xc
c00104de:	53                   	push   ebx
c00104df:	ff d0                	call   eax
c00104e1:	83 c4 10             	add    esp,0x10
c00104e4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00104e8:	83 c4 0c             	add    esp,0xc
c00104eb:	5b                   	pop    ebx
c00104ec:	5e                   	pop    esi
c00104ed:	5f                   	pop    edi
c00104ee:	5d                   	pop    ebp
c00104ef:	e9 4a fe ff ff       	jmp    c001033e <VgaText::updateCursor()>

c00104f4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00104f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00104f9:	c1 e0 08             	shl    eax,0x8
c00104fc:	89 c2                	mov    edx,eax
c00104fe:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010503:	09 d0                	or     eax,edx
c0010505:	c3                   	ret    

c0010506 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010506:	56                   	push   esi
c0010507:	53                   	push   ebx
c0010508:	51                   	push   ecx
c0010509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001050d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010512:	50                   	push   eax
c0010513:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010518:	50                   	push   eax
c0010519:	e8 30 ff ff ff       	call   c001044e <VgaText::combineColours(unsigned char, unsigned char)>
c001051e:	5b                   	pop    ebx
c001051f:	0f b6 c0             	movzx  eax,al
c0010522:	5e                   	pop    esi
c0010523:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010528:	50                   	push   eax
c0010529:	53                   	push   ebx
c001052a:	e8 c5 ff ff ff       	call   c00104f4 <VgaText::combineCharAndColour(char, unsigned char)>
c001052f:	5a                   	pop    edx
c0010530:	5e                   	pop    esi
c0010531:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010534:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001053a:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001053e:	0f b7 d2             	movzx  edx,dx
c0010541:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010545:	39 0d e4 df 02 c0    	cmp    DWORD PTR ds:0xc002dfe4,ecx
c001054b:	75 10                	jne    c001055d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001054d:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010550:	85 c0                	test   eax,eax
c0010552:	74 09                	je     c001055d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010554:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010558:	5a                   	pop    edx
c0010559:	5b                   	pop    ebx
c001055a:	5e                   	pop    esi
c001055b:	ff e0                	jmp    eax
c001055d:	58                   	pop    eax
c001055e:	5b                   	pop    ebx
c001055f:	5e                   	pop    esi
c0010560:	c3                   	ret    
c0010561:	90                   	nop

c0010562 <VgaText::getCursorX()>:
c0010562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010566:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010569:	c3                   	ret    

c001056a <VgaText::getCursorY()>:
c001056a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001056e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010571:	c3                   	ret    

c0010572 <VgaText::setCursor(int, int)>:
c0010572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010576:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001057a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001057d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010581:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010584:	e9 b5 fd ff ff       	jmp    c001033e <VgaText::updateCursor()>

c0010589 <setActiveTerminal(VgaText*)>:
c0010589:	53                   	push   ebx
c001058a:	83 ec 08             	sub    esp,0x8
c001058d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010591:	85 db                	test   ebx,ebx
c0010593:	75 11                	jne    c00105a6 <setActiveTerminal(VgaText*)+0x1d>
c0010595:	c7 44 24 10 2c a5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a52c
c001059d:	83 c4 08             	add    esp,0x8
c00105a0:	5b                   	pop    ebx
c00105a1:	e9 6d 9a 00 00       	jmp    c001a013 <Krnl::panic(char const*)>
c00105a6:	a1 e4 df 02 c0       	mov    eax,ds:0xc002dfe4
c00105ab:	85 c0                	test   eax,eax
c00105ad:	74 0c                	je     c00105bb <setActiveTerminal(VgaText*)+0x32>
c00105af:	83 ec 0c             	sub    esp,0xc
c00105b2:	50                   	push   eax
c00105b3:	e8 86 fd ff ff       	call   c001033e <VgaText::updateCursor()>
c00105b8:	83 c4 10             	add    esp,0x10
c00105bb:	89 1d e4 df 02 c0    	mov    DWORD PTR ds:0xc002dfe4,ebx
c00105c1:	51                   	push   ecx
c00105c2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00105c5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00105c8:	53                   	push   ebx
c00105c9:	e8 a4 ff ff ff       	call   c0010572 <VgaText::setCursor(int, int)>
c00105ce:	83 c4 10             	add    esp,0x10
c00105d1:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00105d5:	75 07                	jne    c00105de <setActiveTerminal(VgaText*)+0x55>
c00105d7:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00105de:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00105e2:	83 c4 08             	add    esp,0x8
c00105e5:	5b                   	pop    ebx
c00105e6:	e9 05 fd ff ff       	jmp    c00102f0 <VgaText::load()>

c00105eb <doTerminalCycle()>:
c00105eb:	83 ec 18             	sub    esp,0x18
c00105ee:	a1 e0 df 02 c0       	mov    eax,ds:0xc002dfe0
c00105f3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00105f6:	50                   	push   eax
c00105f7:	a3 e0 df 02 c0       	mov    ds:0xc002dfe0,eax
c00105fc:	e8 88 ff ff ff       	call   c0010589 <setActiveTerminal(VgaText*)>
c0010601:	83 c4 1c             	add    esp,0x1c
c0010604:	c3                   	ret    
c0010605:	90                   	nop

c0010606 <VgaText::setCursorX(int)>:
c0010606:	83 ec 10             	sub    esp,0x10
c0010609:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001060d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010614:	50                   	push   eax
c0010615:	e8 58 ff ff ff       	call   c0010572 <VgaText::setCursor(int, int)>
c001061a:	83 c4 1c             	add    esp,0x1c
c001061d:	c3                   	ret    

c001061e <VgaText::setCursorY(int)>:
c001061e:	83 ec 10             	sub    esp,0x10
c0010621:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010625:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010629:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001062c:	50                   	push   eax
c001062d:	e8 40 ff ff ff       	call   c0010572 <VgaText::setCursor(int, int)>
c0010632:	83 c4 1c             	add    esp,0x1c
c0010635:	c3                   	ret    

c0010636 <VgaText::incrementCursor(bool)>:
c0010636:	56                   	push   esi
c0010637:	53                   	push   ebx
c0010638:	51                   	push   ecx
c0010639:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001063d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010641:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010644:	40                   	inc    eax
c0010645:	83 f8 50             	cmp    eax,0x50
c0010648:	74 05                	je     c001064f <VgaText::incrementCursor(bool)+0x19>
c001064a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001064d:	eb 24                	jmp    c0010673 <VgaText::incrementCursor(bool)+0x3d>
c001064f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010652:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010659:	8d 50 01             	lea    edx,[eax+0x1]
c001065c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001065f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010662:	75 0f                	jne    c0010673 <VgaText::incrementCursor(bool)+0x3d>
c0010664:	83 ec 0c             	sub    esp,0xc
c0010667:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001066a:	53                   	push   ebx
c001066b:	e8 f0 fd ff ff       	call   c0010460 <VgaText::scrollScreen()>
c0010670:	83 c4 10             	add    esp,0x10
c0010673:	89 f0                	mov    eax,esi
c0010675:	84 c0                	test   al,al
c0010677:	74 0c                	je     c0010685 <VgaText::incrementCursor(bool)+0x4f>
c0010679:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001067d:	5a                   	pop    edx
c001067e:	5b                   	pop    ebx
c001067f:	5e                   	pop    esi
c0010680:	e9 b9 fc ff ff       	jmp    c001033e <VgaText::updateCursor()>
c0010685:	58                   	pop    eax
c0010686:	5b                   	pop    ebx
c0010687:	5e                   	pop    esi
c0010688:	c3                   	ret    
c0010689:	90                   	nop

c001068a <VgaText::decrementCursor(bool)>:
c001068a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001068e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010692:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010695:	85 c0                	test   eax,eax
c0010697:	74 04                	je     c001069d <VgaText::decrementCursor(bool)+0x13>
c0010699:	48                   	dec    eax
c001069a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c001069d:	84 c9                	test   cl,cl
c001069f:	74 09                	je     c00106aa <VgaText::decrementCursor(bool)+0x20>
c00106a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00106a5:	e9 94 fc ff ff       	jmp    c001033e <VgaText::updateCursor()>
c00106aa:	c3                   	ret    
c00106ab:	90                   	nop

c00106ac <VgaText::putchar(char, VgaColour, VgaColour)>:
c00106ac:	53                   	push   ebx
c00106ad:	83 ec 08             	sub    esp,0x8
c00106b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00106bc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00106c0:	3c 07                	cmp    al,0x7
c00106c2:	75 2a                	jne    c00106ee <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00106c4:	a1 98 e0 02 c0       	mov    eax,ds:0xc002e098
c00106c9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00106d1:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00106d9:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00106e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00106e5:	83 c4 08             	add    esp,0x8
c00106e8:	5b                   	pop    ebx
c00106e9:	e9 46 2f 00 00       	jmp    c0013634 <Buzzer::beep(int, int, bool)>
c00106ee:	3c 0d                	cmp    al,0xd
c00106f0:	75 09                	jne    c00106fb <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00106f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00106f9:	eb 2c                	jmp    c0010727 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00106fb:	3c 0a                	cmp    al,0xa
c00106fd:	75 31                	jne    c0010730 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00106ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010702:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010709:	8d 50 01             	lea    edx,[eax+0x1]
c001070c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001070f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010712:	75 0f                	jne    c0010723 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010714:	83 ec 0c             	sub    esp,0xc
c0010717:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001071a:	53                   	push   ebx
c001071b:	e8 40 fd ff ff       	call   c0010460 <VgaText::scrollScreen()>
c0010720:	83 c4 10             	add    esp,0x10
c0010723:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010727:	83 c4 08             	add    esp,0x8
c001072a:	5b                   	pop    ebx
c001072b:	e9 0e fc ff ff       	jmp    c001033e <VgaText::updateCursor()>
c0010730:	3c 08                	cmp    al,0x8
c0010732:	75 25                	jne    c0010759 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010734:	50                   	push   eax
c0010735:	50                   	push   eax
c0010736:	6a 01                	push   0x1
c0010738:	53                   	push   ebx
c0010739:	e8 4c ff ff ff       	call   c001068a <VgaText::decrementCursor(bool)>
c001073e:	5a                   	pop    edx
c001073f:	59                   	pop    ecx
c0010740:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010743:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010746:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010749:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001074c:	6a 20                	push   0x20
c001074e:	53                   	push   ebx
c001074f:	e8 b2 fd ff ff       	call   c0010506 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010754:	83 c4 28             	add    esp,0x28
c0010757:	5b                   	pop    ebx
c0010758:	c3                   	ret    
c0010759:	83 ec 08             	sub    esp,0x8
c001075c:	0f be c0             	movsx  eax,al
c001075f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010762:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010765:	51                   	push   ecx
c0010766:	52                   	push   edx
c0010767:	50                   	push   eax
c0010768:	53                   	push   ebx
c0010769:	e8 98 fd ff ff       	call   c0010506 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001076e:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010772:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001077a:	83 c4 28             	add    esp,0x28
c001077d:	5b                   	pop    ebx
c001077e:	e9 b3 fe ff ff       	jmp    c0010636 <VgaText::incrementCursor(bool)>
c0010783:	90                   	nop

c0010784 <VgaText::doUpdate()>:
c0010784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010788:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c001078b:	85 c0                	test   eax,eax
c001078d:	74 02                	je     c0010791 <VgaText::doUpdate()+0xd>
c001078f:	ff e0                	jmp    eax
c0010791:	c3                   	ret    

c0010792 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010792:	55                   	push   ebp
c0010793:	31 ed                	xor    ebp,ebp
c0010795:	57                   	push   edi
c0010796:	56                   	push   esi
c0010797:	53                   	push   ebx
c0010798:	83 ec 1c             	sub    esp,0x1c
c001079b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001079f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107a4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00107ab:	50                   	push   eax
c00107ac:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107b1:	50                   	push   eax
c00107b2:	e8 97 fc ff ff       	call   c001044e <VgaText::combineColours(unsigned char, unsigned char)>
c00107b7:	59                   	pop    ecx
c00107b8:	0f b6 c0             	movzx  eax,al
c00107bb:	5e                   	pop    esi
c00107bc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00107c1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00107c5:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00107c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107cc:	0f b7 f6             	movzx  esi,si
c00107cf:	01 f6                	add    esi,esi
c00107d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00107d4:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00107d7:	84 c0                	test   al,al
c00107d9:	0f 84 fd 00 00 00    	je     c00108dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00107df:	3c 0d                	cmp    al,0xd
c00107e1:	75 0c                	jne    c00107ef <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00107e3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00107ea:	e9 e7 00 00 00       	jmp    c00108d6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00107ef:	3c 0a                	cmp    al,0xa
c00107f1:	75 47                	jne    c001083a <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00107f3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00107f6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00107fd:	8d 48 01             	lea    ecx,[eax+0x1]
c0010800:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010803:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010806:	75 0f                	jne    c0010817 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010808:	83 ec 0c             	sub    esp,0xc
c001080b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001080e:	53                   	push   ebx
c001080f:	e8 4c fc ff ff       	call   c0010460 <VgaText::scrollScreen()>
c0010814:	83 c4 10             	add    esp,0x10
c0010817:	83 ec 0c             	sub    esp,0xc
c001081a:	31 ed                	xor    ebp,ebp
c001081c:	53                   	push   ebx
c001081d:	e8 1c fb ff ff       	call   c001033e <VgaText::updateCursor()>
c0010822:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010827:	83 c4 10             	add    esp,0x10
c001082a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001082d:	0f b7 f6             	movzx  esi,si
c0010830:	01 f6                	add    esi,esi
c0010832:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010835:	e9 9c 00 00 00       	jmp    c00108d6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001083a:	3c 08                	cmp    al,0x8
c001083c:	75 35                	jne    c0010873 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c001083e:	56                   	push   esi
c001083f:	56                   	push   esi
c0010840:	6a 01                	push   0x1
c0010842:	53                   	push   ebx
c0010843:	e8 42 fe ff ff       	call   c001068a <VgaText::decrementCursor(bool)>
c0010848:	58                   	pop    eax
c0010849:	5a                   	pop    edx
c001084a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001084d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010850:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010853:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010856:	6a 20                	push   0x20
c0010858:	53                   	push   ebx
c0010859:	e8 a8 fc ff ff       	call   c0010506 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001085e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010863:	83 c4 20             	add    esp,0x20
c0010866:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010869:	0f b7 f6             	movzx  esi,si
c001086c:	01 f6                	add    esi,esi
c001086e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010871:	eb 63                	jmp    c00108d6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010873:	51                   	push   ecx
c0010874:	51                   	push   ecx
c0010875:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010879:	50                   	push   eax
c001087a:	e8 75 fc ff ff       	call   c00104f4 <VgaText::combineCharAndColour(char, unsigned char)>
c001087f:	83 c4 10             	add    esp,0x10
c0010882:	66 89 06             	mov    WORD PTR [esi],ax
c0010885:	39 1d e4 df 02 c0    	cmp    DWORD PTR ds:0xc002dfe4,ebx
c001088b:	75 21                	jne    c00108ae <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001088d:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010890:	85 c0                	test   eax,eax
c0010892:	74 1a                	je     c00108ae <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010894:	52                   	push   edx
c0010895:	52                   	push   edx
c0010896:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010899:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001089c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108a4:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00108a7:	51                   	push   ecx
c00108a8:	53                   	push   ebx
c00108a9:	ff d0                	call   eax
c00108ab:	83 c4 20             	add    esp,0x20
c00108ae:	83 c6 02             	add    esi,0x2
c00108b1:	50                   	push   eax
c00108b2:	50                   	push   eax
c00108b3:	6a 00                	push   0x0
c00108b5:	53                   	push   ebx
c00108b6:	e8 7b fd ff ff       	call   c0010636 <VgaText::incrementCursor(bool)>
c00108bb:	83 c4 10             	add    esp,0x10
c00108be:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00108c2:	75 0d                	jne    c00108d1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c00108c4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00108c9:	0f b7 f6             	movzx  esi,si
c00108cc:	01 f6                	add    esi,esi
c00108ce:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108d1:	bd 01 00 00 00       	mov    ebp,0x1
c00108d6:	47                   	inc    edi
c00108d7:	e9 f8 fe ff ff       	jmp    c00107d4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00108dc:	83 ec 0c             	sub    esp,0xc
c00108df:	53                   	push   ebx
c00108e0:	e8 59 fa ff ff       	call   c001033e <VgaText::updateCursor()>
c00108e5:	83 c4 10             	add    esp,0x10
c00108e8:	89 e8                	mov    eax,ebp
c00108ea:	84 c0                	test   al,al
c00108ec:	74 0c                	je     c00108fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00108ee:	83 ec 0c             	sub    esp,0xc
c00108f1:	53                   	push   ebx
c00108f2:	e8 8d fe ff ff       	call   c0010784 <VgaText::doUpdate()>
c00108f7:	83 c4 10             	add    esp,0x10
c00108fa:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010901:	83 c4 1c             	add    esp,0x1c
c0010904:	5b                   	pop    ebx
c0010905:	5e                   	pop    esi
c0010906:	5f                   	pop    edi
c0010907:	5d                   	pop    ebp
c0010908:	c3                   	ret    
c0010909:	90                   	nop

c001090a <VgaText::clearScreen()>:
c001090a:	57                   	push   edi
c001090b:	56                   	push   esi
c001090c:	31 f6                	xor    esi,esi
c001090e:	53                   	push   ebx
c001090f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010913:	52                   	push   edx
c0010914:	6a 00                	push   0x0
c0010916:	6a 00                	push   0x0
c0010918:	53                   	push   ebx
c0010919:	e8 54 fc ff ff       	call   c0010572 <VgaText::setCursor(int, int)>
c001091e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010925:	83 c4 10             	add    esp,0x10
c0010928:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001092b:	7e 20                	jle    c001094d <VgaText::clearScreen()+0x43>
c001092d:	31 ff                	xor    edi,edi
c001092f:	50                   	push   eax
c0010930:	50                   	push   eax
c0010931:	56                   	push   esi
c0010932:	57                   	push   edi
c0010933:	47                   	inc    edi
c0010934:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010937:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001093a:	6a 20                	push   0x20
c001093c:	53                   	push   ebx
c001093d:	e8 c4 fb ff ff       	call   c0010506 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010942:	83 c4 20             	add    esp,0x20
c0010945:	83 ff 50             	cmp    edi,0x50
c0010948:	75 e5                	jne    c001092f <VgaText::clearScreen()+0x25>
c001094a:	46                   	inc    esi
c001094b:	eb db                	jmp    c0010928 <VgaText::clearScreen()+0x1e>
c001094d:	83 ec 0c             	sub    esp,0xc
c0010950:	53                   	push   ebx
c0010951:	e8 2e fe ff ff       	call   c0010784 <VgaText::doUpdate()>
c0010956:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001095d:	83 c4 10             	add    esp,0x10
c0010960:	5b                   	pop    ebx
c0010961:	5e                   	pop    esi
c0010962:	5f                   	pop    edi
c0010963:	c3                   	ret    

c0010964 <VgaText::putchar(char)>:
c0010964:	56                   	push   esi
c0010965:	53                   	push   ebx
c0010966:	83 ec 14             	sub    esp,0x14
c0010969:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001096d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010971:	3c 5b                	cmp    al,0x5b
c0010973:	75 18                	jne    c001098d <VgaText::putchar(char)+0x29>
c0010975:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010979:	74 1f                	je     c001099a <VgaText::putchar(char)+0x36>
c001097b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010981:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010988:	e9 bd 00 00 00       	jmp    c0010a4a <VgaText::putchar(char)+0xe6>
c001098d:	3c 1b                	cmp    al,0x1b
c001098f:	75 09                	jne    c001099a <VgaText::putchar(char)+0x36>
c0010991:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010995:	e9 b0 00 00 00       	jmp    c0010a4a <VgaText::putchar(char)+0xe6>
c001099a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c001099d:	84 c9                	test   cl,cl
c001099f:	0f 84 92 00 00 00    	je     c0010a37 <VgaText::putchar(char)+0xd3>
c00109a5:	8d 50 c0             	lea    edx,[eax-0x40]
c00109a8:	80 fa 3e             	cmp    dl,0x3e
c00109ab:	77 76                	ja     c0010a23 <VgaText::putchar(char)+0xbf>
c00109ad:	3c 6d                	cmp    al,0x6d
c00109af:	75 47                	jne    c00109f8 <VgaText::putchar(char)+0x94>
c00109b1:	31 f6                	xor    esi,esi
c00109b3:	31 d2                	xor    edx,edx
c00109b5:	31 c0                	xor    eax,eax
c00109b7:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00109ba:	7e 2d                	jle    c00109e9 <VgaText::putchar(char)+0x85>
c00109bc:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00109c1:	80 fa 3b             	cmp    dl,0x3b
c00109c4:	75 17                	jne    c00109dd <VgaText::putchar(char)+0x79>
c00109c6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109ca:	50                   	push   eax
c00109cb:	53                   	push   ebx
c00109cc:	e8 83 f9 ff ff       	call   c0010354 <VgaText::doANSI_SGR(int)>
c00109d1:	59                   	pop    ecx
c00109d2:	31 d2                	xor    edx,edx
c00109d4:	58                   	pop    eax
c00109d5:	31 c0                	xor    eax,eax
c00109d7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00109db:	eb 09                	jmp    c00109e6 <VgaText::putchar(char)+0x82>
c00109dd:	6b c0 0a             	imul   eax,eax,0xa
c00109e0:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00109e4:	88 ca                	mov    dl,cl
c00109e6:	46                   	inc    esi
c00109e7:	eb ce                	jmp    c00109b7 <VgaText::putchar(char)+0x53>
c00109e9:	84 d2                	test   dl,dl
c00109eb:	74 2e                	je     c0010a1b <VgaText::putchar(char)+0xb7>
c00109ed:	50                   	push   eax
c00109ee:	53                   	push   ebx
c00109ef:	e8 60 f9 ff ff       	call   c0010354 <VgaText::doANSI_SGR(int)>
c00109f4:	58                   	pop    eax
c00109f5:	5a                   	pop    edx
c00109f6:	eb 23                	jmp    c0010a1b <VgaText::putchar(char)+0xb7>
c00109f8:	3c 4a                	cmp    al,0x4a
c00109fa:	75 1f                	jne    c0010a1b <VgaText::putchar(char)+0xb7>
c00109fc:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010a00:	75 19                	jne    c0010a1b <VgaText::putchar(char)+0xb7>
c0010a02:	83 ec 0c             	sub    esp,0xc
c0010a05:	53                   	push   ebx
c0010a06:	e8 ff fe ff ff       	call   c001090a <VgaText::clearScreen()>
c0010a0b:	83 c4 0c             	add    esp,0xc
c0010a0e:	6a 00                	push   0x0
c0010a10:	6a 00                	push   0x0
c0010a12:	53                   	push   ebx
c0010a13:	e8 5a fb ff ff       	call   c0010572 <VgaText::setCursor(int, int)>
c0010a18:	83 c4 10             	add    esp,0x10
c0010a1b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010a21:	eb 27                	jmp    c0010a4a <VgaText::putchar(char)+0xe6>
c0010a23:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010a26:	83 fa 0e             	cmp    edx,0xe
c0010a29:	7f 1f                	jg     c0010a4a <VgaText::putchar(char)+0xe6>
c0010a2b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010a2e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010a31:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010a35:	eb 13                	jmp    c0010a4a <VgaText::putchar(char)+0xe6>
c0010a37:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a3a:	0f be c0             	movsx  eax,al
c0010a3d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a40:	50                   	push   eax
c0010a41:	53                   	push   ebx
c0010a42:	e8 65 fc ff ff       	call   c00106ac <VgaText::putchar(char, VgaColour, VgaColour)>
c0010a47:	83 c4 10             	add    esp,0x10
c0010a4a:	83 c4 14             	add    esp,0x14
c0010a4d:	5b                   	pop    ebx
c0010a4e:	5e                   	pop    esi
c0010a4f:	c3                   	ret    

c0010a50 <VgaText::putx(unsigned int)>:
c0010a50:	57                   	push   edi
c0010a51:	b9 11 00 00 00       	mov    ecx,0x11
c0010a56:	56                   	push   esi
c0010a57:	be 3a a5 02 c0       	mov    esi,0xc002a53a
c0010a5c:	53                   	push   ebx
c0010a5d:	83 ec 20             	sub    esp,0x20
c0010a60:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a64:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010a68:	fc                   	cld    
c0010a69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010a6b:	be 08 00 00 00       	mov    esi,0x8
c0010a70:	50                   	push   eax
c0010a71:	50                   	push   eax
c0010a72:	89 d8                	mov    eax,ebx
c0010a74:	c1 e3 04             	shl    ebx,0x4
c0010a77:	c1 e8 1c             	shr    eax,0x1c
c0010a7a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010a7f:	50                   	push   eax
c0010a80:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010a84:	e8 db fe ff ff       	call   c0010964 <VgaText::putchar(char)>
c0010a89:	83 c4 10             	add    esp,0x10
c0010a8c:	4e                   	dec    esi
c0010a8d:	75 e1                	jne    c0010a70 <VgaText::putx(unsigned int)+0x20>
c0010a8f:	83 c4 20             	add    esp,0x20
c0010a92:	5b                   	pop    ebx
c0010a93:	5e                   	pop    esi
c0010a94:	5f                   	pop    edi
c0010a95:	c3                   	ret    

c0010a96 <VgaText::puts(char const*)>:
c0010a96:	53                   	push   ebx
c0010a97:	83 ec 08             	sub    esp,0x8
c0010a9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010a9e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010aa1:	84 c0                	test   al,al
c0010aa3:	74 12                	je     c0010ab7 <VgaText::puts(char const*)+0x21>
c0010aa5:	43                   	inc    ebx
c0010aa6:	51                   	push   ecx
c0010aa7:	51                   	push   ecx
c0010aa8:	50                   	push   eax
c0010aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aad:	e8 b2 fe ff ff       	call   c0010964 <VgaText::putchar(char)>
c0010ab2:	83 c4 10             	add    esp,0x10
c0010ab5:	eb e7                	jmp    c0010a9e <VgaText::puts(char const*)+0x8>
c0010ab7:	83 c4 08             	add    esp,0x8
c0010aba:	5b                   	pop    ebx
c0010abb:	c3                   	ret    

c0010abc <VgaText::VgaText(char const*)>:
c0010abc:	57                   	push   edi
c0010abd:	56                   	push   esi
c0010abe:	53                   	push   ebx
c0010abf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac3:	83 ec 08             	sub    esp,0x8
c0010ac6:	6a 00                	push   0x0
c0010ac8:	50                   	push   eax
c0010ac9:	e8 44 05 00 00       	call   c0011012 <UnixFile::UnixFile(int)>
c0010ace:	83 c4 10             	add    esp,0x10
c0010ad1:	ba a0 a5 02 c0       	mov    edx,0xc002a5a0
c0010ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ada:	89 10                	mov    DWORD PTR [eax],edx
c0010adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae0:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aeb:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af6:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010afe:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b06:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010b0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b11:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b1c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b27:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b32:	8d 50 60             	lea    edx,[eax+0x60]
c0010b35:	bb c0 df 02 c0       	mov    ebx,0xc002dfc0
c0010b3a:	b8 08 00 00 00       	mov    eax,0x8
c0010b3f:	fc                   	cld    
c0010b40:	89 d7                	mov    edi,edx
c0010b42:	89 de                	mov    esi,ebx
c0010b44:	89 c1                	mov    ecx,eax
c0010b46:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4c:	05 82 00 00 00       	add    eax,0x82
c0010b51:	83 ec 08             	sub    esp,0x8
c0010b54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b58:	50                   	push   eax
c0010b59:	e8 ae fc fe ff       	call   c000080c <strcpy>
c0010b5e:	83 c4 10             	add    esp,0x10
c0010b61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b65:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010b6c:	83 ec 0c             	sub    esp,0xc
c0010b6f:	6a 01                	push   0x1
c0010b71:	e8 df 08 00 00       	call   c0011455 <Virt::allocateKernelVirtualPages(int)>
c0010b76:	83 c4 10             	add    esp,0x10
c0010b79:	89 c2                	mov    edx,eax
c0010b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010b82:	8b 1d 90 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e090
c0010b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010b8f:	89 c6                	mov    esi,eax
c0010b91:	e8 35 f0 ff ff       	call   c000fbcb <Phys::allocatePage()>
c0010b96:	68 05 0c 00 00       	push   0xc05
c0010b9b:	56                   	push   esi
c0010b9c:	50                   	push   eax
c0010b9d:	53                   	push   ebx
c0010b9e:	e8 59 0f 00 00       	call   c0011afc <VAS::mapPage(unsigned long, unsigned long, int)>
c0010ba3:	83 c4 10             	add    esp,0x10
c0010ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010baa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bad:	83 ec 04             	sub    esp,0x4
c0010bb0:	68 00 0f 00 00       	push   0xf00
c0010bb5:	6a 00                	push   0x0
c0010bb7:	50                   	push   eax
c0010bb8:	e8 93 fb fe ff       	call   c0000750 <memset>
c0010bbd:	83 c4 10             	add    esp,0x10
c0010bc0:	83 ec 04             	sub    esp,0x4
c0010bc3:	6a 00                	push   0x0
c0010bc5:	6a 07                	push   0x7
c0010bc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bcb:	e8 18 f8 ff ff       	call   c00103e8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010bd0:	83 c4 10             	add    esp,0x10
c0010bd3:	83 ec 04             	sub    esp,0x4
c0010bd6:	6a 00                	push   0x0
c0010bd8:	6a 00                	push   0x0
c0010bda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bde:	e8 8f f9 ff ff       	call   c0010572 <VgaText::setCursor(int, int)>
c0010be3:	83 c4 10             	add    esp,0x10
c0010be6:	83 ec 0c             	sub    esp,0xc
c0010be9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bed:	e8 18 fd ff ff       	call   c001090a <VgaText::clearScreen()>
c0010bf2:	83 c4 10             	add    esp,0x10
c0010bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bf9:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c01:	05 02 01 00 00       	add    eax,0x102
c0010c06:	83 ec 04             	sub    esp,0x4
c0010c09:	68 96 00 00 00       	push   0x96
c0010c0e:	6a 00                	push   0x0
c0010c10:	50                   	push   eax
c0010c11:	e8 3a fb fe ff       	call   c0000750 <memset>
c0010c16:	83 c4 10             	add    esp,0x10
c0010c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c1d:	05 98 01 00 00       	add    eax,0x198
c0010c22:	83 ec 04             	sub    esp,0x4
c0010c25:	68 2c 01 00 00       	push   0x12c
c0010c2a:	6a 00                	push   0x0
c0010c2c:	50                   	push   eax
c0010c2d:	e8 1e fb fe ff       	call   c0000750 <memset>
c0010c32:	83 c4 10             	add    esp,0x10
c0010c35:	90                   	nop
c0010c36:	5b                   	pop    ebx
c0010c37:	5e                   	pop    esi
c0010c38:	5f                   	pop    edi
c0010c39:	c3                   	ret    

c0010c3a <VgaText::receiveKey(unsigned char)>:
c0010c3a:	55                   	push   ebp
c0010c3b:	57                   	push   edi
c0010c3c:	56                   	push   esi
c0010c3d:	53                   	push   ebx
c0010c3e:	83 ec 1c             	sub    esp,0x1c
c0010c41:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c45:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c49:	84 db                	test   bl,bl
c0010c4b:	0f 84 c9 00 00 00    	je     c0010d1a <VgaText::receiveKey(unsigned char)+0xe0>
c0010c51:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010c57:	80 fb 08             	cmp    bl,0x8
c0010c5a:	75 2c                	jne    c0010c88 <VgaText::receiveKey(unsigned char)+0x4e>
c0010c5c:	83 ec 0c             	sub    esp,0xc
c0010c5f:	57                   	push   edi
c0010c60:	e8 07 fb fe ff       	call   c000076c <strlen>
c0010c65:	83 c4 10             	add    esp,0x10
c0010c68:	85 c0                	test   eax,eax
c0010c6a:	74 41                	je     c0010cad <VgaText::receiveKey(unsigned char)+0x73>
c0010c6c:	50                   	push   eax
c0010c6d:	50                   	push   eax
c0010c6e:	6a 08                	push   0x8
c0010c70:	56                   	push   esi
c0010c71:	e8 ee fc ff ff       	call   c0010964 <VgaText::putchar(char)>
c0010c76:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c79:	e8 ee fa fe ff       	call   c000076c <strlen>
c0010c7e:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010c86:	eb 22                	jmp    c0010caa <VgaText::receiveKey(unsigned char)+0x70>
c0010c88:	0f be c3             	movsx  eax,bl
c0010c8b:	52                   	push   edx
c0010c8c:	52                   	push   edx
c0010c8d:	50                   	push   eax
c0010c8e:	56                   	push   esi
c0010c8f:	e8 d0 fc ff ff       	call   c0010964 <VgaText::putchar(char)>
c0010c94:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010c98:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010c9d:	59                   	pop    ecx
c0010c9e:	5d                   	pop    ebp
c0010c9f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010ca3:	50                   	push   eax
c0010ca4:	57                   	push   edi
c0010ca5:	e8 a2 fc fe ff       	call   c000094c <strcat>
c0010caa:	83 c4 10             	add    esp,0x10
c0010cad:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010cb4:	75 05                	jne    c0010cbb <VgaText::receiveKey(unsigned char)+0x81>
c0010cb6:	80 fb 0a             	cmp    bl,0xa
c0010cb9:	75 53                	jne    c0010d0e <VgaText::receiveKey(unsigned char)+0xd4>
c0010cbb:	83 ec 0c             	sub    esp,0xc
c0010cbe:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010cc4:	53                   	push   ebx
c0010cc5:	e8 a2 fa fe ff       	call   c000076c <strlen>
c0010cca:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ccd:	89 c5                	mov    ebp,eax
c0010ccf:	e8 98 fa fe ff       	call   c000076c <strlen>
c0010cd4:	83 c4 10             	add    esp,0x10
c0010cd7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010cdb:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010ce0:	76 10                	jbe    c0010cf2 <VgaText::receiveKey(unsigned char)+0xb8>
c0010ce2:	83 ec 0c             	sub    esp,0xc
c0010ce5:	68 4b a5 02 c0       	push   0xc002a54b
c0010cea:	e8 24 93 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0010cef:	83 c4 10             	add    esp,0x10
c0010cf2:	50                   	push   eax
c0010cf3:	50                   	push   eax
c0010cf4:	57                   	push   edi
c0010cf5:	53                   	push   ebx
c0010cf6:	e8 51 fc fe ff       	call   c000094c <strcat>
c0010cfb:	83 c4 0c             	add    esp,0xc
c0010cfe:	68 96 00 00 00       	push   0x96
c0010d03:	6a 00                	push   0x0
c0010d05:	57                   	push   edi
c0010d06:	e8 45 fa fe ff       	call   c0000750 <memset>
c0010d0b:	83 c4 10             	add    esp,0x10
c0010d0e:	83 ec 0c             	sub    esp,0xc
c0010d11:	56                   	push   esi
c0010d12:	e8 6d fa ff ff       	call   c0010784 <VgaText::doUpdate()>
c0010d17:	83 c4 10             	add    esp,0x10
c0010d1a:	83 c4 1c             	add    esp,0x1c
c0010d1d:	5b                   	pop    ebx
c0010d1e:	5e                   	pop    esi
c0010d1f:	5f                   	pop    edi
c0010d20:	5d                   	pop    ebp
c0010d21:	c3                   	ret    

c0010d22 <VgaText::write(unsigned long long, void*, int*)>:
c0010d22:	55                   	push   ebp
c0010d23:	57                   	push   edi
c0010d24:	56                   	push   esi
c0010d25:	53                   	push   ebx
c0010d26:	83 ec 0c             	sub    esp,0xc
c0010d29:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010d2d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010d31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d35:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010d3c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010d3f:	39 eb                	cmp    ebx,ebp
c0010d41:	74 13                	je     c0010d56 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010d43:	43                   	inc    ebx
c0010d44:	50                   	push   eax
c0010d45:	50                   	push   eax
c0010d46:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010d4a:	50                   	push   eax
c0010d4b:	56                   	push   esi
c0010d4c:	e8 13 fc ff ff       	call   c0010964 <VgaText::putchar(char)>
c0010d51:	83 c4 10             	add    esp,0x10
c0010d54:	eb e9                	jmp    c0010d3f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010d56:	83 ec 0c             	sub    esp,0xc
c0010d59:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010d60:	56                   	push   esi
c0010d61:	e8 1e fa ff ff       	call   c0010784 <VgaText::doUpdate()>
c0010d66:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010d6a:	89 38                	mov    DWORD PTR [eax],edi
c0010d6c:	83 c4 1c             	add    esp,0x1c
c0010d6f:	31 c0                	xor    eax,eax
c0010d71:	5b                   	pop    ebx
c0010d72:	5e                   	pop    esi
c0010d73:	5f                   	pop    edi
c0010d74:	5d                   	pop    ebp
c0010d75:	c3                   	ret    

c0010d76 <newTerminal(char*)>:
c0010d76:	83 ec 28             	sub    esp,0x28
c0010d79:	68 c4 02 00 00       	push   0x2c4
c0010d7e:	e8 4c ea ff ff       	call   c000f7cf <malloc>
c0010d83:	5a                   	pop    edx
c0010d84:	59                   	pop    ecx
c0010d85:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010d89:	50                   	push   eax
c0010d8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010d8e:	e8 29 fd ff ff       	call   c0010abc <VgaText::VgaText(char const*)>
c0010d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010d97:	83 c4 2c             	add    esp,0x2c
c0010d9a:	c3                   	ret    
c0010d9b:	90                   	nop

c0010d9c <TSS::TSS()>:
c0010d9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010da0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010da7:	90                   	nop
c0010da8:	c3                   	ret    
c0010da9:	90                   	nop

c0010daa <TSS::setESP(unsigned long)>:
c0010daa:	55                   	push   ebp
c0010dab:	89 e5                	mov    ebp,esp
c0010dad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010db0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010db3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010db6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010db9:	90                   	nop
c0010dba:	5d                   	pop    ebp
c0010dbb:	c3                   	ret    

c0010dbc <TSS::flush()>:
c0010dbc:	55                   	push   ebp
c0010dbd:	89 e5                	mov    ebp,esp
c0010dbf:	83 ec 10             	sub    esp,0x10
c0010dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dc7:	83 c8 03             	or     eax,0x3
c0010dca:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010dce:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010dd2:	66 89 d0             	mov    ax,dx
c0010dd5:	0f 00 d8             	ltr    ax
c0010dd8:	90                   	nop
c0010dd9:	c9                   	leave  
c0010dda:	c3                   	ret    
c0010ddb:	90                   	nop

c0010ddc <TSS::setup(unsigned long, unsigned long)>:
c0010ddc:	55                   	push   ebp
c0010ddd:	89 e5                	mov    ebp,esp
c0010ddf:	83 ec 18             	sub    esp,0x18
c0010de2:	83 ec 0c             	sub    esp,0xc
c0010de5:	6a 68                	push   0x68
c0010de7:	e8 e3 e9 ff ff       	call   c000f7cf <malloc>
c0010dec:	83 c4 10             	add    esp,0x10
c0010def:	89 c2                	mov    edx,eax
c0010df1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010df4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dfd:	83 ec 04             	sub    esp,0x4
c0010e00:	6a 68                	push   0x68
c0010e02:	6a 00                	push   0x0
c0010e04:	50                   	push   eax
c0010e05:	e8 46 f9 fe ff       	call   c0000750 <memset>
c0010e0a:	83 c4 10             	add    esp,0x10
c0010e0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e13:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010e19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e1f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010e25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e2b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e2e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e37:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010e3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e43:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010e49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e4f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e5b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010e61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e67:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010e6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e73:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010e79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e7f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010e82:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010e85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e8e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e97:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ea1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea4:	0f 20 da             	mov    edx,cr3
c0010ea7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010eaa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010ead:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010eb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eb6:	83 ec 08             	sub    esp,0x8
c0010eb9:	50                   	push   eax
c0010eba:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010ebd:	50                   	push   eax
c0010ebe:	e8 05 e1 ff ff       	call   c000efc8 <GDTEntry::setBase(unsigned int)>
c0010ec3:	83 c4 10             	add    esp,0x10
c0010ec6:	83 ec 08             	sub    esp,0x8
c0010ec9:	6a 68                	push   0x68
c0010ecb:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010ece:	50                   	push   eax
c0010ecf:	e8 10 e1 ff ff       	call   c000efe4 <GDTEntry::setLimit(unsigned int)>
c0010ed4:	83 c4 10             	add    esp,0x10
c0010ed7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010edb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ede:	83 e0 0f             	and    eax,0xf
c0010ee1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010ee4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ee7:	83 c8 40             	or     eax,0x40
c0010eea:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010eed:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0010ef2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ef8:	05 78 01 00 00       	add    eax,0x178
c0010efd:	83 ec 04             	sub    esp,0x4
c0010f00:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010f03:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010f06:	50                   	push   eax
c0010f07:	e8 0c e1 ff ff       	call   c000f018 <GDT::addEntry(GDTEntry)>
c0010f0c:	83 c4 10             	add    esp,0x10
c0010f0f:	89 c2                	mov    edx,eax
c0010f11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f14:	89 10                	mov    DWORD PTR [eax],edx
c0010f16:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0010f1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f21:	05 78 01 00 00       	add    eax,0x178
c0010f26:	83 ec 0c             	sub    esp,0xc
c0010f29:	50                   	push   eax
c0010f2a:	e8 13 e1 ff ff       	call   c000f042 <GDT::flush()>
c0010f2f:	83 c4 10             	add    esp,0x10
c0010f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f35:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f37:	c9                   	leave  
c0010f38:	c3                   	ret    
c0010f39:	90                   	nop

c0010f3a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010f3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f45:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010f4a:	75 08                	jne    c0010f54 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010f4c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010f52:	eb 38                	jmp    c0010f8c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010f54:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010f59:	75 17                	jne    c0010f72 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010f5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f60:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f63:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010f69:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010f6f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010f72:	89 c1                	mov    ecx,eax
c0010f74:	83 e1 fd             	and    ecx,0xfffffffd
c0010f77:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010f7d:	74 cd                	je     c0010f4c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010f7f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010f84:	83 e0 ef             	and    eax,0xffffffef
c0010f87:	83 f8 08             	cmp    eax,0x8
c0010f8a:	76 c0                	jbe    c0010f4c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010f8c:	31 c0                	xor    eax,eax
c0010f8e:	c3                   	ret    
c0010f8f:	90                   	nop

c0010f90 <ReservedFilename::isAtty()>:
c0010f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f94:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f97:	31 c0                	xor    eax,eax
c0010f99:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010f9f:	74 09                	je     c0010faa <ReservedFilename::isAtty()+0x1a>
c0010fa1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010fa7:	0f 94 c0             	sete   al
c0010faa:	c3                   	ret    
c0010fab:	90                   	nop

c0010fac <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010fb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fb7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fbb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010fc0:	75 08                	jne    c0010fca <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010fc2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010fc8:	eb 3d                	jmp    c0011007 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010fca:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010fcf:	75 17                	jne    c0010fe8 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010fd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fd6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010fd9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010fdf:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fe1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010fe5:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010fe8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010fed:	75 04                	jne    c0010ff3 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010fef:	89 0a                	mov    DWORD PTR [edx],ecx
c0010ff1:	eb 14                	jmp    c0011007 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010ff3:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010ff8:	74 c8                	je     c0010fc2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010ffa:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010fff:	83 e0 ef             	and    eax,0xffffffef
c0011002:	83 f8 08             	cmp    eax,0x8
c0011005:	76 bb                	jbe    c0010fc2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011007:	31 c0                	xor    eax,eax
c0011009:	c3                   	ret    

c001100a <UnixFile::getFileDescriptor()>:
c001100a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001100e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011011:	c3                   	ret    

c0011012 <UnixFile::UnixFile(int)>:
c0011012:	53                   	push   ebx
c0011013:	83 ec 28             	sub    esp,0x28
c0011016:	ba 68 a6 02 c0       	mov    edx,0xc002a668
c001101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001101f:	89 10                	mov    DWORD PTR [eax],edx
c0011021:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011029:	0f 8f 8c 01 00 00    	jg     c00111bb <UnixFile::UnixFile(int)+0x1a9>
c001102f:	a1 c0 ce 02 c0       	mov    eax,ds:0xc002cec0
c0011034:	8d 50 01             	lea    edx,[eax+0x1]
c0011037:	89 15 c0 ce 02 c0    	mov    DWORD PTR ds:0xc002cec0,edx
c001103d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011041:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011044:	83 ec 08             	sub    esp,0x8
c0011047:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001104b:	68 78 e0 02 c0       	push   0xc002e078
c0011050:	e8 e1 77 01 00       	call   c0028836 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011055:	83 c4 10             	add    esp,0x10
c0011058:	a0 74 e0 02 c0       	mov    al,ds:0xc002e074
c001105d:	83 f0 01             	xor    eax,0x1
c0011060:	84 c0                	test   al,al
c0011062:	0f 84 54 01 00 00    	je     c00111bc <UnixFile::UnixFile(int)+0x1aa>
c0011068:	c6 05 74 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e074,0x1
c001106f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011077:	83 ec 0c             	sub    esp,0xc
c001107a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001107e:	e8 4c e7 ff ff       	call   c000f7cf <malloc>
c0011083:	83 c4 10             	add    esp,0x10
c0011086:	89 c3                	mov    ebx,eax
c0011088:	83 ec 08             	sub    esp,0x8
c001108b:	68 03 ff ff 0f       	push   0xfffff03
c0011090:	53                   	push   ebx
c0011091:	e8 2c 01 00 00       	call   c00111c2 <ReservedFilename::ReservedFilename(int)>
c0011096:	83 c4 10             	add    esp,0x10
c0011099:	89 1d 6c e0 02 c0    	mov    DWORD PTR ds:0xc002e06c,ebx
c001109f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00110a7:	83 ec 0c             	sub    esp,0xc
c00110aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ae:	e8 1c e7 ff ff       	call   c000f7cf <malloc>
c00110b3:	83 c4 10             	add    esp,0x10
c00110b6:	89 c3                	mov    ebx,eax
c00110b8:	83 ec 08             	sub    esp,0x8
c00110bb:	68 01 ff ff 0f       	push   0xfffff01
c00110c0:	53                   	push   ebx
c00110c1:	e8 fc 00 00 00       	call   c00111c2 <ReservedFilename::ReservedFilename(int)>
c00110c6:	83 c4 10             	add    esp,0x10
c00110c9:	89 1d 70 e0 02 c0    	mov    DWORD PTR ds:0xc002e070,ebx
c00110cf:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00110d7:	83 ec 0c             	sub    esp,0xc
c00110da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00110de:	e8 ec e6 ff ff       	call   c000f7cf <malloc>
c00110e3:	83 c4 10             	add    esp,0x10
c00110e6:	89 c3                	mov    ebx,eax
c00110e8:	83 ec 08             	sub    esp,0x8
c00110eb:	68 00 ff ff 0f       	push   0xfffff00
c00110f0:	53                   	push   ebx
c00110f1:	e8 cc 00 00 00       	call   c00111c2 <ReservedFilename::ReservedFilename(int)>
c00110f6:	83 c4 10             	add    esp,0x10
c00110f9:	89 1d 64 e0 02 c0    	mov    DWORD PTR ds:0xc002e064,ebx
c00110ff:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011107:	83 ec 0c             	sub    esp,0xc
c001110a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001110e:	e8 bc e6 ff ff       	call   c000f7cf <malloc>
c0011113:	83 c4 10             	add    esp,0x10
c0011116:	89 c3                	mov    ebx,eax
c0011118:	83 ec 08             	sub    esp,0x8
c001111b:	68 02 ff ff 0f       	push   0xfffff02
c0011120:	53                   	push   ebx
c0011121:	e8 9c 00 00 00       	call   c00111c2 <ReservedFilename::ReservedFilename(int)>
c0011126:	83 c4 10             	add    esp,0x10
c0011129:	89 1d 68 e0 02 c0    	mov    DWORD PTR ds:0xc002e068,ebx
c001112f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011137:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001113c:	7f 7e                	jg     c00111bc <UnixFile::UnixFile(int)+0x1aa>
c001113e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011146:	83 ec 0c             	sub    esp,0xc
c0011149:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001114d:	e8 7d e6 ff ff       	call   c000f7cf <malloc>
c0011152:	83 c4 10             	add    esp,0x10
c0011155:	89 c3                	mov    ebx,eax
c0011157:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001115b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011160:	83 ec 08             	sub    esp,0x8
c0011163:	50                   	push   eax
c0011164:	53                   	push   ebx
c0011165:	e8 58 00 00 00       	call   c00111c2 <ReservedFilename::ReservedFilename(int)>
c001116a:	83 c4 10             	add    esp,0x10
c001116d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011171:	89 1c 85 40 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fc0],ebx
c0011178:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011180:	83 ec 0c             	sub    esp,0xc
c0011183:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011187:	e8 43 e6 ff ff       	call   c000f7cf <malloc>
c001118c:	83 c4 10             	add    esp,0x10
c001118f:	89 c3                	mov    ebx,eax
c0011191:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011195:	05 20 ff ff 0f       	add    eax,0xfffff20
c001119a:	83 ec 08             	sub    esp,0x8
c001119d:	50                   	push   eax
c001119e:	53                   	push   ebx
c001119f:	e8 1e 00 00 00       	call   c00111c2 <ReservedFilename::ReservedFilename(int)>
c00111a4:	83 c4 10             	add    esp,0x10
c00111a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111ab:	89 1c 85 00 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2000],ebx
c00111b2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00111b6:	e9 7c ff ff ff       	jmp    c0011137 <UnixFile::UnixFile(int)+0x125>
c00111bb:	90                   	nop
c00111bc:	83 c4 28             	add    esp,0x28
c00111bf:	5b                   	pop    ebx
c00111c0:	c3                   	ret    
c00111c1:	90                   	nop

c00111c2 <ReservedFilename::ReservedFilename(int)>:
c00111c2:	83 ec 0c             	sub    esp,0xc
c00111c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c9:	83 ec 08             	sub    esp,0x8
c00111cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111d0:	50                   	push   eax
c00111d1:	e8 3c fe ff ff       	call   c0011012 <UnixFile::UnixFile(int)>
c00111d6:	83 c4 10             	add    esp,0x10
c00111d9:	ba 84 a6 02 c0       	mov    edx,0xc002a684
c00111de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e2:	89 10                	mov    DWORD PTR [eax],edx
c00111e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00111ef:	90                   	nop
c00111f0:	83 c4 0c             	add    esp,0xc
c00111f3:	c3                   	ret    

c00111f4 <UnixFile::~UnixFile()>:
c00111f4:	83 ec 1c             	sub    esp,0x1c
c00111f7:	ba 68 a6 02 c0       	mov    edx,0xc002a668
c00111fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011200:	89 10                	mov    DWORD PTR [eax],edx
c0011202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011206:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011209:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001120e:	7f 73                	jg     c0011283 <UnixFile::~UnixFile()+0x8f>
c0011210:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011218:	83 ec 0c             	sub    esp,0xc
c001121b:	68 78 e0 02 c0       	push   0xc002e078
c0011220:	e8 e5 76 01 00       	call   c002890a <LinkedList<UnixFile>::getFirstElement()>
c0011225:	83 c4 10             	add    esp,0x10
c0011228:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001122c:	83 ec 0c             	sub    esp,0xc
c001122f:	68 78 e0 02 c0       	push   0xc002e078
c0011234:	e8 d9 76 01 00       	call   c0028912 <LinkedList<UnixFile>::removeFirst()>
c0011239:	83 c4 10             	add    esp,0x10
c001123c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011240:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011244:	74 40                	je     c0011286 <UnixFile::~UnixFile()+0x92>
c0011246:	83 ec 08             	sub    esp,0x8
c0011249:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001124d:	68 78 e0 02 c0       	push   0xc002e078
c0011252:	e8 df 75 01 00       	call   c0028836 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011257:	83 c4 10             	add    esp,0x10
c001125a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001125e:	8d 50 01             	lea    edx,[eax+0x1]
c0011261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011265:	3d 88 13 00 00       	cmp    eax,0x1388
c001126a:	0f 94 c0             	sete   al
c001126d:	84 c0                	test   al,al
c001126f:	74 a7                	je     c0011218 <UnixFile::~UnixFile()+0x24>
c0011271:	83 ec 0c             	sub    esp,0xc
c0011274:	68 40 a6 02 c0       	push   0xc002a640
c0011279:	e8 95 8d 00 00       	call   c001a013 <Krnl::panic(char const*)>
c001127e:	83 c4 10             	add    esp,0x10
c0011281:	eb 95                	jmp    c0011218 <UnixFile::~UnixFile()+0x24>
c0011283:	90                   	nop
c0011284:	eb 01                	jmp    c0011287 <UnixFile::~UnixFile()+0x93>
c0011286:	90                   	nop
c0011287:	90                   	nop
c0011288:	83 c4 1c             	add    esp,0x1c
c001128b:	c3                   	ret    

c001128c <UnixFile::~UnixFile()>:
c001128c:	83 ec 0c             	sub    esp,0xc
c001128f:	83 ec 0c             	sub    esp,0xc
c0011292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011296:	e8 59 ff ff ff       	call   c00111f4 <UnixFile::~UnixFile()>
c001129b:	83 c4 10             	add    esp,0x10
c001129e:	83 ec 08             	sub    esp,0x8
c00112a1:	6a 0c                	push   0xc
c00112a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a7:	e8 a3 14 00 00       	call   c001274f <operator delete(void*, unsigned long)>
c00112ac:	83 c4 10             	add    esp,0x10
c00112af:	83 c4 0c             	add    esp,0xc
c00112b2:	c3                   	ret    
c00112b3:	90                   	nop

c00112b4 <ReservedFilename::~ReservedFilename()>:
c00112b4:	83 ec 0c             	sub    esp,0xc
c00112b7:	ba 84 a6 02 c0       	mov    edx,0xc002a684
c00112bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112c0:	89 10                	mov    DWORD PTR [eax],edx
c00112c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112c6:	83 ec 0c             	sub    esp,0xc
c00112c9:	50                   	push   eax
c00112ca:	e8 25 ff ff ff       	call   c00111f4 <UnixFile::~UnixFile()>
c00112cf:	83 c4 10             	add    esp,0x10
c00112d2:	90                   	nop
c00112d3:	83 c4 0c             	add    esp,0xc
c00112d6:	c3                   	ret    
c00112d7:	90                   	nop

c00112d8 <ReservedFilename::~ReservedFilename()>:
c00112d8:	83 ec 0c             	sub    esp,0xc
c00112db:	83 ec 0c             	sub    esp,0xc
c00112de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e2:	e8 cd ff ff ff       	call   c00112b4 <ReservedFilename::~ReservedFilename()>
c00112e7:	83 c4 10             	add    esp,0x10
c00112ea:	83 ec 08             	sub    esp,0x8
c00112ed:	6a 0c                	push   0xc
c00112ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f3:	e8 57 14 00 00       	call   c001274f <operator delete(void*, unsigned long)>
c00112f8:	83 c4 10             	add    esp,0x10
c00112fb:	83 c4 0c             	add    esp,0xc
c00112fe:	c3                   	ret    

c00112ff <getFromFileDescriptor(int)>:
c00112ff:	53                   	push   ebx
c0011300:	83 ec 08             	sub    esp,0x8
c0011303:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011307:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001130d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011313:	7f 2c                	jg     c0011341 <getFromFileDescriptor(int)+0x42>
c0011315:	83 ec 0c             	sub    esp,0xc
c0011318:	68 78 e0 02 c0       	push   0xc002e078
c001131d:	e8 e8 75 01 00       	call   c002890a <LinkedList<UnixFile>::getFirstElement()>
c0011322:	83 c4 10             	add    esp,0x10
c0011325:	85 c0                	test   eax,eax
c0011327:	75 04                	jne    c001132d <getFromFileDescriptor(int)+0x2e>
c0011329:	31 c0                	xor    eax,eax
c001132b:	eb 6e                	jmp    c001139b <getFromFileDescriptor(int)+0x9c>
c001132d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011330:	74 69                	je     c001139b <getFromFileDescriptor(int)+0x9c>
c0011332:	52                   	push   edx
c0011333:	52                   	push   edx
c0011334:	50                   	push   eax
c0011335:	68 78 e0 02 c0       	push   0xc002e078
c001133a:	e8 75 76 01 00       	call   c00289b4 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001133f:	eb e1                	jmp    c0011322 <getFromFileDescriptor(int)+0x23>
c0011341:	a1 6c e0 02 c0       	mov    eax,ds:0xc002e06c
c0011346:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001134c:	74 4d                	je     c001139b <getFromFileDescriptor(int)+0x9c>
c001134e:	a1 70 e0 02 c0       	mov    eax,ds:0xc002e070
c0011353:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011359:	74 40                	je     c001139b <getFromFileDescriptor(int)+0x9c>
c001135b:	a1 68 e0 02 c0       	mov    eax,ds:0xc002e068
c0011360:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011366:	74 33                	je     c001139b <getFromFileDescriptor(int)+0x9c>
c0011368:	a1 64 e0 02 c0       	mov    eax,ds:0xc002e064
c001136d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011373:	74 26                	je     c001139b <getFromFileDescriptor(int)+0x9c>
c0011375:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001137b:	83 f8 08             	cmp    eax,0x8
c001137e:	77 09                	ja     c0011389 <getFromFileDescriptor(int)+0x8a>
c0011380:	8b 04 85 40 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fc0]
c0011387:	eb 12                	jmp    c001139b <getFromFileDescriptor(int)+0x9c>
c0011389:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001138f:	83 fb 08             	cmp    ebx,0x8
c0011392:	77 95                	ja     c0011329 <getFromFileDescriptor(int)+0x2a>
c0011394:	8b 04 9d 00 e0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2000]
c001139b:	83 c4 08             	add    esp,0x8
c001139e:	5b                   	pop    ebx
c001139f:	c3                   	ret    

c00113a0 <__static_initialization_and_destruction_0(int, int)>:
c00113a0:	83 ec 0c             	sub    esp,0xc
c00113a3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00113a8:	75 34                	jne    c00113de <__static_initialization_and_destruction_0(int, int)+0x3e>
c00113aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00113b2:	75 2a                	jne    c00113de <__static_initialization_and_destruction_0(int, int)+0x3e>
c00113b4:	83 ec 0c             	sub    esp,0xc
c00113b7:	68 78 e0 02 c0       	push   0xc002e078
c00113bc:	e8 33 74 01 00       	call   c00287f4 <LinkedList<UnixFile>::LinkedList()>
c00113c1:	83 c4 10             	add    esp,0x10
c00113c4:	83 ec 04             	sub    esp,0x4
c00113c7:	68 f0 cc 02 c0       	push   0xc002ccf0
c00113cc:	68 78 e0 02 c0       	push   0xc002e078
c00113d1:	68 f2 87 02 c0       	push   0xc00287f2
c00113d6:	e8 ee 12 00 00       	call   c00126c9 <__cxa_atexit>
c00113db:	83 c4 10             	add    esp,0x10
c00113de:	90                   	nop
c00113df:	83 c4 0c             	add    esp,0xc
c00113e2:	c3                   	ret    

c00113e3 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00113e3:	83 ec 0c             	sub    esp,0xc
c00113e6:	83 ec 08             	sub    esp,0x8
c00113e9:	68 ff ff 00 00       	push   0xffff
c00113ee:	6a 01                	push   0x1
c00113f0:	e8 ab ff ff ff       	call   c00113a0 <__static_initialization_and_destruction_0(int, int)>
c00113f5:	83 c4 10             	add    esp,0x10
c00113f8:	83 c4 0c             	add    esp,0xc
c00113fb:	c3                   	ret    

c00113fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00113fc:	53                   	push   ebx
c00113fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011401:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011405:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001140b:	89 c8                	mov    eax,ecx
c001140d:	d1 e8                	shr    eax,1
c001140f:	03 05 c8 ce 02 c0    	add    eax,DWORD PTR ds:0xc002cec8
c0011415:	83 e1 01             	and    ecx,0x1
c0011418:	8a 10                	mov    dl,BYTE PTR [eax]
c001141a:	75 09                	jne    c0011425 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001141c:	83 e2 f0             	and    edx,0xfffffff0
c001141f:	09 da                	or     edx,ebx
c0011421:	88 10                	mov    BYTE PTR [eax],dl
c0011423:	5b                   	pop    ebx
c0011424:	c3                   	ret    
c0011425:	c1 e3 04             	shl    ebx,0x4
c0011428:	83 e2 0f             	and    edx,0xf
c001142b:	09 da                	or     edx,ebx
c001142d:	88 10                	mov    BYTE PTR [eax],dl
c001142f:	5b                   	pop    ebx
c0011430:	c3                   	ret    

c0011431 <Virt::getPageState(unsigned long)>:
c0011431:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011435:	8b 0d c8 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002cec8
c001143b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011441:	89 d0                	mov    eax,edx
c0011443:	d1 e8                	shr    eax,1
c0011445:	83 e2 01             	and    edx,0x1
c0011448:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001144b:	75 04                	jne    c0011451 <Virt::getPageState(unsigned long)+0x20>
c001144d:	83 e0 0f             	and    eax,0xf
c0011450:	c3                   	ret    
c0011451:	c0 e8 04             	shr    al,0x4
c0011454:	c3                   	ret    

c0011455 <Virt::allocateKernelVirtualPages(int)>:
c0011455:	55                   	push   ebp
c0011456:	31 ed                	xor    ebp,ebp
c0011458:	57                   	push   edi
c0011459:	56                   	push   esi
c001145a:	53                   	push   ebx
c001145b:	31 db                	xor    ebx,ebx
c001145d:	83 ec 1c             	sub    esp,0x1c
c0011460:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011464:	8b 3d c4 ce 02 c0    	mov    edi,DWORD PTR ds:0xc002cec4
c001146a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001146f:	57                   	push   edi
c0011470:	e8 bc ff ff ff       	call   c0011431 <Virt::getPageState(unsigned long)>
c0011475:	5a                   	pop    edx
c0011476:	84 c0                	test   al,al
c0011478:	75 3a                	jne    c00114b4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001147a:	85 db                	test   ebx,ebx
c001147c:	75 02                	jne    c0011480 <Virt::allocateKernelVirtualPages(int)+0x2b>
c001147e:	89 fd                	mov    ebp,edi
c0011480:	43                   	inc    ebx
c0011481:	39 f3                	cmp    ebx,esi
c0011483:	74 5a                	je     c00114df <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011485:	47                   	inc    edi
c0011486:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001148c:	76 31                	jbe    c00114bf <Virt::allocateKernelVirtualPages(int)+0x6a>
c001148e:	c7 05 c4 ce 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002cec4,0xc8000
c0011498:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001149d:	75 28                	jne    c00114c7 <Virt::allocateKernelVirtualPages(int)+0x72>
c001149f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00114a4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00114a9:	57                   	push   edi
c00114aa:	e8 82 ff ff ff       	call   c0011431 <Virt::getPageState(unsigned long)>
c00114af:	5a                   	pop    edx
c00114b0:	84 c0                	test   al,al
c00114b2:	74 c6                	je     c001147a <Virt::allocateKernelVirtualPages(int)+0x25>
c00114b4:	31 db                	xor    ebx,ebx
c00114b6:	47                   	inc    edi
c00114b7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00114bd:	77 cf                	ja     c001148e <Virt::allocateKernelVirtualPages(int)+0x39>
c00114bf:	89 3d c4 ce 02 c0    	mov    DWORD PTR ds:0xc002cec4,edi
c00114c5:	eb a8                	jmp    c001146f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00114c7:	83 ec 0c             	sub    esp,0xc
c00114ca:	68 98 a6 02 c0       	push   0xc002a698
c00114cf:	e8 3f 8b 00 00       	call   c001a013 <Krnl::panic(char const*)>
c00114d4:	8b 3d c4 ce 02 c0    	mov    edi,DWORD PTR ds:0xc002cec4
c00114da:	83 c4 10             	add    esp,0x10
c00114dd:	eb 90                	jmp    c001146f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00114df:	89 2d c4 ce 02 c0    	mov    DWORD PTR ds:0xc002cec4,ebp
c00114e5:	4b                   	dec    ebx
c00114e6:	74 5f                	je     c0011547 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00114e8:	85 f6                	test   esi,esi
c00114ea:	74 3d                	je     c0011529 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00114ec:	89 e8                	mov    eax,ebp
c00114ee:	31 db                	xor    ebx,ebx
c00114f0:	8d 7e ff             	lea    edi,[esi-0x1]
c00114f3:	eb 14                	jmp    c0011509 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00114f5:	6a 01                	push   0x1
c00114f7:	43                   	inc    ebx
c00114f8:	50                   	push   eax
c00114f9:	e8 fe fe ff ff       	call   c00113fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00114fe:	58                   	pop    eax
c00114ff:	39 f3                	cmp    ebx,esi
c0011501:	5a                   	pop    edx
c0011502:	74 25                	je     c0011529 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011504:	a1 c4 ce 02 c0       	mov    eax,ds:0xc002cec4
c0011509:	8d 50 01             	lea    edx,[eax+0x1]
c001150c:	85 db                	test   ebx,ebx
c001150e:	89 15 c4 ce 02 c0    	mov    DWORD PTR ds:0xc002cec4,edx
c0011514:	74 20                	je     c0011536 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011516:	39 df                	cmp    edi,ebx
c0011518:	75 db                	jne    c00114f5 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001151a:	6a 03                	push   0x3
c001151c:	43                   	inc    ebx
c001151d:	50                   	push   eax
c001151e:	e8 d9 fe ff ff       	call   c00113fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011523:	59                   	pop    ecx
c0011524:	39 f3                	cmp    ebx,esi
c0011526:	58                   	pop    eax
c0011527:	75 db                	jne    c0011504 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011529:	83 c4 1c             	add    esp,0x1c
c001152c:	89 e8                	mov    eax,ebp
c001152e:	5b                   	pop    ebx
c001152f:	c1 e0 0c             	shl    eax,0xc
c0011532:	5e                   	pop    esi
c0011533:	5f                   	pop    edi
c0011534:	5d                   	pop    ebp
c0011535:	c3                   	ret    
c0011536:	6a 02                	push   0x2
c0011538:	bb 01 00 00 00       	mov    ebx,0x1
c001153d:	50                   	push   eax
c001153e:	e8 b9 fe ff ff       	call   c00113fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011543:	58                   	pop    eax
c0011544:	5a                   	pop    edx
c0011545:	eb bd                	jmp    c0011504 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011547:	6a 04                	push   0x4
c0011549:	8d 45 01             	lea    eax,[ebp+0x1]
c001154c:	55                   	push   ebp
c001154d:	a3 c4 ce 02 c0       	mov    ds:0xc002cec4,eax
c0011552:	e8 a5 fe ff ff       	call   c00113fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011557:	59                   	pop    ecx
c0011558:	89 e8                	mov    eax,ebp
c001155a:	5b                   	pop    ebx
c001155b:	c1 e0 0c             	shl    eax,0xc
c001155e:	83 c4 1c             	add    esp,0x1c
c0011561:	5b                   	pop    ebx
c0011562:	5e                   	pop    esi
c0011563:	5f                   	pop    edi
c0011564:	5d                   	pop    ebp
c0011565:	c3                   	ret    

c0011566 <Virt::freeSwapfilePage(unsigned long)>:
c0011566:	53                   	push   ebx
c0011567:	8b 15 8c e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e08c
c001156d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011571:	b8 01 00 00 00       	mov    eax,0x1
c0011576:	89 cb                	mov    ebx,ecx
c0011578:	d3 e0                	shl    eax,cl
c001157a:	c1 eb 05             	shr    ebx,0x5
c001157d:	f7 d0                	not    eax
c001157f:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011582:	5b                   	pop    ebx
c0011583:	c3                   	ret    

c0011584 <Virt::swapIDToSector(unsigned long)>:
c0011584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011588:	0f af 05 cc ce 02 c0 	imul   eax,DWORD PTR ds:0xc002cecc
c001158f:	03 05 d4 ce 02 c0    	add    eax,DWORD PTR ds:0xc002ced4
c0011595:	c3                   	ret    

c0011596 <Virt::allocateSwapfilePage()>:
c0011596:	55                   	push   ebp
c0011597:	31 d2                	xor    edx,edx
c0011599:	57                   	push   edi
c001159a:	56                   	push   esi
c001159b:	53                   	push   ebx
c001159c:	83 ec 0c             	sub    esp,0xc
c001159f:	8b 0d cc ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002cecc
c00115a5:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c00115aa:	f7 f1                	div    ecx
c00115ac:	39 0d d0 ce 02 c0    	cmp    DWORD PTR ds:0xc002ced0,ecx
c00115b2:	72 2d                	jb     c00115e1 <Virt::allocateSwapfilePage()+0x4b>
c00115b4:	8b 35 8c e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e08c
c00115ba:	8b 16                	mov    edx,DWORD PTR [esi]
c00115bc:	f6 c2 01             	test   dl,0x1
c00115bf:	74 3c                	je     c00115fd <Virt::allocateSwapfilePage()+0x67>
c00115c1:	31 c9                	xor    ecx,ecx
c00115c3:	bf 01 00 00 00       	mov    edi,0x1
c00115c8:	eb 12                	jmp    c00115dc <Virt::allocateSwapfilePage()+0x46>
c00115ca:	89 fd                	mov    ebp,edi
c00115cc:	89 ca                	mov    edx,ecx
c00115ce:	d3 e5                	shl    ebp,cl
c00115d0:	c1 ea 05             	shr    edx,0x5
c00115d3:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00115d6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00115d8:	85 ea                	test   edx,ebp
c00115da:	74 2a                	je     c0011606 <Virt::allocateSwapfilePage()+0x70>
c00115dc:	41                   	inc    ecx
c00115dd:	39 c8                	cmp    eax,ecx
c00115df:	77 e9                	ja     c00115ca <Virt::allocateSwapfilePage()+0x34>
c00115e1:	83 ec 0c             	sub    esp,0xc
c00115e4:	68 78 a8 02 c0       	push   0xc002a878
c00115e9:	e8 25 8a 00 00       	call   c001a013 <Krnl::panic(char const*)>
c00115ee:	83 c4 10             	add    esp,0x10
c00115f1:	31 c9                	xor    ecx,ecx
c00115f3:	83 c4 0c             	add    esp,0xc
c00115f6:	89 c8                	mov    eax,ecx
c00115f8:	5b                   	pop    ebx
c00115f9:	5e                   	pop    esi
c00115fa:	5f                   	pop    edi
c00115fb:	5d                   	pop    ebp
c00115fc:	c3                   	ret    
c00115fd:	89 f3                	mov    ebx,esi
c00115ff:	bd 01 00 00 00       	mov    ebp,0x1
c0011604:	31 c9                	xor    ecx,ecx
c0011606:	09 ea                	or     edx,ebp
c0011608:	89 c8                	mov    eax,ecx
c001160a:	89 13                	mov    DWORD PTR [ebx],edx
c001160c:	83 c4 0c             	add    esp,0xc
c001160f:	5b                   	pop    ebx
c0011610:	5e                   	pop    esi
c0011611:	5f                   	pop    edi
c0011612:	5d                   	pop    ebp
c0011613:	c3                   	ret    

c0011614 <Virt::virtualMemorySetup()>:
c0011614:	53                   	push   ebx
c0011615:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001161a:	6a 0f                	push   0xf
c001161c:	53                   	push   ebx
c001161d:	43                   	inc    ebx
c001161e:	e8 d9 fd ff ff       	call   c00113fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011623:	58                   	pop    eax
c0011624:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001162a:	5a                   	pop    edx
c001162b:	75 ed                	jne    c001161a <Virt::virtualMemorySetup()+0x6>
c001162d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011632:	6a 00                	push   0x0
c0011634:	53                   	push   ebx
c0011635:	43                   	inc    ebx
c0011636:	e8 c1 fd ff ff       	call   c00113fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001163b:	59                   	pop    ecx
c001163c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011642:	58                   	pop    eax
c0011643:	75 ed                	jne    c0011632 <Virt::virtualMemorySetup()+0x1e>
c0011645:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001164a:	6a 0f                	push   0xf
c001164c:	53                   	push   ebx
c001164d:	43                   	inc    ebx
c001164e:	e8 a9 fd ff ff       	call   c00113fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011653:	58                   	pop    eax
c0011654:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001165a:	5a                   	pop    edx
c001165b:	75 ed                	jne    c001164a <Virt::virtualMemorySetup()+0x36>
c001165d:	5b                   	pop    ebx
c001165e:	c3                   	ret    

c001165f <Virt::setupPageSwapping(int)>:
c001165f:	53                   	push   ebx
c0011660:	83 ec 0c             	sub    esp,0xc
c0011663:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011667:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001166c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011672:	8b 10                	mov    edx,DWORD PTR [eax]
c0011674:	53                   	push   ebx
c0011675:	c1 e3 0b             	shl    ebx,0xb
c0011678:	68 8f a8 02 c0       	push   0xc002a88f
c001167d:	50                   	push   eax
c001167e:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011681:	89 1d d0 ce 02 c0    	mov    DWORD PTR ds:0xc002ced0,ebx
c0011687:	c6 05 d8 ce 02 c0 43 	mov    BYTE PTR ds:0xc002ced8,0x43
c001168e:	c1 eb 08             	shr    ebx,0x8
c0011691:	a3 d4 ce 02 c0       	mov    ds:0xc002ced4,eax
c0011696:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011699:	c7 05 cc ce 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002cecc,0x8
c00116a3:	e8 27 e1 ff ff       	call   c000f7cf <malloc>
c00116a8:	83 c4 0c             	add    esp,0xc
c00116ab:	89 c1                	mov    ecx,eax
c00116ad:	a3 8c e0 02 c0       	mov    ds:0xc002e08c,eax
c00116b2:	31 d2                	xor    edx,edx
c00116b4:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c00116b9:	f7 35 cc ce 02 c0    	div    DWORD PTR ds:0xc002cecc
c00116bf:	c1 e8 05             	shr    eax,0x5
c00116c2:	50                   	push   eax
c00116c3:	6a 00                	push   0x0
c00116c5:	51                   	push   ecx
c00116c6:	e8 85 f0 fe ff       	call   c0000750 <memset>
c00116cb:	83 c4 18             	add    esp,0x18
c00116ce:	5b                   	pop    ebx
c00116cf:	c3                   	ret    

c00116d0 <VAS::VAS()>:
c00116d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00116db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00116e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ea:	a3 90 e0 02 c0       	mov    ds:0xc002e090,eax
c00116ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116f3:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00116f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fb:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00116fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011702:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011709:	90                   	nop
c001170a:	c3                   	ret    
c001170b:	90                   	nop

c001170c <VAS::VAS(VAS*)>:
c001170c:	83 ec 0c             	sub    esp,0xc
c001170f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011713:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001171a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001171e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011725:	83 ec 0c             	sub    esp,0xc
c0011728:	68 b8 a6 02 c0       	push   0xc002a6b8
c001172d:	e8 e1 88 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0011732:	83 c4 10             	add    esp,0x10
c0011735:	90                   	nop
c0011736:	83 c4 0c             	add    esp,0xc
c0011739:	c3                   	ret    

c001173a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001173a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001173e:	89 c2                	mov    edx,eax
c0011740:	c1 e8 0a             	shr    eax,0xa
c0011743:	c1 ea 16             	shr    edx,0x16
c0011746:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001174b:	19 c9                	sbb    ecx,ecx
c001174d:	c1 e2 0c             	shl    edx,0xc
c0011750:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011756:	25 fc 0f 00 00       	and    eax,0xffc
c001175b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011762:	01 d0                	add    eax,edx
c0011764:	c3                   	ret    
c0011765:	90                   	nop

c0011766 <VAS::getPageTableEntry(unsigned long)>:
c0011766:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001176a:	89 ca                	mov    edx,ecx
c001176c:	c1 e9 0a             	shr    ecx,0xa
c001176f:	c1 ea 16             	shr    edx,0x16
c0011772:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011778:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001177e:	c1 e0 0c             	shl    eax,0xc
c0011781:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011784:	c3                   	ret    

c0011785 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011785:	57                   	push   edi
c0011786:	56                   	push   esi
c0011787:	be 01 00 00 00       	mov    esi,0x1
c001178c:	53                   	push   ebx
c001178d:	83 ec 10             	sub    esp,0x10
c0011790:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011794:	c1 eb 0c             	shr    ebx,0xc
c0011797:	eb 3f                	jmp    c00117d8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011799:	83 ec 08             	sub    esp,0x8
c001179c:	57                   	push   edi
c001179d:	ff 35 90 e0 02 c0    	push   DWORD PTR ds:0xc002e090
c00117a3:	e8 be ff ff ff       	call   c0011766 <VAS::getPageTableEntry(unsigned long)>
c00117a8:	83 c4 10             	add    esp,0x10
c00117ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00117ad:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00117b1:	f6 c4 04             	test   ah,0x4
c00117b4:	75 5f                	jne    c0011815 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00117b6:	80 fa 04             	cmp    dl,0x4
c00117b9:	74 78                	je     c0011833 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00117bb:	80 fa 02             	cmp    dl,0x2
c00117be:	0f 84 88 00 00 00    	je     c001184c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00117c4:	80 fa 03             	cmp    dl,0x3
c00117c7:	0f 84 ad 00 00 00    	je     c001187a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00117cd:	fe ca                	dec    dl
c00117cf:	0f 84 92 00 00 00    	je     c0011867 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00117d5:	43                   	inc    ebx
c00117d6:	31 f6                	xor    esi,esi
c00117d8:	53                   	push   ebx
c00117d9:	89 df                	mov    edi,ebx
c00117db:	e8 51 fc ff ff       	call   c0011431 <Virt::getPageState(unsigned long)>
c00117e0:	c1 e7 0c             	shl    edi,0xc
c00117e3:	59                   	pop    ecx
c00117e4:	84 c0                	test   al,al
c00117e6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00117ea:	75 ad                	jne    c0011799 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00117ec:	83 ec 0c             	sub    esp,0xc
c00117ef:	68 a6 a8 02 c0       	push   0xc002a8a6
c00117f4:	e8 1a 88 00 00       	call   c001a013 <Krnl::panic(char const*)>
c00117f9:	58                   	pop    eax
c00117fa:	5a                   	pop    edx
c00117fb:	57                   	push   edi
c00117fc:	ff 35 90 e0 02 c0    	push   DWORD PTR ds:0xc002e090
c0011802:	e8 5f ff ff ff       	call   c0011766 <VAS::getPageTableEntry(unsigned long)>
c0011807:	83 c4 10             	add    esp,0x10
c001180a:	8b 00                	mov    eax,DWORD PTR [eax]
c001180c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011810:	f6 c4 04             	test   ah,0x4
c0011813:	74 c0                	je     c00117d5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011815:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011819:	25 00 f0 ff ff       	and    eax,0xfffff000
c001181e:	83 ec 0c             	sub    esp,0xc
c0011821:	50                   	push   eax
c0011822:	e8 33 e3 ff ff       	call   c000fb5a <Phys::freePage(unsigned long)>
c0011827:	83 c4 10             	add    esp,0x10
c001182a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001182e:	80 fa 04             	cmp    dl,0x4
c0011831:	75 88                	jne    c00117bb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011833:	89 f0                	mov    eax,esi
c0011835:	84 c0                	test   al,al
c0011837:	75 47                	jne    c0011880 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011839:	c7 44 24 20 dc a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a6dc
c0011841:	83 c4 10             	add    esp,0x10
c0011844:	5b                   	pop    ebx
c0011845:	5e                   	pop    esi
c0011846:	5f                   	pop    edi
c0011847:	e9 c7 87 00 00       	jmp    c001a013 <Krnl::panic(char const*)>
c001184c:	89 f0                	mov    eax,esi
c001184e:	84 c0                	test   al,al
c0011850:	75 15                	jne    c0011867 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011852:	83 ec 0c             	sub    esp,0xc
c0011855:	68 c2 a8 02 c0       	push   0xc002a8c2
c001185a:	e8 b4 87 00 00       	call   c001a013 <Krnl::panic(char const*)>
c001185f:	83 c4 10             	add    esp,0x10
c0011862:	e9 6e ff ff ff       	jmp    c00117d5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011867:	83 ec 08             	sub    esp,0x8
c001186a:	6a 00                	push   0x0
c001186c:	53                   	push   ebx
c001186d:	e8 8a fb ff ff       	call   c00113fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011872:	83 c4 10             	add    esp,0x10
c0011875:	e9 5b ff ff ff       	jmp    c00117d5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001187a:	89 f0                	mov    eax,esi
c001187c:	84 c0                	test   al,al
c001187e:	75 15                	jne    c0011895 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011880:	83 ec 08             	sub    esp,0x8
c0011883:	6a 00                	push   0x0
c0011885:	53                   	push   ebx
c0011886:	e8 71 fb ff ff       	call   c00113fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001188b:	83 c4 10             	add    esp,0x10
c001188e:	83 c4 10             	add    esp,0x10
c0011891:	5b                   	pop    ebx
c0011892:	5e                   	pop    esi
c0011893:	5f                   	pop    edi
c0011894:	c3                   	ret    
c0011895:	c7 44 24 20 de a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a8de
c001189d:	83 c4 10             	add    esp,0x10
c00118a0:	5b                   	pop    ebx
c00118a1:	5e                   	pop    esi
c00118a2:	5f                   	pop    edi
c00118a3:	e9 6b 87 00 00       	jmp    c001a013 <Krnl::panic(char const*)>

c00118a8 <VAS::freeAllocatedPages(unsigned long)>:
c00118a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00118b0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00118b4:	74 09                	je     c00118bf <VAS::freeAllocatedPages(unsigned long)+0x17>
c00118b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00118ba:	e9 c6 fe ff ff       	jmp    c0011785 <Virt::freeKernelVirtualPages(unsigned long)>
c00118bf:	c7 44 24 04 00 a7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a700
c00118c7:	e9 5b 0f 00 00       	jmp    c0012827 <Dbg::kprintf(char const*, ...)>

c00118cc <VAS::virtualToPhysical(unsigned long)>:
c00118cc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00118d0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00118d4:	e8 8d fe ff ff       	call   c0011766 <VAS::getPageTableEntry(unsigned long)>
c00118d9:	5a                   	pop    edx
c00118da:	8b 00                	mov    eax,DWORD PTR [eax]
c00118dc:	59                   	pop    ecx
c00118dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118e2:	c3                   	ret    
c00118e3:	90                   	nop

c00118e4 <VAS::reflagRange(unsigned long, int, int, int)>:
c00118e4:	55                   	push   ebp
c00118e5:	57                   	push   edi
c00118e6:	56                   	push   esi
c00118e7:	53                   	push   ebx
c00118e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00118ec:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00118f0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00118f4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00118f8:	85 db                	test   ebx,ebx
c00118fa:	7e 22                	jle    c001191e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00118fc:	c1 e3 0c             	shl    ebx,0xc
c00118ff:	01 f3                	add    ebx,esi
c0011901:	56                   	push   esi
c0011902:	81 c6 00 10 00 00    	add    esi,0x1000
c0011908:	55                   	push   ebp
c0011909:	e8 58 fe ff ff       	call   c0011766 <VAS::getPageTableEntry(unsigned long)>
c001190e:	5a                   	pop    edx
c001190f:	59                   	pop    ecx
c0011910:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011912:	21 f9                	and    ecx,edi
c0011914:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011918:	39 f3                	cmp    ebx,esi
c001191a:	89 08                	mov    DWORD PTR [eax],ecx
c001191c:	75 e3                	jne    c0011901 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001191e:	5b                   	pop    ebx
c001191f:	5e                   	pop    esi
c0011920:	5f                   	pop    edi
c0011921:	5d                   	pop    ebp
c0011922:	c3                   	ret    
c0011923:	90                   	nop

c0011924 <VAS::setToWriteCombining(unsigned long, int)>:
c0011924:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0011929:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001192f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011936:	75 01                	jne    c0011939 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011938:	c3                   	ret    
c0011939:	68 80 00 00 00       	push   0x80
c001193e:	6a ff                	push   0xffffffff
c0011940:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011944:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011948:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001194c:	e8 93 ff ff ff       	call   c00118e4 <VAS::reflagRange(unsigned long, int, int, int)>
c0011951:	83 c4 14             	add    esp,0x14
c0011954:	c3                   	ret    
c0011955:	90                   	nop

c0011956 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011956:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001195b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001195f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011966:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011969:	19 c0                	sbb    eax,eax
c001196b:	83 ca 03             	or     edx,0x3
c001196e:	83 e0 fc             	and    eax,0xfffffffc
c0011971:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011978:	0f 20 d8             	mov    eax,cr3
c001197b:	0f 22 d8             	mov    cr3,eax
c001197e:	c3                   	ret    
c001197f:	90                   	nop

c0011980 <VAS::~VAS()>:
c0011980:	83 ec 2c             	sub    esp,0x2c
c0011983:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001198b:	fa                   	cli    
c001198c:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c0011991:	40                   	inc    eax
c0011992:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c0011997:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001199c:	8b 00                	mov    eax,DWORD PTR [eax]
c001199e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119a1:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00119a7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00119ab:	6a 01                	push   0x1
c00119ad:	50                   	push   eax
c00119ae:	e8 a3 ff ff ff       	call   c0011956 <VAS::mapOtherVASIn(bool, VAS*)>
c00119b3:	83 c4 0c             	add    esp,0xc
c00119b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00119be:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00119c6:	0f 8f d4 00 00 00    	jg     c0011aa0 <VAS::~VAS()+0x120>
c00119cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00119d7:	c1 e2 02             	shl    edx,0x2
c00119da:	01 d0                	add    eax,edx
c00119dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00119de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00119e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119e6:	83 e0 01             	and    eax,0x1
c00119e9:	0f 84 a8 00 00 00    	je     c0011a97 <VAS::~VAS()+0x117>
c00119ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00119f7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00119ff:	7f 72                	jg     c0011a73 <VAS::~VAS()+0xf3>
c0011a01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011a05:	c1 e0 0a             	shl    eax,0xa
c0011a08:	89 c2                	mov    edx,eax
c0011a0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a0e:	01 d0                	add    eax,edx
c0011a10:	c1 e0 0c             	shl    eax,0xc
c0011a13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a17:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011a1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a21:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011a27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011a2b:	6a 01                	push   0x1
c0011a2d:	50                   	push   eax
c0011a2e:	e8 07 fd ff ff       	call   c001173a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011a33:	83 c4 0c             	add    esp,0xc
c0011a36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a48:	25 01 04 00 00       	and    eax,0x401
c0011a4d:	3d 01 04 00 00       	cmp    eax,0x401
c0011a52:	75 19                	jne    c0011a6d <VAS::~VAS()+0xed>
c0011a54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a58:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a5d:	83 ec 0c             	sub    esp,0xc
c0011a60:	50                   	push   eax
c0011a61:	e8 f4 e0 ff ff       	call   c000fb5a <Phys::freePage(unsigned long)>
c0011a66:	83 c4 10             	add    esp,0x10
c0011a69:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011a6d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011a71:	eb 84                	jmp    c00119f7 <VAS::~VAS()+0x77>
c0011a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a77:	25 00 04 00 00       	and    eax,0x400
c0011a7c:	74 19                	je     c0011a97 <VAS::~VAS()+0x117>
c0011a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a82:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a87:	83 ec 0c             	sub    esp,0xc
c0011a8a:	50                   	push   eax
c0011a8b:	e8 ca e0 ff ff       	call   c000fb5a <Phys::freePage(unsigned long)>
c0011a90:	83 c4 10             	add    esp,0x10
c0011a93:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011a97:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011a9b:	e9 1e ff ff ff       	jmp    c00119be <VAS::~VAS()+0x3e>
c0011aa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011aa4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011aa7:	83 ec 0c             	sub    esp,0xc
c0011aaa:	50                   	push   eax
c0011aab:	e8 d5 fc ff ff       	call   c0011785 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ab0:	83 c4 10             	add    esp,0x10
c0011ab3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ab7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011aba:	83 ec 0c             	sub    esp,0xc
c0011abd:	50                   	push   eax
c0011abe:	e8 97 e0 ff ff       	call   c000fb5a <Phys::freePage(unsigned long)>
c0011ac3:	83 c4 10             	add    esp,0x10
c0011ac6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011aca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ace:	c1 e0 02             	shl    eax,0x2
c0011ad1:	83 ec 08             	sub    esp,0x8
c0011ad4:	50                   	push   eax
c0011ad5:	68 24 a7 02 c0       	push   0xc002a724
c0011ada:	e8 48 0d 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0011adf:	83 c4 10             	add    esp,0x10
c0011ae2:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c0011ae7:	48                   	dec    eax
c0011ae8:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c0011aed:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c0011af2:	85 c0                	test   eax,eax
c0011af4:	75 01                	jne    c0011af7 <VAS::~VAS()+0x177>
c0011af6:	fb                   	sti    
c0011af7:	90                   	nop
c0011af8:	83 c4 2c             	add    esp,0x2c
c0011afb:	c3                   	ret    

c0011afc <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011afc:	55                   	push   ebp
c0011afd:	57                   	push   edi
c0011afe:	56                   	push   esi
c0011aff:	53                   	push   ebx
c0011b00:	83 ec 1c             	sub    esp,0x1c
c0011b03:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011b07:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011b0b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011b11:	77 08                	ja     c0011b1b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011b13:	0f 20 d8             	mov    eax,cr3
c0011b16:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011b19:	75 47                	jne    c0011b62 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011b1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b1f:	09 d8                	or     eax,ebx
c0011b21:	a9 ff 0f 00 00       	test   eax,0xfff
c0011b26:	75 57                	jne    c0011b7f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011b28:	89 de                	mov    esi,ebx
c0011b2a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011b2d:	c1 ee 16             	shr    esi,0x16
c0011b30:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011b37:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011b3b:	74 54                	je     c0011b91 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011b3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b41:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011b47:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011b4b:	c1 e6 0c             	shl    esi,0xc
c0011b4e:	c1 eb 0a             	shr    ebx,0xa
c0011b51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011b57:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011b5a:	83 c4 1c             	add    esp,0x1c
c0011b5d:	5b                   	pop    ebx
c0011b5e:	5e                   	pop    esi
c0011b5f:	5f                   	pop    edi
c0011b60:	5d                   	pop    ebp
c0011b61:	c3                   	ret    
c0011b62:	83 ec 0c             	sub    esp,0xc
c0011b65:	68 44 a7 02 c0       	push   0xc002a744
c0011b6a:	e8 b8 0c 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0011b6f:	83 c4 10             	add    esp,0x10
c0011b72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b76:	09 d8                	or     eax,ebx
c0011b78:	a9 ff 0f 00 00       	test   eax,0xfff
c0011b7d:	74 a9                	je     c0011b28 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011b7f:	83 ec 0c             	sub    esp,0xc
c0011b82:	68 ac a7 02 c0       	push   0xc002a7ac
c0011b87:	e8 87 84 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0011b8c:	83 c4 10             	add    esp,0x10
c0011b8f:	eb 97                	jmp    c0011b28 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011b91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011b95:	e8 31 e0 ff ff       	call   c000fbcb <Phys::allocatePage()>
c0011b9a:	83 ec 0c             	sub    esp,0xc
c0011b9d:	89 c5                	mov    ebp,eax
c0011b9f:	8b 0d 90 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e090
c0011ba5:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011ba9:	6a 01                	push   0x1
c0011bab:	e8 a5 f8 ff ff       	call   c0011455 <Virt::allocateKernelVirtualPages(int)>
c0011bb0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011bb7:	6a 01                	push   0x1
c0011bb9:	50                   	push   eax
c0011bba:	55                   	push   ebp
c0011bbb:	81 cd 07 04 00 00    	or     ebp,0x407
c0011bc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011bc5:	51                   	push   ecx
c0011bc6:	e8 27 02 00 00       	call   c0011df2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011bcb:	83 c4 1c             	add    esp,0x1c
c0011bce:	68 00 10 00 00       	push   0x1000
c0011bd3:	6a 00                	push   0x0
c0011bd5:	50                   	push   eax
c0011bd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011bda:	e8 71 eb fe ff       	call   c0000750 <memset>
c0011bdf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011be3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011be6:	e8 9a fb ff ff       	call   c0011785 <Virt::freeKernelVirtualPages(unsigned long)>
c0011beb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011bef:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011bf2:	83 c4 10             	add    esp,0x10
c0011bf5:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011bf8:	e9 40 ff ff ff       	jmp    c0011b3d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011bfd:	90                   	nop

c0011bfe <VAS::allocatePages(int, int)>:
c0011bfe:	55                   	push   ebp
c0011bff:	57                   	push   edi
c0011c00:	56                   	push   esi
c0011c01:	53                   	push   ebx
c0011c02:	83 ec 1c             	sub    esp,0x1c
c0011c05:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c09:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0011c0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c14:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c1a:	83 e0 01             	and    eax,0x1
c0011c1d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011c21:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c25:	0f 85 cc 00 00 00    	jne    c0011cf7 <VAS::allocatePages(int, int)+0xf9>
c0011c2b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011c2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c32:	85 c0                	test   eax,eax
c0011c34:	0f 84 a1 00 00 00    	je     c0011cdb <VAS::allocatePages(int, int)+0xdd>
c0011c3a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011c3e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c42:	c1 e6 0c             	shl    esi,0xc
c0011c45:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011c49:	85 c0                	test   eax,eax
c0011c4b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011c4e:	7e 33                	jle    c0011c83 <VAS::allocatePages(int, int)+0x85>
c0011c50:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011c54:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c58:	81 cd 00 04 00 00    	or     ebp,0x400
c0011c5e:	e8 68 df ff ff       	call   c000fbcb <Phys::allocatePage()>
c0011c63:	55                   	push   ebp
c0011c64:	53                   	push   ebx
c0011c65:	50                   	push   eax
c0011c66:	57                   	push   edi
c0011c67:	e8 90 fe ff ff       	call   c0011afc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c6c:	83 c4 10             	add    esp,0x10
c0011c6f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c74:	74 03                	je     c0011c79 <VAS::allocatePages(int, int)+0x7b>
c0011c76:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c79:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c7f:	39 de                	cmp    esi,ebx
c0011c81:	75 db                	jne    c0011c5e <VAS::allocatePages(int, int)+0x60>
c0011c83:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c88:	75 12                	jne    c0011c9c <VAS::allocatePages(int, int)+0x9e>
c0011c8a:	0f 20 d8             	mov    eax,cr3
c0011c8d:	0f 22 d8             	mov    cr3,eax
c0011c90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c94:	83 c4 1c             	add    esp,0x1c
c0011c97:	5b                   	pop    ebx
c0011c98:	5e                   	pop    esi
c0011c99:	5f                   	pop    edi
c0011c9a:	5d                   	pop    ebp
c0011c9b:	c3                   	ret    
c0011c9c:	c1 ee 0a             	shr    esi,0xa
c0011c9f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ca3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ca9:	c1 eb 0a             	shr    ebx,0xa
c0011cac:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011cb2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cb8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cbe:	39 c3                	cmp    ebx,eax
c0011cc0:	77 ce                	ja     c0011c90 <VAS::allocatePages(int, int)+0x92>
c0011cc2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cc5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ccb:	39 d8                	cmp    eax,ebx
c0011ccd:	73 f3                	jae    c0011cc2 <VAS::allocatePages(int, int)+0xc4>
c0011ccf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cd3:	83 c4 1c             	add    esp,0x1c
c0011cd6:	5b                   	pop    ebx
c0011cd7:	5e                   	pop    esi
c0011cd8:	5f                   	pop    edi
c0011cd9:	5d                   	pop    ebp
c0011cda:	c3                   	ret    
c0011cdb:	83 ec 0c             	sub    esp,0xc
c0011cde:	68 d0 a7 02 c0       	push   0xc002a7d0
c0011ce3:	e8 2b 83 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0011ce8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ceb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011cef:	83 c4 10             	add    esp,0x10
c0011cf2:	e9 43 ff ff ff       	jmp    c0011c3a <VAS::allocatePages(int, int)+0x3c>
c0011cf7:	83 ec 0c             	sub    esp,0xc
c0011cfa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011cfe:	e8 52 f7 ff ff       	call   c0011455 <Virt::allocateKernelVirtualPages(int)>
c0011d03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d07:	83 c4 10             	add    esp,0x10
c0011d0a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011d0f:	0f 87 9b 00 00 00    	ja     c0011db0 <VAS::allocatePages(int, int)+0x1b2>
c0011d15:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d19:	85 d2                	test   edx,edx
c0011d1b:	7e 3c                	jle    c0011d59 <VAS::allocatePages(int, int)+0x15b>
c0011d1d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011d21:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011d25:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011d29:	c1 e5 0c             	shl    ebp,0xc
c0011d2c:	81 ce 00 04 00 00    	or     esi,0x400
c0011d32:	01 dd                	add    ebp,ebx
c0011d34:	e8 92 de ff ff       	call   c000fbcb <Phys::allocatePage()>
c0011d39:	56                   	push   esi
c0011d3a:	53                   	push   ebx
c0011d3b:	50                   	push   eax
c0011d3c:	57                   	push   edi
c0011d3d:	e8 ba fd ff ff       	call   c0011afc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d42:	83 c4 10             	add    esp,0x10
c0011d45:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d4a:	74 03                	je     c0011d4f <VAS::allocatePages(int, int)+0x151>
c0011d4c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d4f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d55:	39 dd                	cmp    ebp,ebx
c0011d57:	75 db                	jne    c0011d34 <VAS::allocatePages(int, int)+0x136>
c0011d59:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d5e:	0f 84 26 ff ff ff    	je     c0011c8a <VAS::allocatePages(int, int)+0x8c>
c0011d64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011d68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d6c:	89 d3                	mov    ebx,edx
c0011d6e:	c1 e0 0c             	shl    eax,0xc
c0011d71:	c1 eb 0a             	shr    ebx,0xa
c0011d74:	01 d0                	add    eax,edx
c0011d76:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d7c:	c1 e8 0a             	shr    eax,0xa
c0011d7f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d85:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d8a:	2d 00 00 40 00       	sub    eax,0x400000
c0011d8f:	39 c3                	cmp    ebx,eax
c0011d91:	0f 87 f9 fe ff ff    	ja     c0011c90 <VAS::allocatePages(int, int)+0x92>
c0011d97:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d9a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011da0:	39 d8                	cmp    eax,ebx
c0011da2:	73 f3                	jae    c0011d97 <VAS::allocatePages(int, int)+0x199>
c0011da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011da8:	83 c4 1c             	add    esp,0x1c
c0011dab:	5b                   	pop    ebx
c0011dac:	5e                   	pop    esi
c0011dad:	5f                   	pop    edi
c0011dae:	5d                   	pop    ebp
c0011daf:	c3                   	ret    
c0011db0:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0011db5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011dbb:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011dc2:	0f 84 4d ff ff ff    	je     c0011d15 <VAS::allocatePages(int, int)+0x117>
c0011dc8:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011dd0:	e9 40 ff ff ff       	jmp    c0011d15 <VAS::allocatePages(int, int)+0x117>
c0011dd5:	90                   	nop

c0011dd6 <VAS::setCPUSpecific(unsigned long)>:
c0011dd6:	83 ec 0c             	sub    esp,0xc
c0011dd9:	6a 05                	push   0x5
c0011ddb:	68 00 00 40 c2       	push   0xc2400000
c0011de0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011de8:	e8 0f fd ff ff       	call   c0011afc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ded:	83 c4 1c             	add    esp,0x1c
c0011df0:	c3                   	ret    
c0011df1:	90                   	nop

c0011df2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011df2:	55                   	push   ebp
c0011df3:	57                   	push   edi
c0011df4:	56                   	push   esi
c0011df5:	53                   	push   ebx
c0011df6:	83 ec 1c             	sub    esp,0x1c
c0011df9:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0011dfe:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e08:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011e0c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e12:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011e16:	83 e0 01             	and    eax,0x1
c0011e19:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e21:	85 c0                	test   eax,eax
c0011e23:	7e 39                	jle    c0011e5e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011e25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e29:	89 f3                	mov    ebx,esi
c0011e2b:	c1 e0 0c             	shl    eax,0xc
c0011e2e:	01 f0                	add    eax,esi
c0011e30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e34:	55                   	push   ebp
c0011e35:	53                   	push   ebx
c0011e36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e3a:	29 f0                	sub    eax,esi
c0011e3c:	01 d8                	add    eax,ebx
c0011e3e:	50                   	push   eax
c0011e3f:	57                   	push   edi
c0011e40:	e8 b7 fc ff ff       	call   c0011afc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e45:	83 c4 10             	add    esp,0x10
c0011e48:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e4d:	74 03                	je     c0011e52 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011e4f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e52:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e58:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011e5c:	75 d6                	jne    c0011e34 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011e5e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e63:	75 10                	jne    c0011e75 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011e65:	0f 20 d8             	mov    eax,cr3
c0011e68:	0f 22 d8             	mov    cr3,eax
c0011e6b:	83 c4 1c             	add    esp,0x1c
c0011e6e:	89 f0                	mov    eax,esi
c0011e70:	5b                   	pop    ebx
c0011e71:	5e                   	pop    esi
c0011e72:	5f                   	pop    edi
c0011e73:	5d                   	pop    ebp
c0011e74:	c3                   	ret    
c0011e75:	89 f3                	mov    ebx,esi
c0011e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e7b:	c1 eb 0a             	shr    ebx,0xa
c0011e7e:	c1 e0 0c             	shl    eax,0xc
c0011e81:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011e87:	01 f0                	add    eax,esi
c0011e89:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011e8f:	c1 e8 0a             	shr    eax,0xa
c0011e92:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e97:	2d 00 00 40 00       	sub    eax,0x400000
c0011e9c:	39 c3                	cmp    ebx,eax
c0011e9e:	77 cb                	ja     c0011e6b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011ea0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ea3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ea9:	39 d8                	cmp    eax,ebx
c0011eab:	73 f3                	jae    c0011ea0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011ead:	83 c4 1c             	add    esp,0x1c
c0011eb0:	89 f0                	mov    eax,esi
c0011eb2:	5b                   	pop    ebx
c0011eb3:	5e                   	pop    esi
c0011eb4:	5f                   	pop    edi
c0011eb5:	5d                   	pop    ebp
c0011eb6:	c3                   	ret    
c0011eb7:	90                   	nop

c0011eb8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011eb8:	55                   	push   ebp
c0011eb9:	57                   	push   edi
c0011eba:	56                   	push   esi
c0011ebb:	53                   	push   ebx
c0011ebc:	83 ec 1c             	sub    esp,0x1c
c0011ebf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ec3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011ec7:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011ecb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011ecf:	a9 ff 0f 00 00       	test   eax,0xfff
c0011ed4:	75 4a                	jne    c0011f20 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011ed6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011eda:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011edd:	c1 eb 16             	shr    ebx,0x16
c0011ee0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011ee7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011eeb:	74 4d                	je     c0011f3a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011eed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ef1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011ef5:	c1 e8 0a             	shr    eax,0xa
c0011ef8:	80 fa 01             	cmp    dl,0x1
c0011efb:	19 d2                	sbb    edx,edx
c0011efd:	c1 e3 0c             	shl    ebx,0xc
c0011f00:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011f04:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011f0a:	25 fc 0f 00 00       	and    eax,0xffc
c0011f0f:	01 d8                	add    eax,ebx
c0011f11:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011f18:	83 c4 1c             	add    esp,0x1c
c0011f1b:	5b                   	pop    ebx
c0011f1c:	5e                   	pop    esi
c0011f1d:	5f                   	pop    edi
c0011f1e:	5d                   	pop    ebp
c0011f1f:	c3                   	ret    
c0011f20:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011f24:	83 ec 0c             	sub    esp,0xc
c0011f27:	68 fc a7 02 c0       	push   0xc002a7fc
c0011f2c:	e8 e2 80 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0011f31:	83 c4 10             	add    esp,0x10
c0011f34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f38:	eb 9c                	jmp    c0011ed6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011f3a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011f3e:	e8 88 dc ff ff       	call   c000fbcb <Phys::allocatePage()>
c0011f43:	83 ec 0c             	sub    esp,0xc
c0011f46:	89 c5                	mov    ebp,eax
c0011f48:	8b 0d 90 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e090
c0011f4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011f52:	6a 01                	push   0x1
c0011f54:	e8 fc f4 ff ff       	call   c0011455 <Virt::allocateKernelVirtualPages(int)>
c0011f59:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011f60:	6a 01                	push   0x1
c0011f62:	50                   	push   eax
c0011f63:	55                   	push   ebp
c0011f64:	81 cd 07 04 00 00    	or     ebp,0x407
c0011f6a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011f6e:	51                   	push   ecx
c0011f6f:	e8 7e fe ff ff       	call   c0011df2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f74:	83 c4 1c             	add    esp,0x1c
c0011f77:	68 00 10 00 00       	push   0x1000
c0011f7c:	6a 00                	push   0x0
c0011f7e:	50                   	push   eax
c0011f7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f83:	e8 c8 e7 fe ff       	call   c0000750 <memset>
c0011f88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011f8c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011f8f:	e8 f1 f7 ff ff       	call   c0011785 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f94:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011f97:	83 c4 10             	add    esp,0x10
c0011f9a:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011f9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011fa1:	e9 47 ff ff ff       	jmp    c0011eed <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011fa6 <VAS::VAS(bool)>:
c0011fa6:	53                   	push   ebx
c0011fa7:	83 ec 28             	sub    esp,0x28
c0011faa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fae:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011fb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fb6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fc1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011fc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fcc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011fd0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011fd3:	e8 f3 db ff ff       	call   c000fbcb <Phys::allocatePage()>
c0011fd8:	89 c2                	mov    edx,eax
c0011fda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fde:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011fe1:	8b 1d 90 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e090
c0011fe7:	83 ec 0c             	sub    esp,0xc
c0011fea:	6a 01                	push   0x1
c0011fec:	e8 64 f4 ff ff       	call   c0011455 <Virt::allocateKernelVirtualPages(int)>
c0011ff1:	83 c4 10             	add    esp,0x10
c0011ff4:	89 c2                	mov    edx,eax
c0011ff6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ffa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011ffd:	83 ec 0c             	sub    esp,0xc
c0012000:	6a 03                	push   0x3
c0012002:	6a 01                	push   0x1
c0012004:	52                   	push   edx
c0012005:	50                   	push   eax
c0012006:	53                   	push   ebx
c0012007:	e8 e6 fd ff ff       	call   c0011df2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001200c:	83 c4 20             	add    esp,0x20
c001200f:	89 c2                	mov    edx,eax
c0012011:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012015:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012018:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012020:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012028:	7f 1c                	jg     c0012046 <VAS::VAS(bool)+0xa0>
c001202a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001202e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012031:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012035:	c1 e2 02             	shl    edx,0x2
c0012038:	01 d0                	add    eax,edx
c001203a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012040:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012044:	eb da                	jmp    c0012020 <VAS::VAS(bool)+0x7a>
c0012046:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001204e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012056:	7f 7a                	jg     c00120d2 <VAS::VAS(bool)+0x12c>
c0012058:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001205c:	2d 00 02 00 00       	sub    eax,0x200
c0012061:	c1 e0 0c             	shl    eax,0xc
c0012064:	83 c8 03             	or     eax,0x3
c0012067:	89 c2                	mov    edx,eax
c0012069:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001206e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012074:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001207a:	83 e0 10             	and    eax,0x10
c001207d:	84 c0                	test   al,al
c001207f:	74 07                	je     c0012088 <VAS::VAS(bool)+0xe2>
c0012081:	b8 00 01 00 00       	mov    eax,0x100
c0012086:	eb 05                	jmp    c001208d <VAS::VAS(bool)+0xe7>
c0012088:	b8 00 00 00 00       	mov    eax,0x0
c001208d:	09 d0                	or     eax,edx
c001208f:	89 c1                	mov    ecx,eax
c0012091:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012095:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012098:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001209c:	c1 e2 02             	shl    edx,0x2
c001209f:	01 d0                	add    eax,edx
c00120a1:	89 ca                	mov    edx,ecx
c00120a3:	89 10                	mov    DWORD PTR [eax],edx
c00120a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120a9:	2d 40 03 00 00       	sub    eax,0x340
c00120ae:	83 f8 7f             	cmp    eax,0x7f
c00120b1:	77 16                	ja     c00120c9 <VAS::VAS(bool)+0x123>
c00120b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120be:	c1 e2 02             	shl    edx,0x2
c00120c1:	01 d0                	add    eax,edx
c00120c3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00120c9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00120cd:	e9 7c ff ff ff       	jmp    c001204e <VAS::VAS(bool)+0xa8>
c00120d2:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c00120d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120dd:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00120e3:	83 e0 10             	and    eax,0x10
c00120e6:	84 c0                	test   al,al
c00120e8:	74 07                	je     c00120f1 <VAS::VAS(bool)+0x14b>
c00120ea:	b8 03 41 00 00       	mov    eax,0x4103
c00120ef:	eb 05                	jmp    c00120f6 <VAS::VAS(bool)+0x150>
c00120f1:	b8 03 40 00 00       	mov    eax,0x4003
c00120f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00120fa:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00120fd:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012103:	89 02                	mov    DWORD PTR [edx],eax
c0012105:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001210a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012110:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012116:	83 ec 08             	sub    esp,0x8
c0012119:	50                   	push   eax
c001211a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001211e:	e8 b3 fc ff ff       	call   c0011dd6 <VAS::setCPUSpecific(unsigned long)>
c0012123:	83 c4 10             	add    esp,0x10
c0012126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001212a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001212d:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0012132:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012138:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001213e:	83 e0 10             	and    eax,0x10
c0012141:	84 c0                	test   al,al
c0012143:	74 07                	je     c001214c <VAS::VAS(bool)+0x1a6>
c0012145:	b8 00 01 00 00       	mov    eax,0x100
c001214a:	eb 05                	jmp    c0012151 <VAS::VAS(bool)+0x1ab>
c001214c:	b8 00 00 00 00       	mov    eax,0x0
c0012151:	09 c2                	or     edx,eax
c0012153:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012157:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001215a:	05 fc 0f 00 00       	add    eax,0xffc
c001215f:	83 ca 03             	or     edx,0x3
c0012162:	89 10                	mov    DWORD PTR [eax],edx
c0012164:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0012169:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001216f:	83 ec 0c             	sub    esp,0xc
c0012172:	50                   	push   eax
c0012173:	e8 e8 1d 00 00       	call   c0013f60 <Device::getName()>
c0012178:	83 c4 10             	add    esp,0x10
c001217b:	83 ec 08             	sub    esp,0x8
c001217e:	68 f8 a8 02 c0       	push   0xc002a8f8
c0012183:	50                   	push   eax
c0012184:	e8 0f e7 fe ff       	call   c0000898 <strcmp>
c0012189:	83 c4 10             	add    esp,0x10
c001218c:	85 c0                	test   eax,eax
c001218e:	0f 94 c0             	sete   al
c0012191:	84 c0                	test   al,al
c0012193:	0f 84 87 00 00 00    	je     c0012220 <VAS::VAS(bool)+0x27a>
c0012199:	fa                   	cli    
c001219a:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001219f:	40                   	inc    eax
c00121a0:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c00121a5:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c00121aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121b0:	05 7c 09 00 00       	add    eax,0x97c
c00121b5:	83 ec 0c             	sub    esp,0xc
c00121b8:	50                   	push   eax
c00121b9:	e8 96 d0 ff ff       	call   c000f254 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00121be:	83 c4 10             	add    esp,0x10
c00121c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121c6:	89 c3                	mov    ebx,eax
c00121c8:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c00121cd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121d3:	05 7c 09 00 00       	add    eax,0x97c
c00121d8:	83 ec 0c             	sub    esp,0xc
c00121db:	50                   	push   eax
c00121dc:	e8 73 d0 ff ff       	call   c000f254 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00121e1:	83 c4 10             	add    esp,0x10
c00121e4:	83 ec 08             	sub    esp,0x8
c00121e7:	50                   	push   eax
c00121e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121ec:	e8 75 f5 ff ff       	call   c0011766 <VAS::getPageTableEntry(unsigned long)>
c00121f1:	83 c4 10             	add    esp,0x10
c00121f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00121f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121fb:	6a 11                	push   0x11
c00121fd:	53                   	push   ebx
c00121fe:	50                   	push   eax
c00121ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012203:	e8 f4 f8 ff ff       	call   c0011afc <VAS::mapPage(unsigned long, unsigned long, int)>
c0012208:	83 c4 10             	add    esp,0x10
c001220b:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c0012210:	48                   	dec    eax
c0012211:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c0012216:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001221b:	85 c0                	test   eax,eax
c001221d:	75 01                	jne    c0012220 <VAS::VAS(bool)+0x27a>
c001221f:	fb                   	sti    
c0012220:	90                   	nop
c0012221:	83 c4 28             	add    esp,0x28
c0012224:	5b                   	pop    ebx
c0012225:	c3                   	ret    

c0012226 <VAS::evict(unsigned long)>:
c0012226:	55                   	push   ebp
c0012227:	57                   	push   edi
c0012228:	56                   	push   esi
c0012229:	53                   	push   ebx
c001222a:	83 ec 28             	sub    esp,0x28
c001222d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012231:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012235:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012239:	68 06 a9 02 c0       	push   0xc002a906
c001223e:	e8 e4 05 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0012243:	e8 4e f3 ff ff       	call   c0011596 <Virt::allocateSwapfilePage()>
c0012248:	5a                   	pop    edx
c0012249:	89 c7                	mov    edi,eax
c001224b:	59                   	pop    ecx
c001224c:	50                   	push   eax
c001224d:	68 23 a9 02 c0       	push   0xc002a923
c0012252:	e8 d0 05 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0012257:	83 c4 10             	add    esp,0x10
c001225a:	8b 1d cc ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cecc
c0012260:	85 db                	test   ebx,ebx
c0012262:	7e 3d                	jle    c00122a1 <VAS::evict(unsigned long)+0x7b>
c0012264:	89 ee                	mov    esi,ebp
c0012266:	31 db                	xor    ebx,ebx
c0012268:	83 ec 0c             	sub    esp,0xc
c001226b:	57                   	push   edi
c001226c:	e8 13 f3 ff ff       	call   c0011584 <Virt::swapIDToSector(unsigned long)>
c0012271:	89 34 24             	mov    DWORD PTR [esp],esi
c0012274:	01 d8                	add    eax,ebx
c0012276:	6a 01                	push   0x1
c0012278:	31 d2                	xor    edx,edx
c001227a:	43                   	inc    ebx
c001227b:	52                   	push   edx
c001227c:	81 c6 00 02 00 00    	add    esi,0x200
c0012282:	50                   	push   eax
c0012283:	0f be 05 d8 ce 02 c0 	movsx  eax,BYTE PTR ds:0xc002ced8
c001228a:	ff 34 85 1c e4 02 c0 	push   DWORD PTR [eax*4-0x3ffd1be4]
c0012291:	e8 58 3f 00 00       	call   c00161ee <LogicalDisk::write(unsigned long long, int, void*)>
c0012296:	83 c4 20             	add    esp,0x20
c0012299:	39 1d cc ce 02 c0    	cmp    DWORD PTR ds:0xc002cecc,ebx
c001229f:	7f c7                	jg     c0012268 <VAS::evict(unsigned long)+0x42>
c00122a1:	83 ec 08             	sub    esp,0x8
c00122a4:	c1 e7 0b             	shl    edi,0xb
c00122a7:	55                   	push   ebp
c00122a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122ac:	e8 b5 f4 ff ff       	call   c0011766 <VAS::getPageTableEntry(unsigned long)>
c00122b1:	5a                   	pop    edx
c00122b2:	89 c6                	mov    esi,eax
c00122b4:	59                   	pop    ecx
c00122b5:	ff 30                	push   DWORD PTR [eax]
c00122b7:	68 33 a9 02 c0       	push   0xc002a933
c00122bc:	e8 66 05 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00122c1:	8b 16                	mov    edx,DWORD PTR [esi]
c00122c3:	89 d3                	mov    ebx,edx
c00122c5:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00122cb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00122d1:	09 d7                	or     edi,edx
c00122d3:	89 3e                	mov    DWORD PTR [esi],edi
c00122d5:	5e                   	pop    esi
c00122d6:	58                   	pop    eax
c00122d7:	57                   	push   edi
c00122d8:	68 4c a9 02 c0       	push   0xc002a94c
c00122dd:	e8 45 05 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00122e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122e5:	ff 05 88 e0 02 c0    	inc    DWORD PTR ds:0xc002e088
c00122eb:	e8 6a d8 ff ff       	call   c000fb5a <Phys::freePage(unsigned long)>
c00122f0:	0f 20 d8             	mov    eax,cr3
c00122f3:	0f 22 d8             	mov    cr3,eax
c00122f6:	ff 35 88 e0 02 c0    	push   DWORD PTR ds:0xc002e088
c00122fc:	55                   	push   ebp
c00122fd:	53                   	push   ebx
c00122fe:	68 20 a8 02 c0       	push   0xc002a820
c0012303:	e8 1f 05 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0012308:	a1 84 e0 02 c0       	mov    eax,ds:0xc002e084
c001230d:	c7 44 24 50 65 a9 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a965
c0012315:	8d 50 01             	lea    edx,[eax+0x1]
c0012318:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001231c:	89 15 84 e0 02 c0    	mov    DWORD PTR ds:0xc002e084,edx
c0012322:	83 c4 3c             	add    esp,0x3c
c0012325:	5b                   	pop    ebx
c0012326:	5e                   	pop    esi
c0012327:	5f                   	pop    edi
c0012328:	5d                   	pop    ebp
c0012329:	e9 f9 04 00 00       	jmp    c0012827 <Dbg::kprintf(char const*, ...)>

c001232e <VAS::tryLoadBackOffDisk(unsigned long)>:
c001232e:	55                   	push   ebp
c001232f:	57                   	push   edi
c0012330:	56                   	push   esi
c0012331:	53                   	push   ebx
c0012332:	83 ec 24             	sub    esp,0x24
c0012335:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012339:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001233d:	68 76 a9 02 c0       	push   0xc002a976
c0012342:	e8 e0 04 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0012347:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001234b:	58                   	pop    eax
c001234c:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0012352:	5a                   	pop    edx
c0012353:	57                   	push   edi
c0012354:	53                   	push   ebx
c0012355:	e8 0c f4 ff ff       	call   c0011766 <VAS::getPageTableEntry(unsigned long)>
c001235a:	59                   	pop    ecx
c001235b:	5e                   	pop    esi
c001235c:	89 c6                	mov    esi,eax
c001235e:	ff 30                	push   DWORD PTR [eax]
c0012360:	68 89 a9 02 c0       	push   0xc002a989
c0012365:	e8 bd 04 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001236a:	83 c4 10             	add    esp,0x10
c001236d:	85 ff                	test   edi,edi
c001236f:	74 0a                	je     c001237b <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c0012371:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0012373:	f7 c5 01 00 00 00    	test   ebp,0x1
c0012379:	74 0a                	je     c0012385 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c001237b:	83 c4 1c             	add    esp,0x1c
c001237e:	31 c0                	xor    eax,eax
c0012380:	5b                   	pop    ebx
c0012381:	5e                   	pop    esi
c0012382:	5f                   	pop    edi
c0012383:	5d                   	pop    ebp
c0012384:	c3                   	ret    
c0012385:	83 ec 08             	sub    esp,0x8
c0012388:	c1 ed 0b             	shr    ebp,0xb
c001238b:	55                   	push   ebp
c001238c:	68 97 a9 02 c0       	push   0xc002a997
c0012391:	e8 91 04 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0012396:	e8 30 d8 ff ff       	call   c000fbcb <Phys::allocatePage()>
c001239b:	59                   	pop    ecx
c001239c:	5a                   	pop    edx
c001239d:	50                   	push   eax
c001239e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123a2:	68 a2 a9 02 c0       	push   0xc002a9a2
c00123a7:	e8 7b 04 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00123ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00123b0:	8b 16                	mov    edx,DWORD PTR [esi]
c00123b2:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00123b8:	09 d0                	or     eax,edx
c00123ba:	0d 01 08 00 00       	or     eax,0x801
c00123bf:	89 06                	mov    DWORD PTR [esi],eax
c00123c1:	59                   	pop    ecx
c00123c2:	5e                   	pop    esi
c00123c3:	50                   	push   eax
c00123c4:	68 b7 a9 02 c0       	push   0xc002a9b7
c00123c9:	e8 59 04 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00123ce:	0f 20 d8             	mov    eax,cr3
c00123d1:	83 c4 0c             	add    esp,0xc
c00123d4:	53                   	push   ebx
c00123d5:	50                   	push   eax
c00123d6:	68 cf a9 02 c0       	push   0xc002a9cf
c00123db:	e8 47 04 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00123e0:	c7 04 24 e7 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9e7
c00123e7:	e8 3b 04 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00123ec:	83 c4 10             	add    esp,0x10
c00123ef:	a1 cc ce 02 c0       	mov    eax,ds:0xc002cecc
c00123f4:	85 c0                	test   eax,eax
c00123f6:	7e 3d                	jle    c0012435 <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c00123f8:	89 fe                	mov    esi,edi
c00123fa:	31 db                	xor    ebx,ebx
c00123fc:	83 ec 0c             	sub    esp,0xc
c00123ff:	55                   	push   ebp
c0012400:	e8 7f f1 ff ff       	call   c0011584 <Virt::swapIDToSector(unsigned long)>
c0012405:	89 34 24             	mov    DWORD PTR [esp],esi
c0012408:	01 d8                	add    eax,ebx
c001240a:	6a 01                	push   0x1
c001240c:	31 d2                	xor    edx,edx
c001240e:	43                   	inc    ebx
c001240f:	52                   	push   edx
c0012410:	81 c6 00 02 00 00    	add    esi,0x200
c0012416:	50                   	push   eax
c0012417:	0f be 05 d8 ce 02 c0 	movsx  eax,BYTE PTR ds:0xc002ced8
c001241e:	ff 34 85 1c e4 02 c0 	push   DWORD PTR [eax*4-0x3ffd1be4]
c0012425:	e8 58 3d 00 00       	call   c0016182 <LogicalDisk::read(unsigned long long, int, void*)>
c001242a:	83 c4 20             	add    esp,0x20
c001242d:	39 1d cc ce 02 c0    	cmp    DWORD PTR ds:0xc002cecc,ebx
c0012433:	7f c7                	jg     c00123fc <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c0012435:	a1 88 e0 02 c0       	mov    eax,ds:0xc002e088
c001243a:	48                   	dec    eax
c001243b:	52                   	push   edx
c001243c:	a3 88 e0 02 c0       	mov    ds:0xc002e088,eax
c0012441:	50                   	push   eax
c0012442:	57                   	push   edi
c0012443:	68 f7 a9 02 c0       	push   0xc002a9f7
c0012448:	e8 da 03 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001244d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012450:	e8 11 f1 ff ff       	call   c0011566 <Virt::freeSwapfilePage(unsigned long)>
c0012455:	c7 04 24 0c aa 02 c0 	mov    DWORD PTR [esp],0xc002aa0c
c001245c:	e8 c6 03 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0012461:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c0012466:	83 c4 10             	add    esp,0x10
c0012469:	48                   	dec    eax
c001246a:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001246f:	85 c0                	test   eax,eax
c0012471:	75 01                	jne    c0012474 <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c0012473:	fb                   	sti    
c0012474:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012478:	25 ff 0f 00 00       	and    eax,0xfff
c001247d:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012482:	77 20                	ja     c00124a4 <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c0012484:	0f 20 d8             	mov    eax,cr3
c0012487:	0f 22 d8             	mov    cr3,eax
c001248a:	83 ec 0c             	sub    esp,0xc
c001248d:	68 32 aa 02 c0       	push   0xc002aa32
c0012492:	e8 90 03 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0012497:	83 c4 10             	add    esp,0x10
c001249a:	b0 01                	mov    al,0x1
c001249c:	83 c4 1c             	add    esp,0x1c
c001249f:	5b                   	pop    ebx
c00124a0:	5e                   	pop    esi
c00124a1:	5f                   	pop    edi
c00124a2:	5d                   	pop    ebp
c00124a3:	c3                   	ret    
c00124a4:	83 ec 0c             	sub    esp,0xc
c00124a7:	68 22 aa 02 c0       	push   0xc002aa22
c00124ac:	e8 76 03 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00124b1:	83 c4 10             	add    esp,0x10
c00124b4:	eb ce                	jmp    c0012484 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c00124b6 <VAS::scanForEviction()>:
c00124b6:	55                   	push   ebp
c00124b7:	31 ed                	xor    ebp,ebp
c00124b9:	57                   	push   edi
c00124ba:	56                   	push   esi
c00124bb:	53                   	push   ebx
c00124bc:	83 ec 0c             	sub    esp,0xc
c00124bf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00124c3:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00124c6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00124cc:	75 0e                	jne    c00124dc <VAS::scanForEviction()+0x26>
c00124ce:	89 da                	mov    edx,ebx
c00124d0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00124d3:	c1 ea 16             	shr    edx,0x16
c00124d6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00124da:	74 4e                	je     c001252a <VAS::scanForEviction()+0x74>
c00124dc:	53                   	push   ebx
c00124dd:	56                   	push   esi
c00124de:	e8 83 f2 ff ff       	call   c0011766 <VAS::getPageTableEntry(unsigned long)>
c00124e3:	5f                   	pop    edi
c00124e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00124e6:	5a                   	pop    edx
c00124e7:	89 fa                	mov    edx,edi
c00124e9:	81 e2 01 08 00 00    	and    edx,0x801
c00124ef:	81 fa 01 08 00 00    	cmp    edx,0x801
c00124f5:	74 3e                	je     c0012535 <VAS::scanForEviction()+0x7f>
c00124f7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124fd:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012503:	76 2b                	jbe    c0012530 <VAS::scanForEviction()+0x7a>
c0012505:	45                   	inc    ebp
c0012506:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001250d:	83 fd 04             	cmp    ebp,0x4
c0012510:	74 35                	je     c0012547 <VAS::scanForEviction()+0x91>
c0012512:	31 db                	xor    ebx,ebx
c0012514:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001251a:	75 c0                	jne    c00124dc <VAS::scanForEviction()+0x26>
c001251c:	89 da                	mov    edx,ebx
c001251e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012521:	c1 ea 16             	shr    edx,0x16
c0012524:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012528:	75 b2                	jne    c00124dc <VAS::scanForEviction()+0x26>
c001252a:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012530:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012533:	eb 91                	jmp    c00124c6 <VAS::scanForEviction()+0x10>
c0012535:	f7 c7 20 00 00 00    	test   edi,0x20
c001253b:	74 22                	je     c001255f <VAS::scanForEviction()+0xa9>
c001253d:	83 e7 df             	and    edi,0xffffffdf
c0012540:	89 38                	mov    DWORD PTR [eax],edi
c0012542:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012545:	eb b0                	jmp    c00124f7 <VAS::scanForEviction()+0x41>
c0012547:	83 ec 0c             	sub    esp,0xc
c001254a:	68 50 a8 02 c0       	push   0xc002a850
c001254f:	e8 bf 7a 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0012554:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012557:	83 c4 10             	add    esp,0x10
c001255a:	e9 67 ff ff ff       	jmp    c00124c6 <VAS::scanForEviction()+0x10>
c001255f:	83 ec 08             	sub    esp,0x8
c0012562:	53                   	push   ebx
c0012563:	68 40 aa 02 c0       	push   0xc002aa40
c0012568:	e8 ba 02 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001256d:	58                   	pop    eax
c001256e:	5a                   	pop    edx
c001256f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0012572:	56                   	push   esi
c0012573:	e8 ae fc ff ff       	call   c0012226 <VAS::evict(unsigned long)>
c0012578:	59                   	pop    ecx
c0012579:	5b                   	pop    ebx
c001257a:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001257d:	68 54 aa 02 c0       	push   0xc002aa54
c0012582:	e8 a0 02 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0012587:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c001258e:	89 f8                	mov    eax,edi
c0012590:	83 c4 1c             	add    esp,0x1c
c0012593:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012598:	5b                   	pop    ebx
c0012599:	5e                   	pop    esi
c001259a:	5f                   	pop    edi
c001259b:	5d                   	pop    ebp
c001259c:	c3                   	ret    

c001259d <mapVASFirstTime>:
c001259d:	55                   	push   ebp
c001259e:	57                   	push   edi
c001259f:	56                   	push   esi
c00125a0:	53                   	push   ebx
c00125a1:	83 ec 0c             	sub    esp,0xc
c00125a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125a9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00125ac:	4a                   	dec    edx
c00125ad:	0f 84 fe 00 00 00    	je     c00126b1 <mapVASFirstTime+0x114>
c00125b3:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00125b6:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00125b9:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00125be:	c1 e5 15             	shl    ebp,0x15
c00125c1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00125c6:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c00125cc:	29 eb                	sub    ebx,ebp
c00125ce:	29 ef                	sub    edi,ebp
c00125d0:	83 ec 08             	sub    esp,0x8
c00125d3:	53                   	push   ebx
c00125d4:	68 80 aa 02 c0       	push   0xc002aa80
c00125d9:	e8 49 02 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00125de:	e8 e8 d5 ff ff       	call   c000fbcb <Phys::allocatePage()>
c00125e3:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c00125ea:	6a 01                	push   0x1
c00125ec:	53                   	push   ebx
c00125ed:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00125f3:	50                   	push   eax
c00125f4:	56                   	push   esi
c00125f5:	e8 f8 f7 ff ff       	call   c0011df2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125fa:	83 c4 20             	add    esp,0x20
c00125fd:	39 fb                	cmp    ebx,edi
c00125ff:	75 cf                	jne    c00125d0 <mapVASFirstTime+0x33>
c0012601:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0012606:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001260b:	29 eb                	sub    ebx,ebp
c001260d:	29 ef                	sub    edi,ebp
c001260f:	83 ec 08             	sub    esp,0x8
c0012612:	53                   	push   ebx
c0012613:	68 9c aa 02 c0       	push   0xc002aa9c
c0012618:	e8 0a 02 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001261d:	58                   	pop    eax
c001261e:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0012622:	5a                   	pop    edx
c0012623:	19 c0                	sbb    eax,eax
c0012625:	83 e0 04             	and    eax,0x4
c0012628:	05 03 04 00 00       	add    eax,0x403
c001262d:	50                   	push   eax
c001262e:	68 c1 a9 02 c0       	push   0xc002a9c1
c0012633:	e8 ef 01 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0012638:	e8 8e d5 ff ff       	call   c000fbcb <Phys::allocatePage()>
c001263d:	59                   	pop    ecx
c001263e:	89 c5                	mov    ebp,eax
c0012640:	58                   	pop    eax
c0012641:	55                   	push   ebp
c0012642:	68 b0 aa 02 c0       	push   0xc002aab0
c0012647:	e8 db 01 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001264c:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0012650:	19 d2                	sbb    edx,edx
c0012652:	83 e2 04             	and    edx,0x4
c0012655:	81 c2 03 04 00 00    	add    edx,0x403
c001265b:	89 14 24             	mov    DWORD PTR [esp],edx
c001265e:	6a 01                	push   0x1
c0012660:	53                   	push   ebx
c0012661:	55                   	push   ebp
c0012662:	56                   	push   esi
c0012663:	e8 8a f7 ff ff       	call   c0011df2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012668:	83 c4 18             	add    esp,0x18
c001266b:	53                   	push   ebx
c001266c:	56                   	push   esi
c001266d:	e8 f4 f0 ff ff       	call   c0011766 <VAS::getPageTableEntry(unsigned long)>
c0012672:	5a                   	pop    edx
c0012673:	59                   	pop    ecx
c0012674:	ff 30                	push   DWORD PTR [eax]
c0012676:	68 cc aa 02 c0       	push   0xc002aacc
c001267b:	e8 a7 01 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0012680:	0f 20 d8             	mov    eax,cr3
c0012683:	83 c4 0c             	add    esp,0xc
c0012686:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001268c:	56                   	push   esi
c001268d:	50                   	push   eax
c001268e:	68 cf a9 02 c0       	push   0xc002a9cf
c0012693:	e8 8f 01 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0012698:	83 c4 10             	add    esp,0x10
c001269b:	39 df                	cmp    edi,ebx
c001269d:	0f 85 6c ff ff ff    	jne    c001260f <mapVASFirstTime+0x72>
c00126a3:	0f 20 d8             	mov    eax,cr3
c00126a6:	0f 22 d8             	mov    cr3,eax
c00126a9:	83 c4 0c             	add    esp,0xc
c00126ac:	5b                   	pop    ebx
c00126ad:	5e                   	pop    esi
c00126ae:	5f                   	pop    edi
c00126af:	5d                   	pop    ebp
c00126b0:	c3                   	ret    
c00126b1:	83 ec 0c             	sub    esp,0xc
c00126b4:	68 67 aa 02 c0       	push   0xc002aa67
c00126b9:	e8 69 01 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00126be:	83 c4 10             	add    esp,0x10
c00126c1:	83 c4 0c             	add    esp,0xc
c00126c4:	5b                   	pop    ebx
c00126c5:	5e                   	pop    esi
c00126c6:	5f                   	pop    edi
c00126c7:	5d                   	pop    ebp
c00126c8:	c3                   	ret    

c00126c9 <__cxa_atexit>:
c00126c9:	31 c0                	xor    eax,eax
c00126cb:	c3                   	ret    

c00126cc <__cxa_finalize>:
c00126cc:	c3                   	ret    

c00126cd <__stack_chk_fail>:
c00126cd:	55                   	push   ebp
c00126ce:	89 e5                	mov    ebp,esp
c00126d0:	83 ec 14             	sub    esp,0x14
c00126d3:	68 d7 aa 02 c0       	push   0xc002aad7
c00126d8:	e8 4a 01 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00126dd:	58                   	pop    eax
c00126de:	5a                   	pop    edx
c00126df:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00126e2:	68 27 ab 02 c0       	push   0xc002ab27
c00126e7:	e8 3b 01 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00126ec:	59                   	pop    ecx
c00126ed:	58                   	pop    eax
c00126ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00126f1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00126f4:	68 27 ab 02 c0       	push   0xc002ab27
c00126f9:	e8 29 01 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00126fe:	5a                   	pop    edx
c00126ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012702:	59                   	pop    ecx
c0012703:	8b 00                	mov    eax,DWORD PTR [eax]
c0012705:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012708:	68 27 ab 02 c0       	push   0xc002ab27
c001270d:	e8 15 01 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0012712:	5a                   	pop    edx
c0012713:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012716:	59                   	pop    ecx
c0012717:	8b 00                	mov    eax,DWORD PTR [eax]
c0012719:	8b 00                	mov    eax,DWORD PTR [eax]
c001271b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001271e:	68 27 ab 02 c0       	push   0xc002ab27
c0012723:	e8 ff 00 00 00       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0012728:	c7 04 24 2f ab 02 c0 	mov    DWORD PTR [esp],0xc002ab2f
c001272f:	e8 df 78 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0012734:	83 c4 10             	add    esp,0x10
c0012737:	c9                   	leave  
c0012738:	c3                   	ret    

c0012739 <__cxa_pure_virtual>:
c0012739:	83 ec 18             	sub    esp,0x18
c001273c:	68 47 ab 02 c0       	push   0xc002ab47
c0012741:	e8 cd 78 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0012746:	83 c4 1c             	add    esp,0x1c
c0012749:	c3                   	ret    

c001274a <operator new[](unsigned long)>:
c001274a:	e9 80 d0 ff ff       	jmp    c000f7cf <malloc>

c001274f <operator delete(void*, unsigned long)>:
c001274f:	e9 9b d0 ff ff       	jmp    c000f7ef <rfree>

c0012754 <operator delete[](void*)>:
c0012754:	e9 96 d0 ff ff       	jmp    c000f7ef <rfree>

c0012759 <operator delete[](void*, unsigned long)>:
c0012759:	e9 91 d0 ff ff       	jmp    c000f7ef <rfree>

c001275e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001275e:	55                   	push   ebp
c001275f:	b9 11 00 00 00       	mov    ecx,0x11
c0012764:	57                   	push   edi
c0012765:	56                   	push   esi
c0012766:	be 3a a5 02 c0       	mov    esi,0xc002a53a
c001276b:	53                   	push   ebx
c001276c:	83 ec 20             	sub    esp,0x20
c001276f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012773:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012777:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001277b:	fc                   	cld    
c001277c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001277e:	89 ee                	mov    esi,ebp
c0012780:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012784:	eb 02                	jmp    c0012788 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012786:	89 c6                	mov    esi,eax
c0012788:	31 d2                	xor    edx,edx
c001278a:	41                   	inc    ecx
c001278b:	89 f0                	mov    eax,esi
c001278d:	f7 f3                	div    ebx
c001278f:	39 de                	cmp    esi,ebx
c0012791:	73 f3                	jae    c0012786 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012793:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012796:	eb 02                	jmp    c001279a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012798:	89 c5                	mov    ebp,eax
c001279a:	31 d2                	xor    edx,edx
c001279c:	49                   	dec    ecx
c001279d:	89 e8                	mov    eax,ebp
c001279f:	f7 f3                	div    ebx
c00127a1:	39 dd                	cmp    ebp,ebx
c00127a3:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00127a7:	88 11                	mov    BYTE PTR [ecx],dl
c00127a9:	73 ed                	jae    c0012798 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c00127ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00127af:	83 c4 20             	add    esp,0x20
c00127b2:	5b                   	pop    ebx
c00127b3:	5e                   	pop    esi
c00127b4:	5f                   	pop    edi
c00127b5:	5d                   	pop    ebp
c00127b6:	c3                   	ret    

c00127b7 <Dbg::logc(char)>:
c00127b7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127bb:	ba fd 03 00 00       	mov    edx,0x3fd
c00127c0:	ec                   	in     al,dx
c00127c1:	a8 20                	test   al,0x20
c00127c3:	74 fb                	je     c00127c0 <Dbg::logc(char)+0x9>
c00127c5:	ba f8 03 00 00       	mov    edx,0x3f8
c00127ca:	88 c8                	mov    al,cl
c00127cc:	ee                   	out    dx,al
c00127cd:	c3                   	ret    

c00127ce <Dbg::logs(char*)>:
c00127ce:	53                   	push   ebx
c00127cf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00127d3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00127d6:	84 c0                	test   al,al
c00127d8:	74 0f                	je     c00127e9 <Dbg::logs(char*)+0x1b>
c00127da:	50                   	push   eax
c00127db:	43                   	inc    ebx
c00127dc:	e8 d6 ff ff ff       	call   c00127b7 <Dbg::logc(char)>
c00127e1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00127e4:	5a                   	pop    edx
c00127e5:	84 c0                	test   al,al
c00127e7:	75 f1                	jne    c00127da <Dbg::logs(char*)+0xc>
c00127e9:	5b                   	pop    ebx
c00127ea:	c3                   	ret    

c00127eb <Dbg::logWriteInt(unsigned int)>:
c00127eb:	83 ec 10             	sub    esp,0x10
c00127ee:	6a 0a                	push   0xa
c00127f0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00127f4:	50                   	push   eax
c00127f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127f9:	e8 60 ff ff ff       	call   c001275e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00127fe:	50                   	push   eax
c00127ff:	e8 ca ff ff ff       	call   c00127ce <Dbg::logs(char*)>
c0012804:	83 c4 20             	add    esp,0x20
c0012807:	c3                   	ret    

c0012808 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012808:	83 ec 10             	sub    esp,0x10
c001280b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001280f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012813:	50                   	push   eax
c0012814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012818:	e8 41 ff ff ff       	call   c001275e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001281d:	50                   	push   eax
c001281e:	e8 ab ff ff ff       	call   c00127ce <Dbg::logs(char*)>
c0012823:	83 c4 20             	add    esp,0x20
c0012826:	c3                   	ret    

c0012827 <Dbg::kprintf(char const*, ...)>:
c0012827:	55                   	push   ebp
c0012828:	57                   	push   edi
c0012829:	56                   	push   esi
c001282a:	53                   	push   ebx
c001282b:	83 ec 0c             	sub    esp,0xc
c001282e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012832:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012836:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001283a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001283d:	84 c0                	test   al,al
c001283f:	74 4a                	je     c001288b <Dbg::kprintf(char const*, ...)+0x64>
c0012841:	31 db                	xor    ebx,ebx
c0012843:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012846:	3c 25                	cmp    al,0x25
c0012848:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001284b:	0f 85 e4 00 00 00    	jne    c0012935 <Dbg::kprintf(char const*, ...)+0x10e>
c0012851:	83 c3 02             	add    ebx,0x2
c0012854:	8a 07                	mov    al,BYTE PTR [edi]
c0012856:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012859:	83 e8 25             	sub    eax,0x25
c001285c:	3c 53                	cmp    al,0x53
c001285e:	0f 87 ba 00 00 00    	ja     c001291e <Dbg::kprintf(char const*, ...)+0xf7>
c0012864:	0f b6 c0             	movzx  eax,al
c0012867:	ff 24 85 5c ab 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd54a4]
c001286e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012872:	89 c8                	mov    eax,ecx
c0012874:	83 c1 04             	add    ecx,0x4
c0012877:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001287b:	ff 30                	push   DWORD PTR [eax]
c001287d:	e8 69 ff ff ff       	call   c00127eb <Dbg::logWriteInt(unsigned int)>
c0012882:	5f                   	pop    edi
c0012883:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012887:	84 c0                	test   al,al
c0012889:	75 b8                	jne    c0012843 <Dbg::kprintf(char const*, ...)+0x1c>
c001288b:	83 c4 0c             	add    esp,0xc
c001288e:	5b                   	pop    ebx
c001288f:	5e                   	pop    esi
c0012890:	5f                   	pop    edi
c0012891:	5d                   	pop    ebp
c0012892:	c3                   	ret    
c0012893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012897:	89 c8                	mov    eax,ecx
c0012899:	83 c1 04             	add    ecx,0x4
c001289c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00128a0:	ff 30                	push   DWORD PTR [eax]
c00128a2:	e8 27 ff ff ff       	call   c00127ce <Dbg::logs(char*)>
c00128a7:	58                   	pop    eax
c00128a8:	eb d9                	jmp    c0012883 <Dbg::kprintf(char const*, ...)+0x5c>
c00128aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128ae:	89 d0                	mov    eax,edx
c00128b0:	83 c2 04             	add    edx,0x4
c00128b3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00128b7:	ff 30                	push   DWORD PTR [eax]
c00128b9:	e8 2d ff ff ff       	call   c00127eb <Dbg::logWriteInt(unsigned int)>
c00128be:	58                   	pop    eax
c00128bf:	eb c2                	jmp    c0012883 <Dbg::kprintf(char const*, ...)+0x5c>
c00128c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128c5:	89 d0                	mov    eax,edx
c00128c7:	83 c2 04             	add    edx,0x4
c00128ca:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00128cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00128d1:	50                   	push   eax
c00128d2:	e8 e0 fe ff ff       	call   c00127b7 <Dbg::logc(char)>
c00128d7:	58                   	pop    eax
c00128d8:	eb a9                	jmp    c0012883 <Dbg::kprintf(char const*, ...)+0x5c>
c00128da:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128de:	89 c8                	mov    eax,ecx
c00128e0:	83 c1 04             	add    ecx,0x4
c00128e3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00128e7:	6a 10                	push   0x10
c00128e9:	ff 30                	push   DWORD PTR [eax]
c00128eb:	e8 18 ff ff ff       	call   c0012808 <Dbg::logWriteIntBase(unsigned int, int)>
c00128f0:	59                   	pop    ecx
c00128f1:	5f                   	pop    edi
c00128f2:	eb 8f                	jmp    c0012883 <Dbg::kprintf(char const*, ...)+0x5c>
c00128f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128f8:	89 d0                	mov    eax,edx
c00128fa:	83 c2 08             	add    edx,0x8
c00128fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012901:	6a 10                	push   0x10
c0012903:	ff 30                	push   DWORD PTR [eax]
c0012905:	e8 fe fe ff ff       	call   c0012808 <Dbg::logWriteIntBase(unsigned int, int)>
c001290a:	58                   	pop    eax
c001290b:	5a                   	pop    edx
c001290c:	e9 72 ff ff ff       	jmp    c0012883 <Dbg::kprintf(char const*, ...)+0x5c>
c0012911:	6a 25                	push   0x25
c0012913:	e8 9f fe ff ff       	call   c00127b7 <Dbg::logc(char)>
c0012918:	58                   	pop    eax
c0012919:	e9 65 ff ff ff       	jmp    c0012883 <Dbg::kprintf(char const*, ...)+0x5c>
c001291e:	6a 25                	push   0x25
c0012920:	e8 92 fe ff ff       	call   c00127b7 <Dbg::logc(char)>
c0012925:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012928:	50                   	push   eax
c0012929:	e8 89 fe ff ff       	call   c00127b7 <Dbg::logc(char)>
c001292e:	5a                   	pop    edx
c001292f:	59                   	pop    ecx
c0012930:	e9 4e ff ff ff       	jmp    c0012883 <Dbg::kprintf(char const*, ...)+0x5c>
c0012935:	50                   	push   eax
c0012936:	89 eb                	mov    ebx,ebp
c0012938:	e8 7a fe ff ff       	call   c00127b7 <Dbg::logc(char)>
c001293d:	89 fd                	mov    ebp,edi
c001293f:	58                   	pop    eax
c0012940:	e9 3e ff ff ff       	jmp    c0012883 <Dbg::kprintf(char const*, ...)+0x5c>
c0012945:	90                   	nop

c0012946 <File::read(unsigned long long, void*, int*)>:
c0012946:	53                   	push   ebx
c0012947:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001294b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001294f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012956:	3c 19                	cmp    al,0x19
c0012958:	77 35                	ja     c001298f <File::read(unsigned long long, void*, int*)+0x49>
c001295a:	8b 04 85 20 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ae0]
c0012961:	85 c0                	test   eax,eax
c0012963:	74 2a                	je     c001298f <File::read(unsigned long long, void*, int*)+0x49>
c0012965:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001296b:	85 c0                	test   eax,eax
c001296d:	74 20                	je     c001298f <File::read(unsigned long long, void*, int*)+0x49>
c001296f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012973:	74 21                	je     c0012996 <File::read(unsigned long long, void*, int*)+0x50>
c0012975:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012977:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001297b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012981:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012985:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012989:	5b                   	pop    ebx
c001298a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001298d:	ff e0                	jmp    eax
c001298f:	b8 0b 00 00 00       	mov    eax,0xb
c0012994:	eb 05                	jmp    c001299b <File::read(unsigned long long, void*, int*)+0x55>
c0012996:	b8 05 00 00 00       	mov    eax,0x5
c001299b:	5b                   	pop    ebx
c001299c:	c3                   	ret    
c001299d:	90                   	nop

c001299e <File::write(unsigned long long, void*, int*)>:
c001299e:	53                   	push   ebx
c001299f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129a7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00129ae:	3c 19                	cmp    al,0x19
c00129b0:	77 35                	ja     c00129e7 <File::write(unsigned long long, void*, int*)+0x49>
c00129b2:	8b 04 85 20 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ae0]
c00129b9:	85 c0                	test   eax,eax
c00129bb:	74 2a                	je     c00129e7 <File::write(unsigned long long, void*, int*)+0x49>
c00129bd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00129c3:	85 c0                	test   eax,eax
c00129c5:	74 20                	je     c00129e7 <File::write(unsigned long long, void*, int*)+0x49>
c00129c7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129cb:	74 21                	je     c00129ee <File::write(unsigned long long, void*, int*)+0x50>
c00129cd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00129cf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00129d3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00129d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129e1:	5b                   	pop    ebx
c00129e2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00129e5:	ff e0                	jmp    eax
c00129e7:	b8 0b 00 00 00       	mov    eax,0xb
c00129ec:	eb 05                	jmp    c00129f3 <File::write(unsigned long long, void*, int*)+0x55>
c00129ee:	b8 05 00 00 00       	mov    eax,0x5
c00129f3:	5b                   	pop    ebx
c00129f4:	c3                   	ret    
c00129f5:	90                   	nop

c00129f6 <Directory::read(unsigned long long, void*, int*)>:
c00129f6:	53                   	push   ebx
c00129f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129fb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129ff:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a06:	3c 19                	cmp    al,0x19
c0012a08:	77 35                	ja     c0012a3f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a0a:	8b 04 85 20 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ae0]
c0012a11:	85 c0                	test   eax,eax
c0012a13:	74 2a                	je     c0012a3f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a15:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a1b:	85 c0                	test   eax,eax
c0012a1d:	74 20                	je     c0012a3f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a1f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a23:	74 21                	je     c0012a46 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012a25:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a27:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a2b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a39:	5b                   	pop    ebx
c0012a3a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012a3d:	ff e0                	jmp    eax
c0012a3f:	b8 0b 00 00 00       	mov    eax,0xb
c0012a44:	eb 05                	jmp    c0012a4b <Directory::read(unsigned long long, void*, int*)+0x55>
c0012a46:	b8 05 00 00 00       	mov    eax,0x5
c0012a4b:	5b                   	pop    ebx
c0012a4c:	c3                   	ret    
c0012a4d:	90                   	nop

c0012a4e <Directory::write(unsigned long long, void*, int*)>:
c0012a4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a52:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012a59:	b8 0b 00 00 00       	mov    eax,0xb
c0012a5e:	80 fa 19             	cmp    dl,0x19
c0012a61:	77 18                	ja     c0012a7b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012a63:	8b 14 95 20 e5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ae0]
c0012a6a:	85 d2                	test   edx,edx
c0012a6c:	74 0d                	je     c0012a7b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012a6e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012a75:	19 c0                	sbb    eax,eax
c0012a77:	83 e0 0a             	and    eax,0xa
c0012a7a:	40                   	inc    eax
c0012a7b:	c3                   	ret    

c0012a7c <File::isAtty()>:
c0012a7c:	31 c0                	xor    eax,eax
c0012a7e:	c3                   	ret    
c0012a7f:	90                   	nop

c0012a80 <Directory::isAtty()>:
c0012a80:	31 c0                	xor    eax,eax
c0012a82:	c3                   	ret    
c0012a83:	90                   	nop

c0012a84 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012a84:	b8 0a 00 00 00       	mov    eax,0xa
c0012a89:	c3                   	ret    

c0012a8a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012a8a:	b8 0a 00 00 00       	mov    eax,0xa
c0012a8f:	c3                   	ret    

c0012a90 <Filesystem::allocateSwapfile(char const*, int)>:
c0012a90:	31 c0                	xor    eax,eax
c0012a92:	31 d2                	xor    edx,edx
c0012a94:	c3                   	ret    
c0012a95:	90                   	nop

c0012a96 <File::~File()>:
c0012a96:	83 ec 0c             	sub    esp,0xc
c0012a99:	ba 1c ad 02 c0       	mov    edx,0xc002ad1c
c0012a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aa2:	89 10                	mov    DWORD PTR [eax],edx
c0012aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aa8:	83 ec 0c             	sub    esp,0xc
c0012aab:	50                   	push   eax
c0012aac:	e8 43 e7 ff ff       	call   c00111f4 <UnixFile::~UnixFile()>
c0012ab1:	83 c4 10             	add    esp,0x10
c0012ab4:	90                   	nop
c0012ab5:	83 c4 0c             	add    esp,0xc
c0012ab8:	c3                   	ret    
c0012ab9:	90                   	nop

c0012aba <File::~File()>:
c0012aba:	83 ec 0c             	sub    esp,0xc
c0012abd:	83 ec 0c             	sub    esp,0xc
c0012ac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ac4:	e8 cd ff ff ff       	call   c0012a96 <File::~File()>
c0012ac9:	83 c4 10             	add    esp,0x10
c0012acc:	83 ec 08             	sub    esp,0x8
c0012acf:	68 14 01 00 00       	push   0x114
c0012ad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ad8:	e8 72 fc ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c0012add:	83 c4 10             	add    esp,0x10
c0012ae0:	83 c4 0c             	add    esp,0xc
c0012ae3:	c3                   	ret    

c0012ae4 <Directory::~Directory()>:
c0012ae4:	83 ec 0c             	sub    esp,0xc
c0012ae7:	ba 38 ad 02 c0       	mov    edx,0xc002ad38
c0012aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012af0:	89 10                	mov    DWORD PTR [eax],edx
c0012af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012af6:	83 ec 0c             	sub    esp,0xc
c0012af9:	50                   	push   eax
c0012afa:	e8 f5 e6 ff ff       	call   c00111f4 <UnixFile::~UnixFile()>
c0012aff:	83 c4 10             	add    esp,0x10
c0012b02:	90                   	nop
c0012b03:	83 c4 0c             	add    esp,0xc
c0012b06:	c3                   	ret    
c0012b07:	90                   	nop

c0012b08 <Directory::~Directory()>:
c0012b08:	83 ec 0c             	sub    esp,0xc
c0012b0b:	83 ec 0c             	sub    esp,0xc
c0012b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b12:	e8 cd ff ff ff       	call   c0012ae4 <Directory::~Directory()>
c0012b17:	83 c4 10             	add    esp,0x10
c0012b1a:	83 ec 08             	sub    esp,0x8
c0012b1d:	68 14 01 00 00       	push   0x114
c0012b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b26:	e8 24 fc ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c0012b2b:	83 c4 10             	add    esp,0x10
c0012b2e:	83 c4 0c             	add    esp,0xc
c0012b31:	c3                   	ret    

c0012b32 <Filesystem::Filesystem()>:
c0012b32:	ba b4 ac 02 c0       	mov    edx,0xc002acb4
c0012b37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b3b:	89 10                	mov    DWORD PTR [eax],edx
c0012b3d:	8b 15 94 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e094
c0012b43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b4e:	a3 94 e0 02 c0       	mov    ds:0xc002e094,eax
c0012b53:	90                   	nop
c0012b54:	c3                   	ret    
c0012b55:	90                   	nop

c0012b56 <Filesystem::~Filesystem()>:
c0012b56:	ba b4 ac 02 c0       	mov    edx,0xc002acb4
c0012b5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b5f:	89 10                	mov    DWORD PTR [eax],edx
c0012b61:	90                   	nop
c0012b62:	c3                   	ret    
c0012b63:	90                   	nop

c0012b64 <Filesystem::~Filesystem()>:
c0012b64:	83 ec 0c             	sub    esp,0xc
c0012b67:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012b6b:	e8 e6 ff ff ff       	call   c0012b56 <Filesystem::~Filesystem()>
c0012b70:	83 c4 04             	add    esp,0x4
c0012b73:	83 ec 08             	sub    esp,0x8
c0012b76:	6a 08                	push   0x8
c0012b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b7c:	e8 ce fb ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c0012b81:	83 c4 10             	add    esp,0x10
c0012b84:	83 c4 0c             	add    esp,0xc
c0012b87:	c3                   	ret    

c0012b88 <Fs::getcwd(Process*, char*, int)>:
c0012b88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b8c:	31 c0                	xor    eax,eax
c0012b8e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b91:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012b95:	7d 15                	jge    c0012bac <Fs::getcwd(Process*, char*, int)+0x24>
c0012b97:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b9b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012ba2:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012ba5:	84 c9                	test   cl,cl
c0012ba7:	74 06                	je     c0012baf <Fs::getcwd(Process*, char*, int)+0x27>
c0012ba9:	40                   	inc    eax
c0012baa:	eb e2                	jmp    c0012b8e <Fs::getcwd(Process*, char*, int)+0x6>
c0012bac:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012baf:	31 c0                	xor    eax,eax
c0012bb1:	c3                   	ret    

c0012bb2 <Fs::initVFS()>:
c0012bb2:	83 ec 18             	sub    esp,0x18
c0012bb5:	6a 08                	push   0x8
c0012bb7:	e8 13 cc ff ff       	call   c000f7cf <malloc>
c0012bbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0012bbf:	e8 a2 e0 00 00       	call   c0020c66 <FAT::FAT()>
c0012bc4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012bcb:	e8 ff cb ff ff       	call   c000f7cf <malloc>
c0012bd0:	89 04 24             	mov    DWORD PTR [esp],eax
c0012bd3:	e8 9a f2 00 00       	call   c0021e72 <ISO9660::ISO9660()>
c0012bd8:	83 c4 1c             	add    esp,0x1c
c0012bdb:	c3                   	ret    

c0012bdc <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012bdc:	55                   	push   ebp
c0012bdd:	57                   	push   edi
c0012bde:	56                   	push   esi
c0012bdf:	53                   	push   ebx
c0012be0:	81 ec 10 04 00 00    	sub    esp,0x410
c0012be6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012bed:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012bf4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012bfb:	68 00 04 00 00       	push   0x400
c0012c00:	6a 00                	push   0x0
c0012c02:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012c06:	56                   	push   esi
c0012c07:	e8 44 db fe ff       	call   c0000750 <memset>
c0012c0c:	83 c4 10             	add    esp,0x10
c0012c0f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012c13:	75 0b                	jne    c0012c20 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012c15:	50                   	push   eax
c0012c16:	50                   	push   eax
c0012c17:	57                   	push   edi
c0012c18:	56                   	push   esi
c0012c19:	e8 ee db fe ff       	call   c000080c <strcpy>
c0012c1e:	eb 41                	jmp    c0012c61 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012c20:	8a 07                	mov    al,BYTE PTR [edi]
c0012c22:	3c 5c                	cmp    al,0x5c
c0012c24:	74 04                	je     c0012c2a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012c26:	3c 2f                	cmp    al,0x2f
c0012c28:	75 18                	jne    c0012c42 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012c2a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012c2d:	3c 60                	cmp    al,0x60
c0012c2f:	7e 03                	jle    c0012c34 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012c31:	83 e8 20             	sub    eax,0x20
c0012c34:	88 04 24             	mov    BYTE PTR [esp],al
c0012c37:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012c3e:	50                   	push   eax
c0012c3f:	50                   	push   eax
c0012c40:	eb 18                	jmp    c0012c5a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012c42:	50                   	push   eax
c0012c43:	50                   	push   eax
c0012c44:	55                   	push   ebp
c0012c45:	56                   	push   esi
c0012c46:	e8 c1 db fe ff       	call   c000080c <strcpy>
c0012c4b:	5a                   	pop    edx
c0012c4c:	59                   	pop    ecx
c0012c4d:	68 d6 c0 02 c0       	push   0xc002c0d6
c0012c52:	56                   	push   esi
c0012c53:	e8 f4 dc fe ff       	call   c000094c <strcat>
c0012c58:	5d                   	pop    ebp
c0012c59:	58                   	pop    eax
c0012c5a:	57                   	push   edi
c0012c5b:	56                   	push   esi
c0012c5c:	e8 eb dc fe ff       	call   c000094c <strcat>
c0012c61:	83 c4 10             	add    esp,0x10
c0012c64:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012c67:	3c 60                	cmp    al,0x60
c0012c69:	7e 03                	jle    c0012c6e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012c6b:	83 e8 20             	sub    eax,0x20
c0012c6e:	88 04 24             	mov    BYTE PTR [esp],al
c0012c71:	88 03                	mov    BYTE PTR [ebx],al
c0012c73:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012c7a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012c80:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012c84:	bf 03 00 00 00       	mov    edi,0x3
c0012c89:	b8 03 00 00 00       	mov    eax,0x3
c0012c8e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012c91:	84 d2                	test   dl,dl
c0012c93:	0f 84 91 00 00 00    	je     c0012d2a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012c99:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012c9c:	80 fa 5c             	cmp    dl,0x5c
c0012c9f:	74 05                	je     c0012ca6 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012ca1:	80 fa 2f             	cmp    dl,0x2f
c0012ca4:	75 12                	jne    c0012cb8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012ca6:	89 c5                	mov    ebp,eax
c0012ca8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012cad:	74 09                	je     c0012cb8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012caf:	40                   	inc    eax
c0012cb0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012cb4:	89 cf                	mov    edi,ecx
c0012cb6:	eb d6                	jmp    c0012c8e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012cb8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012cbd:	75 5b                	jne    c0012d1a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012cbf:	80 fa 2e             	cmp    dl,0x2e
c0012cc2:	75 56                	jne    c0012d1a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012cc4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012cc8:	74 19                	je     c0012ce3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012cca:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012ccf:	74 53                	je     c0012d24 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012cd1:	89 f9                	mov    ecx,edi
c0012cd3:	41                   	inc    ecx
c0012cd4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012cd7:	80 fa 2f             	cmp    dl,0x2f
c0012cda:	74 f7                	je     c0012cd3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012cdc:	80 fa 5c             	cmp    dl,0x5c
c0012cdf:	74 f2                	je     c0012cd3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012ce1:	eb d1                	jmp    c0012cb4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ce3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012ce8:	74 3a                	je     c0012d24 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012cea:	83 f8 03             	cmp    eax,0x3
c0012ced:	74 c5                	je     c0012cb4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012cef:	41                   	inc    ecx
c0012cf0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012cf3:	80 fa 2f             	cmp    dl,0x2f
c0012cf6:	74 f7                	je     c0012cef <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012cf8:	80 fa 5c             	cmp    dl,0x5c
c0012cfb:	74 f2                	je     c0012cef <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012cfd:	48                   	dec    eax
c0012cfe:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d02:	75 06                	jne    c0012d0a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012d04:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d08:	eb f3                	jmp    c0012cfd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012d0a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d0e:	74 07                	je     c0012d17 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012d10:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d14:	48                   	dec    eax
c0012d15:	eb f3                	jmp    c0012d0a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012d17:	40                   	inc    eax
c0012d18:	eb 9a                	jmp    c0012cb4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d1a:	80 fa 2f             	cmp    dl,0x2f
c0012d1d:	74 95                	je     c0012cb4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d1f:	80 fa 5c             	cmp    dl,0x5c
c0012d22:	74 90                	je     c0012cb4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d24:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012d27:	40                   	inc    eax
c0012d28:	eb 8a                	jmp    c0012cb4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d2a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d2e:	83 ec 0c             	sub    esp,0xc
c0012d31:	53                   	push   ebx
c0012d32:	e8 35 da fe ff       	call   c000076c <strlen>
c0012d37:	83 c4 10             	add    esp,0x10
c0012d3a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012d3f:	75 26                	jne    c0012d67 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012d41:	83 ec 0c             	sub    esp,0xc
c0012d44:	53                   	push   ebx
c0012d45:	e8 22 da fe ff       	call   c000076c <strlen>
c0012d4a:	83 c4 10             	add    esp,0x10
c0012d4d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012d52:	74 26                	je     c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012d54:	83 ec 0c             	sub    esp,0xc
c0012d57:	53                   	push   ebx
c0012d58:	e8 0f da fe ff       	call   c000076c <strlen>
c0012d5d:	83 c4 10             	add    esp,0x10
c0012d60:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012d65:	eb c7                	jmp    c0012d2e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012d67:	83 ec 0c             	sub    esp,0xc
c0012d6a:	53                   	push   ebx
c0012d6b:	e8 fc d9 fe ff       	call   c000076c <strlen>
c0012d70:	83 c4 10             	add    esp,0x10
c0012d73:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d78:	74 c7                	je     c0012d41 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012d7a:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012d80:	5b                   	pop    ebx
c0012d81:	5e                   	pop    esi
c0012d82:	5f                   	pop    edi
c0012d83:	5d                   	pop    ebp
c0012d84:	c3                   	ret    
c0012d85:	90                   	nop

c0012d86 <File::File(char const*, Process*)>:
c0012d86:	83 ec 0c             	sub    esp,0xc
c0012d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d8d:	83 ec 08             	sub    esp,0x8
c0012d90:	6a 00                	push   0x0
c0012d92:	50                   	push   eax
c0012d93:	e8 7a e2 ff ff       	call   c0011012 <UnixFile::UnixFile(int)>
c0012d98:	83 c4 10             	add    esp,0x10
c0012d9b:	ba 1c ad 02 c0       	mov    edx,0xc002ad1c
c0012da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012da4:	89 10                	mov    DWORD PTR [eax],edx
c0012da6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012daa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012db4:	83 c0 0d             	add    eax,0xd
c0012db7:	83 ec 04             	sub    esp,0x4
c0012dba:	52                   	push   edx
c0012dbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dbf:	50                   	push   eax
c0012dc0:	e8 17 fe ff ff       	call   c0012bdc <Fs::standardiseFiles(char*, char const*, char const*)>
c0012dc5:	83 c4 10             	add    esp,0x10
c0012dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dcc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012dcf:	8d 50 bf             	lea    edx,[eax-0x41]
c0012dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dd6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012de0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012de4:	90                   	nop
c0012de5:	83 c4 0c             	add    esp,0xc
c0012de8:	c3                   	ret    
c0012de9:	90                   	nop

c0012dea <File::open(FileOpenMode)>:
c0012dea:	53                   	push   ebx
c0012deb:	b8 0b 00 00 00       	mov    eax,0xb
c0012df0:	83 ec 08             	sub    esp,0x8
c0012df3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012df7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012dfe:	80 fa 19             	cmp    dl,0x19
c0012e01:	77 40                	ja     c0012e43 <File::open(FileOpenMode)+0x59>
c0012e03:	8b 14 95 20 e5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ae0]
c0012e0a:	85 d2                	test   edx,edx
c0012e0c:	74 35                	je     c0012e43 <File::open(FileOpenMode)+0x59>
c0012e0e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e14:	85 d2                	test   edx,edx
c0012e16:	74 2b                	je     c0012e43 <File::open(FileOpenMode)+0x59>
c0012e18:	b8 06 00 00 00       	mov    eax,0x6
c0012e1d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012e21:	75 20                	jne    c0012e43 <File::open(FileOpenMode)+0x59>
c0012e23:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e25:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012e2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e2f:	51                   	push   ecx
c0012e30:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012e33:	51                   	push   ecx
c0012e34:	52                   	push   edx
c0012e35:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012e38:	83 c4 10             	add    esp,0x10
c0012e3b:	85 c0                	test   eax,eax
c0012e3d:	75 04                	jne    c0012e43 <File::open(FileOpenMode)+0x59>
c0012e3f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012e43:	83 c4 08             	add    esp,0x8
c0012e46:	5b                   	pop    ebx
c0012e47:	c3                   	ret    

c0012e48 <File::close()>:
c0012e48:	53                   	push   ebx
c0012e49:	b8 0b 00 00 00       	mov    eax,0xb
c0012e4e:	83 ec 08             	sub    esp,0x8
c0012e51:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e55:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e5c:	80 fa 19             	cmp    dl,0x19
c0012e5f:	77 41                	ja     c0012ea2 <File::close()+0x5a>
c0012e61:	8b 1c 95 20 e5 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1ae0]
c0012e68:	85 db                	test   ebx,ebx
c0012e6a:	74 36                	je     c0012ea2 <File::close()+0x5a>
c0012e6c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012e73:	74 2d                	je     c0012ea2 <File::close()+0x5a>
c0012e75:	b8 05 00 00 00       	mov    eax,0x5
c0012e7a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e7e:	74 22                	je     c0012ea2 <File::close()+0x5a>
c0012e80:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012e84:	8b 04 95 20 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ae0]
c0012e8b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012e91:	53                   	push   ebx
c0012e92:	53                   	push   ebx
c0012e93:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e95:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e9b:	50                   	push   eax
c0012e9c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012e9f:	83 c4 10             	add    esp,0x10
c0012ea2:	83 c4 08             	add    esp,0x8
c0012ea5:	5b                   	pop    ebx
c0012ea6:	c3                   	ret    
c0012ea7:	90                   	nop

c0012ea8 <File::seek(unsigned long long)>:
c0012ea8:	56                   	push   esi
c0012ea9:	53                   	push   ebx
c0012eaa:	b8 0b 00 00 00       	mov    eax,0xb
c0012eaf:	51                   	push   ecx
c0012eb0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012eb4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012eb8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012ebf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ec3:	80 fa 19             	cmp    dl,0x19
c0012ec6:	77 31                	ja     c0012ef9 <File::seek(unsigned long long)+0x51>
c0012ec8:	8b 14 95 20 e5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ae0]
c0012ecf:	85 d2                	test   edx,edx
c0012ed1:	74 26                	je     c0012ef9 <File::seek(unsigned long long)+0x51>
c0012ed3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ed9:	85 d2                	test   edx,edx
c0012edb:	74 1c                	je     c0012ef9 <File::seek(unsigned long long)+0x51>
c0012edd:	b8 05 00 00 00       	mov    eax,0x5
c0012ee2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012ee6:	74 11                	je     c0012ef9 <File::seek(unsigned long long)+0x51>
c0012ee8:	8b 02                	mov    eax,DWORD PTR [edx]
c0012eea:	53                   	push   ebx
c0012eeb:	51                   	push   ecx
c0012eec:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012ef2:	52                   	push   edx
c0012ef3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012ef6:	83 c4 10             	add    esp,0x10
c0012ef9:	5a                   	pop    edx
c0012efa:	5b                   	pop    ebx
c0012efb:	5e                   	pop    esi
c0012efc:	c3                   	ret    
c0012efd:	90                   	nop

c0012efe <File::tell(unsigned long long*)>:
c0012efe:	83 ec 0c             	sub    esp,0xc
c0012f01:	b8 0b 00 00 00       	mov    eax,0xb
c0012f06:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f0a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f11:	80 fa 19             	cmp    dl,0x19
c0012f14:	77 34                	ja     c0012f4a <File::tell(unsigned long long*)+0x4c>
c0012f16:	8b 14 95 20 e5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ae0]
c0012f1d:	85 d2                	test   edx,edx
c0012f1f:	74 29                	je     c0012f4a <File::tell(unsigned long long*)+0x4c>
c0012f21:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f27:	85 d2                	test   edx,edx
c0012f29:	74 1f                	je     c0012f4a <File::tell(unsigned long long*)+0x4c>
c0012f2b:	b8 05 00 00 00       	mov    eax,0x5
c0012f30:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f34:	74 14                	je     c0012f4a <File::tell(unsigned long long*)+0x4c>
c0012f36:	50                   	push   eax
c0012f37:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f3d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f43:	52                   	push   edx
c0012f44:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012f47:	83 c4 10             	add    esp,0x10
c0012f4a:	83 c4 0c             	add    esp,0xc
c0012f4d:	c3                   	ret    

c0012f4e <File::rewind()>:
c0012f4e:	83 ec 10             	sub    esp,0x10
c0012f51:	6a 00                	push   0x0
c0012f53:	6a 00                	push   0x0
c0012f55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f59:	e8 4a ff ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c0012f5e:	83 c4 1c             	add    esp,0x1c
c0012f61:	c3                   	ret    

c0012f62 <File::unlink()>:
c0012f62:	83 ec 0c             	sub    esp,0xc
c0012f65:	b8 0b 00 00 00       	mov    eax,0xb
c0012f6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f6e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f75:	80 f9 19             	cmp    cl,0x19
c0012f78:	77 2f                	ja     c0012fa9 <File::unlink()+0x47>
c0012f7a:	8b 0c 8d 20 e5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ae0]
c0012f81:	85 c9                	test   ecx,ecx
c0012f83:	74 24                	je     c0012fa9 <File::unlink()+0x47>
c0012f85:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f8b:	85 c9                	test   ecx,ecx
c0012f8d:	74 1a                	je     c0012fa9 <File::unlink()+0x47>
c0012f8f:	b8 06 00 00 00       	mov    eax,0x6
c0012f94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f98:	75 0f                	jne    c0012fa9 <File::unlink()+0x47>
c0012f9a:	83 c2 0d             	add    edx,0xd
c0012f9d:	50                   	push   eax
c0012f9e:	50                   	push   eax
c0012f9f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fa1:	52                   	push   edx
c0012fa2:	51                   	push   ecx
c0012fa3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012fa6:	83 c4 10             	add    esp,0x10
c0012fa9:	83 c4 0c             	add    esp,0xc
c0012fac:	c3                   	ret    
c0012fad:	90                   	nop

c0012fae <File::rename(char const*)>:
c0012fae:	83 ec 0c             	sub    esp,0xc
c0012fb1:	b8 0b 00 00 00       	mov    eax,0xb
c0012fb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fc1:	80 f9 19             	cmp    cl,0x19
c0012fc4:	77 32                	ja     c0012ff8 <File::rename(char const*)+0x4a>
c0012fc6:	8b 0c 8d 20 e5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ae0]
c0012fcd:	85 c9                	test   ecx,ecx
c0012fcf:	74 27                	je     c0012ff8 <File::rename(char const*)+0x4a>
c0012fd1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fd7:	85 c9                	test   ecx,ecx
c0012fd9:	74 1d                	je     c0012ff8 <File::rename(char const*)+0x4a>
c0012fdb:	b8 06 00 00 00       	mov    eax,0x6
c0012fe0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fe4:	75 12                	jne    c0012ff8 <File::rename(char const*)+0x4a>
c0012fe6:	83 c2 0d             	add    edx,0xd
c0012fe9:	50                   	push   eax
c0012fea:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ff0:	52                   	push   edx
c0012ff1:	51                   	push   ecx
c0012ff2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012ff5:	83 c4 10             	add    esp,0x10
c0012ff8:	83 c4 0c             	add    esp,0xc
c0012ffb:	c3                   	ret    

c0012ffc <File::chfatattr(unsigned char, unsigned char)>:
c0012ffc:	57                   	push   edi
c0012ffd:	b8 0b 00 00 00       	mov    eax,0xb
c0013002:	56                   	push   esi
c0013003:	53                   	push   ebx
c0013004:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013008:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001300c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013013:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013017:	80 f9 19             	cmp    cl,0x19
c001301a:	77 37                	ja     c0013053 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001301c:	8b 0c 8d 20 e5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ae0]
c0013023:	85 c9                	test   ecx,ecx
c0013025:	74 2c                	je     c0013053 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013027:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001302d:	85 c9                	test   ecx,ecx
c001302f:	74 22                	je     c0013053 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013031:	b8 06 00 00 00       	mov    eax,0x6
c0013036:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001303a:	75 17                	jne    c0013053 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001303c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001303e:	89 f0                	mov    eax,esi
c0013040:	83 c2 0d             	add    edx,0xd
c0013043:	0f b6 f0             	movzx  esi,al
c0013046:	0f b6 db             	movzx  ebx,bl
c0013049:	56                   	push   esi
c001304a:	53                   	push   ebx
c001304b:	52                   	push   edx
c001304c:	51                   	push   ecx
c001304d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013050:	83 c4 10             	add    esp,0x10
c0013053:	5b                   	pop    ebx
c0013054:	5e                   	pop    esi
c0013055:	5f                   	pop    edi
c0013056:	c3                   	ret    
c0013057:	90                   	nop

c0013058 <File::exists()>:
c0013058:	83 ec 0c             	sub    esp,0xc
c001305b:	31 c0                	xor    eax,eax
c001305d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013061:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013068:	80 f9 19             	cmp    cl,0x19
c001306b:	77 24                	ja     c0013091 <File::exists()+0x39>
c001306d:	8b 0c 8d 20 e5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ae0]
c0013074:	85 c9                	test   ecx,ecx
c0013076:	74 19                	je     c0013091 <File::exists()+0x39>
c0013078:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001307e:	85 c9                	test   ecx,ecx
c0013080:	74 0f                	je     c0013091 <File::exists()+0x39>
c0013082:	83 c2 0d             	add    edx,0xd
c0013085:	50                   	push   eax
c0013086:	50                   	push   eax
c0013087:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013089:	52                   	push   edx
c001308a:	51                   	push   ecx
c001308b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001308e:	83 c4 10             	add    esp,0x10
c0013091:	83 c4 0c             	add    esp,0xc
c0013094:	c3                   	ret    
c0013095:	90                   	nop

c0013096 <File::stat(unsigned long long*, bool*)>:
c0013096:	56                   	push   esi
c0013097:	53                   	push   ebx
c0013098:	50                   	push   eax
c0013099:	b8 0b 00 00 00       	mov    eax,0xb
c001309e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00130a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00130b1:	80 f9 19             	cmp    cl,0x19
c00130b4:	77 3d                	ja     c00130f3 <File::stat(unsigned long long*, bool*)+0x5d>
c00130b6:	8b 0c 8d 20 e5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ae0]
c00130bd:	85 c9                	test   ecx,ecx
c00130bf:	74 32                	je     c00130f3 <File::stat(unsigned long long*, bool*)+0x5d>
c00130c1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130c7:	85 c9                	test   ecx,ecx
c00130c9:	74 28                	je     c00130f3 <File::stat(unsigned long long*, bool*)+0x5d>
c00130cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130cd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130d1:	74 13                	je     c00130e6 <File::stat(unsigned long long*, bool*)+0x50>
c00130d3:	83 ec 04             	sub    esp,0x4
c00130d6:	56                   	push   esi
c00130d7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00130dd:	51                   	push   ecx
c00130de:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00130e1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00130e4:	eb 0a                	jmp    c00130f0 <File::stat(unsigned long long*, bool*)+0x5a>
c00130e6:	53                   	push   ebx
c00130e7:	83 c2 0d             	add    edx,0xd
c00130ea:	56                   	push   esi
c00130eb:	52                   	push   edx
c00130ec:	51                   	push   ecx
c00130ed:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00130f0:	83 c4 10             	add    esp,0x10
c00130f3:	5a                   	pop    edx
c00130f4:	5b                   	pop    ebx
c00130f5:	5e                   	pop    esi
c00130f6:	c3                   	ret    

c00130f7 <Fs::setcwd(Process*, char*)>:
c00130f7:	55                   	push   ebp
c00130f8:	57                   	push   edi
c00130f9:	56                   	push   esi
c00130fa:	53                   	push   ebx
c00130fb:	81 ec 20 02 00 00    	sub    esp,0x220
c0013101:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013108:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001310e:	57                   	push   edi
c001310f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013116:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001311a:	56                   	push   esi
c001311b:	e8 bc fa ff ff       	call   c0012bdc <Fs::standardiseFiles(char*, char const*, char const*)>
c0013120:	89 34 24             	mov    DWORD PTR [esp],esi
c0013123:	e8 44 d6 fe ff       	call   c000076c <strlen>
c0013128:	83 c4 10             	add    esp,0x10
c001312b:	83 f8 02             	cmp    eax,0x2
c001312e:	77 17                	ja     c0013147 <Fs::setcwd(Process*, char*)+0x50>
c0013130:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013135:	83 e8 41             	sub    eax,0x41
c0013138:	83 f8 19             	cmp    eax,0x19
c001313b:	76 24                	jbe    c0013161 <Fs::setcwd(Process*, char*)+0x6a>
c001313d:	b8 03 00 00 00       	mov    eax,0x3
c0013142:	e9 e0 00 00 00       	jmp    c0013227 <Fs::setcwd(Process*, char*)+0x130>
c0013147:	83 ec 0c             	sub    esp,0xc
c001314a:	56                   	push   esi
c001314b:	e8 1c d6 fe ff       	call   c000076c <strlen>
c0013150:	83 c4 10             	add    esp,0x10
c0013153:	83 f8 03             	cmp    eax,0x3
c0013156:	75 34                	jne    c001318c <Fs::setcwd(Process*, char*)+0x95>
c0013158:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001315d:	75 2d                	jne    c001318c <Fs::setcwd(Process*, char*)+0x95>
c001315f:	eb cf                	jmp    c0013130 <Fs::setcwd(Process*, char*)+0x39>
c0013161:	8b 14 85 20 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ae0]
c0013168:	b8 05 00 00 00       	mov    eax,0x5
c001316d:	85 d2                	test   edx,edx
c001316f:	0f 84 b2 00 00 00    	je     c0013227 <Fs::setcwd(Process*, char*)+0x130>
c0013175:	b8 06 00 00 00       	mov    eax,0x6
c001317a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013181:	0f 85 92 00 00 00    	jne    c0013219 <Fs::setcwd(Process*, char*)+0x122>
c0013187:	e9 9b 00 00 00       	jmp    c0013227 <Fs::setcwd(Process*, char*)+0x130>
c001318c:	83 ec 0c             	sub    esp,0xc
c001318f:	68 14 01 00 00       	push   0x114
c0013194:	e8 36 c6 ff ff       	call   c000f7cf <malloc>
c0013199:	83 c4 0c             	add    esp,0xc
c001319c:	89 c3                	mov    ebx,eax
c001319e:	55                   	push   ebp
c001319f:	56                   	push   esi
c00131a0:	50                   	push   eax
c00131a1:	e8 e0 fb ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c00131a6:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00131ab:	83 c4 0c             	add    esp,0xc
c00131ae:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00131b2:	50                   	push   eax
c00131b3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00131b7:	50                   	push   eax
c00131b8:	53                   	push   ebx
c00131b9:	e8 d8 fe ff ff       	call   c0013096 <File::stat(unsigned long long*, bool*)>
c00131be:	83 c4 10             	add    esp,0x10
c00131c1:	83 f8 02             	cmp    eax,0x2
c00131c4:	74 04                	je     c00131ca <Fs::setcwd(Process*, char*)+0xd3>
c00131c6:	85 c0                	test   eax,eax
c00131c8:	74 1c                	je     c00131e6 <Fs::setcwd(Process*, char*)+0xef>
c00131ca:	b8 01 00 00 00       	mov    eax,0x1
c00131cf:	85 db                	test   ebx,ebx
c00131d1:	74 54                	je     c0013227 <Fs::setcwd(Process*, char*)+0x130>
c00131d3:	83 ec 0c             	sub    esp,0xc
c00131d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00131d8:	53                   	push   ebx
c00131d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131dc:	83 c4 10             	add    esp,0x10
c00131df:	b8 01 00 00 00       	mov    eax,0x1
c00131e4:	eb 41                	jmp    c0013227 <Fs::setcwd(Process*, char*)+0x130>
c00131e6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00131eb:	75 1c                	jne    c0013209 <Fs::setcwd(Process*, char*)+0x112>
c00131ed:	b8 02 00 00 00       	mov    eax,0x2
c00131f2:	85 db                	test   ebx,ebx
c00131f4:	74 31                	je     c0013227 <Fs::setcwd(Process*, char*)+0x130>
c00131f6:	83 ec 0c             	sub    esp,0xc
c00131f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00131fb:	53                   	push   ebx
c00131fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131ff:	83 c4 10             	add    esp,0x10
c0013202:	b8 02 00 00 00       	mov    eax,0x2
c0013207:	eb 1e                	jmp    c0013227 <Fs::setcwd(Process*, char*)+0x130>
c0013209:	85 db                	test   ebx,ebx
c001320b:	74 0c                	je     c0013219 <Fs::setcwd(Process*, char*)+0x122>
c001320d:	83 ec 0c             	sub    esp,0xc
c0013210:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013212:	53                   	push   ebx
c0013213:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013216:	83 c4 10             	add    esp,0x10
c0013219:	50                   	push   eax
c001321a:	50                   	push   eax
c001321b:	56                   	push   esi
c001321c:	57                   	push   edi
c001321d:	e8 ea d5 fe ff       	call   c000080c <strcpy>
c0013222:	83 c4 10             	add    esp,0x10
c0013225:	31 c0                	xor    eax,eax
c0013227:	81 c4 1c 02 00 00    	add    esp,0x21c
c001322d:	5b                   	pop    ebx
c001322e:	5e                   	pop    esi
c001322f:	5f                   	pop    edi
c0013230:	5d                   	pop    ebp
c0013231:	c3                   	ret    

c0013232 <Directory::Directory(char const*, Process*)>:
c0013232:	83 ec 0c             	sub    esp,0xc
c0013235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013239:	83 ec 08             	sub    esp,0x8
c001323c:	6a 00                	push   0x0
c001323e:	50                   	push   eax
c001323f:	e8 ce dd ff ff       	call   c0011012 <UnixFile::UnixFile(int)>
c0013244:	83 c4 10             	add    esp,0x10
c0013247:	ba 38 ad 02 c0       	mov    edx,0xc002ad38
c001324c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013250:	89 10                	mov    DWORD PTR [eax],edx
c0013252:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013256:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001325c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013260:	83 c0 0d             	add    eax,0xd
c0013263:	83 ec 04             	sub    esp,0x4
c0013266:	52                   	push   edx
c0013267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001326b:	50                   	push   eax
c001326c:	e8 6b f9 ff ff       	call   c0012bdc <Fs::standardiseFiles(char*, char const*, char const*)>
c0013271:	83 c4 10             	add    esp,0x10
c0013274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013278:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001327b:	8d 50 bf             	lea    edx,[eax-0x41]
c001327e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013282:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001328c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013290:	90                   	nop
c0013291:	83 c4 0c             	add    esp,0xc
c0013294:	c3                   	ret    
c0013295:	90                   	nop

c0013296 <Directory::open()>:
c0013296:	53                   	push   ebx
c0013297:	b8 0b 00 00 00       	mov    eax,0xb
c001329c:	83 ec 08             	sub    esp,0x8
c001329f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132a3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00132aa:	80 fa 19             	cmp    dl,0x19
c00132ad:	77 3d                	ja     c00132ec <Directory::open()+0x56>
c00132af:	8b 14 95 20 e5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ae0]
c00132b6:	85 d2                	test   edx,edx
c00132b8:	74 32                	je     c00132ec <Directory::open()+0x56>
c00132ba:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00132c0:	85 d2                	test   edx,edx
c00132c2:	74 28                	je     c00132ec <Directory::open()+0x56>
c00132c4:	b8 06 00 00 00       	mov    eax,0x6
c00132c9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00132cd:	75 1d                	jne    c00132ec <Directory::open()+0x56>
c00132cf:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00132d5:	50                   	push   eax
c00132d6:	8b 02                	mov    eax,DWORD PTR [edx]
c00132d8:	51                   	push   ecx
c00132d9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00132dc:	51                   	push   ecx
c00132dd:	52                   	push   edx
c00132de:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00132e1:	83 c4 10             	add    esp,0x10
c00132e4:	85 c0                	test   eax,eax
c00132e6:	75 04                	jne    c00132ec <Directory::open()+0x56>
c00132e8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00132ec:	83 c4 08             	add    esp,0x8
c00132ef:	5b                   	pop    ebx
c00132f0:	c3                   	ret    
c00132f1:	90                   	nop

c00132f2 <Directory::close()>:
c00132f2:	53                   	push   ebx
c00132f3:	b8 0b 00 00 00       	mov    eax,0xb
c00132f8:	83 ec 08             	sub    esp,0x8
c00132fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00132ff:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013306:	80 fa 19             	cmp    dl,0x19
c0013309:	77 41                	ja     c001334c <Directory::close()+0x5a>
c001330b:	8b 1c 95 20 e5 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1ae0]
c0013312:	85 db                	test   ebx,ebx
c0013314:	74 36                	je     c001334c <Directory::close()+0x5a>
c0013316:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001331d:	74 2d                	je     c001334c <Directory::close()+0x5a>
c001331f:	b8 05 00 00 00       	mov    eax,0x5
c0013324:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013328:	74 22                	je     c001334c <Directory::close()+0x5a>
c001332a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001332e:	8b 04 95 20 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ae0]
c0013335:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001333b:	53                   	push   ebx
c001333c:	53                   	push   ebx
c001333d:	8b 10                	mov    edx,DWORD PTR [eax]
c001333f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013345:	50                   	push   eax
c0013346:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013349:	83 c4 10             	add    esp,0x10
c001334c:	83 c4 08             	add    esp,0x8
c001334f:	5b                   	pop    ebx
c0013350:	c3                   	ret    
c0013351:	90                   	nop

c0013352 <Directory::unlink()>:
c0013352:	83 ec 0c             	sub    esp,0xc
c0013355:	b8 0b 00 00 00       	mov    eax,0xb
c001335a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001335e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013365:	80 f9 19             	cmp    cl,0x19
c0013368:	77 2f                	ja     c0013399 <Directory::unlink()+0x47>
c001336a:	8b 0c 8d 20 e5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ae0]
c0013371:	85 c9                	test   ecx,ecx
c0013373:	74 24                	je     c0013399 <Directory::unlink()+0x47>
c0013375:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001337b:	85 c9                	test   ecx,ecx
c001337d:	74 1a                	je     c0013399 <Directory::unlink()+0x47>
c001337f:	b8 06 00 00 00       	mov    eax,0x6
c0013384:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013388:	75 0f                	jne    c0013399 <Directory::unlink()+0x47>
c001338a:	83 c2 0d             	add    edx,0xd
c001338d:	50                   	push   eax
c001338e:	50                   	push   eax
c001338f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013391:	52                   	push   edx
c0013392:	51                   	push   ecx
c0013393:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013396:	83 c4 10             	add    esp,0x10
c0013399:	83 c4 0c             	add    esp,0xc
c001339c:	c3                   	ret    
c001339d:	90                   	nop

c001339e <Directory::rename(char const*)>:
c001339e:	83 ec 0c             	sub    esp,0xc
c00133a1:	b8 0b 00 00 00       	mov    eax,0xb
c00133a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133b1:	80 f9 19             	cmp    cl,0x19
c00133b4:	77 32                	ja     c00133e8 <Directory::rename(char const*)+0x4a>
c00133b6:	8b 0c 8d 20 e5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ae0]
c00133bd:	85 c9                	test   ecx,ecx
c00133bf:	74 27                	je     c00133e8 <Directory::rename(char const*)+0x4a>
c00133c1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133c7:	85 c9                	test   ecx,ecx
c00133c9:	74 1d                	je     c00133e8 <Directory::rename(char const*)+0x4a>
c00133cb:	b8 06 00 00 00       	mov    eax,0x6
c00133d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133d4:	75 12                	jne    c00133e8 <Directory::rename(char const*)+0x4a>
c00133d6:	83 c2 0d             	add    edx,0xd
c00133d9:	50                   	push   eax
c00133da:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00133e0:	52                   	push   edx
c00133e1:	51                   	push   ecx
c00133e2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00133e5:	83 c4 10             	add    esp,0x10
c00133e8:	83 c4 0c             	add    esp,0xc
c00133eb:	c3                   	ret    

c00133ec <Directory::exists()>:
c00133ec:	83 ec 0c             	sub    esp,0xc
c00133ef:	31 c0                	xor    eax,eax
c00133f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133f5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133fc:	80 f9 19             	cmp    cl,0x19
c00133ff:	77 24                	ja     c0013425 <Directory::exists()+0x39>
c0013401:	8b 0c 8d 20 e5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ae0]
c0013408:	85 c9                	test   ecx,ecx
c001340a:	74 19                	je     c0013425 <Directory::exists()+0x39>
c001340c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013412:	85 c9                	test   ecx,ecx
c0013414:	74 0f                	je     c0013425 <Directory::exists()+0x39>
c0013416:	83 c2 0d             	add    edx,0xd
c0013419:	50                   	push   eax
c001341a:	50                   	push   eax
c001341b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001341d:	52                   	push   edx
c001341e:	51                   	push   ecx
c001341f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013422:	83 c4 10             	add    esp,0x10
c0013425:	83 c4 0c             	add    esp,0xc
c0013428:	c3                   	ret    
c0013429:	90                   	nop

c001342a <Directory::read(dirent*)>:
c001342a:	83 ec 1c             	sub    esp,0x1c
c001342d:	b8 0b 00 00 00       	mov    eax,0xb
c0013432:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013436:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001343d:	80 fa 19             	cmp    dl,0x19
c0013440:	77 30                	ja     c0013472 <Directory::read(dirent*)+0x48>
c0013442:	8b 14 95 20 e5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ae0]
c0013449:	85 d2                	test   edx,edx
c001344b:	74 25                	je     c0013472 <Directory::read(dirent*)+0x48>
c001344d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013454:	74 1c                	je     c0013472 <Directory::read(dirent*)+0x48>
c0013456:	83 ec 0c             	sub    esp,0xc
c0013459:	8b 01                	mov    eax,DWORD PTR [ecx]
c001345b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001345f:	52                   	push   edx
c0013460:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013464:	6a 00                	push   0x0
c0013466:	68 10 01 00 00       	push   0x110
c001346b:	51                   	push   ecx
c001346c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001346f:	83 c4 20             	add    esp,0x20
c0013472:	83 c4 1c             	add    esp,0x1c
c0013475:	c3                   	ret    

c0013476 <Directory::create()>:
c0013476:	83 ec 0c             	sub    esp,0xc
c0013479:	b8 0b 00 00 00       	mov    eax,0xb
c001347e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013482:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013489:	80 f9 19             	cmp    cl,0x19
c001348c:	77 2f                	ja     c00134bd <Directory::create()+0x47>
c001348e:	8b 0c 8d 20 e5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ae0]
c0013495:	85 c9                	test   ecx,ecx
c0013497:	74 24                	je     c00134bd <Directory::create()+0x47>
c0013499:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001349f:	85 c9                	test   ecx,ecx
c00134a1:	74 1a                	je     c00134bd <Directory::create()+0x47>
c00134a3:	b8 06 00 00 00       	mov    eax,0x6
c00134a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00134ac:	75 0f                	jne    c00134bd <Directory::create()+0x47>
c00134ae:	83 c2 0d             	add    edx,0xd
c00134b1:	50                   	push   eax
c00134b2:	50                   	push   eax
c00134b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134b5:	52                   	push   edx
c00134b6:	51                   	push   ecx
c00134b7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00134ba:	83 c4 10             	add    esp,0x10
c00134bd:	83 c4 0c             	add    esp,0xc
c00134c0:	c3                   	ret    
c00134c1:	90                   	nop

c00134c2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00134c2:	b8 0a 00 00 00       	mov    eax,0xa
c00134c7:	c3                   	ret    

c00134c8 <Bus::Bus(char const*)>:
c00134c8:	83 ec 0c             	sub    esp,0xc
c00134cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134cf:	83 ec 08             	sub    esp,0x8
c00134d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134d6:	50                   	push   eax
c00134d7:	e8 88 09 00 00       	call   c0013e64 <Device::Device(char const*)>
c00134dc:	83 c4 10             	add    esp,0x10
c00134df:	ba 54 ad 02 c0       	mov    edx,0xc002ad54
c00134e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e8:	89 10                	mov    DWORD PTR [eax],edx
c00134ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ee:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00134f8:	90                   	nop
c00134f9:	83 c4 0c             	add    esp,0xc
c00134fc:	c3                   	ret    
c00134fd:	90                   	nop

c00134fe <Bus::~Bus()>:
c00134fe:	83 ec 0c             	sub    esp,0xc
c0013501:	ba 54 ad 02 c0       	mov    edx,0xc002ad54
c0013506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001350a:	89 10                	mov    DWORD PTR [eax],edx
c001350c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013510:	83 ec 0c             	sub    esp,0xc
c0013513:	50                   	push   eax
c0013514:	e8 15 06 00 00       	call   c0013b2e <Device::~Device()>
c0013519:	83 c4 10             	add    esp,0x10
c001351c:	90                   	nop
c001351d:	83 c4 0c             	add    esp,0xc
c0013520:	c3                   	ret    
c0013521:	90                   	nop

c0013522 <Bus::~Bus()>:
c0013522:	83 ec 0c             	sub    esp,0xc
c0013525:	83 ec 0c             	sub    esp,0xc
c0013528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001352c:	e8 cd ff ff ff       	call   c00134fe <Bus::~Bus()>
c0013531:	83 c4 10             	add    esp,0x10
c0013534:	83 ec 08             	sub    esp,0x8
c0013537:	68 58 01 00 00       	push   0x158
c001353c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013540:	e8 0a f2 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c0013545:	83 c4 10             	add    esp,0x10
c0013548:	83 c4 0c             	add    esp,0xc
c001354b:	c3                   	ret    

c001354c <Buzzer::Buzzer(char const*)>:
c001354c:	83 ec 0c             	sub    esp,0xc
c001354f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013553:	83 ec 08             	sub    esp,0x8
c0013556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001355a:	50                   	push   eax
c001355b:	e8 04 09 00 00       	call   c0013e64 <Device::Device(char const*)>
c0013560:	83 c4 10             	add    esp,0x10
c0013563:	ba 80 ad 02 c0       	mov    edx,0xc002ad80
c0013568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356c:	89 10                	mov    DWORD PTR [eax],edx
c001356e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013572:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001357c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013580:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001358a:	90                   	nop
c001358b:	83 c4 0c             	add    esp,0xc
c001358e:	c3                   	ret    
c001358f:	90                   	nop

c0013590 <Buzzer::~Buzzer()>:
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	ba 80 ad 02 c0       	mov    edx,0xc002ad80
c0013598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001359c:	89 10                	mov    DWORD PTR [eax],edx
c001359e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a2:	83 ec 0c             	sub    esp,0xc
c00135a5:	50                   	push   eax
c00135a6:	e8 83 05 00 00       	call   c0013b2e <Device::~Device()>
c00135ab:	83 c4 10             	add    esp,0x10
c00135ae:	90                   	nop
c00135af:	83 c4 0c             	add    esp,0xc
c00135b2:	c3                   	ret    
c00135b3:	90                   	nop

c00135b4 <Buzzer::~Buzzer()>:
c00135b4:	83 ec 0c             	sub    esp,0xc
c00135b7:	83 ec 0c             	sub    esp,0xc
c00135ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135be:	e8 cd ff ff ff       	call   c0013590 <Buzzer::~Buzzer()>
c00135c3:	83 c4 10             	add    esp,0x10
c00135c6:	83 ec 08             	sub    esp,0x8
c00135c9:	68 5c 01 00 00       	push   0x15c
c00135ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135d2:	e8 78 f1 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c00135d7:	83 c4 10             	add    esp,0x10
c00135da:	83 c4 0c             	add    esp,0xc
c00135dd:	c3                   	ret    

c00135de <Buzzer::stop()>:
c00135de:	83 ec 14             	sub    esp,0x14
c00135e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00135e7:	6a 00                	push   0x0
c00135e9:	50                   	push   eax
c00135ea:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00135ed:	83 c4 1c             	add    esp,0x1c
c00135f0:	c3                   	ret    

c00135f1 <beepThread(void*)>:
c00135f1:	53                   	push   ebx
c00135f2:	83 ec 08             	sub    esp,0x8
c00135f5:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c00135fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135fe:	48                   	dec    eax
c00135ff:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c0013604:	75 01                	jne    c0013607 <beepThread(void*)+0x16>
c0013606:	fb                   	sti    
c0013607:	50                   	push   eax
c0013608:	50                   	push   eax
c0013609:	b8 40 42 0f 00       	mov    eax,0xf4240
c001360e:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013614:	52                   	push   edx
c0013615:	50                   	push   eax
c0013616:	e8 64 a8 00 00       	call   c001de7f <nanoSleep(unsigned long long)>
c001361b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001361e:	e8 bb ff ff ff       	call   c00135de <Buzzer::stop()>
c0013623:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001362b:	83 c4 18             	add    esp,0x18
c001362e:	5b                   	pop    ebx
c001362f:	e9 47 a7 00 00       	jmp    c001dd7b <blockTask(TaskState)>

c0013634 <Buzzer::beep(int, int, bool)>:
c0013634:	57                   	push   edi
c0013635:	56                   	push   esi
c0013636:	53                   	push   ebx
c0013637:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001363b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001363f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013643:	52                   	push   edx
c0013644:	52                   	push   edx
c0013645:	8b 06                	mov    eax,DWORD PTR [esi]
c0013647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001364b:	56                   	push   esi
c001364c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001364f:	83 c4 10             	add    esp,0x10
c0013652:	89 f8                	mov    eax,edi
c0013654:	84 c0                	test   al,al
c0013656:	74 1f                	je     c0013677 <Buzzer::beep(int, int, bool)+0x43>
c0013658:	50                   	push   eax
c0013659:	50                   	push   eax
c001365a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013660:	99                   	cdq    
c0013661:	52                   	push   edx
c0013662:	50                   	push   eax
c0013663:	e8 17 a8 00 00       	call   c001de7f <nanoSleep(unsigned long long)>
c0013668:	83 c4 10             	add    esp,0x10
c001366b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001366f:	5b                   	pop    ebx
c0013670:	5e                   	pop    esi
c0013671:	5f                   	pop    edi
c0013672:	e9 67 ff ff ff       	jmp    c00135de <Buzzer::stop()>
c0013677:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001367d:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0013682:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001368a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001368e:	c7 44 24 14 f1 35 01 c0 	mov    DWORD PTR [esp+0x14],0xc00135f1
c0013696:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001369a:	5b                   	pop    ebx
c001369b:	5e                   	pop    esi
c001369c:	5f                   	pop    edi
c001369d:	e9 de a2 00 00       	jmp    c001d980 <Process::createThread(void (*)(void*), void*, int)>

c00136a2 <User::loadClockSettings(int)>:
c00136a2:	53                   	push   ebx
c00136a3:	83 ec 14             	sub    esp,0x14
c00136a6:	68 14 01 00 00       	push   0x114
c00136ab:	e8 1f c1 ff ff       	call   c000f7cf <malloc>
c00136b0:	83 c4 0c             	add    esp,0xc
c00136b3:	89 c3                	mov    ebx,eax
c00136b5:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c00136bb:	68 a8 ad 02 c0       	push   0xc002ada8
c00136c0:	50                   	push   eax
c00136c1:	e8 c0 f6 ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c00136c6:	58                   	pop    eax
c00136c7:	5a                   	pop    edx
c00136c8:	6a 01                	push   0x1
c00136ca:	53                   	push   ebx
c00136cb:	e8 1a f7 ff ff       	call   c0012dea <File::open(FileOpenMode)>
c00136d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136d3:	e8 70 f7 ff ff       	call   c0012e48 <File::close()>
c00136d8:	83 c4 10             	add    esp,0x10
c00136db:	85 db                	test   ebx,ebx
c00136dd:	74 0f                	je     c00136ee <User::loadClockSettings(int)+0x4c>
c00136df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136e1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00136e5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00136e8:	83 c4 08             	add    esp,0x8
c00136eb:	5b                   	pop    ebx
c00136ec:	ff e0                	jmp    eax
c00136ee:	83 c4 08             	add    esp,0x8
c00136f1:	5b                   	pop    ebx
c00136f2:	c3                   	ret    
c00136f3:	90                   	nop

c00136f4 <Clock::Clock(char const*)>:
c00136f4:	83 ec 0c             	sub    esp,0xc
c00136f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136fb:	83 ec 08             	sub    esp,0x8
c00136fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013702:	50                   	push   eax
c0013703:	e8 5c 07 00 00       	call   c0013e64 <Device::Device(char const*)>
c0013708:	83 c4 10             	add    esp,0x10
c001370b:	ba d0 ad 02 c0       	mov    edx,0xc002add0
c0013710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013714:	89 10                	mov    DWORD PTR [eax],edx
c0013716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001371a:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013724:	90                   	nop
c0013725:	83 c4 0c             	add    esp,0xc
c0013728:	c3                   	ret    
c0013729:	90                   	nop

c001372a <Clock::~Clock()>:
c001372a:	83 ec 0c             	sub    esp,0xc
c001372d:	ba d0 ad 02 c0       	mov    edx,0xc002add0
c0013732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013736:	89 10                	mov    DWORD PTR [eax],edx
c0013738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001373c:	83 ec 0c             	sub    esp,0xc
c001373f:	50                   	push   eax
c0013740:	e8 e9 03 00 00       	call   c0013b2e <Device::~Device()>
c0013745:	83 c4 10             	add    esp,0x10
c0013748:	90                   	nop
c0013749:	83 c4 0c             	add    esp,0xc
c001374c:	c3                   	ret    
c001374d:	90                   	nop

c001374e <Clock::~Clock()>:
c001374e:	83 ec 0c             	sub    esp,0xc
c0013751:	83 ec 0c             	sub    esp,0xc
c0013754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013758:	e8 cd ff ff ff       	call   c001372a <Clock::~Clock()>
c001375d:	83 c4 10             	add    esp,0x10
c0013760:	83 ec 08             	sub    esp,0x8
c0013763:	68 58 01 00 00       	push   0x158
c0013768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001376c:	e8 de ef ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c0013771:	83 c4 10             	add    esp,0x10
c0013774:	83 c4 0c             	add    esp,0xc
c0013777:	c3                   	ret    

c0013778 <Clock::timeInSecondsLocal()>:
c0013778:	53                   	push   ebx
c0013779:	83 ec 14             	sub    esp,0x14
c001377c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013780:	8b 10                	mov    edx,DWORD PTR [eax]
c0013782:	50                   	push   eax
c0013783:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013786:	0f b6 0d 9c e0 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e09c
c001378d:	03 0d a0 e0 02 c0    	add    ecx,DWORD PTR ds:0xc002e0a0
c0013793:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013799:	89 cb                	mov    ebx,ecx
c001379b:	c1 fb 1f             	sar    ebx,0x1f
c001379e:	01 c8                	add    eax,ecx
c00137a0:	11 da                	adc    edx,ebx
c00137a2:	83 c4 10             	add    esp,0x10
c00137a5:	31 c9                	xor    ecx,ecx
c00137a7:	80 3d 9d e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e09d,0x0
c00137ae:	74 05                	je     c00137b5 <Clock::timeInSecondsLocal()+0x3d>
c00137b0:	b9 08 07 00 00       	mov    ecx,0x708
c00137b5:	31 db                	xor    ebx,ebx
c00137b7:	01 c8                	add    eax,ecx
c00137b9:	11 da                	adc    edx,ebx
c00137bb:	83 c4 08             	add    esp,0x8
c00137be:	5b                   	pop    ebx
c00137bf:	c3                   	ret    

c00137c0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00137c0:	57                   	push   edi
c00137c1:	56                   	push   esi
c00137c2:	53                   	push   ebx
c00137c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00137c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137cd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00137d1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00137d4:	0f b6 05 9c e0 02 c0 	movzx  eax,BYTE PTR ds:0xc002e09c
c00137db:	03 05 a0 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e0a0
c00137e1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00137e7:	99                   	cdq    
c00137e8:	29 c6                	sub    esi,eax
c00137ea:	19 d7                	sbb    edi,edx
c00137ec:	89 f0                	mov    eax,esi
c00137ee:	89 fa                	mov    edx,edi
c00137f0:	31 f6                	xor    esi,esi
c00137f2:	80 3d 9d e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e09d,0x0
c00137f9:	74 05                	je     c0013800 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00137fb:	be 08 07 00 00       	mov    esi,0x708
c0013800:	31 ff                	xor    edi,edi
c0013802:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013806:	29 f0                	sub    eax,esi
c0013808:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001380c:	19 fa                	sbb    edx,edi
c001380e:	89 d8                	mov    eax,ebx
c0013810:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013814:	5b                   	pop    ebx
c0013815:	5e                   	pop    esi
c0013816:	5f                   	pop    edi
c0013817:	ff e0                	jmp    eax

c0013819 <datetimeToSeconds(datetime_t)>:
c0013819:	55                   	push   ebp
c001381a:	57                   	push   edi
c001381b:	56                   	push   esi
c001381c:	53                   	push   ebx
c001381d:	83 ec 14             	sub    esp,0x14
c0013820:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013824:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013828:	89 d3                	mov    ebx,edx
c001382a:	0f b6 c6             	movzx  eax,dh
c001382d:	c1 eb 10             	shr    ebx,0x10
c0013830:	48                   	dec    eax
c0013831:	66 81 eb 6c 07       	sub    bx,0x76c
c0013836:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001383a:	0f b6 f5             	movzx  esi,ch
c001383d:	89 cf                	mov    edi,ecx
c001383f:	6b f6 3c             	imul   esi,esi,0x3c
c0013842:	c1 ef 10             	shr    edi,0x10
c0013845:	0f b6 c9             	movzx  ecx,cl
c0013848:	89 f8                	mov    eax,edi
c001384a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013850:	0f b6 f8             	movzx  edi,al
c0013853:	0f b6 d2             	movzx  edx,dl
c0013856:	01 fe                	add    esi,edi
c0013858:	01 f1                	add    ecx,esi
c001385a:	0f b7 f3             	movzx  esi,bx
c001385d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013861:	c1 f9 1f             	sar    ecx,0x1f
c0013864:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013869:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001386d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013872:	8b 0c 8d 20 ae 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd51e0]
c0013879:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001387d:	76 29                	jbe    c00138a8 <datetimeToSeconds(datetime_t)+0x8f>
c001387f:	f6 c3 03             	test   bl,0x3
c0013882:	75 24                	jne    c00138a8 <datetimeToSeconds(datetime_t)+0x8f>
c0013884:	31 d2                	xor    edx,edx
c0013886:	bf 64 00 00 00       	mov    edi,0x64
c001388b:	89 d8                	mov    eax,ebx
c001388d:	66 f7 f7             	div    di
c0013890:	66 85 d2             	test   dx,dx
c0013893:	75 12                	jne    c00138a7 <datetimeToSeconds(datetime_t)+0x8e>
c0013895:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001389b:	bf 90 01 00 00       	mov    edi,0x190
c00138a0:	99                   	cdq    
c00138a1:	f7 ff                	idiv   edi
c00138a3:	85 d2                	test   edx,edx
c00138a5:	75 01                	jne    c00138a8 <datetimeToSeconds(datetime_t)+0x8f>
c00138a7:	41                   	inc    ecx
c00138a8:	66 83 fb 46          	cmp    bx,0x46
c00138ac:	76 45                	jbe    c00138f3 <datetimeToSeconds(datetime_t)+0xda>
c00138ae:	bb 46 00 00 00       	mov    ebx,0x46
c00138b3:	bf 64 00 00 00       	mov    edi,0x64
c00138b8:	bd 90 01 00 00       	mov    ebp,0x190
c00138bd:	b8 6d 01 00 00       	mov    eax,0x16d
c00138c2:	f6 c3 03             	test   bl,0x3
c00138c5:	75 23                	jne    c00138ea <datetimeToSeconds(datetime_t)+0xd1>
c00138c7:	89 d8                	mov    eax,ebx
c00138c9:	99                   	cdq    
c00138ca:	f7 ff                	idiv   edi
c00138cc:	b8 6e 01 00 00       	mov    eax,0x16e
c00138d1:	85 d2                	test   edx,edx
c00138d3:	75 15                	jne    c00138ea <datetimeToSeconds(datetime_t)+0xd1>
c00138d5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00138db:	99                   	cdq    
c00138dc:	f7 fd                	idiv   ebp
c00138de:	83 fa 01             	cmp    edx,0x1
c00138e1:	19 c0                	sbb    eax,eax
c00138e3:	f7 d0                	not    eax
c00138e5:	05 6e 01 00 00       	add    eax,0x16e
c00138ea:	01 c1                	add    ecx,eax
c00138ec:	43                   	inc    ebx
c00138ed:	39 f3                	cmp    ebx,esi
c00138ef:	7c cc                	jl     c00138bd <datetimeToSeconds(datetime_t)+0xa4>
c00138f1:	eb 35                	jmp    c0013928 <datetimeToSeconds(datetime_t)+0x10f>
c00138f3:	74 33                	je     c0013928 <datetimeToSeconds(datetime_t)+0x10f>
c00138f5:	b8 45 00 00 00       	mov    eax,0x45
c00138fa:	89 c2                	mov    edx,eax
c00138fc:	83 e2 03             	and    edx,0x3
c00138ff:	39 f0                	cmp    eax,esi
c0013901:	7e 0f                	jle    c0013912 <datetimeToSeconds(datetime_t)+0xf9>
c0013903:	83 fa 01             	cmp    edx,0x1
c0013906:	19 d2                	sbb    edx,edx
c0013908:	48                   	dec    eax
c0013909:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013910:	eb e8                	jmp    c00138fa <datetimeToSeconds(datetime_t)+0xe1>
c0013912:	b8 6d 01 00 00       	mov    eax,0x16d
c0013917:	85 d2                	test   edx,edx
c0013919:	75 0b                	jne    c0013926 <datetimeToSeconds(datetime_t)+0x10d>
c001391b:	66 83 fb 01          	cmp    bx,0x1
c001391f:	19 c0                	sbb    eax,eax
c0013921:	05 6e 01 00 00       	add    eax,0x16e
c0013926:	29 c1                	sub    ecx,eax
c0013928:	b8 80 51 01 00       	mov    eax,0x15180
c001392d:	f7 e9                	imul   ecx
c001392f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013933:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013937:	83 c4 14             	add    esp,0x14
c001393a:	5b                   	pop    ebx
c001393b:	5e                   	pop    esi
c001393c:	5f                   	pop    edi
c001393d:	5d                   	pop    ebp
c001393e:	c3                   	ret    
c001393f:	90                   	nop

c0013940 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013940:	57                   	push   edi
c0013941:	56                   	push   esi
c0013942:	53                   	push   ebx
c0013943:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013947:	8b 06                	mov    eax,DWORD PTR [esi]
c0013949:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001394c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013950:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013954:	e8 c0 fe ff ff       	call   c0013819 <datetimeToSeconds(datetime_t)>
c0013959:	59                   	pop    ecx
c001395a:	0f b6 0d 9c e0 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e09c
c0013961:	5b                   	pop    ebx
c0013962:	03 0d a0 e0 02 c0    	add    ecx,DWORD PTR ds:0xc002e0a0
c0013968:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001396e:	89 cb                	mov    ebx,ecx
c0013970:	c1 fb 1f             	sar    ebx,0x1f
c0013973:	29 c8                	sub    eax,ecx
c0013975:	19 da                	sbb    edx,ebx
c0013977:	31 c9                	xor    ecx,ecx
c0013979:	80 3d 9d e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e09d,0x0
c0013980:	74 05                	je     c0013987 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013982:	b9 08 07 00 00       	mov    ecx,0x708
c0013987:	31 db                	xor    ebx,ebx
c0013989:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001398d:	29 c8                	sub    eax,ecx
c001398f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013993:	19 da                	sbb    edx,ebx
c0013995:	89 f8                	mov    eax,edi
c0013997:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001399b:	5b                   	pop    ebx
c001399c:	5e                   	pop    esi
c001399d:	5f                   	pop    edi
c001399e:	ff e0                	jmp    eax

c00139a0 <secondsToDatetime(unsigned long long)>:
c00139a0:	55                   	push   ebp
c00139a1:	57                   	push   edi
c00139a2:	56                   	push   esi
c00139a3:	53                   	push   ebx
c00139a4:	83 ec 1c             	sub    esp,0x1c
c00139a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00139ab:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00139af:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00139b3:	6a 00                	push   0x0
c00139b5:	68 80 51 01 00       	push   0x15180
c00139ba:	55                   	push   ebp
c00139bb:	57                   	push   edi
c00139bc:	e8 03 31 01 00       	call   c0026ac4 <__udivdi3>
c00139c1:	83 c4 10             	add    esp,0x10
c00139c4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00139ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139ce:	6a 00                	push   0x0
c00139d0:	68 80 51 01 00       	push   0x15180
c00139d5:	55                   	push   ebp
c00139d6:	57                   	push   edi
c00139d7:	bf 10 0e 00 00       	mov    edi,0xe10
c00139dc:	e8 e3 31 01 00       	call   c0026bc4 <__umoddi3>
c00139e1:	83 c4 10             	add    esp,0x10
c00139e4:	99                   	cdq    
c00139e5:	f7 ff                	idiv   edi
c00139e7:	bf 3c 00 00 00       	mov    edi,0x3c
c00139ec:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00139ef:	89 d0                	mov    eax,edx
c00139f1:	99                   	cdq    
c00139f2:	f7 ff                	idiv   edi
c00139f4:	85 db                	test   ebx,ebx
c00139f6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00139f9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00139fc:	79 11                	jns    c0013a0f <secondsToDatetime(unsigned long long)+0x6f>
c00139fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013a02:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013a08:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a0d:	eb 07                	jmp    c0013a16 <secondsToDatetime(unsigned long long)+0x76>
c0013a0f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a14:	89 d8                	mov    eax,ebx
c0013a16:	bf b4 05 00 00       	mov    edi,0x5b4
c0013a1b:	99                   	cdq    
c0013a1c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013a21:	f7 f9                	idiv   ecx
c0013a23:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013a28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a2c:	31 d2                	xor    edx,edx
c0013a2e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013a36:	01 c3                	add    ebx,eax
c0013a38:	89 d8                	mov    eax,ebx
c0013a3a:	f7 f1                	div    ecx
c0013a3c:	31 d2                	xor    edx,edx
c0013a3e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013a41:	89 d8                	mov    eax,ebx
c0013a43:	f7 f7                	div    edi
c0013a45:	31 d2                	xor    edx,edx
c0013a47:	29 c1                	sub    ecx,eax
c0013a49:	89 d8                	mov    eax,ebx
c0013a4b:	f7 f5                	div    ebp
c0013a4d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013a52:	29 c1                	sub    ecx,eax
c0013a54:	31 d2                	xor    edx,edx
c0013a56:	89 c8                	mov    eax,ecx
c0013a58:	f7 f5                	div    ebp
c0013a5a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013a5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a63:	31 d2                	xor    edx,edx
c0013a65:	89 c8                	mov    eax,ecx
c0013a67:	f7 f5                	div    ebp
c0013a69:	31 d2                	xor    edx,edx
c0013a6b:	01 c3                	add    ebx,eax
c0013a6d:	89 c8                	mov    eax,ecx
c0013a6f:	f7 f7                	div    edi
c0013a71:	bf 99 00 00 00       	mov    edi,0x99
c0013a76:	29 c3                	sub    ebx,eax
c0013a78:	31 d2                	xor    edx,edx
c0013a7a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013a82:	29 c3                	sub    ebx,eax
c0013a84:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013a87:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013a8a:	bb 05 00 00 00       	mov    ebx,0x5
c0013a8f:	83 c1 02             	add    ecx,0x2
c0013a92:	89 c8                	mov    eax,ecx
c0013a94:	f7 f7                	div    edi
c0013a96:	31 d2                	xor    edx,edx
c0013a98:	89 c7                	mov    edi,eax
c0013a9a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013aa0:	83 c0 02             	add    eax,0x2
c0013aa3:	f7 f3                	div    ebx
c0013aa5:	89 eb                	mov    ebx,ebp
c0013aa7:	29 c3                	sub    ebx,eax
c0013aa9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013aaf:	88 1e                	mov    BYTE PTR [esi],bl
c0013ab1:	19 c0                	sbb    eax,eax
c0013ab3:	31 d2                	xor    edx,edx
c0013ab5:	83 e0 0c             	and    eax,0xc
c0013ab8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013abc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013ac4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013ac8:	83 f9 01             	cmp    ecx,0x1
c0013acb:	0f 96 c2             	setbe  dl
c0013ace:	41                   	inc    ecx
c0013acf:	01 d0                	add    eax,edx
c0013ad1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013ad4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013ad8:	83 c4 1c             	add    esp,0x1c
c0013adb:	89 f0                	mov    eax,esi
c0013add:	5b                   	pop    ebx
c0013ade:	5e                   	pop    esi
c0013adf:	5f                   	pop    edi
c0013ae0:	5d                   	pop    ebp
c0013ae1:	c2 04 00             	ret    0x4

c0013ae4 <Clock::timeInDatetimeLocal()>:
c0013ae4:	53                   	push   ebx
c0013ae5:	83 ec 14             	sub    esp,0x14
c0013ae8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013aec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013af0:	e8 83 fc ff ff       	call   c0013778 <Clock::timeInSecondsLocal()>
c0013af5:	83 c4 0c             	add    esp,0xc
c0013af8:	52                   	push   edx
c0013af9:	50                   	push   eax
c0013afa:	53                   	push   ebx
c0013afb:	e8 a0 fe ff ff       	call   c00139a0 <secondsToDatetime(unsigned long long)>
c0013b00:	89 d8                	mov    eax,ebx
c0013b02:	83 c4 14             	add    esp,0x14
c0013b05:	5b                   	pop    ebx
c0013b06:	c2 04 00             	ret    0x4
c0013b09:	90                   	nop

c0013b0a <Device::hibernate()>:
c0013b0a:	c3                   	ret    
c0013b0b:	90                   	nop

c0013b0c <Device::wake()>:
c0013b0c:	c3                   	ret    
c0013b0d:	90                   	nop

c0013b0e <Device::detect()>:
c0013b0e:	c3                   	ret    
c0013b0f:	90                   	nop

c0013b10 <Device::disableLegacy()>:
c0013b10:	c3                   	ret    
c0013b11:	90                   	nop

c0013b12 <Device::powerSaving(PowerSavingLevel)>:
c0013b12:	c3                   	ret    
c0013b13:	90                   	nop

c0013b14 <DriverlessDevice::close(int, int, void*)>:
c0013b14:	31 c0                	xor    eax,eax
c0013b16:	c3                   	ret    
c0013b17:	90                   	nop

c0013b18 <DriverlessDevice::detect()>:
c0013b18:	c3                   	ret    
c0013b19:	90                   	nop

c0013b1a <DriverlessDevice::open(int, int, void*)>:
c0013b1a:	83 ec 18             	sub    esp,0x18
c0013b1d:	68 50 ae 02 c0       	push   0xc002ae50
c0013b22:	e8 ec 64 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0013b27:	83 c8 ff             	or     eax,0xffffffff
c0013b2a:	83 c4 1c             	add    esp,0x1c
c0013b2d:	c3                   	ret    

c0013b2e <Device::~Device()>:
c0013b2e:	ba b0 ae 02 c0       	mov    edx,0xc002aeb0
c0013b33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b37:	89 10                	mov    DWORD PTR [eax],edx
c0013b39:	90                   	nop
c0013b3a:	c3                   	ret    
c0013b3b:	90                   	nop

c0013b3c <Device::~Device()>:
c0013b3c:	83 ec 0c             	sub    esp,0xc
c0013b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013b43:	e8 e6 ff ff ff       	call   c0013b2e <Device::~Device()>
c0013b48:	83 c4 04             	add    esp,0x4
c0013b4b:	83 ec 08             	sub    esp,0x8
c0013b4e:	68 58 01 00 00       	push   0x158
c0013b53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b57:	e8 f3 eb ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c0013b5c:	83 c4 10             	add    esp,0x10
c0013b5f:	83 c4 0c             	add    esp,0xc
c0013b62:	c3                   	ret    
c0013b63:	90                   	nop

c0013b64 <Device::findAndLoadDriver()>:
c0013b64:	c7 44 24 04 6e ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ae6e
c0013b6c:	e9 b6 ec ff ff       	jmp    c0012827 <Dbg::kprintf(char const*, ...)>
c0013b71:	90                   	nop

c0013b72 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013b72:	57                   	push   edi
c0013b73:	b9 09 00 00 00       	mov    ecx,0x9
c0013b78:	56                   	push   esi
c0013b79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013b7d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013b81:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013b8b:	81 c7 18 01 00 00    	add    edi,0x118
c0013b91:	fc                   	cld    
c0013b92:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013b94:	5e                   	pop    esi
c0013b95:	5f                   	pop    edi
c0013b96:	c3                   	ret    
c0013b97:	90                   	nop

c0013b98 <Device::preOpenACPI(void*, char*, char*)>:
c0013b98:	57                   	push   edi
c0013b99:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013b9e:	56                   	push   esi
c0013b9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ba3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ba7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013bb1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013bb7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013bbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013bc1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013bc3:	b9 0e 00 00 00       	mov    ecx,0xe
c0013bc8:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013bce:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013bd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013bd4:	5e                   	pop    esi
c0013bd5:	5f                   	pop    edi
c0013bd6:	c3                   	ret    
c0013bd7:	90                   	nop

c0013bd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bdc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013be1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013be8:	75 0b                	jne    c0013bf5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013bf0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013bf3:	eb 1e                	jmp    c0013c13 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013bf5:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0013bfa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013c00:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013c06:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013c08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c10:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013c13:	ff e0                	jmp    eax
c0013c15:	90                   	nop

c0013c16 <Device::getParent()>:
c0013c16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c1a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013c20:	c3                   	ret    
c0013c21:	90                   	nop

c0013c22 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013c22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c26:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c2b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c32:	75 0b                	jne    c0013c3f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c36:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c3a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013c3d:	eb 1e                	jmp    c0013c5d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013c3f:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0013c44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013c4a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013c50:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013c52:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c5a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013c5d:	ff e0                	jmp    eax
c0013c5f:	90                   	nop

c0013c60 <Device::addChild(Device*)>:
c0013c60:	53                   	push   ebx
c0013c61:	83 ec 08             	sub    esp,0x8
c0013c64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c6c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013c72:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013c78:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013c7a:	85 d2                	test   edx,edx
c0013c7c:	74 04                	je     c0013c82 <Device::addChild(Device*)+0x22>
c0013c7e:	89 d3                	mov    ebx,edx
c0013c80:	eb f6                	jmp    c0013c78 <Device::addChild(Device*)+0x18>
c0013c82:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013c85:	83 ec 0c             	sub    esp,0xc
c0013c88:	6a 08                	push   0x8
c0013c8a:	e8 40 bb ff ff       	call   c000f7cf <malloc>
c0013c8f:	89 03                	mov    DWORD PTR [ebx],eax
c0013c91:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c9e:	83 c4 18             	add    esp,0x18
c0013ca1:	5b                   	pop    ebx
c0013ca2:	c3                   	ret    
c0013ca3:	90                   	nop

c0013ca4 <Device::removeAllChildren()>:
c0013ca4:	56                   	push   esi
c0013ca5:	53                   	push   ebx
c0013ca6:	52                   	push   edx
c0013ca7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013cab:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013cb1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cb4:	74 17                	je     c0013ccd <Device::removeAllChildren()+0x29>
c0013cb6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013cb9:	85 c0                	test   eax,eax
c0013cbb:	74 0c                	je     c0013cc9 <Device::removeAllChildren()+0x25>
c0013cbd:	83 ec 0c             	sub    esp,0xc
c0013cc0:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cc2:	50                   	push   eax
c0013cc3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013cc6:	83 c4 10             	add    esp,0x10
c0013cc9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ccb:	eb e4                	jmp    c0013cb1 <Device::removeAllChildren()+0xd>
c0013ccd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013cd3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013cd9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013cdf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ce6:	58                   	pop    eax
c0013ce7:	5b                   	pop    ebx
c0013ce8:	5e                   	pop    esi
c0013ce9:	c3                   	ret    

c0013cea <Device::hibernateAll()>:
c0013cea:	53                   	push   ebx
c0013ceb:	83 ec 14             	sub    esp,0x14
c0013cee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cf4:	53                   	push   ebx
c0013cf5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013cf8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cfe:	83 c4 10             	add    esp,0x10
c0013d01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d04:	74 0f                	je     c0013d15 <Device::hibernateAll()+0x2b>
c0013d06:	83 ec 0c             	sub    esp,0xc
c0013d09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d0c:	e8 d9 ff ff ff       	call   c0013cea <Device::hibernateAll()>
c0013d11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d13:	eb e9                	jmp    c0013cfe <Device::hibernateAll()+0x14>
c0013d15:	83 c4 08             	add    esp,0x8
c0013d18:	5b                   	pop    ebx
c0013d19:	c3                   	ret    

c0013d1a <Device::wakeAll()>:
c0013d1a:	53                   	push   ebx
c0013d1b:	83 ec 14             	sub    esp,0x14
c0013d1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d24:	53                   	push   ebx
c0013d25:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013d28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d2e:	83 c4 10             	add    esp,0x10
c0013d31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d34:	74 0f                	je     c0013d45 <Device::wakeAll()+0x2b>
c0013d36:	83 ec 0c             	sub    esp,0xc
c0013d39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d3c:	e8 d9 ff ff ff       	call   c0013d1a <Device::wakeAll()>
c0013d41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d43:	eb e9                	jmp    c0013d2e <Device::wakeAll()+0x14>
c0013d45:	83 c4 08             	add    esp,0x8
c0013d48:	5b                   	pop    ebx
c0013d49:	c3                   	ret    

c0013d4a <Device::detectAll()>:
c0013d4a:	53                   	push   ebx
c0013d4b:	83 ec 14             	sub    esp,0x14
c0013d4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d54:	53                   	push   ebx
c0013d55:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013d58:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d5e:	83 c4 10             	add    esp,0x10
c0013d61:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d64:	74 0f                	je     c0013d75 <Device::detectAll()+0x2b>
c0013d66:	83 ec 0c             	sub    esp,0xc
c0013d69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d6c:	e8 d9 ff ff ff       	call   c0013d4a <Device::detectAll()>
c0013d71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d73:	eb e9                	jmp    c0013d5e <Device::detectAll()+0x14>
c0013d75:	83 c4 08             	add    esp,0x8
c0013d78:	5b                   	pop    ebx
c0013d79:	c3                   	ret    

c0013d7a <Device::disableLegacyAll()>:
c0013d7a:	53                   	push   ebx
c0013d7b:	83 ec 14             	sub    esp,0x14
c0013d7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d84:	53                   	push   ebx
c0013d85:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013d88:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d8e:	83 c4 10             	add    esp,0x10
c0013d91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d94:	74 0f                	je     c0013da5 <Device::disableLegacyAll()+0x2b>
c0013d96:	83 ec 0c             	sub    esp,0xc
c0013d99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d9c:	e8 d9 ff ff ff       	call   c0013d7a <Device::disableLegacyAll()>
c0013da1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013da3:	eb e9                	jmp    c0013d8e <Device::disableLegacyAll()+0x14>
c0013da5:	83 c4 08             	add    esp,0x8
c0013da8:	5b                   	pop    ebx
c0013da9:	c3                   	ret    

c0013daa <Device::loadDriversForAll()>:
c0013daa:	53                   	push   ebx
c0013dab:	83 ec 08             	sub    esp,0x8
c0013dae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013db2:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013db9:	75 0c                	jne    c0013dc7 <Device::loadDriversForAll()+0x1d>
c0013dbb:	83 ec 0c             	sub    esp,0xc
c0013dbe:	53                   	push   ebx
c0013dbf:	e8 a0 fd ff ff       	call   c0013b64 <Device::findAndLoadDriver()>
c0013dc4:	83 c4 10             	add    esp,0x10
c0013dc7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dcd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dd0:	74 12                	je     c0013de4 <Device::loadDriversForAll()+0x3a>
c0013dd2:	83 ec 0c             	sub    esp,0xc
c0013dd5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dd8:	e8 cd ff ff ff       	call   c0013daa <Device::loadDriversForAll()>
c0013ddd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ddf:	83 c4 10             	add    esp,0x10
c0013de2:	eb e9                	jmp    c0013dcd <Device::loadDriversForAll()+0x23>
c0013de4:	83 c4 08             	add    esp,0x8
c0013de7:	5b                   	pop    ebx
c0013de8:	c3                   	ret    
c0013de9:	90                   	nop

c0013dea <Device::closeAll()>:
c0013dea:	53                   	push   ebx
c0013deb:	83 ec 08             	sub    esp,0x8
c0013dee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013df2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013df4:	6a 00                	push   0x0
c0013df6:	6a 00                	push   0x0
c0013df8:	6a 00                	push   0x0
c0013dfa:	53                   	push   ebx
c0013dfb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013dfe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e04:	83 c4 10             	add    esp,0x10
c0013e07:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e0a:	74 0f                	je     c0013e1b <Device::closeAll()+0x31>
c0013e0c:	83 ec 0c             	sub    esp,0xc
c0013e0f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e12:	e8 d3 ff ff ff       	call   c0013dea <Device::closeAll()>
c0013e17:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e19:	eb e9                	jmp    c0013e04 <Device::closeAll()+0x1a>
c0013e1b:	83 c4 08             	add    esp,0x8
c0013e1e:	5b                   	pop    ebx
c0013e1f:	c3                   	ret    

c0013e20 <Device::powerSavingAll(PowerSavingLevel)>:
c0013e20:	56                   	push   esi
c0013e21:	53                   	push   ebx
c0013e22:	83 ec 0c             	sub    esp,0xc
c0013e25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e2f:	56                   	push   esi
c0013e30:	53                   	push   ebx
c0013e31:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013e34:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e3a:	83 c4 10             	add    esp,0x10
c0013e3d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e40:	74 0f                	je     c0013e51 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013e42:	52                   	push   edx
c0013e43:	52                   	push   edx
c0013e44:	56                   	push   esi
c0013e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e48:	e8 d3 ff ff ff       	call   c0013e20 <Device::powerSavingAll(PowerSavingLevel)>
c0013e4d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e4f:	eb e9                	jmp    c0013e3a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013e51:	58                   	pop    eax
c0013e52:	5b                   	pop    ebx
c0013e53:	5e                   	pop    esi
c0013e54:	c3                   	ret    
c0013e55:	90                   	nop

c0013e56 <Device::setName(char const*)>:
c0013e56:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013e5e:	e9 a9 c9 fe ff       	jmp    c000080c <strcpy>
c0013e63:	90                   	nop

c0013e64 <Device::Device(char const*)>:
c0013e64:	83 ec 1c             	sub    esp,0x1c
c0013e67:	ba b0 ae 02 c0       	mov    edx,0xc002aeb0
c0013e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e70:	89 10                	mov    DWORD PTR [eax],edx
c0013e72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e76:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e84:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e92:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ea0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013eaa:	83 ec 08             	sub    esp,0x8
c0013ead:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013eb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013eb5:	e8 9c ff ff ff       	call   c0013e56 <Device::setName(char const*)>
c0013eba:	83 c4 10             	add    esp,0x10
c0013ebd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013ec5:	83 ec 0c             	sub    esp,0xc
c0013ec8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ecc:	e8 fe b8 ff ff       	call   c000f7cf <malloc>
c0013ed1:	83 c4 10             	add    esp,0x10
c0013ed4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013eda:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ee1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ee5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013eeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eef:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013ef5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eff:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f10:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f1b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013f22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f26:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f34:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f42:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f50:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013f5a:	90                   	nop
c0013f5b:	83 c4 1c             	add    esp,0x1c
c0013f5e:	c3                   	ret    
c0013f5f:	90                   	nop

c0013f60 <Device::getName()>:
c0013f60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f64:	05 d0 00 00 00       	add    eax,0xd0
c0013f69:	c3                   	ret    

c0013f6a <DriverlessDevice::DriverlessDevice(char const*)>:
c0013f6a:	83 ec 0c             	sub    esp,0xc
c0013f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f71:	83 ec 08             	sub    esp,0x8
c0013f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f78:	50                   	push   eax
c0013f79:	e8 e6 fe ff ff       	call   c0013e64 <Device::Device(char const*)>
c0013f7e:	83 c4 10             	add    esp,0x10
c0013f81:	ba dc ae 02 c0       	mov    edx,0xc002aedc
c0013f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8a:	89 10                	mov    DWORD PTR [eax],edx
c0013f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f90:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013f9a:	90                   	nop
c0013f9b:	83 c4 0c             	add    esp,0xc
c0013f9e:	c3                   	ret    
c0013f9f:	90                   	nop

c0013fa0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013fa0:	57                   	push   edi
c0013fa1:	56                   	push   esi
c0013fa2:	53                   	push   ebx
c0013fa3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fa7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013fab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013faf:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013fb5:	75 0c                	jne    c0013fc3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013fb7:	52                   	push   edx
c0013fb8:	52                   	push   edx
c0013fb9:	53                   	push   ebx
c0013fba:	56                   	push   esi
c0013fbb:	e8 40 4a 01 00       	call   c0028a00 <LinkedList<Device>::addElement(Device*)>
c0013fc0:	83 c4 10             	add    esp,0x10
c0013fc3:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fc9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fcc:	74 12                	je     c0013fe0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013fce:	50                   	push   eax
c0013fcf:	57                   	push   edi
c0013fd0:	56                   	push   esi
c0013fd1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fd4:	e8 c7 ff ff ff       	call   c0013fa0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013fd9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fdb:	83 c4 10             	add    esp,0x10
c0013fde:	eb e9                	jmp    c0013fc9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013fe0:	5b                   	pop    ebx
c0013fe1:	5e                   	pop    esi
c0013fe2:	5f                   	pop    edi
c0013fe3:	c3                   	ret    

c0013fe4 <getDevicesOfType(DeviceType)>:
c0013fe4:	53                   	push   ebx
c0013fe5:	83 ec 14             	sub    esp,0x14
c0013fe8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fec:	53                   	push   ebx
c0013fed:	e8 ea 4a 01 00       	call   c0028adc <LinkedList<Device>::LinkedList()>
c0013ff2:	83 c4 0c             	add    esp,0xc
c0013ff5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ff9:	53                   	push   ebx
c0013ffa:	ff 35 28 df 02 c0    	push   DWORD PTR ds:0xc002df28
c0014000:	e8 9b ff ff ff       	call   c0013fa0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014005:	89 d8                	mov    eax,ebx
c0014007:	83 c4 18             	add    esp,0x18
c001400a:	5b                   	pop    ebx
c001400b:	c2 04 00             	ret    0x4

c001400e <HardDiskController::HardDiskController(char const*)>:
c001400e:	83 ec 0c             	sub    esp,0xc
c0014011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014015:	83 ec 08             	sub    esp,0x8
c0014018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001401c:	50                   	push   eax
c001401d:	e8 42 fe ff ff       	call   c0013e64 <Device::Device(char const*)>
c0014022:	83 c4 10             	add    esp,0x10
c0014025:	ba 08 af 02 c0       	mov    edx,0xc002af08
c001402a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001402e:	89 10                	mov    DWORD PTR [eax],edx
c0014030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014034:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001403e:	90                   	nop
c001403f:	83 c4 0c             	add    esp,0xc
c0014042:	c3                   	ret    
c0014043:	90                   	nop

c0014044 <HardDiskController::~HardDiskController()>:
c0014044:	83 ec 0c             	sub    esp,0xc
c0014047:	ba 08 af 02 c0       	mov    edx,0xc002af08
c001404c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014050:	89 10                	mov    DWORD PTR [eax],edx
c0014052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014056:	83 ec 0c             	sub    esp,0xc
c0014059:	50                   	push   eax
c001405a:	e8 cf fa ff ff       	call   c0013b2e <Device::~Device()>
c001405f:	83 c4 10             	add    esp,0x10
c0014062:	90                   	nop
c0014063:	83 c4 0c             	add    esp,0xc
c0014066:	c3                   	ret    
c0014067:	90                   	nop

c0014068 <HardDiskController::~HardDiskController()>:
c0014068:	83 ec 0c             	sub    esp,0xc
c001406b:	83 ec 0c             	sub    esp,0xc
c001406e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014072:	e8 cd ff ff ff       	call   c0014044 <HardDiskController::~HardDiskController()>
c0014077:	83 c4 10             	add    esp,0x10
c001407a:	83 ec 08             	sub    esp,0x8
c001407d:	68 58 01 00 00       	push   0x158
c0014082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014086:	e8 c4 e6 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c001408b:	83 c4 10             	add    esp,0x10
c001408e:	83 c4 0c             	add    esp,0xc
c0014091:	c3                   	ret    

c0014092 <PhysicalDisk::eject()>:
c0014092:	83 c8 ff             	or     eax,0xffffffff
c0014095:	c3                   	ret    

c0014096 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014096:	83 ec 0c             	sub    esp,0xc
c0014099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001409d:	83 ec 08             	sub    esp,0x8
c00140a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140a4:	50                   	push   eax
c00140a5:	e8 ba fd ff ff       	call   c0013e64 <Device::Device(char const*)>
c00140aa:	83 c4 10             	add    esp,0x10
c00140ad:	ba 34 af 02 c0       	mov    edx,0xc002af34
c00140b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b6:	89 10                	mov    DWORD PTR [eax],edx
c00140b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140bc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00140c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00140ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00140dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00140e4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00140ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ee:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00140f8:	90                   	nop
c00140f9:	83 c4 0c             	add    esp,0xc
c00140fc:	c3                   	ret    
c00140fd:	90                   	nop

c00140fe <PhysicalDisk::startCache()>:
c00140fe:	56                   	push   esi
c00140ff:	53                   	push   ebx
c0014100:	83 ec 10             	sub    esp,0x10
c0014103:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014107:	6a 44                	push   0x44
c0014109:	e8 c1 b6 ff ff       	call   c000f7cf <malloc>
c001410e:	89 c6                	mov    esi,eax
c0014110:	58                   	pop    eax
c0014111:	5a                   	pop    edx
c0014112:	53                   	push   ebx
c0014113:	56                   	push   esi
c0014114:	e8 77 28 00 00       	call   c0016990 <VCache::VCache(PhysicalDisk*)>
c0014119:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001411f:	83 c4 14             	add    esp,0x14
c0014122:	5b                   	pop    ebx
c0014123:	5e                   	pop    esi
c0014124:	c3                   	ret    
c0014125:	90                   	nop

c0014126 <PhysicalDisk::~PhysicalDisk()>:
c0014126:	83 ec 0c             	sub    esp,0xc
c0014129:	ba 34 af 02 c0       	mov    edx,0xc002af34
c001412e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014132:	89 10                	mov    DWORD PTR [eax],edx
c0014134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014138:	83 ec 0c             	sub    esp,0xc
c001413b:	50                   	push   eax
c001413c:	e8 ed f9 ff ff       	call   c0013b2e <Device::~Device()>
c0014141:	83 c4 10             	add    esp,0x10
c0014144:	90                   	nop
c0014145:	83 c4 0c             	add    esp,0xc
c0014148:	c3                   	ret    
c0014149:	90                   	nop

c001414a <PhysicalDisk::~PhysicalDisk()>:
c001414a:	83 ec 0c             	sub    esp,0xc
c001414d:	83 ec 0c             	sub    esp,0xc
c0014150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014154:	e8 cd ff ff ff       	call   c0014126 <PhysicalDisk::~PhysicalDisk()>
c0014159:	83 c4 10             	add    esp,0x10
c001415c:	83 ec 08             	sub    esp,0x8
c001415f:	68 6c 01 00 00       	push   0x16c
c0014164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014168:	e8 e2 e5 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c001416d:	83 c4 10             	add    esp,0x10
c0014170:	83 c4 0c             	add    esp,0xc
c0014173:	c3                   	ret    

c0014174 <FPU::FPU(char const*)>:
c0014174:	83 ec 0c             	sub    esp,0xc
c0014177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001417b:	83 ec 08             	sub    esp,0x8
c001417e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014182:	50                   	push   eax
c0014183:	e8 dc fc ff ff       	call   c0013e64 <Device::Device(char const*)>
c0014188:	83 c4 10             	add    esp,0x10
c001418b:	ba 78 af 02 c0       	mov    edx,0xc002af78
c0014190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014194:	89 10                	mov    DWORD PTR [eax],edx
c0014196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001419a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00141a4:	90                   	nop
c00141a5:	83 c4 0c             	add    esp,0xc
c00141a8:	c3                   	ret    
c00141a9:	90                   	nop

c00141aa <FPU::~FPU()>:
c00141aa:	83 ec 0c             	sub    esp,0xc
c00141ad:	ba 78 af 02 c0       	mov    edx,0xc002af78
c00141b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141b6:	89 10                	mov    DWORD PTR [eax],edx
c00141b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141bc:	83 ec 0c             	sub    esp,0xc
c00141bf:	50                   	push   eax
c00141c0:	e8 69 f9 ff ff       	call   c0013b2e <Device::~Device()>
c00141c5:	83 c4 10             	add    esp,0x10
c00141c8:	90                   	nop
c00141c9:	83 c4 0c             	add    esp,0xc
c00141cc:	c3                   	ret    
c00141cd:	90                   	nop

c00141ce <FPU::~FPU()>:
c00141ce:	83 ec 0c             	sub    esp,0xc
c00141d1:	83 ec 0c             	sub    esp,0xc
c00141d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141d8:	e8 cd ff ff ff       	call   c00141aa <FPU::~FPU()>
c00141dd:	83 c4 10             	add    esp,0x10
c00141e0:	83 ec 08             	sub    esp,0x8
c00141e3:	68 58 01 00 00       	push   0x158
c00141e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141ec:	e8 5e e5 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c00141f1:	83 c4 10             	add    esp,0x10
c00141f4:	83 c4 0c             	add    esp,0xc
c00141f7:	c3                   	ret    

c00141f8 <setupFPU()>:
c00141f8:	53                   	push   ebx
c00141f9:	83 ec 08             	sub    esp,0x8
c00141fc:	8b 15 28 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df28
c0014202:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014209:	74 19                	je     c0014224 <setupFPU()+0x2c>
c001420b:	83 ec 0c             	sub    esp,0xc
c001420e:	68 58 01 00 00       	push   0x158
c0014213:	e8 b7 b5 ff ff       	call   c000f7cf <malloc>
c0014218:	89 c3                	mov    ebx,eax
c001421a:	89 04 24             	mov    DWORD PTR [esp],eax
c001421d:	e8 20 14 01 00       	call   c0025642 <AVX::AVX()>
c0014222:	eb 5b                	jmp    c001427f <setupFPU()+0x87>
c0014224:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001422a:	84 c0                	test   al,al
c001422c:	79 19                	jns    c0014247 <setupFPU()+0x4f>
c001422e:	83 ec 0c             	sub    esp,0xc
c0014231:	68 58 01 00 00       	push   0x158
c0014236:	e8 94 b5 ff ff       	call   c000f7cf <malloc>
c001423b:	89 c3                	mov    ebx,eax
c001423d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014240:	e8 23 15 01 00       	call   c0025768 <SSE::SSE()>
c0014245:	eb 38                	jmp    c001427f <setupFPU()+0x87>
c0014247:	a8 20                	test   al,0x20
c0014249:	74 19                	je     c0014264 <setupFPU()+0x6c>
c001424b:	83 ec 0c             	sub    esp,0xc
c001424e:	68 58 01 00 00       	push   0x158
c0014253:	e8 77 b5 ff ff       	call   c000f7cf <malloc>
c0014258:	89 c3                	mov    ebx,eax
c001425a:	89 04 24             	mov    DWORD PTR [esp],eax
c001425d:	e8 70 14 01 00       	call   c00256d2 <MMX::MMX()>
c0014262:	eb 1b                	jmp    c001427f <setupFPU()+0x87>
c0014264:	a8 10                	test   al,0x10
c0014266:	74 1c                	je     c0014284 <setupFPU()+0x8c>
c0014268:	83 ec 0c             	sub    esp,0xc
c001426b:	68 58 01 00 00       	push   0x158
c0014270:	e8 5a b5 ff ff       	call   c000f7cf <malloc>
c0014275:	89 c3                	mov    ebx,eax
c0014277:	89 04 24             	mov    DWORD PTR [esp],eax
c001427a:	e8 77 15 01 00       	call   c00257f6 <x87::x87()>
c001427f:	83 c4 10             	add    esp,0x10
c0014282:	eb 24                	jmp    c00142a8 <setupFPU()+0xb0>
c0014284:	83 e0 ef             	and    eax,0xffffffef
c0014287:	83 ec 0c             	sub    esp,0xc
c001428a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014290:	68 64 af 02 c0       	push   0xc002af64
c0014295:	e8 8d e5 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001429a:	0f 20 c0             	mov    eax,cr0
c001429d:	83 c8 04             	or     eax,0x4
c00142a0:	0f 22 c0             	mov    cr0,eax
c00142a3:	31 db                	xor    ebx,ebx
c00142a5:	83 c4 10             	add    esp,0x10
c00142a8:	89 d8                	mov    eax,ebx
c00142aa:	83 c4 08             	add    esp,0x8
c00142ad:	5b                   	pop    ebx
c00142ae:	c3                   	ret    
c00142af:	90                   	nop

c00142b0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00142b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00142b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142b8:	c1 e0 04             	shl    eax,0x4
c00142bb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00142bf:	8d 50 10             	lea    edx,[eax+0x10]
c00142c2:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00142c8:	74 08                	je     c00142d2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00142ca:	83 c0 04             	add    eax,0x4
c00142cd:	39 d0                	cmp    eax,edx
c00142cf:	75 f1                	jne    c00142c2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00142d1:	c3                   	ret    
c00142d2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00142dc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00142e6:	eb e2                	jmp    c00142ca <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00142e8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00142e8:	57                   	push   edi
c00142e9:	31 c0                	xor    eax,eax
c00142eb:	56                   	push   esi
c00142ec:	53                   	push   ebx
c00142ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00142f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00142f9:	89 da                	mov    edx,ebx
c00142fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00142ff:	c1 e2 04             	shl    edx,0x4
c0014302:	01 ca                	add    edx,ecx
c0014304:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001430c:	74 16                	je     c0014324 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001430e:	40                   	inc    eax
c001430f:	83 f8 04             	cmp    eax,0x4
c0014312:	75 f0                	jne    c0014304 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014314:	c7 44 24 10 a8 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002afa8
c001431c:	5b                   	pop    ebx
c001431d:	5e                   	pop    esi
c001431e:	5f                   	pop    edi
c001431f:	e9 ef 5c 00 00       	jmp    c001a013 <Krnl::panic(char const*)>
c0014324:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014327:	8d 04 81             	lea    eax,[ecx+eax*4]
c001432a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014330:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014336:	5b                   	pop    ebx
c0014337:	5e                   	pop    esi
c0014338:	5f                   	pop    edi
c0014339:	c3                   	ret    

c001433a <doubleFault(regs*, void*)>:
c001433a:	55                   	push   ebp
c001433b:	89 e5                	mov    ebp,esp
c001433d:	83 ec 08             	sub    esp,0x8
c0014340:	83 ec 0c             	sub    esp,0xc
c0014343:	68 b5 af 02 c0       	push   0xc002afb5
c0014348:	e8 c6 5c 00 00       	call   c001a013 <Krnl::panic(char const*)>
c001434d:	83 c4 10             	add    esp,0x10
c0014350:	90                   	nop
c0014351:	c9                   	leave  
c0014352:	c3                   	ret    
c0014353:	90                   	nop

c0014354 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014354:	56                   	push   esi
c0014355:	53                   	push   ebx
c0014356:	50                   	push   eax
c0014357:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001435b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001435f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014364:	75 35                	jne    c001439b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014366:	8d 43 20             	lea    eax,[ebx+0x20]
c0014369:	31 d2                	xor    edx,edx
c001436b:	89 c1                	mov    ecx,eax
c001436d:	c1 e1 04             	shl    ecx,0x4
c0014370:	01 f1                	add    ecx,esi
c0014372:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001437a:	74 3e                	je     c00143ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001437c:	42                   	inc    edx
c001437d:	83 fa 04             	cmp    edx,0x4
c0014380:	75 f0                	jne    c0014372 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014382:	83 ec 0c             	sub    esp,0xc
c0014385:	68 cf af 02 c0       	push   0xc002afcf
c001438a:	e8 84 5c 00 00       	call   c001a013 <Krnl::panic(char const*)>
c001438f:	83 c4 10             	add    esp,0x10
c0014392:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014397:	5a                   	pop    edx
c0014398:	5b                   	pop    ebx
c0014399:	5e                   	pop    esi
c001439a:	c3                   	ret    
c001439b:	83 ec 0c             	sub    esp,0xc
c001439e:	56                   	push   esi
c001439f:	e8 bc fb ff ff       	call   c0013f60 <Device::getName()>
c00143a4:	83 c4 10             	add    esp,0x10
c00143a7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143aa:	75 ba                	jne    c0014366 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00143ac:	83 fb 0f             	cmp    ebx,0xf
c00143af:	7f 29                	jg     c00143da <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00143b1:	0f b6 9b 80 d1 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2e80]
c00143b8:	eb ac                	jmp    c0014366 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00143ba:	8d 04 82             	lea    eax,[edx+eax*4]
c00143bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00143c1:	8d 04 86             	lea    eax,[esi+eax*4]
c00143c4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00143ca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00143ce:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00143d4:	89 d8                	mov    eax,ebx
c00143d6:	5a                   	pop    edx
c00143d7:	5b                   	pop    ebx
c00143d8:	5e                   	pop    esi
c00143d9:	c3                   	ret    
c00143da:	83 ec 0c             	sub    esp,0xc
c00143dd:	68 c2 af 02 c0       	push   0xc002afc2
c00143e2:	e8 2c 5c 00 00       	call   c001a013 <Krnl::panic(char const*)>
c00143e7:	83 c4 10             	add    esp,0x10
c00143ea:	e9 77 ff ff ff       	jmp    c0014366 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00143ef:	90                   	nop

c00143f0 <InterruptController::clearAllHandlers(int, bool)>:
c00143f0:	56                   	push   esi
c00143f1:	53                   	push   ebx
c00143f2:	52                   	push   edx
c00143f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00143fb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014400:	75 61                	jne    c0014463 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014402:	8d 46 20             	lea    eax,[esi+0x20]
c0014405:	c1 e6 04             	shl    esi,0x4
c0014408:	c1 e0 04             	shl    eax,0x4
c001440b:	01 de                	add    esi,ebx
c001440d:	01 d8                	add    eax,ebx
c001440f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014419:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014423:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001442d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014437:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014441:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001444b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014455:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001445f:	58                   	pop    eax
c0014460:	5b                   	pop    ebx
c0014461:	5e                   	pop    esi
c0014462:	c3                   	ret    
c0014463:	83 ec 0c             	sub    esp,0xc
c0014466:	53                   	push   ebx
c0014467:	e8 f4 fa ff ff       	call   c0013f60 <Device::getName()>
c001446c:	83 c4 10             	add    esp,0x10
c001446f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014472:	75 8e                	jne    c0014402 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014474:	83 fe 0f             	cmp    esi,0xf
c0014477:	7f 09                	jg     c0014482 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014479:	0f b6 b6 80 d1 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2e80]
c0014480:	eb 80                	jmp    c0014402 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014482:	83 ec 0c             	sub    esp,0xc
c0014485:	68 dc af 02 c0       	push   0xc002afdc
c001448a:	e8 84 5b 00 00       	call   c001a013 <Krnl::panic(char const*)>
c001448f:	83 c4 10             	add    esp,0x10
c0014492:	e9 6b ff ff ff       	jmp    c0014402 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014497:	90                   	nop

c0014498 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014498:	56                   	push   esi
c0014499:	53                   	push   ebx
c001449a:	52                   	push   edx
c001449b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001449f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144a3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00144a8:	75 3a                	jne    c00144e4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00144aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144ae:	8d 50 20             	lea    edx,[eax+0x20]
c00144b1:	c1 e2 04             	shl    edx,0x4
c00144b4:	8d 04 16             	lea    eax,[esi+edx*1]
c00144b7:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00144bb:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00144c1:	74 0b                	je     c00144ce <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00144c3:	83 c0 04             	add    eax,0x4
c00144c6:	39 d0                	cmp    eax,edx
c00144c8:	75 f1                	jne    c00144bb <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00144ca:	58                   	pop    eax
c00144cb:	5b                   	pop    ebx
c00144cc:	5e                   	pop    esi
c00144cd:	c3                   	ret    
c00144ce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00144d8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00144e2:	eb df                	jmp    c00144c3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00144e4:	83 ec 0c             	sub    esp,0xc
c00144e7:	56                   	push   esi
c00144e8:	e8 73 fa ff ff       	call   c0013f60 <Device::getName()>
c00144ed:	83 c4 10             	add    esp,0x10
c00144f0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00144f3:	75 b5                	jne    c00144aa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00144f5:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00144fa:	7f 11                	jg     c001450d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00144fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014500:	0f b6 80 80 d1 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2e80]
c0014507:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001450b:	eb 9d                	jmp    c00144aa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001450d:	83 ec 0c             	sub    esp,0xc
c0014510:	68 e9 af 02 c0       	push   0xc002afe9
c0014515:	e8 f9 5a 00 00       	call   c001a013 <Krnl::panic(char const*)>
c001451a:	83 c4 10             	add    esp,0x10
c001451d:	eb 8b                	jmp    c00144aa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c001451f <nmiHandler(regs*, void*)>:
c001451f:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0014524:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014528:	e9 09 aa ff ff       	jmp    c000ef36 <Computer::handleNMI()>

c001452d <int_handler>:
c001452d:	55                   	push   ebp
c001452e:	57                   	push   edi
c001452f:	56                   	push   esi
c0014530:	53                   	push   ebx
c0014531:	83 ec 0c             	sub    esp,0xc
c0014534:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014538:	80 3d 44 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea44,0x0
c001453f:	74 0b                	je     c001454c <int_handler+0x1f>
c0014541:	fa                   	cli    
c0014542:	f4                   	hlt    
c0014543:	80 3d 44 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea44,0x0
c001454a:	75 f5                	jne    c0014541 <int_handler+0x14>
c001454c:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0014551:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014554:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001455a:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014560:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014563:	83 f8 17             	cmp    eax,0x17
c0014566:	77 13                	ja     c001457b <int_handler+0x4e>
c0014568:	83 ec 08             	sub    esp,0x8
c001456b:	8b 17                	mov    edx,DWORD PTR [edi]
c001456d:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014570:	0f b6 c0             	movzx  eax,al
c0014573:	50                   	push   eax
c0014574:	57                   	push   edi
c0014575:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014578:	83 c4 10             	add    esp,0x10
c001457b:	83 c3 15             	add    ebx,0x15
c001457e:	c1 e3 04             	shl    ebx,0x4
c0014581:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014585:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001458c:	31 db                	xor    ebx,ebx
c001458e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014592:	85 c0                	test   eax,eax
c0014594:	74 13                	je     c00145a9 <int_handler+0x7c>
c0014596:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014599:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001459d:	74 1c                	je     c00145bb <int_handler+0x8e>
c001459f:	83 ec 08             	sub    esp,0x8
c00145a2:	52                   	push   edx
c00145a3:	56                   	push   esi
c00145a4:	ff d0                	call   eax
c00145a6:	83 c4 10             	add    esp,0x10
c00145a9:	43                   	inc    ebx
c00145aa:	83 fb 04             	cmp    ebx,0x4
c00145ad:	75 df                	jne    c001458e <int_handler+0x61>
c00145af:	83 c4 0c             	add    esp,0xc
c00145b2:	31 c0                	xor    eax,eax
c00145b4:	5b                   	pop    ebx
c00145b5:	31 d2                	xor    edx,edx
c00145b7:	5e                   	pop    esi
c00145b8:	5f                   	pop    edi
c00145b9:	5d                   	pop    ebp
c00145ba:	c3                   	ret    
c00145bb:	83 ec 08             	sub    esp,0x8
c00145be:	52                   	push   edx
c00145bf:	56                   	push   esi
c00145c0:	ff d0                	call   eax
c00145c2:	83 c4 10             	add    esp,0x10
c00145c5:	83 c4 0c             	add    esp,0xc
c00145c8:	5b                   	pop    ebx
c00145c9:	5e                   	pop    esi
c00145ca:	5f                   	pop    edi
c00145cb:	5d                   	pop    ebp
c00145cc:	c3                   	ret    
c00145cd:	90                   	nop

c00145ce <InterruptController::InterruptController(char const*)>:
c00145ce:	83 ec 1c             	sub    esp,0x1c
c00145d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d5:	83 ec 08             	sub    esp,0x8
c00145d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145dc:	50                   	push   eax
c00145dd:	e8 82 f8 ff ff       	call   c0013e64 <Device::Device(char const*)>
c00145e2:	83 c4 10             	add    esp,0x10
c00145e5:	ba b0 b2 02 c0       	mov    edx,0xc002b2b0
c00145ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ee:	89 10                	mov    DWORD PTR [eax],edx
c00145f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00145fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014606:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001460e:	7f 5e                	jg     c001466e <InterruptController::InterruptController(char const*)+0xa0>
c0014610:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014618:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001461d:	7f 49                	jg     c0014668 <InterruptController::InterruptController(char const*)+0x9a>
c001461f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014623:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014627:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001462e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014632:	01 ca                	add    edx,ecx
c0014634:	83 c2 54             	add    edx,0x54
c0014637:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001463f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014643:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014647:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001464e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014652:	01 ca                	add    edx,ecx
c0014654:	81 c2 54 04 00 00    	add    edx,0x454
c001465a:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014662:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014666:	eb b0                	jmp    c0014618 <InterruptController::InterruptController(char const*)+0x4a>
c0014668:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001466c:	eb 98                	jmp    c0014606 <InterruptController::InterruptController(char const*)+0x38>
c001466e:	90                   	nop
c001466f:	83 c4 1c             	add    esp,0x1c
c0014672:	c3                   	ret    
c0014673:	90                   	nop

c0014674 <InterruptController::~InterruptController()>:
c0014674:	83 ec 0c             	sub    esp,0xc
c0014677:	ba b0 b2 02 c0       	mov    edx,0xc002b2b0
c001467c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014680:	89 10                	mov    DWORD PTR [eax],edx
c0014682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014686:	83 ec 0c             	sub    esp,0xc
c0014689:	50                   	push   eax
c001468a:	e8 9f f4 ff ff       	call   c0013b2e <Device::~Device()>
c001468f:	83 c4 10             	add    esp,0x10
c0014692:	90                   	nop
c0014693:	83 c4 0c             	add    esp,0xc
c0014696:	c3                   	ret    
c0014697:	90                   	nop

c0014698 <InterruptController::~InterruptController()>:
c0014698:	83 ec 0c             	sub    esp,0xc
c001469b:	83 ec 0c             	sub    esp,0xc
c001469e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146a2:	e8 cd ff ff ff       	call   c0014674 <InterruptController::~InterruptController()>
c00146a7:	83 c4 10             	add    esp,0x10
c00146aa:	83 ec 08             	sub    esp,0x8
c00146ad:	68 58 21 00 00       	push   0x2158
c00146b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146b6:	e8 94 e0 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c00146bb:	83 c4 10             	add    esp,0x10
c00146be:	83 c4 0c             	add    esp,0xc
c00146c1:	c3                   	ret    

c00146c2 <displayDebugInfo(regs*)>:
c00146c2:	55                   	push   ebp
c00146c3:	57                   	push   edi
c00146c4:	56                   	push   esi
c00146c5:	53                   	push   ebx
c00146c6:	83 ec 24             	sub    esp,0x24
c00146c9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00146cd:	0f 20 c2             	mov    edx,cr0
c00146d0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00146d4:	0f 20 d7             	mov    edi,cr2
c00146d7:	0f 20 de             	mov    esi,cr3
c00146da:	0f 20 e5             	mov    ebp,cr4
c00146dd:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00146e0:	68 f6 af 02 c0       	push   0xc002aff6
c00146e5:	e8 3d e1 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00146ea:	59                   	pop    ecx
c00146eb:	58                   	pop    eax
c00146ec:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00146ef:	68 01 b0 02 c0       	push   0xc002b001
c00146f4:	e8 2e e1 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00146f9:	58                   	pop    eax
c00146fa:	5a                   	pop    edx
c00146fb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00146fe:	68 0c b0 02 c0       	push   0xc002b00c
c0014703:	e8 1f e1 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014708:	59                   	pop    ecx
c0014709:	58                   	pop    eax
c001470a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001470d:	68 17 b0 02 c0       	push   0xc002b017
c0014712:	e8 10 e1 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014717:	58                   	pop    eax
c0014718:	5a                   	pop    edx
c0014719:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001471c:	68 22 b0 02 c0       	push   0xc002b022
c0014721:	e8 01 e1 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014726:	59                   	pop    ecx
c0014727:	58                   	pop    eax
c0014728:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001472b:	68 2d b0 02 c0       	push   0xc002b02d
c0014730:	e8 f2 e0 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014735:	58                   	pop    eax
c0014736:	5a                   	pop    edx
c0014737:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001473a:	68 38 b0 02 c0       	push   0xc002b038
c001473f:	e8 e3 e0 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014744:	59                   	pop    ecx
c0014745:	58                   	pop    eax
c0014746:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014749:	68 43 b0 02 c0       	push   0xc002b043
c001474e:	e8 d4 e0 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014753:	58                   	pop    eax
c0014754:	5a                   	pop    edx
c0014755:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014758:	68 4e b0 02 c0       	push   0xc002b04e
c001475d:	e8 c5 e0 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014762:	59                   	pop    ecx
c0014763:	58                   	pop    eax
c0014764:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014767:	68 5d b0 02 c0       	push   0xc002b05d
c001476c:	e8 b6 e0 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014771:	58                   	pop    eax
c0014772:	5a                   	pop    edx
c0014773:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014776:	68 68 b0 02 c0       	push   0xc002b068
c001477b:	e8 a7 e0 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014780:	59                   	pop    ecx
c0014781:	58                   	pop    eax
c0014782:	57                   	push   edi
c0014783:	68 73 b0 02 c0       	push   0xc002b073
c0014788:	e8 9a e0 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001478d:	58                   	pop    eax
c001478e:	5a                   	pop    edx
c001478f:	56                   	push   esi
c0014790:	68 7e b0 02 c0       	push   0xc002b07e
c0014795:	e8 8d e0 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001479a:	59                   	pop    ecx
c001479b:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c00147a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a6:	e8 de bd ff ff       	call   c0010589 <setActiveTerminal(VgaText*)>
c00147ab:	58                   	pop    eax
c00147ac:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00147af:	5a                   	pop    edx
c00147b0:	c1 e0 05             	shl    eax,0x5
c00147b3:	05 e0 ce 02 c0       	add    eax,0xc002cee0
c00147b8:	50                   	push   eax
c00147b9:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c00147be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c4:	e8 cd c2 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c00147c9:	59                   	pop    ecx
c00147ca:	58                   	pop    eax
c00147cb:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c00147d0:	68 89 b0 02 c0       	push   0xc002b089
c00147d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147db:	e8 b6 c2 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c00147e0:	58                   	pop    eax
c00147e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147e6:	5a                   	pop    edx
c00147e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00147ea:	83 c0 0c             	add    eax,0xc
c00147ed:	50                   	push   eax
c00147ee:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c00147f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f9:	e8 98 c2 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c00147fe:	59                   	pop    ecx
c00147ff:	58                   	pop    eax
c0014800:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014805:	68 92 b0 02 c0       	push   0xc002b092
c001480a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014810:	e8 81 c2 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c0014815:	58                   	pop    eax
c0014816:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001481b:	5a                   	pop    edx
c001481c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001481f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014825:	e8 26 c2 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c001482a:	59                   	pop    ecx
c001482b:	58                   	pop    eax
c001482c:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014831:	68 9a b0 02 c0       	push   0xc002b09a
c0014836:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483c:	e8 55 c2 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c0014841:	58                   	pop    eax
c0014842:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014847:	5a                   	pop    edx
c0014848:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001484b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014851:	e8 fa c1 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c0014856:	59                   	pop    ecx
c0014857:	58                   	pop    eax
c0014858:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001485d:	68 a2 b0 02 c0       	push   0xc002b0a2
c0014862:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014868:	e8 29 c2 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001486d:	58                   	pop    eax
c001486e:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014873:	5a                   	pop    edx
c0014874:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014877:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487d:	e8 ce c1 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c0014882:	59                   	pop    ecx
c0014883:	58                   	pop    eax
c0014884:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014889:	68 aa b0 02 c0       	push   0xc002b0aa
c001488e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014894:	e8 fd c1 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c0014899:	58                   	pop    eax
c001489a:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001489f:	5a                   	pop    edx
c00148a0:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00148a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a9:	e8 a2 c1 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c00148ae:	59                   	pop    ecx
c00148af:	58                   	pop    eax
c00148b0:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c00148b5:	68 b2 b0 02 c0       	push   0xc002b0b2
c00148ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c0:	e8 d1 c1 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c00148c5:	58                   	pop    eax
c00148c6:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c00148cb:	5a                   	pop    edx
c00148cc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00148cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d5:	e8 76 c1 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c00148da:	59                   	pop    ecx
c00148db:	58                   	pop    eax
c00148dc:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c00148e1:	68 ba b0 02 c0       	push   0xc002b0ba
c00148e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ec:	e8 a5 c1 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c00148f1:	58                   	pop    eax
c00148f2:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c00148f7:	5a                   	pop    edx
c00148f8:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00148fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014901:	e8 4a c1 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c0014906:	59                   	pop    ecx
c0014907:	58                   	pop    eax
c0014908:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001490d:	68 c2 b0 02 c0       	push   0xc002b0c2
c0014912:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014918:	e8 79 c1 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001491d:	58                   	pop    eax
c001491e:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014923:	5a                   	pop    edx
c0014924:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014928:	52                   	push   edx
c0014929:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001492f:	e8 1c c1 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c0014934:	59                   	pop    ecx
c0014935:	58                   	pop    eax
c0014936:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001493b:	68 cb b0 02 c0       	push   0xc002b0cb
c0014940:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014946:	e8 4b c1 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001494b:	58                   	pop    eax
c001494c:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014951:	5a                   	pop    edx
c0014952:	57                   	push   edi
c0014953:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014959:	e8 f2 c0 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c001495e:	59                   	pop    ecx
c001495f:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014964:	5f                   	pop    edi
c0014965:	68 d3 b0 02 c0       	push   0xc002b0d3
c001496a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014970:	e8 21 c1 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c0014975:	58                   	pop    eax
c0014976:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001497b:	5a                   	pop    edx
c001497c:	56                   	push   esi
c001497d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014983:	e8 c8 c0 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c0014988:	59                   	pop    ecx
c0014989:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001498e:	5e                   	pop    esi
c001498f:	68 db b0 02 c0       	push   0xc002b0db
c0014994:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001499a:	e8 f7 c0 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001499f:	5f                   	pop    edi
c00149a0:	58                   	pop    eax
c00149a1:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c00149a6:	55                   	push   ebp
c00149a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ad:	e8 9e c0 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c00149b2:	58                   	pop    eax
c00149b3:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c00149b8:	5a                   	pop    edx
c00149b9:	68 e3 b0 02 c0       	push   0xc002b0e3
c00149be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c4:	e8 cd c0 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c00149c9:	0f 21 c0             	mov    eax,db0
c00149cc:	59                   	pop    ecx
c00149cd:	5e                   	pop    esi
c00149ce:	50                   	push   eax
c00149cf:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c00149d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149da:	e8 71 c0 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c00149df:	5f                   	pop    edi
c00149e0:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c00149e5:	5d                   	pop    ebp
c00149e6:	68 ec b0 02 c0       	push   0xc002b0ec
c00149eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f1:	e8 a0 c0 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c00149f6:	0f 21 c8             	mov    eax,db1
c00149f9:	5a                   	pop    edx
c00149fa:	59                   	pop    ecx
c00149fb:	50                   	push   eax
c00149fc:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014a01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a07:	e8 44 c0 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c0014a0c:	5e                   	pop    esi
c0014a0d:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014a12:	5f                   	pop    edi
c0014a13:	68 f4 b0 02 c0       	push   0xc002b0f4
c0014a18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a1e:	e8 73 c0 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c0014a23:	0f 21 d0             	mov    eax,db2
c0014a26:	5d                   	pop    ebp
c0014a27:	5a                   	pop    edx
c0014a28:	50                   	push   eax
c0014a29:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014a2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a34:	e8 17 c0 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c0014a39:	59                   	pop    ecx
c0014a3a:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014a3f:	5e                   	pop    esi
c0014a40:	68 fc b0 02 c0       	push   0xc002b0fc
c0014a45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a4b:	e8 46 c0 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c0014a50:	0f 21 d8             	mov    eax,db3
c0014a53:	5f                   	pop    edi
c0014a54:	5d                   	pop    ebp
c0014a55:	50                   	push   eax
c0014a56:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014a5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a61:	e8 ea bf ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c0014a66:	58                   	pop    eax
c0014a67:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014a6c:	5a                   	pop    edx
c0014a6d:	68 04 b1 02 c0       	push   0xc002b104
c0014a72:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a78:	e8 19 c0 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c0014a7d:	0f 21 f0             	mov    eax,db6
c0014a80:	59                   	pop    ecx
c0014a81:	5e                   	pop    esi
c0014a82:	50                   	push   eax
c0014a83:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014a88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a8e:	e8 bd bf ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c0014a93:	5f                   	pop    edi
c0014a94:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014a99:	5d                   	pop    ebp
c0014a9a:	68 0c b1 02 c0       	push   0xc002b10c
c0014a9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa5:	e8 ec bf ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c0014aaa:	0f 21 f8             	mov    eax,db7
c0014aad:	5a                   	pop    edx
c0014aae:	59                   	pop    ecx
c0014aaf:	50                   	push   eax
c0014ab0:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014ab5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014abb:	e8 90 bf ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c0014ac0:	5e                   	pop    esi
c0014ac1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ac4:	e8 c6 86 00 00       	call   c001d18f <Thr::getDriverNameFromAddress(unsigned long)>
c0014ac9:	83 c4 10             	add    esp,0x10
c0014acc:	85 c0                	test   eax,eax
c0014ace:	74 7d                	je     c0014b4d <displayDebugInfo(regs*)+0x48b>
c0014ad0:	89 c6                	mov    esi,eax
c0014ad2:	50                   	push   eax
c0014ad3:	50                   	push   eax
c0014ad4:	56                   	push   esi
c0014ad5:	68 14 b1 02 c0       	push   0xc002b114
c0014ada:	e8 48 dd ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014adf:	5a                   	pop    edx
c0014ae0:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014ae5:	59                   	pop    ecx
c0014ae6:	68 22 b1 02 c0       	push   0xc002b122
c0014aeb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014af1:	e8 a0 bf ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c0014af6:	5f                   	pop    edi
c0014af7:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014afc:	5d                   	pop    ebp
c0014afd:	56                   	push   esi
c0014afe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b04:	e8 8d bf ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c0014b09:	58                   	pop    eax
c0014b0a:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014b0f:	5a                   	pop    edx
c0014b10:	68 2e b1 02 c0       	push   0xc002b12e
c0014b15:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1b:	e8 76 bf ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c0014b20:	59                   	pop    ecx
c0014b21:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0014b26:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014b2c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b2f:	e8 92 86 00 00       	call   c001d1c6 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014b34:	5b                   	pop    ebx
c0014b35:	5d                   	pop    ebp
c0014b36:	50                   	push   eax
c0014b37:	57                   	push   edi
c0014b38:	e8 13 bf ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c0014b3d:	58                   	pop    eax
c0014b3e:	5a                   	pop    edx
c0014b3f:	56                   	push   esi
c0014b40:	68 3a b1 02 c0       	push   0xc002b13a
c0014b45:	e8 dd dc ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014b4a:	83 c4 10             	add    esp,0x10
c0014b4d:	fa                   	cli    
c0014b4e:	f4                   	hlt    
c0014b4f:	eb fe                	jmp    c0014b4f <displayDebugInfo(regs*)+0x48d>

c0014b51 <x87EmulHandler(regs*, void*)>:
c0014b51:	83 ec 0c             	sub    esp,0xc
c0014b54:	0f 20 c2             	mov    edx,cr0
c0014b57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b5c:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014b60:	75 4b                	jne    c0014bad <x87EmulHandler(regs*, void*)+0x5c>
c0014b62:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0014b67:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014b6d:	85 c0                	test   eax,eax
c0014b6f:	74 05                	je     c0014b76 <x87EmulHandler(regs*, void*)+0x25>
c0014b71:	83 e2 08             	and    edx,0x8
c0014b74:	75 17                	jne    c0014b8d <x87EmulHandler(regs*, void*)+0x3c>
c0014b76:	83 ec 0c             	sub    esp,0xc
c0014b79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b7d:	e8 f3 a9 00 00       	call   c001f575 <Vm::x87Handler(regs*)>
c0014b82:	83 c4 10             	add    esp,0x10
c0014b85:	84 c0                	test   al,al
c0014b87:	74 24                	je     c0014bad <x87EmulHandler(regs*, void*)+0x5c>
c0014b89:	83 c4 0c             	add    esp,0xc
c0014b8c:	c3                   	ret    
c0014b8d:	83 ec 0c             	sub    esp,0xc
c0014b90:	68 60 b1 02 c0       	push   0xc002b160
c0014b95:	e8 8d dc ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014b9a:	0f 06                	clts   
c0014b9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ba1:	83 c4 10             	add    esp,0x10
c0014ba4:	a3 a8 e0 02 c0       	mov    ds:0xc002e0a8,eax
c0014ba9:	83 c4 0c             	add    esp,0xc
c0014bac:	c3                   	ret    
c0014bad:	83 ec 0c             	sub    esp,0xc
c0014bb0:	68 4a b1 02 c0       	push   0xc002b14a
c0014bb5:	e8 6d dc ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014bba:	5a                   	pop    edx
c0014bbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bbf:	e8 fe fa ff ff       	call   c00146c2 <displayDebugInfo(regs*)>

c0014bc4 <gpFault(regs*, void*)>:
c0014bc4:	53                   	push   ebx
c0014bc5:	83 ec 14             	sub    esp,0x14
c0014bc8:	c7 05 a4 e0 02 c0 4e ea 01 c0 	mov    DWORD PTR ds:0xc002e0a4,0xc001ea4e
c0014bd2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014bd6:	53                   	push   ebx
c0014bd7:	e8 72 9e 00 00       	call   c001ea4e <Vm::faultHandler(regs*)>
c0014bdc:	83 c4 10             	add    esp,0x10
c0014bdf:	84 c0                	test   al,al
c0014be1:	74 05                	je     c0014be8 <gpFault(regs*, void*)+0x24>
c0014be3:	83 c4 08             	add    esp,0x8
c0014be6:	5b                   	pop    ebx
c0014be7:	c3                   	ret    
c0014be8:	83 ec 0c             	sub    esp,0xc
c0014beb:	68 6d b1 02 c0       	push   0xc002b16d
c0014bf0:	e8 32 dc ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014bf5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bf8:	e8 c5 fa ff ff       	call   c00146c2 <displayDebugInfo(regs*)>

c0014bfd <pgFault(regs*, void*)>:
c0014bfd:	53                   	push   ebx
c0014bfe:	83 ec 10             	sub    esp,0x10
c0014c01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c05:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014c08:	68 88 b1 02 c0       	push   0xc002b188
c0014c0d:	e8 15 dc ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014c12:	0f 20 d0             	mov    eax,cr2
c0014c15:	5a                   	pop    edx
c0014c16:	59                   	pop    ecx
c0014c17:	50                   	push   eax
c0014c18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c1d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c20:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014c26:	e8 03 d7 ff ff       	call   c001232e <VAS::tryLoadBackOffDisk(unsigned long)>
c0014c2b:	83 c4 10             	add    esp,0x10
c0014c2e:	84 c0                	test   al,al
c0014c30:	74 05                	je     c0014c37 <pgFault(regs*, void*)+0x3a>
c0014c32:	83 c4 08             	add    esp,0x8
c0014c35:	5b                   	pop    ebx
c0014c36:	c3                   	ret    
c0014c37:	83 ec 0c             	sub    esp,0xc
c0014c3a:	68 9d b1 02 c0       	push   0xc002b19d
c0014c3f:	e8 e3 db ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014c44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c47:	e8 76 fa ff ff       	call   c00146c2 <displayDebugInfo(regs*)>

c0014c4c <otherISRHandler(regs*, void*)>:
c0014c4c:	53                   	push   ebx
c0014c4d:	83 ec 0c             	sub    esp,0xc
c0014c50:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014c54:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014c57:	50                   	push   eax
c0014c58:	50                   	push   eax
c0014c59:	68 aa b1 02 c0       	push   0xc002b1aa
c0014c5e:	e8 c4 db ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014c63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c66:	e8 57 fa ff ff       	call   c00146c2 <displayDebugInfo(regs*)>

c0014c6b <opcodeFault(regs*, void*)>:
c0014c6b:	55                   	push   ebp
c0014c6c:	89 e5                	mov    ebp,esp
c0014c6e:	56                   	push   esi
c0014c6f:	53                   	push   ebx
c0014c70:	83 ec 40             	sub    esp,0x40
c0014c73:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0014c78:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c7e:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014c84:	84 c0                	test   al,al
c0014c86:	74 24                	je     c0014cac <opcodeFault(regs*, void*)+0x41>
c0014c88:	83 ec 0c             	sub    esp,0xc
c0014c8b:	68 c8 b1 02 c0       	push   0xc002b1c8
c0014c90:	e8 92 db ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014c95:	83 c4 10             	add    esp,0x10
c0014c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c9e:	8d 50 19             	lea    edx,[eax+0x19]
c0014ca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ca7:	e9 d5 05 00 00       	jmp    c0015281 <opcodeFault(regs*, void*)+0x616>
c0014cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014caf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cb2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014cb5:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014cb9:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cc3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014cc6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc9:	8a 00                	mov    al,BYTE PTR [eax]
c0014ccb:	3c f0                	cmp    al,0xf0
c0014ccd:	75 17                	jne    c0014ce6 <opcodeFault(regs*, void*)+0x7b>
c0014ccf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cd8:	8d 50 01             	lea    edx,[eax+0x1]
c0014cdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cde:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ce1:	e9 da 00 00 00       	jmp    c0014dc0 <opcodeFault(regs*, void*)+0x155>
c0014ce6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ce9:	8a 00                	mov    al,BYTE PTR [eax]
c0014ceb:	3c f2                	cmp    al,0xf2
c0014ced:	74 09                	je     c0014cf8 <opcodeFault(regs*, void*)+0x8d>
c0014cef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cf2:	8a 00                	mov    al,BYTE PTR [eax]
c0014cf4:	3c f3                	cmp    al,0xf3
c0014cf6:	75 1b                	jne    c0014d13 <opcodeFault(regs*, void*)+0xa8>
c0014cf8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014cfc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d02:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d05:	8d 50 01             	lea    edx,[eax+0x1]
c0014d08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d0e:	e9 ad 00 00 00       	jmp    c0014dc0 <opcodeFault(regs*, void*)+0x155>
c0014d13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d16:	8a 00                	mov    al,BYTE PTR [eax]
c0014d18:	3c 66                	cmp    al,0x66
c0014d1a:	75 1f                	jne    c0014d3b <opcodeFault(regs*, void*)+0xd0>
c0014d1c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d20:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014d24:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d2d:	8d 50 01             	lea    edx,[eax+0x1]
c0014d30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d33:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d36:	e9 85 00 00 00       	jmp    c0014dc0 <opcodeFault(regs*, void*)+0x155>
c0014d3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d3e:	8a 00                	mov    al,BYTE PTR [eax]
c0014d40:	3c 67                	cmp    al,0x67
c0014d42:	75 18                	jne    c0014d5c <opcodeFault(regs*, void*)+0xf1>
c0014d44:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d48:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d51:	8d 50 01             	lea    edx,[eax+0x1]
c0014d54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d57:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d5a:	eb 64                	jmp    c0014dc0 <opcodeFault(regs*, void*)+0x155>
c0014d5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d5f:	8a 00                	mov    al,BYTE PTR [eax]
c0014d61:	3c 2e                	cmp    al,0x2e
c0014d63:	74 09                	je     c0014d6e <opcodeFault(regs*, void*)+0x103>
c0014d65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d68:	8a 00                	mov    al,BYTE PTR [eax]
c0014d6a:	3c 3e                	cmp    al,0x3e
c0014d6c:	75 18                	jne    c0014d86 <opcodeFault(regs*, void*)+0x11b>
c0014d6e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d72:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014d7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d84:	eb 3a                	jmp    c0014dc0 <opcodeFault(regs*, void*)+0x155>
c0014d86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d89:	8a 00                	mov    al,BYTE PTR [eax]
c0014d8b:	3c 36                	cmp    al,0x36
c0014d8d:	74 1b                	je     c0014daa <opcodeFault(regs*, void*)+0x13f>
c0014d8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d92:	8a 00                	mov    al,BYTE PTR [eax]
c0014d94:	3c 26                	cmp    al,0x26
c0014d96:	74 12                	je     c0014daa <opcodeFault(regs*, void*)+0x13f>
c0014d98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d9b:	8a 00                	mov    al,BYTE PTR [eax]
c0014d9d:	3c 64                	cmp    al,0x64
c0014d9f:	74 09                	je     c0014daa <opcodeFault(regs*, void*)+0x13f>
c0014da1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014da4:	8a 00                	mov    al,BYTE PTR [eax]
c0014da6:	3c 65                	cmp    al,0x65
c0014da8:	75 16                	jne    c0014dc0 <opcodeFault(regs*, void*)+0x155>
c0014daa:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dae:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014db7:	8d 50 01             	lea    edx,[eax+0x1]
c0014dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc3:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc5:	3c 0f                	cmp    al,0xf
c0014dc7:	0f 85 ad 00 00 00    	jne    c0014e7a <opcodeFault(regs*, void*)+0x20f>
c0014dcd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dd0:	40                   	inc    eax
c0014dd1:	8a 00                	mov    al,BYTE PTR [eax]
c0014dd3:	3c c2                	cmp    al,0xc2
c0014dd5:	74 0e                	je     c0014de5 <opcodeFault(regs*, void*)+0x17a>
c0014dd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dda:	40                   	inc    eax
c0014ddb:	8a 00                	mov    al,BYTE PTR [eax]
c0014ddd:	3c c3                	cmp    al,0xc3
c0014ddf:	0f 85 95 00 00 00    	jne    c0014e7a <opcodeFault(regs*, void*)+0x20f>
c0014de5:	83 ec 0c             	sub    esp,0xc
c0014de8:	68 eb b1 02 c0       	push   0xc002b1eb
c0014ded:	e8 35 da ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0014df2:	83 c4 10             	add    esp,0x10
c0014df5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dfb:	8d 50 01             	lea    edx,[eax+0x1]
c0014dfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e01:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e04:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e0a:	8a 00                	mov    al,BYTE PTR [eax]
c0014e0c:	8d 50 fe             	lea    edx,[eax-0x2]
c0014e0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e12:	88 10                	mov    BYTE PTR [eax],dl
c0014e14:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014e17:	50                   	push   eax
c0014e18:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014e1b:	50                   	push   eax
c0014e1c:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014e1f:	50                   	push   eax
c0014e20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e23:	e8 04 49 00 00       	call   c001972c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e28:	83 c4 10             	add    esp,0x10
c0014e2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e31:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e34:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014e37:	01 d0                	add    eax,edx
c0014e39:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e42:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e45:	48                   	dec    eax
c0014e46:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014e49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014e4f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e55:	83 ec 04             	sub    esp,0x4
c0014e58:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014e5b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014e5e:	50                   	push   eax
c0014e5f:	e8 50 b3 fe ff       	call   c00001b4 <voodooXADD>
c0014e64:	83 c4 10             	add    esp,0x10
c0014e67:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014e6a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014e6d:	01 c2                	add    edx,eax
c0014e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e72:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e75:	e9 07 04 00 00       	jmp    c0015281 <opcodeFault(regs*, void*)+0x616>
c0014e7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e7d:	8a 00                	mov    al,BYTE PTR [eax]
c0014e7f:	3c 0f                	cmp    al,0xf
c0014e81:	0f 85 8b 01 00 00    	jne    c0015012 <opcodeFault(regs*, void*)+0x3a7>
c0014e87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e8a:	40                   	inc    eax
c0014e8b:	8a 00                	mov    al,BYTE PTR [eax]
c0014e8d:	3c c7                	cmp    al,0xc7
c0014e8f:	0f 86 7d 01 00 00    	jbe    c0015012 <opcodeFault(regs*, void*)+0x3a7>
c0014e95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e98:	40                   	inc    eax
c0014e99:	8a 00                	mov    al,BYTE PTR [eax]
c0014e9b:	3c cf                	cmp    al,0xcf
c0014e9d:	0f 87 6f 01 00 00    	ja     c0015012 <opcodeFault(regs*, void*)+0x3a7>
c0014ea3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ea6:	40                   	inc    eax
c0014ea7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ea9:	83 c0 38             	add    eax,0x38
c0014eac:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014eaf:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014eb3:	75 0b                	jne    c0014ec0 <opcodeFault(regs*, void*)+0x255>
c0014eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014ebb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ebe:	eb 75                	jmp    c0014f35 <opcodeFault(regs*, void*)+0x2ca>
c0014ec0:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014ec4:	75 0b                	jne    c0014ed1 <opcodeFault(regs*, void*)+0x266>
c0014ec6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014ecc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ecf:	eb 64                	jmp    c0014f35 <opcodeFault(regs*, void*)+0x2ca>
c0014ed1:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014ed5:	75 0b                	jne    c0014ee2 <opcodeFault(regs*, void*)+0x277>
c0014ed7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eda:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014edd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ee0:	eb 53                	jmp    c0014f35 <opcodeFault(regs*, void*)+0x2ca>
c0014ee2:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014ee6:	75 0b                	jne    c0014ef3 <opcodeFault(regs*, void*)+0x288>
c0014ee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eeb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014eee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ef1:	eb 42                	jmp    c0014f35 <opcodeFault(regs*, void*)+0x2ca>
c0014ef3:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014ef7:	75 0b                	jne    c0014f04 <opcodeFault(regs*, void*)+0x299>
c0014ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efc:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014eff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f02:	eb 31                	jmp    c0014f35 <opcodeFault(regs*, void*)+0x2ca>
c0014f04:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f08:	75 0b                	jne    c0014f15 <opcodeFault(regs*, void*)+0x2aa>
c0014f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f10:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f13:	eb 20                	jmp    c0014f35 <opcodeFault(regs*, void*)+0x2ca>
c0014f15:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f19:	75 0b                	jne    c0014f26 <opcodeFault(regs*, void*)+0x2bb>
c0014f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014f21:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f24:	eb 0f                	jmp    c0014f35 <opcodeFault(regs*, void*)+0x2ca>
c0014f26:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f2a:	75 09                	jne    c0014f35 <opcodeFault(regs*, void*)+0x2ca>
c0014f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f32:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f35:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014f39:	74 10                	je     c0014f4b <opcodeFault(regs*, void*)+0x2e0>
c0014f3b:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014f42:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014f49:	eb 2d                	jmp    c0014f78 <opcodeFault(regs*, void*)+0x30d>
c0014f4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f4e:	c1 e0 18             	shl    eax,0x18
c0014f51:	89 c2                	mov    edx,eax
c0014f53:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f56:	c1 e0 08             	shl    eax,0x8
c0014f59:	25 00 00 ff 00       	and    eax,0xff0000
c0014f5e:	09 c2                	or     edx,eax
c0014f60:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f63:	c1 e8 08             	shr    eax,0x8
c0014f66:	25 00 ff 00 00       	and    eax,0xff00
c0014f6b:	09 c2                	or     edx,eax
c0014f6d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f70:	c1 e8 18             	shr    eax,0x18
c0014f73:	09 d0                	or     eax,edx
c0014f75:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f78:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014f7c:	75 0b                	jne    c0014f89 <opcodeFault(regs*, void*)+0x31e>
c0014f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f81:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f84:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014f87:	eb 75                	jmp    c0014ffe <opcodeFault(regs*, void*)+0x393>
c0014f89:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f8d:	75 0b                	jne    c0014f9a <opcodeFault(regs*, void*)+0x32f>
c0014f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f92:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f95:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014f98:	eb 64                	jmp    c0014ffe <opcodeFault(regs*, void*)+0x393>
c0014f9a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f9e:	75 0b                	jne    c0014fab <opcodeFault(regs*, void*)+0x340>
c0014fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fa6:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014fa9:	eb 53                	jmp    c0014ffe <opcodeFault(regs*, void*)+0x393>
c0014fab:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014faf:	75 0b                	jne    c0014fbc <opcodeFault(regs*, void*)+0x351>
c0014fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fb7:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014fba:	eb 42                	jmp    c0014ffe <opcodeFault(regs*, void*)+0x393>
c0014fbc:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014fc0:	75 0b                	jne    c0014fcd <opcodeFault(regs*, void*)+0x362>
c0014fc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fc8:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014fcb:	eb 31                	jmp    c0014ffe <opcodeFault(regs*, void*)+0x393>
c0014fcd:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014fd1:	75 0b                	jne    c0014fde <opcodeFault(regs*, void*)+0x373>
c0014fd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fd9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014fdc:	eb 20                	jmp    c0014ffe <opcodeFault(regs*, void*)+0x393>
c0014fde:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014fe2:	75 0b                	jne    c0014fef <opcodeFault(regs*, void*)+0x384>
c0014fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fea:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014fed:	eb 0f                	jmp    c0014ffe <opcodeFault(regs*, void*)+0x393>
c0014fef:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014ff3:	75 09                	jne    c0014ffe <opcodeFault(regs*, void*)+0x393>
c0014ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ffb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014ffe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015001:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015004:	8d 50 02             	lea    edx,[eax+0x2]
c0015007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001500d:	e9 6f 02 00 00       	jmp    c0015281 <opcodeFault(regs*, void*)+0x616>
c0015012:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015015:	8a 00                	mov    al,BYTE PTR [eax]
c0015017:	3c 0f                	cmp    al,0xf
c0015019:	0f 85 8d 01 00 00    	jne    c00151ac <opcodeFault(regs*, void*)+0x541>
c001501f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015022:	40                   	inc    eax
c0015023:	8a 00                	mov    al,BYTE PTR [eax]
c0015025:	3c c7                	cmp    al,0xc7
c0015027:	0f 85 7f 01 00 00    	jne    c00151ac <opcodeFault(regs*, void*)+0x541>
c001502d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015033:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015036:	8d 50 01             	lea    edx,[eax+0x1]
c0015039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001503f:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015042:	50                   	push   eax
c0015043:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015046:	50                   	push   eax
c0015047:	8d 45 bc             	lea    eax,[ebp-0x44]
c001504a:	50                   	push   eax
c001504b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001504e:	e8 d9 46 00 00       	call   c001972c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015053:	83 c4 10             	add    esp,0x10
c0015056:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015059:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001505c:	83 f0 01             	xor    eax,0x1
c001505f:	84 c0                	test   al,al
c0015061:	0f 84 45 01 00 00    	je     c00151ac <opcodeFault(regs*, void*)+0x541>
c0015067:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001506a:	3c 01                	cmp    al,0x1
c001506c:	0f 85 3a 01 00 00    	jne    c00151ac <opcodeFault(regs*, void*)+0x541>
c0015072:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015075:	83 f0 01             	xor    eax,0x1
c0015078:	84 c0                	test   al,al
c001507a:	0f 84 2c 01 00 00    	je     c00151ac <opcodeFault(regs*, void*)+0x541>
c0015080:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015083:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015086:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015089:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015090:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015093:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015096:	89 c2                	mov    edx,eax
c0015098:	b8 00 00 00 00       	mov    eax,0x0
c001509d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150a0:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00150a9:	ba 00 00 00 00       	mov    edx,0x0
c00150ae:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00150b1:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00150b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00150ba:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00150bd:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00150c4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00150c7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00150ca:	89 c2                	mov    edx,eax
c00150cc:	b8 00 00 00 00       	mov    eax,0x0
c00150d1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00150d4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00150d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150da:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00150dd:	ba 00 00 00 00       	mov    edx,0x0
c00150e2:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00150e5:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00150e8:	fa                   	cli    
c00150e9:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c00150ee:	40                   	inc    eax
c00150ef:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c00150f4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00150f7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00150fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00150fc:	89 c1                	mov    ecx,eax
c00150fe:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015101:	89 cb                	mov    ebx,ecx
c0015103:	89 d0                	mov    eax,edx
c0015105:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015108:	89 c6                	mov    esi,eax
c001510a:	89 f0                	mov    eax,esi
c001510c:	09 d8                	or     eax,ebx
c001510e:	85 c0                	test   eax,eax
c0015110:	75 21                	jne    c0015133 <opcodeFault(regs*, void*)+0x4c8>
c0015112:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015115:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015118:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001511b:	89 01                	mov    DWORD PTR [ecx],eax
c001511d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015120:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015123:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015126:	83 c8 40             	or     eax,0x40
c0015129:	89 c2                	mov    edx,eax
c001512b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512e:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015131:	eb 3e                	jmp    c0015171 <opcodeFault(regs*, void*)+0x506>
c0015133:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015136:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015139:	8b 00                	mov    eax,DWORD PTR [eax]
c001513b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001513e:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015141:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015144:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015147:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001514a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001514d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015150:	89 d0                	mov    eax,edx
c0015152:	31 d2                	xor    edx,edx
c0015154:	89 c3                	mov    ebx,eax
c0015156:	89 d6                	mov    esi,edx
c0015158:	89 da                	mov    edx,ebx
c001515a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515d:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015160:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015163:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015166:	83 e0 bf             	and    eax,0xffffffbf
c0015169:	89 c2                	mov    edx,eax
c001516b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516e:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015171:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c0015176:	48                   	dec    eax
c0015177:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001517c:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c0015181:	85 c0                	test   eax,eax
c0015183:	75 01                	jne    c0015186 <opcodeFault(regs*, void*)+0x51b>
c0015185:	fb                   	sti    
c0015186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015189:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001518c:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001518f:	01 c2                	add    edx,eax
c0015191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015194:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015197:	83 ec 0c             	sub    esp,0xc
c001519a:	68 fa b1 02 c0       	push   0xc002b1fa
c001519f:	e8 83 d6 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00151a4:	83 c4 10             	add    esp,0x10
c00151a7:	e9 d5 00 00 00       	jmp    c0015281 <opcodeFault(regs*, void*)+0x616>
c00151ac:	83 ec 0c             	sub    esp,0xc
c00151af:	68 0d b2 02 c0       	push   0xc002b20d
c00151b4:	e8 6e d6 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00151b9:	83 c4 10             	add    esp,0x10
c00151bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151bf:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151c8:	c1 e0 04             	shl    eax,0x4
c00151cb:	01 d0                	add    eax,edx
c00151cd:	83 c0 03             	add    eax,0x3
c00151d0:	8a 00                	mov    al,BYTE PTR [eax]
c00151d2:	0f b6 d8             	movzx  ebx,al
c00151d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151e1:	c1 e0 04             	shl    eax,0x4
c00151e4:	01 d0                	add    eax,edx
c00151e6:	83 c0 02             	add    eax,0x2
c00151e9:	8a 00                	mov    al,BYTE PTR [eax]
c00151eb:	0f b6 c8             	movzx  ecx,al
c00151ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f1:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151fa:	c1 e0 04             	shl    eax,0x4
c00151fd:	01 d0                	add    eax,edx
c00151ff:	40                   	inc    eax
c0015200:	8a 00                	mov    al,BYTE PTR [eax]
c0015202:	0f b6 d0             	movzx  edx,al
c0015205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015208:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001520b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015211:	c1 e0 04             	shl    eax,0x4
c0015214:	01 f0                	add    eax,esi
c0015216:	8a 00                	mov    al,BYTE PTR [eax]
c0015218:	0f b6 c0             	movzx  eax,al
c001521b:	83 ec 0c             	sub    esp,0xc
c001521e:	53                   	push   ebx
c001521f:	51                   	push   ecx
c0015220:	52                   	push   edx
c0015221:	50                   	push   eax
c0015222:	68 20 b2 02 c0       	push   0xc002b220
c0015227:	e8 fb d5 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001522c:	83 c4 20             	add    esp,0x20
c001522f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015232:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015235:	83 c0 03             	add    eax,0x3
c0015238:	8a 00                	mov    al,BYTE PTR [eax]
c001523a:	0f b6 d8             	movzx  ebx,al
c001523d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015240:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015243:	83 c0 02             	add    eax,0x2
c0015246:	8a 00                	mov    al,BYTE PTR [eax]
c0015248:	0f b6 c8             	movzx  ecx,al
c001524b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015251:	40                   	inc    eax
c0015252:	8a 00                	mov    al,BYTE PTR [eax]
c0015254:	0f b6 d0             	movzx  edx,al
c0015257:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001525d:	8a 00                	mov    al,BYTE PTR [eax]
c001525f:	0f b6 c0             	movzx  eax,al
c0015262:	83 ec 0c             	sub    esp,0xc
c0015265:	53                   	push   ebx
c0015266:	51                   	push   ecx
c0015267:	52                   	push   edx
c0015268:	50                   	push   eax
c0015269:	68 48 b2 02 c0       	push   0xc002b248
c001526e:	e8 b4 d5 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0015273:	83 c4 20             	add    esp,0x20
c0015276:	83 ec 0c             	sub    esp,0xc
c0015279:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001527c:	e8 41 f4 ff ff       	call   c00146c2 <displayDebugInfo(regs*)>
c0015281:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015284:	5b                   	pop    ebx
c0015285:	5e                   	pop    esi
c0015286:	5d                   	pop    ebp
c0015287:	c3                   	ret    

c0015288 <displayProgramFault(char const*)>:
c0015288:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001528d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015290:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015296:	85 c0                	test   eax,eax
c0015298:	74 15                	je     c00152af <displayProgramFault(char const*)+0x27>
c001529a:	83 ec 0c             	sub    esp,0xc
c001529d:	6a 04                	push   0x4
c001529f:	6a 0f                	push   0xf
c00152a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152a5:	50                   	push   eax
c00152a6:	e8 e7 b4 ff ff       	call   c0010792 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00152ab:	83 c4 1c             	add    esp,0x1c
c00152ae:	c3                   	ret    
c00152af:	c3                   	ret    

c00152b0 <setupInterruptController()>:
c00152b0:	55                   	push   ebp
c00152b1:	89 e5                	mov    ebp,esp
c00152b3:	53                   	push   ebx
c00152b4:	83 ec 24             	sub    esp,0x24
c00152b7:	b8 00 00 00 00       	mov    eax,0x0
c00152bc:	85 c0                	test   eax,eax
c00152be:	0f 95 c0             	setne  al
c00152c1:	84 c0                	test   al,al
c00152c3:	74 5b                	je     c0015320 <setupInterruptController()+0x70>
c00152c5:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00152cc:	83 ec 0c             	sub    esp,0xc
c00152cf:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00152d2:	e8 f8 a4 ff ff       	call   c000f7cf <malloc>
c00152d7:	83 c4 10             	add    esp,0x10
c00152da:	89 c3                	mov    ebx,eax
c00152dc:	83 ec 0c             	sub    esp,0xc
c00152df:	53                   	push   ebx
c00152e0:	e8 4f 07 01 00       	call   c0025a34 <APIC::APIC()>
c00152e5:	83 c4 10             	add    esp,0x10
c00152e8:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00152eb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00152ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00152f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f3:	83 c0 08             	add    eax,0x8
c00152f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f8:	6a 00                	push   0x0
c00152fa:	6a 00                	push   0x0
c00152fc:	6a 00                	push   0x0
c00152fe:	52                   	push   edx
c00152ff:	ff d0                	call   eax
c0015301:	83 c4 10             	add    esp,0x10
c0015304:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0015309:	83 ec 08             	sub    esp,0x8
c001530c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001530f:	50                   	push   eax
c0015310:	e8 4b e9 ff ff       	call   c0013c60 <Device::addChild(Device*)>
c0015315:	83 c4 10             	add    esp,0x10
c0015318:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001531b:	e9 79 03 00 00       	jmp    c0015699 <setupInterruptController()+0x3e9>
c0015320:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c0015325:	84 c0                	test   al,al
c0015327:	75 14                	jne    c001533d <setupInterruptController()+0x8d>
c0015329:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001532e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015334:	83 e2 fe             	and    edx,0xfffffffe
c0015337:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001533d:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0015342:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015348:	83 e0 01             	and    eax,0x1
c001534b:	84 c0                	test   al,al
c001534d:	0f 95 c0             	setne  al
c0015350:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015353:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001535a:	83 ec 0c             	sub    esp,0xc
c001535d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015360:	e8 6a a4 ff ff       	call   c000f7cf <malloc>
c0015365:	83 c4 10             	add    esp,0x10
c0015368:	89 c3                	mov    ebx,eax
c001536a:	83 ec 0c             	sub    esp,0xc
c001536d:	53                   	push   ebx
c001536e:	e8 19 0c 01 00       	call   c0025f8c <PIC::PIC()>
c0015373:	83 c4 10             	add    esp,0x10
c0015376:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015379:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001537c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015381:	83 c0 08             	add    eax,0x8
c0015384:	8b 00                	mov    eax,DWORD PTR [eax]
c0015386:	6a 00                	push   0x0
c0015388:	6a 00                	push   0x0
c001538a:	6a 00                	push   0x0
c001538c:	52                   	push   edx
c001538d:	ff d0                	call   eax
c001538f:	83 c4 10             	add    esp,0x10
c0015392:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015396:	74 73                	je     c001540b <setupInterruptController()+0x15b>
c0015398:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001539b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539e:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a0:	83 c0 0c             	add    eax,0xc
c00153a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a5:	6a 00                	push   0x0
c00153a7:	6a 00                	push   0x0
c00153a9:	6a 00                	push   0x0
c00153ab:	52                   	push   edx
c00153ac:	ff d0                	call   eax
c00153ae:	83 c4 10             	add    esp,0x10
c00153b1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00153b5:	74 15                	je     c00153cc <setupInterruptController()+0x11c>
c00153b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bc:	83 c0 04             	add    eax,0x4
c00153bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c1:	83 ec 0c             	sub    esp,0xc
c00153c4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153c7:	ff d0                	call   eax
c00153c9:	83 c4 10             	add    esp,0x10
c00153cc:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00153d3:	83 ec 0c             	sub    esp,0xc
c00153d6:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00153d9:	e8 f1 a3 ff ff       	call   c000f7cf <malloc>
c00153de:	83 c4 10             	add    esp,0x10
c00153e1:	89 c3                	mov    ebx,eax
c00153e3:	83 ec 0c             	sub    esp,0xc
c00153e6:	53                   	push   ebx
c00153e7:	e8 48 06 01 00       	call   c0025a34 <APIC::APIC()>
c00153ec:	83 c4 10             	add    esp,0x10
c00153ef:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00153f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00153f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fa:	83 c0 08             	add    eax,0x8
c00153fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ff:	6a 00                	push   0x0
c0015401:	6a 00                	push   0x0
c0015403:	6a 00                	push   0x0
c0015405:	52                   	push   edx
c0015406:	ff d0                	call   eax
c0015408:	83 c4 10             	add    esp,0x10
c001540b:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0015410:	83 ec 08             	sub    esp,0x8
c0015413:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015416:	50                   	push   eax
c0015417:	e8 44 e8 ff ff       	call   c0013c60 <Device::addChild(Device*)>
c001541c:	83 c4 10             	add    esp,0x10
c001541f:	c7 05 a8 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e0a8,0x0
c0015429:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542c:	8b 00                	mov    eax,DWORD PTR [eax]
c001542e:	83 c0 24             	add    eax,0x24
c0015431:	8b 00                	mov    eax,DWORD PTR [eax]
c0015433:	6a 00                	push   0x0
c0015435:	68 4c 4c 01 c0       	push   0xc0014c4c
c001543a:	6a 00                	push   0x0
c001543c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001543f:	ff d0                	call   eax
c0015441:	83 c4 10             	add    esp,0x10
c0015444:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015447:	8b 00                	mov    eax,DWORD PTR [eax]
c0015449:	83 c0 24             	add    eax,0x24
c001544c:	8b 00                	mov    eax,DWORD PTR [eax]
c001544e:	6a 00                	push   0x0
c0015450:	68 4c 4c 01 c0       	push   0xc0014c4c
c0015455:	6a 01                	push   0x1
c0015457:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001545a:	ff d0                	call   eax
c001545c:	83 c4 10             	add    esp,0x10
c001545f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015462:	8b 00                	mov    eax,DWORD PTR [eax]
c0015464:	83 c0 24             	add    eax,0x24
c0015467:	8b 00                	mov    eax,DWORD PTR [eax]
c0015469:	6a 00                	push   0x0
c001546b:	68 1f 45 01 c0       	push   0xc001451f
c0015470:	6a 02                	push   0x2
c0015472:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015475:	ff d0                	call   eax
c0015477:	83 c4 10             	add    esp,0x10
c001547a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547d:	8b 00                	mov    eax,DWORD PTR [eax]
c001547f:	83 c0 24             	add    eax,0x24
c0015482:	8b 00                	mov    eax,DWORD PTR [eax]
c0015484:	6a 00                	push   0x0
c0015486:	68 4c 4c 01 c0       	push   0xc0014c4c
c001548b:	6a 03                	push   0x3
c001548d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015490:	ff d0                	call   eax
c0015492:	83 c4 10             	add    esp,0x10
c0015495:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015498:	8b 00                	mov    eax,DWORD PTR [eax]
c001549a:	83 c0 24             	add    eax,0x24
c001549d:	8b 00                	mov    eax,DWORD PTR [eax]
c001549f:	6a 00                	push   0x0
c00154a1:	68 4c 4c 01 c0       	push   0xc0014c4c
c00154a6:	6a 04                	push   0x4
c00154a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ab:	ff d0                	call   eax
c00154ad:	83 c4 10             	add    esp,0x10
c00154b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b5:	83 c0 24             	add    eax,0x24
c00154b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ba:	6a 00                	push   0x0
c00154bc:	68 4c 4c 01 c0       	push   0xc0014c4c
c00154c1:	6a 05                	push   0x5
c00154c3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c6:	ff d0                	call   eax
c00154c8:	83 c4 10             	add    esp,0x10
c00154cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d0:	83 c0 24             	add    eax,0x24
c00154d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d5:	6a 00                	push   0x0
c00154d7:	68 6b 4c 01 c0       	push   0xc0014c6b
c00154dc:	6a 06                	push   0x6
c00154de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154e1:	ff d0                	call   eax
c00154e3:	83 c4 10             	add    esp,0x10
c00154e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00154eb:	83 c0 24             	add    eax,0x24
c00154ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f0:	6a 00                	push   0x0
c00154f2:	68 51 4b 01 c0       	push   0xc0014b51
c00154f7:	6a 07                	push   0x7
c00154f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154fc:	ff d0                	call   eax
c00154fe:	83 c4 10             	add    esp,0x10
c0015501:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015504:	8b 00                	mov    eax,DWORD PTR [eax]
c0015506:	83 c0 24             	add    eax,0x24
c0015509:	8b 00                	mov    eax,DWORD PTR [eax]
c001550b:	6a 00                	push   0x0
c001550d:	68 3a 43 01 c0       	push   0xc001433a
c0015512:	6a 08                	push   0x8
c0015514:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015517:	ff d0                	call   eax
c0015519:	83 c4 10             	add    esp,0x10
c001551c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015521:	83 c0 24             	add    eax,0x24
c0015524:	8b 00                	mov    eax,DWORD PTR [eax]
c0015526:	6a 00                	push   0x0
c0015528:	68 4c 4c 01 c0       	push   0xc0014c4c
c001552d:	6a 09                	push   0x9
c001552f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015532:	ff d0                	call   eax
c0015534:	83 c4 10             	add    esp,0x10
c0015537:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553a:	8b 00                	mov    eax,DWORD PTR [eax]
c001553c:	83 c0 24             	add    eax,0x24
c001553f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015541:	6a 00                	push   0x0
c0015543:	68 4c 4c 01 c0       	push   0xc0014c4c
c0015548:	6a 0a                	push   0xa
c001554a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001554d:	ff d0                	call   eax
c001554f:	83 c4 10             	add    esp,0x10
c0015552:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015555:	8b 00                	mov    eax,DWORD PTR [eax]
c0015557:	83 c0 24             	add    eax,0x24
c001555a:	8b 00                	mov    eax,DWORD PTR [eax]
c001555c:	6a 00                	push   0x0
c001555e:	68 4c 4c 01 c0       	push   0xc0014c4c
c0015563:	6a 0b                	push   0xb
c0015565:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015568:	ff d0                	call   eax
c001556a:	83 c4 10             	add    esp,0x10
c001556d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015570:	8b 00                	mov    eax,DWORD PTR [eax]
c0015572:	83 c0 24             	add    eax,0x24
c0015575:	8b 00                	mov    eax,DWORD PTR [eax]
c0015577:	6a 00                	push   0x0
c0015579:	68 4c 4c 01 c0       	push   0xc0014c4c
c001557e:	6a 0c                	push   0xc
c0015580:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015583:	ff d0                	call   eax
c0015585:	83 c4 10             	add    esp,0x10
c0015588:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558b:	8b 00                	mov    eax,DWORD PTR [eax]
c001558d:	83 c0 24             	add    eax,0x24
c0015590:	8b 00                	mov    eax,DWORD PTR [eax]
c0015592:	6a 00                	push   0x0
c0015594:	68 c4 4b 01 c0       	push   0xc0014bc4
c0015599:	6a 0d                	push   0xd
c001559b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001559e:	ff d0                	call   eax
c00155a0:	83 c4 10             	add    esp,0x10
c00155a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a8:	83 c0 24             	add    eax,0x24
c00155ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ad:	6a 00                	push   0x0
c00155af:	68 fd 4b 01 c0       	push   0xc0014bfd
c00155b4:	6a 0e                	push   0xe
c00155b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155b9:	ff d0                	call   eax
c00155bb:	83 c4 10             	add    esp,0x10
c00155be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c3:	83 c0 24             	add    eax,0x24
c00155c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c8:	6a 00                	push   0x0
c00155ca:	68 4c 4c 01 c0       	push   0xc0014c4c
c00155cf:	6a 0f                	push   0xf
c00155d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155d4:	ff d0                	call   eax
c00155d6:	83 c4 10             	add    esp,0x10
c00155d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00155de:	83 c0 24             	add    eax,0x24
c00155e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e3:	6a 00                	push   0x0
c00155e5:	68 4c 4c 01 c0       	push   0xc0014c4c
c00155ea:	6a 10                	push   0x10
c00155ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155ef:	ff d0                	call   eax
c00155f1:	83 c4 10             	add    esp,0x10
c00155f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f9:	83 c0 24             	add    eax,0x24
c00155fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00155fe:	6a 00                	push   0x0
c0015600:	68 4c 4c 01 c0       	push   0xc0014c4c
c0015605:	6a 11                	push   0x11
c0015607:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001560a:	ff d0                	call   eax
c001560c:	83 c4 10             	add    esp,0x10
c001560f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015612:	8b 00                	mov    eax,DWORD PTR [eax]
c0015614:	83 c0 24             	add    eax,0x24
c0015617:	8b 00                	mov    eax,DWORD PTR [eax]
c0015619:	6a 00                	push   0x0
c001561b:	68 4c 4c 01 c0       	push   0xc0014c4c
c0015620:	6a 12                	push   0x12
c0015622:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015625:	ff d0                	call   eax
c0015627:	83 c4 10             	add    esp,0x10
c001562a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001562d:	8b 00                	mov    eax,DWORD PTR [eax]
c001562f:	83 c0 24             	add    eax,0x24
c0015632:	8b 00                	mov    eax,DWORD PTR [eax]
c0015634:	6a 00                	push   0x0
c0015636:	68 4c 4c 01 c0       	push   0xc0014c4c
c001563b:	6a 13                	push   0x13
c001563d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015640:	ff d0                	call   eax
c0015642:	83 c4 10             	add    esp,0x10
c0015645:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015648:	8b 00                	mov    eax,DWORD PTR [eax]
c001564a:	83 c0 24             	add    eax,0x24
c001564d:	8b 00                	mov    eax,DWORD PTR [eax]
c001564f:	6a 00                	push   0x0
c0015651:	68 4c 4c 01 c0       	push   0xc0014c4c
c0015656:	6a 14                	push   0x14
c0015658:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001565b:	ff d0                	call   eax
c001565d:	83 c4 10             	add    esp,0x10
c0015660:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015663:	8b 00                	mov    eax,DWORD PTR [eax]
c0015665:	83 c0 24             	add    eax,0x24
c0015668:	8b 00                	mov    eax,DWORD PTR [eax]
c001566a:	6a 00                	push   0x0
c001566c:	68 4c 4c 01 c0       	push   0xc0014c4c
c0015671:	6a 1e                	push   0x1e
c0015673:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015676:	ff d0                	call   eax
c0015678:	83 c4 10             	add    esp,0x10
c001567b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001567e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015680:	83 c0 24             	add    eax,0x24
c0015683:	8b 00                	mov    eax,DWORD PTR [eax]
c0015685:	6a 00                	push   0x0
c0015687:	68 05 c2 01 c0       	push   0xc001c205
c001568c:	6a 60                	push   0x60
c001568e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015691:	ff d0                	call   eax
c0015693:	83 c4 10             	add    esp,0x10
c0015696:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015699:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001569c:	c9                   	leave  
c001569d:	c3                   	ret    

c001569e <InterruptController::convertLegacyIRQNumber(int)>:
c001569e:	55                   	push   ebp
c001569f:	89 e5                	mov    ebp,esp
c00156a1:	83 ec 08             	sub    esp,0x8
c00156a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a7:	83 ec 0c             	sub    esp,0xc
c00156aa:	50                   	push   eax
c00156ab:	e8 b0 e8 ff ff       	call   c0013f60 <Device::getName()>
c00156b0:	83 c4 10             	add    esp,0x10
c00156b3:	8a 00                	mov    al,BYTE PTR [eax]
c00156b5:	3c 41                	cmp    al,0x41
c00156b7:	0f 94 c0             	sete   al
c00156ba:	84 c0                	test   al,al
c00156bc:	74 28                	je     c00156e6 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00156be:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00156c2:	7f 12                	jg     c00156d6 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00156c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00156c7:	05 80 d1 02 c0       	add    eax,0xc002d180
c00156cc:	8a 00                	mov    al,BYTE PTR [eax]
c00156ce:	0f b6 c0             	movzx  eax,al
c00156d1:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00156d4:	eb 10                	jmp    c00156e6 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00156d6:	83 ec 0c             	sub    esp,0xc
c00156d9:	68 70 b2 02 c0       	push   0xc002b270
c00156de:	e8 30 49 00 00       	call   c001a013 <Krnl::panic(char const*)>
c00156e3:	83 c4 10             	add    esp,0x10
c00156e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00156e9:	c9                   	leave  
c00156ea:	c3                   	ret    
c00156eb:	90                   	nop

c00156ec <startGUI(void*)>:
c00156ec:	55                   	push   ebp
c00156ed:	89 e5                	mov    ebp,esp
c00156ef:	53                   	push   ebx
c00156f0:	83 ec 04             	sub    esp,0x4
c00156f3:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c00156f8:	48                   	dec    eax
c00156f9:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c00156fe:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c0015703:	85 c0                	test   eax,eax
c0015705:	75 01                	jne    c0015708 <startGUI(void*)+0x1c>
c0015707:	fb                   	sti    
c0015708:	8b 1d 28 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df28
c001570e:	83 ec 08             	sub    esp,0x8
c0015711:	6a 01                	push   0x1
c0015713:	68 f0 b2 02 c0       	push   0xc002b2f0
c0015718:	e8 c3 7a 00 00       	call   c001d1e0 <Thr::loadDLL(char const*, bool)>
c001571d:	83 c4 10             	add    esp,0x10
c0015720:	83 ec 08             	sub    esp,0x8
c0015723:	53                   	push   ebx
c0015724:	50                   	push   eax
c0015725:	e8 e7 7c 00 00       	call   c001d411 <Thr::executeDLL(unsigned long, void*)>
c001572a:	83 c4 10             	add    esp,0x10
c001572d:	8b 1d 28 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df28
c0015733:	83 ec 08             	sub    esp,0x8
c0015736:	6a 01                	push   0x1
c0015738:	68 0a b3 02 c0       	push   0xc002b30a
c001573d:	e8 9e 7a 00 00       	call   c001d1e0 <Thr::loadDLL(char const*, bool)>
c0015742:	83 c4 10             	add    esp,0x10
c0015745:	83 ec 08             	sub    esp,0x8
c0015748:	53                   	push   ebx
c0015749:	50                   	push   eax
c001574a:	e8 c2 7c 00 00       	call   c001d411 <Thr::executeDLL(unsigned long, void*)>
c001574f:	83 c4 10             	add    esp,0x10
c0015752:	90                   	nop
c0015753:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015756:	c9                   	leave  
c0015757:	c3                   	ret    

c0015758 <startGUIVESA(void*)>:
c0015758:	55                   	push   ebp
c0015759:	89 e5                	mov    ebp,esp
c001575b:	53                   	push   ebx
c001575c:	83 ec 04             	sub    esp,0x4
c001575f:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c0015764:	48                   	dec    eax
c0015765:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001576a:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001576f:	85 c0                	test   eax,eax
c0015771:	75 01                	jne    c0015774 <startGUIVESA(void*)+0x1c>
c0015773:	fb                   	sti    
c0015774:	8b 1d 28 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df28
c001577a:	83 ec 08             	sub    esp,0x8
c001577d:	6a 01                	push   0x1
c001577f:	68 24 b3 02 c0       	push   0xc002b324
c0015784:	e8 57 7a 00 00       	call   c001d1e0 <Thr::loadDLL(char const*, bool)>
c0015789:	83 c4 10             	add    esp,0x10
c001578c:	83 ec 08             	sub    esp,0x8
c001578f:	53                   	push   ebx
c0015790:	50                   	push   eax
c0015791:	e8 7b 7c 00 00       	call   c001d411 <Thr::executeDLL(unsigned long, void*)>
c0015796:	83 c4 10             	add    esp,0x10
c0015799:	8b 1d 28 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df28
c001579f:	83 ec 08             	sub    esp,0x8
c00157a2:	6a 01                	push   0x1
c00157a4:	68 0a b3 02 c0       	push   0xc002b30a
c00157a9:	e8 32 7a 00 00       	call   c001d1e0 <Thr::loadDLL(char const*, bool)>
c00157ae:	83 c4 10             	add    esp,0x10
c00157b1:	83 ec 08             	sub    esp,0x8
c00157b4:	53                   	push   ebx
c00157b5:	50                   	push   eax
c00157b6:	e8 56 7c 00 00       	call   c001d411 <Thr::executeDLL(unsigned long, void*)>
c00157bb:	83 c4 10             	add    esp,0x10
c00157be:	90                   	nop
c00157bf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00157c2:	c9                   	leave  
c00157c3:	c3                   	ret    

c00157c4 <sendKeyToTerminal(unsigned char)>:
c00157c4:	55                   	push   ebp
c00157c5:	89 e5                	mov    ebp,esp
c00157c7:	83 ec 28             	sub    esp,0x28
c00157ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00157d0:	a1 e4 df 02 c0       	mov    eax,ds:0xc002dfe4
c00157d5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00157d9:	83 ec 08             	sub    esp,0x8
c00157dc:	52                   	push   edx
c00157dd:	50                   	push   eax
c00157de:	e8 57 b4 ff ff       	call   c0010c3a <VgaText::receiveKey(unsigned char)>
c00157e3:	83 c4 10             	add    esp,0x10
c00157e6:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00157ea:	0f 85 8f 00 00 00    	jne    c001587f <sendKeyToTerminal(unsigned char)+0xbb>
c00157f0:	fa                   	cli    
c00157f1:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c00157f6:	40                   	inc    eax
c00157f7:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c00157fc:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c0015801:	40                   	inc    eax
c0015802:	a3 24 f4 02 c0       	mov    ds:0xc002f424,eax
c0015807:	a1 c0 e0 02 c0       	mov    eax,ds:0xc002e0c0
c001580c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001580f:	c7 05 c0 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e0c0,0x0
c0015819:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001581d:	74 1f                	je     c001583e <sendKeyToTerminal(unsigned char)+0x7a>
c001581f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015822:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015825:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015828:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001582b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001582e:	83 ec 0c             	sub    esp,0xc
c0015831:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015834:	e8 fe 87 00 00       	call   c001e037 <unblockTask(ThreadControlBlock*)>
c0015839:	83 c4 10             	add    esp,0x10
c001583c:	eb db                	jmp    c0015819 <sendKeyToTerminal(unsigned char)+0x55>
c001583e:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c0015843:	48                   	dec    eax
c0015844:	a3 24 f4 02 c0       	mov    ds:0xc002f424,eax
c0015849:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c001584e:	85 c0                	test   eax,eax
c0015850:	75 18                	jne    c001586a <sendKeyToTerminal(unsigned char)+0xa6>
c0015852:	a1 20 f4 02 c0       	mov    eax,ds:0xc002f420
c0015857:	85 c0                	test   eax,eax
c0015859:	74 0f                	je     c001586a <sendKeyToTerminal(unsigned char)+0xa6>
c001585b:	c7 05 20 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f420,0x0
c0015865:	e8 3b 83 00 00       	call   c001dba5 <schedule()>
c001586a:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001586f:	48                   	dec    eax
c0015870:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c0015875:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001587a:	85 c0                	test   eax,eax
c001587c:	75 01                	jne    c001587f <sendKeyToTerminal(unsigned char)+0xbb>
c001587e:	fb                   	sti    
c001587f:	90                   	nop
c0015880:	c9                   	leave  
c0015881:	c3                   	ret    

c0015882 <sendKeyboardToken(KeyboardToken)>:
c0015882:	55                   	push   ebp
c0015883:	89 e5                	mov    ebp,esp
c0015885:	83 ec 18             	sub    esp,0x18
c0015888:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001588b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588e:	0f b7 c0             	movzx  eax,ax
c0015891:	83 f2 01             	xor    edx,0x1
c0015894:	88 90 e0 e0 02 c0    	mov    BYTE PTR [eax-0x3ffd1f20],dl
c001589a:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c001589f:	85 c0                	test   eax,eax
c00158a1:	74 24                	je     c00158c7 <sendKeyboardToken(KeyboardToken)+0x45>
c00158a3:	8b 0d c8 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0c8
c00158a9:	83 ec 04             	sub    esp,0x4
c00158ac:	68 e0 e0 02 c0       	push   0xc002e0e0
c00158b1:	83 ec 08             	sub    esp,0x8
c00158b4:	89 e2                	mov    edx,esp
c00158b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b9:	89 02                	mov    DWORD PTR [edx],eax
c00158bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158be:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00158c2:	ff d1                	call   ecx
c00158c4:	83 c4 10             	add    esp,0x10
c00158c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ca:	66 3d 03 02          	cmp    ax,0x203
c00158ce:	75 07                	jne    c00158d7 <sendKeyboardToken(KeyboardToken)+0x55>
c00158d0:	a0 e0 e1 02 c0       	mov    al,ds:0xc002e1e0
c00158d5:	84 c0                	test   al,al
c00158d7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00158db:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00158de:	a0 e8 e4 02 c0       	mov    al,ds:0xc002e4e8
c00158e3:	38 c2                	cmp    dl,al
c00158e5:	74 1c                	je     c0015903 <sendKeyboardToken(KeyboardToken)+0x81>
c00158e7:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00158ea:	a2 e8 e4 02 c0       	mov    ds:0xc002e4e8,al
c00158ef:	a0 e8 e4 02 c0       	mov    al,ds:0xc002e4e8
c00158f4:	0f b6 c0             	movzx  eax,al
c00158f7:	83 ec 0c             	sub    esp,0xc
c00158fa:	50                   	push   eax
c00158fb:	e8 7a a9 ff ff       	call   c001027a <setTerminalScrollLock(bool)>
c0015900:	83 c4 10             	add    esp,0x10
c0015903:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015906:	84 c0                	test   al,al
c0015908:	0f 84 ae 00 00 00    	je     c00159bc <sendKeyboardToken(KeyboardToken)+0x13a>
c001590e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015911:	66 3d 10 03          	cmp    ax,0x310
c0015915:	75 06                	jne    c001591d <sendKeyboardToken(KeyboardToken)+0x9b>
c0015917:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001591d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015920:	66 3d 11 03          	cmp    ax,0x311
c0015924:	75 06                	jne    c001592c <sendKeyboardToken(KeyboardToken)+0xaa>
c0015926:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001592c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592f:	66 3d 12 03          	cmp    ax,0x312
c0015933:	75 06                	jne    c001593b <sendKeyboardToken(KeyboardToken)+0xb9>
c0015935:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001593b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593e:	66 3d 13 03          	cmp    ax,0x313
c0015942:	75 06                	jne    c001594a <sendKeyboardToken(KeyboardToken)+0xc8>
c0015944:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001594a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594d:	66 3d 14 03          	cmp    ax,0x314
c0015951:	75 06                	jne    c0015959 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015953:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595c:	66 3d 15 03          	cmp    ax,0x315
c0015960:	75 06                	jne    c0015968 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015962:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596b:	66 3d 16 03          	cmp    ax,0x316
c001596f:	75 06                	jne    c0015977 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015971:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597a:	66 3d 17 03          	cmp    ax,0x317
c001597e:	75 06                	jne    c0015986 <sendKeyboardToken(KeyboardToken)+0x104>
c0015980:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015989:	66 3d 18 03          	cmp    ax,0x318
c001598d:	75 06                	jne    c0015995 <sendKeyboardToken(KeyboardToken)+0x113>
c001598f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015998:	66 3d 19 03          	cmp    ax,0x319
c001599c:	75 06                	jne    c00159a4 <sendKeyboardToken(KeyboardToken)+0x122>
c001599e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00159a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a7:	66 3d 1a 03          	cmp    ax,0x31a
c00159ab:	0f 85 c9 00 00 00    	jne    c0015a7a <sendKeyboardToken(KeyboardToken)+0x1f8>
c00159b1:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00159b7:	e9 be 00 00 00       	jmp    c0015a7a <sendKeyboardToken(KeyboardToken)+0x1f8>
c00159bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159bf:	66 3d 10 03          	cmp    ax,0x310
c00159c3:	75 0a                	jne    c00159cf <sendKeyboardToken(KeyboardToken)+0x14d>
c00159c5:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00159cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d2:	66 3d 11 03          	cmp    ax,0x311
c00159d6:	75 0a                	jne    c00159e2 <sendKeyboardToken(KeyboardToken)+0x160>
c00159d8:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00159de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e5:	66 3d 12 03          	cmp    ax,0x312
c00159e9:	75 0a                	jne    c00159f5 <sendKeyboardToken(KeyboardToken)+0x173>
c00159eb:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00159f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f8:	66 3d 13 03          	cmp    ax,0x313
c00159fc:	75 0a                	jne    c0015a08 <sendKeyboardToken(KeyboardToken)+0x186>
c00159fe:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015a04:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a0b:	66 3d 14 03          	cmp    ax,0x314
c0015a0f:	75 0a                	jne    c0015a1b <sendKeyboardToken(KeyboardToken)+0x199>
c0015a11:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015a17:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a1e:	66 3d 15 03          	cmp    ax,0x315
c0015a22:	75 0a                	jne    c0015a2e <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015a24:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015a2a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a31:	66 3d 16 03          	cmp    ax,0x316
c0015a35:	75 0a                	jne    c0015a41 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015a37:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015a3d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a44:	66 3d 17 03          	cmp    ax,0x317
c0015a48:	75 0a                	jne    c0015a54 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015a4a:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015a50:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a57:	66 3d 18 03          	cmp    ax,0x318
c0015a5b:	75 0a                	jne    c0015a67 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015a5d:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015a63:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6a:	66 3d 19 03          	cmp    ax,0x319
c0015a6e:	75 0a                	jne    c0015a7a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a70:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015a76:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a7d:	66 3d 00 02          	cmp    ax,0x200
c0015a81:	75 2c                	jne    c0015aaf <sendKeyboardToken(KeyboardToken)+0x22d>
c0015a83:	a0 e0 e4 02 c0       	mov    al,ds:0xc002e4e0
c0015a88:	83 f0 01             	xor    eax,0x1
c0015a8b:	84 c0                	test   al,al
c0015a8d:	74 20                	je     c0015aaf <sendKeyboardToken(KeyboardToken)+0x22d>
c0015a8f:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0015a94:	6a 01                	push   0x1
c0015a96:	6a 00                	push   0x0
c0015a98:	68 ec 56 01 c0       	push   0xc00156ec
c0015a9d:	50                   	push   eax
c0015a9e:	e8 dd 7e 00 00       	call   c001d980 <Process::createThread(void (*)(void*), void*, int)>
c0015aa3:	83 c4 10             	add    esp,0x10
c0015aa6:	c6 05 e0 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4e0,0x1
c0015aad:	eb 33                	jmp    c0015ae2 <sendKeyboardToken(KeyboardToken)+0x260>
c0015aaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab2:	66 3d 01 02          	cmp    ax,0x201
c0015ab6:	75 2a                	jne    c0015ae2 <sendKeyboardToken(KeyboardToken)+0x260>
c0015ab8:	a0 e0 e4 02 c0       	mov    al,ds:0xc002e4e0
c0015abd:	83 f0 01             	xor    eax,0x1
c0015ac0:	84 c0                	test   al,al
c0015ac2:	74 1e                	je     c0015ae2 <sendKeyboardToken(KeyboardToken)+0x260>
c0015ac4:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0015ac9:	6a 01                	push   0x1
c0015acb:	6a 00                	push   0x0
c0015acd:	68 58 57 01 c0       	push   0xc0015758
c0015ad2:	50                   	push   eax
c0015ad3:	e8 a8 7e 00 00       	call   c001d980 <Process::createThread(void (*)(void*), void*, int)>
c0015ad8:	83 c4 10             	add    esp,0x10
c0015adb:	c6 05 e0 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4e0,0x1
c0015ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae5:	66 3d 1d 03          	cmp    ax,0x31d
c0015ae9:	75 06                	jne    c0015af1 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015aeb:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af4:	66 3d 1c 03          	cmp    ax,0x31c
c0015af8:	75 06                	jne    c0015b00 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015afa:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b03:	66 3d 1b 03          	cmp    ax,0x31b
c0015b07:	75 06                	jne    c0015b0f <sendKeyboardToken(KeyboardToken)+0x28d>
c0015b09:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015b0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b12:	66 3d 1e 03          	cmp    ax,0x31e
c0015b16:	75 06                	jne    c0015b1e <sendKeyboardToken(KeyboardToken)+0x29c>
c0015b18:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015b1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b21:	66 3d 1f 03          	cmp    ax,0x31f
c0015b25:	75 06                	jne    c0015b2d <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015b27:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015b2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b30:	66 3d 1a 03          	cmp    ax,0x31a
c0015b34:	75 06                	jne    c0015b3c <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015b36:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015b3c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015b40:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b43:	83 f0 01             	xor    eax,0x1
c0015b46:	84 c0                	test   al,al
c0015b48:	74 77                	je     c0015bc1 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015b4a:	a0 e1 e1 02 c0       	mov    al,ds:0xc002e1e1
c0015b4f:	84 c0                	test   al,al
c0015b51:	74 41                	je     c0015b94 <sendKeyboardToken(KeyboardToken)+0x312>
c0015b53:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b57:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015b5b:	74 2b                	je     c0015b88 <sendKeyboardToken(KeyboardToken)+0x306>
c0015b5d:	8b 15 e4 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4e4
c0015b63:	89 d0                	mov    eax,edx
c0015b65:	c1 e0 02             	shl    eax,0x2
c0015b68:	01 d0                	add    eax,edx
c0015b6a:	01 c0                	add    eax,eax
c0015b6c:	a3 e4 e4 02 c0       	mov    ds:0xc002e4e4,eax
c0015b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b74:	0f b7 c0             	movzx  eax,ax
c0015b77:	8d 50 d0             	lea    edx,[eax-0x30]
c0015b7a:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0015b7f:	01 d0                	add    eax,edx
c0015b81:	a3 e4 e4 02 c0       	mov    ds:0xc002e4e4,eax
c0015b86:	eb 6d                	jmp    c0015bf5 <sendKeyboardToken(KeyboardToken)+0x373>
c0015b88:	c7 05 e4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4e4,0x0
c0015b92:	eb 61                	jmp    c0015bf5 <sendKeyboardToken(KeyboardToken)+0x373>
c0015b94:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0015b99:	85 c0                	test   eax,eax
c0015b9b:	74 18                	je     c0015bb5 <sendKeyboardToken(KeyboardToken)+0x333>
c0015b9d:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0015ba2:	0f b6 c0             	movzx  eax,al
c0015ba5:	83 ec 0c             	sub    esp,0xc
c0015ba8:	50                   	push   eax
c0015ba9:	e8 16 fc ff ff       	call   c00157c4 <sendKeyToTerminal(unsigned char)>
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015bb5:	c7 05 e4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4e4,0x0
c0015bbf:	eb 34                	jmp    c0015bf5 <sendKeyboardToken(KeyboardToken)+0x373>
c0015bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc4:	66 3d 01 01          	cmp    ax,0x101
c0015bc8:	75 2b                	jne    c0015bf5 <sendKeyboardToken(KeyboardToken)+0x373>
c0015bca:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0015bcf:	85 c0                	test   eax,eax
c0015bd1:	74 18                	je     c0015beb <sendKeyboardToken(KeyboardToken)+0x369>
c0015bd3:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0015bd8:	0f b6 c0             	movzx  eax,al
c0015bdb:	83 ec 0c             	sub    esp,0xc
c0015bde:	50                   	push   eax
c0015bdf:	e8 e0 fb ff ff       	call   c00157c4 <sendKeyToTerminal(unsigned char)>
c0015be4:	83 c4 10             	add    esp,0x10
c0015be7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015beb:	c7 05 e4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4e4,0x0
c0015bf5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015bf8:	83 f0 01             	xor    eax,0x1
c0015bfb:	84 c0                	test   al,al
c0015bfd:	74 4c                	je     c0015c4b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015bff:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c02:	83 f0 01             	xor    eax,0x1
c0015c05:	84 c0                	test   al,al
c0015c07:	74 42                	je     c0015c4b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c09:	a0 e0 e1 02 c0       	mov    al,ds:0xc002e1e0
c0015c0e:	83 f0 01             	xor    eax,0x1
c0015c11:	84 c0                	test   al,al
c0015c13:	74 36                	je     c0015c4b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c18:	66 83 f8 1f          	cmp    ax,0x1f
c0015c1c:	76 09                	jbe    c0015c27 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015c1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c21:	66 83 f8 7e          	cmp    ax,0x7e
c0015c25:	76 12                	jbe    c0015c39 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c2a:	66 83 f8 0a          	cmp    ax,0xa
c0015c2e:	74 09                	je     c0015c39 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c33:	66 83 f8 08          	cmp    ax,0x8
c0015c37:	75 12                	jne    c0015c4b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c3c:	0f b6 c0             	movzx  eax,al
c0015c3f:	83 ec 0c             	sub    esp,0xc
c0015c42:	50                   	push   eax
c0015c43:	e8 7c fb ff ff       	call   c00157c4 <sendKeyToTerminal(unsigned char)>
c0015c48:	83 c4 10             	add    esp,0x10
c0015c4b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015c4e:	83 f0 01             	xor    eax,0x1
c0015c51:	84 c0                	test   al,al
c0015c53:	74 4f                	je     c0015ca4 <sendKeyboardToken(KeyboardToken)+0x422>
c0015c55:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c58:	83 f0 01             	xor    eax,0x1
c0015c5b:	84 c0                	test   al,al
c0015c5d:	74 45                	je     c0015ca4 <sendKeyboardToken(KeyboardToken)+0x422>
c0015c5f:	a0 e0 e1 02 c0       	mov    al,ds:0xc002e1e0
c0015c64:	84 c0                	test   al,al
c0015c66:	74 3c                	je     c0015ca4 <sendKeyboardToken(KeyboardToken)+0x422>
c0015c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c6b:	66 83 f8 3f          	cmp    ax,0x3f
c0015c6f:	76 33                	jbe    c0015ca4 <sendKeyboardToken(KeyboardToken)+0x422>
c0015c71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c74:	66 83 f8 7f          	cmp    ax,0x7f
c0015c78:	77 2a                	ja     c0015ca4 <sendKeyboardToken(KeyboardToken)+0x422>
c0015c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c7d:	88 c2                	mov    dl,al
c0015c7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c82:	66 83 f8 5f          	cmp    ax,0x5f
c0015c86:	76 04                	jbe    c0015c8c <sendKeyboardToken(KeyboardToken)+0x40a>
c0015c88:	b0 20                	mov    al,0x20
c0015c8a:	eb 02                	jmp    c0015c8e <sendKeyboardToken(KeyboardToken)+0x40c>
c0015c8c:	b0 00                	mov    al,0x0
c0015c8e:	29 c2                	sub    edx,eax
c0015c90:	88 d0                	mov    al,dl
c0015c92:	83 e8 40             	sub    eax,0x40
c0015c95:	0f b6 c0             	movzx  eax,al
c0015c98:	83 ec 0c             	sub    esp,0xc
c0015c9b:	50                   	push   eax
c0015c9c:	e8 23 fb ff ff       	call   c00157c4 <sendKeyToTerminal(unsigned char)>
c0015ca1:	83 c4 10             	add    esp,0x10
c0015ca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca7:	66 3d 00 03          	cmp    ax,0x300
c0015cab:	75 0f                	jne    c0015cbc <sendKeyboardToken(KeyboardToken)+0x43a>
c0015cad:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cb0:	83 f0 01             	xor    eax,0x1
c0015cb3:	84 c0                	test   al,al
c0015cb5:	74 05                	je     c0015cbc <sendKeyboardToken(KeyboardToken)+0x43a>
c0015cb7:	e8 2f a9 ff ff       	call   c00105eb <doTerminalCycle()>
c0015cbc:	90                   	nop
c0015cbd:	c9                   	leave  
c0015cbe:	c3                   	ret    

c0015cbf <clearInternalKeybuffer(VgaText*)>:
c0015cbf:	55                   	push   ebp
c0015cc0:	89 e5                	mov    ebp,esp
c0015cc2:	83 ec 08             	sub    esp,0x8
c0015cc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc8:	05 98 01 00 00       	add    eax,0x198
c0015ccd:	83 ec 0c             	sub    esp,0xc
c0015cd0:	50                   	push   eax
c0015cd1:	e8 96 aa fe ff       	call   c000076c <strlen>
c0015cd6:	83 c4 10             	add    esp,0x10
c0015cd9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015cdc:	81 c2 98 01 00 00    	add    edx,0x198
c0015ce2:	83 ec 04             	sub    esp,0x4
c0015ce5:	50                   	push   eax
c0015ce6:	6a 00                	push   0x0
c0015ce8:	52                   	push   edx
c0015ce9:	e8 62 aa fe ff       	call   c0000750 <memset>
c0015cee:	83 c4 10             	add    esp,0x10
c0015cf1:	90                   	nop
c0015cf2:	c9                   	leave  
c0015cf3:	c3                   	ret    

c0015cf4 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015cf4:	55                   	push   ebp
c0015cf5:	89 e5                	mov    ebp,esp
c0015cf7:	83 ec 18             	sub    esp,0x18
c0015cfa:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c0015cff:	85 c0                	test   eax,eax
c0015d01:	74 2a                	je     c0015d2d <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015d03:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015d09:	8b 0d c8 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0c8
c0015d0f:	83 ec 04             	sub    esp,0x4
c0015d12:	68 e0 e0 02 c0       	push   0xc002e0e0
c0015d17:	83 ec 08             	sub    esp,0x8
c0015d1a:	89 e2                	mov    edx,esp
c0015d1c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015d1f:	89 02                	mov    DWORD PTR [edx],eax
c0015d21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015d24:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015d28:	ff d1                	call   ecx
c0015d2a:	83 c4 10             	add    esp,0x10
c0015d2d:	fb                   	sti    
c0015d2e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015d35:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015d39:	0f 84 a1 00 00 00    	je     c0015de0 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015d3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d42:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015d48:	84 c0                	test   al,al
c0015d4a:	75 28                	jne    c0015d74 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015d4c:	fa                   	cli    
c0015d4d:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c0015d52:	40                   	inc    eax
c0015d53:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c0015d58:	e8 48 7e 00 00       	call   c001dba5 <schedule()>
c0015d5d:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c0015d62:	48                   	dec    eax
c0015d63:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c0015d68:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c0015d6d:	85 c0                	test   eax,eax
c0015d6f:	75 ce                	jne    c0015d3f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015d71:	fb                   	sti    
c0015d72:	eb cb                	jmp    c0015d3f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015d74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d77:	8d 50 01             	lea    edx,[eax+0x1]
c0015d7a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015d7d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d80:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015d86:	88 10                	mov    BYTE PTR [eax],dl
c0015d88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d8b:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015d91:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015d94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d97:	05 98 01 00 00       	add    eax,0x198
c0015d9c:	83 ec 0c             	sub    esp,0xc
c0015d9f:	50                   	push   eax
c0015da0:	e8 c7 a9 fe ff       	call   c000076c <strlen>
c0015da5:	83 c4 10             	add    esp,0x10
c0015da8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015dab:	81 c2 98 01 00 00    	add    edx,0x198
c0015db1:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015db4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015db7:	81 c2 98 01 00 00    	add    edx,0x198
c0015dbd:	83 ec 04             	sub    esp,0x4
c0015dc0:	50                   	push   eax
c0015dc1:	51                   	push   ecx
c0015dc2:	52                   	push   edx
c0015dc3:	e8 c0 a8 fe ff       	call   c0000688 <memmove>
c0015dc8:	83 c4 10             	add    esp,0x10
c0015dcb:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015dce:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015dd1:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015dd5:	0f 85 5a ff ff ff    	jne    c0015d35 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015ddb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dde:	eb 03                	jmp    c0015de3 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015de0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015de3:	c9                   	leave  
c0015de4:	c3                   	ret    
c0015de5:	90                   	nop

c0015de6 <Keyboard::Keyboard(char const*)>:
c0015de6:	83 ec 0c             	sub    esp,0xc
c0015de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ded:	83 ec 08             	sub    esp,0x8
c0015df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015df4:	50                   	push   eax
c0015df5:	e8 6a e0 ff ff       	call   c0013e64 <Device::Device(char const*)>
c0015dfa:	83 c4 10             	add    esp,0x10
c0015dfd:	ba 48 b3 02 c0       	mov    edx,0xc002b348
c0015e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e06:	89 10                	mov    DWORD PTR [eax],edx
c0015e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e0c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015e16:	c6 05 c4 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0c4,0x1
c0015e1d:	90                   	nop
c0015e1e:	83 c4 0c             	add    esp,0xc
c0015e21:	c3                   	ret    

c0015e22 <Keyboard::~Keyboard()>:
c0015e22:	83 ec 0c             	sub    esp,0xc
c0015e25:	ba 48 b3 02 c0       	mov    edx,0xc002b348
c0015e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e2e:	89 10                	mov    DWORD PTR [eax],edx
c0015e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e34:	83 ec 0c             	sub    esp,0xc
c0015e37:	50                   	push   eax
c0015e38:	e8 f1 dc ff ff       	call   c0013b2e <Device::~Device()>
c0015e3d:	83 c4 10             	add    esp,0x10
c0015e40:	90                   	nop
c0015e41:	83 c4 0c             	add    esp,0xc
c0015e44:	c3                   	ret    
c0015e45:	90                   	nop

c0015e46 <Keyboard::~Keyboard()>:
c0015e46:	83 ec 0c             	sub    esp,0xc
c0015e49:	83 ec 0c             	sub    esp,0xc
c0015e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e50:	e8 cd ff ff ff       	call   c0015e22 <Keyboard::~Keyboard()>
c0015e55:	83 c4 10             	add    esp,0x10
c0015e58:	83 ec 08             	sub    esp,0x8
c0015e5b:	68 5c 01 00 00       	push   0x15c
c0015e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e64:	e8 e6 c8 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c0015e69:	83 c4 10             	add    esp,0x10
c0015e6c:	83 c4 0c             	add    esp,0xc
c0015e6f:	c3                   	ret    

c0015e70 <LogicalDisk::close(int, int, void*)>:
c0015e70:	83 c8 ff             	or     eax,0xffffffff
c0015e73:	c3                   	ret    

c0015e74 <LogicalDisk::~LogicalDisk()>:
c0015e74:	83 ec 0c             	sub    esp,0xc
c0015e77:	ba c0 b3 02 c0       	mov    edx,0xc002b3c0
c0015e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e80:	89 10                	mov    DWORD PTR [eax],edx
c0015e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e86:	83 ec 0c             	sub    esp,0xc
c0015e89:	50                   	push   eax
c0015e8a:	e8 9f dc ff ff       	call   c0013b2e <Device::~Device()>
c0015e8f:	83 c4 10             	add    esp,0x10
c0015e92:	90                   	nop
c0015e93:	83 c4 0c             	add    esp,0xc
c0015e96:	c3                   	ret    
c0015e97:	90                   	nop

c0015e98 <LogicalDisk::~LogicalDisk()>:
c0015e98:	83 ec 0c             	sub    esp,0xc
c0015e9b:	83 ec 0c             	sub    esp,0xc
c0015e9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ea2:	e8 cd ff ff ff       	call   c0015e74 <LogicalDisk::~LogicalDisk()>
c0015ea7:	83 c4 10             	add    esp,0x10
c0015eaa:	83 ec 08             	sub    esp,0x8
c0015ead:	68 74 01 00 00       	push   0x174
c0015eb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eb6:	e8 94 c8 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c0015ebb:	83 c4 10             	add    esp,0x10
c0015ebe:	83 c4 0c             	add    esp,0xc
c0015ec1:	c3                   	ret    

c0015ec2 <LogicalDisk::open(int, int, void*)>:
c0015ec2:	83 ec 18             	sub    esp,0x18
c0015ec5:	68 74 b3 02 c0       	push   0xc002b374
c0015eca:	e8 44 41 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0015ecf:	83 c8 ff             	or     eax,0xffffffff
c0015ed2:	83 c4 1c             	add    esp,0x1c
c0015ed5:	c3                   	ret    

c0015ed6 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015ed6:	53                   	push   ebx
c0015ed7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015edb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015edf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ee3:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015ee9:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015eef:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015ef5:	77 10                	ja     c0015f07 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015ef7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015efd:	89 d3                	mov    ebx,edx
c0015eff:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015f05:	72 05                	jb     c0015f0c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015f07:	83 c8 ff             	or     eax,0xffffffff
c0015f0a:	89 c2                	mov    edx,eax
c0015f0c:	5b                   	pop    ebx
c0015f0d:	c3                   	ret    

c0015f0e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015f0e:	56                   	push   esi
c0015f0f:	83 c8 ff             	or     eax,0xffffffff
c0015f12:	53                   	push   ebx
c0015f13:	89 c2                	mov    edx,eax
c0015f15:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015f19:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015f1d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015f21:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f27:	77 27                	ja     c0015f50 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015f29:	89 d8                	mov    eax,ebx
c0015f2b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015f31:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015f37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f3c:	89 c2                	mov    edx,eax
c0015f3e:	73 10                	jae    c0015f50 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015f40:	89 c8                	mov    eax,ecx
c0015f42:	89 da                	mov    edx,ebx
c0015f44:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015f4a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015f50:	5b                   	pop    ebx
c0015f51:	5e                   	pop    esi
c0015f52:	c3                   	ret    
c0015f53:	90                   	nop

c0015f54 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015f54:	83 ec 1c             	sub    esp,0x1c
c0015f57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015f5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015f5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015f6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015f72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f7a:	83 ec 08             	sub    esp,0x8
c0015f7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f81:	50                   	push   eax
c0015f82:	e8 dd de ff ff       	call   c0013e64 <Device::Device(char const*)>
c0015f87:	83 c4 10             	add    esp,0x10
c0015f8a:	ba c0 b3 02 c0       	mov    edx,0xc002b3c0
c0015f8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f93:	89 10                	mov    DWORD PTR [eax],edx
c0015f95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f99:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fa4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015faf:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015fb9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015fbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fc5:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015fcb:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015fd1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015fd5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015fd8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015fdc:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015fe2:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015fe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ff0:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ffa:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016004:	90                   	nop
c0016005:	83 c4 1c             	add    esp,0x1c
c0016008:	c3                   	ret    
c0016009:	90                   	nop

c001600a <LogicalDisk::assignDriveLetter()>:
c001600a:	55                   	push   ebp
c001600b:	57                   	push   edi
c001600c:	56                   	push   esi
c001600d:	53                   	push   ebx
c001600e:	83 ec 14             	sub    esp,0x14
c0016011:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016015:	8b 3d 00 e5 02 c0    	mov    edi,DWORD PTR ds:0xc002e500
c001601b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016021:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016025:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001602b:	8b 3d 04 e5 02 c0    	mov    edi,DWORD PTR ds:0xc002e504
c0016031:	3c 01                	cmp    al,0x1
c0016033:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016037:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001603b:	19 c0                	sbb    eax,eax
c001603d:	83 e0 02             	and    eax,0x2
c0016040:	83 c0 41             	add    eax,0x41
c0016043:	0f be e8             	movsx  ebp,al
c0016046:	3c 43                	cmp    al,0x43
c0016048:	75 10                	jne    c001605a <LogicalDisk::assignDriveLetter()+0x50>
c001604a:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016051:	75 5d                	jne    c00160b0 <LogicalDisk::assignDriveLetter()+0xa6>
c0016053:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016058:	75 56                	jne    c00160b0 <LogicalDisk::assignDriveLetter()+0xa6>
c001605a:	8d 75 bf             	lea    esi,[ebp-0x41]
c001605d:	ba 01 00 00 00       	mov    edx,0x1
c0016062:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016066:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001606a:	d3 e2                	shl    edx,cl
c001606c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016070:	89 d7                	mov    edi,edx
c0016072:	89 d6                	mov    esi,edx
c0016074:	c1 ff 1f             	sar    edi,0x1f
c0016077:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001607b:	21 f9                	and    ecx,edi
c001607d:	09 d1                	or     ecx,edx
c001607f:	75 2f                	jne    c00160b0 <LogicalDisk::assignDriveLetter()+0xa6>
c0016081:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016085:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016089:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001608f:	09 f2                	or     edx,esi
c0016091:	89 15 00 e5 02 c0    	mov    DWORD PTR ds:0xc002e500,edx
c0016097:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001609b:	09 fa                	or     edx,edi
c001609d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00160a1:	89 15 04 e5 02 c0    	mov    DWORD PTR ds:0xc002e504,edx
c00160a7:	89 1c bd 20 e5 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1ae0],ebx
c00160ae:	eb 08                	jmp    c00160b8 <LogicalDisk::assignDriveLetter()+0xae>
c00160b0:	45                   	inc    ebp
c00160b1:	40                   	inc    eax
c00160b2:	3c 5b                	cmp    al,0x5b
c00160b4:	75 90                	jne    c0016046 <LogicalDisk::assignDriveLetter()+0x3c>
c00160b6:	31 c0                	xor    eax,eax
c00160b8:	83 c4 14             	add    esp,0x14
c00160bb:	5b                   	pop    ebx
c00160bc:	5e                   	pop    esi
c00160bd:	5f                   	pop    edi
c00160be:	5d                   	pop    ebp
c00160bf:	c3                   	ret    

c00160c0 <LogicalDisk::mount()>:
c00160c0:	56                   	push   esi
c00160c1:	53                   	push   ebx
c00160c2:	53                   	push   ebx
c00160c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160c7:	8b 1d 94 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e094
c00160cd:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00160d7:	85 db                	test   ebx,ebx
c00160d9:	74 27                	je     c0016102 <LogicalDisk::mount()+0x42>
c00160db:	51                   	push   ecx
c00160dc:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00160e3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00160e5:	83 e8 41             	sub    eax,0x41
c00160e8:	50                   	push   eax
c00160e9:	56                   	push   esi
c00160ea:	53                   	push   ebx
c00160eb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00160ee:	83 c4 10             	add    esp,0x10
c00160f1:	84 c0                	test   al,al
c00160f3:	74 08                	je     c00160fd <LogicalDisk::mount()+0x3d>
c00160f5:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00160fb:	eb 07                	jmp    c0016104 <LogicalDisk::mount()+0x44>
c00160fd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016100:	eb d5                	jmp    c00160d7 <LogicalDisk::mount()+0x17>
c0016102:	31 c0                	xor    eax,eax
c0016104:	5a                   	pop    edx
c0016105:	5b                   	pop    ebx
c0016106:	5e                   	pop    esi
c0016107:	c3                   	ret    

c0016108 <LogicalDisk::unmount()>:
c0016108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001610c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016116:	c3                   	ret    
c0016117:	90                   	nop

c0016118 <LogicalDisk::eject()>:
c0016118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001611c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016122:	8b 10                	mov    edx,DWORD PTR [eax]
c0016124:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016128:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001612b:	90                   	nop

c001612c <LogicalDisk::unassignDriveLetter()>:
c001612c:	57                   	push   edi
c001612d:	56                   	push   esi
c001612e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016132:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016139:	84 c9                	test   cl,cl
c001613b:	75 0f                	jne    c001614c <LogicalDisk::unassignDriveLetter()+0x20>
c001613d:	c7 44 24 0c 98 b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b398
c0016145:	5e                   	pop    esi
c0016146:	5f                   	pop    edi
c0016147:	e9 c7 3e 00 00       	jmp    c001a013 <Krnl::panic(char const*)>
c001614c:	83 e9 41             	sub    ecx,0x41
c001614f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016156:	b8 01 00 00 00       	mov    eax,0x1
c001615b:	c7 04 8d 20 e5 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1ae0],0x0
c0016166:	d3 e0                	shl    eax,cl
c0016168:	89 c7                	mov    edi,eax
c001616a:	f7 d0                	not    eax
c001616c:	c1 ff 1f             	sar    edi,0x1f
c001616f:	21 05 00 e5 02 c0    	and    DWORD PTR ds:0xc002e500,eax
c0016175:	89 fe                	mov    esi,edi
c0016177:	f7 d6                	not    esi
c0016179:	21 35 04 e5 02 c0    	and    DWORD PTR ds:0xc002e504,esi
c001617f:	5e                   	pop    esi
c0016180:	5f                   	pop    edi
c0016181:	c3                   	ret    

c0016182 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016182:	57                   	push   edi
c0016183:	56                   	push   esi
c0016184:	53                   	push   ebx
c0016185:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016189:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001618d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016191:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016195:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001619b:	77 41                	ja     c00161de <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001619d:	99                   	cdq    
c001619e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00161a4:	01 c8                	add    eax,ecx
c00161a6:	11 da                	adc    edx,ebx
c00161a8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00161ae:	19 d7                	sbb    edi,edx
c00161b0:	72 33                	jb     c00161e5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00161b2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00161b8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00161be:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00161c2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00161c6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00161cc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00161d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161d6:	5b                   	pop    ebx
c00161d7:	5e                   	pop    esi
c00161d8:	5f                   	pop    edi
c00161d9:	e9 1c 0b 00 00       	jmp    c0016cfa <VCache::read(unsigned long long, int, void*)>
c00161de:	b8 05 00 00 00       	mov    eax,0x5
c00161e3:	eb 05                	jmp    c00161ea <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00161e5:	b8 07 00 00 00       	mov    eax,0x7
c00161ea:	5b                   	pop    ebx
c00161eb:	5e                   	pop    esi
c00161ec:	5f                   	pop    edi
c00161ed:	c3                   	ret    

c00161ee <LogicalDisk::write(unsigned long long, int, void*)>:
c00161ee:	57                   	push   edi
c00161ef:	56                   	push   esi
c00161f0:	53                   	push   ebx
c00161f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00161f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161f9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00161fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016201:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016207:	77 41                	ja     c001624a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016209:	99                   	cdq    
c001620a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016210:	01 c8                	add    eax,ecx
c0016212:	11 da                	adc    edx,ebx
c0016214:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001621a:	19 d7                	sbb    edi,edx
c001621c:	72 33                	jb     c0016251 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001621e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016224:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001622a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001622e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016232:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016238:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001623e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016242:	5b                   	pop    ebx
c0016243:	5e                   	pop    esi
c0016244:	5f                   	pop    edi
c0016245:	e9 86 09 00 00       	jmp    c0016bd0 <VCache::write(unsigned long long, int, void*)>
c001624a:	b8 05 00 00 00       	mov    eax,0x5
c001624f:	eb 05                	jmp    c0016256 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016251:	b8 07 00 00 00       	mov    eax,0x7
c0016256:	5b                   	pop    ebx
c0016257:	5e                   	pop    esi
c0016258:	5f                   	pop    edi
c0016259:	c3                   	ret    

c001625a <Mouse::Mouse(char const*)>:
c001625a:	83 ec 0c             	sub    esp,0xc
c001625d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016261:	83 ec 08             	sub    esp,0x8
c0016264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016268:	50                   	push   eax
c0016269:	e8 f6 db ff ff       	call   c0013e64 <Device::Device(char const*)>
c001626e:	83 c4 10             	add    esp,0x10
c0016271:	ba ec b3 02 c0       	mov    edx,0xc002b3ec
c0016276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001627a:	89 10                	mov    DWORD PTR [eax],edx
c001627c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016280:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001628a:	90                   	nop
c001628b:	83 c4 0c             	add    esp,0xc
c001628e:	c3                   	ret    
c001628f:	90                   	nop

c0016290 <Mouse::~Mouse()>:
c0016290:	83 ec 0c             	sub    esp,0xc
c0016293:	ba ec b3 02 c0       	mov    edx,0xc002b3ec
c0016298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001629c:	89 10                	mov    DWORD PTR [eax],edx
c001629e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162a2:	83 ec 0c             	sub    esp,0xc
c00162a5:	50                   	push   eax
c00162a6:	e8 83 d8 ff ff       	call   c0013b2e <Device::~Device()>
c00162ab:	83 c4 10             	add    esp,0x10
c00162ae:	90                   	nop
c00162af:	83 c4 0c             	add    esp,0xc
c00162b2:	c3                   	ret    
c00162b3:	90                   	nop

c00162b4 <Mouse::~Mouse()>:
c00162b4:	83 ec 0c             	sub    esp,0xc
c00162b7:	83 ec 0c             	sub    esp,0xc
c00162ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162be:	e8 cd ff ff ff       	call   c0016290 <Mouse::~Mouse()>
c00162c3:	83 c4 10             	add    esp,0x10
c00162c6:	83 ec 08             	sub    esp,0x8
c00162c9:	68 58 01 00 00       	push   0x158
c00162ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162d2:	e8 78 c4 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c00162d7:	83 c4 10             	add    esp,0x10
c00162da:	83 c4 0c             	add    esp,0xc
c00162dd:	c3                   	ret    

c00162de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00162de:	55                   	push   ebp
c00162df:	57                   	push   edi
c00162e0:	56                   	push   esi
c00162e1:	53                   	push   ebx
c00162e2:	81 ec 28 01 00 00    	sub    esp,0x128
c00162e8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00162ef:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00162f6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00162fd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016304:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016308:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001630c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016313:	e8 48 dc ff ff       	call   c0013f60 <Device::getName()>
c0016318:	5a                   	pop    edx
c0016319:	59                   	pop    ecx
c001631a:	50                   	push   eax
c001631b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001631f:	55                   	push   ebp
c0016320:	e8 e7 a4 fe ff       	call   c000080c <strcpy>
c0016325:	5b                   	pop    ebx
c0016326:	58                   	pop    eax
c0016327:	68 10 b4 02 c0       	push   0xc002b410
c001632c:	55                   	push   ebp
c001632d:	e8 1a a6 fe ff       	call   c000094c <strcat>
c0016332:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016339:	e8 91 94 ff ff       	call   c000f7cf <malloc>
c001633e:	83 c4 0c             	add    esp,0xc
c0016341:	89 c3                	mov    ebx,eax
c0016343:	57                   	push   edi
c0016344:	56                   	push   esi
c0016345:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016349:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001634d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016354:	55                   	push   ebp
c0016355:	50                   	push   eax
c0016356:	e8 f9 fb ff ff       	call   c0015f54 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001635b:	83 c4 14             	add    esp,0x14
c001635e:	53                   	push   ebx
c001635f:	e8 a6 fc ff ff       	call   c001600a <LogicalDisk::assignDriveLetter()>
c0016364:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016367:	e8 54 fd ff ff       	call   c00160c0 <LogicalDisk::mount()>
c001636c:	58                   	pop    eax
c001636d:	5a                   	pop    edx
c001636e:	53                   	push   ebx
c001636f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016376:	e8 e5 d8 ff ff       	call   c0013c60 <Device::addChild(Device*)>
c001637b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016381:	5b                   	pop    ebx
c0016382:	5e                   	pop    esi
c0016383:	5f                   	pop    edi
c0016384:	5d                   	pop    ebp
c0016385:	c3                   	ret    

c0016386 <createPartitionsForDisk(PhysicalDisk*)>:
c0016386:	55                   	push   ebp
c0016387:	57                   	push   edi
c0016388:	56                   	push   esi
c0016389:	53                   	push   ebx
c001638a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016390:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016397:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001639d:	3d 00 02 00 00       	cmp    eax,0x200
c00163a2:	74 27                	je     c00163cb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00163a4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00163aa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00163b0:	83 ec 10             	sub    esp,0x10
c00163b3:	0f a4 f7 0a          	shld   edi,esi,0xa
c00163b7:	99                   	cdq    
c00163b8:	c1 e6 0a             	shl    esi,0xa
c00163bb:	52                   	push   edx
c00163bc:	89 fd                	mov    ebp,edi
c00163be:	50                   	push   eax
c00163bf:	55                   	push   ebp
c00163c0:	56                   	push   esi
c00163c1:	e8 fe 06 01 00       	call   c0026ac4 <__udivdi3>
c00163c6:	e9 b1 00 00 00       	jmp    c001647c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00163cb:	83 ec 0c             	sub    esp,0xc
c00163ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163d0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00163d4:	56                   	push   esi
c00163d5:	6a 01                	push   0x1
c00163d7:	6a 00                	push   0x0
c00163d9:	6a 00                	push   0x0
c00163db:	53                   	push   ebx
c00163dc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00163df:	83 c4 20             	add    esp,0x20
c00163e2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00163ea:	75 0a                	jne    c00163f6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00163ec:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00163f4:	74 2c                	je     c0016422 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00163f6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00163fc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016402:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016408:	83 ec 10             	sub    esp,0x10
c001640b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001640f:	89 f7                	mov    edi,esi
c0016411:	c1 e0 0a             	shl    eax,0xa
c0016414:	c1 ff 1f             	sar    edi,0x1f
c0016417:	57                   	push   edi
c0016418:	56                   	push   esi
c0016419:	52                   	push   edx
c001641a:	50                   	push   eax
c001641b:	e8 a4 06 01 00       	call   c0026ac4 <__udivdi3>
c0016420:	eb 5a                	jmp    c001647c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016422:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016429:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016430:	83 e1 7f             	and    ecx,0x7f
c0016433:	83 e0 7f             	and    eax,0x7f
c0016436:	01 c1                	add    ecx,eax
c0016438:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001643f:	83 e0 7f             	and    eax,0x7f
c0016442:	01 c1                	add    ecx,eax
c0016444:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001644b:	83 e0 7f             	and    eax,0x7f
c001644e:	00 c1                	add    cl,al
c0016450:	74 41                	je     c0016493 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016452:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016458:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001645e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016464:	83 ec 10             	sub    esp,0x10
c0016467:	0f a4 c2 0a          	shld   edx,eax,0xa
c001646b:	89 f7                	mov    edi,esi
c001646d:	c1 e0 0a             	shl    eax,0xa
c0016470:	c1 ff 1f             	sar    edi,0x1f
c0016473:	57                   	push   edi
c0016474:	56                   	push   esi
c0016475:	52                   	push   edx
c0016476:	50                   	push   eax
c0016477:	e8 48 06 01 00       	call   c0026ac4 <__udivdi3>
c001647c:	83 c4 14             	add    esp,0x14
c001647f:	52                   	push   edx
c0016480:	50                   	push   eax
c0016481:	6a 00                	push   0x0
c0016483:	6a 00                	push   0x0
c0016485:	53                   	push   ebx
c0016486:	e8 53 fe ff ff       	call   c00162de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001648b:	83 c4 20             	add    esp,0x20
c001648e:	e9 79 01 00 00       	jmp    c001660c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016493:	89 f0                	mov    eax,esi
c0016495:	31 f6                	xor    esi,esi
c0016497:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001649e:	75 02                	jne    c00164a2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00164a0:	89 f1                	mov    ecx,esi
c00164a2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00164a9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00164b0:	c1 e2 08             	shl    edx,0x8
c00164b3:	c1 e7 10             	shl    edi,0x10
c00164b6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00164be:	09 fa                	or     edx,edi
c00164c0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00164c8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00164cf:	83 c0 10             	add    eax,0x10
c00164d2:	09 fa                	or     edx,edi
c00164d4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00164db:	c1 e7 18             	shl    edi,0x18
c00164de:	09 fa                	or     edx,edi
c00164e0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00164e7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00164eb:	c1 e7 10             	shl    edi,0x10
c00164ee:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00164f5:	c1 e2 08             	shl    edx,0x8
c00164f8:	09 fa                	or     edx,edi
c00164fa:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016501:	09 fa                	or     edx,edi
c0016503:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001650a:	c1 e7 18             	shl    edi,0x18
c001650d:	09 fa                	or     edx,edi
c001650f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016513:	46                   	inc    esi
c0016514:	83 fe 04             	cmp    esi,0x4
c0016517:	0f 85 7a ff ff ff    	jne    c0016497 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001651d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016521:	83 f0 01             	xor    eax,0x1
c0016524:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016528:	75 57                	jne    c0016581 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001652a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001652e:	83 f0 01             	xor    eax,0x1
c0016531:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016535:	75 4a                	jne    c0016581 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016537:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001653b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016543:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001654b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016551:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016557:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001655d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016561:	89 f7                	mov    edi,esi
c0016563:	c1 e0 0a             	shl    eax,0xa
c0016566:	c1 ff 1f             	sar    edi,0x1f
c0016569:	57                   	push   edi
c001656a:	56                   	push   esi
c001656b:	52                   	push   edx
c001656c:	50                   	push   eax
c001656d:	e8 52 05 01 00       	call   c0026ac4 <__udivdi3>
c0016572:	83 c4 10             	add    esp,0x10
c0016575:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016579:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001657d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016581:	84 c9                	test   cl,cl
c0016583:	74 53                	je     c00165d8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016585:	0f b6 c9             	movzx  ecx,cl
c0016588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001658c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016590:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016594:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016598:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001659c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00165a0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00165a4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00165a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00165ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00165b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165b8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00165bc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00165c0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00165c4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00165c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00165cc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00165d0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00165d4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00165d8:	31 ed                	xor    ebp,ebp
c00165da:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00165de:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00165e2:	89 f8                	mov    eax,edi
c00165e4:	09 f0                	or     eax,esi
c00165e6:	74 1e                	je     c0016606 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00165e8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00165ec:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00165f0:	89 d1                	mov    ecx,edx
c00165f2:	09 c1                	or     ecx,eax
c00165f4:	74 10                	je     c0016606 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00165f6:	83 ec 0c             	sub    esp,0xc
c00165f9:	57                   	push   edi
c00165fa:	56                   	push   esi
c00165fb:	52                   	push   edx
c00165fc:	50                   	push   eax
c00165fd:	53                   	push   ebx
c00165fe:	e8 db fc ff ff       	call   c00162de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016603:	83 c4 20             	add    esp,0x20
c0016606:	45                   	inc    ebp
c0016607:	83 fd 04             	cmp    ebp,0x4
c001660a:	75 ce                	jne    c00165da <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001660c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016612:	5b                   	pop    ebx
c0016613:	5e                   	pop    esi
c0016614:	5f                   	pop    edi
c0016615:	5d                   	pop    ebp
c0016616:	c3                   	ret    
c0016617:	90                   	nop

c0016618 <Serial::Serial(char const*)>:
c0016618:	83 ec 0c             	sub    esp,0xc
c001661b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001661f:	83 ec 08             	sub    esp,0x8
c0016622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016626:	50                   	push   eax
c0016627:	e8 38 d8 ff ff       	call   c0013e64 <Device::Device(char const*)>
c001662c:	83 c4 10             	add    esp,0x10
c001662f:	ba 24 b4 02 c0       	mov    edx,0xc002b424
c0016634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016638:	89 10                	mov    DWORD PTR [eax],edx
c001663a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001663e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016648:	90                   	nop
c0016649:	83 c4 0c             	add    esp,0xc
c001664c:	c3                   	ret    
c001664d:	90                   	nop

c001664e <Serial::~Serial()>:
c001664e:	83 ec 0c             	sub    esp,0xc
c0016651:	ba 24 b4 02 c0       	mov    edx,0xc002b424
c0016656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001665a:	89 10                	mov    DWORD PTR [eax],edx
c001665c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016660:	83 ec 0c             	sub    esp,0xc
c0016663:	50                   	push   eax
c0016664:	e8 c5 d4 ff ff       	call   c0013b2e <Device::~Device()>
c0016669:	83 c4 10             	add    esp,0x10
c001666c:	90                   	nop
c001666d:	83 c4 0c             	add    esp,0xc
c0016670:	c3                   	ret    
c0016671:	90                   	nop

c0016672 <Serial::~Serial()>:
c0016672:	83 ec 0c             	sub    esp,0xc
c0016675:	83 ec 0c             	sub    esp,0xc
c0016678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001667c:	e8 cd ff ff ff       	call   c001664e <Serial::~Serial()>
c0016681:	83 c4 10             	add    esp,0x10
c0016684:	83 ec 08             	sub    esp,0x8
c0016687:	68 58 01 00 00       	push   0x158
c001668c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016690:	e8 ba c0 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c0016695:	83 c4 10             	add    esp,0x10
c0016698:	83 c4 0c             	add    esp,0xc
c001669b:	c3                   	ret    

c001669c <Timer::Timer(char const*)>:
c001669c:	83 ec 0c             	sub    esp,0xc
c001669f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166a3:	83 ec 08             	sub    esp,0x8
c00166a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166aa:	50                   	push   eax
c00166ab:	e8 b4 d7 ff ff       	call   c0013e64 <Device::Device(char const*)>
c00166b0:	83 c4 10             	add    esp,0x10
c00166b3:	ba 68 b4 02 c0       	mov    edx,0xc002b468
c00166b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166bc:	89 10                	mov    DWORD PTR [eax],edx
c00166be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166c2:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00166cc:	90                   	nop
c00166cd:	83 c4 0c             	add    esp,0xc
c00166d0:	c3                   	ret    
c00166d1:	90                   	nop

c00166d2 <Timer::~Timer()>:
c00166d2:	83 ec 0c             	sub    esp,0xc
c00166d5:	ba 68 b4 02 c0       	mov    edx,0xc002b468
c00166da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166de:	89 10                	mov    DWORD PTR [eax],edx
c00166e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166e4:	83 ec 0c             	sub    esp,0xc
c00166e7:	50                   	push   eax
c00166e8:	e8 41 d4 ff ff       	call   c0013b2e <Device::~Device()>
c00166ed:	83 c4 10             	add    esp,0x10
c00166f0:	90                   	nop
c00166f1:	83 c4 0c             	add    esp,0xc
c00166f4:	c3                   	ret    
c00166f5:	90                   	nop

c00166f6 <Timer::~Timer()>:
c00166f6:	83 ec 0c             	sub    esp,0xc
c00166f9:	83 ec 0c             	sub    esp,0xc
c00166fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016700:	e8 cd ff ff ff       	call   c00166d2 <Timer::~Timer()>
c0016705:	83 c4 10             	add    esp,0x10
c0016708:	83 ec 08             	sub    esp,0x8
c001670b:	68 5c 01 00 00       	push   0x15c
c0016710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016714:	e8 36 c0 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c0016719:	83 c4 10             	add    esp,0x10
c001671c:	83 c4 0c             	add    esp,0xc
c001671f:	c3                   	ret    

c0016720 <Timer::read()>:
c0016720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016724:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001672a:	c3                   	ret    

c001672b <timerHandler(unsigned long long)>:
c001672b:	55                   	push   ebp
c001672c:	57                   	push   edi
c001672d:	56                   	push   esi
c001672e:	53                   	push   ebx
c001672f:	83 ec 0c             	sub    esp,0xc
c0016732:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016736:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001673a:	01 35 90 e5 02 c0    	add    DWORD PTR ds:0xc002e590,esi
c0016740:	11 3d 94 e5 02 c0    	adc    DWORD PTR ds:0xc002e594,edi
c0016746:	80 3d 2d df 02 c0 00 	cmp    BYTE PTR ds:0xc002df2d,0x0
c001674d:	0f 84 42 01 00 00    	je     c0016895 <timerHandler(unsigned long long)+0x16a>
c0016753:	fa                   	cli    
c0016754:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001675a:	83 ec 0c             	sub    esp,0xc
c001675d:	ff 05 24 f4 02 c0    	inc    DWORD PTR ds:0xc002f424
c0016763:	68 38 f4 02 c0       	push   0xc002f438
c0016768:	e8 b1 23 01 00       	call   c0028b1e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001676d:	83 c4 10             	add    esp,0x10
c0016770:	84 c0                	test   al,al
c0016772:	0f 85 a2 00 00 00    	jne    c001681a <timerHandler(unsigned long long)+0xef>
c0016778:	83 ec 0c             	sub    esp,0xc
c001677b:	68 38 f4 02 c0       	push   0xc002f438
c0016780:	e8 b5 23 01 00       	call   c0028b3a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016785:	83 c4 10             	add    esp,0x10
c0016788:	89 c3                	mov    ebx,eax
c001678a:	83 ec 0c             	sub    esp,0xc
c001678d:	68 38 f4 02 c0       	push   0xc002f438
c0016792:	e8 a3 23 01 00       	call   c0028b3a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016797:	c7 04 24 38 f4 02 c0 	mov    DWORD PTR [esp],0xc002f438
c001679e:	89 c5                	mov    ebp,eax
c00167a0:	e8 9d 23 01 00       	call   c0028b42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00167a5:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00167a8:	83 c4 10             	add    esp,0x10
c00167ab:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00167ae:	39 15 90 e5 02 c0    	cmp    DWORD PTR ds:0xc002e590,edx
c00167b4:	a1 94 e5 02 c0       	mov    eax,ds:0xc002e594
c00167b9:	19 c8                	sbb    eax,ecx
c00167bb:	72 21                	jb     c00167de <timerHandler(unsigned long long)+0xb3>
c00167bd:	83 ec 0c             	sub    esp,0xc
c00167c0:	55                   	push   ebp
c00167c1:	e8 71 78 00 00       	call   c001e037 <unblockTask(ThreadControlBlock*)>
c00167c6:	83 c4 10             	add    esp,0x10
c00167c9:	39 eb                	cmp    ebx,ebp
c00167cb:	75 21                	jne    c00167ee <timerHandler(unsigned long long)+0xc3>
c00167cd:	83 ec 0c             	sub    esp,0xc
c00167d0:	68 38 f4 02 c0       	push   0xc002f438
c00167d5:	e8 60 23 01 00       	call   c0028b3a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167da:	89 c3                	mov    ebx,eax
c00167dc:	eb 0d                	jmp    c00167eb <timerHandler(unsigned long long)+0xc0>
c00167de:	50                   	push   eax
c00167df:	50                   	push   eax
c00167e0:	55                   	push   ebp
c00167e1:	68 38 f4 02 c0       	push   0xc002f438
c00167e6:	e8 05 24 01 00       	call   c0028bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00167eb:	83 c4 10             	add    esp,0x10
c00167ee:	83 ec 0c             	sub    esp,0xc
c00167f1:	68 38 f4 02 c0       	push   0xc002f438
c00167f6:	e8 23 23 01 00       	call   c0028b1e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00167fb:	83 c4 10             	add    esp,0x10
c00167fe:	84 c0                	test   al,al
c0016800:	75 18                	jne    c001681a <timerHandler(unsigned long long)+0xef>
c0016802:	83 ec 0c             	sub    esp,0xc
c0016805:	68 38 f4 02 c0       	push   0xc002f438
c001680a:	e8 2b 23 01 00       	call   c0028b3a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001680f:	83 c4 10             	add    esp,0x10
c0016812:	39 d8                	cmp    eax,ebx
c0016814:	0f 85 70 ff ff ff    	jne    c001678a <timerHandler(unsigned long long)+0x5f>
c001681a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001681f:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016823:	74 3d                	je     c0016862 <timerHandler(unsigned long long)+0x137>
c0016825:	80 3d 2c df 02 c0 00 	cmp    BYTE PTR ds:0xc002df2c,0x0
c001682c:	74 34                	je     c0016862 <timerHandler(unsigned long long)+0x137>
c001682e:	fa                   	cli    
c001682f:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c0016835:	31 d2                	xor    edx,edx
c0016837:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001683c:	89 f9                	mov    ecx,edi
c001683e:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016841:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016846:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016849:	39 c6                	cmp    esi,eax
c001684b:	19 d1                	sbb    ecx,edx
c001684d:	72 05                	jb     c0016854 <timerHandler(unsigned long long)+0x129>
c001684f:	e8 51 73 00 00       	call   c001dba5 <schedule()>
c0016854:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c0016859:	48                   	dec    eax
c001685a:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001685f:	75 01                	jne    c0016862 <timerHandler(unsigned long long)+0x137>
c0016861:	fb                   	sti    
c0016862:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c0016867:	48                   	dec    eax
c0016868:	a3 24 f4 02 c0       	mov    ds:0xc002f424,eax
c001686d:	75 18                	jne    c0016887 <timerHandler(unsigned long long)+0x15c>
c001686f:	83 3d 20 f4 02 c0 00 	cmp    DWORD PTR ds:0xc002f420,0x0
c0016876:	74 0f                	je     c0016887 <timerHandler(unsigned long long)+0x15c>
c0016878:	c7 05 20 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f420,0x0
c0016882:	e8 1e 73 00 00       	call   c001dba5 <schedule()>
c0016887:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001688c:	48                   	dec    eax
c001688d:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c0016892:	75 01                	jne    c0016895 <timerHandler(unsigned long long)+0x16a>
c0016894:	fb                   	sti    
c0016895:	83 c4 0c             	add    esp,0xc
c0016898:	5b                   	pop    ebx
c0016899:	5e                   	pop    esi
c001689a:	5f                   	pop    edi
c001689b:	5d                   	pop    ebp
c001689c:	c3                   	ret    

c001689d <setupTimer(int)>:
c001689d:	57                   	push   edi
c001689e:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c00168a3:	56                   	push   esi
c00168a4:	53                   	push   ebx
c00168a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00168af:	83 ec 0c             	sub    esp,0xc
c00168b2:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00168b8:	e8 a3 d6 ff ff       	call   c0013f60 <Device::getName()>
c00168bd:	83 c4 10             	add    esp,0x10
c00168c0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00168c3:	0f 85 8d 00 00 00    	jne    c0016956 <setupTimer(int)+0xb9>
c00168c9:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c00168ce:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00168d5:	74 7f                	je     c0016956 <setupTimer(int)+0xb9>
c00168d7:	83 ec 0c             	sub    esp,0xc
c00168da:	68 5c 01 00 00       	push   0x15c
c00168df:	e8 eb 8e ff ff       	call   c000f7cf <malloc>
c00168e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00168e7:	89 c3                	mov    ebx,eax
c00168e9:	e8 a8 fd 00 00       	call   c0026696 <PIT::PIT()>
c00168ee:	59                   	pop    ecx
c00168ef:	5f                   	pop    edi
c00168f0:	53                   	push   ebx
c00168f1:	ff 35 28 df 02 c0    	push   DWORD PTR ds:0xc002df28
c00168f7:	e8 64 d3 ff ff       	call   c0013c60 <Device::addChild(Device*)>
c00168fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168fe:	6a 00                	push   0x0
c0016900:	6a 00                	push   0x0
c0016902:	56                   	push   esi
c0016903:	53                   	push   ebx
c0016904:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016907:	83 c4 14             	add    esp,0x14
c001690a:	68 60 01 00 00       	push   0x160
c001690f:	e8 bb 8e ff ff       	call   c000f7cf <malloc>
c0016914:	89 04 24             	mov    DWORD PTR [esp],eax
c0016917:	89 c7                	mov    edi,eax
c0016919:	e8 28 fc 00 00       	call   c0026546 <APICTimer::APICTimer()>
c001691e:	6a 00                	push   0x0
c0016920:	6a 00                	push   0x0
c0016922:	56                   	push   esi
c0016923:	57                   	push   edi
c0016924:	e8 1f fb 00 00       	call   c0026448 <APICTimer::open(int, int, void*)>
c0016929:	83 c4 20             	add    esp,0x20
c001692c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001692e:	6a 00                	push   0x0
c0016930:	6a 00                	push   0x0
c0016932:	6a 00                	push   0x0
c0016934:	53                   	push   ebx
c0016935:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016938:	58                   	pop    eax
c0016939:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001693e:	5a                   	pop    edx
c001693f:	57                   	push   edi
c0016940:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016946:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001694c:	e8 0f d3 ff ff       	call   c0013c60 <Device::addChild(Device*)>
c0016951:	83 c4 10             	add    esp,0x10
c0016954:	eb 33                	jmp    c0016989 <setupTimer(int)+0xec>
c0016956:	83 ec 0c             	sub    esp,0xc
c0016959:	68 5c 01 00 00       	push   0x15c
c001695e:	e8 6c 8e ff ff       	call   c000f7cf <malloc>
c0016963:	89 04 24             	mov    DWORD PTR [esp],eax
c0016966:	89 c3                	mov    ebx,eax
c0016968:	e8 29 fd 00 00       	call   c0026696 <PIT::PIT()>
c001696d:	58                   	pop    eax
c001696e:	5a                   	pop    edx
c001696f:	53                   	push   ebx
c0016970:	ff 35 28 df 02 c0    	push   DWORD PTR ds:0xc002df28
c0016976:	e8 e5 d2 ff ff       	call   c0013c60 <Device::addChild(Device*)>
c001697b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001697d:	6a 00                	push   0x0
c001697f:	6a 00                	push   0x0
c0016981:	56                   	push   esi
c0016982:	53                   	push   ebx
c0016983:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016986:	83 c4 20             	add    esp,0x20
c0016989:	89 d8                	mov    eax,ebx
c001698b:	5b                   	pop    ebx
c001698c:	5e                   	pop    esi
c001698d:	5f                   	pop    edi
c001698e:	c3                   	ret    
c001698f:	90                   	nop

c0016990 <VCache::VCache(PhysicalDisk*)>:
c0016990:	53                   	push   ebx
c0016991:	83 ec 18             	sub    esp,0x18
c0016994:	ba b8 b5 02 c0       	mov    edx,0xc002b5b8
c0016999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001699d:	89 10                	mov    DWORD PTR [eax],edx
c001699f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169a3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00169aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ae:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00169b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169b9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00169c0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00169c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169cb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00169d2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00169d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169dd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00169e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169e8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00169ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169f0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00169f7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00169fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a02:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016a06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a0a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016a0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a12:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a1a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016a21:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016a29:	83 ec 0c             	sub    esp,0xc
c0016a2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a30:	e8 9a 8d ff ff       	call   c000f7cf <malloc>
c0016a35:	83 c4 10             	add    esp,0x10
c0016a38:	89 c3                	mov    ebx,eax
c0016a3a:	83 ec 0c             	sub    esp,0xc
c0016a3d:	53                   	push   ebx
c0016a3e:	e8 2b 6f 00 00       	call   c001d96e <Mutex::Mutex()>
c0016a43:	83 c4 10             	add    esp,0x10
c0016a46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a4a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016a4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a51:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016a55:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016a58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a5c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016a63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a67:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016a6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a71:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016a74:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a78:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016a7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a84:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016a88:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016a8b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a92:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016a96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a9a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016aa0:	05 00 01 00 00       	add    eax,0x100
c0016aa5:	c1 e0 04             	shl    eax,0x4
c0016aa8:	83 ec 0c             	sub    esp,0xc
c0016aab:	50                   	push   eax
c0016aac:	e8 1e 8d ff ff       	call   c000f7cf <malloc>
c0016ab1:	83 c4 10             	add    esp,0x10
c0016ab4:	89 c2                	mov    edx,eax
c0016ab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016abd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ac1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016ac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016acc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016ad0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ad4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ada:	c1 e0 07             	shl    eax,0x7
c0016add:	83 ec 0c             	sub    esp,0xc
c0016ae0:	50                   	push   eax
c0016ae1:	e8 e9 8c ff ff       	call   c000f7cf <malloc>
c0016ae6:	83 c4 10             	add    esp,0x10
c0016ae9:	89 c2                	mov    edx,eax
c0016aeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aef:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016af2:	90                   	nop
c0016af3:	83 c4 18             	add    esp,0x18
c0016af6:	5b                   	pop    ebx
c0016af7:	c3                   	ret    

c0016af8 <VCache::invalidateReadBuffer()>:
c0016af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016afc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016b02:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b06:	c3                   	ret    
c0016b07:	90                   	nop

c0016b08 <VCache::writeWriteBuffer()>:
c0016b08:	53                   	push   ebx
c0016b09:	83 ec 0c             	sub    esp,0xc
c0016b0c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016b10:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016b13:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b16:	68 90 b4 02 c0       	push   0xc002b490
c0016b1b:	e8 07 bd ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0016b20:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b23:	5a                   	pop    edx
c0016b24:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b26:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016b29:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b2c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016b2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016b32:	50                   	push   eax
c0016b33:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b36:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016b3d:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016b44:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016b48:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016b4f:	83 c4 28             	add    esp,0x28
c0016b52:	5b                   	pop    ebx
c0016b53:	c3                   	ret    

c0016b54 <VCache::~VCache()>:
c0016b54:	83 ec 0c             	sub    esp,0xc
c0016b57:	ba b8 b5 02 c0       	mov    edx,0xc002b5b8
c0016b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b60:	89 10                	mov    DWORD PTR [eax],edx
c0016b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b66:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016b69:	84 c0                	test   al,al
c0016b6b:	74 0f                	je     c0016b7c <VCache::~VCache()+0x28>
c0016b6d:	83 ec 0c             	sub    esp,0xc
c0016b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b74:	e8 8f ff ff ff       	call   c0016b08 <VCache::writeWriteBuffer()>
c0016b79:	83 c4 10             	add    esp,0x10
c0016b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b80:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016b83:	83 ec 0c             	sub    esp,0xc
c0016b86:	50                   	push   eax
c0016b87:	e8 53 8c ff ff       	call   c000f7df <free>
c0016b8c:	83 c4 10             	add    esp,0x10
c0016b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b93:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016b96:	83 ec 0c             	sub    esp,0xc
c0016b99:	50                   	push   eax
c0016b9a:	e8 40 8c ff ff       	call   c000f7df <free>
c0016b9f:	83 c4 10             	add    esp,0x10
c0016ba2:	90                   	nop
c0016ba3:	83 c4 0c             	add    esp,0xc
c0016ba6:	c3                   	ret    
c0016ba7:	90                   	nop

c0016ba8 <VCache::~VCache()>:
c0016ba8:	83 ec 0c             	sub    esp,0xc
c0016bab:	83 ec 0c             	sub    esp,0xc
c0016bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bb2:	e8 9d ff ff ff       	call   c0016b54 <VCache::~VCache()>
c0016bb7:	83 c4 10             	add    esp,0x10
c0016bba:	83 ec 08             	sub    esp,0x8
c0016bbd:	6a 44                	push   0x44
c0016bbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bc3:	e8 87 bb ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c0016bc8:	83 c4 10             	add    esp,0x10
c0016bcb:	83 c4 0c             	add    esp,0xc
c0016bce:	c3                   	ret    
c0016bcf:	90                   	nop

c0016bd0 <VCache::write(unsigned long long, int, void*)>:
c0016bd0:	55                   	push   ebp
c0016bd1:	57                   	push   edi
c0016bd2:	56                   	push   esi
c0016bd3:	53                   	push   ebx
c0016bd4:	83 ec 18             	sub    esp,0x18
c0016bd7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016bdb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bdf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016be3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0016be7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016bea:	e8 c5 72 00 00       	call   c001deb4 <Semaphore::acquire()>
c0016bef:	c7 04 24 b4 b4 02 c0 	mov    DWORD PTR [esp],0xc002b4b4
c0016bf6:	e8 2c bc ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0016bfb:	83 c4 10             	add    esp,0x10
c0016bfe:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016c02:	74 0c                	je     c0016c10 <VCache::write(unsigned long long, int, void*)+0x40>
c0016c04:	83 ec 0c             	sub    esp,0xc
c0016c07:	53                   	push   ebx
c0016c08:	e8 eb fe ff ff       	call   c0016af8 <VCache::invalidateReadBuffer()>
c0016c0d:	83 c4 10             	add    esp,0x10
c0016c10:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016c14:	74 66                	je     c0016c7c <VCache::write(unsigned long long, int, void*)+0xac>
c0016c16:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016c19:	99                   	cdq    
c0016c1a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016c1d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016c20:	31 f0                	xor    eax,esi
c0016c22:	89 d1                	mov    ecx,edx
c0016c24:	89 ca                	mov    edx,ecx
c0016c26:	31 fa                	xor    edx,edi
c0016c28:	09 d0                	or     eax,edx
c0016c2a:	75 44                	jne    c0016c70 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016c2c:	83 fd 01             	cmp    ebp,0x1
c0016c2f:	75 3f                	jne    c0016c70 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016c31:	83 ec 0c             	sub    esp,0xc
c0016c34:	68 db b4 02 c0       	push   0xc002b4db
c0016c39:	e8 e9 bb ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0016c3e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c41:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016c44:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016c4a:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016c4e:	0f af f9             	imul   edi,ecx
c0016c51:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016c54:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c56:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016c59:	83 c4 10             	add    esp,0x10
c0016c5c:	40                   	inc    eax
c0016c5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016c60:	83 c0 80             	add    eax,0xffffff80
c0016c63:	75 75                	jne    c0016cda <VCache::write(unsigned long long, int, void*)+0x10a>
c0016c65:	83 ec 0c             	sub    esp,0xc
c0016c68:	53                   	push   ebx
c0016c69:	e8 9a fe ff ff       	call   c0016b08 <VCache::writeWriteBuffer()>
c0016c6e:	eb 41                	jmp    c0016cb1 <VCache::write(unsigned long long, int, void*)+0xe1>
c0016c70:	83 ec 0c             	sub    esp,0xc
c0016c73:	53                   	push   ebx
c0016c74:	e8 8f fe ff ff       	call   c0016b08 <VCache::writeWriteBuffer()>
c0016c79:	83 c4 10             	add    esp,0x10
c0016c7c:	83 fd 7f             	cmp    ebp,0x7f
c0016c7f:	7f 35                	jg     c0016cb6 <VCache::write(unsigned long long, int, void*)+0xe6>
c0016c81:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016c84:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016c87:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016c8a:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016c8e:	56                   	push   esi
c0016c8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016c93:	6a 01                	push   0x1
c0016c95:	68 f1 b4 02 c0       	push   0xc002b4f1
c0016c9a:	e8 88 bb ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0016c9f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ca2:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016ca5:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016cab:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016caf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cb1:	83 c4 10             	add    esp,0x10
c0016cb4:	eb 24                	jmp    c0016cda <VCache::write(unsigned long long, int, void*)+0x10a>
c0016cb6:	52                   	push   edx
c0016cb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016cbb:	55                   	push   ebp
c0016cbc:	68 12 b5 02 c0       	push   0xc002b512
c0016cc1:	e8 61 bb ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0016cc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cc9:	59                   	pop    ecx
c0016cca:	8b 10                	mov    edx,DWORD PTR [eax]
c0016ccc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016cd0:	55                   	push   ebp
c0016cd1:	57                   	push   edi
c0016cd2:	56                   	push   esi
c0016cd3:	50                   	push   eax
c0016cd4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016cd7:	83 c4 20             	add    esp,0x20
c0016cda:	83 ec 0c             	sub    esp,0xc
c0016cdd:	68 2f b5 02 c0       	push   0xc002b52f
c0016ce2:	e8 40 bb ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0016ce7:	58                   	pop    eax
c0016ce8:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ceb:	e8 30 78 00 00       	call   c001e520 <Semaphore::release()>
c0016cf0:	83 c4 1c             	add    esp,0x1c
c0016cf3:	31 c0                	xor    eax,eax
c0016cf5:	5b                   	pop    ebx
c0016cf6:	5e                   	pop    esi
c0016cf7:	5f                   	pop    edi
c0016cf8:	5d                   	pop    ebp
c0016cf9:	c3                   	ret    

c0016cfa <VCache::read(unsigned long long, int, void*)>:
c0016cfa:	55                   	push   ebp
c0016cfb:	57                   	push   edi
c0016cfc:	56                   	push   esi
c0016cfd:	53                   	push   ebx
c0016cfe:	83 ec 28             	sub    esp,0x28
c0016d01:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d05:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016d09:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d11:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016d15:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016d19:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016d1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d20:	e8 8f 71 00 00       	call   c001deb4 <Semaphore::acquire()>
c0016d25:	c7 04 24 4f b5 02 c0 	mov    DWORD PTR [esp],0xc002b54f
c0016d2c:	e8 f6 ba ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0016d31:	83 c4 10             	add    esp,0x10
c0016d34:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016d38:	74 0c                	je     c0016d46 <VCache::read(unsigned long long, int, void*)+0x4c>
c0016d3a:	83 ec 0c             	sub    esp,0xc
c0016d3d:	53                   	push   ebx
c0016d3e:	e8 c5 fd ff ff       	call   c0016b08 <VCache::writeWriteBuffer()>
c0016d43:	83 c4 10             	add    esp,0x10
c0016d46:	83 fe 01             	cmp    esi,0x1
c0016d49:	75 79                	jne    c0016dc4 <VCache::read(unsigned long long, int, void*)+0xca>
c0016d4b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d4e:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016d55:	75 6d                	jne    c0016dc4 <VCache::read(unsigned long long, int, void*)+0xca>
c0016d57:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016d5a:	89 d1                	mov    ecx,edx
c0016d5c:	f7 d9                	neg    ecx
c0016d5e:	89 cf                	mov    edi,ecx
c0016d60:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016d64:	c1 ff 1f             	sar    edi,0x1f
c0016d67:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016d6a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016d6e:	89 ce                	mov    esi,ecx
c0016d70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d74:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016d78:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016d7c:	89 cf                	mov    edi,ecx
c0016d7e:	74 0a                	je     c0016d8a <VCache::read(unsigned long long, int, void*)+0x90>
c0016d80:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016d83:	75 05                	jne    c0016d8a <VCache::read(unsigned long long, int, void*)+0x90>
c0016d85:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016d88:	74 1c                	je     c0016da6 <VCache::read(unsigned long long, int, void*)+0xac>
c0016d8a:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016d8e:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016d91:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016d94:	83 ec 0c             	sub    esp,0xc
c0016d97:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016d99:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016d9c:	52                   	push   edx
c0016d9d:	57                   	push   edi
c0016d9e:	56                   	push   esi
c0016d9f:	50                   	push   eax
c0016da0:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016da3:	83 c4 20             	add    esp,0x20
c0016da6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016da9:	89 ef                	mov    edi,ebp
c0016dab:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016db1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016db4:	8d 70 ff             	lea    esi,[eax-0x1]
c0016db7:	23 34 24             	and    esi,DWORD PTR [esp]
c0016dba:	0f af f1             	imul   esi,ecx
c0016dbd:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016dc0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016dc2:	eb 30                	jmp    c0016df4 <VCache::read(unsigned long long, int, void*)+0xfa>
c0016dc4:	83 ec 0c             	sub    esp,0xc
c0016dc7:	53                   	push   ebx
c0016dc8:	e8 2b fd ff ff       	call   c0016af8 <VCache::invalidateReadBuffer()>
c0016dcd:	83 c4 0c             	add    esp,0xc
c0016dd0:	55                   	push   ebp
c0016dd1:	56                   	push   esi
c0016dd2:	68 75 b5 02 c0       	push   0xc002b575
c0016dd7:	e8 4b ba ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0016ddc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ddf:	8b 10                	mov    edx,DWORD PTR [eax]
c0016de1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016de4:	56                   	push   esi
c0016de5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016de9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ded:	50                   	push   eax
c0016dee:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016df1:	83 c4 20             	add    esp,0x20
c0016df4:	83 ec 0c             	sub    esp,0xc
c0016df7:	68 91 b5 02 c0       	push   0xc002b591
c0016dfc:	e8 26 ba ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0016e01:	58                   	pop    eax
c0016e02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e05:	e8 16 77 00 00       	call   c001e520 <Semaphore::release()>
c0016e0a:	83 c4 2c             	add    esp,0x2c
c0016e0d:	31 c0                	xor    eax,eax
c0016e0f:	5b                   	pop    ebx
c0016e10:	5e                   	pop    esi
c0016e11:	5f                   	pop    edi
c0016e12:	5d                   	pop    ebp
c0016e13:	c3                   	ret    

c0016e14 <Video::putrect(int, int, int, int, unsigned int)>:
c0016e14:	55                   	push   ebp
c0016e15:	57                   	push   edi
c0016e16:	56                   	push   esi
c0016e17:	53                   	push   ebx
c0016e18:	83 ec 1c             	sub    esp,0x1c
c0016e1b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016e1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e23:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016e27:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e33:	01 df                	add    edi,ebx
c0016e35:	39 fb                	cmp    ebx,edi
c0016e37:	7d 1f                	jge    c0016e58 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016e39:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016e3d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016e41:	7d 12                	jge    c0016e55 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016e43:	8b 16                	mov    edx,DWORD PTR [esi]
c0016e45:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016e49:	53                   	push   ebx
c0016e4a:	55                   	push   ebp
c0016e4b:	45                   	inc    ebp
c0016e4c:	56                   	push   esi
c0016e4d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016e50:	83 c4 10             	add    esp,0x10
c0016e53:	eb e8                	jmp    c0016e3d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016e55:	43                   	inc    ebx
c0016e56:	eb dd                	jmp    c0016e35 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016e58:	83 c4 1c             	add    esp,0x1c
c0016e5b:	5b                   	pop    ebx
c0016e5c:	5e                   	pop    esi
c0016e5d:	5f                   	pop    edi
c0016e5e:	5d                   	pop    ebp
c0016e5f:	c3                   	ret    

c0016e60 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016e60:	55                   	push   ebp
c0016e61:	57                   	push   edi
c0016e62:	31 ff                	xor    edi,edi
c0016e64:	56                   	push   esi
c0016e65:	53                   	push   ebx
c0016e66:	83 ec 1c             	sub    esp,0x1c
c0016e69:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016e6d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e71:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016e78:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016e7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e81:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016e85:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e89:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016e8c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e90:	01 f9                	add    ecx,edi
c0016e92:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016e96:	7d 2f                	jge    c0016ec7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016e98:	31 f6                	xor    esi,esi
c0016e9a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016e9e:	01 f2                	add    edx,esi
c0016ea0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016ea4:	7d 1a                	jge    c0016ec0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016ea6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ea9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016eac:	46                   	inc    esi
c0016ead:	51                   	push   ecx
c0016eae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016eb2:	52                   	push   edx
c0016eb3:	55                   	push   ebp
c0016eb4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016eb7:	83 c4 10             	add    esp,0x10
c0016eba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ebe:	eb da                	jmp    c0016e9a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016ec0:	47                   	inc    edi
c0016ec1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016ec5:	eb c5                	jmp    c0016e8c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016ec7:	83 c4 1c             	add    esp,0x1c
c0016eca:	5b                   	pop    ebx
c0016ecb:	5e                   	pop    esi
c0016ecc:	5f                   	pop    edi
c0016ecd:	5d                   	pop    ebp
c0016ece:	c3                   	ret    
c0016ecf:	90                   	nop

c0016ed0 <Video::blit(unsigned int*, int, int, int, int)>:
c0016ed0:	55                   	push   ebp
c0016ed1:	57                   	push   edi
c0016ed2:	56                   	push   esi
c0016ed3:	53                   	push   ebx
c0016ed4:	83 ec 1c             	sub    esp,0x1c
c0016ed7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016edb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016edf:	85 c0                	test   eax,eax
c0016ee1:	79 02                	jns    c0016ee5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016ee3:	31 c0                	xor    eax,eax
c0016ee5:	c1 e0 02             	shl    eax,0x2
c0016ee8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016eec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ef0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ef4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016ef8:	39 d8                	cmp    eax,ebx
c0016efa:	7e 49                	jle    c0016f45 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016efc:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016f02:	7c 41                	jl     c0016f45 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f04:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016f08:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f0c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f10:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016f14:	39 f9                	cmp    ecx,edi
c0016f16:	7e 22                	jle    c0016f3a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016f18:	83 c5 04             	add    ebp,0x4
c0016f1b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016f21:	7c 14                	jl     c0016f37 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016f23:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016f25:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016f28:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f2c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f30:	56                   	push   esi
c0016f31:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016f34:	83 c4 10             	add    esp,0x10
c0016f37:	47                   	inc    edi
c0016f38:	eb d2                	jmp    c0016f0c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016f3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f3e:	43                   	inc    ebx
c0016f3f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016f43:	eb ab                	jmp    c0016ef0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016f45:	83 c4 1c             	add    esp,0x1c
c0016f48:	5b                   	pop    ebx
c0016f49:	5e                   	pop    esi
c0016f4a:	5f                   	pop    edi
c0016f4b:	5d                   	pop    ebp
c0016f4c:	c3                   	ret    
c0016f4d:	90                   	nop

c0016f4e <Video::clearScreen(unsigned int)>:
c0016f4e:	57                   	push   edi
c0016f4f:	56                   	push   esi
c0016f50:	53                   	push   ebx
c0016f51:	31 db                	xor    ebx,ebx
c0016f53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f57:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016f5d:	7e 1f                	jle    c0016f7e <Video::clearScreen(unsigned int)+0x30>
c0016f5f:	31 ff                	xor    edi,edi
c0016f61:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016f67:	7e 12                	jle    c0016f7b <Video::clearScreen(unsigned int)+0x2d>
c0016f69:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f6f:	53                   	push   ebx
c0016f70:	57                   	push   edi
c0016f71:	47                   	inc    edi
c0016f72:	56                   	push   esi
c0016f73:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f76:	83 c4 10             	add    esp,0x10
c0016f79:	eb e6                	jmp    c0016f61 <Video::clearScreen(unsigned int)+0x13>
c0016f7b:	43                   	inc    ebx
c0016f7c:	eb d9                	jmp    c0016f57 <Video::clearScreen(unsigned int)+0x9>
c0016f7e:	5b                   	pop    ebx
c0016f7f:	5e                   	pop    esi
c0016f80:	5f                   	pop    edi
c0016f81:	c3                   	ret    

c0016f82 <Video::putpixel(int, int, unsigned int)>:
c0016f82:	c7 44 24 04 c0 b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b5c0
c0016f8a:	e9 84 30 00 00       	jmp    c001a013 <Krnl::panic(char const*)>
c0016f8f:	90                   	nop

c0016f90 <Video::Video(char const*)>:
c0016f90:	83 ec 0c             	sub    esp,0xc
c0016f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f97:	83 ec 08             	sub    esp,0x8
c0016f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f9e:	50                   	push   eax
c0016f9f:	e8 c0 ce ff ff       	call   c0013e64 <Device::Device(char const*)>
c0016fa4:	83 c4 10             	add    esp,0x10
c0016fa7:	ba 30 b6 02 c0       	mov    edx,0xc002b630
c0016fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fb0:	89 10                	mov    DWORD PTR [eax],edx
c0016fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fb6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016fc0:	90                   	nop
c0016fc1:	83 c4 0c             	add    esp,0xc
c0016fc4:	c3                   	ret    
c0016fc5:	90                   	nop

c0016fc6 <Video::~Video()>:
c0016fc6:	83 ec 0c             	sub    esp,0xc
c0016fc9:	ba 30 b6 02 c0       	mov    edx,0xc002b630
c0016fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fd2:	89 10                	mov    DWORD PTR [eax],edx
c0016fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fd8:	83 ec 0c             	sub    esp,0xc
c0016fdb:	50                   	push   eax
c0016fdc:	e8 4d cb ff ff       	call   c0013b2e <Device::~Device()>
c0016fe1:	83 c4 10             	add    esp,0x10
c0016fe4:	90                   	nop
c0016fe5:	83 c4 0c             	add    esp,0xc
c0016fe8:	c3                   	ret    
c0016fe9:	90                   	nop

c0016fea <Video::~Video()>:
c0016fea:	83 ec 0c             	sub    esp,0xc
c0016fed:	83 ec 0c             	sub    esp,0xc
c0016ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ff4:	e8 cd ff ff ff       	call   c0016fc6 <Video::~Video()>
c0016ff9:	83 c4 10             	add    esp,0x10
c0016ffc:	83 ec 08             	sub    esp,0x8
c0016fff:	68 64 01 00 00       	push   0x164
c0017004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017008:	e8 42 b7 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c001700d:	83 c4 10             	add    esp,0x10
c0017010:	83 c4 0c             	add    esp,0xc
c0017013:	c3                   	ret    

c0017014 <Video::isMonochrome()>:
c0017014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017018:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001701e:	c3                   	ret    
c001701f:	90                   	nop

c0017020 <Video::getWidth()>:
c0017020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017024:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001702a:	c3                   	ret    
c001702b:	90                   	nop

c001702c <Video::getHeight()>:
c001702c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017030:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017036:	c3                   	ret    
c0017037:	90                   	nop

c0017038 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017038:	55                   	push   ebp
c0017039:	57                   	push   edi
c001703a:	56                   	push   esi
c001703b:	53                   	push   ebx
c001703c:	83 ec 2c             	sub    esp,0x2c
c001703f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017043:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017047:	83 f8 01             	cmp    eax,0x1
c001704a:	19 c9                	sbb    ecx,ecx
c001704c:	31 db                	xor    ebx,ebx
c001704e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017052:	89 cd                	mov    ebp,ecx
c0017054:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001705c:	f7 d5                	not    ebp
c001705e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017064:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017068:	01 d8                	add    eax,ebx
c001706a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001706e:	56                   	push   esi
c001706f:	e8 b8 ff ff ff       	call   c001702c <Video::getHeight()>
c0017074:	59                   	pop    ecx
c0017075:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017079:	7e 70                	jle    c00170eb <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001707b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001707f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017083:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017086:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001708a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001708e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017095:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017099:	89 f8                	mov    eax,edi
c001709b:	83 c0 20             	add    eax,0x20
c001709e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170a2:	56                   	push   esi
c00170a3:	e8 78 ff ff ff       	call   c0017020 <Video::getWidth()>
c00170a8:	5a                   	pop    edx
c00170a9:	39 c7                	cmp    edi,eax
c00170ab:	7d 34                	jge    c00170e1 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00170ad:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00170b2:	74 05                	je     c00170b9 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00170b4:	8b 06                	mov    eax,DWORD PTR [esi]
c00170b6:	55                   	push   ebp
c00170b7:	eb 0d                	jmp    c00170c6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00170b9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00170be:	74 12                	je     c00170d2 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00170c0:	8b 06                	mov    eax,DWORD PTR [esi]
c00170c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00170ca:	57                   	push   edi
c00170cb:	56                   	push   esi
c00170cc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00170cf:	83 c4 10             	add    esp,0x10
c00170d2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00170d6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00170da:	47                   	inc    edi
c00170db:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00170df:	75 c1                	jne    c00170a2 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00170e1:	43                   	inc    ebx
c00170e2:	83 fb 20             	cmp    ebx,0x20
c00170e5:	0f 85 79 ff ff ff    	jne    c0017064 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00170eb:	83 c4 2c             	add    esp,0x2c
c00170ee:	5b                   	pop    ebx
c00170ef:	5e                   	pop    esi
c00170f0:	5f                   	pop    edi
c00170f1:	5d                   	pop    ebp
c00170f2:	c3                   	ret    
c00170f3:	90                   	nop

c00170f4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00170f4:	55                   	push   ebp
c00170f5:	57                   	push   edi
c00170f6:	56                   	push   esi
c00170f7:	53                   	push   ebx
c00170f8:	83 ec 28             	sub    esp,0x28
c00170fb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00170ff:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017103:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0017107:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001710b:	c1 e6 08             	shl    esi,0x8
c001710e:	01 c6                	add    esi,eax
c0017110:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017114:	c1 e0 08             	shl    eax,0x8
c0017117:	01 d0                	add    eax,edx
c0017119:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001711d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017121:	0f af c6             	imul   eax,esi
c0017124:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001712b:	50                   	push   eax
c001712c:	e8 9e 86 ff ff       	call   c000f7cf <malloc>
c0017131:	83 c4 10             	add    esp,0x10
c0017134:	89 c7                	mov    edi,eax
c0017136:	85 c0                	test   eax,eax
c0017138:	75 10                	jne    c001714a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c001713a:	83 ec 0c             	sub    esp,0xc
c001713d:	68 e1 b5 02 c0       	push   0xc002b5e1
c0017142:	e8 cc 2e 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0017147:	83 c4 10             	add    esp,0x10
c001714a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001714d:	ba 12 00 00 00       	mov    edx,0x12
c0017152:	84 c0                	test   al,al
c0017154:	74 11                	je     c0017167 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0017156:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c001715a:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001715e:	c1 fa 03             	sar    edx,0x3
c0017161:	0f af d1             	imul   edx,ecx
c0017164:	83 c2 12             	add    edx,0x12
c0017167:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001716b:	74 04                	je     c0017171 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c001716d:	85 f6                	test   esi,esi
c001716f:	75 12                	jne    c0017183 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0017171:	83 ec 0c             	sub    esp,0xc
c0017174:	68 f1 b5 02 c0       	push   0xc002b5f1
c0017179:	e8 a9 b6 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001717e:	e9 b8 00 00 00       	jmp    c001723b <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0017183:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0017187:	80 f9 02             	cmp    cl,0x2
c001718a:	0f 85 96 00 00 00    	jne    c0017226 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0017190:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017195:	75 0e                	jne    c00171a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017197:	84 c0                	test   al,al
c0017199:	75 0a                	jne    c00171a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001719b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001719e:	83 e8 18             	sub    eax,0x18
c00171a1:	a8 f7                	test   al,0xf7
c00171a3:	74 0a                	je     c00171af <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00171a5:	83 ec 0c             	sub    esp,0xc
c00171a8:	68 06 b6 02 c0       	push   0xc002b606
c00171ad:	eb 7f                	jmp    c001722e <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00171af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00171b7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00171bf:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00171c3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00171cb:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00171cf:	75 0c                	jne    c00171dd <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00171d1:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00171d6:	c1 e0 18             	shl    eax,0x18
c00171d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00171dd:	45                   	inc    ebp
c00171de:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00171e3:	c1 e1 10             	shl    ecx,0x10
c00171e6:	89 c8                	mov    eax,ecx
c00171e8:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00171ed:	c1 e1 08             	shl    ecx,0x8
c00171f0:	09 c1                	or     ecx,eax
c00171f2:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00171f6:	09 c1                	or     ecx,eax
c00171f8:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00171fc:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0017200:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017204:	c1 f8 03             	sar    eax,0x3
c0017207:	01 c2                	add    edx,eax
c0017209:	89 e8                	mov    eax,ebp
c001720b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001720f:	39 c6                	cmp    esi,eax
c0017211:	7f b0                	jg     c00171c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0017213:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017217:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001721b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001721e:	7e 22                	jle    c0017242 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0017220:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0017224:	eb 99                	jmp    c00171bf <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017226:	50                   	push   eax
c0017227:	50                   	push   eax
c0017228:	51                   	push   ecx
c0017229:	68 14 b6 02 c0       	push   0xc002b614
c001722e:	e8 f4 b5 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0017233:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017236:	e8 a4 85 ff ff       	call   c000f7df <free>
c001723b:	83 c4 10             	add    esp,0x10
c001723e:	31 ff                	xor    edi,edi
c0017240:	eb 0f                	jmp    c0017251 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0017242:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017246:	89 30                	mov    DWORD PTR [eax],esi
c0017248:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001724c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001724f:	89 30                	mov    DWORD PTR [eax],esi
c0017251:	83 c4 1c             	add    esp,0x1c
c0017254:	89 f8                	mov    eax,edi
c0017256:	5b                   	pop    ebx
c0017257:	5e                   	pop    esi
c0017258:	5f                   	pop    edi
c0017259:	5d                   	pop    ebp
c001725a:	c3                   	ret    
c001725b:	90                   	nop

c001725c <Video::putTGA(int, int, unsigned char*, int)>:
c001725c:	55                   	push   ebp
c001725d:	57                   	push   edi
c001725e:	56                   	push   esi
c001725f:	53                   	push   ebx
c0017260:	83 ec 28             	sub    esp,0x28
c0017263:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017267:	8d 44 24 18          	lea    eax,[esp+0x18]
c001726b:	50                   	push   eax
c001726c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017270:	50                   	push   eax
c0017271:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017275:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017279:	56                   	push   esi
c001727a:	e8 75 fe ff ff       	call   c00170f4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001727f:	83 c4 20             	add    esp,0x20
c0017282:	85 c0                	test   eax,eax
c0017284:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017288:	74 35                	je     c00172bf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001728a:	89 c7                	mov    edi,eax
c001728c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017290:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017294:	39 d8                	cmp    eax,ebx
c0017296:	7e 27                	jle    c00172bf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017298:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001729c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172a0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00172a4:	39 e8                	cmp    eax,ebp
c00172a6:	7e 14                	jle    c00172bc <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00172a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00172aa:	83 c7 04             	add    edi,0x4
c00172ad:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00172b0:	53                   	push   ebx
c00172b1:	55                   	push   ebp
c00172b2:	45                   	inc    ebp
c00172b3:	56                   	push   esi
c00172b4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00172b7:	83 c4 10             	add    esp,0x10
c00172ba:	eb e0                	jmp    c001729c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00172bc:	43                   	inc    ebx
c00172bd:	eb cd                	jmp    c001728c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00172bf:	83 c4 1c             	add    esp,0x1c
c00172c2:	5b                   	pop    ebx
c00172c3:	5e                   	pop    esi
c00172c4:	5f                   	pop    edi
c00172c5:	5d                   	pop    ebp
c00172c6:	c3                   	ret    
c00172c7:	90                   	nop

c00172c8 <ACPI::close(int, int, void*)>:
c00172c8:	83 ec 1c             	sub    esp,0x1c
c00172cb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00172d3:	74 0a                	je     c00172df <ACPI::close(int, int, void*)+0x17>
c00172d5:	b8 00 00 00 00       	mov    eax,0x0
c00172da:	e9 8a 00 00 00       	jmp    c0017369 <ACPI::close(int, int, void*)+0xa1>
c00172df:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00172e4:	75 27                	jne    c001730d <ACPI::close(int, int, void*)+0x45>
c00172e6:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c00172eb:	85 c0                	test   eax,eax
c00172ed:	74 07                	je     c00172f6 <ACPI::close(int, int, void*)+0x2e>
c00172ef:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c00172f4:	ff d0                	call   eax
c00172f6:	83 ec 0c             	sub    esp,0xc
c00172f9:	68 70 b6 02 c0       	push   0xc002b670
c00172fe:	e8 10 2d 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0017303:	83 c4 10             	add    esp,0x10
c0017306:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001730b:	eb 5c                	jmp    c0017369 <ACPI::close(int, int, void*)+0xa1>
c001730d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017312:	75 50                	jne    c0017364 <ACPI::close(int, int, void*)+0x9c>
c0017314:	a1 a4 e5 02 c0       	mov    eax,ds:0xc002e5a4
c0017319:	85 c0                	test   eax,eax
c001731b:	74 07                	je     c0017324 <ACPI::close(int, int, void*)+0x5c>
c001731d:	a1 a4 e5 02 c0       	mov    eax,ds:0xc002e5a4
c0017322:	ff d0                	call   eax
c0017324:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017329:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001732e:	83 e0 02             	and    eax,0x2
c0017331:	74 1c                	je     c001734f <ACPI::close(int, int, void*)+0x87>
c0017333:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001733a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001733e:	89 c2                	mov    edx,eax
c0017340:	ec                   	in     al,dx
c0017341:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017345:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017349:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001734d:	eb da                	jmp    c0017329 <ACPI::close(int, int, void*)+0x61>
c001734f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017356:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001735b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001735f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017363:	ee                   	out    dx,al
c0017364:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017369:	83 c4 1c             	add    esp,0x1c
c001736c:	c3                   	ret    

c001736d <findRSDP()>:
c001736d:	83 ec 1c             	sub    esp,0x1c
c0017370:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0017375:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001737b:	83 e0 04             	and    eax,0x4
c001737e:	84 c0                	test   al,al
c0017380:	75 07                	jne    c0017389 <findRSDP()+0x1c>
c0017382:	b8 00 00 00 00       	mov    eax,0x0
c0017387:	eb 6a                	jmp    c00173f3 <findRSDP()+0x86>
c0017389:	a1 74 df 02 c0       	mov    eax,ds:0xc002df74
c001738e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017393:	7f 1b                	jg     c00173b0 <findRSDP()+0x43>
c0017395:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001739a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00173a0:	83 e2 fb             	and    edx,0xfffffffb
c00173a3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00173a9:	b8 00 00 00 00       	mov    eax,0x0
c00173ae:	eb 43                	jmp    c00173f3 <findRSDP()+0x86>
c00173b0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00173b8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00173c0:	77 2c                	ja     c00173ee <findRSDP()+0x81>
c00173c2:	83 ec 04             	sub    esp,0x4
c00173c5:	6a 08                	push   0x8
c00173c7:	68 0b b7 02 c0       	push   0xc002b70b
c00173cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173d0:	e8 77 92 fe ff       	call   c000064c <memcmp>
c00173d5:	83 c4 10             	add    esp,0x10
c00173d8:	85 c0                	test   eax,eax
c00173da:	0f 94 c0             	sete   al
c00173dd:	84 c0                	test   al,al
c00173df:	74 06                	je     c00173e7 <findRSDP()+0x7a>
c00173e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173e5:	eb 0c                	jmp    c00173f3 <findRSDP()+0x86>
c00173e7:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00173ec:	eb ca                	jmp    c00173b8 <findRSDP()+0x4b>
c00173ee:	b8 00 00 00 00       	mov    eax,0x0
c00173f3:	83 c4 1c             	add    esp,0x1c
c00173f6:	c3                   	ret    

c00173f7 <loadACPITables(unsigned char*)>:
c00173f7:	57                   	push   edi
c00173f8:	56                   	push   esi
c00173f9:	53                   	push   ebx
c00173fa:	83 ec 60             	sub    esp,0x60
c00173fd:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0017402:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017408:	83 e0 04             	and    eax,0x4
c001740b:	84 c0                	test   al,al
c001740d:	0f 84 33 02 00 00    	je     c0017646 <loadACPITables(unsigned char*)+0x24f>
c0017413:	a0 c0 e7 02 c0       	mov    al,ds:0xc002e7c0
c0017418:	84 c0                	test   al,al
c001741a:	74 75                	je     c0017491 <loadACPITables(unsigned char*)+0x9a>
c001741c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017420:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017424:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017428:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001742b:	83 e8 24             	sub    eax,0x24
c001742e:	c1 e8 03             	shr    eax,0x3
c0017431:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017435:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001743d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017441:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017445:	0f 8d b2 00 00 00    	jge    c00174fd <loadACPITables(unsigned char*)+0x106>
c001744b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001744f:	83 c0 24             	add    eax,0x24
c0017452:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017456:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001745a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001745e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017462:	c1 e0 03             	shl    eax,0x3
c0017465:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017469:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001746d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017470:	8b 00                	mov    eax,DWORD PTR [eax]
c0017472:	89 c1                	mov    ecx,eax
c0017474:	a1 ac e5 02 c0       	mov    eax,ds:0xc002e5ac
c0017479:	8d 50 01             	lea    edx,[eax+0x1]
c001747c:	89 15 ac e5 02 c0    	mov    DWORD PTR ds:0xc002e5ac,edx
c0017482:	89 ca                	mov    edx,ecx
c0017484:	89 14 c5 c4 e5 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1a3c],edx
c001748b:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001748f:	eb ac                	jmp    c001743d <loadACPITables(unsigned char*)+0x46>
c0017491:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017495:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017499:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001749d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174a0:	83 e8 24             	sub    eax,0x24
c00174a3:	c1 e8 02             	shr    eax,0x2
c00174a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00174aa:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00174b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00174b6:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00174ba:	7d 41                	jge    c00174fd <loadACPITables(unsigned char*)+0x106>
c00174bc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174c0:	83 c0 24             	add    eax,0x24
c00174c3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00174c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00174cb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00174cf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00174d3:	c1 e0 02             	shl    eax,0x2
c00174d6:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00174da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00174de:	8b 08                	mov    ecx,DWORD PTR [eax]
c00174e0:	a1 ac e5 02 c0       	mov    eax,ds:0xc002e5ac
c00174e5:	8d 50 01             	lea    edx,[eax+0x1]
c00174e8:	89 15 ac e5 02 c0    	mov    DWORD PTR ds:0xc002e5ac,edx
c00174ee:	89 ca                	mov    edx,ecx
c00174f0:	89 14 c5 c4 e5 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1a3c],edx
c00174f7:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00174fb:	eb b5                	jmp    c00174b2 <loadACPITables(unsigned char*)+0xbb>
c00174fd:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017505:	a1 ac e5 02 c0       	mov    eax,ds:0xc002e5ac
c001750a:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001750e:	0f 8d 33 01 00 00    	jge    c0017647 <loadACPITables(unsigned char*)+0x250>
c0017514:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017518:	8b 04 c5 c4 e5 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd1a3c]
c001751f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017523:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017527:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001752b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001752f:	25 ff 0f 00 00       	and    eax,0xfff
c0017534:	89 c6                	mov    esi,eax
c0017536:	8b 1d 90 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e090
c001753c:	83 ec 0c             	sub    esp,0xc
c001753f:	6a 01                	push   0x1
c0017541:	e8 0f 9f ff ff       	call   c0011455 <Virt::allocateKernelVirtualPages(int)>
c0017546:	83 c4 10             	add    esp,0x10
c0017549:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001754d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017553:	83 ec 0c             	sub    esp,0xc
c0017556:	6a 01                	push   0x1
c0017558:	6a 01                	push   0x1
c001755a:	50                   	push   eax
c001755b:	52                   	push   edx
c001755c:	53                   	push   ebx
c001755d:	e8 90 a8 ff ff       	call   c0011df2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017562:	83 c4 20             	add    esp,0x20
c0017565:	09 f0                	or     eax,esi
c0017567:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001756b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001756f:	c1 e0 03             	shl    eax,0x3
c0017572:	05 c0 e5 02 c0       	add    eax,0xc002e5c0
c0017577:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001757b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001757f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017583:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001758b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001758f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017593:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017597:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001759b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001759f:	89 c6                	mov    esi,eax
c00175a1:	89 d7                	mov    edi,edx
c00175a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00175a5:	89 c8                	mov    eax,ecx
c00175a7:	89 fa                	mov    edx,edi
c00175a9:	89 f3                	mov    ebx,esi
c00175ab:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00175af:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00175b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00175b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00175be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00175c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175c6:	05 00 10 00 00       	add    eax,0x1000
c00175cb:	c1 e8 0c             	shr    eax,0xc
c00175ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00175d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00175da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175de:	25 ff 0f 00 00       	and    eax,0xfff
c00175e3:	89 c6                	mov    esi,eax
c00175e5:	8b 1d 90 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e090
c00175eb:	83 ec 0c             	sub    esp,0xc
c00175ee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00175f2:	e8 5e 9e ff ff       	call   c0011455 <Virt::allocateKernelVirtualPages(int)>
c00175f7:	83 c4 10             	add    esp,0x10
c00175fa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00175fe:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017604:	83 ec 0c             	sub    esp,0xc
c0017607:	6a 01                	push   0x1
c0017609:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001760d:	50                   	push   eax
c001760e:	52                   	push   edx
c001760f:	53                   	push   ebx
c0017610:	e8 dd a7 ff ff       	call   c0011df2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017615:	83 c4 20             	add    esp,0x20
c0017618:	09 f0                	or     eax,esi
c001761a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001761e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017622:	83 ec 0c             	sub    esp,0xc
c0017625:	50                   	push   eax
c0017626:	e8 5a a1 ff ff       	call   c0011785 <Virt::freeKernelVirtualPages(unsigned long)>
c001762b:	83 c4 10             	add    esp,0x10
c001762e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017632:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017636:	89 14 c5 c4 e5 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1a3c],edx
c001763d:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017641:	e9 bf fe ff ff       	jmp    c0017505 <loadACPITables(unsigned char*)+0x10e>
c0017646:	90                   	nop
c0017647:	83 c4 60             	add    esp,0x60
c001764a:	5b                   	pop    ebx
c001764b:	5e                   	pop    esi
c001764c:	5f                   	pop    edi
c001764d:	c3                   	ret    

c001764e <findRSDT(unsigned char*)>:
c001764e:	57                   	push   edi
c001764f:	56                   	push   esi
c0017650:	53                   	push   ebx
c0017651:	83 ec 50             	sub    esp,0x50
c0017654:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0017659:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001765f:	83 e0 04             	and    eax,0x4
c0017662:	84 c0                	test   al,al
c0017664:	75 0a                	jne    c0017670 <findRSDT(unsigned char*)+0x22>
c0017666:	b8 00 00 00 00       	mov    eax,0x0
c001766b:	e9 21 01 00 00       	jmp    c0017791 <findRSDT(unsigned char*)+0x143>
c0017670:	89 e0                	mov    eax,esp
c0017672:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017676:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001767a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001767e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017686:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001768a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001768e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017692:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017696:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001769a:	89 c6                	mov    esi,eax
c001769c:	89 d7                	mov    edi,edx
c001769e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00176a0:	89 c8                	mov    eax,ecx
c00176a2:	89 fa                	mov    edx,edi
c00176a4:	89 f3                	mov    ebx,esi
c00176a6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00176aa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00176ae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00176b2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00176b6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00176ba:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00176c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00176c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176ca:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00176ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00176d6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00176da:	25 ff 0f 00 00       	and    eax,0xfff
c00176df:	89 c6                	mov    esi,eax
c00176e1:	8b 1d 90 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e090
c00176e7:	83 ec 0c             	sub    esp,0xc
c00176ea:	6a 02                	push   0x2
c00176ec:	e8 64 9d ff ff       	call   c0011455 <Virt::allocateKernelVirtualPages(int)>
c00176f1:	83 c4 10             	add    esp,0x10
c00176f4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00176f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176fe:	83 ec 0c             	sub    esp,0xc
c0017701:	6a 01                	push   0x1
c0017703:	6a 02                	push   0x2
c0017705:	50                   	push   eax
c0017706:	52                   	push   edx
c0017707:	53                   	push   ebx
c0017708:	e8 e5 a6 ff ff       	call   c0011df2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001770d:	83 c4 20             	add    esp,0x20
c0017710:	09 f0                	or     eax,esi
c0017712:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017716:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001771a:	25 ff 0f 00 00       	and    eax,0xfff
c001771f:	89 c6                	mov    esi,eax
c0017721:	8b 1d 90 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e090
c0017727:	83 ec 0c             	sub    esp,0xc
c001772a:	6a 02                	push   0x2
c001772c:	e8 24 9d ff ff       	call   c0011455 <Virt::allocateKernelVirtualPages(int)>
c0017731:	83 c4 10             	add    esp,0x10
c0017734:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017738:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001773e:	83 ec 0c             	sub    esp,0xc
c0017741:	6a 01                	push   0x1
c0017743:	6a 02                	push   0x2
c0017745:	50                   	push   eax
c0017746:	52                   	push   edx
c0017747:	53                   	push   ebx
c0017748:	e8 a5 a6 ff ff       	call   c0011df2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001774d:	83 c4 20             	add    esp,0x20
c0017750:	09 f0                	or     eax,esi
c0017752:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017756:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001775b:	75 11                	jne    c001776e <findRSDT(unsigned char*)+0x120>
c001775d:	c6 05 c0 e7 02 c0 00 	mov    BYTE PTR ds:0xc002e7c0,0x0
c0017764:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017768:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001776c:	eb 1f                	jmp    c001778d <findRSDT(unsigned char*)+0x13f>
c001776e:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017773:	75 11                	jne    c0017786 <findRSDT(unsigned char*)+0x138>
c0017775:	c6 05 c0 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7c0,0x1
c001777c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017780:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017784:	eb 07                	jmp    c001778d <findRSDT(unsigned char*)+0x13f>
c0017786:	b8 00 00 00 00       	mov    eax,0x0
c001778b:	eb 04                	jmp    c0017791 <findRSDT(unsigned char*)+0x143>
c001778d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017791:	83 c4 50             	add    esp,0x50
c0017794:	5b                   	pop    ebx
c0017795:	5e                   	pop    esi
c0017796:	5f                   	pop    edi
c0017797:	c3                   	ret    

c0017798 <findDataTable(unsigned char*, char*)>:
c0017798:	83 ec 1c             	sub    esp,0x1c
c001779b:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c00177a0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00177a6:	83 e0 04             	and    eax,0x4
c00177a9:	84 c0                	test   al,al
c00177ab:	75 07                	jne    c00177b4 <findDataTable(unsigned char*, char*)+0x1c>
c00177ad:	b8 00 00 00 00       	mov    eax,0x0
c00177b2:	eb 52                	jmp    c0017806 <findDataTable(unsigned char*, char*)+0x6e>
c00177b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177bc:	a1 ac e5 02 c0       	mov    eax,ds:0xc002e5ac
c00177c1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00177c5:	7d 3a                	jge    c0017801 <findDataTable(unsigned char*, char*)+0x69>
c00177c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177cb:	c1 e0 03             	shl    eax,0x3
c00177ce:	05 c0 e5 02 c0       	add    eax,0xc002e5c0
c00177d3:	83 ec 04             	sub    esp,0x4
c00177d6:	6a 04                	push   0x4
c00177d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177dc:	50                   	push   eax
c00177dd:	e8 6a 8e fe ff       	call   c000064c <memcmp>
c00177e2:	83 c4 10             	add    esp,0x10
c00177e5:	85 c0                	test   eax,eax
c00177e7:	0f 94 c0             	sete   al
c00177ea:	84 c0                	test   al,al
c00177ec:	74 0d                	je     c00177fb <findDataTable(unsigned char*, char*)+0x63>
c00177ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177f2:	8b 04 c5 c4 e5 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd1a3c]
c00177f9:	eb 0b                	jmp    c0017806 <findDataTable(unsigned char*, char*)+0x6e>
c00177fb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00177ff:	eb bb                	jmp    c00177bc <findDataTable(unsigned char*, char*)+0x24>
c0017801:	b8 00 00 00 00       	mov    eax,0x0
c0017806:	83 c4 1c             	add    esp,0x1c
c0017809:	c3                   	ret    

c001780a <scanMADT()>:
c001780a:	53                   	push   ebx
c001780b:	83 ec 38             	sub    esp,0x38
c001780e:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0017813:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017819:	83 e0 04             	and    eax,0x4
c001781c:	84 c0                	test   al,al
c001781e:	0f 84 4a 04 00 00    	je     c0017c6e <scanMADT()+0x464>
c0017824:	e8 44 fb ff ff       	call   c001736d <findRSDP()>
c0017829:	a3 cc e7 02 c0       	mov    ds:0xc002e7cc,eax
c001782e:	a1 cc e7 02 c0       	mov    eax,ds:0xc002e7cc
c0017833:	85 c0                	test   eax,eax
c0017835:	75 19                	jne    c0017850 <scanMADT()+0x46>
c0017837:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001783c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017842:	83 e2 fb             	and    edx,0xfffffffb
c0017845:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001784b:	e9 22 04 00 00       	jmp    c0017c72 <scanMADT()+0x468>
c0017850:	a1 cc e7 02 c0       	mov    eax,ds:0xc002e7cc
c0017855:	83 ec 0c             	sub    esp,0xc
c0017858:	50                   	push   eax
c0017859:	e8 f0 fd ff ff       	call   c001764e <findRSDT(unsigned char*)>
c001785e:	83 c4 10             	add    esp,0x10
c0017861:	a3 c8 e7 02 c0       	mov    ds:0xc002e7c8,eax
c0017866:	a1 c8 e7 02 c0       	mov    eax,ds:0xc002e7c8
c001786b:	85 c0                	test   eax,eax
c001786d:	75 19                	jne    c0017888 <scanMADT()+0x7e>
c001786f:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0017874:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001787a:	83 e2 fb             	and    edx,0xfffffffb
c001787d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017883:	e9 ea 03 00 00       	jmp    c0017c72 <scanMADT()+0x468>
c0017888:	a1 c8 e7 02 c0       	mov    eax,ds:0xc002e7c8
c001788d:	83 ec 0c             	sub    esp,0xc
c0017890:	50                   	push   eax
c0017891:	e8 61 fb ff ff       	call   c00173f7 <loadACPITables(unsigned char*)>
c0017896:	83 c4 10             	add    esp,0x10
c0017899:	a1 c8 e7 02 c0       	mov    eax,ds:0xc002e7c8
c001789e:	83 ec 08             	sub    esp,0x8
c00178a1:	68 14 b7 02 c0       	push   0xc002b714
c00178a6:	50                   	push   eax
c00178a7:	e8 ec fe ff ff       	call   c0017798 <findDataTable(unsigned char*, char*)>
c00178ac:	83 c4 10             	add    esp,0x10
c00178af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00178b3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00178b8:	75 19                	jne    c00178d3 <scanMADT()+0xc9>
c00178ba:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c00178bf:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00178c5:	83 e2 fe             	and    edx,0xfffffffe
c00178c8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00178ce:	e9 9f 03 00 00       	jmp    c0017c72 <scanMADT()+0x468>
c00178d3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00178db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178e2:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00178e6:	0f 87 86 03 00 00    	ja     c0017c72 <scanMADT()+0x468>
c00178ec:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00178f4:	0f 87 78 03 00 00    	ja     c0017c72 <scanMADT()+0x468>
c00178fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178fe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017902:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017906:	8d 50 01             	lea    edx,[eax+0x1]
c0017909:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001790d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017911:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017915:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017919:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001791d:	8d 50 01             	lea    edx,[eax+0x1]
c0017920:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017924:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017928:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001792c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017930:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017935:	0f 86 36 03 00 00    	jbe    c0017c71 <scanMADT()+0x467>
c001793b:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017940:	75 57                	jne    c0017999 <scanMADT()+0x18f>
c0017942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017946:	8d 50 01             	lea    edx,[eax+0x1]
c0017949:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001794d:	8a 15 c0 e9 02 c0    	mov    dl,BYTE PTR ds:0xc002e9c0
c0017953:	0f b6 d2             	movzx  edx,dl
c0017956:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001795a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001795e:	88 82 00 ea 02 c0    	mov    BYTE PTR [edx-0x3ffd1600],al
c0017964:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017968:	8d 50 01             	lea    edx,[eax+0x1]
c001796b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001796f:	8a 15 c0 e9 02 c0    	mov    dl,BYTE PTR ds:0xc002e9c0
c0017975:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017978:	88 0d c0 e9 02 c0    	mov    BYTE PTR ds:0xc002e9c0,cl
c001797e:	0f b6 d2             	movzx  edx,dl
c0017981:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017985:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017989:	88 82 e0 e9 02 c0    	mov    BYTE PTR [edx-0x3ffd1620],al
c001798f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017994:	e9 c1 02 00 00       	jmp    c0017c5a <scanMADT()+0x450>
c0017999:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001799e:	0f 85 14 01 00 00    	jne    c0017ab8 <scanMADT()+0x2ae>
c00179a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179a8:	8d 50 01             	lea    edx,[eax+0x1]
c00179ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179af:	8a 15 80 e8 02 c0    	mov    dl,BYTE PTR ds:0xc002e880
c00179b5:	0f b6 d2             	movzx  edx,dl
c00179b8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00179bc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00179c0:	88 82 a0 e8 02 c0    	mov    BYTE PTR [edx-0x3ffd1760],al
c00179c6:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00179ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179d2:	01 d0                	add    eax,edx
c00179d4:	83 c0 2c             	add    eax,0x2c
c00179d7:	8a 00                	mov    al,BYTE PTR [eax]
c00179d9:	0f b6 d0             	movzx  edx,al
c00179dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179e0:	8d 48 01             	lea    ecx,[eax+0x1]
c00179e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179e7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00179eb:	0f b6 c0             	movzx  eax,al
c00179ee:	c1 e0 08             	shl    eax,0x8
c00179f1:	89 d1                	mov    ecx,edx
c00179f3:	09 c1                	or     ecx,eax
c00179f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179f9:	8d 50 02             	lea    edx,[eax+0x2]
c00179fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a00:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a04:	0f b6 c0             	movzx  eax,al
c0017a07:	c1 e0 10             	shl    eax,0x10
c0017a0a:	09 c1                	or     ecx,eax
c0017a0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a10:	8d 50 03             	lea    edx,[eax+0x3]
c0017a13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a17:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a1b:	0f b6 c0             	movzx  eax,al
c0017a1e:	c1 e0 18             	shl    eax,0x18
c0017a21:	09 c1                	or     ecx,eax
c0017a23:	89 ca                	mov    edx,ecx
c0017a25:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c0017a2a:	0f b6 c0             	movzx  eax,al
c0017a2d:	89 14 85 c0 e8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1740],edx
c0017a34:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a3d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a41:	01 d0                	add    eax,edx
c0017a43:	83 c0 2c             	add    eax,0x2c
c0017a46:	8a 00                	mov    al,BYTE PTR [eax]
c0017a48:	0f b6 d0             	movzx  edx,al
c0017a4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a4f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a56:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a5a:	0f b6 c0             	movzx  eax,al
c0017a5d:	c1 e0 08             	shl    eax,0x8
c0017a60:	89 d1                	mov    ecx,edx
c0017a62:	09 c1                	or     ecx,eax
c0017a64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a68:	8d 50 02             	lea    edx,[eax+0x2]
c0017a6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a6f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a73:	0f b6 c0             	movzx  eax,al
c0017a76:	c1 e0 10             	shl    eax,0x10
c0017a79:	09 c1                	or     ecx,eax
c0017a7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a7f:	8d 50 03             	lea    edx,[eax+0x3]
c0017a82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a86:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a8a:	0f b6 c0             	movzx  eax,al
c0017a8d:	c1 e0 18             	shl    eax,0x18
c0017a90:	09 c1                	or     ecx,eax
c0017a92:	89 ca                	mov    edx,ecx
c0017a94:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c0017a99:	0f b6 c0             	movzx  eax,al
c0017a9c:	89 14 85 40 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd16c0],edx
c0017aa3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017aa8:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c0017aad:	40                   	inc    eax
c0017aae:	a2 80 e8 02 c0       	mov    ds:0xc002e880,al
c0017ab3:	e9 a2 01 00 00       	jmp    c0017c5a <scanMADT()+0x450>
c0017ab8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017abd:	0f 85 e9 00 00 00    	jne    c0017bac <scanMADT()+0x3a2>
c0017ac3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ac7:	8d 50 01             	lea    edx,[eax+0x1]
c0017aca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ace:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ad2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ad6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017ada:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ade:	8d 50 01             	lea    edx,[eax+0x1]
c0017ae1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ae5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ae9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017aed:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017af1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017af5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017af9:	01 d0                	add    eax,edx
c0017afb:	83 c0 2c             	add    eax,0x2c
c0017afe:	8a 00                	mov    al,BYTE PTR [eax]
c0017b00:	0f b6 d0             	movzx  edx,al
c0017b03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b07:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b0e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b12:	0f b6 c0             	movzx  eax,al
c0017b15:	c1 e0 08             	shl    eax,0x8
c0017b18:	89 d1                	mov    ecx,edx
c0017b1a:	09 c1                	or     ecx,eax
c0017b1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b20:	8d 50 02             	lea    edx,[eax+0x2]
c0017b23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b27:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b2b:	0f b6 c0             	movzx  eax,al
c0017b2e:	c1 e0 10             	shl    eax,0x10
c0017b31:	09 c1                	or     ecx,eax
c0017b33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b37:	8d 50 03             	lea    edx,[eax+0x3]
c0017b3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b3e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b42:	0f b6 c0             	movzx  eax,al
c0017b45:	c1 e0 18             	shl    eax,0x18
c0017b48:	09 c8                	or     eax,ecx
c0017b4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b4e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b53:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b5b:	01 d0                	add    eax,edx
c0017b5d:	83 c0 2c             	add    eax,0x2c
c0017b60:	8a 00                	mov    al,BYTE PTR [eax]
c0017b62:	0f b6 c0             	movzx  eax,al
c0017b65:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017b69:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017b6c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b70:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017b74:	0f b6 d2             	movzx  edx,dl
c0017b77:	c1 e2 08             	shl    edx,0x8
c0017b7a:	09 d0                	or     eax,edx
c0017b7c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017b81:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017b86:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017b8b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017b8f:	88 90 80 d1 02 c0    	mov    BYTE PTR [eax-0x3ffd2e80],dl
c0017b95:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017b9a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017b9f:	66 89 84 12 60 e8 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd17a0],ax
c0017ba7:	e9 ae 00 00 00       	jmp    c0017c5a <scanMADT()+0x450>
c0017bac:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017bb1:	0f 85 97 00 00 00    	jne    c0017c4e <scanMADT()+0x444>
c0017bb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bbb:	8d 50 01             	lea    edx,[eax+0x1]
c0017bbe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bc2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bc6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bca:	0f b6 c0             	movzx  eax,al
c0017bcd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017bd1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bd5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bd9:	01 d0                	add    eax,edx
c0017bdb:	83 c0 2c             	add    eax,0x2c
c0017bde:	8a 00                	mov    al,BYTE PTR [eax]
c0017be0:	0f b6 d0             	movzx  edx,al
c0017be3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017be7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bee:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017bf2:	0f b6 c0             	movzx  eax,al
c0017bf5:	c1 e0 08             	shl    eax,0x8
c0017bf8:	09 d0                	or     eax,edx
c0017bfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bfe:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c07:	8d 50 01             	lea    edx,[eax+0x1]
c0017c0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c12:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c16:	0f b6 c0             	movzx  eax,al
c0017c19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c21:	c1 e0 08             	shl    eax,0x8
c0017c24:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017c28:	89 c1                	mov    ecx,eax
c0017c2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c2e:	c1 e0 18             	shl    eax,0x18
c0017c31:	89 c3                	mov    ebx,eax
c0017c33:	a1 d0 e7 02 c0       	mov    eax,ds:0xc002e7d0
c0017c38:	8d 50 01             	lea    edx,[eax+0x1]
c0017c3b:	89 15 d0 e7 02 c0    	mov    DWORD PTR ds:0xc002e7d0,edx
c0017c41:	09 d9                	or     ecx,ebx
c0017c43:	89 ca                	mov    edx,ecx
c0017c45:	89 14 85 e0 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1820],edx
c0017c4c:	eb 0c                	jmp    c0017c5a <scanMADT()+0x450>
c0017c4e:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017c53:	75 05                	jne    c0017c5a <scanMADT()+0x450>
c0017c55:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017c5a:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017c5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c63:	01 d0                	add    eax,edx
c0017c65:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017c69:	e9 6d fc ff ff       	jmp    c00178db <scanMADT()+0xd1>
c0017c6e:	90                   	nop
c0017c6f:	eb 01                	jmp    c0017c72 <scanMADT()+0x468>
c0017c71:	90                   	nop
c0017c72:	83 c4 38             	add    esp,0x38
c0017c75:	5b                   	pop    ebx
c0017c76:	c3                   	ret    
c0017c77:	90                   	nop

c0017c78 <ACPI::ACPI()>:
c0017c78:	83 ec 0c             	sub    esp,0xc
c0017c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c7f:	83 ec 08             	sub    esp,0x8
c0017c82:	68 19 b7 02 c0       	push   0xc002b719
c0017c87:	50                   	push   eax
c0017c88:	e8 d7 c1 ff ff       	call   c0013e64 <Device::Device(char const*)>
c0017c8d:	83 c4 10             	add    esp,0x10
c0017c90:	ba 74 b8 02 c0       	mov    edx,0xc002b874
c0017c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c99:	89 10                	mov    DWORD PTR [eax],edx
c0017c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c9f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017caa:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cb8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017cc2:	e8 43 fb ff ff       	call   c001780a <scanMADT()>
c0017cc7:	90                   	nop
c0017cc8:	83 c4 0c             	add    esp,0xc
c0017ccb:	c3                   	ret    

c0017ccc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017ccc:	83 ec 2c             	sub    esp,0x2c
c0017ccf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017cd3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cd7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017cdb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017cdf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017ce4:	88 d0                	mov    al,dl
c0017ce6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017cea:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017cef:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017cf7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cfb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d01:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017d05:	0f 8d 97 00 00 00    	jge    c0017da2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017d0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d13:	83 c2 2a             	add    edx,0x2a
c0017d16:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017d1a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017d1f:	75 78                	jne    c0017d99 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017d21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d25:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d29:	83 c2 2a             	add    edx,0x2a
c0017d2c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017d30:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017d34:	75 63                	jne    c0017d99 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017d36:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017d3b:	74 3a                	je     c0017d77 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017d3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d41:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d45:	83 c2 2a             	add    edx,0x2a
c0017d48:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017d4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017d53:	39 c2                	cmp    edx,eax
c0017d55:	74 10                	je     c0017d67 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017d57:	83 ec 0c             	sub    esp,0xc
c0017d5a:	68 94 b6 02 c0       	push   0xc002b694
c0017d5f:	e8 af 22 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0017d64:	83 c4 10             	add    esp,0x10
c0017d67:	83 ec 0c             	sub    esp,0xc
c0017d6a:	68 1e b7 02 c0       	push   0xc002b71e
c0017d6f:	e8 9f 22 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0017d74:	83 c4 10             	add    esp,0x10
c0017d77:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017d7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d7f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d83:	83 c2 2a             	add    edx,0x2a
c0017d86:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017d8a:	8b 02                	mov    eax,DWORD PTR [edx]
c0017d8c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017d8f:	89 01                	mov    DWORD PTR [ecx],eax
c0017d91:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017d94:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d99:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017d9d:	e9 55 ff ff ff       	jmp    c0017cf7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017da2:	90                   	nop
c0017da3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017da7:	83 c4 2c             	add    esp,0x2c
c0017daa:	c2 04 00             	ret    0x4
c0017dad:	90                   	nop

c0017dae <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017dae:	83 ec 1c             	sub    esp,0x1c
c0017db1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017db5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017db9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017dbd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017dc2:	88 c8                	mov    al,cl
c0017dc4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017dc8:	88 d0                	mov    al,dl
c0017dca:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017dce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dd2:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017dd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ddc:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ddf:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017de3:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017de7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017deb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017df1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017df5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dfc:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017e01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e05:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017e0b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017e0f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e16:	83 c2 2a             	add    edx,0x2a
c0017e19:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017e1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e21:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017e27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e2b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017e2e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017e32:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017e36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e3a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017e40:	8d 50 01             	lea    edx,[eax+0x1]
c0017e43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e47:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017e4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e51:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017e57:	3d 00 02 00 00       	cmp    eax,0x200
c0017e5c:	75 10                	jne    c0017e6e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017e5e:	83 ec 0c             	sub    esp,0xc
c0017e61:	68 2d b7 02 c0       	push   0xc002b72d
c0017e66:	e8 a8 21 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0017e6b:	83 c4 10             	add    esp,0x10
c0017e6e:	90                   	nop
c0017e6f:	83 c4 1c             	add    esp,0x1c
c0017e72:	c3                   	ret    
c0017e73:	90                   	nop

c0017e74 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017e74:	b8 00 00 00 00       	mov    eax,0x0
c0017e79:	c3                   	ret    

c0017e7a <ACPI::detectPCI()>:
c0017e7a:	53                   	push   ebx
c0017e7b:	83 ec 28             	sub    esp,0x28
c0017e7e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017e83:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017e88:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0017e8d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e93:	83 e0 04             	and    eax,0x4
c0017e96:	84 c0                	test   al,al
c0017e98:	74 2b                	je     c0017ec5 <ACPI::detectPCI()+0x4b>
c0017e9a:	a1 c8 e7 02 c0       	mov    eax,ds:0xc002e7c8
c0017e9f:	83 ec 08             	sub    esp,0x8
c0017ea2:	68 4a b7 02 c0       	push   0xc002b74a
c0017ea7:	50                   	push   eax
c0017ea8:	e8 eb f8 ff ff       	call   c0017798 <findDataTable(unsigned char*, char*)>
c0017ead:	83 c4 10             	add    esp,0x10
c0017eb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017eb4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017eb9:	74 0a                	je     c0017ec5 <ACPI::detectPCI()+0x4b>
c0017ebb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ec0:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017ec5:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017ecd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ed1:	8a 00                	mov    al,BYTE PTR [eax]
c0017ed3:	3c 01                	cmp    al,0x1
c0017ed5:	75 0c                	jne    c0017ee3 <ACPI::detectPCI()+0x69>
c0017ed7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017edc:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017ee1:	eb 26                	jmp    c0017f09 <ACPI::detectPCI()+0x8f>
c0017ee3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ee7:	8a 00                	mov    al,BYTE PTR [eax]
c0017ee9:	3c 02                	cmp    al,0x2
c0017eeb:	75 1c                	jne    c0017f09 <ACPI::detectPCI()+0x8f>
c0017eed:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ef2:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017ef7:	74 10                	je     c0017f09 <ACPI::detectPCI()+0x8f>
c0017ef9:	83 ec 0c             	sub    esp,0xc
c0017efc:	68 c4 b6 02 c0       	push   0xc002b6c4
c0017f01:	e8 0d 21 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0017f06:	83 c4 10             	add    esp,0x10
c0017f09:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017f0d:	83 f0 01             	xor    eax,0x1
c0017f10:	84 c0                	test   al,al
c0017f12:	74 3f                	je     c0017f53 <ACPI::detectPCI()+0xd9>
c0017f14:	e8 37 82 fe ff       	call   c0000150 <manualPCIProbe>
c0017f19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f1d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017f22:	75 0c                	jne    c0017f30 <ACPI::detectPCI()+0xb6>
c0017f24:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f29:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017f2e:	eb 23                	jmp    c0017f53 <ACPI::detectPCI()+0xd9>
c0017f30:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017f35:	75 1c                	jne    c0017f53 <ACPI::detectPCI()+0xd9>
c0017f37:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f3c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017f41:	74 10                	je     c0017f53 <ACPI::detectPCI()+0xd9>
c0017f43:	83 ec 0c             	sub    esp,0xc
c0017f46:	68 c4 b6 02 c0       	push   0xc002b6c4
c0017f4b:	e8 c3 20 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0017f50:	83 c4 10             	add    esp,0x10
c0017f53:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017f58:	74 7e                	je     c0017fd8 <ACPI::detectPCI()+0x15e>
c0017f5a:	83 ec 0c             	sub    esp,0xc
c0017f5d:	68 4f b7 02 c0       	push   0xc002b74f
c0017f62:	e8 c2 78 ff ff       	call   c000f829 <Krnl::setBootMessage(char const*)>
c0017f67:	83 c4 10             	add    esp,0x10
c0017f6a:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017f72:	83 ec 0c             	sub    esp,0xc
c0017f75:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017f79:	e8 51 78 ff ff       	call   c000f7cf <malloc>
c0017f7e:	83 c4 10             	add    esp,0x10
c0017f81:	89 c3                	mov    ebx,eax
c0017f83:	83 ec 0c             	sub    esp,0xc
c0017f86:	53                   	push   ebx
c0017f87:	e8 00 a7 00 00       	call   c002268c <PCI::PCI()>
c0017f8c:	83 c4 10             	add    esp,0x10
c0017f8f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017f93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f97:	83 ec 08             	sub    esp,0x8
c0017f9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017f9e:	50                   	push   eax
c0017f9f:	e8 bc bc ff ff       	call   c0013c60 <Device::addChild(Device*)>
c0017fa4:	83 c4 10             	add    esp,0x10
c0017fa7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fab:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fad:	83 c0 08             	add    eax,0x8
c0017fb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fb2:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017fb7:	74 07                	je     c0017fc0 <ACPI::detectPCI()+0x146>
c0017fb9:	ba 01 00 00 00       	mov    edx,0x1
c0017fbe:	eb 05                	jmp    c0017fc5 <ACPI::detectPCI()+0x14b>
c0017fc0:	ba 02 00 00 00       	mov    edx,0x2
c0017fc5:	6a 00                	push   0x0
c0017fc7:	6a 00                	push   0x0
c0017fc9:	52                   	push   edx
c0017fca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017fce:	ff d0                	call   eax
c0017fd0:	83 c4 10             	add    esp,0x10
c0017fd3:	e9 9e 00 00 00       	jmp    c0018076 <ACPI::detectPCI()+0x1fc>
c0017fd8:	83 ec 0c             	sub    esp,0xc
c0017fdb:	68 67 b7 02 c0       	push   0xc002b767
c0017fe0:	e8 42 a8 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0017fe5:	83 c4 10             	add    esp,0x10
c0017fe8:	83 ec 0c             	sub    esp,0xc
c0017feb:	68 72 b7 02 c0       	push   0xc002b772
c0017ff0:	e8 34 78 ff ff       	call   c000f829 <Krnl::setBootMessage(char const*)>
c0017ff5:	83 c4 10             	add    esp,0x10
c0017ff8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017fff:	83 ec 0c             	sub    esp,0xc
c0018002:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018006:	e8 c4 77 ff ff       	call   c000f7cf <malloc>
c001800b:	83 c4 10             	add    esp,0x10
c001800e:	89 c3                	mov    ebx,eax
c0018010:	83 ec 0c             	sub    esp,0xc
c0018013:	53                   	push   ebx
c0018014:	e8 dd b1 00 00       	call   c00231f6 <IDE::IDE()>
c0018019:	83 c4 10             	add    esp,0x10
c001801c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0018020:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018024:	83 ec 08             	sub    esp,0x8
c0018027:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001802b:	50                   	push   eax
c001802c:	e8 2f bc ff ff       	call   c0013c60 <Device::addChild(Device*)>
c0018031:	83 c4 10             	add    esp,0x10
c0018034:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018038:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0018042:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018046:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001804f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018053:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001805c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018060:	8b 00                	mov    eax,DWORD PTR [eax]
c0018062:	83 c0 08             	add    eax,0x8
c0018065:	8b 00                	mov    eax,DWORD PTR [eax]
c0018067:	6a 00                	push   0x0
c0018069:	6a 00                	push   0x0
c001806b:	6a 00                	push   0x0
c001806d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018071:	ff d0                	call   eax
c0018073:	83 c4 10             	add    esp,0x10
c0018076:	90                   	nop
c0018077:	83 c4 28             	add    esp,0x28
c001807a:	5b                   	pop    ebx
c001807b:	c3                   	ret    

c001807c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001807c:	83 ec 1c             	sub    esp,0x1c
c001807f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018083:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018086:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001808a:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001808f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018094:	83 ec 08             	sub    esp,0x8
c0018097:	52                   	push   edx
c0018098:	50                   	push   eax
c0018099:	e8 48 6d ff ff       	call   c000ede6 <Computer::readCMOS(unsigned char)>
c001809e:	83 c4 10             	add    esp,0x10
c00180a1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00180a5:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c00180aa:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00180af:	83 ec 04             	sub    esp,0x4
c00180b2:	6a 01                	push   0x1
c00180b4:	52                   	push   edx
c00180b5:	50                   	push   eax
c00180b6:	e8 5d 6e ff ff       	call   c000ef18 <Computer::writeCMOS(unsigned char, unsigned char)>
c00180bb:	83 c4 10             	add    esp,0x10
c00180be:	90                   	nop
c00180bf:	83 c4 1c             	add    esp,0x1c
c00180c2:	c3                   	ret    
c00180c3:	90                   	nop

c00180c4 <ACPI::sleep()>:
c00180c4:	83 ec 0c             	sub    esp,0xc
c00180c7:	a1 a0 e5 02 c0       	mov    eax,ds:0xc002e5a0
c00180cc:	85 c0                	test   eax,eax
c00180ce:	74 07                	je     c00180d7 <ACPI::sleep()+0x13>
c00180d0:	a1 a0 e5 02 c0       	mov    eax,ds:0xc002e5a0
c00180d5:	ff d0                	call   eax
c00180d7:	90                   	nop
c00180d8:	83 c4 0c             	add    esp,0xc
c00180db:	c3                   	ret    

c00180dc <ACPI::open(int, int, void*)>:
c00180dc:	57                   	push   edi
c00180dd:	56                   	push   esi
c00180de:	53                   	push   ebx
c00180df:	81 ec 60 01 00 00    	sub    esp,0x160
c00180e5:	83 ec 0c             	sub    esp,0xc
c00180e8:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00180ef:	e8 86 fd ff ff       	call   c0017e7a <ACPI::detectPCI()>
c00180f4:	83 c4 10             	add    esp,0x10
c00180f7:	83 ec 0c             	sub    esp,0xc
c00180fa:	68 ec b6 02 c0       	push   0xc002b6ec
c00180ff:	e8 25 77 ff ff       	call   c000f829 <Krnl::setBootMessage(char const*)>
c0018104:	83 c4 10             	add    esp,0x10
c0018107:	83 ec 0c             	sub    esp,0xc
c001810a:	68 87 b7 02 c0       	push   0xc002b787
c001810f:	e8 55 46 00 00       	call   c001c769 <Thr::loadKernelSymbolTable(char const*)>
c0018114:	83 c4 10             	add    esp,0x10
c0018117:	83 ec 0c             	sub    esp,0xc
c001811a:	68 a5 b7 02 c0       	push   0xc002b7a5
c001811f:	e8 05 77 ff ff       	call   c000f829 <Krnl::setBootMessage(char const*)>
c0018124:	83 c4 10             	add    esp,0x10
c0018127:	83 ec 04             	sub    esp,0x4
c001812a:	6a 0c                	push   0xc
c001812c:	68 c0 b7 02 c0       	push   0xc002b7c0
c0018131:	68 d1 b7 02 c0       	push   0xc002b7d1
c0018136:	e8 94 2c 00 00       	call   c001adcf <Reg::readIntWithDefault(char*, char*, int)>
c001813b:	83 c4 10             	add    esp,0x10
c001813e:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0018145:	83 ec 0c             	sub    esp,0xc
c0018148:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c001814f:	e8 0b 95 ff ff       	call   c001165f <Virt::setupPageSwapping(int)>
c0018154:	83 c4 10             	add    esp,0x10
c0018157:	83 ec 0c             	sub    esp,0xc
c001815a:	68 b5 a1 02 c0       	push   0xc002a1b5
c001815f:	e8 c5 76 ff ff       	call   c000f829 <Krnl::setBootMessage(char const*)>
c0018164:	83 c4 10             	add    esp,0x10
c0018167:	8b 1d 28 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df28
c001816d:	83 ec 08             	sub    esp,0x8
c0018170:	6a 01                	push   0x1
c0018172:	68 d8 b7 02 c0       	push   0xc002b7d8
c0018177:	e8 64 50 00 00       	call   c001d1e0 <Thr::loadDLL(char const*, bool)>
c001817c:	83 c4 10             	add    esp,0x10
c001817f:	83 ec 08             	sub    esp,0x8
c0018182:	53                   	push   ebx
c0018183:	50                   	push   eax
c0018184:	e8 88 52 00 00       	call   c001d411 <Thr::executeDLL(unsigned long, void*)>
c0018189:	83 c4 10             	add    esp,0x10
c001818c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0018193:	83 ec 08             	sub    esp,0x8
c0018196:	6a 12                	push   0x12
c0018198:	50                   	push   eax
c0018199:	e8 46 be ff ff       	call   c0013fe4 <getDevicesOfType(DeviceType)>
c001819e:	83 c4 0c             	add    esp,0xc
c00181a1:	83 ec 0c             	sub    esp,0xc
c00181a4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00181ab:	50                   	push   eax
c00181ac:	e8 63 0b 01 00       	call   c0028d14 <LinkedList<Device>::isEmpty()>
c00181b1:	83 c4 10             	add    esp,0x10
c00181b4:	83 f0 01             	xor    eax,0x1
c00181b7:	84 c0                	test   al,al
c00181b9:	0f 84 43 01 00 00    	je     c0018302 <ACPI::open(int, int, void*)+0x226>
c00181bf:	83 ec 0c             	sub    esp,0xc
c00181c2:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00181c9:	50                   	push   eax
c00181ca:	e8 61 0b 01 00       	call   c0028d30 <LinkedList<Device>::getFirstElement()>
c00181cf:	83 c4 10             	add    esp,0x10
c00181d2:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00181d9:	83 ec 0c             	sub    esp,0xc
c00181dc:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00181e3:	50                   	push   eax
c00181e4:	e8 4f 0b 01 00       	call   c0028d38 <LinkedList<Device>::removeFirst()>
c00181e9:	83 c4 10             	add    esp,0x10
c00181ec:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00181f3:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00181fa:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018201:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018205:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001820b:	ba 09 00 00 00       	mov    edx,0x9
c0018210:	fc                   	cld    
c0018211:	89 c7                	mov    edi,eax
c0018213:	89 de                	mov    esi,ebx
c0018215:	89 d1                	mov    ecx,edx
c0018217:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018219:	83 ec 08             	sub    esp,0x8
c001821c:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018220:	50                   	push   eax
c0018221:	83 ec 24             	sub    esp,0x24
c0018224:	89 e0                	mov    eax,esp
c0018226:	89 c3                	mov    ebx,eax
c0018228:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001822c:	ba 09 00 00 00       	mov    edx,0x9
c0018231:	89 df                	mov    edi,ebx
c0018233:	89 c6                	mov    esi,eax
c0018235:	89 d1                	mov    ecx,edx
c0018237:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018239:	e8 2c a9 00 00       	call   c0022b6a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001823e:	83 c4 30             	add    esp,0x30
c0018241:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018248:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018250:	0f 84 4b ff ff ff    	je     c00181a1 <ACPI::open(int, int, void*)+0xc5>
c0018256:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018261:	83 ec 0c             	sub    esp,0xc
c0018264:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001826b:	e8 5f 75 ff ff       	call   c000f7cf <malloc>
c0018270:	83 c4 10             	add    esp,0x10
c0018273:	89 c3                	mov    ebx,eax
c0018275:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001827a:	83 ec 04             	sub    esp,0x4
c001827d:	50                   	push   eax
c001827e:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018285:	53                   	push   ebx
c0018286:	e8 fb aa ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c001828b:	83 c4 10             	add    esp,0x10
c001828e:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018295:	83 ec 0c             	sub    esp,0xc
c0018298:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001829f:	e8 b4 ad ff ff       	call   c0013058 <File::exists()>
c00182a4:	83 c4 10             	add    esp,0x10
c00182a7:	84 c0                	test   al,al
c00182a9:	74 27                	je     c00182d2 <ACPI::open(int, int, void*)+0x1f6>
c00182ab:	83 ec 08             	sub    esp,0x8
c00182ae:	6a 01                	push   0x1
c00182b0:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00182b7:	e8 24 4f 00 00       	call   c001d1e0 <Thr::loadDLL(char const*, bool)>
c00182bc:	83 c4 10             	add    esp,0x10
c00182bf:	83 ec 08             	sub    esp,0x8
c00182c2:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00182c9:	50                   	push   eax
c00182ca:	e8 42 51 00 00       	call   c001d411 <Thr::executeDLL(unsigned long, void*)>
c00182cf:	83 c4 10             	add    esp,0x10
c00182d2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00182da:	0f 84 c1 fe ff ff    	je     c00181a1 <ACPI::open(int, int, void*)+0xc5>
c00182e0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00182e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00182e9:	83 c0 08             	add    eax,0x8
c00182ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00182ee:	83 ec 0c             	sub    esp,0xc
c00182f1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00182f8:	ff d0                	call   eax
c00182fa:	83 c4 10             	add    esp,0x10
c00182fd:	e9 9f fe ff ff       	jmp    c00181a1 <ACPI::open(int, int, void*)+0xc5>
c0018302:	83 ec 0c             	sub    esp,0xc
c0018305:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001830c:	50                   	push   eax
c001830d:	e8 00 0a 01 00       	call   c0028d12 <LinkedList<Device>::~LinkedList()>
c0018312:	83 c4 10             	add    esp,0x10
c0018315:	8b 1d 28 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df28
c001831b:	83 ec 08             	sub    esp,0x8
c001831e:	6a 01                	push   0x1
c0018320:	68 f3 b7 02 c0       	push   0xc002b7f3
c0018325:	e8 b6 4e 00 00       	call   c001d1e0 <Thr::loadDLL(char const*, bool)>
c001832a:	83 c4 10             	add    esp,0x10
c001832d:	83 ec 08             	sub    esp,0x8
c0018330:	53                   	push   ebx
c0018331:	50                   	push   eax
c0018332:	e8 da 50 00 00       	call   c001d411 <Thr::executeDLL(unsigned long, void*)>
c0018337:	83 c4 10             	add    esp,0x10
c001833a:	8b 1d 28 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df28
c0018340:	83 ec 08             	sub    esp,0x8
c0018343:	6a 01                	push   0x1
c0018345:	68 10 b8 02 c0       	push   0xc002b810
c001834a:	e8 91 4e 00 00       	call   c001d1e0 <Thr::loadDLL(char const*, bool)>
c001834f:	83 c4 10             	add    esp,0x10
c0018352:	83 ec 08             	sub    esp,0x8
c0018355:	53                   	push   ebx
c0018356:	50                   	push   eax
c0018357:	e8 b5 50 00 00       	call   c001d411 <Thr::executeDLL(unsigned long, void*)>
c001835c:	83 c4 10             	add    esp,0x10
c001835f:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0018364:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001836a:	83 e0 04             	and    eax,0x4
c001836d:	84 c0                	test   al,al
c001836f:	0f 84 0d 01 00 00    	je     c0018482 <ACPI::open(int, int, void*)+0x3a6>
c0018375:	83 ec 0c             	sub    esp,0xc
c0018378:	68 2d b8 02 c0       	push   0xc002b82d
c001837d:	e8 a7 74 ff ff       	call   c000f829 <Krnl::setBootMessage(char const*)>
c0018382:	83 c4 10             	add    esp,0x10
c0018385:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018390:	83 ec 0c             	sub    esp,0xc
c0018393:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001839a:	e8 30 74 ff ff       	call   c000f7cf <malloc>
c001839f:	83 c4 10             	add    esp,0x10
c00183a2:	89 c3                	mov    ebx,eax
c00183a4:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c00183a9:	83 ec 04             	sub    esp,0x4
c00183ac:	50                   	push   eax
c00183ad:	68 4a b8 02 c0       	push   0xc002b84a
c00183b2:	53                   	push   ebx
c00183b3:	e8 ce a9 ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c00183b8:	83 c4 10             	add    esp,0x10
c00183bb:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00183c2:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00183ca:	74 1a                	je     c00183e6 <ACPI::open(int, int, void*)+0x30a>
c00183cc:	83 ec 0c             	sub    esp,0xc
c00183cf:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00183d6:	e8 7d ac ff ff       	call   c0013058 <File::exists()>
c00183db:	83 c4 10             	add    esp,0x10
c00183de:	84 c0                	test   al,al
c00183e0:	74 04                	je     c00183e6 <ACPI::open(int, int, void*)+0x30a>
c00183e2:	b0 01                	mov    al,0x1
c00183e4:	eb 02                	jmp    c00183e8 <ACPI::open(int, int, void*)+0x30c>
c00183e6:	b0 00                	mov    al,0x0
c00183e8:	84 c0                	test   al,al
c00183ea:	74 25                	je     c0018411 <ACPI::open(int, int, void*)+0x335>
c00183ec:	83 ec 08             	sub    esp,0x8
c00183ef:	6a 01                	push   0x1
c00183f1:	68 4a b8 02 c0       	push   0xc002b84a
c00183f6:	e8 e5 4d 00 00       	call   c001d1e0 <Thr::loadDLL(char const*, bool)>
c00183fb:	83 c4 10             	add    esp,0x10
c00183fe:	83 ec 08             	sub    esp,0x8
c0018401:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018408:	50                   	push   eax
c0018409:	e8 03 50 00 00       	call   c001d411 <Thr::executeDLL(unsigned long, void*)>
c001840e:	83 c4 10             	add    esp,0x10
c0018411:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018419:	74 27                	je     c0018442 <ACPI::open(int, int, void*)+0x366>
c001841b:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018423:	74 1d                	je     c0018442 <ACPI::open(int, int, void*)+0x366>
c0018425:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001842c:	8b 00                	mov    eax,DWORD PTR [eax]
c001842e:	83 c0 08             	add    eax,0x8
c0018431:	8b 00                	mov    eax,DWORD PTR [eax]
c0018433:	83 ec 0c             	sub    esp,0xc
c0018436:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001843d:	ff d0                	call   eax
c001843f:	83 c4 10             	add    esp,0x10
c0018442:	a1 c8 e7 02 c0       	mov    eax,ds:0xc002e7c8
c0018447:	83 ec 08             	sub    esp,0x8
c001844a:	68 67 b8 02 c0       	push   0xc002b867
c001844f:	50                   	push   eax
c0018450:	e8 43 f3 ff ff       	call   c0017798 <findDataTable(unsigned char*, char*)>
c0018455:	83 c4 10             	add    esp,0x10
c0018458:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c001845f:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018467:	74 19                	je     c0018482 <ACPI::open(int, int, void*)+0x3a6>
c0018469:	83 ec 08             	sub    esp,0x8
c001846c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018473:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001847a:	e8 fd fb ff ff       	call   c001807c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001847f:	83 c4 10             	add    esp,0x10
c0018482:	b8 00 00 00 00       	mov    eax,0x0
c0018487:	81 c4 60 01 00 00    	add    esp,0x160
c001848d:	5b                   	pop    ebx
c001848e:	5e                   	pop    esi
c001848f:	5f                   	pop    edi
c0018490:	c3                   	ret    
c0018491:	90                   	nop

c0018492 <CPU::close(int, int, void*)>:
c0018492:	31 c0                	xor    eax,eax
c0018494:	c3                   	ret    
c0018495:	90                   	nop

c0018496 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018496:	55                   	push   ebp
c0018497:	57                   	push   edi
c0018498:	56                   	push   esi
c0018499:	53                   	push   ebx
c001849a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001849e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00184a2:	89 ce                	mov    esi,ecx
c00184a4:	89 d5                	mov    ebp,edx
c00184a6:	80 f9 04             	cmp    cl,0x4
c00184a9:	75 28                	jne    c00184d3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00184ab:	8d 42 f9             	lea    eax,[edx-0x7]
c00184ae:	3c 03                	cmp    al,0x3
c00184b0:	0f 86 63 01 00 00    	jbe    c0018619 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00184b6:	80 fa 03             	cmp    dl,0x3
c00184b9:	0f 84 5a 01 00 00    	je     c0018619 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00184bf:	8d 7a f2             	lea    edi,[edx-0xe]
c00184c2:	b8 50 d3 02 c0       	mov    eax,0xc002d350
c00184c7:	89 fb                	mov    ebx,edi
c00184c9:	80 fb 01             	cmp    bl,0x1
c00184cc:	77 4e                	ja     c001851c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00184ce:	e9 52 01 00 00       	jmp    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184d3:	80 f9 05             	cmp    cl,0x5
c00184d6:	75 4d                	jne    c0018525 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00184d8:	b8 60 d3 02 c0       	mov    eax,0xc002d360
c00184dd:	80 fa 03             	cmp    dl,0x3
c00184e0:	0f 86 3f 01 00 00    	jbe    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184e6:	8d 7a fa             	lea    edi,[edx-0x6]
c00184e9:	b8 70 d3 02 c0       	mov    eax,0xc002d370
c00184ee:	89 fb                	mov    ebx,edi
c00184f0:	80 fb 01             	cmp    bl,0x1
c00184f3:	0f 86 2c 01 00 00    	jbe    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184f9:	b8 80 d3 02 c0       	mov    eax,0xc002d380
c00184fe:	80 fa 08             	cmp    dl,0x8
c0018501:	0f 84 1e 01 00 00    	je     c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018507:	89 d7                	mov    edi,edx
c0018509:	b8 90 d3 02 c0       	mov    eax,0xc002d390
c001850e:	83 e7 fb             	and    edi,0xfffffffb
c0018511:	89 fb                	mov    ebx,edi
c0018513:	80 fb 09             	cmp    bl,0x9
c0018516:	0f 84 09 01 00 00    	je     c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001851c:	31 c0                	xor    eax,eax
c001851e:	89 eb                	mov    ebx,ebp
c0018520:	0f b6 fb             	movzx  edi,bl
c0018523:	eb 30                	jmp    c0018555 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018525:	31 c0                	xor    eax,eax
c0018527:	80 f9 06             	cmp    cl,0x6
c001852a:	75 f2                	jne    c001851e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001852c:	80 fa 0a             	cmp    dl,0xa
c001852f:	77 ed                	ja     c001851e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018531:	bf de 05 00 00       	mov    edi,0x5de
c0018536:	0f a3 d7             	bt     edi,edx
c0018539:	73 e3                	jae    c001851e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001853b:	b8 a0 d3 02 c0       	mov    eax,0xc002d3a0
c0018540:	e9 e0 00 00 00       	jmp    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018545:	39 c7                	cmp    edi,eax
c0018547:	0f 84 d3 00 00 00    	je     c0018620 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001854d:	40                   	inc    eax
c001854e:	3d d0 00 00 00       	cmp    eax,0xd0
c0018553:	74 09                	je     c001855e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018555:	89 f3                	mov    ebx,esi
c0018557:	80 fb 0f             	cmp    bl,0xf
c001855a:	75 f1                	jne    c001854d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001855c:	eb e7                	jmp    c0018545 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001855e:	80 f9 10             	cmp    cl,0x10
c0018561:	75 14                	jne    c0018577 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018563:	8d 42 fc             	lea    eax,[edx-0x4]
c0018566:	83 e0 fb             	and    eax,0xfffffffb
c0018569:	3c 02                	cmp    al,0x2
c001856b:	76 34                	jbe    c00185a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001856d:	b8 ed b9 02 c0       	mov    eax,0xc002b9ed
c0018572:	80 fa 02             	cmp    dl,0x2
c0018575:	eb 24                	jmp    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018577:	80 f9 11             	cmp    cl,0x11
c001857a:	75 13                	jne    c001858f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001857c:	b8 ed b9 02 c0       	mov    eax,0xc002b9ed
c0018581:	80 fa 03             	cmp    dl,0x3
c0018584:	0f 85 9b 00 00 00    	jne    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001858a:	e9 91 00 00 00       	jmp    c0018620 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001858f:	80 f9 12             	cmp    cl,0x12
c0018592:	75 14                	jne    c00185a8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018594:	b8 ed b9 02 c0       	mov    eax,0xc002b9ed
c0018599:	fe ca                	dec    dl
c001859b:	0f 85 84 00 00 00    	jne    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185a1:	b8 c0 d3 02 c0       	mov    eax,0xc002d3c0
c00185a6:	eb 7d                	jmp    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185a8:	80 f9 14             	cmp    cl,0x14
c00185ab:	75 12                	jne    c00185bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00185ad:	4a                   	dec    edx
c00185ae:	b8 ed b9 02 c0       	mov    eax,0xc002b9ed
c00185b3:	80 fa 01             	cmp    dl,0x1
c00185b6:	77 6d                	ja     c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185b8:	b8 d0 d3 02 c0       	mov    eax,0xc002d3d0
c00185bd:	eb 66                	jmp    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185bf:	80 f9 15             	cmp    cl,0x15
c00185c2:	75 31                	jne    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00185c4:	b8 e0 d3 02 c0       	mov    eax,0xc002d3e0
c00185c9:	80 fa 01             	cmp    dl,0x1
c00185cc:	74 57                	je     c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185ce:	b8 ed b9 02 c0       	mov    eax,0xc002b9ed
c00185d3:	80 fa 13             	cmp    dl,0x13
c00185d6:	76 0c                	jbe    c00185e4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00185d8:	80 fa 30             	cmp    dl,0x30
c00185db:	75 48                	jne    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185dd:	b8 00 d4 02 c0       	mov    eax,0xc002d400
c00185e2:	eb 41                	jmp    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185e4:	b9 04 00 09 00       	mov    ecx,0x90004
c00185e9:	0f a3 d1             	bt     ecx,edx
c00185ec:	73 37                	jae    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185ee:	b8 f0 d3 02 c0       	mov    eax,0xc002d3f0
c00185f3:	eb 30                	jmp    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185f5:	b8 ed b9 02 c0       	mov    eax,0xc002b9ed
c00185fa:	80 f9 16             	cmp    cl,0x16
c00185fd:	75 26                	jne    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185ff:	b8 10 d4 02 c0       	mov    eax,0xc002d410
c0018604:	84 d2                	test   dl,dl
c0018606:	74 1d                	je     c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018608:	b8 ed b9 02 c0       	mov    eax,0xc002b9ed
c001860d:	80 fa 30             	cmp    dl,0x30
c0018610:	75 13                	jne    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018612:	b8 20 d4 02 c0       	mov    eax,0xc002d420
c0018617:	eb 0c                	jmp    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018619:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c001861e:	eb 05                	jmp    c0018625 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018620:	b8 b0 d3 02 c0       	mov    eax,0xc002d3b0
c0018625:	5b                   	pop    ebx
c0018626:	5e                   	pop    esi
c0018627:	5f                   	pop    edi
c0018628:	5d                   	pop    ebp
c0018629:	c3                   	ret    

c001862a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001862a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001862e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018632:	80 f9 04             	cmp    cl,0x4
c0018635:	75 6b                	jne    c00186a2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018637:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c001863c:	80 fa 01             	cmp    dl,0x1
c001863f:	0f 86 92 02 00 00    	jbe    c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018645:	b8 b0 d1 02 c0       	mov    eax,0xc002d1b0
c001864a:	80 fa 02             	cmp    dl,0x2
c001864d:	0f 84 84 02 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018653:	b8 c0 d1 02 c0       	mov    eax,0xc002d1c0
c0018658:	80 fa 03             	cmp    dl,0x3
c001865b:	0f 84 76 02 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018661:	b8 d0 d1 02 c0       	mov    eax,0xc002d1d0
c0018666:	80 fa 04             	cmp    dl,0x4
c0018669:	0f 84 68 02 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001866f:	b8 e0 d1 02 c0       	mov    eax,0xc002d1e0
c0018674:	80 fa 05             	cmp    dl,0x5
c0018677:	0f 84 5a 02 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001867d:	b8 c0 d1 02 c0       	mov    eax,0xc002d1c0
c0018682:	80 fa 07             	cmp    dl,0x7
c0018685:	0f 84 4c 02 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001868b:	83 ea 08             	sub    edx,0x8
c001868e:	b8 ed b9 02 c0       	mov    eax,0xc002b9ed
c0018693:	80 fa 01             	cmp    dl,0x1
c0018696:	0f 87 3b 02 00 00    	ja     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869c:	b8 f0 d1 02 c0       	mov    eax,0xc002d1f0
c00186a1:	c3                   	ret    
c00186a2:	80 f9 05             	cmp    cl,0x5
c00186a5:	75 45                	jne    c00186ec <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00186a7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00186aa:	b8 00 d2 02 c0       	mov    eax,0xc002d200
c00186af:	80 f9 02             	cmp    cl,0x2
c00186b2:	0f 86 1f 02 00 00    	jbe    c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b8:	80 fa 04             	cmp    dl,0x4
c00186bb:	0f 84 f3 01 00 00    	je     c00188b4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00186c1:	80 fa 07             	cmp    dl,0x7
c00186c4:	0f 84 0d 02 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ca:	b8 10 d2 02 c0       	mov    eax,0xc002d210
c00186cf:	80 fa 08             	cmp    dl,0x8
c00186d2:	0f 84 ff 01 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d8:	b8 ed b9 02 c0       	mov    eax,0xc002b9ed
c00186dd:	80 fa 09             	cmp    dl,0x9
c00186e0:	0f 85 f1 01 00 00    	jne    c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186e6:	b8 20 d2 02 c0       	mov    eax,0xc002d220
c00186eb:	c3                   	ret    
c00186ec:	80 f9 06             	cmp    cl,0x6
c00186ef:	0f 85 85 01 00 00    	jne    c001887a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00186f5:	b8 30 d2 02 c0       	mov    eax,0xc002d230
c00186fa:	80 fa 01             	cmp    dl,0x1
c00186fd:	0f 84 d4 01 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018703:	8d 42 fb             	lea    eax,[edx-0x5]
c0018706:	3c 01                	cmp    al,0x1
c0018708:	0f 86 ac 01 00 00    	jbe    c00188ba <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001870e:	80 fa 03             	cmp    dl,0x3
c0018711:	0f 84 a3 01 00 00    	je     c00188ba <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018717:	8d 4a f9             	lea    ecx,[edx-0x7]
c001871a:	b8 50 d2 02 c0       	mov    eax,0xc002d250
c001871f:	80 f9 01             	cmp    cl,0x1
c0018722:	0f 86 af 01 00 00    	jbe    c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018728:	80 fa 09             	cmp    dl,0x9
c001872b:	0f 84 8f 01 00 00    	je     c00188c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018731:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018734:	80 f9 01             	cmp    cl,0x1
c0018737:	0f 86 9a 01 00 00    	jbe    c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001873d:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c0018742:	80 fa 0d             	cmp    dl,0xd
c0018745:	0f 84 8c 01 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001874b:	b8 70 d2 02 c0       	mov    eax,0xc002d270
c0018750:	80 fa 0e             	cmp    dl,0xe
c0018753:	0f 84 7e 01 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018759:	b8 80 d2 02 c0       	mov    eax,0xc002d280
c001875e:	80 fa 0f             	cmp    dl,0xf
c0018761:	0f 84 70 01 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018767:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c001876c:	80 fa 15             	cmp    dl,0x15
c001876f:	0f 84 62 01 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018775:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018778:	b8 80 d2 02 c0       	mov    eax,0xc002d280
c001877d:	80 f9 01             	cmp    cl,0x1
c0018780:	0f 86 51 01 00 00    	jbe    c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018786:	80 fa 1a             	cmp    dl,0x1a
c0018789:	0f 84 37 01 00 00    	je     c00188c6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001878f:	80 fa 1c             	cmp    dl,0x1c
c0018792:	0f 84 34 01 00 00    	je     c00188cc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018798:	80 fa 1d             	cmp    dl,0x1d
c001879b:	0f 84 36 01 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187a1:	b8 b0 d2 02 c0       	mov    eax,0xc002d2b0
c00187a6:	80 fa 25             	cmp    dl,0x25
c00187a9:	0f 84 28 01 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187af:	8d 4a da             	lea    ecx,[edx-0x26]
c00187b2:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c00187b7:	80 f9 01             	cmp    cl,0x1
c00187ba:	0f 86 17 01 00 00    	jbe    c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c0:	b8 c0 d2 02 c0       	mov    eax,0xc002d2c0
c00187c5:	80 fa 2a             	cmp    dl,0x2a
c00187c8:	0f 84 09 01 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ce:	b8 b0 d2 02 c0       	mov    eax,0xc002d2b0
c00187d3:	80 fa 2c             	cmp    dl,0x2c
c00187d6:	0f 84 fb 00 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187dc:	b8 c0 d2 02 c0       	mov    eax,0xc002d2c0
c00187e1:	80 fa 2d             	cmp    dl,0x2d
c00187e4:	0f 84 ed 00 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ea:	b8 90 d2 02 c0       	mov    eax,0xc002d290
c00187ef:	80 fa 2e             	cmp    dl,0x2e
c00187f2:	0f 84 df 00 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f8:	b8 b0 d2 02 c0       	mov    eax,0xc002d2b0
c00187fd:	80 fa 2f             	cmp    dl,0x2f
c0018800:	0f 84 d1 00 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018806:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018809:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c001880e:	80 f9 01             	cmp    cl,0x1
c0018811:	0f 86 c0 00 00 00    	jbe    c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018817:	b8 d0 d2 02 c0       	mov    eax,0xc002d2d0
c001881c:	80 fa 37             	cmp    dl,0x37
c001881f:	0f 84 b2 00 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018825:	b8 e0 d2 02 c0       	mov    eax,0xc002d2e0
c001882a:	80 fa 3a             	cmp    dl,0x3a
c001882d:	0f 84 a4 00 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018833:	b8 f0 d2 02 c0       	mov    eax,0xc002d2f0
c0018838:	80 fa 3c             	cmp    dl,0x3c
c001883b:	0f 84 96 00 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018841:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c0018846:	80 fa 3d             	cmp    dl,0x3d
c0018849:	0f 84 88 00 00 00    	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001884f:	b8 e0 d2 02 c0       	mov    eax,0xc002d2e0
c0018854:	80 fa 3e             	cmp    dl,0x3e
c0018857:	74 7e                	je     c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018859:	8d 42 bb             	lea    eax,[edx-0x45]
c001885c:	3c 01                	cmp    al,0x1
c001885e:	76 72                	jbe    c00188d2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018860:	80 fa 3f             	cmp    dl,0x3f
c0018863:	74 6d                	je     c00188d2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018865:	80 fa 4a             	cmp    dl,0x4a
c0018868:	74 0a                	je     c0018874 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001886a:	b8 ed b9 02 c0       	mov    eax,0xc002b9ed
c001886f:	80 fa 4d             	cmp    dl,0x4d
c0018872:	75 63                	jne    c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018874:	b8 d0 d2 02 c0       	mov    eax,0xc002d2d0
c0018879:	c3                   	ret    
c001887a:	b8 ed b9 02 c0       	mov    eax,0xc002b9ed
c001887f:	80 f9 0b             	cmp    cl,0xb
c0018882:	75 0a                	jne    c001888e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018884:	fe ca                	dec    dl
c0018886:	75 4f                	jne    c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018888:	b8 10 d3 02 c0       	mov    eax,0xc002d310
c001888d:	c3                   	ret    
c001888e:	80 f9 0f             	cmp    cl,0xf
c0018891:	75 44                	jne    c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018893:	b8 20 d3 02 c0       	mov    eax,0xc002d320
c0018898:	80 fa 02             	cmp    dl,0x2
c001889b:	76 3a                	jbe    c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001889d:	8d 42 fd             	lea    eax,[edx-0x3]
c00188a0:	3c 01                	cmp    al,0x1
c00188a2:	76 0a                	jbe    c00188ae <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00188a4:	b8 ed b9 02 c0       	mov    eax,0xc002b9ed
c00188a9:	80 fa 06             	cmp    dl,0x6
c00188ac:	75 29                	jne    c00188d7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188ae:	b8 30 d3 02 c0       	mov    eax,0xc002d330
c00188b3:	c3                   	ret    
c00188b4:	b8 10 d2 02 c0       	mov    eax,0xc002d210
c00188b9:	c3                   	ret    
c00188ba:	b8 40 d2 02 c0       	mov    eax,0xc002d240
c00188bf:	c3                   	ret    
c00188c0:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c00188c5:	c3                   	ret    
c00188c6:	b8 90 d2 02 c0       	mov    eax,0xc002d290
c00188cb:	c3                   	ret    
c00188cc:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c00188d1:	c3                   	ret    
c00188d2:	b8 f0 d2 02 c0       	mov    eax,0xc002d2f0
c00188d7:	c3                   	ret    

c00188d8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00188d8:	60                   	pusha  
c00188d9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188e5:	9c                   	pushf  
c00188e6:	fa                   	cli    
c00188e7:	0f 09                	wbinvd 
c00188e9:	0f 30                	wrmsr  
c00188eb:	9d                   	popf   
c00188ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188f0:	89 02                	mov    DWORD PTR [edx],eax
c00188f2:	61                   	popa   
c00188f3:	c3                   	ret    

c00188f4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00188f4:	60                   	pusha  
c00188f5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188f9:	9c                   	pushf  
c00188fa:	fa                   	cli    
c00188fb:	0f 09                	wbinvd 
c00188fd:	31 c0                	xor    eax,eax
c00188ff:	31 d2                	xor    edx,edx
c0018901:	0f 32                	rdmsr  
c0018903:	9d                   	popf   
c0018904:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018908:	89 02                	mov    DWORD PTR [edx],eax
c001890a:	61                   	popa   
c001890b:	c3                   	ret    

c001890c <CPU::AMD_K6_writeback(int, int, int)>:
c001890c:	56                   	push   esi
c001890d:	53                   	push   ebx
c001890e:	83 ec 10             	sub    esp,0x10
c0018911:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018915:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001891a:	75 5d                	jne    c0018979 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001891c:	83 f8 08             	cmp    eax,0x8
c001891f:	75 09                	jne    c001892a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018921:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018926:	7e 13                	jle    c001893b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018928:	eb 30                	jmp    c001895a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001892a:	83 f8 06             	cmp    eax,0x6
c001892d:	7c 4a                	jl     c0018979 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001892f:	83 f8 07             	cmp    eax,0x7
c0018932:	7e 07                	jle    c001893b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018934:	83 f8 09             	cmp    eax,0x9
c0018937:	74 21                	je     c001895a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018939:	eb 3e                	jmp    c0018979 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001893b:	89 e6                	mov    esi,esp
c001893d:	8b 1d 68 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df68
c0018943:	56                   	push   esi
c0018944:	c1 eb 15             	shr    ebx,0x15
c0018947:	68 82 00 00 c0       	push   0xc0000082
c001894c:	83 e3 7e             	and    ebx,0x7e
c001894f:	e8 a0 ff ff ff       	call   c00188f4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018954:	56                   	push   esi
c0018955:	6a 00                	push   0x0
c0018957:	53                   	push   ebx
c0018958:	eb 12                	jmp    c001896c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001895a:	89 e3                	mov    ebx,esp
c001895c:	53                   	push   ebx
c001895d:	68 82 00 00 c0       	push   0xc0000082
c0018962:	e8 8d ff ff ff       	call   c00188f4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018967:	53                   	push   ebx
c0018968:	6a 00                	push   0x0
c001896a:	6a 00                	push   0x0
c001896c:	68 82 00 00 c0       	push   0xc0000082
c0018971:	e8 62 ff ff ff       	call   c00188d8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018976:	83 c4 18             	add    esp,0x18
c0018979:	83 c4 10             	add    esp,0x10
c001897c:	5b                   	pop    ebx
c001897d:	5e                   	pop    esi
c001897e:	c3                   	ret    
c001897f:	90                   	nop

c0018980 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018980:	55                   	push   ebp
c0018981:	57                   	push   edi
c0018982:	56                   	push   esi
c0018983:	53                   	push   ebx
c0018984:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018988:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001898c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018990:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018994:	39 05 40 d4 02 c0    	cmp    DWORD PTR ds:0xc002d440,eax
c001899a:	75 23                	jne    c00189bf <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001899c:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00189a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00189a5:	89 06                	mov    DWORD PTR [esi],eax
c00189a7:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c00189ac:	89 07                	mov    DWORD PTR [edi],eax
c00189ae:	a1 24 ea 02 c0       	mov    eax,ds:0xc002ea24
c00189b3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00189b6:	a1 20 ea 02 c0       	mov    eax,ds:0xc002ea20
c00189bb:	89 02                	mov    DWORD PTR [edx],eax
c00189bd:	eb 3f                	jmp    c00189fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00189bf:	31 c9                	xor    ecx,ecx
c00189c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189c5:	0f a2                	cpuid  
c00189c7:	89 06                	mov    DWORD PTR [esi],eax
c00189c9:	89 1f                	mov    DWORD PTR [edi],ebx
c00189cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189cf:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00189d2:	89 10                	mov    DWORD PTR [eax],edx
c00189d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189d8:	a3 40 d4 02 c0       	mov    ds:0xc002d440,eax
c00189dd:	8b 06                	mov    eax,DWORD PTR [esi]
c00189df:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00189e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00189e6:	a3 28 ea 02 c0       	mov    ds:0xc002ea28,eax
c00189eb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00189ee:	a3 24 ea 02 c0       	mov    ds:0xc002ea24,eax
c00189f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00189f9:	a3 20 ea 02 c0       	mov    ds:0xc002ea20,eax
c00189fe:	5b                   	pop    ebx
c00189ff:	5e                   	pop    esi
c0018a00:	5f                   	pop    edi
c0018a01:	5d                   	pop    ebp
c0018a02:	c3                   	ret    
c0018a03:	90                   	nop

c0018a04 <CPU::cpuidCheckEDX(unsigned int)>:
c0018a04:	83 ec 10             	sub    esp,0x10
c0018a07:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a0b:	50                   	push   eax
c0018a0c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a10:	50                   	push   eax
c0018a11:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a15:	50                   	push   eax
c0018a16:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a1a:	50                   	push   eax
c0018a1b:	6a 01                	push   0x1
c0018a1d:	e8 5e ff ff ff       	call   c0018980 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a26:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018a2a:	0f 95 c0             	setne  al
c0018a2d:	83 c4 24             	add    esp,0x24
c0018a30:	c3                   	ret    
c0018a31:	90                   	nop

c0018a32 <CPU::cpuidCheckECX(unsigned int)>:
c0018a32:	83 ec 10             	sub    esp,0x10
c0018a35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a39:	50                   	push   eax
c0018a3a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a3e:	50                   	push   eax
c0018a3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a43:	50                   	push   eax
c0018a44:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a48:	50                   	push   eax
c0018a49:	6a 01                	push   0x1
c0018a4b:	e8 30 ff ff ff       	call   c0018980 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a54:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018a58:	0f 95 c0             	setne  al
c0018a5b:	83 c4 24             	add    esp,0x24
c0018a5e:	c3                   	ret    
c0018a5f:	90                   	nop

c0018a60 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018a60:	83 ec 10             	sub    esp,0x10
c0018a63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a67:	50                   	push   eax
c0018a68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a6c:	50                   	push   eax
c0018a6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a71:	50                   	push   eax
c0018a72:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a76:	50                   	push   eax
c0018a77:	6a 07                	push   0x7
c0018a79:	e8 02 ff ff ff       	call   c0018980 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a82:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018a86:	0f 95 c0             	setne  al
c0018a89:	83 c4 24             	add    esp,0x24
c0018a8c:	c3                   	ret    
c0018a8d:	90                   	nop

c0018a8e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018a8e:	83 ec 10             	sub    esp,0x10
c0018a91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a95:	50                   	push   eax
c0018a96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a9a:	50                   	push   eax
c0018a9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a9f:	50                   	push   eax
c0018aa0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018aa4:	50                   	push   eax
c0018aa5:	6a 07                	push   0x7
c0018aa7:	e8 d4 fe ff ff       	call   c0018980 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018aac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ab0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018ab4:	0f 95 c0             	setne  al
c0018ab7:	83 c4 24             	add    esp,0x24
c0018aba:	c3                   	ret    
c0018abb:	90                   	nop

c0018abc <CPU::CPU()>:
c0018abc:	83 ec 0c             	sub    esp,0xc
c0018abf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ac3:	83 ec 08             	sub    esp,0x8
c0018ac6:	68 ed b9 02 c0       	push   0xc002b9ed
c0018acb:	50                   	push   eax
c0018acc:	e8 93 b3 ff ff       	call   c0013e64 <Device::Device(char const*)>
c0018ad1:	83 c4 10             	add    esp,0x10
c0018ad4:	ba c4 ba 02 c0       	mov    edx,0xc002bac4
c0018ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018add:	89 10                	mov    DWORD PTR [eax],edx
c0018adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ae3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018af1:	05 78 01 00 00       	add    eax,0x178
c0018af6:	83 ec 0c             	sub    esp,0xc
c0018af9:	50                   	push   eax
c0018afa:	e8 03 65 ff ff       	call   c000f002 <GDT::GDT()>
c0018aff:	83 c4 10             	add    esp,0x10
c0018b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b06:	05 7c 09 00 00       	add    eax,0x97c
c0018b0b:	83 ec 0c             	sub    esp,0xc
c0018b0e:	50                   	push   eax
c0018b0f:	e8 3e 67 ff ff       	call   c000f252 <IDT::IDT()>
c0018b14:	83 c4 10             	add    esp,0x10
c0018b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b1b:	05 7c 11 00 00       	add    eax,0x117c
c0018b20:	83 ec 0c             	sub    esp,0xc
c0018b23:	50                   	push   eax
c0018b24:	e8 73 82 ff ff       	call   c0010d9c <TSS::TSS()>
c0018b29:	83 c4 10             	add    esp,0x10
c0018b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b30:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b3b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018b45:	90                   	nop
c0018b46:	83 c4 0c             	add    esp,0xc
c0018b49:	c3                   	ret    

c0018b4a <CPU::displayFeatures()>:
c0018b4a:	c3                   	ret    
c0018b4b:	90                   	nop

c0018b4c <CPU::detectFeatures()>:
c0018b4c:	55                   	push   ebp
c0018b4d:	57                   	push   edi
c0018b4e:	56                   	push   esi
c0018b4f:	53                   	push   ebx
c0018b50:	83 ec 50             	sub    esp,0x50
c0018b53:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018b57:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018b61:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018b68:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018b6e:	6a 0d                	push   0xd
c0018b70:	6a 00                	push   0x0
c0018b72:	55                   	push   ebp
c0018b73:	e8 d8 7b fe ff       	call   c0000750 <memset>
c0018b78:	83 c4 10             	add    esp,0x10
c0018b7b:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0018b80:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018b87:	0f 84 22 09 00 00    	je     c00194af <CPU::detectFeatures()+0x963>
c0018b8d:	83 ec 0c             	sub    esp,0xc
c0018b90:	89 ef                	mov    edi,ebp
c0018b92:	6a 10                	push   0x10
c0018b94:	e8 6b fe ff ff       	call   c0018a04 <CPU::cpuidCheckEDX(unsigned int)>
c0018b99:	83 e0 01             	and    eax,0x1
c0018b9c:	8d 14 00             	lea    edx,[eax+eax*1]
c0018b9f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ba5:	83 e0 fd             	and    eax,0xfffffffd
c0018ba8:	09 d0                	or     eax,edx
c0018baa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018bb0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018bb7:	e8 48 fe ff ff       	call   c0018a04 <CPU::cpuidCheckEDX(unsigned int)>
c0018bbc:	83 e0 01             	and    eax,0x1
c0018bbf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018bc6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018bcc:	83 e0 fb             	and    eax,0xfffffffb
c0018bcf:	09 d0                	or     eax,edx
c0018bd1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018bd7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018bde:	e8 21 fe ff ff       	call   c0018a04 <CPU::cpuidCheckEDX(unsigned int)>
c0018be3:	83 e0 01             	and    eax,0x1
c0018be6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018bed:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018bf3:	83 e0 f7             	and    eax,0xfffffff7
c0018bf6:	09 d0                	or     eax,edx
c0018bf8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018bfe:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018c05:	e8 fa fd ff ff       	call   c0018a04 <CPU::cpuidCheckEDX(unsigned int)>
c0018c0a:	83 e0 01             	and    eax,0x1
c0018c0d:	c1 e0 04             	shl    eax,0x4
c0018c10:	88 c2                	mov    dl,al
c0018c12:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c18:	83 e0 ef             	and    eax,0xffffffef
c0018c1b:	09 d0                	or     eax,edx
c0018c1d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c23:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018c2a:	e8 d5 fd ff ff       	call   c0018a04 <CPU::cpuidCheckEDX(unsigned int)>
c0018c2f:	83 e0 01             	and    eax,0x1
c0018c32:	c1 e0 05             	shl    eax,0x5
c0018c35:	88 c2                	mov    dl,al
c0018c37:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c3d:	83 e0 df             	and    eax,0xffffffdf
c0018c40:	09 d0                	or     eax,edx
c0018c42:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c48:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018c4f:	e8 b0 fd ff ff       	call   c0018a04 <CPU::cpuidCheckEDX(unsigned int)>
c0018c54:	83 e0 01             	and    eax,0x1
c0018c57:	8d 14 00             	lea    edx,[eax+eax*1]
c0018c5a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018c60:	83 e0 fd             	and    eax,0xfffffffd
c0018c63:	09 d0                	or     eax,edx
c0018c65:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018c6b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018c72:	e8 8d fd ff ff       	call   c0018a04 <CPU::cpuidCheckEDX(unsigned int)>
c0018c77:	83 e0 01             	and    eax,0x1
c0018c7a:	c1 e0 06             	shl    eax,0x6
c0018c7d:	88 c2                	mov    dl,al
c0018c7f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c85:	83 e0 bf             	and    eax,0xffffffbf
c0018c88:	09 d0                	or     eax,edx
c0018c8a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c90:	58                   	pop    eax
c0018c91:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c95:	50                   	push   eax
c0018c96:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c9a:	50                   	push   eax
c0018c9b:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018c9f:	56                   	push   esi
c0018ca0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ca4:	50                   	push   eax
c0018ca5:	6a 00                	push   0x0
c0018ca7:	e8 d4 fc ff ff       	call   c0018980 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cac:	b8 04 00 00 00       	mov    eax,0x4
c0018cb1:	89 c1                	mov    ecx,eax
c0018cb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018cb5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018cbb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018cbf:	89 c1                	mov    ecx,eax
c0018cc1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018cc3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018cc9:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018ccd:	89 c1                	mov    ecx,eax
c0018ccf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018cd1:	83 c4 18             	add    esp,0x18
c0018cd4:	68 98 b8 02 c0       	push   0xc002b898
c0018cd9:	55                   	push   ebp
c0018cda:	e8 b9 7b fe ff       	call   c0000898 <strcmp>
c0018cdf:	83 c4 10             	add    esp,0x10
c0018ce2:	85 c0                	test   eax,eax
c0018ce4:	75 0f                	jne    c0018cf5 <CPU::detectFeatures()+0x1a9>
c0018ce6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018cf0:	e9 22 02 00 00       	jmp    c0018f17 <CPU::detectFeatures()+0x3cb>
c0018cf5:	50                   	push   eax
c0018cf6:	50                   	push   eax
c0018cf7:	68 a5 b8 02 c0       	push   0xc002b8a5
c0018cfc:	55                   	push   ebp
c0018cfd:	e8 96 7b fe ff       	call   c0000898 <strcmp>
c0018d02:	83 c4 10             	add    esp,0x10
c0018d05:	85 c0                	test   eax,eax
c0018d07:	74 dd                	je     c0018ce6 <CPU::detectFeatures()+0x19a>
c0018d09:	50                   	push   eax
c0018d0a:	50                   	push   eax
c0018d0b:	68 b2 b8 02 c0       	push   0xc002b8b2
c0018d10:	55                   	push   ebp
c0018d11:	e8 82 7b fe ff       	call   c0000898 <strcmp>
c0018d16:	83 c4 10             	add    esp,0x10
c0018d19:	85 c0                	test   eax,eax
c0018d1b:	74 2a                	je     c0018d47 <CPU::detectFeatures()+0x1fb>
c0018d1d:	50                   	push   eax
c0018d1e:	50                   	push   eax
c0018d1f:	68 bf b8 02 c0       	push   0xc002b8bf
c0018d24:	55                   	push   ebp
c0018d25:	e8 6e 7b fe ff       	call   c0000898 <strcmp>
c0018d2a:	83 c4 10             	add    esp,0x10
c0018d2d:	85 c0                	test   eax,eax
c0018d2f:	74 16                	je     c0018d47 <CPU::detectFeatures()+0x1fb>
c0018d31:	50                   	push   eax
c0018d32:	50                   	push   eax
c0018d33:	68 cc b8 02 c0       	push   0xc002b8cc
c0018d38:	55                   	push   ebp
c0018d39:	e8 5a 7b fe ff       	call   c0000898 <strcmp>
c0018d3e:	83 c4 10             	add    esp,0x10
c0018d41:	85 c0                	test   eax,eax
c0018d43:	74 48                	je     c0018d8d <CPU::detectFeatures()+0x241>
c0018d45:	eb 0f                	jmp    c0018d56 <CPU::detectFeatures()+0x20a>
c0018d47:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018d51:	e9 c1 01 00 00       	jmp    c0018f17 <CPU::detectFeatures()+0x3cb>
c0018d56:	50                   	push   eax
c0018d57:	50                   	push   eax
c0018d58:	68 d9 b8 02 c0       	push   0xc002b8d9
c0018d5d:	55                   	push   ebp
c0018d5e:	e8 35 7b fe ff       	call   c0000898 <strcmp>
c0018d63:	83 c4 10             	add    esp,0x10
c0018d66:	85 c0                	test   eax,eax
c0018d68:	74 23                	je     c0018d8d <CPU::detectFeatures()+0x241>
c0018d6a:	57                   	push   edi
c0018d6b:	57                   	push   edi
c0018d6c:	68 e6 b8 02 c0       	push   0xc002b8e6
c0018d71:	55                   	push   ebp
c0018d72:	e8 21 7b fe ff       	call   c0000898 <strcmp>
c0018d77:	83 c4 10             	add    esp,0x10
c0018d7a:	85 c0                	test   eax,eax
c0018d7c:	75 1e                	jne    c0018d9c <CPU::detectFeatures()+0x250>
c0018d7e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018d88:	e9 8a 01 00 00       	jmp    c0018f17 <CPU::detectFeatures()+0x3cb>
c0018d8d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018d97:	e9 7b 01 00 00       	jmp    c0018f17 <CPU::detectFeatures()+0x3cb>
c0018d9c:	56                   	push   esi
c0018d9d:	56                   	push   esi
c0018d9e:	68 f3 b8 02 c0       	push   0xc002b8f3
c0018da3:	55                   	push   ebp
c0018da4:	e8 ef 7a fe ff       	call   c0000898 <strcmp>
c0018da9:	83 c4 10             	add    esp,0x10
c0018dac:	85 c0                	test   eax,eax
c0018dae:	75 0f                	jne    c0018dbf <CPU::detectFeatures()+0x273>
c0018db0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018dba:	e9 58 01 00 00       	jmp    c0018f17 <CPU::detectFeatures()+0x3cb>
c0018dbf:	51                   	push   ecx
c0018dc0:	51                   	push   ecx
c0018dc1:	68 b2 b8 02 c0       	push   0xc002b8b2
c0018dc6:	55                   	push   ebp
c0018dc7:	e8 cc 7a fe ff       	call   c0000898 <strcmp>
c0018dcc:	83 c4 10             	add    esp,0x10
c0018dcf:	85 c0                	test   eax,eax
c0018dd1:	75 0f                	jne    c0018de2 <CPU::detectFeatures()+0x296>
c0018dd3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018ddd:	e9 35 01 00 00       	jmp    c0018f17 <CPU::detectFeatures()+0x3cb>
c0018de2:	52                   	push   edx
c0018de3:	52                   	push   edx
c0018de4:	68 00 b9 02 c0       	push   0xc002b900
c0018de9:	55                   	push   ebp
c0018dea:	e8 a9 7a fe ff       	call   c0000898 <strcmp>
c0018def:	83 c4 10             	add    esp,0x10
c0018df2:	85 c0                	test   eax,eax
c0018df4:	75 0f                	jne    c0018e05 <CPU::detectFeatures()+0x2b9>
c0018df6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018e00:	e9 12 01 00 00       	jmp    c0018f17 <CPU::detectFeatures()+0x3cb>
c0018e05:	50                   	push   eax
c0018e06:	50                   	push   eax
c0018e07:	68 0d b9 02 c0       	push   0xc002b90d
c0018e0c:	55                   	push   ebp
c0018e0d:	e8 86 7a fe ff       	call   c0000898 <strcmp>
c0018e12:	83 c4 10             	add    esp,0x10
c0018e15:	85 c0                	test   eax,eax
c0018e17:	75 0f                	jne    c0018e28 <CPU::detectFeatures()+0x2dc>
c0018e19:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018e23:	e9 ef 00 00 00       	jmp    c0018f17 <CPU::detectFeatures()+0x3cb>
c0018e28:	50                   	push   eax
c0018e29:	50                   	push   eax
c0018e2a:	68 1a b9 02 c0       	push   0xc002b91a
c0018e2f:	55                   	push   ebp
c0018e30:	e8 63 7a fe ff       	call   c0000898 <strcmp>
c0018e35:	83 c4 10             	add    esp,0x10
c0018e38:	85 c0                	test   eax,eax
c0018e3a:	75 0f                	jne    c0018e4b <CPU::detectFeatures()+0x2ff>
c0018e3c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018e46:	e9 cc 00 00 00       	jmp    c0018f17 <CPU::detectFeatures()+0x3cb>
c0018e4b:	50                   	push   eax
c0018e4c:	50                   	push   eax
c0018e4d:	68 27 b9 02 c0       	push   0xc002b927
c0018e52:	55                   	push   ebp
c0018e53:	e8 40 7a fe ff       	call   c0000898 <strcmp>
c0018e58:	83 c4 10             	add    esp,0x10
c0018e5b:	85 c0                	test   eax,eax
c0018e5d:	75 0f                	jne    c0018e6e <CPU::detectFeatures()+0x322>
c0018e5f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018e69:	e9 a9 00 00 00       	jmp    c0018f17 <CPU::detectFeatures()+0x3cb>
c0018e6e:	50                   	push   eax
c0018e6f:	50                   	push   eax
c0018e70:	68 34 b9 02 c0       	push   0xc002b934
c0018e75:	55                   	push   ebp
c0018e76:	e8 1d 7a fe ff       	call   c0000898 <strcmp>
c0018e7b:	83 c4 10             	add    esp,0x10
c0018e7e:	85 c0                	test   eax,eax
c0018e80:	75 0f                	jne    c0018e91 <CPU::detectFeatures()+0x345>
c0018e82:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018e8c:	e9 86 00 00 00       	jmp    c0018f17 <CPU::detectFeatures()+0x3cb>
c0018e91:	50                   	push   eax
c0018e92:	50                   	push   eax
c0018e93:	68 41 b9 02 c0       	push   0xc002b941
c0018e98:	55                   	push   ebp
c0018e99:	e8 fa 79 fe ff       	call   c0000898 <strcmp>
c0018e9e:	83 c4 10             	add    esp,0x10
c0018ea1:	85 c0                	test   eax,eax
c0018ea3:	75 0c                	jne    c0018eb1 <CPU::detectFeatures()+0x365>
c0018ea5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018eaf:	eb 66                	jmp    c0018f17 <CPU::detectFeatures()+0x3cb>
c0018eb1:	50                   	push   eax
c0018eb2:	50                   	push   eax
c0018eb3:	68 4e b9 02 c0       	push   0xc002b94e
c0018eb8:	55                   	push   ebp
c0018eb9:	e8 da 79 fe ff       	call   c0000898 <strcmp>
c0018ebe:	83 c4 10             	add    esp,0x10
c0018ec1:	85 c0                	test   eax,eax
c0018ec3:	75 0c                	jne    c0018ed1 <CPU::detectFeatures()+0x385>
c0018ec5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018ecf:	eb 46                	jmp    c0018f17 <CPU::detectFeatures()+0x3cb>
c0018ed1:	57                   	push   edi
c0018ed2:	57                   	push   edi
c0018ed3:	68 5b b9 02 c0       	push   0xc002b95b
c0018ed8:	55                   	push   ebp
c0018ed9:	e8 ba 79 fe ff       	call   c0000898 <strcmp>
c0018ede:	83 c4 10             	add    esp,0x10
c0018ee1:	85 c0                	test   eax,eax
c0018ee3:	74 e0                	je     c0018ec5 <CPU::detectFeatures()+0x379>
c0018ee5:	56                   	push   esi
c0018ee6:	56                   	push   esi
c0018ee7:	68 68 b9 02 c0       	push   0xc002b968
c0018eec:	55                   	push   ebp
c0018eed:	e8 a6 79 fe ff       	call   c0000898 <strcmp>
c0018ef2:	83 c4 10             	add    esp,0x10
c0018ef5:	85 c0                	test   eax,eax
c0018ef7:	74 cc                	je     c0018ec5 <CPU::detectFeatures()+0x379>
c0018ef9:	51                   	push   ecx
c0018efa:	51                   	push   ecx
c0018efb:	68 75 b9 02 c0       	push   0xc002b975
c0018f00:	55                   	push   ebp
c0018f01:	e8 92 79 fe ff       	call   c0000898 <strcmp>
c0018f06:	83 c4 10             	add    esp,0x10
c0018f09:	85 c0                	test   eax,eax
c0018f0b:	74 b8                	je     c0018ec5 <CPU::detectFeatures()+0x379>
c0018f0d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018f17:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018f1c:	0f 86 be 00 00 00    	jbe    c0018fe0 <CPU::detectFeatures()+0x494>
c0018f22:	83 ec 0c             	sub    esp,0xc
c0018f25:	68 80 00 00 00       	push   0x80
c0018f2a:	e8 31 fb ff ff       	call   c0018a60 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018f2f:	83 e0 01             	and    eax,0x1
c0018f32:	c1 e0 06             	shl    eax,0x6
c0018f35:	88 c2                	mov    dl,al
c0018f37:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f3d:	83 e0 bf             	and    eax,0xffffffbf
c0018f40:	09 d0                	or     eax,edx
c0018f42:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f48:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018f4f:	e8 0c fb ff ff       	call   c0018a60 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018f54:	83 e0 01             	and    eax,0x1
c0018f57:	c1 e0 04             	shl    eax,0x4
c0018f5a:	88 c2                	mov    dl,al
c0018f5c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f62:	83 e0 ef             	and    eax,0xffffffef
c0018f65:	09 d0                	or     eax,edx
c0018f67:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f6d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018f74:	e8 e7 fa ff ff       	call   c0018a60 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018f79:	c1 e0 07             	shl    eax,0x7
c0018f7c:	88 c2                	mov    dl,al
c0018f7e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f84:	83 e0 7f             	and    eax,0x7f
c0018f87:	09 d0                	or     eax,edx
c0018f89:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f8f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018f96:	e8 f3 fa ff ff       	call   c0018a8e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018f9b:	83 e0 01             	and    eax,0x1
c0018f9e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018fa5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018fab:	83 e0 f7             	and    eax,0xfffffff7
c0018fae:	09 d0                	or     eax,edx
c0018fb0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018fb6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018fbd:	e8 cc fa ff ff       	call   c0018a8e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018fc2:	83 c4 10             	add    esp,0x10
c0018fc5:	83 e0 01             	and    eax,0x1
c0018fc8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018fcf:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018fd5:	83 e0 fb             	and    eax,0xfffffffb
c0018fd8:	09 d0                	or     eax,edx
c0018fda:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018fe0:	83 ec 0c             	sub    esp,0xc
c0018fe3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fe7:	50                   	push   eax
c0018fe8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fec:	50                   	push   eax
c0018fed:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018ff1:	56                   	push   esi
c0018ff2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ff6:	50                   	push   eax
c0018ff7:	6a 01                	push   0x1
c0018ff9:	e8 82 f9 ff ff       	call   c0018980 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ffe:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019002:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019008:	88 ca                	mov    dl,cl
c001900a:	83 e0 f0             	and    eax,0xfffffff0
c001900d:	83 e2 0f             	and    edx,0xf
c0019010:	09 d0                	or     eax,edx
c0019012:	88 ca                	mov    dl,cl
c0019014:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001901a:	c0 ea 04             	shr    dl,0x4
c001901d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019021:	0f b6 c2             	movzx  eax,dl
c0019024:	83 c4 20             	add    esp,0x20
c0019027:	c1 e0 06             	shl    eax,0x6
c001902a:	89 c7                	mov    edi,eax
c001902c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019032:	66 25 3f c0          	and    ax,0xc03f
c0019036:	09 f8                	or     eax,edi
c0019038:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001903f:	89 c8                	mov    eax,ecx
c0019041:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0019048:	c1 e8 08             	shr    eax,0x8
c001904b:	83 e5 3f             	and    ebp,0x3f
c001904e:	83 e0 0f             	and    eax,0xf
c0019051:	89 c7                	mov    edi,eax
c0019053:	c1 e7 06             	shl    edi,0x6
c0019056:	09 ef                	or     edi,ebp
c0019058:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c001905f:	89 fa                	mov    edx,edi
c0019061:	83 e5 c0             	and    ebp,0xffffffc0
c0019064:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001906a:	88 c2                	mov    dl,al
c001906c:	c0 ea 02             	shr    dl,0x2
c001906f:	89 d7                	mov    edi,edx
c0019071:	09 ef                	or     edi,ebp
c0019073:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019079:	89 fa                	mov    edx,edi
c001907b:	83 e5 cf             	and    ebp,0xffffffcf
c001907e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019084:	89 cf                	mov    edi,ecx
c0019086:	c1 ef 0c             	shr    edi,0xc
c0019089:	83 e7 03             	and    edi,0x3
c001908c:	c1 e7 04             	shl    edi,0x4
c001908f:	09 ef                	or     edi,ebp
c0019091:	3c 06                	cmp    al,0x6
c0019093:	89 fa                	mov    edx,edi
c0019095:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001909b:	74 04                	je     c00190a1 <CPU::detectFeatures()+0x555>
c001909d:	3c 0f                	cmp    al,0xf
c001909f:	75 5c                	jne    c00190fd <CPU::detectFeatures()+0x5b1>
c00190a1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00190a5:	89 cf                	mov    edi,ecx
c00190a7:	c1 ef 10             	shr    edi,0x10
c00190aa:	c1 e7 04             	shl    edi,0x4
c00190ad:	09 fa                	or     edx,edi
c00190af:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00190b5:	0f b6 d2             	movzx  edx,dl
c00190b8:	66 81 e7 3f c0       	and    di,0xc03f
c00190bd:	c1 e2 06             	shl    edx,0x6
c00190c0:	09 fa                	or     edx,edi
c00190c2:	3c 0f                	cmp    al,0xf
c00190c4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00190cb:	75 30                	jne    c00190fd <CPU::detectFeatures()+0x5b1>
c00190cd:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00190d3:	c1 e9 14             	shr    ecx,0x14
c00190d6:	83 e0 3f             	and    eax,0x3f
c00190d9:	83 c1 0f             	add    ecx,0xf
c00190dc:	88 ca                	mov    dl,cl
c00190de:	c0 e9 02             	shr    cl,0x2
c00190e1:	c1 e2 06             	shl    edx,0x6
c00190e4:	09 d0                	or     eax,edx
c00190e6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00190ec:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00190f2:	83 e0 c0             	and    eax,0xffffffc0
c00190f5:	09 c1                	or     ecx,eax
c00190f7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00190fd:	83 ec 0c             	sub    esp,0xc
c0019100:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019107:	8d 44 24 28          	lea    eax,[esp+0x28]
c001910b:	50                   	push   eax
c001910c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019110:	55                   	push   ebp
c0019111:	56                   	push   esi
c0019112:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019116:	57                   	push   edi
c0019117:	68 00 00 00 80       	push   0x80000000
c001911c:	e8 5f f8 ff ff       	call   c0018980 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019121:	83 c4 20             	add    esp,0x20
c0019124:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001912c:	76 22                	jbe    c0019150 <CPU::detectFeatures()+0x604>
c001912e:	83 ec 0c             	sub    esp,0xc
c0019131:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019135:	50                   	push   eax
c0019136:	55                   	push   ebp
c0019137:	56                   	push   esi
c0019138:	57                   	push   edi
c0019139:	68 01 00 00 80       	push   0x80000001
c001913e:	e8 3d f8 ff ff       	call   c0018980 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019143:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001914d:	83 c4 20             	add    esp,0x20
c0019150:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019156:	83 f8 01             	cmp    eax,0x1
c0019159:	75 6f                	jne    c00191ca <CPU::detectFeatures()+0x67e>
c001915b:	51                   	push   ecx
c001915c:	51                   	push   ecx
c001915d:	68 81 b9 02 c0       	push   0xc002b981
c0019162:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019166:	56                   	push   esi
c0019167:	e8 a0 76 fe ff       	call   c000080c <strcpy>
c001916c:	5f                   	pop    edi
c001916d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019173:	5d                   	pop    ebp
c0019174:	66 c1 e8 06          	shr    ax,0x6
c0019178:	0f b6 c0             	movzx  eax,al
c001917b:	50                   	push   eax
c001917c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019182:	c1 e8 0e             	shr    eax,0xe
c0019185:	0f b6 c0             	movzx  eax,al
c0019188:	50                   	push   eax
c0019189:	e8 9c f4 ff ff       	call   c001862a <CPU::lookupIntelName(unsigned char, unsigned char)>
c001918e:	5a                   	pop    edx
c001918f:	59                   	pop    ecx
c0019190:	50                   	push   eax
c0019191:	56                   	push   esi
c0019192:	e8 b5 77 fe ff       	call   c000094c <strcat>
c0019197:	5f                   	pop    edi
c0019198:	5d                   	pop    ebp
c0019199:	56                   	push   esi
c001919a:	53                   	push   ebx
c001919b:	e8 b6 ac ff ff       	call   c0013e56 <Device::setName(char const*)>
c00191a0:	58                   	pop    eax
c00191a1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00191a7:	5a                   	pop    edx
c00191a8:	68 88 b9 02 c0       	push   0xc002b988
c00191ad:	50                   	push   eax
c00191ae:	e8 e5 76 fe ff       	call   c0000898 <strcmp>
c00191b3:	83 c4 10             	add    esp,0x10
c00191b6:	85 c0                	test   eax,eax
c00191b8:	0f 85 71 03 00 00    	jne    c001952f <CPU::detectFeatures()+0x9e3>
c00191be:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00191c5:	e9 65 03 00 00       	jmp    c001952f <CPU::detectFeatures()+0x9e3>
c00191ca:	83 f8 02             	cmp    eax,0x2
c00191cd:	0f 85 b5 00 00 00    	jne    c0019288 <CPU::detectFeatures()+0x73c>
c00191d3:	57                   	push   edi
c00191d4:	57                   	push   edi
c00191d5:	68 9a b9 02 c0       	push   0xc002b99a
c00191da:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00191de:	56                   	push   esi
c00191df:	e8 28 76 fe ff       	call   c000080c <strcpy>
c00191e4:	5d                   	pop    ebp
c00191e5:	58                   	pop    eax
c00191e6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191ec:	66 c1 e8 06          	shr    ax,0x6
c00191f0:	0f b6 c0             	movzx  eax,al
c00191f3:	50                   	push   eax
c00191f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191fa:	c1 e8 0e             	shr    eax,0xe
c00191fd:	0f b6 c0             	movzx  eax,al
c0019200:	50                   	push   eax
c0019201:	e8 90 f2 ff ff       	call   c0018496 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019206:	5a                   	pop    edx
c0019207:	59                   	pop    ecx
c0019208:	50                   	push   eax
c0019209:	56                   	push   esi
c001920a:	e8 3d 77 fe ff       	call   c000094c <strcat>
c001920f:	5f                   	pop    edi
c0019210:	5d                   	pop    ebp
c0019211:	56                   	push   esi
c0019212:	53                   	push   ebx
c0019213:	e8 3e ac ff ff       	call   c0013e56 <Device::setName(char const*)>
c0019218:	58                   	pop    eax
c0019219:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001921f:	5a                   	pop    edx
c0019220:	68 9f b9 02 c0       	push   0xc002b99f
c0019225:	50                   	push   eax
c0019226:	e8 6d 76 fe ff       	call   c0000898 <strcmp>
c001922b:	83 c4 10             	add    esp,0x10
c001922e:	85 c0                	test   eax,eax
c0019230:	75 20                	jne    c0019252 <CPU::detectFeatures()+0x706>
c0019232:	8b 15 28 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df28
c0019238:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001923e:	a8 01                	test   al,0x1
c0019240:	74 10                	je     c0019252 <CPU::detectFeatures()+0x706>
c0019242:	83 e0 fe             	and    eax,0xfffffffe
c0019245:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001924b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019252:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019258:	c1 e8 0e             	shr    eax,0xe
c001925b:	3c 05                	cmp    al,0x5
c001925d:	0f 85 cc 02 00 00    	jne    c001952f <CPU::detectFeatures()+0x9e3>
c0019263:	56                   	push   esi
c0019264:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001926a:	83 e0 0f             	and    eax,0xf
c001926d:	50                   	push   eax
c001926e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019274:	66 c1 e8 06          	shr    ax,0x6
c0019278:	0f b6 c0             	movzx  eax,al
c001927b:	50                   	push   eax
c001927c:	6a 05                	push   0x5
c001927e:	e8 89 f6 ff ff       	call   c001890c <CPU::AMD_K6_writeback(int, int, int)>
c0019283:	e9 1f 02 00 00       	jmp    c00194a7 <CPU::detectFeatures()+0x95b>
c0019288:	8d 50 fd             	lea    edx,[eax-0x3]
c001928b:	83 fa 01             	cmp    edx,0x1
c001928e:	76 09                	jbe    c0019299 <CPU::detectFeatures()+0x74d>
c0019290:	83 f8 06             	cmp    eax,0x6
c0019293:	0f 85 91 01 00 00    	jne    c001942a <CPU::detectFeatures()+0x8de>
c0019299:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001929f:	c1 ea 0e             	shr    edx,0xe
c00192a2:	80 fa 05             	cmp    dl,0x5
c00192a5:	75 7b                	jne    c0019322 <CPU::detectFeatures()+0x7d6>
c00192a7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00192ad:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00192b2:	66 81 fa 00 01       	cmp    dx,0x100
c00192b7:	75 0c                	jne    c00192c5 <CPU::detectFeatures()+0x779>
c00192b9:	51                   	push   ecx
c00192ba:	51                   	push   ecx
c00192bb:	68 a6 b9 02 c0       	push   0xc002b9a6
c00192c0:	e9 dc 01 00 00       	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c00192c5:	66 81 fa 00 02       	cmp    dx,0x200
c00192ca:	75 0c                	jne    c00192d8 <CPU::detectFeatures()+0x78c>
c00192cc:	52                   	push   edx
c00192cd:	52                   	push   edx
c00192ce:	68 b9 b9 02 c0       	push   0xc002b9b9
c00192d3:	e9 c9 01 00 00       	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c00192d8:	66 81 fa 40 02       	cmp    dx,0x240
c00192dd:	75 0c                	jne    c00192eb <CPU::detectFeatures()+0x79f>
c00192df:	50                   	push   eax
c00192e0:	50                   	push   eax
c00192e1:	68 cb b9 02 c0       	push   0xc002b9cb
c00192e6:	e9 b6 01 00 00       	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c00192eb:	83 f8 06             	cmp    eax,0x6
c00192ee:	75 0c                	jne    c00192fc <CPU::detectFeatures()+0x7b0>
c00192f0:	50                   	push   eax
c00192f1:	50                   	push   eax
c00192f2:	68 dd b9 02 c0       	push   0xc002b9dd
c00192f7:	e9 a5 01 00 00       	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c00192fc:	83 f8 04             	cmp    eax,0x4
c00192ff:	75 0c                	jne    c001930d <CPU::detectFeatures()+0x7c1>
c0019301:	50                   	push   eax
c0019302:	50                   	push   eax
c0019303:	68 e9 b9 02 c0       	push   0xc002b9e9
c0019308:	e9 94 01 00 00       	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c001930d:	83 f8 03             	cmp    eax,0x3
c0019310:	0f 85 19 02 00 00    	jne    c001952f <CPU::detectFeatures()+0x9e3>
c0019316:	50                   	push   eax
c0019317:	50                   	push   eax
c0019318:	68 f1 b9 02 c0       	push   0xc002b9f1
c001931d:	e9 7f 01 00 00       	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c0019322:	80 fa 06             	cmp    dl,0x6
c0019325:	0f 85 db 00 00 00    	jne    c0019406 <CPU::detectFeatures()+0x8ba>
c001932b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019331:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019336:	66 81 fa 80 01       	cmp    dx,0x180
c001933b:	75 0c                	jne    c0019349 <CPU::detectFeatures()+0x7fd>
c001933d:	50                   	push   eax
c001933e:	50                   	push   eax
c001933f:	68 fc b9 02 c0       	push   0xc002b9fc
c0019344:	e9 58 01 00 00       	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c0019349:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001934f:	66 f7 c1 80 ff       	test   cx,0xff80
c0019354:	75 0c                	jne    c0019362 <CPU::detectFeatures()+0x816>
c0019356:	50                   	push   eax
c0019357:	50                   	push   eax
c0019358:	68 0c ba 02 c0       	push   0xc002ba0c
c001935d:	e9 3f 01 00 00       	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c0019362:	66 81 fa 40 02       	cmp    dx,0x240
c0019367:	75 0c                	jne    c0019375 <CPU::detectFeatures()+0x829>
c0019369:	55                   	push   ebp
c001936a:	55                   	push   ebp
c001936b:	68 13 ba 02 c0       	push   0xc002ba13
c0019370:	e9 2c 01 00 00       	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c0019375:	66 81 fa 80 02       	cmp    dx,0x280
c001937a:	75 0c                	jne    c0019388 <CPU::detectFeatures()+0x83c>
c001937c:	57                   	push   edi
c001937d:	57                   	push   edi
c001937e:	68 1c ba 02 c0       	push   0xc002ba1c
c0019383:	e9 19 01 00 00       	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c0019388:	66 81 fa 40 03       	cmp    dx,0x340
c001938d:	74 ed                	je     c001937c <CPU::detectFeatures()+0x830>
c001938f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019394:	75 0c                	jne    c00193a2 <CPU::detectFeatures()+0x856>
c0019396:	56                   	push   esi
c0019397:	56                   	push   esi
c0019398:	68 23 ba 02 c0       	push   0xc002ba23
c001939d:	e9 ff 00 00 00       	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c00193a2:	83 f8 06             	cmp    eax,0x6
c00193a5:	0f 84 45 ff ff ff    	je     c00192f0 <CPU::detectFeatures()+0x7a4>
c00193ab:	83 f8 04             	cmp    eax,0x4
c00193ae:	0f 84 4d ff ff ff    	je     c0019301 <CPU::detectFeatures()+0x7b5>
c00193b4:	83 f8 03             	cmp    eax,0x3
c00193b7:	0f 85 72 01 00 00    	jne    c001952f <CPU::detectFeatures()+0x9e3>
c00193bd:	51                   	push   ecx
c00193be:	51                   	push   ecx
c00193bf:	68 2c ba 02 c0       	push   0xc002ba2c
c00193c4:	53                   	push   ebx
c00193c5:	e8 8c aa ff ff       	call   c0013e56 <Device::setName(char const*)>
c00193ca:	b1 c1                	mov    cl,0xc1
c00193cc:	88 c8                	mov    al,cl
c00193ce:	e6 22                	out    0x22,al
c00193d0:	e4 23                	in     al,0x23
c00193d2:	88 c2                	mov    dl,al
c00193d4:	88 c8                	mov    al,cl
c00193d6:	e6 22                	out    0x22,al
c00193d8:	88 d0                	mov    al,dl
c00193da:	83 c8 10             	or     eax,0x10
c00193dd:	e6 23                	out    0x23,al
c00193df:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00193e6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00193e9:	89 d0                	mov    eax,edx
c00193eb:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00193f1:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00193f5:	40                   	inc    eax
c00193f6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00193fc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019401:	e9 a1 00 00 00       	jmp    c00194a7 <CPU::detectFeatures()+0x95b>
c0019406:	83 f8 06             	cmp    eax,0x6
c0019409:	0f 84 e1 fe ff ff    	je     c00192f0 <CPU::detectFeatures()+0x7a4>
c001940f:	83 f8 04             	cmp    eax,0x4
c0019412:	0f 84 e9 fe ff ff    	je     c0019301 <CPU::detectFeatures()+0x7b5>
c0019418:	83 f8 03             	cmp    eax,0x3
c001941b:	0f 85 0e 01 00 00    	jne    c001952f <CPU::detectFeatures()+0x9e3>
c0019421:	52                   	push   edx
c0019422:	52                   	push   edx
c0019423:	68 37 ba 02 c0       	push   0xc002ba37
c0019428:	eb 77                	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c001942a:	83 f8 07             	cmp    eax,0x7
c001942d:	75 09                	jne    c0019438 <CPU::detectFeatures()+0x8ec>
c001942f:	50                   	push   eax
c0019430:	50                   	push   eax
c0019431:	68 41 ba 02 c0       	push   0xc002ba41
c0019436:	eb 69                	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c0019438:	83 f8 0a             	cmp    eax,0xa
c001943b:	75 09                	jne    c0019446 <CPU::detectFeatures()+0x8fa>
c001943d:	50                   	push   eax
c001943e:	50                   	push   eax
c001943f:	68 4c ba 02 c0       	push   0xc002ba4c
c0019444:	eb 5b                	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c0019446:	83 f8 0b             	cmp    eax,0xb
c0019449:	75 09                	jne    c0019454 <CPU::detectFeatures()+0x908>
c001944b:	50                   	push   eax
c001944c:	50                   	push   eax
c001944d:	68 54 ba 02 c0       	push   0xc002ba54
c0019452:	eb 4d                	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c0019454:	83 f8 08             	cmp    eax,0x8
c0019457:	75 09                	jne    c0019462 <CPU::detectFeatures()+0x916>
c0019459:	50                   	push   eax
c001945a:	50                   	push   eax
c001945b:	68 5d ba 02 c0       	push   0xc002ba5d
c0019460:	eb 3f                	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c0019462:	83 f8 09             	cmp    eax,0x9
c0019465:	75 09                	jne    c0019470 <CPU::detectFeatures()+0x924>
c0019467:	50                   	push   eax
c0019468:	50                   	push   eax
c0019469:	68 65 ba 02 c0       	push   0xc002ba65
c001946e:	eb 31                	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c0019470:	83 f8 05             	cmp    eax,0x5
c0019473:	75 09                	jne    c001947e <CPU::detectFeatures()+0x932>
c0019475:	50                   	push   eax
c0019476:	50                   	push   eax
c0019477:	68 6d ba 02 c0       	push   0xc002ba6d
c001947c:	eb 23                	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c001947e:	83 f8 0c             	cmp    eax,0xc
c0019481:	75 09                	jne    c001948c <CPU::detectFeatures()+0x940>
c0019483:	55                   	push   ebp
c0019484:	55                   	push   ebp
c0019485:	68 7b ba 02 c0       	push   0xc002ba7b
c001948a:	eb 15                	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c001948c:	83 f8 0d             	cmp    eax,0xd
c001948f:	75 09                	jne    c001949a <CPU::detectFeatures()+0x94e>
c0019491:	57                   	push   edi
c0019492:	57                   	push   edi
c0019493:	68 86 ba 02 c0       	push   0xc002ba86
c0019498:	eb 07                	jmp    c00194a1 <CPU::detectFeatures()+0x955>
c001949a:	56                   	push   esi
c001949b:	56                   	push   esi
c001949c:	68 9a ba 02 c0       	push   0xc002ba9a
c00194a1:	53                   	push   ebx
c00194a2:	e8 af a9 ff ff       	call   c0013e56 <Device::setName(char const*)>
c00194a7:	83 c4 10             	add    esp,0x10
c00194aa:	e9 80 00 00 00       	jmp    c001952f <CPU::detectFeatures()+0x9e3>
c00194af:	51                   	push   ecx
c00194b0:	51                   	push   ecx
c00194b1:	68 e6 b8 02 c0       	push   0xc002b8e6
c00194b6:	55                   	push   ebp
c00194b7:	e8 50 73 fe ff       	call   c000080c <strcpy>
c00194bc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00194c6:	e8 e3 6d fe ff       	call   c00002ae <is486>
c00194cb:	83 c4 10             	add    esp,0x10
c00194ce:	85 c0                	test   eax,eax
c00194d0:	74 2b                	je     c00194fd <CPU::detectFeatures()+0x9b1>
c00194d2:	52                   	push   edx
c00194d3:	52                   	push   edx
c00194d4:	68 a6 ba 02 c0       	push   0xc002baa6
c00194d9:	53                   	push   ebx
c00194da:	e8 77 a9 ff ff       	call   c0013e56 <Device::setName(char const*)>
c00194df:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00194e6:	0f 20 c0             	mov    eax,cr0
c00194e9:	83 e0 14             	and    eax,0x14
c00194ec:	83 c4 10             	add    esp,0x10
c00194ef:	83 f8 04             	cmp    eax,0x4
c00194f2:	75 1f                	jne    c0019513 <CPU::detectFeatures()+0x9c7>
c00194f4:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00194fb:	eb 32                	jmp    c001952f <CPU::detectFeatures()+0x9e3>
c00194fd:	50                   	push   eax
c00194fe:	50                   	push   eax
c00194ff:	68 b1 ba 02 c0       	push   0xc002bab1
c0019504:	53                   	push   ebx
c0019505:	e8 4c a9 ff ff       	call   c0013e56 <Device::setName(char const*)>
c001950a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019511:	eb d3                	jmp    c00194e6 <CPU::detectFeatures()+0x99a>
c0019513:	e8 71 6d fe ff       	call   c0000289 <hasLegacyFPU>
c0019518:	83 e0 01             	and    eax,0x1
c001951b:	8d 14 00             	lea    edx,[eax+eax*1]
c001951e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019524:	83 e0 fd             	and    eax,0xfffffffd
c0019527:	09 d0                	or     eax,edx
c0019529:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001952f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019536:	83 c4 4c             	add    esp,0x4c
c0019539:	5b                   	pop    ebx
c001953a:	5e                   	pop    esi
c001953b:	5f                   	pop    edi
c001953c:	5d                   	pop    ebp
c001953d:	c3                   	ret    

c001953e <CPU::setupSMEP()>:
c001953e:	0f 20 e0             	mov    eax,cr4
c0019541:	0d 00 00 10 00       	or     eax,0x100000
c0019546:	0f 22 e0             	mov    cr4,eax
c0019549:	c3                   	ret    

c001954a <CPU::setupUMIP()>:
c001954a:	0f 20 e0             	mov    eax,cr4
c001954d:	80 cc 08             	or     ah,0x8
c0019550:	0f 22 e0             	mov    cr4,eax
c0019553:	c3                   	ret    

c0019554 <CPU::setupTSC()>:
c0019554:	0f 20 e0             	mov    eax,cr4
c0019557:	83 c8 04             	or     eax,0x4
c001955a:	0f 22 e0             	mov    cr4,eax
c001955d:	c3                   	ret    

c001955e <CPU::setupLargePages()>:
c001955e:	0f 20 e0             	mov    eax,cr4
c0019561:	83 c8 10             	or     eax,0x10
c0019564:	0f 22 e0             	mov    cr4,eax
c0019567:	c3                   	ret    

c0019568 <CPU::setupPAT()>:
c0019568:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001956d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019574:	74 2c                	je     c00195a2 <CPU::setupPAT()+0x3a>
c0019576:	53                   	push   ebx
c0019577:	83 ec 10             	sub    esp,0x10
c001957a:	68 77 02 00 00       	push   0x277
c001957f:	50                   	push   eax
c0019580:	e8 f1 57 ff ff       	call   c000ed76 <Computer::rdmsr(unsigned int)>
c0019585:	83 e2 f8             	and    edx,0xfffffff8
c0019588:	83 ca 01             	or     edx,0x1
c001958b:	52                   	push   edx
c001958c:	50                   	push   eax
c001958d:	68 77 02 00 00       	push   0x277
c0019592:	ff 35 28 df 02 c0    	push   DWORD PTR ds:0xc002df28
c0019598:	e8 05 58 ff ff       	call   c000eda2 <Computer::wrmsr(unsigned int, unsigned long long)>
c001959d:	83 c4 28             	add    esp,0x28
c00195a0:	5b                   	pop    ebx
c00195a1:	c3                   	ret    
c00195a2:	c3                   	ret    
c00195a3:	90                   	nop

c00195a4 <CPU::setupMTRR()>:
c00195a4:	c3                   	ret    
c00195a5:	90                   	nop

c00195a6 <CPU::setupGlobalPages()>:
c00195a6:	0f 20 e0             	mov    eax,cr4
c00195a9:	0c 80                	or     al,0x80
c00195ab:	0f 22 e0             	mov    cr4,eax
c00195ae:	c3                   	ret    
c00195af:	90                   	nop

c00195b0 <CPU::allowUsermodeDataAccess()>:
c00195b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195b4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00195bb:	74 03                	je     c00195c0 <CPU::allowUsermodeDataAccess()+0x10>
c00195bd:	0f 01 cb             	stac   
c00195c0:	c3                   	ret    
c00195c1:	90                   	nop

c00195c2 <CPU::prohibitUsermodeDataAccess()>:
c00195c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195c6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00195cd:	74 03                	je     c00195d2 <CPU::prohibitUsermodeDataAccess()+0x10>
c00195cf:	0f 01 ca             	clac   
c00195d2:	c3                   	ret    
c00195d3:	90                   	nop

c00195d4 <CPU::setupSMAP()>:
c00195d4:	0f 20 e0             	mov    eax,cr4
c00195d7:	0d 00 00 20 00       	or     eax,0x200000
c00195dc:	0f 22 e0             	mov    cr4,eax
c00195df:	eb e1                	jmp    c00195c2 <CPU::prohibitUsermodeDataAccess()>
c00195e1:	90                   	nop

c00195e2 <CPU::setupFeatures()>:
c00195e2:	83 ec 0c             	sub    esp,0xc
c00195e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00195e9:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00195f0:	74 07                	je     c00195f9 <CPU::setupFeatures()+0x17>
c00195f2:	52                   	push   edx
c00195f3:	e8 46 ff ff ff       	call   c001953e <CPU::setupSMEP()>
c00195f8:	58                   	pop    eax
c00195f9:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019600:	74 07                	je     c0019609 <CPU::setupFeatures()+0x27>
c0019602:	52                   	push   edx
c0019603:	e8 cc ff ff ff       	call   c00195d4 <CPU::setupSMAP()>
c0019608:	58                   	pop    eax
c0019609:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019610:	74 07                	je     c0019619 <CPU::setupFeatures()+0x37>
c0019612:	52                   	push   edx
c0019613:	e8 32 ff ff ff       	call   c001954a <CPU::setupUMIP()>
c0019618:	58                   	pop    eax
c0019619:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019620:	74 07                	je     c0019629 <CPU::setupFeatures()+0x47>
c0019622:	52                   	push   edx
c0019623:	e8 2c ff ff ff       	call   c0019554 <CPU::setupTSC()>
c0019628:	58                   	pop    eax
c0019629:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019630:	74 07                	je     c0019639 <CPU::setupFeatures()+0x57>
c0019632:	52                   	push   edx
c0019633:	e8 26 ff ff ff       	call   c001955e <CPU::setupLargePages()>
c0019638:	59                   	pop    ecx
c0019639:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019640:	74 07                	je     c0019649 <CPU::setupFeatures()+0x67>
c0019642:	52                   	push   edx
c0019643:	e8 5e ff ff ff       	call   c00195a6 <CPU::setupGlobalPages()>
c0019648:	58                   	pop    eax
c0019649:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019650:	74 0c                	je     c001965e <CPU::setupFeatures()+0x7c>
c0019652:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019656:	83 c4 0c             	add    esp,0xc
c0019659:	e9 0a ff ff ff       	jmp    c0019568 <CPU::setupPAT()>
c001965e:	83 c4 0c             	add    esp,0xc
c0019661:	c3                   	ret    

c0019662 <CPU::open(int, int, void*)>:
c0019662:	57                   	push   edi
c0019663:	56                   	push   esi
c0019664:	53                   	push   ebx
c0019665:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019669:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001966d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019673:	83 ec 0c             	sub    esp,0xc
c0019676:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001967c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019682:	50                   	push   eax
c0019683:	e8 dc 59 ff ff       	call   c000f064 <GDT::setup()>
c0019688:	83 c4 0c             	add    esp,0xc
c001968b:	6a 00                	push   0x0
c001968d:	68 ef be ad de       	push   0xdeadbeef
c0019692:	57                   	push   edi
c0019693:	e8 44 77 ff ff       	call   c0010ddc <TSS::setup(unsigned long, unsigned long)>
c0019698:	89 3c 24             	mov    DWORD PTR [esp],edi
c001969b:	e8 1c 77 ff ff       	call   c0010dbc <TSS::flush()>
c00196a0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00196a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00196a9:	e8 1a 5c ff ff       	call   c000f2c8 <IDT::setup()>
c00196ae:	b8 00 04 00 00       	mov    eax,0x400
c00196b3:	0f 23 f8             	mov    db7,eax
c00196b6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00196c0:	e8 06 65 ff ff       	call   c000fbcb <Phys::allocatePage()>
c00196c5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00196cb:	89 30                	mov    DWORD PTR [eax],esi
c00196cd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00196d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00196d6:	58                   	pop    eax
c00196d7:	5a                   	pop    edx
c00196d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00196de:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00196e2:	e8 ef 86 ff ff       	call   c0011dd6 <VAS::setCPUSpecific(unsigned long)>
c00196e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00196ea:	e8 5d f4 ff ff       	call   c0018b4c <CPU::detectFeatures()>
c00196ef:	e8 bc bb ff ff       	call   c00152b0 <setupInterruptController()>
c00196f4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00196fa:	a1 40 df 02 c0       	mov    eax,ds:0xc002df40
c00196ff:	83 e0 10             	and    eax,0x10
c0019702:	83 f8 01             	cmp    eax,0x1
c0019705:	19 c0                	sbb    eax,eax
c0019707:	83 e0 46             	and    eax,0x46
c001970a:	83 c0 1e             	add    eax,0x1e
c001970d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019710:	e8 88 d1 ff ff       	call   c001689d <setupTimer(int)>
c0019715:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001971b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001971e:	e8 bf fe ff ff       	call   c00195e2 <CPU::setupFeatures()>
c0019723:	83 c4 10             	add    esp,0x10
c0019726:	31 c0                	xor    eax,eax
c0019728:	5b                   	pop    ebx
c0019729:	5e                   	pop    esi
c001972a:	5f                   	pop    edi
c001972b:	c3                   	ret    

c001972c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001972c:	57                   	push   edi
c001972d:	56                   	push   esi
c001972e:	53                   	push   ebx
c001972f:	51                   	push   ecx
c0019730:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019734:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019737:	0f 02 c0             	lar    eax,ax
c001973a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001973d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019741:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019744:	88 ca                	mov    dl,cl
c0019746:	c0 ea 06             	shr    dl,0x6
c0019749:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001974d:	89 ca                	mov    edx,ecx
c001974f:	66 c1 ea 03          	shr    dx,0x3
c0019753:	83 e2 07             	and    edx,0x7
c0019756:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001975b:	88 17                	mov    BYTE PTR [edi],dl
c001975d:	0f 84 a6 01 00 00    	je     c0019909 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019763:	83 e1 07             	and    ecx,0x7
c0019766:	80 f9 04             	cmp    cl,0x4
c0019769:	0f 84 98 00 00 00    	je     c0019807 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001976f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019774:	0f 95 c0             	setne  al
c0019777:	80 f9 05             	cmp    cl,0x5
c001977a:	0f 95 c2             	setne  dl
c001977d:	08 c2                	or     dl,al
c001977f:	74 79                	je     c00197fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019781:	84 c9                	test   cl,cl
c0019783:	75 05                	jne    c001978a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019785:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019788:	eb 3c                	jmp    c00197c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001978a:	80 f9 01             	cmp    cl,0x1
c001978d:	75 05                	jne    c0019794 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001978f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019792:	eb 32                	jmp    c00197c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019794:	80 f9 02             	cmp    cl,0x2
c0019797:	75 05                	jne    c001979e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019799:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001979c:	eb 28                	jmp    c00197c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001979e:	31 c0                	xor    eax,eax
c00197a0:	80 f9 03             	cmp    cl,0x3
c00197a3:	75 05                	jne    c00197aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00197a5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00197a8:	eb 1c                	jmp    c00197c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00197aa:	80 f9 05             	cmp    cl,0x5
c00197ad:	75 05                	jne    c00197b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00197af:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00197b2:	eb 12                	jmp    c00197c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00197b4:	80 f9 06             	cmp    cl,0x6
c00197b7:	75 05                	jne    c00197be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00197b9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00197bc:	eb 08                	jmp    c00197c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00197be:	80 f9 07             	cmp    cl,0x7
c00197c1:	75 03                	jne    c00197c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00197c3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00197c6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00197cb:	75 10                	jne    c00197dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00197cd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00197d1:	b9 03 00 00 00       	mov    ecx,0x3
c00197d6:	01 d0                	add    eax,edx
c00197d8:	e9 37 01 00 00       	jmp    c0019914 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00197dd:	b9 02 00 00 00       	mov    ecx,0x2
c00197e2:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00197e7:	0f 85 27 01 00 00    	jne    c0019914 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00197ed:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00197f0:	b9 06 00 00 00       	mov    ecx,0x6
c00197f5:	e9 1a 01 00 00       	jmp    c0019914 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00197fa:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00197fd:	b9 06 00 00 00       	mov    ecx,0x6
c0019802:	e9 0f 01 00 00       	jmp    c0019916 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019807:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001980a:	88 ca                	mov    dl,cl
c001980c:	c0 ea 06             	shr    dl,0x6
c001980f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019813:	89 ca                	mov    edx,ecx
c0019815:	66 c1 ea 03          	shr    dx,0x3
c0019819:	83 e2 07             	and    edx,0x7
c001981c:	80 e1 07             	and    cl,0x7
c001981f:	75 05                	jne    c0019826 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019821:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019824:	eb 4c                	jmp    c0019872 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019826:	80 f9 01             	cmp    cl,0x1
c0019829:	75 05                	jne    c0019830 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001982b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001982e:	eb 42                	jmp    c0019872 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019830:	80 f9 02             	cmp    cl,0x2
c0019833:	75 05                	jne    c001983a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019835:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019838:	eb 38                	jmp    c0019872 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001983a:	80 f9 03             	cmp    cl,0x3
c001983d:	75 05                	jne    c0019844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001983f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019842:	eb 2e                	jmp    c0019872 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019844:	80 f9 04             	cmp    cl,0x4
c0019847:	75 12                	jne    c001985b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019849:	f6 c4 60             	test   ah,0x60
c001984c:	75 08                	jne    c0019856 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001984e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019851:	8d 78 14             	lea    edi,[eax+0x14]
c0019854:	eb 1c                	jmp    c0019872 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019856:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019859:	eb 17                	jmp    c0019872 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001985b:	80 f9 05             	cmp    cl,0x5
c001985e:	75 05                	jne    c0019865 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019860:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019863:	eb 0d                	jmp    c0019872 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019865:	80 f9 06             	cmp    cl,0x6
c0019868:	75 05                	jne    c001986f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001986a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001986d:	eb 03                	jmp    c0019872 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001986f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019872:	84 d2                	test   dl,dl
c0019874:	75 05                	jne    c001987b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019876:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019879:	eb 3c                	jmp    c00198b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001987b:	80 fa 01             	cmp    dl,0x1
c001987e:	75 05                	jne    c0019885 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019880:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019883:	eb 32                	jmp    c00198b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019885:	80 fa 02             	cmp    dl,0x2
c0019888:	75 05                	jne    c001988f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001988a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001988d:	eb 28                	jmp    c00198b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001988f:	80 fa 03             	cmp    dl,0x3
c0019892:	75 05                	jne    c0019899 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019894:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019897:	eb 1e                	jmp    c00198b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019899:	31 c0                	xor    eax,eax
c001989b:	80 fa 04             	cmp    dl,0x4
c001989e:	74 17                	je     c00198b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00198a0:	80 fa 05             	cmp    dl,0x5
c00198a3:	75 05                	jne    c00198aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00198a5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00198a8:	eb 0d                	jmp    c00198b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00198aa:	80 fa 06             	cmp    dl,0x6
c00198ad:	75 05                	jne    c00198b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00198af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00198b2:	eb 03                	jmp    c00198b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00198b4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00198b7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00198bc:	0f 94 c2             	sete   dl
c00198bf:	80 f9 05             	cmp    cl,0x5
c00198c2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00198c6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00198cb:	d3 e0                	shl    eax,cl
c00198cd:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00198d1:	74 0a                	je     c00198dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00198d3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00198d6:	b9 07 00 00 00       	mov    ecx,0x7
c00198db:	eb 37                	jmp    c0019914 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00198dd:	01 f8                	add    eax,edi
c00198df:	b9 03 00 00 00       	mov    ecx,0x3
c00198e4:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00198e9:	74 2b                	je     c0019916 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00198eb:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00198f0:	75 0d                	jne    c00198ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00198f2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00198f6:	01 c8                	add    eax,ecx
c00198f8:	b9 04 00 00 00       	mov    ecx,0x4
c00198fd:	eb 17                	jmp    c0019916 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00198ff:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019902:	b9 07 00 00 00       	mov    ecx,0x7
c0019907:	eb 0d                	jmp    c0019916 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019909:	b9 02 00 00 00       	mov    ecx,0x2
c001990e:	b2 01                	mov    dl,0x1
c0019910:	31 c0                	xor    eax,eax
c0019912:	eb 02                	jmp    c0019916 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019914:	31 d2                	xor    edx,edx
c0019916:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001991a:	89 0b                	mov    DWORD PTR [ebx],ecx
c001991c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019920:	88 11                	mov    BYTE PTR [ecx],dl
c0019922:	5a                   	pop    edx
c0019923:	5b                   	pop    ebx
c0019924:	5e                   	pop    esi
c0019925:	5f                   	pop    edi
c0019926:	c3                   	ret    

c0019927 <Krnl::smpEntry()>:
c0019927:	eb fe                	jmp    c0019927 <Krnl::smpEntry()>

c0019929 <Krnl::startCPU(int)>:
c0019929:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001992e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019935:	0f 84 36 01 00 00    	je     c0019a71 <Krnl::startCPU(int)+0x148>
c001993b:	53                   	push   ebx
c001993c:	83 ec 10             	sub    esp,0x10
c001993f:	fa                   	cli    
c0019940:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c0019946:	6a 1b                	push   0x1b
c0019948:	ff 35 28 df 02 c0    	push   DWORD PTR ds:0xc002df28
c001994e:	e8 23 54 ff ff       	call   c000ed76 <Computer::rdmsr(unsigned int)>
c0019953:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019958:	89 c3                	mov    ebx,eax
c001995a:	58                   	pop    eax
c001995b:	5a                   	pop    edx
c001995c:	53                   	push   ebx
c001995d:	68 e8 ba 02 c0       	push   0xc002bae8
c0019962:	e8 c0 8e ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0019967:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019971:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019975:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001997f:	c1 e0 18             	shl    eax,0x18
c0019982:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019988:	83 c4 10             	add    esp,0x10
c001998b:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019991:	09 c2                	or     edx,eax
c0019993:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019999:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001999f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00199a5:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00199ab:	80 cd c5             	or     ch,0xc5
c00199ae:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00199b4:	f3 90                	pause  
c00199b6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00199b8:	0f ba e1 0c          	bt     ecx,0xc
c00199bc:	72 f6                	jb     c00199b4 <Krnl::startCPU(int)+0x8b>
c00199be:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00199c4:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00199ca:	09 c1                	or     ecx,eax
c00199cc:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00199d2:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00199d8:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00199de:	80 cd 85             	or     ch,0x85
c00199e1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00199e7:	f3 90                	pause  
c00199e9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00199eb:	0f ba e1 0c          	bt     ecx,0xc
c00199ef:	72 f6                	jb     c00199e7 <Krnl::startCPU(int)+0xbe>
c00199f1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00199fb:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019a01:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019a07:	09 c1                	or     ecx,eax
c0019a09:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019a0f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019a15:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019a1b:	81 c9 02 06 00 00    	or     ecx,0x602
c0019a21:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019a27:	f3 90                	pause  
c0019a29:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019a2b:	0f ba e1 0c          	bt     ecx,0xc
c0019a2f:	72 f6                	jb     c0019a27 <Krnl::startCPU(int)+0xfe>
c0019a31:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019a3b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019a41:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019a47:	09 c8                	or     eax,ecx
c0019a49:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019a4f:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019a55:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019a5a:	0d 02 06 00 00       	or     eax,0x602
c0019a5f:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019a65:	f3 90                	pause  
c0019a67:	8b 02                	mov    eax,DWORD PTR [edx]
c0019a69:	0f ba e0 0c          	bt     eax,0xc
c0019a6d:	72 f6                	jb     c0019a65 <Krnl::startCPU(int)+0x13c>
c0019a6f:	eb fe                	jmp    c0019a6f <Krnl::startCPU(int)+0x146>
c0019a71:	c3                   	ret    

c0019a72 <Krnl::startCPUs()>:
c0019a72:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0019a77:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019a7d:	88 c2                	mov    dl,al
c0019a7f:	83 e2 0a             	and    edx,0xa
c0019a82:	80 fa 0a             	cmp    dl,0xa
c0019a85:	75 09                	jne    c0019a90 <Krnl::startCPUs()+0x1e>
c0019a87:	a8 01                	test   al,0x1
c0019a89:	74 05                	je     c0019a90 <Krnl::startCPUs()+0x1e>
c0019a8b:	e9 0b 67 fe ff       	jmp    c000019b <prepareTramp>
c0019a90:	c3                   	ret    
c0019a91:	90                   	nop

c0019a92 <EnvVarContainer::getEnv(char const*)>:
c0019a92:	57                   	push   edi
c0019a93:	56                   	push   esi
c0019a94:	53                   	push   ebx
c0019a95:	31 db                	xor    ebx,ebx
c0019a97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a9b:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019a9d:	7e 2b                	jle    c0019aca <EnvVarContainer::getEnv(char const*)+0x38>
c0019a9f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019aa6:	50                   	push   eax
c0019aa7:	50                   	push   eax
c0019aa8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019aab:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019aae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019ab2:	e8 e1 6d fe ff       	call   c0000898 <strcmp>
c0019ab7:	83 c4 10             	add    esp,0x10
c0019aba:	85 c0                	test   eax,eax
c0019abc:	75 09                	jne    c0019ac7 <EnvVarContainer::getEnv(char const*)+0x35>
c0019abe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019ac1:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019ac5:	eb 05                	jmp    c0019acc <EnvVarContainer::getEnv(char const*)+0x3a>
c0019ac7:	43                   	inc    ebx
c0019ac8:	eb d1                	jmp    c0019a9b <EnvVarContainer::getEnv(char const*)+0x9>
c0019aca:	31 c0                	xor    eax,eax
c0019acc:	5b                   	pop    ebx
c0019acd:	5e                   	pop    esi
c0019ace:	5f                   	pop    edi
c0019acf:	c3                   	ret    

c0019ad0 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019ad0:	55                   	push   ebp
c0019ad1:	57                   	push   edi
c0019ad2:	56                   	push   esi
c0019ad3:	53                   	push   ebx
c0019ad4:	83 ec 28             	sub    esp,0x28
c0019ad7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019adb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019adf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019ae3:	56                   	push   esi
c0019ae4:	e8 83 6c fe ff       	call   c000076c <strlen>
c0019ae9:	40                   	inc    eax
c0019aea:	89 04 24             	mov    DWORD PTR [esp],eax
c0019aed:	e8 dd 5c ff ff       	call   c000f7cf <malloc>
c0019af2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019af5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019af9:	e8 6e 6c fe ff       	call   c000076c <strlen>
c0019afe:	40                   	inc    eax
c0019aff:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b02:	e8 c8 5c ff ff       	call   c000f7cf <malloc>
c0019b07:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b0e:	e8 59 6c fe ff       	call   c000076c <strlen>
c0019b13:	83 c4 0c             	add    esp,0xc
c0019b16:	40                   	inc    eax
c0019b17:	50                   	push   eax
c0019b18:	6a 00                	push   0x0
c0019b1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019b1e:	e8 2d 6c fe ff       	call   c0000750 <memset>
c0019b23:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b26:	e8 41 6c fe ff       	call   c000076c <strlen>
c0019b2b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019b2f:	8d 48 01             	lea    ecx,[eax+0x1]
c0019b32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b37:	89 de                	mov    esi,ebx
c0019b39:	e8 2e 6c fe ff       	call   c000076c <strlen>
c0019b3e:	83 c4 0c             	add    esp,0xc
c0019b41:	40                   	inc    eax
c0019b42:	50                   	push   eax
c0019b43:	6a 00                	push   0x0
c0019b45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b49:	e8 02 6c fe ff       	call   c0000750 <memset>
c0019b4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b51:	e8 16 6c fe ff       	call   c000076c <strlen>
c0019b56:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019b5a:	8d 48 01             	lea    ecx,[eax+0x1]
c0019b5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b5f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019b62:	40                   	inc    eax
c0019b63:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019b66:	c1 e0 03             	shl    eax,0x3
c0019b69:	5a                   	pop    edx
c0019b6a:	59                   	pop    ecx
c0019b6b:	50                   	push   eax
c0019b6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019b6f:	e8 47 5c ff ff       	call   c000f7bb <realloc>
c0019b74:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b78:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b7b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019b7e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019b82:	b9 08 00 00 00       	mov    ecx,0x8
c0019b87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b89:	83 c4 2c             	add    esp,0x2c
c0019b8c:	5b                   	pop    ebx
c0019b8d:	5e                   	pop    esi
c0019b8e:	5f                   	pop    edi
c0019b8f:	5d                   	pop    ebp
c0019b90:	c3                   	ret    
c0019b91:	90                   	nop

c0019b92 <EnvVarContainer::deleteEnv(char const*)>:
c0019b92:	c3                   	ret    
c0019b93:	90                   	nop

c0019b94 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019b94:	55                   	push   ebp
c0019b95:	57                   	push   edi
c0019b96:	56                   	push   esi
c0019b97:	53                   	push   ebx
c0019b98:	81 ec 38 01 00 00    	sub    esp,0x138
c0019b9e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019ba5:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019bac:	68 14 01 00 00       	push   0x114
c0019bb1:	e8 19 5c ff ff       	call   c000f7cf <malloc>
c0019bb6:	83 c4 0c             	add    esp,0xc
c0019bb9:	89 c3                	mov    ebx,eax
c0019bbb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019bbe:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019bc5:	50                   	push   eax
c0019bc6:	e8 bb 91 ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c0019bcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019bce:	e8 85 94 ff ff       	call   c0013058 <File::exists()>
c0019bd3:	83 c4 10             	add    esp,0x10
c0019bd6:	84 c0                	test   al,al
c0019bd8:	75 31                	jne    c0019c0b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019bda:	50                   	push   eax
c0019bdb:	50                   	push   eax
c0019bdc:	6a 12                	push   0x12
c0019bde:	53                   	push   ebx
c0019bdf:	e8 06 92 ff ff       	call   c0012dea <File::open(FileOpenMode)>
c0019be4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019be6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019be9:	89 34 24             	mov    DWORD PTR [esp],esi
c0019bec:	e8 7b 6b fe ff       	call   c000076c <strlen>
c0019bf1:	5a                   	pop    edx
c0019bf2:	31 d2                	xor    edx,edx
c0019bf4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019bf8:	51                   	push   ecx
c0019bf9:	56                   	push   esi
c0019bfa:	52                   	push   edx
c0019bfb:	50                   	push   eax
c0019bfc:	53                   	push   ebx
c0019bfd:	ff d7                	call   edi
c0019bff:	83 c4 14             	add    esp,0x14
c0019c02:	53                   	push   ebx
c0019c03:	e8 40 92 ff ff       	call   c0012e48 <File::close()>
c0019c08:	83 c4 10             	add    esp,0x10
c0019c0b:	56                   	push   esi
c0019c0c:	31 f6                	xor    esi,esi
c0019c0e:	68 00 01 00 00       	push   0x100
c0019c13:	6a 00                	push   0x0
c0019c15:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019c19:	50                   	push   eax
c0019c1a:	e8 31 6b fe ff       	call   c0000750 <memset>
c0019c1f:	5f                   	pop    edi
c0019c20:	58                   	pop    eax
c0019c21:	6a 01                	push   0x1
c0019c23:	53                   	push   ebx
c0019c24:	e8 c1 91 ff ff       	call   c0012dea <File::open(FileOpenMode)>
c0019c29:	83 c4 10             	add    esp,0x10
c0019c2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019c34:	83 ec 0c             	sub    esp,0xc
c0019c37:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c39:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019c3d:	51                   	push   ecx
c0019c3e:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019c42:	52                   	push   edx
c0019c43:	6a 00                	push   0x0
c0019c45:	6a 01                	push   0x1
c0019c47:	53                   	push   ebx
c0019c48:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c4b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019c4f:	83 c4 20             	add    esp,0x20
c0019c52:	3c 0d                	cmp    al,0xd
c0019c54:	0f 84 09 01 00 00    	je     c0019d63 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019c5a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019c5f:	0f 84 ef 00 00 00    	je     c0019d54 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019c65:	3c 0a                	cmp    al,0xa
c0019c67:	74 13                	je     c0019c7c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019c69:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c6e:	74 0c                	je     c0019c7c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019c70:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019c76:	0f 8e d8 00 00 00    	jle    c0019d54 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019c7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c80:	83 ec 0c             	sub    esp,0xc
c0019c83:	8d 78 01             	lea    edi,[eax+0x1]
c0019c86:	57                   	push   edi
c0019c87:	e8 43 5b ff ff       	call   c000f7cf <malloc>
c0019c8c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019c90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019c94:	8d 56 04             	lea    edx,[esi+0x4]
c0019c97:	89 14 24             	mov    DWORD PTR [esp],edx
c0019c9a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019c9e:	e8 2c 5b ff ff       	call   c000f7cf <malloc>
c0019ca3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019ca7:	83 c4 0c             	add    esp,0xc
c0019caa:	57                   	push   edi
c0019cab:	6a 00                	push   0x0
c0019cad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019cb1:	e8 9a 6a fe ff       	call   c0000750 <memset>
c0019cb6:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019cba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019cbe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019cc2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019cc4:	83 c4 0c             	add    esp,0xc
c0019cc7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ccb:	52                   	push   edx
c0019ccc:	6a 00                	push   0x0
c0019cce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cd2:	e8 79 6a fe ff       	call   c0000750 <memset>
c0019cd7:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019cdb:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019cdf:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ce2:	e8 85 6a fe ff       	call   c000076c <strlen>
c0019ce7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019ceb:	89 c1                	mov    ecx,eax
c0019ced:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019cef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019cf2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019cf5:	40                   	inc    eax
c0019cf6:	83 c4 10             	add    esp,0x10
c0019cf9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019cfc:	85 d2                	test   edx,edx
c0019cfe:	75 0c                	jne    c0019d0c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019d00:	83 ec 0c             	sub    esp,0xc
c0019d03:	6a 08                	push   0x8
c0019d05:	e8 c5 5a ff ff       	call   c000f7cf <malloc>
c0019d0a:	eb 0c                	jmp    c0019d18 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019d0c:	c1 e0 03             	shl    eax,0x3
c0019d0f:	51                   	push   ecx
c0019d10:	51                   	push   ecx
c0019d11:	50                   	push   eax
c0019d12:	52                   	push   edx
c0019d13:	e8 a3 5a ff ff       	call   c000f7bb <realloc>
c0019d18:	83 c4 10             	add    esp,0x10
c0019d1b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019d1e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019d21:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019d24:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019d28:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019d2c:	b9 08 00 00 00       	mov    ecx,0x8
c0019d31:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d33:	31 f6                	xor    esi,esi
c0019d35:	50                   	push   eax
c0019d36:	68 00 01 00 00       	push   0x100
c0019d3b:	6a 00                	push   0x0
c0019d3d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019d41:	50                   	push   eax
c0019d42:	e8 09 6a fe ff       	call   c0000750 <memset>
c0019d47:	83 c4 10             	add    esp,0x10
c0019d4a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019d52:	eb 0f                	jmp    c0019d63 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019d54:	3c 3d                	cmp    al,0x3d
c0019d56:	74 07                	je     c0019d5f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019d58:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019d5c:	46                   	inc    esi
c0019d5d:	eb 04                	jmp    c0019d63 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019d5f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019d63:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019d68:	0f 85 c6 fe ff ff    	jne    c0019c34 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019d6e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019d74:	5b                   	pop    ebx
c0019d75:	5e                   	pop    esi
c0019d76:	5f                   	pop    edi
c0019d77:	5d                   	pop    ebp
c0019d78:	c3                   	ret    
c0019d79:	90                   	nop

c0019d7a <EnvVarContainer::__loadSystem()>:
c0019d7a:	83 ec 10             	sub    esp,0x10
c0019d7d:	68 60 d4 02 c0       	push   0xc002d460
c0019d82:	68 f9 ba 02 c0       	push   0xc002baf9
c0019d87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d8b:	e8 04 fe ff ff       	call   c0019b94 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019d90:	83 c4 1c             	add    esp,0x1c
c0019d93:	c3                   	ret    

c0019d94 <EnvVarContainer::__loadUser()>:
c0019d94:	c3                   	ret    
c0019d95:	90                   	nop

c0019d96 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019d96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019da4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019da8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019dab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019daf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019db6:	90                   	nop
c0019db7:	c3                   	ret    

c0019db8 <EnvVarContainer::~EnvVarContainer()>:
c0019db8:	83 ec 0c             	sub    esp,0xc
c0019dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019dc2:	85 c0                	test   eax,eax
c0019dc4:	74 1d                	je     c0019de3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dca:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dcc:	85 c0                	test   eax,eax
c0019dce:	74 13                	je     c0019de3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019dd7:	83 ec 0c             	sub    esp,0xc
c0019dda:	50                   	push   eax
c0019ddb:	e8 ff 59 ff ff       	call   c000f7df <free>
c0019de0:	83 c4 10             	add    esp,0x10
c0019de3:	90                   	nop
c0019de4:	83 c4 0c             	add    esp,0xc
c0019de7:	c3                   	ret    

c0019de8 <Krnl::getEnv(Process*, char const*)>:
c0019de8:	53                   	push   ebx
c0019de9:	83 ec 08             	sub    esp,0x8
c0019dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019df0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019df4:	39 05 50 f4 02 c0    	cmp    DWORD PTR ds:0xc002f450,eax
c0019dfa:	74 04                	je     c0019e00 <Krnl::getEnv(Process*, char const*)+0x18>
c0019dfc:	85 c0                	test   eax,eax
c0019dfe:	75 0b                	jne    c0019e0b <Krnl::getEnv(Process*, char const*)+0x23>
c0019e00:	a1 34 ea 02 c0       	mov    eax,ds:0xc002ea34
c0019e05:	85 c0                	test   eax,eax
c0019e07:	75 19                	jne    c0019e22 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019e09:	eb 27                	jmp    c0019e32 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019e0b:	52                   	push   edx
c0019e0c:	52                   	push   edx
c0019e0d:	53                   	push   ebx
c0019e0e:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019e14:	e8 79 fc ff ff       	call   c0019a92 <EnvVarContainer::getEnv(char const*)>
c0019e19:	83 c4 10             	add    esp,0x10
c0019e1c:	85 c0                	test   eax,eax
c0019e1e:	75 28                	jne    c0019e48 <Krnl::getEnv(Process*, char const*)+0x60>
c0019e20:	eb de                	jmp    c0019e00 <Krnl::getEnv(Process*, char const*)+0x18>
c0019e22:	52                   	push   edx
c0019e23:	52                   	push   edx
c0019e24:	53                   	push   ebx
c0019e25:	50                   	push   eax
c0019e26:	e8 67 fc ff ff       	call   c0019a92 <EnvVarContainer::getEnv(char const*)>
c0019e2b:	83 c4 10             	add    esp,0x10
c0019e2e:	85 c0                	test   eax,eax
c0019e30:	75 16                	jne    c0019e48 <Krnl::getEnv(Process*, char const*)+0x60>
c0019e32:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019e36:	a1 38 ea 02 c0       	mov    eax,ds:0xc002ea38
c0019e3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019e3f:	83 c4 08             	add    esp,0x8
c0019e42:	5b                   	pop    ebx
c0019e43:	e9 4a fc ff ff       	jmp    c0019a92 <EnvVarContainer::getEnv(char const*)>
c0019e48:	83 c4 08             	add    esp,0x8
c0019e4b:	5b                   	pop    ebx
c0019e4c:	c3                   	ret    

c0019e4d <Krnl::setEnvSystem(char const*, char const*)>:
c0019e4d:	83 ec 10             	sub    esp,0x10
c0019e50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e58:	ff 35 38 ea 02 c0    	push   DWORD PTR ds:0xc002ea38
c0019e5e:	e8 6d fc ff ff       	call   c0019ad0 <EnvVarContainer::setEnv(char const*, char const*)>
c0019e63:	83 c4 1c             	add    esp,0x1c
c0019e66:	c3                   	ret    

c0019e67 <Krnl::setEnvUser(char const*, char const*)>:
c0019e67:	a1 34 ea 02 c0       	mov    eax,ds:0xc002ea34
c0019e6c:	85 c0                	test   eax,eax
c0019e6e:	74 15                	je     c0019e85 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019e70:	83 ec 10             	sub    esp,0x10
c0019e73:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e7b:	50                   	push   eax
c0019e7c:	e8 4f fc ff ff       	call   c0019ad0 <EnvVarContainer::setEnv(char const*, char const*)>
c0019e81:	83 c4 1c             	add    esp,0x1c
c0019e84:	c3                   	ret    
c0019e85:	c3                   	ret    

c0019e86 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e8a:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019e94:	e9 37 fc ff ff       	jmp    c0019ad0 <EnvVarContainer::setEnv(char const*, char const*)>

c0019e99 <Krnl::deleteEnvSystem(char const*)>:
c0019e99:	c3                   	ret    

c0019e9a <Krnl::deleteEnvUser(char const*)>:
c0019e9a:	c3                   	ret    

c0019e9b <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019e9b:	c3                   	ret    

c0019e9c <Krnl::newProcessEnv(Process*)>:
c0019e9c:	83 ec 28             	sub    esp,0x28
c0019e9f:	6a 0c                	push   0xc
c0019ea1:	e8 29 59 ff ff       	call   c000f7cf <malloc>
c0019ea6:	5a                   	pop    edx
c0019ea7:	59                   	pop    ecx
c0019ea8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019eac:	50                   	push   eax
c0019ead:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019eb1:	e8 e0 fe ff ff       	call   c0019d96 <EnvVarContainer::EnvVarContainer(Process*)>
c0019eb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019eba:	83 c4 2c             	add    esp,0x2c
c0019ebd:	c3                   	ret    

c0019ebe <Krnl::copyProcessEnv(Process*, Process*)>:
c0019ebe:	57                   	push   edi
c0019ebf:	56                   	push   esi
c0019ec0:	53                   	push   ebx
c0019ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ec5:	83 ec 0c             	sub    esp,0xc
c0019ec8:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019ece:	6a 0c                	push   0xc
c0019ed0:	e8 fa 58 ff ff       	call   c000f7cf <malloc>
c0019ed5:	89 c3                	mov    ebx,eax
c0019ed7:	58                   	pop    eax
c0019ed8:	5a                   	pop    edx
c0019ed9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019edd:	53                   	push   ebx
c0019ede:	e8 b3 fe ff ff       	call   c0019d96 <EnvVarContainer::EnvVarContainer(Process*)>
c0019ee3:	8b 07                	mov    eax,DWORD PTR [edi]
c0019ee5:	89 03                	mov    DWORD PTR [ebx],eax
c0019ee7:	c1 e0 03             	shl    eax,0x3
c0019eea:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eed:	e8 dd 58 ff ff       	call   c000f7cf <malloc>
c0019ef2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019ef5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019ef7:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019efa:	c1 e1 03             	shl    ecx,0x3
c0019efd:	89 c7                	mov    edi,eax
c0019eff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f01:	83 c4 10             	add    esp,0x10
c0019f04:	89 d8                	mov    eax,ebx
c0019f06:	5b                   	pop    ebx
c0019f07:	5e                   	pop    esi
c0019f08:	5f                   	pop    edi
c0019f09:	c3                   	ret    

c0019f0a <Krnl::loadSystemEnv()>:
c0019f0a:	53                   	push   ebx
c0019f0b:	83 ec 14             	sub    esp,0x14
c0019f0e:	6a 0c                	push   0xc
c0019f10:	e8 ba 58 ff ff       	call   c000f7cf <malloc>
c0019f15:	89 c3                	mov    ebx,eax
c0019f17:	58                   	pop    eax
c0019f18:	5a                   	pop    edx
c0019f19:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c0019f1f:	53                   	push   ebx
c0019f20:	e8 71 fe ff ff       	call   c0019d96 <EnvVarContainer::EnvVarContainer(Process*)>
c0019f25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f28:	89 1d 38 ea 02 c0    	mov    DWORD PTR ds:0xc002ea38,ebx
c0019f2e:	e8 47 fe ff ff       	call   c0019d7a <EnvVarContainer::__loadSystem()>
c0019f33:	83 c4 18             	add    esp,0x18
c0019f36:	5b                   	pop    ebx
c0019f37:	c3                   	ret    

c0019f38 <Krnl::loadUserEnv()>:
c0019f38:	53                   	push   ebx
c0019f39:	83 ec 14             	sub    esp,0x14
c0019f3c:	6a 0c                	push   0xc
c0019f3e:	e8 8c 58 ff ff       	call   c000f7cf <malloc>
c0019f43:	89 c3                	mov    ebx,eax
c0019f45:	58                   	pop    eax
c0019f46:	5a                   	pop    edx
c0019f47:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c0019f4d:	53                   	push   ebx
c0019f4e:	e8 43 fe ff ff       	call   c0019d96 <EnvVarContainer::EnvVarContainer(Process*)>
c0019f53:	89 1d 34 ea 02 c0    	mov    DWORD PTR ds:0xc002ea34,ebx
c0019f59:	83 c4 18             	add    esp,0x18
c0019f5c:	5b                   	pop    ebx
c0019f5d:	c3                   	ret    

c0019f5e <Krnl::flushEnv()>:
c0019f5e:	c3                   	ret    

c0019f5f <Krnl::getProcessTotalEnvCount(Process*)>:
c0019f5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f63:	8b 15 34 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea34
c0019f69:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019f6f:	a1 38 ea 02 c0       	mov    eax,ds:0xc002ea38
c0019f74:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f76:	03 01                	add    eax,DWORD PTR [ecx]
c0019f78:	85 d2                	test   edx,edx
c0019f7a:	74 02                	je     c0019f7e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019f7c:	03 02                	add    eax,DWORD PTR [edx]
c0019f7e:	c3                   	ret    

c0019f7f <Krnl::getProcessEnvPair(Process*, int)>:
c0019f7f:	57                   	push   edi
c0019f80:	56                   	push   esi
c0019f81:	8b 35 34 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea34
c0019f87:	53                   	push   ebx
c0019f88:	85 f6                	test   esi,esi
c0019f8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f92:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019f98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019f9c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019f9e:	75 16                	jne    c0019fb6 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019fa0:	39 c2                	cmp    edx,eax
c0019fa2:	7c 16                	jl     c0019fba <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019fa4:	8b 0d 38 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea38
c0019faa:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019fac:	01 c6                	add    esi,eax
c0019fae:	39 d6                	cmp    esi,edx
c0019fb0:	7e 3c                	jle    c0019fee <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019fb2:	29 c2                	sub    edx,eax
c0019fb4:	eb 04                	jmp    c0019fba <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019fb6:	39 c2                	cmp    edx,eax
c0019fb8:	7d 05                	jge    c0019fbf <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019fba:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019fbd:	eb 20                	jmp    c0019fdf <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019fbf:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019fc1:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019fc4:	39 d1                	cmp    ecx,edx
c0019fc6:	7e 04                	jle    c0019fcc <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019fc8:	29 c2                	sub    edx,eax
c0019fca:	eb 10                	jmp    c0019fdc <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019fcc:	8b 35 38 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea38
c0019fd2:	03 0e                	add    ecx,DWORD PTR [esi]
c0019fd4:	39 d1                	cmp    ecx,edx
c0019fd6:	7e 16                	jle    c0019fee <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019fd8:	29 c2                	sub    edx,eax
c0019fda:	29 fa                	sub    edx,edi
c0019fdc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019fdf:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019fe2:	8b 02                	mov    eax,DWORD PTR [edx]
c0019fe4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019fe7:	89 03                	mov    DWORD PTR [ebx],eax
c0019fe9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019fec:	eb 1d                	jmp    c001a00b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019fee:	83 ec 0c             	sub    esp,0xc
c0019ff1:	68 1b bb 02 c0       	push   0xc002bb1b
c0019ff6:	e8 18 00 00 00       	call   c001a013 <Krnl::panic(char const*)>
c0019ffb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a001:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a008:	83 c4 10             	add    esp,0x10
c001a00b:	89 d8                	mov    eax,ebx
c001a00d:	5b                   	pop    ebx
c001a00e:	5e                   	pop    esi
c001a00f:	5f                   	pop    edi
c001a010:	c2 04 00             	ret    0x4

c001a013 <Krnl::panic(char const*)>:
c001a013:	55                   	push   ebp
c001a014:	89 e5                	mov    ebp,esp
c001a016:	53                   	push   ebx
c001a017:	83 ec 10             	sub    esp,0x10
c001a01a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a01d:	fa                   	cli    
c001a01e:	c6 05 44 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea44,0x1
c001a025:	53                   	push   ebx
c001a026:	e8 fe 57 ff ff       	call   c000f829 <Krnl::setBootMessage(char const*)>
c001a02b:	58                   	pop    eax
c001a02c:	c6 05 60 ce 02 c0 00 	mov    BYTE PTR ds:0xc002ce60,0x0
c001a033:	5a                   	pop    edx
c001a034:	53                   	push   ebx
c001a035:	68 35 bb 02 c0       	push   0xc002bb35
c001a03a:	e8 e8 87 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001a03f:	59                   	pop    ecx
c001a040:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a045:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a04b:	e8 39 65 ff ff       	call   c0010589 <setActiveTerminal(VgaText*)>
c001a050:	83 c4 0c             	add    esp,0xc
c001a053:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a058:	6a 01                	push   0x1
c001a05a:	6a 0f                	push   0xf
c001a05c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a062:	e8 81 63 ff ff       	call   c00103e8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a067:	58                   	pop    eax
c001a068:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a06d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a073:	e8 92 68 ff ff       	call   c001090a <VgaText::clearScreen()>
c001a078:	58                   	pop    eax
c001a079:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a07e:	5a                   	pop    edx
c001a07f:	68 4e bb 02 c0       	push   0xc002bb4e
c001a084:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a08a:	e8 07 6a ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a08f:	59                   	pop    ecx
c001a090:	58                   	pop    eax
c001a091:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a096:	68 f4 bb 02 c0       	push   0xc002bbf4
c001a09b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0a1:	e8 f0 69 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a0a6:	58                   	pop    eax
c001a0a7:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a0ac:	5a                   	pop    edx
c001a0ad:	68 6a bb 02 c0       	push   0xc002bb6a
c001a0b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0b8:	e8 d9 69 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a0bd:	59                   	pop    ecx
c001a0be:	58                   	pop    eax
c001a0bf:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a0c4:	53                   	push   ebx
c001a0c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0cb:	e8 c6 69 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a0d0:	58                   	pop    eax
c001a0d1:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a0d6:	5a                   	pop    edx
c001a0d7:	68 8a bb 02 c0       	push   0xc002bb8a
c001a0dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0e2:	e8 af 69 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a0e7:	a1 40 ea 02 c0       	mov    eax,ds:0xc002ea40
c001a0ec:	83 c4 10             	add    esp,0x10
c001a0ef:	85 c0                	test   eax,eax
c001a0f1:	74 02                	je     c001a0f5 <Krnl::panic(char const*)+0xe2>
c001a0f3:	ff d0                	call   eax
c001a0f5:	83 ec 0c             	sub    esp,0xc
c001a0f8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a0fb:	e8 8f 30 00 00       	call   c001d18f <Thr::getDriverNameFromAddress(unsigned long)>
c001a100:	83 c4 10             	add    esp,0x10
c001a103:	89 c3                	mov    ebx,eax
c001a105:	85 c0                	test   eax,eax
c001a107:	0f 84 4e 02 00 00    	je     c001a35b <Krnl::panic(char const*)+0x348>
c001a10d:	83 ec 08             	sub    esp,0x8
c001a110:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a115:	68 30 bc 02 c0       	push   0xc002bc30
c001a11a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a120:	e8 71 69 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a125:	58                   	pop    eax
c001a126:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a12b:	5a                   	pop    edx
c001a12c:	68 6a bb 02 c0       	push   0xc002bb6a
c001a131:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a137:	e8 5a 69 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a13c:	59                   	pop    ecx
c001a13d:	58                   	pop    eax
c001a13e:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a143:	53                   	push   ebx
c001a144:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a14a:	e8 47 69 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a14f:	83 c4 10             	add    esp,0x10
c001a152:	83 ec 08             	sub    esp,0x8
c001a155:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a15a:	68 89 bb 02 c0       	push   0xc002bb89
c001a15f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a165:	e8 2c 69 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a16a:	58                   	pop    eax
c001a16b:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a170:	5a                   	pop    edx
c001a171:	68 88 bc 02 c0       	push   0xc002bc88
c001a176:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a17c:	e8 15 69 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a181:	59                   	pop    ecx
c001a182:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a187:	5b                   	pop    ebx
c001a188:	68 c8 bc 02 c0       	push   0xc002bcc8
c001a18d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a193:	e8 fe 68 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a198:	58                   	pop    eax
c001a199:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a19e:	5a                   	pop    edx
c001a19f:	68 75 bb 02 c0       	push   0xc002bb75
c001a1a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1aa:	e8 e7 68 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a1af:	59                   	pop    ecx
c001a1b0:	5b                   	pop    ebx
c001a1b1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a1b4:	68 8d bb 02 c0       	push   0xc002bb8d
c001a1b9:	e8 69 86 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001a1be:	58                   	pop    eax
c001a1bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a1c2:	5a                   	pop    edx
c001a1c3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a1c6:	68 96 bb 02 c0       	push   0xc002bb96
c001a1cb:	e8 57 86 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001a1d0:	59                   	pop    ecx
c001a1d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a1d4:	5b                   	pop    ebx
c001a1d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1d7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a1da:	68 9f bb 02 c0       	push   0xc002bb9f
c001a1df:	e8 43 86 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001a1e4:	58                   	pop    eax
c001a1e5:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a1ea:	5a                   	pop    edx
c001a1eb:	68 0c bd 02 c0       	push   0xc002bd0c
c001a1f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1f6:	e8 9b 68 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a1fb:	59                   	pop    ecx
c001a1fc:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a201:	5b                   	pop    ebx
c001a202:	68 a8 bb 02 c0       	push   0xc002bba8
c001a207:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a20d:	e8 84 68 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a212:	0f 20 c0             	mov    eax,cr0
c001a215:	5a                   	pop    edx
c001a216:	59                   	pop    ecx
c001a217:	50                   	push   eax
c001a218:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a21d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a223:	e8 28 68 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c001a228:	5b                   	pop    ebx
c001a229:	58                   	pop    eax
c001a22a:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a22f:	68 b2 bb 02 c0       	push   0xc002bbb2
c001a234:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a23a:	e8 57 68 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a23f:	0f 20 d0             	mov    eax,cr2
c001a242:	5a                   	pop    edx
c001a243:	59                   	pop    ecx
c001a244:	50                   	push   eax
c001a245:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a24a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a250:	e8 fb 67 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c001a255:	5b                   	pop    ebx
c001a256:	58                   	pop    eax
c001a257:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a25c:	68 bc bb 02 c0       	push   0xc002bbbc
c001a261:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a267:	e8 2a 68 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a26c:	0f 20 d8             	mov    eax,cr3
c001a26f:	5a                   	pop    edx
c001a270:	59                   	pop    ecx
c001a271:	50                   	push   eax
c001a272:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a277:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a27d:	e8 ce 67 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c001a282:	5b                   	pop    ebx
c001a283:	58                   	pop    eax
c001a284:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a289:	68 cf bb 02 c0       	push   0xc002bbcf
c001a28e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a294:	e8 fd 67 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a299:	0f 20 e0             	mov    eax,cr4
c001a29c:	5a                   	pop    edx
c001a29d:	59                   	pop    ecx
c001a29e:	50                   	push   eax
c001a29f:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a2a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2aa:	e8 a1 67 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c001a2af:	5b                   	pop    ebx
c001a2b0:	58                   	pop    eax
c001a2b1:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a2b6:	68 d9 bb 02 c0       	push   0xc002bbd9
c001a2bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2c1:	e8 d0 67 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a2c6:	5a                   	pop    edx
c001a2c7:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a2cc:	59                   	pop    ecx
c001a2cd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a2d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a2d6:	50                   	push   eax
c001a2d7:	e8 74 67 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c001a2dc:	5b                   	pop    ebx
c001a2dd:	58                   	pop    eax
c001a2de:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a2e3:	68 f0 bb 02 c0       	push   0xc002bbf0
c001a2e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2ee:	e8 a3 67 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a2f3:	5a                   	pop    edx
c001a2f4:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a2f9:	59                   	pop    ecx
c001a2fa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a300:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a303:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a306:	50                   	push   eax
c001a307:	e8 44 67 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c001a30c:	5b                   	pop    ebx
c001a30d:	58                   	pop    eax
c001a30e:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a313:	68 f0 bb 02 c0       	push   0xc002bbf0
c001a318:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a31e:	e8 73 67 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a323:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a328:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a32b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a331:	8b 12                	mov    edx,DWORD PTR [edx]
c001a333:	59                   	pop    ecx
c001a334:	5b                   	pop    ebx
c001a335:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a338:	50                   	push   eax
c001a339:	e8 12 67 ff ff       	call   c0010a50 <VgaText::putx(unsigned int)>
c001a33e:	83 c4 10             	add    esp,0x10
c001a341:	b2 fe                	mov    dl,0xfe
c001a343:	e4 60                	in     al,0x60
c001a345:	3c 1c                	cmp    al,0x1c
c001a347:	74 04                	je     c001a34d <Krnl::panic(char const*)+0x33a>
c001a349:	3c 5a                	cmp    al,0x5a
c001a34b:	75 f6                	jne    c001a343 <Krnl::panic(char const*)+0x330>
c001a34d:	e4 64                	in     al,0x64
c001a34f:	a8 02                	test   al,0x2
c001a351:	75 fa                	jne    c001a34d <Krnl::panic(char const*)+0x33a>
c001a353:	88 d0                	mov    al,dl
c001a355:	e6 64                	out    0x64,al
c001a357:	fa                   	cli    
c001a358:	f4                   	hlt    
c001a359:	eb e8                	jmp    c001a343 <Krnl::panic(char const*)+0x330>
c001a35b:	50                   	push   eax
c001a35c:	50                   	push   eax
c001a35d:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a362:	68 5c bc 02 c0       	push   0xc002bc5c
c001a367:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a36d:	e8 24 67 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a372:	58                   	pop    eax
c001a373:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a378:	5a                   	pop    edx
c001a379:	68 6a bb 02 c0       	push   0xc002bb6a
c001a37e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a384:	e8 0d 67 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a389:	59                   	pop    ecx
c001a38a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a38f:	5b                   	pop    ebx
c001a390:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a393:	83 c0 0c             	add    eax,0xc
c001a396:	50                   	push   eax
c001a397:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001a39c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3a2:	e8 ef 66 ff ff       	call   c0010a96 <VgaText::puts(char const*)>
c001a3a7:	83 c4 10             	add    esp,0x10
c001a3aa:	e9 a3 fd ff ff       	jmp    c001a152 <Krnl::panic(char const*)+0x13f>

c001a3af <Net::switchEndian16(unsigned short)>:
c001a3af:	83 ec 04             	sub    esp,0x4
c001a3b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3b6:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a3ba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a3be:	c1 f8 08             	sar    eax,0x8
c001a3c1:	89 c2                	mov    edx,eax
c001a3c3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a3c7:	c1 e0 08             	shl    eax,0x8
c001a3ca:	09 d0                	or     eax,edx
c001a3cc:	83 c4 04             	add    esp,0x4
c001a3cf:	c3                   	ret    

c001a3d0 <Net::switchEndian32(unsigned int)>:
c001a3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3d4:	c1 e8 18             	shr    eax,0x18
c001a3d7:	89 c2                	mov    edx,eax
c001a3d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3dd:	c1 e0 08             	shl    eax,0x8
c001a3e0:	25 00 00 ff 00       	and    eax,0xff0000
c001a3e5:	09 c2                	or     edx,eax
c001a3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3eb:	c1 e8 08             	shr    eax,0x8
c001a3ee:	25 00 ff 00 00       	and    eax,0xff00
c001a3f3:	09 c2                	or     edx,eax
c001a3f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3f9:	c1 e0 18             	shl    eax,0x18
c001a3fc:	09 d0                	or     eax,edx
c001a3fe:	c3                   	ret    

c001a3ff <Net::crc32Calc(unsigned char*, int)>:
c001a3ff:	83 ec 10             	sub    esp,0x10
c001a402:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a407:	75 07                	jne    c001a410 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a409:	b8 00 00 00 00       	mov    eax,0x0
c001a40e:	eb 7c                	jmp    c001a48c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a410:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a415:	7f 07                	jg     c001a41e <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a417:	b8 00 00 00 00       	mov    eax,0x0
c001a41c:	eb 6e                	jmp    c001a48c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a41e:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a426:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a42e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a432:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a436:	7d 4e                	jge    c001a486 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a43c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a440:	01 d0                	add    eax,edx
c001a442:	8a 00                	mov    al,BYTE PTR [eax]
c001a444:	0f b6 c0             	movzx  eax,al
c001a447:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a44b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a453:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a458:	7f 26                	jg     c001a480 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a45a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a45e:	83 e0 01             	and    eax,0x1
c001a461:	74 0d                	je     c001a470 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a463:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a467:	d1 e8                	shr    eax,1
c001a469:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a46e:	eb 06                	jmp    c001a476 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a474:	d1 e8                	shr    eax,1
c001a476:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a47a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a47e:	eb d3                	jmp    c001a453 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a480:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a484:	eb a8                	jmp    c001a42e <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a48a:	f7 d0                	not    eax
c001a48c:	83 c4 10             	add    esp,0x10
c001a48f:	c3                   	ret    

c001a490 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a490:	57                   	push   edi
c001a491:	56                   	push   esi
c001a492:	53                   	push   ebx
c001a493:	83 ec 60             	sub    esp,0x60
c001a496:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a49d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a4a1:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a4a9:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a4ae:	7f 1a                	jg     c001a4ca <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a4b0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4b7:	8d 50 01             	lea    edx,[eax+0x1]
c001a4ba:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4c1:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a4c4:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a4c8:	eb df                	jmp    c001a4a9 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a4ca:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4d1:	8d 50 01             	lea    edx,[eax+0x1]
c001a4d4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4db:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a4de:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a4e9:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a4ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a4f1:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a4f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a4fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a501:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a505:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a50d:	89 c6                	mov    esi,eax
c001a50f:	89 d7                	mov    edi,edx
c001a511:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a513:	89 c8                	mov    eax,ecx
c001a515:	89 fa                	mov    edx,edi
c001a517:	89 f3                	mov    ebx,esi
c001a519:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a51d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a521:	89 04 24             	mov    DWORD PTR [esp],eax
c001a524:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a52c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a533:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a537:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a53b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a53f:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a547:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a54b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a54f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a553:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a557:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a55b:	89 c6                	mov    esi,eax
c001a55d:	89 d7                	mov    edi,edx
c001a55f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a561:	89 c8                	mov    eax,ecx
c001a563:	89 fa                	mov    edx,edi
c001a565:	89 f3                	mov    ebx,esi
c001a567:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a56b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a56f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a573:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a57b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a582:	0f b7 c0             	movzx  eax,ax
c001a585:	c1 f8 08             	sar    eax,0x8
c001a588:	89 c1                	mov    ecx,eax
c001a58a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a591:	8d 50 01             	lea    edx,[eax+0x1]
c001a594:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a59b:	88 ca                	mov    dl,cl
c001a59d:	88 10                	mov    BYTE PTR [eax],dl
c001a59f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a5a6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a5ad:	8d 48 01             	lea    ecx,[eax+0x1]
c001a5b0:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a5b7:	88 10                	mov    BYTE PTR [eax],dl
c001a5b9:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a5bd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a5c1:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a5c8:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a5cc:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a5d0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a5d4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a5d8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a5dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a5e0:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a5e4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a5e8:	89 c6                	mov    esi,eax
c001a5ea:	89 d7                	mov    edi,edx
c001a5ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5ee:	89 c8                	mov    eax,ecx
c001a5f0:	89 fa                	mov    edx,edi
c001a5f2:	89 f3                	mov    ebx,esi
c001a5f4:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a5f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a5fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a600:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a604:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a60b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a612:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a616:	50                   	push   eax
c001a617:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a61b:	e8 df fd ff ff       	call   c001a3ff <Net::crc32Calc(unsigned char*, int)>
c001a620:	83 c4 08             	add    esp,0x8
c001a623:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a627:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a62b:	c1 e8 18             	shr    eax,0x18
c001a62e:	89 c1                	mov    ecx,eax
c001a630:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a637:	8d 50 01             	lea    edx,[eax+0x1]
c001a63a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a641:	88 ca                	mov    dl,cl
c001a643:	88 10                	mov    BYTE PTR [eax],dl
c001a645:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a649:	c1 e8 10             	shr    eax,0x10
c001a64c:	89 c1                	mov    ecx,eax
c001a64e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a655:	8d 50 01             	lea    edx,[eax+0x1]
c001a658:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a65f:	88 ca                	mov    dl,cl
c001a661:	88 10                	mov    BYTE PTR [eax],dl
c001a663:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a667:	c1 e8 08             	shr    eax,0x8
c001a66a:	89 c1                	mov    ecx,eax
c001a66c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a673:	8d 50 01             	lea    edx,[eax+0x1]
c001a676:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a67d:	88 ca                	mov    dl,cl
c001a67f:	88 10                	mov    BYTE PTR [eax],dl
c001a681:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a688:	8d 50 01             	lea    edx,[eax+0x1]
c001a68b:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a692:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a696:	88 10                	mov    BYTE PTR [eax],dl
c001a698:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a69c:	83 c4 60             	add    esp,0x60
c001a69f:	5b                   	pop    ebx
c001a6a0:	5e                   	pop    esi
c001a6a1:	5f                   	pop    edi
c001a6a2:	c3                   	ret    

c001a6a3 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a6a3:	57                   	push   edi
c001a6a4:	56                   	push   esi
c001a6a5:	53                   	push   ebx
c001a6a6:	83 ec 70             	sub    esp,0x70
c001a6a9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6b0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a6b4:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a6bc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a6c3:	83 c0 0e             	add    eax,0xe
c001a6c6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a6ca:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a6d5:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a6dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a6e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a6e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6e9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a6ed:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a6f1:	89 c6                	mov    esi,eax
c001a6f3:	89 d7                	mov    edi,edx
c001a6f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6f7:	89 c8                	mov    eax,ecx
c001a6f9:	89 fa                	mov    edx,edi
c001a6fb:	89 f3                	mov    ebx,esi
c001a6fd:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a701:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a705:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a709:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a711:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a718:	83 c0 08             	add    eax,0x8
c001a71b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a71f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a726:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a72a:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a732:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a736:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a73a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a73e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a742:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a746:	89 c6                	mov    esi,eax
c001a748:	89 d7                	mov    edi,edx
c001a74a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a74c:	89 c8                	mov    eax,ecx
c001a74e:	89 fa                	mov    edx,edi
c001a750:	89 f3                	mov    ebx,esi
c001a752:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a756:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a75a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a75e:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a766:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a76d:	8d 50 01             	lea    edx,[eax+0x1]
c001a770:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a777:	8a 00                	mov    al,BYTE PTR [eax]
c001a779:	0f b6 c0             	movzx  eax,al
c001a77c:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a781:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a788:	8d 50 01             	lea    edx,[eax+0x1]
c001a78b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a792:	8a 00                	mov    al,BYTE PTR [eax]
c001a794:	0f b6 c0             	movzx  eax,al
c001a797:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a79c:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a7a1:	c1 e0 08             	shl    eax,0x8
c001a7a4:	89 c2                	mov    edx,eax
c001a7a6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a7aa:	09 d0                	or     eax,edx
c001a7ac:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a7b3:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a7b7:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a7bf:	75 46                	jne    c001a807 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a7c1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a7c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a7cb:	66 3d dc 05          	cmp    ax,0x5dc
c001a7cf:	77 16                	ja     c001a7e7 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a7d1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a7d8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a7db:	0f b7 c0             	movzx  eax,ax
c001a7de:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a7e5:	eb 20                	jmp    c001a807 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a7e7:	83 ec 0c             	sub    esp,0xc
c001a7ea:	68 34 bd 02 c0       	push   0xc002bd34
c001a7ef:	e8 33 80 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001a7f4:	83 c4 10             	add    esp,0x10
c001a7f7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a7fe:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a802:	e9 17 01 00 00       	jmp    c001a91e <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a807:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a80e:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a815:	8b 12                	mov    edx,DWORD PTR [edx]
c001a817:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a81b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a822:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a826:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a82a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a82e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a832:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a836:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a83a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a83e:	89 c6                	mov    esi,eax
c001a840:	89 d7                	mov    edi,edx
c001a842:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a844:	89 c8                	mov    eax,ecx
c001a846:	89 fa                	mov    edx,edi
c001a848:	89 f3                	mov    ebx,esi
c001a84a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a84e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a852:	89 04 24             	mov    DWORD PTR [esp],eax
c001a855:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a85c:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a863:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a86a:	8d 50 01             	lea    edx,[eax+0x1]
c001a86d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a874:	8a 00                	mov    al,BYTE PTR [eax]
c001a876:	0f b6 c0             	movzx  eax,al
c001a879:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a87d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a884:	8d 50 01             	lea    edx,[eax+0x1]
c001a887:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a88e:	8a 00                	mov    al,BYTE PTR [eax]
c001a890:	0f b6 c0             	movzx  eax,al
c001a893:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a897:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a89e:	8d 50 01             	lea    edx,[eax+0x1]
c001a8a1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a8a8:	8a 00                	mov    al,BYTE PTR [eax]
c001a8aa:	0f b6 c0             	movzx  eax,al
c001a8ad:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a8b1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a8b8:	8d 50 01             	lea    edx,[eax+0x1]
c001a8bb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a8c2:	8a 00                	mov    al,BYTE PTR [eax]
c001a8c4:	0f b6 c0             	movzx  eax,al
c001a8c7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a8cb:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a8cf:	c1 e0 18             	shl    eax,0x18
c001a8d2:	89 c2                	mov    edx,eax
c001a8d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a8d8:	c1 e0 10             	shl    eax,0x10
c001a8db:	09 c2                	or     edx,eax
c001a8dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a8e1:	c1 e0 08             	shl    eax,0x8
c001a8e4:	09 d0                	or     eax,edx
c001a8e6:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a8ea:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a8ee:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a8f5:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a8f9:	83 e8 04             	sub    eax,0x4
c001a8fc:	83 ec 08             	sub    esp,0x8
c001a8ff:	50                   	push   eax
c001a900:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a904:	e8 f6 fa ff ff       	call   c001a3ff <Net::crc32Calc(unsigned char*, int)>
c001a909:	83 c4 10             	add    esp,0x10
c001a90c:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a910:	0f 94 c2             	sete   dl
c001a913:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a91a:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a91d:	90                   	nop
c001a91e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a925:	83 c4 70             	add    esp,0x70
c001a928:	5b                   	pop    ebx
c001a929:	5e                   	pop    esi
c001a92a:	5f                   	pop    edi
c001a92b:	c2 04 00             	ret    0x4

c001a92e <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a92e:	55                   	push   ebp
c001a92f:	57                   	push   edi
c001a930:	56                   	push   esi
c001a931:	53                   	push   ebx
c001a932:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a938:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a93f:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a941:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a944:	80 fb 40             	cmp    bl,0x40
c001a947:	75 1b                	jne    c001a964 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a949:	8a 16                	mov    dl,BYTE PTR [esi]
c001a94b:	84 d2                	test   dl,dl
c001a94d:	0f 84 f1 00 00 00    	je     c001aa44 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a953:	8d 46 01             	lea    eax,[esi+0x1]
c001a956:	80 fa 3a             	cmp    dl,0x3a
c001a959:	74 04                	je     c001a95f <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a95b:	89 c6                	mov    esi,eax
c001a95d:	eb ea                	jmp    c001a949 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a95f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a962:	89 c6                	mov    esi,eax
c001a964:	50                   	push   eax
c001a965:	6a 40                	push   0x40
c001a967:	6a 00                	push   0x0
c001a969:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a96d:	50                   	push   eax
c001a96e:	e8 dd 5d fe ff       	call   c0000750 <memset>
c001a973:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a97a:	31 c0                	xor    eax,eax
c001a97c:	83 c4 10             	add    esp,0x10
c001a97f:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a981:	84 c9                	test   cl,cl
c001a983:	0f 84 bb 00 00 00    	je     c001aa44 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a989:	3d c7 00 00 00       	cmp    eax,0xc7
c001a98e:	0f 8f b0 00 00 00    	jg     c001aa44 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a994:	80 f9 0a             	cmp    cl,0xa
c001a997:	0f 85 98 00 00 00    	jne    c001aa35 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a99d:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a9a2:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a9a6:	a8 df                	test   al,0xdf
c001a9a8:	0f 94 c1             	sete   cl
c001a9ab:	3c 23                	cmp    al,0x23
c001a9ad:	0f 94 c2             	sete   dl
c001a9b0:	08 d1                	or     cl,dl
c001a9b2:	75 4a                	jne    c001a9fe <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a9b4:	8d 50 f7             	lea    edx,[eax-0x9]
c001a9b7:	80 fa 01             	cmp    dl,0x1
c001a9ba:	76 42                	jbe    c001a9fe <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a9bc:	3c 5b                	cmp    al,0x5b
c001a9be:	75 42                	jne    c001aa02 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a9c0:	80 fb 40             	cmp    bl,0x40
c001a9c3:	75 39                	jne    c001a9fe <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a9c5:	83 ec 0c             	sub    esp,0xc
c001a9c8:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a9cc:	52                   	push   edx
c001a9cd:	e8 9a 5d fe ff       	call   c000076c <strlen>
c001a9d2:	83 c4 10             	add    esp,0x10
c001a9d5:	83 f8 3f             	cmp    eax,0x3f
c001a9d8:	77 6a                	ja     c001aa44 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a9da:	50                   	push   eax
c001a9db:	50                   	push   eax
c001a9dc:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a9e0:	52                   	push   edx
c001a9e1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a9e5:	52                   	push   edx
c001a9e6:	e8 21 5e fe ff       	call   c000080c <strcpy>
c001a9eb:	58                   	pop    eax
c001a9ec:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a9f0:	52                   	push   edx
c001a9f1:	e8 76 5d fe ff       	call   c000076c <strlen>
c001a9f6:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a9fb:	83 c4 10             	add    esp,0x10
c001a9fe:	31 d2                	xor    edx,edx
c001aa00:	eb 3a                	jmp    c001aa3c <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001aa02:	80 fb 40             	cmp    bl,0x40
c001aa05:	74 06                	je     c001aa0d <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001aa07:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aa0b:	eb 20                	jmp    c001aa2d <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aa0d:	50                   	push   eax
c001aa0e:	50                   	push   eax
c001aa0f:	55                   	push   ebp
c001aa10:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aa14:	50                   	push   eax
c001aa15:	e8 7e 5e fe ff       	call   c0000898 <strcmp>
c001aa1a:	83 c4 10             	add    esp,0x10
c001aa1d:	85 c0                	test   eax,eax
c001aa1f:	75 dd                	jne    c001a9fe <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa21:	eb e4                	jmp    c001aa07 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001aa23:	8d 50 01             	lea    edx,[eax+0x1]
c001aa26:	80 f9 3d             	cmp    cl,0x3d
c001aa29:	74 1d                	je     c001aa48 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001aa2b:	89 d0                	mov    eax,edx
c001aa2d:	8a 08                	mov    cl,BYTE PTR [eax]
c001aa2f:	84 c9                	test   cl,cl
c001aa31:	75 f0                	jne    c001aa23 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aa33:	eb 0f                	jmp    c001aa44 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aa35:	8d 50 01             	lea    edx,[eax+0x1]
c001aa38:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aa3c:	47                   	inc    edi
c001aa3d:	89 d0                	mov    eax,edx
c001aa3f:	e9 3b ff ff ff       	jmp    c001a97f <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aa44:	31 c0                	xor    eax,eax
c001aa46:	eb 33                	jmp    c001aa7b <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aa48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aa4c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aa4f:	50                   	push   eax
c001aa50:	50                   	push   eax
c001aa51:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aa55:	50                   	push   eax
c001aa56:	56                   	push   esi
c001aa57:	e8 3c 5e fe ff       	call   c0000898 <strcmp>
c001aa5c:	83 c4 10             	add    esp,0x10
c001aa5f:	85 c0                	test   eax,eax
c001aa61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa65:	75 97                	jne    c001a9fe <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa67:	51                   	push   ecx
c001aa68:	51                   	push   ecx
c001aa69:	52                   	push   edx
c001aa6a:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aa71:	e8 96 5d fe ff       	call   c000080c <strcpy>
c001aa76:	83 c4 10             	add    esp,0x10
c001aa79:	b0 01                	mov    al,0x1
c001aa7b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aa81:	5b                   	pop    ebx
c001aa82:	5e                   	pop    esi
c001aa83:	5f                   	pop    edi
c001aa84:	5d                   	pop    ebp
c001aa85:	c3                   	ret    

c001aa86 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aa86:	57                   	push   edi
c001aa87:	56                   	push   esi
c001aa88:	53                   	push   ebx
c001aa89:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aa8f:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aa96:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aa9d:	53                   	push   ebx
c001aa9e:	e8 c9 5c fe ff       	call   c000076c <strlen>
c001aaa3:	89 34 24             	mov    DWORD PTR [esp],esi
c001aaa6:	89 c7                	mov    edi,eax
c001aaa8:	e8 bf 5c fe ff       	call   c000076c <strlen>
c001aaad:	83 c4 10             	add    esp,0x10
c001aab0:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aab4:	3d ff 00 00 00       	cmp    eax,0xff
c001aab9:	0f 87 d3 00 00 00    	ja     c001ab92 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aabf:	57                   	push   edi
c001aac0:	57                   	push   edi
c001aac1:	56                   	push   esi
c001aac2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aac6:	56                   	push   esi
c001aac7:	e8 40 5d fe ff       	call   c000080c <strcpy>
c001aacc:	58                   	pop    eax
c001aacd:	5a                   	pop    edx
c001aace:	68 d6 c0 02 c0       	push   0xc002c0d6
c001aad3:	56                   	push   esi
c001aad4:	e8 73 5e fe ff       	call   c000094c <strcat>
c001aad9:	59                   	pop    ecx
c001aada:	5f                   	pop    edi
c001aadb:	53                   	push   ebx
c001aadc:	56                   	push   esi
c001aadd:	e8 6a 5e fe ff       	call   c000094c <strcat>
c001aae2:	58                   	pop    eax
c001aae3:	5a                   	pop    edx
c001aae4:	68 80 bd 02 c0       	push   0xc002bd80
c001aae9:	56                   	push   esi
c001aaea:	e8 5d 5e fe ff       	call   c000094c <strcat>
c001aaef:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aaf6:	e8 d4 4c ff ff       	call   c000f7cf <malloc>
c001aafb:	83 c4 0c             	add    esp,0xc
c001aafe:	89 c3                	mov    ebx,eax
c001ab00:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c001ab06:	56                   	push   esi
c001ab07:	50                   	push   eax
c001ab08:	e8 79 82 ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c001ab0d:	83 c4 10             	add    esp,0x10
c001ab10:	85 db                	test   ebx,ebx
c001ab12:	74 7e                	je     c001ab92 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ab14:	51                   	push   ecx
c001ab15:	51                   	push   ecx
c001ab16:	6a 01                	push   0x1
c001ab18:	53                   	push   ebx
c001ab19:	e8 cc 82 ff ff       	call   c0012dea <File::open(FileOpenMode)>
c001ab1e:	83 c4 10             	add    esp,0x10
c001ab21:	85 c0                	test   eax,eax
c001ab23:	74 08                	je     c001ab2d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ab25:	83 ec 0c             	sub    esp,0xc
c001ab28:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab2a:	53                   	push   ebx
c001ab2b:	eb 5f                	jmp    c001ab8c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ab2d:	52                   	push   edx
c001ab2e:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ab32:	50                   	push   eax
c001ab33:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ab37:	50                   	push   eax
c001ab38:	53                   	push   ebx
c001ab39:	e8 58 85 ff ff       	call   c0013096 <File::stat(unsigned long long*, bool*)>
c001ab3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab42:	83 c4 10             	add    esp,0x10
c001ab45:	89 c1                	mov    ecx,eax
c001ab47:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ab4b:	74 31                	je     c001ab7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ab4d:	83 ec 0c             	sub    esp,0xc
c001ab50:	50                   	push   eax
c001ab51:	e8 79 4c ff ff       	call   c000f7cf <malloc>
c001ab56:	89 c6                	mov    esi,eax
c001ab58:	58                   	pop    eax
c001ab59:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab5b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ab5f:	52                   	push   edx
c001ab60:	56                   	push   esi
c001ab61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ab65:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ab69:	53                   	push   ebx
c001ab6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab6d:	83 c4 20             	add    esp,0x20
c001ab70:	85 c0                	test   eax,eax
c001ab72:	75 0a                	jne    c001ab7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ab74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab78:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ab7c:	74 18                	je     c001ab96 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ab7e:	83 ec 0c             	sub    esp,0xc
c001ab81:	53                   	push   ebx
c001ab82:	e8 c1 82 ff ff       	call   c0012e48 <File::close()>
c001ab87:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab8f:	83 c4 10             	add    esp,0x10
c001ab92:	31 c0                	xor    eax,eax
c001ab94:	eb 3b                	jmp    c001abd1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ab96:	83 ec 0c             	sub    esp,0xc
c001ab99:	53                   	push   ebx
c001ab9a:	e8 a9 82 ff ff       	call   c0012e48 <File::close()>
c001ab9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aba1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aba4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aba7:	83 c4 0c             	add    esp,0xc
c001abaa:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001abb1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001abb8:	56                   	push   esi
c001abb9:	e8 70 fd ff ff       	call   c001a92e <Reg::findLineFromLoadedData(char*, char*, char*)>
c001abbe:	89 34 24             	mov    DWORD PTR [esp],esi
c001abc1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001abc5:	e8 15 4c ff ff       	call   c000f7df <free>
c001abca:	83 c4 10             	add    esp,0x10
c001abcd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001abd1:	81 c4 20 01 00 00    	add    esp,0x120
c001abd7:	5b                   	pop    ebx
c001abd8:	5e                   	pop    esi
c001abd9:	5f                   	pop    edi
c001abda:	c3                   	ret    

c001abdb <Reg::getLine(char*, char*, char*)>:
c001abdb:	57                   	push   edi
c001abdc:	56                   	push   esi
c001abdd:	53                   	push   ebx
c001abde:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001abe2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001abe6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001abea:	57                   	push   edi
c001abeb:	56                   	push   esi
c001abec:	53                   	push   ebx
c001abed:	68 85 bd 02 c0       	push   0xc002bd85
c001abf2:	e8 8f fe ff ff       	call   c001aa86 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001abf7:	83 c4 10             	add    esp,0x10
c001abfa:	84 c0                	test   al,al
c001abfc:	75 10                	jne    c001ac0e <Reg::getLine(char*, char*, char*)+0x33>
c001abfe:	57                   	push   edi
c001abff:	56                   	push   esi
c001ac00:	53                   	push   ebx
c001ac01:	68 aa bd 02 c0       	push   0xc002bdaa
c001ac06:	e8 7b fe ff ff       	call   c001aa86 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ac0b:	83 c4 10             	add    esp,0x10
c001ac0e:	5b                   	pop    ebx
c001ac0f:	5e                   	pop    esi
c001ac10:	5f                   	pop    edi
c001ac11:	c3                   	ret    

c001ac12 <Reg::readInt(char*, char*, int*)>:
c001ac12:	55                   	push   ebp
c001ac13:	57                   	push   edi
c001ac14:	56                   	push   esi
c001ac15:	53                   	push   ebx
c001ac16:	81 ec f0 00 00 00    	sub    esp,0xf0
c001ac1c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ac20:	57                   	push   edi
c001ac21:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ac28:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ac2f:	e8 a7 ff ff ff       	call   c001abdb <Reg::getLine(char*, char*, char*)>
c001ac34:	83 c4 10             	add    esp,0x10
c001ac37:	84 c0                	test   al,al
c001ac39:	0f 84 b3 00 00 00    	je     c001acf2 <Reg::readInt(char*, char*, int*)+0xe0>
c001ac3f:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001ac43:	80 fa 2b             	cmp    dl,0x2b
c001ac46:	74 0c                	je     c001ac54 <Reg::readInt(char*, char*, int*)+0x42>
c001ac48:	80 fa 2d             	cmp    dl,0x2d
c001ac4b:	75 0e                	jne    c001ac5b <Reg::readInt(char*, char*, int*)+0x49>
c001ac4d:	ba 01 00 00 00       	mov    edx,0x1
c001ac52:	eb 0b                	jmp    c001ac5f <Reg::readInt(char*, char*, int*)+0x4d>
c001ac54:	ba 01 00 00 00       	mov    edx,0x1
c001ac59:	eb 02                	jmp    c001ac5d <Reg::readInt(char*, char*, int*)+0x4b>
c001ac5b:	31 d2                	xor    edx,edx
c001ac5d:	31 c0                	xor    eax,eax
c001ac5f:	be 0a 00 00 00       	mov    esi,0xa
c001ac64:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001ac69:	75 20                	jne    c001ac8b <Reg::readInt(char*, char*, int*)+0x79>
c001ac6b:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001ac6f:	80 f9 78             	cmp    cl,0x78
c001ac72:	75 0a                	jne    c001ac7e <Reg::readInt(char*, char*, int*)+0x6c>
c001ac74:	83 c2 02             	add    edx,0x2
c001ac77:	be 10 00 00 00       	mov    esi,0x10
c001ac7c:	eb 0d                	jmp    c001ac8b <Reg::readInt(char*, char*, int*)+0x79>
c001ac7e:	80 f9 62             	cmp    cl,0x62
c001ac81:	75 08                	jne    c001ac8b <Reg::readInt(char*, char*, int*)+0x79>
c001ac83:	83 c2 02             	add    edx,0x2
c001ac86:	be 02 00 00 00       	mov    esi,0x2
c001ac8b:	01 d7                	add    edi,edx
c001ac8d:	31 d2                	xor    edx,edx
c001ac8f:	8a 1f                	mov    bl,BYTE PTR [edi]
c001ac91:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001ac95:	80 fb 0d             	cmp    bl,0xd
c001ac98:	0f 94 c3             	sete   bl
c001ac9b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aca0:	0f 94 c1             	sete   cl
c001aca3:	08 cb                	or     bl,cl
c001aca5:	75 3a                	jne    c001ace1 <Reg::readInt(char*, char*, int*)+0xcf>
c001aca7:	0f af d6             	imul   edx,esi
c001acaa:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001acaf:	83 fe 10             	cmp    esi,0x10
c001acb2:	75 26                	jne    c001acda <Reg::readInt(char*, char*, int*)+0xc8>
c001acb4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001acb8:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001acbb:	89 e9                	mov    ecx,ebp
c001acbd:	80 f9 05             	cmp    cl,0x5
c001acc0:	77 06                	ja     c001acc8 <Reg::readInt(char*, char*, int*)+0xb6>
c001acc2:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001acc6:	eb 16                	jmp    c001acde <Reg::readInt(char*, char*, int*)+0xcc>
c001acc8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001accc:	83 e9 61             	sub    ecx,0x61
c001accf:	80 f9 05             	cmp    cl,0x5
c001acd2:	77 06                	ja     c001acda <Reg::readInt(char*, char*, int*)+0xc8>
c001acd4:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001acd8:	eb 04                	jmp    c001acde <Reg::readInt(char*, char*, int*)+0xcc>
c001acda:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001acde:	47                   	inc    edi
c001acdf:	eb ae                	jmp    c001ac8f <Reg::readInt(char*, char*, int*)+0x7d>
c001ace1:	84 c0                	test   al,al
c001ace3:	74 02                	je     c001ace7 <Reg::readInt(char*, char*, int*)+0xd5>
c001ace5:	f7 da                	neg    edx
c001ace7:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001acee:	89 10                	mov    DWORD PTR [eax],edx
c001acf0:	88 d8                	mov    al,bl
c001acf2:	81 c4 ec 00 00 00    	add    esp,0xec
c001acf8:	5b                   	pop    ebx
c001acf9:	5e                   	pop    esi
c001acfa:	5f                   	pop    edi
c001acfb:	5d                   	pop    ebp
c001acfc:	c3                   	ret    

c001acfd <Reg::readString(char*, char*, char*, int)>:
c001acfd:	57                   	push   edi
c001acfe:	56                   	push   esi
c001acff:	53                   	push   ebx
c001ad00:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ad06:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ad0d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ad11:	57                   	push   edi
c001ad12:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ad19:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ad20:	e8 b6 fe ff ff       	call   c001abdb <Reg::getLine(char*, char*, char*)>
c001ad25:	83 c4 10             	add    esp,0x10
c001ad28:	89 c6                	mov    esi,eax
c001ad2a:	84 c0                	test   al,al
c001ad2c:	74 44                	je     c001ad72 <Reg::readString(char*, char*, char*, int)+0x75>
c001ad2e:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ad35:	31 c0                	xor    eax,eax
c001ad37:	4a                   	dec    edx
c001ad38:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ad3b:	84 c9                	test   cl,cl
c001ad3d:	74 0f                	je     c001ad4e <Reg::readString(char*, char*, char*, int)+0x51>
c001ad3f:	39 c2                	cmp    edx,eax
c001ad41:	7e 0b                	jle    c001ad4e <Reg::readString(char*, char*, char*, int)+0x51>
c001ad43:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ad46:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ad4b:	40                   	inc    eax
c001ad4c:	eb ea                	jmp    c001ad38 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ad4e:	83 ec 0c             	sub    esp,0xc
c001ad51:	53                   	push   ebx
c001ad52:	e8 15 5a fe ff       	call   c000076c <strlen>
c001ad57:	83 c4 10             	add    esp,0x10
c001ad5a:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ad5f:	75 11                	jne    c001ad72 <Reg::readString(char*, char*, char*, int)+0x75>
c001ad61:	83 ec 0c             	sub    esp,0xc
c001ad64:	53                   	push   ebx
c001ad65:	e8 02 5a fe ff       	call   c000076c <strlen>
c001ad6a:	83 c4 10             	add    esp,0x10
c001ad6d:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ad72:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ad78:	89 f0                	mov    eax,esi
c001ad7a:	5b                   	pop    ebx
c001ad7b:	5e                   	pop    esi
c001ad7c:	5f                   	pop    edi
c001ad7d:	c3                   	ret    

c001ad7e <Reg::readBool(char*, char*, bool*)>:
c001ad7e:	83 ec 20             	sub    esp,0x20
c001ad81:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad85:	50                   	push   eax
c001ad86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad8e:	e8 7f fe ff ff       	call   c001ac12 <Reg::readInt(char*, char*, int*)>
c001ad93:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ad98:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad9c:	0f 95 02             	setne  BYTE PTR [edx]
c001ad9f:	83 c4 2c             	add    esp,0x2c
c001ada2:	c3                   	ret    

c001ada3 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001ada3:	53                   	push   ebx
c001ada4:	83 ec 1c             	sub    esp,0x1c
c001ada7:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001adab:	8d 44 24 13          	lea    eax,[esp+0x13]
c001adaf:	50                   	push   eax
c001adb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adb8:	e8 c1 ff ff ff       	call   c001ad7e <Reg::readBool(char*, char*, bool*)>
c001adbd:	83 c4 10             	add    esp,0x10
c001adc0:	84 c0                	test   al,al
c001adc2:	74 04                	je     c001adc8 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001adc4:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001adc8:	88 d8                	mov    al,bl
c001adca:	83 c4 18             	add    esp,0x18
c001adcd:	5b                   	pop    ebx
c001adce:	c3                   	ret    

c001adcf <Reg::readIntWithDefault(char*, char*, int)>:
c001adcf:	53                   	push   ebx
c001add0:	83 ec 1c             	sub    esp,0x1c
c001add3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001add7:	8d 44 24 10          	lea    eax,[esp+0x10]
c001addb:	50                   	push   eax
c001addc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ade0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ade4:	e8 29 fe ff ff       	call   c001ac12 <Reg::readInt(char*, char*, int*)>
c001ade9:	83 c4 10             	add    esp,0x10
c001adec:	84 c0                	test   al,al
c001adee:	74 04                	je     c001adf4 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001adf0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001adf4:	89 d8                	mov    eax,ebx
c001adf6:	83 c4 18             	add    esp,0x18
c001adf9:	5b                   	pop    ebx
c001adfa:	c3                   	ret    

c001adfb <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001adfb:	57                   	push   edi
c001adfc:	56                   	push   esi
c001adfd:	56                   	push   esi
c001adfe:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ae02:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ae06:	56                   	push   esi
c001ae07:	57                   	push   edi
c001ae08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae10:	e8 e8 fe ff ff       	call   c001acfd <Reg::readString(char*, char*, char*, int)>
c001ae15:	83 c4 10             	add    esp,0x10
c001ae18:	84 c0                	test   al,al
c001ae1a:	75 1a                	jne    c001ae36 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ae1c:	51                   	push   ecx
c001ae1d:	56                   	push   esi
c001ae1e:	6a 00                	push   0x0
c001ae20:	57                   	push   edi
c001ae21:	e8 2a 59 fe ff       	call   c0000750 <memset>
c001ae26:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ae29:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ae2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae2f:	83 c4 10             	add    esp,0x10
c001ae32:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ae36:	89 f8                	mov    eax,edi
c001ae38:	5a                   	pop    edx
c001ae39:	5e                   	pop    esi
c001ae3a:	5f                   	pop    edi
c001ae3b:	c3                   	ret    

c001ae3c <Sys::eject(regs*)>:
c001ae3c:	83 ec 0c             	sub    esp,0xc
c001ae3f:	83 ca ff             	or     edx,0xffffffff
c001ae42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae46:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ae49:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ae4e:	83 e9 41             	sub    ecx,0x41
c001ae51:	83 f9 19             	cmp    ecx,0x19
c001ae54:	77 18                	ja     c001ae6e <Sys::eject(regs*)+0x32>
c001ae56:	8b 0c 8d 20 e5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ae0]
c001ae5d:	85 c9                	test   ecx,ecx
c001ae5f:	74 0d                	je     c001ae6e <Sys::eject(regs*)+0x32>
c001ae61:	83 ec 0c             	sub    esp,0xc
c001ae64:	51                   	push   ecx
c001ae65:	e8 ae b2 ff ff       	call   c0016118 <LogicalDisk::eject()>
c001ae6a:	83 c4 10             	add    esp,0x10
c001ae6d:	99                   	cdq    
c001ae6e:	83 c4 0c             	add    esp,0xc
c001ae71:	c3                   	ret    

c001ae72 <Sys::exit(regs*)>:
c001ae72:	83 ec 18             	sub    esp,0x18
c001ae75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae79:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae7c:	e8 d3 35 00 00       	call   c001e454 <terminateTask(int)>
c001ae81:	83 c8 ff             	or     eax,0xffffffff
c001ae84:	83 c4 1c             	add    esp,0x1c
c001ae87:	89 c2                	mov    edx,eax
c001ae89:	c3                   	ret    

c001ae8a <Sys::getCwd(regs*)>:
c001ae8a:	83 ec 10             	sub    esp,0x10
c001ae8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae91:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ae94:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae9c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae9f:	e8 e4 7c ff ff       	call   c0012b88 <Fs::getcwd(Process*, char*, int)>
c001aea4:	83 c4 1c             	add    esp,0x1c
c001aea7:	99                   	cdq    
c001aea8:	c3                   	ret    

c001aea9 <Sys::getPID(regs*)>:
c001aea9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aeae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aeb1:	8b 00                	mov    eax,DWORD PTR [eax]
c001aeb3:	99                   	cdq    
c001aeb4:	c3                   	ret    

c001aeb5 <Sys::getRAMData(regs*)>:
c001aeb5:	8b 0d 74 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df74
c001aebb:	69 05 70 df 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002df70,0xc8
c001aec5:	99                   	cdq    
c001aec6:	f7 f9                	idiv   ecx
c001aec8:	c1 e0 18             	shl    eax,0x18
c001aecb:	09 c8                	or     eax,ecx
c001aecd:	99                   	cdq    
c001aece:	c3                   	ret    

c001aecf <Sys::getVGAPtr(regs*)>:
c001aecf:	55                   	push   ebp
c001aed0:	57                   	push   edi
c001aed1:	56                   	push   esi
c001aed2:	53                   	push   ebx
c001aed3:	83 ec 18             	sub    esp,0x18
c001aed6:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aeda:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001aedd:	e8 be 30 00 00       	call   c001dfa0 <Thr::processFromPID(int)>
c001aee2:	83 c4 10             	add    esp,0x10
c001aee5:	89 c1                	mov    ecx,eax
c001aee7:	b8 01 00 00 00       	mov    eax,0x1
c001aeec:	85 c9                	test   ecx,ecx
c001aeee:	74 59                	je     c001af49 <Sys::getVGAPtr(regs*)+0x7a>
c001aef0:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001aef6:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001aefa:	74 0c                	je     c001af08 <Sys::getVGAPtr(regs*)+0x39>
c001aefc:	83 ec 0c             	sub    esp,0xc
c001aeff:	53                   	push   ebx
c001af00:	e8 84 56 ff ff       	call   c0010589 <setActiveTerminal(VgaText*)>
c001af05:	83 c4 10             	add    esp,0x10
c001af08:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001af0b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001af0e:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001af13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af15:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001af18:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001af1b:	81 c3 82 00 00 00    	add    ebx,0x82
c001af21:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001af27:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001af2a:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001af2d:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001af33:	50                   	push   eax
c001af34:	50                   	push   eax
c001af35:	53                   	push   ebx
c001af36:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001af39:	05 a8 0f 00 00       	add    eax,0xfa8
c001af3e:	50                   	push   eax
c001af3f:	e8 c8 58 fe ff       	call   c000080c <strcpy>
c001af44:	83 c4 10             	add    esp,0x10
c001af47:	31 c0                	xor    eax,eax
c001af49:	83 c4 0c             	add    esp,0xc
c001af4c:	31 d2                	xor    edx,edx
c001af4e:	5b                   	pop    ebx
c001af4f:	5e                   	pop    esi
c001af50:	5f                   	pop    edi
c001af51:	5d                   	pop    ebp
c001af52:	c3                   	ret    

c001af53 <Sys::loadDLL(regs*)>:
c001af53:	56                   	push   esi
c001af54:	53                   	push   ebx
c001af55:	31 d2                	xor    edx,edx
c001af57:	51                   	push   ecx
c001af58:	b8 01 00 00 00       	mov    eax,0x1
c001af5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af61:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001af65:	0f 84 8c 00 00 00    	je     c001aff7 <Sys::loadDLL(regs*)+0xa4>
c001af6b:	83 ec 0c             	sub    esp,0xc
c001af6e:	68 14 01 00 00       	push   0x114
c001af73:	e8 57 48 ff ff       	call   c000f7cf <malloc>
c001af78:	83 c4 0c             	add    esp,0xc
c001af7b:	89 c3                	mov    ebx,eax
c001af7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af82:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af85:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001af88:	53                   	push   ebx
c001af89:	e8 f8 7d ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c001af8e:	83 c4 10             	add    esp,0x10
c001af91:	31 d2                	xor    edx,edx
c001af93:	b8 02 00 00 00       	mov    eax,0x2
c001af98:	85 db                	test   ebx,ebx
c001af9a:	74 5b                	je     c001aff7 <Sys::loadDLL(regs*)+0xa4>
c001af9c:	83 ec 0c             	sub    esp,0xc
c001af9f:	53                   	push   ebx
c001afa0:	e8 b3 80 ff ff       	call   c0013058 <File::exists()>
c001afa5:	83 c4 10             	add    esp,0x10
c001afa8:	84 c0                	test   al,al
c001afaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afac:	75 11                	jne    c001afbf <Sys::loadDLL(regs*)+0x6c>
c001afae:	83 ec 0c             	sub    esp,0xc
c001afb1:	53                   	push   ebx
c001afb2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afb5:	83 c4 10             	add    esp,0x10
c001afb8:	b8 03 00 00 00       	mov    eax,0x3
c001afbd:	eb 36                	jmp    c001aff5 <Sys::loadDLL(regs*)+0xa2>
c001afbf:	83 ec 0c             	sub    esp,0xc
c001afc2:	53                   	push   ebx
c001afc3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afc6:	58                   	pop    eax
c001afc7:	5a                   	pop    edx
c001afc8:	6a 00                	push   0x0
c001afca:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001afcd:	e8 0e 22 00 00       	call   c001d1e0 <Thr::loadDLL(char const*, bool)>
c001afd2:	83 c4 10             	add    esp,0x10
c001afd5:	89 c1                	mov    ecx,eax
c001afd7:	31 d2                	xor    edx,edx
c001afd9:	b8 04 00 00 00       	mov    eax,0x4
c001afde:	85 c9                	test   ecx,ecx
c001afe0:	74 15                	je     c001aff7 <Sys::loadDLL(regs*)+0xa4>
c001afe2:	53                   	push   ebx
c001afe3:	53                   	push   ebx
c001afe4:	ff 35 28 df 02 c0    	push   DWORD PTR ds:0xc002df28
c001afea:	51                   	push   ecx
c001afeb:	e8 21 24 00 00       	call   c001d411 <Thr::executeDLL(unsigned long, void*)>
c001aff0:	83 c4 10             	add    esp,0x10
c001aff3:	31 c0                	xor    eax,eax
c001aff5:	31 d2                	xor    edx,edx
c001aff7:	59                   	pop    ecx
c001aff8:	5b                   	pop    ebx
c001aff9:	5e                   	pop    esi
c001affa:	c3                   	ret    

c001affb <Sys::read(regs*)>:
c001affb:	57                   	push   edi
c001affc:	56                   	push   esi
c001affd:	53                   	push   ebx
c001affe:	83 ec 10             	sub    esp,0x10
c001b001:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b005:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b008:	83 f8 02             	cmp    eax,0x2
c001b00b:	77 10                	ja     c001b01d <Sys::read(regs*)+0x22>
c001b00d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b012:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b015:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b01b:	eb 0e                	jmp    c001b02b <Sys::read(regs*)+0x30>
c001b01d:	83 ec 0c             	sub    esp,0xc
c001b020:	50                   	push   eax
c001b021:	e8 d9 62 ff ff       	call   c00112ff <getFromFileDescriptor(int)>
c001b026:	83 c4 10             	add    esp,0x10
c001b029:	89 c1                	mov    ecx,eax
c001b02b:	83 c8 ff             	or     eax,0xffffffff
c001b02e:	85 c9                	test   ecx,ecx
c001b030:	89 c2                	mov    edx,eax
c001b032:	74 28                	je     c001b05c <Sys::read(regs*)+0x61>
c001b034:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b03c:	31 ff                	xor    edi,edi
c001b03e:	83 ec 0c             	sub    esp,0xc
c001b041:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b043:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b047:	52                   	push   edx
c001b048:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b04b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b04e:	57                   	push   edi
c001b04f:	56                   	push   esi
c001b050:	51                   	push   ecx
c001b051:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b054:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b058:	83 c4 20             	add    esp,0x20
c001b05b:	99                   	cdq    
c001b05c:	83 c4 10             	add    esp,0x10
c001b05f:	5b                   	pop    ebx
c001b060:	5e                   	pop    esi
c001b061:	5f                   	pop    edi
c001b062:	c3                   	ret    

c001b063 <Sys::sbrk(regs*)>:
c001b063:	56                   	push   esi
c001b064:	53                   	push   ebx
c001b065:	50                   	push   eax
c001b066:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b06b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b06f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b072:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b075:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b07b:	85 db                	test   ebx,ebx
c001b07d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b080:	74 02                	je     c001b084 <Sys::sbrk(regs*)+0x21>
c001b082:	79 06                	jns    c001b08a <Sys::sbrk(regs*)+0x27>
c001b084:	89 f0                	mov    eax,esi
c001b086:	31 d2                	xor    edx,edx
c001b088:	eb 2a                	jmp    c001b0b4 <Sys::sbrk(regs*)+0x51>
c001b08a:	83 c8 ff             	or     eax,0xffffffff
c001b08d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b093:	89 c2                	mov    edx,eax
c001b095:	77 1d                	ja     c001b0b4 <Sys::sbrk(regs*)+0x51>
c001b097:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b09d:	50                   	push   eax
c001b09e:	c1 ea 0c             	shr    edx,0xc
c001b0a1:	68 07 0c 00 00       	push   0xc07
c001b0a6:	52                   	push   edx
c001b0a7:	51                   	push   ecx
c001b0a8:	e8 51 6b ff ff       	call   c0011bfe <VAS::allocatePages(int, int)>
c001b0ad:	89 f0                	mov    eax,esi
c001b0af:	31 d2                	xor    edx,edx
c001b0b1:	83 c4 10             	add    esp,0x10
c001b0b4:	59                   	pop    ecx
c001b0b5:	5b                   	pop    ebx
c001b0b6:	5e                   	pop    esi
c001b0b7:	c3                   	ret    

c001b0b8 <Sys::setCwd(regs*)>:
c001b0b8:	83 ec 14             	sub    esp,0x14
c001b0bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0bf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b0c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0c7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b0ca:	e8 28 80 ff ff       	call   c00130f7 <Fs::setcwd(Process*, char*)>
c001b0cf:	83 c4 1c             	add    esp,0x1c
c001b0d2:	99                   	cdq    
c001b0d3:	c3                   	ret    

c001b0d4 <Sys::setTime(regs*)>:
c001b0d4:	55                   	push   ebp
c001b0d5:	31 c9                	xor    ecx,ecx
c001b0d7:	57                   	push   edi
c001b0d8:	bd 0c 00 00 00       	mov    ebp,0xc
c001b0dd:	56                   	push   esi
c001b0de:	53                   	push   ebx
c001b0df:	31 db                	xor    ebx,ebx
c001b0e1:	83 ec 10             	sub    esp,0x10
c001b0e4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b0e8:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001b0eb:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001b0ee:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001b0f1:	89 c2                	mov    edx,eax
c001b0f3:	66 81 ef 6c 07       	sub    di,0x76c
c001b0f8:	83 e2 1f             	and    edx,0x1f
c001b0fb:	c1 e7 10             	shl    edi,0x10
c001b0fe:	42                   	inc    edx
c001b0ff:	c1 e8 05             	shr    eax,0x5
c001b102:	88 d1                	mov    cl,dl
c001b104:	31 d2                	xor    edx,edx
c001b106:	f7 f5                	div    ebp
c001b108:	89 dd                	mov    ebp,ebx
c001b10a:	88 d5                	mov    ch,dl
c001b10c:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b112:	0f b7 c1             	movzx  eax,cx
c001b115:	31 d2                	xor    edx,edx
c001b117:	09 f8                	or     eax,edi
c001b119:	bf 3c 00 00 00       	mov    edi,0x3c
c001b11e:	89 c1                	mov    ecx,eax
c001b120:	89 f0                	mov    eax,esi
c001b122:	f7 f7                	div    edi
c001b124:	c1 e2 10             	shl    edx,0x10
c001b127:	09 d5                	or     ebp,edx
c001b129:	31 d2                	xor    edx,edx
c001b12b:	89 eb                	mov    ebx,ebp
c001b12d:	f7 f7                	div    edi
c001b12f:	bf 10 0e 00 00       	mov    edi,0xe10
c001b134:	88 d7                	mov    bh,dl
c001b136:	89 f0                	mov    eax,esi
c001b138:	31 d2                	xor    edx,edx
c001b13a:	f7 f7                	div    edi
c001b13c:	bf 18 00 00 00       	mov    edi,0x18
c001b141:	31 d2                	xor    edx,edx
c001b143:	f7 f7                	div    edi
c001b145:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001b14a:	88 d3                	mov    bl,dl
c001b14c:	53                   	push   ebx
c001b14d:	51                   	push   ecx
c001b14e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b154:	e8 e7 87 ff ff       	call   c0013940 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b159:	83 c4 1c             	add    esp,0x1c
c001b15c:	83 f0 01             	xor    eax,0x1
c001b15f:	5b                   	pop    ebx
c001b160:	0f b6 c0             	movzx  eax,al
c001b163:	5e                   	pop    esi
c001b164:	31 d2                	xor    edx,edx
c001b166:	5f                   	pop    edi
c001b167:	5d                   	pop    ebp
c001b168:	c3                   	ret    

c001b169 <Sys::timezone(regs*)>:
c001b169:	53                   	push   ebx
c001b16a:	83 ec 08             	sub    esp,0x8
c001b16d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b171:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b175:	75 17                	jne    c001b18e <Sys::timezone(regs*)+0x25>
c001b177:	83 ec 0c             	sub    esp,0xc
c001b17a:	68 c5 bd 02 c0       	push   0xc002bdc5
c001b17f:	e8 a3 76 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001b184:	83 c8 ff             	or     eax,0xffffffff
c001b187:	83 c4 10             	add    esp,0x10
c001b18a:	89 c2                	mov    edx,eax
c001b18c:	eb 20                	jmp    c001b1ae <Sys::timezone(regs*)+0x45>
c001b18e:	83 ec 0c             	sub    esp,0xc
c001b191:	68 da bd 02 c0       	push   0xc002bdda
c001b196:	e8 8c 76 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001b19b:	58                   	pop    eax
c001b19c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b19f:	e8 fe 84 ff ff       	call   c00136a2 <User::loadClockSettings(int)>
c001b1a4:	83 c4 10             	add    esp,0x10
c001b1a7:	b8 01 00 00 00       	mov    eax,0x1
c001b1ac:	31 d2                	xor    edx,edx
c001b1ae:	83 c4 08             	add    esp,0x8
c001b1b1:	5b                   	pop    ebx
c001b1b2:	c3                   	ret    

c001b1b3 <Sys::write(regs*)>:
c001b1b3:	57                   	push   edi
c001b1b4:	56                   	push   esi
c001b1b5:	53                   	push   ebx
c001b1b6:	83 ec 10             	sub    esp,0x10
c001b1b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b1bd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b1c0:	83 f8 02             	cmp    eax,0x2
c001b1c3:	77 10                	ja     c001b1d5 <Sys::write(regs*)+0x22>
c001b1c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1cd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b1d3:	eb 0e                	jmp    c001b1e3 <Sys::write(regs*)+0x30>
c001b1d5:	83 ec 0c             	sub    esp,0xc
c001b1d8:	50                   	push   eax
c001b1d9:	e8 21 61 ff ff       	call   c00112ff <getFromFileDescriptor(int)>
c001b1de:	83 c4 10             	add    esp,0x10
c001b1e1:	89 c1                	mov    ecx,eax
c001b1e3:	83 c8 ff             	or     eax,0xffffffff
c001b1e6:	85 c9                	test   ecx,ecx
c001b1e8:	89 c2                	mov    edx,eax
c001b1ea:	74 28                	je     c001b214 <Sys::write(regs*)+0x61>
c001b1ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1f4:	31 ff                	xor    edi,edi
c001b1f6:	83 ec 0c             	sub    esp,0xc
c001b1f9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b1fb:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b1ff:	52                   	push   edx
c001b200:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b203:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b206:	57                   	push   edi
c001b207:	56                   	push   esi
c001b208:	51                   	push   ecx
c001b209:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b20c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b210:	83 c4 20             	add    esp,0x20
c001b213:	99                   	cdq    
c001b214:	83 c4 10             	add    esp,0x10
c001b217:	5b                   	pop    ebx
c001b218:	5e                   	pop    esi
c001b219:	5f                   	pop    edi
c001b21a:	c3                   	ret    

c001b21b <Sys::wsbe(regs*)>:
c001b21b:	57                   	push   edi
c001b21c:	b9 0b 00 00 00       	mov    ecx,0xb
c001b221:	56                   	push   esi
c001b222:	be 19 be 02 c0       	mov    esi,0xc002be19
c001b227:	53                   	push   ebx
c001b228:	83 ec 30             	sub    esp,0x30
c001b22b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b22f:	fc                   	cld    
c001b230:	83 ec 0c             	sub    esp,0xc
c001b233:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b235:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b239:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b23e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b241:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b247:	8b 06                	mov    eax,DWORD PTR [esi]
c001b249:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b24c:	57                   	push   edi
c001b24d:	e8 1a 55 fe ff       	call   c000076c <strlen>
c001b252:	5a                   	pop    edx
c001b253:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b257:	52                   	push   edx
c001b258:	31 d2                	xor    edx,edx
c001b25a:	57                   	push   edi
c001b25b:	52                   	push   edx
c001b25c:	50                   	push   eax
c001b25d:	56                   	push   esi
c001b25e:	ff d3                	call   ebx
c001b260:	83 c4 14             	add    esp,0x14
c001b263:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b267:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b26a:	e8 e5 31 00 00       	call   c001e454 <terminateTask(int)>
c001b26f:	83 c4 40             	add    esp,0x40
c001b272:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b277:	5b                   	pop    ebx
c001b278:	31 d2                	xor    edx,edx
c001b27a:	5e                   	pop    esi
c001b27b:	5f                   	pop    edi
c001b27c:	c3                   	ret    

c001b27d <Sys::yield(regs*)>:
c001b27d:	57                   	push   edi
c001b27e:	56                   	push   esi
c001b27f:	53                   	push   ebx
c001b280:	fa                   	cli    
c001b281:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001b287:	e8 19 29 00 00       	call   c001dba5 <schedule()>
c001b28c:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001b291:	48                   	dec    eax
c001b292:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001b297:	75 01                	jne    c001b29a <Sys::yield(regs*)+0x1d>
c001b299:	fb                   	sti    
c001b29a:	8b 35 90 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e590
c001b2a0:	8b 3d 94 e5 02 c0    	mov    edi,DWORD PTR ds:0xc002e594
c001b2a6:	89 f0                	mov    eax,esi
c001b2a8:	89 fb                	mov    ebx,edi
c001b2aa:	89 f1                	mov    ecx,esi
c001b2ac:	c1 e0 07             	shl    eax,0x7
c001b2af:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b2b3:	25 80 30 0f 00       	and    eax,0xf3080
c001b2b8:	c1 eb 17             	shr    ebx,0x17
c001b2bb:	31 c8                	xor    eax,ecx
c001b2bd:	89 da                	mov    edx,ebx
c001b2bf:	5b                   	pop    ebx
c001b2c0:	5e                   	pop    esi
c001b2c1:	5f                   	pop    edi
c001b2c2:	c3                   	ret    

c001b2c3 <sysCallSeekDir(regs*)>:
c001b2c3:	31 c0                	xor    eax,eax
c001b2c5:	31 d2                	xor    edx,edx
c001b2c7:	c3                   	ret    

c001b2c8 <sysCallTellDir(regs*)>:
c001b2c8:	31 c0                	xor    eax,eax
c001b2ca:	31 d2                	xor    edx,edx
c001b2cc:	c3                   	ret    

c001b2cd <sysCallVerify(regs*)>:
c001b2cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2d1:	31 d2                	xor    edx,edx
c001b2d3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b2d6:	c3                   	ret    

c001b2d7 <sysCallGetArgc(regs*)>:
c001b2d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2df:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b2e5:	99                   	cdq    
c001b2e6:	c3                   	ret    

c001b2e7 <sysFormatDisk(regs*)>:
c001b2e7:	56                   	push   esi
c001b2e8:	53                   	push   ebx
c001b2e9:	53                   	push   ebx
c001b2ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2ee:	8b 1d 94 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e094
c001b2f4:	eb 25                	jmp    c001b31b <sysFormatDisk(regs*)+0x34>
c001b2f6:	83 ec 0c             	sub    esp,0xc
c001b2f9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b2fc:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2fe:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b301:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b304:	50                   	push   eax
c001b305:	ff 34 85 20 e5 02 c0 	push   DWORD PTR [eax*4-0x3ffd1ae0]
c001b30c:	53                   	push   ebx
c001b30d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b310:	83 c4 20             	add    esp,0x20
c001b313:	83 f8 08             	cmp    eax,0x8
c001b316:	75 12                	jne    c001b32a <sysFormatDisk(regs*)+0x43>
c001b318:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b31b:	85 db                	test   ebx,ebx
c001b31d:	75 d7                	jne    c001b2f6 <sysFormatDisk(regs*)+0xf>
c001b31f:	59                   	pop    ecx
c001b320:	b8 03 00 00 00       	mov    eax,0x3
c001b325:	31 d2                	xor    edx,edx
c001b327:	5b                   	pop    ebx
c001b328:	5e                   	pop    esi
c001b329:	c3                   	ret    
c001b32a:	85 c0                	test   eax,eax
c001b32c:	74 1b                	je     c001b349 <sysFormatDisk(regs*)+0x62>
c001b32e:	83 f8 09             	cmp    eax,0x9
c001b331:	74 0b                	je     c001b33e <sysFormatDisk(regs*)+0x57>
c001b333:	59                   	pop    ecx
c001b334:	b8 02 00 00 00       	mov    eax,0x2
c001b339:	31 d2                	xor    edx,edx
c001b33b:	5b                   	pop    ebx
c001b33c:	5e                   	pop    esi
c001b33d:	c3                   	ret    
c001b33e:	59                   	pop    ecx
c001b33f:	b8 01 00 00 00       	mov    eax,0x1
c001b344:	31 d2                	xor    edx,edx
c001b346:	5b                   	pop    ebx
c001b347:	5e                   	pop    esi
c001b348:	c3                   	ret    
c001b349:	59                   	pop    ecx
c001b34a:	31 c0                	xor    eax,eax
c001b34c:	31 d2                	xor    edx,edx
c001b34e:	5b                   	pop    ebx
c001b34f:	5e                   	pop    esi
c001b350:	c3                   	ret    

c001b351 <sysSetDiskVolumeLabel(regs*)>:
c001b351:	56                   	push   esi
c001b352:	53                   	push   ebx
c001b353:	53                   	push   ebx
c001b354:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b358:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b35b:	83 f8 19             	cmp    eax,0x19
c001b35e:	77 29                	ja     c001b389 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b360:	8b 0c 85 20 e5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1ae0]
c001b367:	85 c9                	test   ecx,ecx
c001b369:	74 1e                	je     c001b389 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b36b:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b36e:	85 d2                	test   edx,edx
c001b370:	74 17                	je     c001b389 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b372:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b378:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b37a:	52                   	push   edx
c001b37b:	50                   	push   eax
c001b37c:	51                   	push   ecx
c001b37d:	53                   	push   ebx
c001b37e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b381:	83 c4 10             	add    esp,0x10
c001b384:	99                   	cdq    
c001b385:	59                   	pop    ecx
c001b386:	5b                   	pop    ebx
c001b387:	5e                   	pop    esi
c001b388:	c3                   	ret    
c001b389:	59                   	pop    ecx
c001b38a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b38f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b394:	5b                   	pop    ebx
c001b395:	5e                   	pop    esi
c001b396:	c3                   	ret    

c001b397 <sysGetDiskVolumeLabel(regs*)>:
c001b397:	57                   	push   edi
c001b398:	56                   	push   esi
c001b399:	53                   	push   ebx
c001b39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b39e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b3a1:	83 fa 19             	cmp    edx,0x19
c001b3a4:	77 34                	ja     c001b3da <sysGetDiskVolumeLabel(regs*)+0x43>
c001b3a6:	8b 0c 95 20 e5 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1ae0]
c001b3ad:	85 c9                	test   ecx,ecx
c001b3af:	74 29                	je     c001b3da <sysGetDiskVolumeLabel(regs*)+0x43>
c001b3b1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b3b4:	85 db                	test   ebx,ebx
c001b3b6:	74 22                	je     c001b3da <sysGetDiskVolumeLabel(regs*)+0x43>
c001b3b8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b3bb:	85 c0                	test   eax,eax
c001b3bd:	74 1b                	je     c001b3da <sysGetDiskVolumeLabel(regs*)+0x43>
c001b3bf:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b3c5:	83 ec 0c             	sub    esp,0xc
c001b3c8:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b3ca:	50                   	push   eax
c001b3cb:	53                   	push   ebx
c001b3cc:	52                   	push   edx
c001b3cd:	51                   	push   ecx
c001b3ce:	56                   	push   esi
c001b3cf:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b3d2:	83 c4 20             	add    esp,0x20
c001b3d5:	99                   	cdq    
c001b3d6:	5b                   	pop    ebx
c001b3d7:	5e                   	pop    esi
c001b3d8:	5f                   	pop    edi
c001b3d9:	c3                   	ret    
c001b3da:	5b                   	pop    ebx
c001b3db:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b3e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3e5:	5e                   	pop    esi
c001b3e6:	5f                   	pop    edi
c001b3e7:	c3                   	ret    

c001b3e8 <sysShutdown(regs*)>:
c001b3e8:	83 ec 0c             	sub    esp,0xc
c001b3eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b3f2:	85 c0                	test   eax,eax
c001b3f4:	74 18                	je     c001b40e <sysShutdown(regs*)+0x26>
c001b3f6:	83 f8 01             	cmp    eax,0x1
c001b3f9:	74 38                	je     c001b433 <sysShutdown(regs*)+0x4b>
c001b3fb:	83 f8 02             	cmp    eax,0x2
c001b3fe:	74 24                	je     c001b424 <sysShutdown(regs*)+0x3c>
c001b400:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b405:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b40a:	83 c4 0c             	add    esp,0xc
c001b40d:	c3                   	ret    
c001b40e:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001b413:	8b 10                	mov    edx,DWORD PTR [eax]
c001b415:	6a 00                	push   0x0
c001b417:	6a 00                	push   0x0
c001b419:	6a 00                	push   0x0
c001b41b:	50                   	push   eax
c001b41c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b41f:	83 c4 10             	add    esp,0x10
c001b422:	eb dc                	jmp    c001b400 <sysShutdown(regs*)+0x18>
c001b424:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001b429:	8b 10                	mov    edx,DWORD PTR [eax]
c001b42b:	6a 00                	push   0x0
c001b42d:	6a 00                	push   0x0
c001b42f:	6a 01                	push   0x1
c001b431:	eb e8                	jmp    c001b41b <sysShutdown(regs*)+0x33>
c001b433:	a1 a0 e5 02 c0       	mov    eax,ds:0xc002e5a0
c001b438:	85 c0                	test   eax,eax
c001b43a:	74 02                	je     c001b43e <sysShutdown(regs*)+0x56>
c001b43c:	ff d0                	call   eax
c001b43e:	31 c0                	xor    eax,eax
c001b440:	31 d2                	xor    edx,edx
c001b442:	83 c4 0c             	add    esp,0xc
c001b445:	c3                   	ret    

c001b446 <sysCallRealpath(regs*)>:
c001b446:	83 ec 0c             	sub    esp,0xc
c001b449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b44d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b450:	85 d2                	test   edx,edx
c001b452:	74 07                	je     c001b45b <sysCallRealpath(regs*)+0x15>
c001b454:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b457:	85 c0                	test   eax,eax
c001b459:	75 0b                	jne    c001b466 <sysCallRealpath(regs*)+0x20>
c001b45b:	b8 01 00 00 00       	mov    eax,0x1
c001b460:	31 d2                	xor    edx,edx
c001b462:	83 c4 0c             	add    esp,0xc
c001b465:	c3                   	ret    
c001b466:	51                   	push   ecx
c001b467:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b46d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b470:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b476:	51                   	push   ecx
c001b477:	52                   	push   edx
c001b478:	50                   	push   eax
c001b479:	e8 5e 77 ff ff       	call   c0012bdc <Fs::standardiseFiles(char*, char const*, char const*)>
c001b47e:	83 c4 10             	add    esp,0x10
c001b481:	31 c0                	xor    eax,eax
c001b483:	31 d2                	xor    edx,edx
c001b485:	83 c4 0c             	add    esp,0xc
c001b488:	c3                   	ret    

c001b489 <sysCallReadDir(regs*)>:
c001b489:	53                   	push   ebx
c001b48a:	83 ec 18             	sub    esp,0x18
c001b48d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b491:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b494:	83 f8 02             	cmp    eax,0x2
c001b497:	76 60                	jbe    c001b4f9 <sysCallReadDir(regs*)+0x70>
c001b499:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b4a0:	77 48                	ja     c001b4ea <sysCallReadDir(regs*)+0x61>
c001b4a2:	83 ec 0c             	sub    esp,0xc
c001b4a5:	50                   	push   eax
c001b4a6:	e8 54 5e ff ff       	call   c00112ff <getFromFileDescriptor(int)>
c001b4ab:	83 c4 10             	add    esp,0x10
c001b4ae:	85 c0                	test   eax,eax
c001b4b0:	74 38                	je     c001b4ea <sysCallReadDir(regs*)+0x61>
c001b4b2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b4ba:	83 ec 0c             	sub    esp,0xc
c001b4bd:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4bf:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b4c3:	51                   	push   ecx
c001b4c4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4c7:	6a 00                	push   0x0
c001b4c9:	68 10 01 00 00       	push   0x110
c001b4ce:	50                   	push   eax
c001b4cf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b4d2:	83 c4 20             	add    esp,0x20
c001b4d5:	85 c0                	test   eax,eax
c001b4d7:	74 29                	je     c001b502 <sysCallReadDir(regs*)+0x79>
c001b4d9:	83 f8 07             	cmp    eax,0x7
c001b4dc:	74 1b                	je     c001b4f9 <sysCallReadDir(regs*)+0x70>
c001b4de:	b8 02 00 00 00       	mov    eax,0x2
c001b4e3:	31 d2                	xor    edx,edx
c001b4e5:	83 c4 18             	add    esp,0x18
c001b4e8:	5b                   	pop    ebx
c001b4e9:	c3                   	ret    
c001b4ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4f4:	83 c4 18             	add    esp,0x18
c001b4f7:	5b                   	pop    ebx
c001b4f8:	c3                   	ret    
c001b4f9:	b8 01 00 00 00       	mov    eax,0x1
c001b4fe:	31 d2                	xor    edx,edx
c001b500:	eb e3                	jmp    c001b4e5 <sysCallReadDir(regs*)+0x5c>
c001b502:	31 c0                	xor    eax,eax
c001b504:	31 d2                	xor    edx,edx
c001b506:	eb dd                	jmp    c001b4e5 <sysCallReadDir(regs*)+0x5c>

c001b508 <sysCallIsATTY(regs*)>:
c001b508:	83 ec 0c             	sub    esp,0xc
c001b50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b50f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b512:	83 f8 02             	cmp    eax,0x2
c001b515:	76 07                	jbe    c001b51e <sysCallIsATTY(regs*)+0x16>
c001b517:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b51c:	75 26                	jne    c001b544 <sysCallIsATTY(regs*)+0x3c>
c001b51e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b523:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b526:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b52c:	85 c0                	test   eax,eax
c001b52e:	74 24                	je     c001b554 <sysCallIsATTY(regs*)+0x4c>
c001b530:	83 ec 0c             	sub    esp,0xc
c001b533:	8b 10                	mov    edx,DWORD PTR [eax]
c001b535:	50                   	push   eax
c001b536:	ff 12                	call   DWORD PTR [edx]
c001b538:	31 d2                	xor    edx,edx
c001b53a:	0f b6 c0             	movzx  eax,al
c001b53d:	83 c4 10             	add    esp,0x10
c001b540:	83 c4 0c             	add    esp,0xc
c001b543:	c3                   	ret    
c001b544:	83 ec 0c             	sub    esp,0xc
c001b547:	50                   	push   eax
c001b548:	e8 b2 5d ff ff       	call   c00112ff <getFromFileDescriptor(int)>
c001b54d:	83 c4 10             	add    esp,0x10
c001b550:	85 c0                	test   eax,eax
c001b552:	75 dc                	jne    c001b530 <sysCallIsATTY(regs*)+0x28>
c001b554:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b559:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b55e:	83 c4 0c             	add    esp,0xc
c001b561:	c3                   	ret    

c001b562 <sysCallSeek(regs*)>:
c001b562:	53                   	push   ebx
c001b563:	83 ec 08             	sub    esp,0x8
c001b566:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b56a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b56d:	8d 50 fd             	lea    edx,[eax-0x3]
c001b570:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b576:	77 32                	ja     c001b5aa <sysCallSeek(regs*)+0x48>
c001b578:	83 ec 0c             	sub    esp,0xc
c001b57b:	50                   	push   eax
c001b57c:	e8 7e 5d ff ff       	call   c00112ff <getFromFileDescriptor(int)>
c001b581:	83 c4 0c             	add    esp,0xc
c001b584:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b587:	31 db                	xor    ebx,ebx
c001b589:	53                   	push   ebx
c001b58a:	51                   	push   ecx
c001b58b:	50                   	push   eax
c001b58c:	e8 17 79 ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c001b591:	83 c4 10             	add    esp,0x10
c001b594:	85 c0                	test   eax,eax
c001b596:	0f 95 c0             	setne  al
c001b599:	31 d2                	xor    edx,edx
c001b59b:	0f b6 c0             	movzx  eax,al
c001b59e:	f7 d8                	neg    eax
c001b5a0:	83 d2 00             	adc    edx,0x0
c001b5a3:	83 c4 08             	add    esp,0x8
c001b5a6:	f7 da                	neg    edx
c001b5a8:	5b                   	pop    ebx
c001b5a9:	c3                   	ret    
c001b5aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5af:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5b4:	83 c4 08             	add    esp,0x8
c001b5b7:	5b                   	pop    ebx
c001b5b8:	c3                   	ret    

c001b5b9 <sysCallTell(regs*)>:
c001b5b9:	53                   	push   ebx
c001b5ba:	83 ec 08             	sub    esp,0x8
c001b5bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5c1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5c4:	83 f8 02             	cmp    eax,0x2
c001b5c7:	76 4d                	jbe    c001b616 <sysCallTell(regs*)+0x5d>
c001b5c9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b5ce:	76 19                	jbe    c001b5e9 <sysCallTell(regs*)+0x30>
c001b5d0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b5d3:	31 d2                	xor    edx,edx
c001b5d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b5db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b5e2:	31 c0                	xor    eax,eax
c001b5e4:	83 c4 08             	add    esp,0x8
c001b5e7:	5b                   	pop    ebx
c001b5e8:	c3                   	ret    
c001b5e9:	83 ec 0c             	sub    esp,0xc
c001b5ec:	50                   	push   eax
c001b5ed:	e8 0d 5d ff ff       	call   c00112ff <getFromFileDescriptor(int)>
c001b5f2:	5a                   	pop    edx
c001b5f3:	59                   	pop    ecx
c001b5f4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b5f7:	50                   	push   eax
c001b5f8:	e8 01 79 ff ff       	call   c0012efe <File::tell(unsigned long long*)>
c001b5fd:	83 c4 10             	add    esp,0x10
c001b600:	85 c0                	test   eax,eax
c001b602:	0f 95 c0             	setne  al
c001b605:	31 d2                	xor    edx,edx
c001b607:	0f b6 c0             	movzx  eax,al
c001b60a:	f7 d8                	neg    eax
c001b60c:	83 d2 00             	adc    edx,0x0
c001b60f:	83 c4 08             	add    esp,0x8
c001b612:	f7 da                	neg    edx
c001b614:	5b                   	pop    ebx
c001b615:	c3                   	ret    
c001b616:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b61b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b620:	83 c4 08             	add    esp,0x8
c001b623:	5b                   	pop    ebx
c001b624:	c3                   	ret    

c001b625 <sysCallSize(regs*)>:
c001b625:	53                   	push   ebx
c001b626:	83 ec 18             	sub    esp,0x18
c001b629:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b62d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b630:	83 f8 02             	cmp    eax,0x2
c001b633:	76 53                	jbe    c001b688 <sysCallSize(regs*)+0x63>
c001b635:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b63a:	76 19                	jbe    c001b655 <sysCallSize(regs*)+0x30>
c001b63c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b63f:	31 d2                	xor    edx,edx
c001b641:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b647:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b64e:	31 c0                	xor    eax,eax
c001b650:	83 c4 18             	add    esp,0x18
c001b653:	5b                   	pop    ebx
c001b654:	c3                   	ret    
c001b655:	83 ec 0c             	sub    esp,0xc
c001b658:	50                   	push   eax
c001b659:	e8 a1 5c ff ff       	call   c00112ff <getFromFileDescriptor(int)>
c001b65e:	83 c4 0c             	add    esp,0xc
c001b661:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b665:	52                   	push   edx
c001b666:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b669:	50                   	push   eax
c001b66a:	e8 27 7a ff ff       	call   c0013096 <File::stat(unsigned long long*, bool*)>
c001b66f:	83 c4 10             	add    esp,0x10
c001b672:	85 c0                	test   eax,eax
c001b674:	0f 95 c0             	setne  al
c001b677:	31 d2                	xor    edx,edx
c001b679:	0f b6 c0             	movzx  eax,al
c001b67c:	f7 d8                	neg    eax
c001b67e:	83 d2 00             	adc    edx,0x0
c001b681:	83 c4 18             	add    esp,0x18
c001b684:	f7 da                	neg    edx
c001b686:	5b                   	pop    ebx
c001b687:	c3                   	ret    
c001b688:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b68d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b692:	83 c4 18             	add    esp,0x18
c001b695:	5b                   	pop    ebx
c001b696:	c3                   	ret    

c001b697 <sysCallSizeFromFilename(regs*)>:
c001b697:	57                   	push   edi
c001b698:	56                   	push   esi
c001b699:	53                   	push   ebx
c001b69a:	83 ec 20             	sub    esp,0x20
c001b69d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b6a1:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b6a4:	83 fb 02             	cmp    ebx,0x2
c001b6a7:	0f 86 88 00 00 00    	jbe    c001b735 <sysCallSizeFromFilename(regs*)+0x9e>
c001b6ad:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b6b3:	76 1b                	jbe    c001b6d0 <sysCallSizeFromFilename(regs*)+0x39>
c001b6b5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b6b8:	31 d2                	xor    edx,edx
c001b6ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b6c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b6c7:	83 c4 20             	add    esp,0x20
c001b6ca:	31 c0                	xor    eax,eax
c001b6cc:	5b                   	pop    ebx
c001b6cd:	5e                   	pop    esi
c001b6ce:	5f                   	pop    edi
c001b6cf:	c3                   	ret    
c001b6d0:	83 ec 0c             	sub    esp,0xc
c001b6d3:	68 14 01 00 00       	push   0x114
c001b6d8:	e8 f2 40 ff ff       	call   c000f7cf <malloc>
c001b6dd:	83 c4 0c             	add    esp,0xc
c001b6e0:	89 c7                	mov    edi,eax
c001b6e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6e7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6ea:	53                   	push   ebx
c001b6eb:	57                   	push   edi
c001b6ec:	e8 95 76 ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c001b6f1:	83 c4 0c             	add    esp,0xc
c001b6f4:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b6f8:	50                   	push   eax
c001b6f9:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b6fc:	57                   	push   edi
c001b6fd:	e8 94 79 ff ff       	call   c0013096 <File::stat(unsigned long long*, bool*)>
c001b702:	83 c4 10             	add    esp,0x10
c001b705:	85 ff                	test   edi,edi
c001b707:	74 14                	je     c001b71d <sysCallSizeFromFilename(regs*)+0x86>
c001b709:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b70d:	8b 17                	mov    edx,DWORD PTR [edi]
c001b70f:	83 ec 0c             	sub    esp,0xc
c001b712:	57                   	push   edi
c001b713:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b716:	83 c4 10             	add    esp,0x10
c001b719:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b71d:	85 c0                	test   eax,eax
c001b71f:	0f 95 c0             	setne  al
c001b722:	31 d2                	xor    edx,edx
c001b724:	0f b6 c0             	movzx  eax,al
c001b727:	f7 d8                	neg    eax
c001b729:	83 d2 00             	adc    edx,0x0
c001b72c:	83 c4 20             	add    esp,0x20
c001b72f:	f7 da                	neg    edx
c001b731:	5b                   	pop    ebx
c001b732:	5e                   	pop    esi
c001b733:	5f                   	pop    edi
c001b734:	c3                   	ret    
c001b735:	83 c4 20             	add    esp,0x20
c001b738:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b73d:	5b                   	pop    ebx
c001b73e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b743:	5e                   	pop    esi
c001b744:	5f                   	pop    edi
c001b745:	c3                   	ret    

c001b746 <sysCallClose(regs*)>:
c001b746:	53                   	push   ebx
c001b747:	83 ec 08             	sub    esp,0x8
c001b74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b74e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b751:	83 f8 02             	cmp    eax,0x2
c001b754:	76 41                	jbe    c001b797 <sysCallClose(regs*)+0x51>
c001b756:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b75c:	83 fa 01             	cmp    edx,0x1
c001b75f:	76 2d                	jbe    c001b78e <sysCallClose(regs*)+0x48>
c001b761:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b766:	77 2f                	ja     c001b797 <sysCallClose(regs*)+0x51>
c001b768:	83 ec 0c             	sub    esp,0xc
c001b76b:	50                   	push   eax
c001b76c:	e8 8e 5b ff ff       	call   c00112ff <getFromFileDescriptor(int)>
c001b771:	89 c3                	mov    ebx,eax
c001b773:	89 04 24             	mov    DWORD PTR [esp],eax
c001b776:	e8 cd 76 ff ff       	call   c0012e48 <File::close()>
c001b77b:	83 c4 10             	add    esp,0x10
c001b77e:	85 db                	test   ebx,ebx
c001b780:	74 0c                	je     c001b78e <sysCallClose(regs*)+0x48>
c001b782:	83 ec 0c             	sub    esp,0xc
c001b785:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b787:	53                   	push   ebx
c001b788:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b78b:	83 c4 10             	add    esp,0x10
c001b78e:	31 c0                	xor    eax,eax
c001b790:	31 d2                	xor    edx,edx
c001b792:	83 c4 08             	add    esp,0x8
c001b795:	5b                   	pop    ebx
c001b796:	c3                   	ret    
c001b797:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b79c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7a1:	83 c4 08             	add    esp,0x8
c001b7a4:	5b                   	pop    ebx
c001b7a5:	c3                   	ret    

c001b7a6 <sysCallOpenDir(regs*)>:
c001b7a6:	56                   	push   esi
c001b7a7:	53                   	push   ebx
c001b7a8:	53                   	push   ebx
c001b7a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7ad:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b7b0:	85 f6                	test   esi,esi
c001b7b2:	74 59                	je     c001b80d <sysCallOpenDir(regs*)+0x67>
c001b7b4:	83 ec 0c             	sub    esp,0xc
c001b7b7:	68 14 01 00 00       	push   0x114
c001b7bc:	e8 0e 40 ff ff       	call   c000f7cf <malloc>
c001b7c1:	83 c4 0c             	add    esp,0xc
c001b7c4:	89 c6                	mov    esi,eax
c001b7c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7cb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7ce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7d1:	56                   	push   esi
c001b7d2:	e8 5b 7a ff ff       	call   c0013232 <Directory::Directory(char const*, Process*)>
c001b7d7:	83 c4 10             	add    esp,0x10
c001b7da:	85 f6                	test   esi,esi
c001b7dc:	74 2f                	je     c001b80d <sysCallOpenDir(regs*)+0x67>
c001b7de:	83 ec 0c             	sub    esp,0xc
c001b7e1:	56                   	push   esi
c001b7e2:	e8 af 7a ff ff       	call   c0013296 <Directory::open()>
c001b7e7:	83 c4 10             	add    esp,0x10
c001b7ea:	85 c0                	test   eax,eax
c001b7ec:	75 1f                	jne    c001b80d <sysCallOpenDir(regs*)+0x67>
c001b7ee:	83 ec 0c             	sub    esp,0xc
c001b7f1:	56                   	push   esi
c001b7f2:	e8 13 58 ff ff       	call   c001100a <UnixFile::getFileDescriptor()>
c001b7f7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b7fa:	83 c4 10             	add    esp,0x10
c001b7fd:	89 02                	mov    DWORD PTR [edx],eax
c001b7ff:	c1 f8 1f             	sar    eax,0x1f
c001b802:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b805:	31 c0                	xor    eax,eax
c001b807:	59                   	pop    ecx
c001b808:	31 d2                	xor    edx,edx
c001b80a:	5b                   	pop    ebx
c001b80b:	5e                   	pop    esi
c001b80c:	c3                   	ret    
c001b80d:	59                   	pop    ecx
c001b80e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b813:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b818:	5b                   	pop    ebx
c001b819:	5e                   	pop    esi
c001b81a:	c3                   	ret    

c001b81b <sysCallCloseDir(regs*)>:
c001b81b:	53                   	push   ebx
c001b81c:	83 ec 08             	sub    esp,0x8
c001b81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b823:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b826:	8d 50 fd             	lea    edx,[eax-0x3]
c001b829:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b82f:	77 2f                	ja     c001b860 <sysCallCloseDir(regs*)+0x45>
c001b831:	83 ec 0c             	sub    esp,0xc
c001b834:	50                   	push   eax
c001b835:	e8 c5 5a ff ff       	call   c00112ff <getFromFileDescriptor(int)>
c001b83a:	89 c3                	mov    ebx,eax
c001b83c:	89 04 24             	mov    DWORD PTR [esp],eax
c001b83f:	e8 ae 7a ff ff       	call   c00132f2 <Directory::close()>
c001b844:	83 c4 10             	add    esp,0x10
c001b847:	85 db                	test   ebx,ebx
c001b849:	74 0c                	je     c001b857 <sysCallCloseDir(regs*)+0x3c>
c001b84b:	83 ec 0c             	sub    esp,0xc
c001b84e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b850:	53                   	push   ebx
c001b851:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b854:	83 c4 10             	add    esp,0x10
c001b857:	31 c0                	xor    eax,eax
c001b859:	31 d2                	xor    edx,edx
c001b85b:	83 c4 08             	add    esp,0x8
c001b85e:	5b                   	pop    ebx
c001b85f:	c3                   	ret    
c001b860:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b865:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b86a:	83 c4 08             	add    esp,0x8
c001b86d:	5b                   	pop    ebx
c001b86e:	c3                   	ret    

c001b86f <sysCallMakeDir(regs*)>:
c001b86f:	56                   	push   esi
c001b870:	53                   	push   ebx
c001b871:	83 ec 10             	sub    esp,0x10
c001b874:	68 14 01 00 00       	push   0x114
c001b879:	e8 51 3f ff ff       	call   c000f7cf <malloc>
c001b87e:	83 c4 0c             	add    esp,0xc
c001b881:	89 c3                	mov    ebx,eax
c001b883:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b888:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b88b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b88f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b892:	53                   	push   ebx
c001b893:	e8 9a 79 ff ff       	call   c0013232 <Directory::Directory(char const*, Process*)>
c001b898:	83 c4 10             	add    esp,0x10
c001b89b:	85 db                	test   ebx,ebx
c001b89d:	74 32                	je     c001b8d1 <sysCallMakeDir(regs*)+0x62>
c001b89f:	83 ec 0c             	sub    esp,0xc
c001b8a2:	53                   	push   ebx
c001b8a3:	e8 ce 7b ff ff       	call   c0013476 <Directory::create()>
c001b8a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8ab:	89 c6                	mov    esi,eax
c001b8ad:	e8 40 7a ff ff       	call   c00132f2 <Directory::close()>
c001b8b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b8ba:	83 c4 10             	add    esp,0x10
c001b8bd:	31 c0                	xor    eax,eax
c001b8bf:	59                   	pop    ecx
c001b8c0:	85 f6                	test   esi,esi
c001b8c2:	5b                   	pop    ebx
c001b8c3:	0f 95 c0             	setne  al
c001b8c6:	5e                   	pop    esi
c001b8c7:	31 d2                	xor    edx,edx
c001b8c9:	f7 d8                	neg    eax
c001b8cb:	83 d2 00             	adc    edx,0x0
c001b8ce:	f7 da                	neg    edx
c001b8d0:	c3                   	ret    
c001b8d1:	59                   	pop    ecx
c001b8d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8dc:	5b                   	pop    ebx
c001b8dd:	5e                   	pop    esi
c001b8de:	c3                   	ret    

c001b8df <sysCallWait(regs*)>:
c001b8df:	83 ec 10             	sub    esp,0x10
c001b8e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8e6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b8e9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b8ec:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b8ef:	e8 b4 24 00 00       	call   c001dda8 <waitTask(int, int*, int)>
c001b8f4:	83 c4 1c             	add    esp,0x1c
c001b8f7:	99                   	cdq    
c001b8f8:	c3                   	ret    

c001b8f9 <sysCallNotImpl(regs*)>:
c001b8f9:	83 ec 18             	sub    esp,0x18
c001b8fc:	68 45 be 02 c0       	push   0xc002be45
c001b901:	e8 0d e7 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001b906:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b90b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b910:	83 c4 1c             	add    esp,0x1c
c001b913:	c3                   	ret    

c001b914 <sysPanic(regs*)>:
c001b914:	83 ec 18             	sub    esp,0x18
c001b917:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b91b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b91e:	e8 f0 e6 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001b923:	b8 01 00 00 00       	mov    eax,0x1
c001b928:	31 d2                	xor    edx,edx
c001b92a:	83 c4 1c             	add    esp,0x1c
c001b92d:	c3                   	ret    

c001b92e <sysCallRmdir(regs*)>:
c001b92e:	56                   	push   esi
c001b92f:	53                   	push   ebx
c001b930:	83 ec 20             	sub    esp,0x20
c001b933:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b937:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b93a:	68 14 01 00 00       	push   0x114
c001b93f:	e8 8b 3e ff ff       	call   c000f7cf <malloc>
c001b944:	83 c4 0c             	add    esp,0xc
c001b947:	89 c3                	mov    ebx,eax
c001b949:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b94e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b951:	56                   	push   esi
c001b952:	53                   	push   ebx
c001b953:	e8 2e 74 ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c001b958:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b95b:	e8 02 76 ff ff       	call   c0012f62 <File::unlink()>
c001b960:	83 c4 10             	add    esp,0x10
c001b963:	85 db                	test   ebx,ebx
c001b965:	74 14                	je     c001b97b <sysCallRmdir(regs*)+0x4d>
c001b967:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b96b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b96d:	83 ec 0c             	sub    esp,0xc
c001b970:	53                   	push   ebx
c001b971:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b974:	83 c4 10             	add    esp,0x10
c001b977:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b97b:	85 c0                	test   eax,eax
c001b97d:	0f 95 c0             	setne  al
c001b980:	31 d2                	xor    edx,edx
c001b982:	0f b6 c0             	movzx  eax,al
c001b985:	f7 d8                	neg    eax
c001b987:	83 d2 00             	adc    edx,0x0
c001b98a:	83 c4 14             	add    esp,0x14
c001b98d:	f7 da                	neg    edx
c001b98f:	5b                   	pop    ebx
c001b990:	5e                   	pop    esi
c001b991:	c3                   	ret    

c001b992 <sysCallUnlink(regs*)>:
c001b992:	56                   	push   esi
c001b993:	53                   	push   ebx
c001b994:	83 ec 20             	sub    esp,0x20
c001b997:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b99b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b99e:	68 14 01 00 00       	push   0x114
c001b9a3:	e8 27 3e ff ff       	call   c000f7cf <malloc>
c001b9a8:	83 c4 0c             	add    esp,0xc
c001b9ab:	89 c3                	mov    ebx,eax
c001b9ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9b2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9b5:	56                   	push   esi
c001b9b6:	53                   	push   ebx
c001b9b7:	e8 ca 73 ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c001b9bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9bf:	e8 9e 75 ff ff       	call   c0012f62 <File::unlink()>
c001b9c4:	83 c4 10             	add    esp,0x10
c001b9c7:	85 db                	test   ebx,ebx
c001b9c9:	74 14                	je     c001b9df <sysCallUnlink(regs*)+0x4d>
c001b9cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9cf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b9d1:	83 ec 0c             	sub    esp,0xc
c001b9d4:	53                   	push   ebx
c001b9d5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b9d8:	83 c4 10             	add    esp,0x10
c001b9db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9df:	85 c0                	test   eax,eax
c001b9e1:	0f 95 c0             	setne  al
c001b9e4:	31 d2                	xor    edx,edx
c001b9e6:	0f b6 c0             	movzx  eax,al
c001b9e9:	f7 d8                	neg    eax
c001b9eb:	83 d2 00             	adc    edx,0x0
c001b9ee:	83 c4 14             	add    esp,0x14
c001b9f1:	f7 da                	neg    edx
c001b9f3:	5b                   	pop    ebx
c001b9f4:	5e                   	pop    esi
c001b9f5:	c3                   	ret    

c001b9f6 <sysCallGetArgv(regs*)>:
c001b9f6:	83 ec 0c             	sub    esp,0xc
c001b9f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9fd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ba00:	85 c0                	test   eax,eax
c001ba02:	78 2b                	js     c001ba2f <sysCallGetArgv(regs*)+0x39>
c001ba04:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ba0a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001ba0d:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001ba13:	7d 1a                	jge    c001ba2f <sysCallGetArgv(regs*)+0x39>
c001ba15:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001ba1c:	85 c0                	test   eax,eax
c001ba1e:	74 17                	je     c001ba37 <sysCallGetArgv(regs*)+0x41>
c001ba20:	83 ec 08             	sub    esp,0x8
c001ba23:	50                   	push   eax
c001ba24:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001ba27:	e8 e0 4d fe ff       	call   c000080c <strcpy>
c001ba2c:	83 c4 10             	add    esp,0x10
c001ba2f:	31 c0                	xor    eax,eax
c001ba31:	31 d2                	xor    edx,edx
c001ba33:	83 c4 0c             	add    esp,0xc
c001ba36:	c3                   	ret    
c001ba37:	b8 01 00 00 00       	mov    eax,0x1
c001ba3c:	31 d2                	xor    edx,edx
c001ba3e:	83 c4 0c             	add    esp,0xc
c001ba41:	c3                   	ret    

c001ba42 <sysCallTTYName(regs*)>:
c001ba42:	56                   	push   esi
c001ba43:	53                   	push   ebx
c001ba44:	53                   	push   ebx
c001ba45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba49:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001ba4c:	85 c0                	test   eax,eax
c001ba4e:	74 5f                	je     c001baaf <sysCallTTYName(regs*)+0x6d>
c001ba50:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ba53:	83 f8 02             	cmp    eax,0x2
c001ba56:	77 3e                	ja     c001ba96 <sysCallTTYName(regs*)+0x54>
c001ba58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba5d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba60:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001ba66:	85 db                	test   ebx,ebx
c001ba68:	74 45                	je     c001baaf <sysCallTTYName(regs*)+0x6d>
c001ba6a:	83 ec 0c             	sub    esp,0xc
c001ba6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ba6f:	53                   	push   ebx
c001ba70:	ff 10                	call   DWORD PTR [eax]
c001ba72:	83 c4 10             	add    esp,0x10
c001ba75:	84 c0                	test   al,al
c001ba77:	74 41                	je     c001baba <sysCallTTYName(regs*)+0x78>
c001ba79:	83 ec 08             	sub    esp,0x8
c001ba7c:	81 c3 82 00 00 00    	add    ebx,0x82
c001ba82:	53                   	push   ebx
c001ba83:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ba86:	e8 81 4d fe ff       	call   c000080c <strcpy>
c001ba8b:	83 c4 10             	add    esp,0x10
c001ba8e:	31 c0                	xor    eax,eax
c001ba90:	59                   	pop    ecx
c001ba91:	31 d2                	xor    edx,edx
c001ba93:	5b                   	pop    ebx
c001ba94:	5e                   	pop    esi
c001ba95:	c3                   	ret    
c001ba96:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba9b:	74 bb                	je     c001ba58 <sysCallTTYName(regs*)+0x16>
c001ba9d:	83 ec 0c             	sub    esp,0xc
c001baa0:	50                   	push   eax
c001baa1:	e8 59 58 ff ff       	call   c00112ff <getFromFileDescriptor(int)>
c001baa6:	83 c4 10             	add    esp,0x10
c001baa9:	89 c3                	mov    ebx,eax
c001baab:	85 db                	test   ebx,ebx
c001baad:	75 bb                	jne    c001ba6a <sysCallTTYName(regs*)+0x28>
c001baaf:	59                   	pop    ecx
c001bab0:	b8 01 00 00 00       	mov    eax,0x1
c001bab5:	31 d2                	xor    edx,edx
c001bab7:	5b                   	pop    ebx
c001bab8:	5e                   	pop    esi
c001bab9:	c3                   	ret    
c001baba:	59                   	pop    ecx
c001babb:	b8 02 00 00 00       	mov    eax,0x2
c001bac0:	31 d2                	xor    edx,edx
c001bac2:	5b                   	pop    ebx
c001bac3:	5e                   	pop    esi
c001bac4:	c3                   	ret    

c001bac5 <sysCallUSleep(regs*)>:
c001bac5:	83 ec 14             	sub    esp,0x14
c001bac8:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bacd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bad1:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bad8:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001badb:	01 ca                	add    edx,ecx
c001badd:	52                   	push   edx
c001bade:	50                   	push   eax
c001badf:	e8 9b 23 00 00       	call   c001de7f <nanoSleep(unsigned long long)>
c001bae4:	31 c0                	xor    eax,eax
c001bae6:	31 d2                	xor    edx,edx
c001bae8:	83 c4 1c             	add    esp,0x1c
c001baeb:	c3                   	ret    

c001baec <sysCallSpawn(regs*)>:
c001baec:	56                   	push   esi
c001baed:	53                   	push   ebx
c001baee:	50                   	push   eax
c001baef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001baf3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001baf6:	85 c0                	test   eax,eax
c001baf8:	75 08                	jne    c001bb02 <sysCallSpawn(regs*)+0x16>
c001bafa:	59                   	pop    ecx
c001bafb:	31 c0                	xor    eax,eax
c001bafd:	31 d2                	xor    edx,edx
c001baff:	5b                   	pop    ebx
c001bb00:	5e                   	pop    esi
c001bb01:	c3                   	ret    
c001bb02:	83 ec 0c             	sub    esp,0xc
c001bb05:	68 3f 07 00 00       	push   0x73f
c001bb0a:	e8 c0 3c ff ff       	call   c000f7cf <malloc>
c001bb0f:	83 c4 10             	add    esp,0x10
c001bb12:	89 c6                	mov    esi,eax
c001bb14:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bb17:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb1a:	85 c0                	test   eax,eax
c001bb1c:	75 32                	jne    c001bb50 <sysCallSpawn(regs*)+0x64>
c001bb1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb23:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb26:	52                   	push   edx
c001bb27:	50                   	push   eax
c001bb28:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb2b:	56                   	push   esi
c001bb2c:	e8 73 1a 00 00       	call   c001d5a4 <Process::Process(char const*, Process*, char**)>
c001bb31:	83 c4 10             	add    esp,0x10
c001bb34:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bb3b:	75 bd                	jne    c001bafa <sysCallSpawn(regs*)+0xe>
c001bb3d:	83 ec 0c             	sub    esp,0xc
c001bb40:	56                   	push   esi
c001bb41:	e8 40 1f 00 00       	call   c001da86 <Process::createUserThread()>
c001bb46:	8b 06                	mov    eax,DWORD PTR [esi]
c001bb48:	83 c4 10             	add    esp,0x10
c001bb4b:	99                   	cdq    
c001bb4c:	59                   	pop    ecx
c001bb4d:	5b                   	pop    ebx
c001bb4e:	5e                   	pop    esi
c001bb4f:	c3                   	ret    
c001bb50:	31 c0                	xor    eax,eax
c001bb52:	eb d2                	jmp    c001bb26 <sysCallSpawn(regs*)+0x3a>

c001bb54 <sysCallGetEnv(regs*)>:
c001bb54:	57                   	push   edi
c001bb55:	56                   	push   esi
c001bb56:	53                   	push   ebx
c001bb57:	83 ec 1c             	sub    esp,0x1c
c001bb5a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bb5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb63:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001bb66:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bb69:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb6c:	e8 ee e3 ff ff       	call   c0019f5f <Krnl::getProcessTotalEnvCount(Process*)>
c001bb71:	83 c4 10             	add    esp,0x10
c001bb74:	39 c7                	cmp    edi,eax
c001bb76:	7c 14                	jl     c001bb8c <sysCallGetEnv(regs*)+0x38>
c001bb78:	85 f6                	test   esi,esi
c001bb7a:	75 0b                	jne    c001bb87 <sysCallGetEnv(regs*)+0x33>
c001bb7c:	83 c4 10             	add    esp,0x10
c001bb7f:	31 c0                	xor    eax,eax
c001bb81:	5b                   	pop    ebx
c001bb82:	31 d2                	xor    edx,edx
c001bb84:	5e                   	pop    esi
c001bb85:	5f                   	pop    edi
c001bb86:	c3                   	ret    
c001bb87:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bb8a:	eb f0                	jmp    c001bb7c <sysCallGetEnv(regs*)+0x28>
c001bb8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bb90:	52                   	push   edx
c001bb91:	57                   	push   edi
c001bb92:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bb98:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bb9b:	50                   	push   eax
c001bb9c:	e8 de e3 ff ff       	call   c0019f7f <Krnl::getProcessEnvPair(Process*, int)>
c001bba1:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bba4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bba8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bbac:	83 c4 0c             	add    esp,0xc
c001bbaf:	85 c9                	test   ecx,ecx
c001bbb1:	75 23                	jne    c001bbd6 <sysCallGetEnv(regs*)+0x82>
c001bbb3:	83 ec 0c             	sub    esp,0xc
c001bbb6:	50                   	push   eax
c001bbb7:	e8 b0 4b fe ff       	call   c000076c <strlen>
c001bbbc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bbbf:	89 c3                	mov    ebx,eax
c001bbc1:	e8 a6 4b fe ff       	call   c000076c <strlen>
c001bbc6:	83 c4 10             	add    esp,0x10
c001bbc9:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bbcd:	83 c4 10             	add    esp,0x10
c001bbd0:	31 d2                	xor    edx,edx
c001bbd2:	5b                   	pop    ebx
c001bbd3:	5e                   	pop    esi
c001bbd4:	5f                   	pop    edi
c001bbd5:	c3                   	ret    
c001bbd6:	83 ec 08             	sub    esp,0x8
c001bbd9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bbdc:	50                   	push   eax
c001bbdd:	56                   	push   esi
c001bbde:	e8 29 4c fe ff       	call   c000080c <strcpy>
c001bbe3:	58                   	pop    eax
c001bbe4:	5a                   	pop    edx
c001bbe5:	68 5f be 02 c0       	push   0xc002be5f
c001bbea:	56                   	push   esi
c001bbeb:	e8 5c 4d fe ff       	call   c000094c <strcat>
c001bbf0:	59                   	pop    ecx
c001bbf1:	5b                   	pop    ebx
c001bbf2:	57                   	push   edi
c001bbf3:	56                   	push   esi
c001bbf4:	e8 53 4d fe ff       	call   c000094c <strcat>
c001bbf9:	83 c4 10             	add    esp,0x10
c001bbfc:	e9 7b ff ff ff       	jmp    c001bb7c <sysCallGetEnv(regs*)+0x28>

c001bc01 <sysAppSettings(regs*)>:
c001bc01:	57                   	push   edi
c001bc02:	56                   	push   esi
c001bc03:	56                   	push   esi
c001bc04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc08:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bc0b:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001bc11:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bc16:	66 3d c0 09          	cmp    ax,0x9c0
c001bc1a:	75 2e                	jne    c001bc4a <sysAppSettings(regs*)+0x49>
c001bc1c:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001bc22:	83 e0 1f             	and    eax,0x1f
c001bc25:	3c 01                	cmp    al,0x1
c001bc27:	74 2c                	je     c001bc55 <sysAppSettings(regs*)+0x54>
c001bc29:	3c 07                	cmp    al,0x7
c001bc2b:	0f 84 b3 00 00 00    	je     c001bce4 <sysAppSettings(regs*)+0xe3>
c001bc31:	84 c0                	test   al,al
c001bc33:	0f 84 d2 00 00 00    	je     c001bd0b <sysAppSettings(regs*)+0x10a>
c001bc39:	3c 08                	cmp    al,0x8
c001bc3b:	74 63                	je     c001bca0 <sysAppSettings(regs*)+0x9f>
c001bc3d:	59                   	pop    ecx
c001bc3e:	0f b6 c0             	movzx  eax,al
c001bc41:	5e                   	pop    esi
c001bc42:	05 e8 03 00 00       	add    eax,0x3e8
c001bc47:	5f                   	pop    edi
c001bc48:	99                   	cdq    
c001bc49:	c3                   	ret    
c001bc4a:	b8 01 00 00 00       	mov    eax,0x1
c001bc4f:	59                   	pop    ecx
c001bc50:	31 d2                	xor    edx,edx
c001bc52:	5e                   	pop    esi
c001bc53:	5f                   	pop    edi
c001bc54:	c3                   	ret    
c001bc55:	50                   	push   eax
c001bc56:	68 00 01 00 00       	push   0x100
c001bc5b:	6a 00                	push   0x0
c001bc5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc62:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc65:	83 c0 0c             	add    eax,0xc
c001bc68:	50                   	push   eax
c001bc69:	e8 e2 4a fe ff       	call   c0000750 <memset>
c001bc6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc73:	b9 ff 00 00 00       	mov    ecx,0xff
c001bc78:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001bc7b:	83 c7 0c             	add    edi,0xc
c001bc7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bc80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc85:	5a                   	pop    edx
c001bc86:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc89:	59                   	pop    ecx
c001bc8a:	8d 50 0c             	lea    edx,[eax+0xc]
c001bc8d:	52                   	push   edx
c001bc8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bc94:	e8 8f 47 ff ff       	call   c0010428 <VgaText::setTitle(char*)>
c001bc99:	83 c4 10             	add    esp,0x10
c001bc9c:	31 c0                	xor    eax,eax
c001bc9e:	eb af                	jmp    c001bc4f <sysAppSettings(regs*)+0x4e>
c001bca0:	83 ec 08             	sub    esp,0x8
c001bca3:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bca9:	83 e0 0f             	and    eax,0xf
c001bcac:	50                   	push   eax
c001bcad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcb2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bcb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bcbb:	e8 58 47 ff ff       	call   c0010418 <VgaText::setTitleColour(VgaColour)>
c001bcc0:	5f                   	pop    edi
c001bcc1:	58                   	pop    eax
c001bcc2:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bcc8:	c1 e8 04             	shr    eax,0x4
c001bccb:	83 e0 0f             	and    eax,0xf
c001bcce:	50                   	push   eax
c001bccf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcd4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bcd7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bcdd:	e8 26 47 ff ff       	call   c0010408 <VgaText::setTitleTextColour(VgaColour)>
c001bce2:	eb b5                	jmp    c001bc99 <sysAppSettings(regs*)+0x98>
c001bce4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bce9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bcec:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bcf2:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bcf8:	c0 e8 06             	shr    al,0x6
c001bcfb:	83 e0 01             	and    eax,0x1
c001bcfe:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bd04:	31 c0                	xor    eax,eax
c001bd06:	e9 44 ff ff ff       	jmp    c001bc4f <sysAppSettings(regs*)+0x4e>
c001bd0b:	b8 02 00 00 00       	mov    eax,0x2
c001bd10:	e9 3a ff ff ff       	jmp    c001bc4f <sysAppSettings(regs*)+0x4e>

c001bd15 <sysSetFatAttrib(regs*)>:
c001bd15:	57                   	push   edi
c001bd16:	56                   	push   esi
c001bd17:	53                   	push   ebx
c001bd18:	83 ec 1c             	sub    esp,0x1c
c001bd1b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bd1f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bd22:	68 14 01 00 00       	push   0x114
c001bd27:	e8 a3 3a ff ff       	call   c000f7cf <malloc>
c001bd2c:	83 c4 0c             	add    esp,0xc
c001bd2f:	89 c3                	mov    ebx,eax
c001bd31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd36:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd39:	57                   	push   edi
c001bd3a:	53                   	push   ebx
c001bd3b:	e8 46 70 ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c001bd40:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bd43:	83 c4 0c             	add    esp,0xc
c001bd46:	0f b6 d4             	movzx  edx,ah
c001bd49:	0f b6 c0             	movzx  eax,al
c001bd4c:	52                   	push   edx
c001bd4d:	50                   	push   eax
c001bd4e:	53                   	push   ebx
c001bd4f:	e8 a8 72 ff ff       	call   c0012ffc <File::chfatattr(unsigned char, unsigned char)>
c001bd54:	83 c4 10             	add    esp,0x10
c001bd57:	85 db                	test   ebx,ebx
c001bd59:	74 14                	je     c001bd6f <sysSetFatAttrib(regs*)+0x5a>
c001bd5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd5f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd61:	83 ec 0c             	sub    esp,0xc
c001bd64:	53                   	push   ebx
c001bd65:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd68:	83 c4 10             	add    esp,0x10
c001bd6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd6f:	85 c0                	test   eax,eax
c001bd71:	0f 95 c0             	setne  al
c001bd74:	31 d2                	xor    edx,edx
c001bd76:	0f b6 c0             	movzx  eax,al
c001bd79:	f7 d8                	neg    eax
c001bd7b:	83 d2 00             	adc    edx,0x0
c001bd7e:	83 c4 10             	add    esp,0x10
c001bd81:	f7 da                	neg    edx
c001bd83:	5b                   	pop    ebx
c001bd84:	5e                   	pop    esi
c001bd85:	5f                   	pop    edi
c001bd86:	c3                   	ret    

c001bd87 <sysPipe(regs*)>:
c001bd87:	57                   	push   edi
c001bd88:	56                   	push   esi
c001bd89:	53                   	push   ebx
c001bd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd8e:	83 ec 0c             	sub    esp,0xc
c001bd91:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bd94:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bd97:	6a 20                	push   0x20
c001bd99:	e8 31 3a ff ff       	call   c000f7cf <malloc>
c001bd9e:	89 c3                	mov    ebx,eax
c001bda0:	58                   	pop    eax
c001bda1:	5a                   	pop    edx
c001bda2:	68 00 50 00 00       	push   0x5000
c001bda7:	53                   	push   ebx
c001bda8:	e8 f3 43 ff ff       	call   c00101a0 <Pipe::Pipe(int)>
c001bdad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdb0:	e8 55 52 ff ff       	call   c001100a <UnixFile::getFileDescriptor()>
c001bdb5:	89 07                	mov    DWORD PTR [edi],eax
c001bdb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdba:	e8 4b 52 ff ff       	call   c001100a <UnixFile::getFileDescriptor()>
c001bdbf:	83 c4 10             	add    esp,0x10
c001bdc2:	89 06                	mov    DWORD PTR [esi],eax
c001bdc4:	31 d2                	xor    edx,edx
c001bdc6:	5b                   	pop    ebx
c001bdc7:	31 c0                	xor    eax,eax
c001bdc9:	5e                   	pop    esi
c001bdca:	5f                   	pop    edi
c001bdcb:	c3                   	ret    

c001bdcc <sysGetUnixTime(regs*)>:
c001bdcc:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001bdd1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bdd7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bddb:	e9 98 79 ff ff       	jmp    c0013778 <Clock::timeInSecondsLocal()>

c001bde0 <string_ends_with(char const*, char const*)>:
c001bde0:	57                   	push   edi
c001bde1:	56                   	push   esi
c001bde2:	53                   	push   ebx
c001bde3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bde7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bdeb:	83 ec 0c             	sub    esp,0xc
c001bdee:	53                   	push   ebx
c001bdef:	e8 78 49 fe ff       	call   c000076c <strlen>
c001bdf4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bdf7:	89 c6                	mov    esi,eax
c001bdf9:	e8 6e 49 fe ff       	call   c000076c <strlen>
c001bdfe:	83 c4 10             	add    esp,0x10
c001be01:	39 c6                	cmp    esi,eax
c001be03:	7d 06                	jge    c001be0b <string_ends_with(char const*, char const*)+0x2b>
c001be05:	5b                   	pop    ebx
c001be06:	31 c0                	xor    eax,eax
c001be08:	5e                   	pop    esi
c001be09:	5f                   	pop    edi
c001be0a:	c3                   	ret    
c001be0b:	83 ec 08             	sub    esp,0x8
c001be0e:	29 c6                	sub    esi,eax
c001be10:	57                   	push   edi
c001be11:	01 f3                	add    ebx,esi
c001be13:	53                   	push   ebx
c001be14:	e8 7f 4a fe ff       	call   c0000898 <strcmp>
c001be19:	83 c4 10             	add    esp,0x10
c001be1c:	85 c0                	test   eax,eax
c001be1e:	5b                   	pop    ebx
c001be1f:	0f 94 c0             	sete   al
c001be22:	5e                   	pop    esi
c001be23:	0f b6 c0             	movzx  eax,al
c001be26:	5f                   	pop    edi
c001be27:	c3                   	ret    

c001be28 <sysCallOpen(regs*)>:
c001be28:	56                   	push   esi
c001be29:	53                   	push   ebx
c001be2a:	81 ec 04 01 00 00    	sub    esp,0x104
c001be30:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001be37:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001be3a:	85 c9                	test   ecx,ecx
c001be3c:	0f 84 ad 01 00 00    	je     c001bfef <sysCallOpen(regs*)+0x1c7>
c001be42:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001be45:	85 c0                	test   eax,eax
c001be47:	0f 84 a2 01 00 00    	je     c001bfef <sysCallOpen(regs*)+0x1c7>
c001be4d:	52                   	push   edx
c001be4e:	68 61 be 02 c0       	push   0xc002be61
c001be53:	50                   	push   eax
c001be54:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001be58:	56                   	push   esi
c001be59:	e8 7e 6d ff ff       	call   c0012bdc <Fs::standardiseFiles(char*, char const*, char const*)>
c001be5e:	89 34 24             	mov    DWORD PTR [esp],esi
c001be61:	e8 06 49 fe ff       	call   c000076c <strlen>
c001be66:	83 c4 10             	add    esp,0x10
c001be69:	48                   	dec    eax
c001be6a:	74 1d                	je     c001be89 <sysCallOpen(regs*)+0x61>
c001be6c:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001be6f:	eb 0f                	jmp    c001be80 <sysCallOpen(regs*)+0x58>
c001be71:	80 fa 3a             	cmp    dl,0x3a
c001be74:	74 0f                	je     c001be85 <sysCallOpen(regs*)+0x5d>
c001be76:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001be7a:	48                   	dec    eax
c001be7b:	74 0c                	je     c001be89 <sysCallOpen(regs*)+0x61>
c001be7d:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001be80:	80 fa 2e             	cmp    dl,0x2e
c001be83:	75 ec                	jne    c001be71 <sysCallOpen(regs*)+0x49>
c001be85:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001be89:	83 ec 08             	sub    esp,0x8
c001be8c:	68 65 be 02 c0       	push   0xc002be65
c001be91:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be94:	e8 47 ff ff ff       	call   c001bde0 <string_ends_with(char const*, char const*)>
c001be99:	83 c4 10             	add    esp,0x10
c001be9c:	85 c0                	test   eax,eax
c001be9e:	74 1d                	je     c001bebd <sysCallOpen(regs*)+0x95>
c001bea0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bea3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bea9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001beb0:	81 c4 04 01 00 00    	add    esp,0x104
c001beb6:	31 c0                	xor    eax,eax
c001beb8:	31 d2                	xor    edx,edx
c001beba:	5b                   	pop    ebx
c001bebb:	5e                   	pop    esi
c001bebc:	c3                   	ret    
c001bebd:	83 ec 08             	sub    esp,0x8
c001bec0:	68 6a be 02 c0       	push   0xc002be6a
c001bec5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bec8:	e8 13 ff ff ff       	call   c001bde0 <string_ends_with(char const*, char const*)>
c001becd:	83 c4 10             	add    esp,0x10
c001bed0:	85 c0                	test   eax,eax
c001bed2:	75 cc                	jne    c001bea0 <sysCallOpen(regs*)+0x78>
c001bed4:	83 ec 08             	sub    esp,0x8
c001bed7:	68 66 be 02 c0       	push   0xc002be66
c001bedc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bedf:	e8 b4 49 fe ff       	call   c0000898 <strcmp>
c001bee4:	83 c4 10             	add    esp,0x10
c001bee7:	85 c0                	test   eax,eax
c001bee9:	74 b5                	je     c001bea0 <sysCallOpen(regs*)+0x78>
c001beeb:	83 ec 08             	sub    esp,0x8
c001beee:	68 65 be 02 c0       	push   0xc002be65
c001bef3:	56                   	push   esi
c001bef4:	e8 e7 fe ff ff       	call   c001bde0 <string_ends_with(char const*, char const*)>
c001bef9:	83 c4 10             	add    esp,0x10
c001befc:	85 c0                	test   eax,eax
c001befe:	75 a0                	jne    c001bea0 <sysCallOpen(regs*)+0x78>
c001bf00:	83 ec 08             	sub    esp,0x8
c001bf03:	68 6f be 02 c0       	push   0xc002be6f
c001bf08:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf0b:	e8 d0 fe ff ff       	call   c001bde0 <string_ends_with(char const*, char const*)>
c001bf10:	83 c4 10             	add    esp,0x10
c001bf13:	85 c0                	test   eax,eax
c001bf15:	0f 85 e7 00 00 00    	jne    c001c002 <sysCallOpen(regs*)+0x1da>
c001bf1b:	83 ec 08             	sub    esp,0x8
c001bf1e:	68 74 be 02 c0       	push   0xc002be74
c001bf23:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf26:	e8 b5 fe ff ff       	call   c001bde0 <string_ends_with(char const*, char const*)>
c001bf2b:	83 c4 10             	add    esp,0x10
c001bf2e:	85 c0                	test   eax,eax
c001bf30:	0f 85 cc 00 00 00    	jne    c001c002 <sysCallOpen(regs*)+0x1da>
c001bf36:	83 ec 08             	sub    esp,0x8
c001bf39:	68 70 be 02 c0       	push   0xc002be70
c001bf3e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf41:	e8 52 49 fe ff       	call   c0000898 <strcmp>
c001bf46:	83 c4 10             	add    esp,0x10
c001bf49:	85 c0                	test   eax,eax
c001bf4b:	0f 84 b1 00 00 00    	je     c001c002 <sysCallOpen(regs*)+0x1da>
c001bf51:	83 ec 08             	sub    esp,0x8
c001bf54:	68 6f be 02 c0       	push   0xc002be6f
c001bf59:	56                   	push   esi
c001bf5a:	e8 81 fe ff ff       	call   c001bde0 <string_ends_with(char const*, char const*)>
c001bf5f:	83 c4 10             	add    esp,0x10
c001bf62:	85 c0                	test   eax,eax
c001bf64:	0f 85 98 00 00 00    	jne    c001c002 <sysCallOpen(regs*)+0x1da>
c001bf6a:	83 ec 0c             	sub    esp,0xc
c001bf6d:	68 14 01 00 00       	push   0x114
c001bf72:	e8 58 38 ff ff       	call   c000f7cf <malloc>
c001bf77:	83 c4 0c             	add    esp,0xc
c001bf7a:	89 c6                	mov    esi,eax
c001bf7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf81:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf84:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf87:	56                   	push   esi
c001bf88:	e8 f9 6d ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c001bf8d:	83 c4 10             	add    esp,0x10
c001bf90:	85 f6                	test   esi,esi
c001bf92:	74 5b                	je     c001bfef <sysCallOpen(regs*)+0x1c7>
c001bf94:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bf97:	0f b6 c2             	movzx  eax,dl
c001bf9a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bf9d:	89 d0                	mov    eax,edx
c001bf9f:	83 e0 01             	and    eax,0x1
c001bfa2:	f6 c2 02             	test   dl,0x2
c001bfa5:	74 03                	je     c001bfaa <sysCallOpen(regs*)+0x182>
c001bfa7:	83 c8 02             	or     eax,0x2
c001bfaa:	f6 c2 04             	test   dl,0x4
c001bfad:	74 03                	je     c001bfb2 <sysCallOpen(regs*)+0x18a>
c001bfaf:	83 c8 04             	or     eax,0x4
c001bfb2:	f6 c2 08             	test   dl,0x8
c001bfb5:	74 03                	je     c001bfba <sysCallOpen(regs*)+0x192>
c001bfb7:	83 c8 0a             	or     eax,0xa
c001bfba:	83 e2 10             	and    edx,0x10
c001bfbd:	74 03                	je     c001bfc2 <sysCallOpen(regs*)+0x19a>
c001bfbf:	83 c8 12             	or     eax,0x12
c001bfc2:	83 ec 08             	sub    esp,0x8
c001bfc5:	50                   	push   eax
c001bfc6:	56                   	push   esi
c001bfc7:	e8 1e 6e ff ff       	call   c0012dea <File::open(FileOpenMode)>
c001bfcc:	83 c4 10             	add    esp,0x10
c001bfcf:	85 c0                	test   eax,eax
c001bfd1:	75 1c                	jne    c001bfef <sysCallOpen(regs*)+0x1c7>
c001bfd3:	83 ec 0c             	sub    esp,0xc
c001bfd6:	56                   	push   esi
c001bfd7:	e8 2e 50 ff ff       	call   c001100a <UnixFile::getFileDescriptor()>
c001bfdc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bfdf:	83 c4 10             	add    esp,0x10
c001bfe2:	89 02                	mov    DWORD PTR [edx],eax
c001bfe4:	c1 f8 1f             	sar    eax,0x1f
c001bfe7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bfea:	e9 c1 fe ff ff       	jmp    c001beb0 <sysCallOpen(regs*)+0x88>
c001bfef:	81 c4 04 01 00 00    	add    esp,0x104
c001bff5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bffa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bfff:	5b                   	pop    ebx
c001c000:	5e                   	pop    esi
c001c001:	c3                   	ret    
c001c002:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c005:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c00b:	e9 99 fe ff ff       	jmp    c001bea9 <sysCallOpen(regs*)+0x81>

c001c010 <Sys::loadSyscalls()>:
c001c010:	c7 05 60 ea 02 c0 7d b2 01 c0 	mov    DWORD PTR ds:0xc002ea60,0xc001b27d
c001c01a:	c7 05 64 ea 02 c0 72 ae 01 c0 	mov    DWORD PTR ds:0xc002ea64,0xc001ae72
c001c024:	c7 05 68 ea 02 c0 63 b0 01 c0 	mov    DWORD PTR ds:0xc002ea68,0xc001b063
c001c02e:	c7 05 6c ea 02 c0 b3 b1 01 c0 	mov    DWORD PTR ds:0xc002ea6c,0xc001b1b3
c001c038:	c7 05 70 ea 02 c0 fb af 01 c0 	mov    DWORD PTR ds:0xc002ea70,0xc001affb
c001c042:	c7 05 74 ea 02 c0 a9 ae 01 c0 	mov    DWORD PTR ds:0xc002ea74,0xc001aea9
c001c04c:	c7 05 78 ea 02 c0 8a ae 01 c0 	mov    DWORD PTR ds:0xc002ea78,0xc001ae8a
c001c056:	c7 05 7c ea 02 c0 b8 b0 01 c0 	mov    DWORD PTR ds:0xc002ea7c,0xc001b0b8
c001c060:	c7 05 84 ea 02 c0 46 b7 01 c0 	mov    DWORD PTR ds:0xc002ea84,0xc001b746
c001c06a:	c7 05 80 ea 02 c0 28 be 01 c0 	mov    DWORD PTR ds:0xc002ea80,0xc001be28
c001c074:	c7 05 88 ea 02 c0 a6 b7 01 c0 	mov    DWORD PTR ds:0xc002ea88,0xc001b7a6
c001c07e:	c7 05 8c ea 02 c0 89 b4 01 c0 	mov    DWORD PTR ds:0xc002ea8c,0xc001b489
c001c088:	c7 05 90 ea 02 c0 c3 b2 01 c0 	mov    DWORD PTR ds:0xc002ea90,0xc001b2c3
c001c092:	c7 05 94 ea 02 c0 c8 b2 01 c0 	mov    DWORD PTR ds:0xc002ea94,0xc001b2c8
c001c09c:	c7 05 98 ea 02 c0 6f b8 01 c0 	mov    DWORD PTR ds:0xc002ea98,0xc001b86f
c001c0a6:	c7 05 9c ea 02 c0 1b b8 01 c0 	mov    DWORD PTR ds:0xc002ea9c,0xc001b81b
c001c0b0:	c7 05 a0 ea 02 c0 62 b5 01 c0 	mov    DWORD PTR ds:0xc002eaa0,0xc001b562
c001c0ba:	c7 05 a4 ea 02 c0 b9 b5 01 c0 	mov    DWORD PTR ds:0xc002eaa4,0xc001b5b9
c001c0c4:	c7 05 a8 ea 02 c0 25 b6 01 c0 	mov    DWORD PTR ds:0xc002eaa8,0xc001b625
c001c0ce:	c7 05 ac ea 02 c0 cd b2 01 c0 	mov    DWORD PTR ds:0xc002eaac,0xc001b2cd
c001c0d8:	c7 05 b0 ea 02 c0 df b8 01 c0 	mov    DWORD PTR ds:0xc002eab0,0xc001b8df
c001c0e2:	c7 05 b4 ea 02 c0 f9 b8 01 c0 	mov    DWORD PTR ds:0xc002eab4,0xc001b8f9
c001c0ec:	c7 05 b8 ea 02 c0 f9 b8 01 c0 	mov    DWORD PTR ds:0xc002eab8,0xc001b8f9
c001c0f6:	c7 05 bc ea 02 c0 2e b9 01 c0 	mov    DWORD PTR ds:0xc002eabc,0xc001b92e
c001c100:	c7 05 c0 ea 02 c0 92 b9 01 c0 	mov    DWORD PTR ds:0xc002eac0,0xc001b992
c001c10a:	c7 05 c4 ea 02 c0 d7 b2 01 c0 	mov    DWORD PTR ds:0xc002eac4,0xc001b2d7
c001c114:	c7 05 c8 ea 02 c0 f6 b9 01 c0 	mov    DWORD PTR ds:0xc002eac8,0xc001b9f6
c001c11e:	c7 05 cc ea 02 c0 46 b4 01 c0 	mov    DWORD PTR ds:0xc002eacc,0xc001b446
c001c128:	c7 05 d0 ea 02 c0 42 ba 01 c0 	mov    DWORD PTR ds:0xc002ead0,0xc001ba42
c001c132:	c7 05 d4 ea 02 c0 08 b5 01 c0 	mov    DWORD PTR ds:0xc002ead4,0xc001b508
c001c13c:	c7 05 d8 ea 02 c0 c5 ba 01 c0 	mov    DWORD PTR ds:0xc002ead8,0xc001bac5
c001c146:	c7 05 dc ea 02 c0 97 b6 01 c0 	mov    DWORD PTR ds:0xc002eadc,0xc001b697
c001c150:	c7 05 e0 ea 02 c0 ec ba 01 c0 	mov    DWORD PTR ds:0xc002eae0,0xc001baec
c001c15a:	c7 05 e4 ea 02 c0 54 bb 01 c0 	mov    DWORD PTR ds:0xc002eae4,0xc001bb54
c001c164:	c7 05 e8 ea 02 c0 01 bc 01 c0 	mov    DWORD PTR ds:0xc002eae8,0xc001bc01
c001c16e:	c7 05 ec ea 02 c0 e7 b2 01 c0 	mov    DWORD PTR ds:0xc002eaec,0xc001b2e7
c001c178:	c7 05 f0 ea 02 c0 51 b3 01 c0 	mov    DWORD PTR ds:0xc002eaf0,0xc001b351
c001c182:	c7 05 f4 ea 02 c0 97 b3 01 c0 	mov    DWORD PTR ds:0xc002eaf4,0xc001b397
c001c18c:	c7 05 f8 ea 02 c0 15 bd 01 c0 	mov    DWORD PTR ds:0xc002eaf8,0xc001bd15
c001c196:	c7 05 fc ea 02 c0 14 b9 01 c0 	mov    DWORD PTR ds:0xc002eafc,0xc001b914
c001c1a0:	c7 05 00 eb 02 c0 e8 b3 01 c0 	mov    DWORD PTR ds:0xc002eb00,0xc001b3e8
c001c1aa:	c7 05 04 eb 02 c0 87 bd 01 c0 	mov    DWORD PTR ds:0xc002eb04,0xc001bd87
c001c1b4:	c7 05 08 eb 02 c0 cc bd 01 c0 	mov    DWORD PTR ds:0xc002eb08,0xc001bdcc
c001c1be:	c7 05 0c eb 02 c0 53 af 01 c0 	mov    DWORD PTR ds:0xc002eb0c,0xc001af53
c001c1c8:	c7 05 10 eb 02 c0 d4 b0 01 c0 	mov    DWORD PTR ds:0xc002eb10,0xc001b0d4
c001c1d2:	c7 05 14 eb 02 c0 69 b1 01 c0 	mov    DWORD PTR ds:0xc002eb14,0xc001b169
c001c1dc:	c7 05 18 eb 02 c0 3c ae 01 c0 	mov    DWORD PTR ds:0xc002eb18,0xc001ae3c
c001c1e6:	c7 05 1c eb 02 c0 1b b2 01 c0 	mov    DWORD PTR ds:0xc002eb1c,0xc001b21b
c001c1f0:	c7 05 20 eb 02 c0 b5 ae 01 c0 	mov    DWORD PTR ds:0xc002eb20,0xc001aeb5
c001c1fa:	c7 05 24 eb 02 c0 cf ae 01 c0 	mov    DWORD PTR ds:0xc002eb24,0xc001aecf
c001c204:	c3                   	ret    

c001c205 <Sys::systemCall(regs*, void*)>:
c001c205:	53                   	push   ebx
c001c206:	83 ec 08             	sub    esp,0x8
c001c209:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c20d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c210:	83 f8 7f             	cmp    eax,0x7f
c001c213:	77 16                	ja     c001c22b <Sys::systemCall(regs*, void*)+0x26>
c001c215:	8b 14 85 60 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd15a0]
c001c21c:	85 d2                	test   edx,edx
c001c21e:	74 0b                	je     c001c22b <Sys::systemCall(regs*, void*)+0x26>
c001c220:	83 ec 0c             	sub    esp,0xc
c001c223:	53                   	push   ebx
c001c224:	ff d2                	call   edx
c001c226:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c229:	eb 0d                	jmp    c001c238 <Sys::systemCall(regs*, void*)+0x33>
c001c22b:	52                   	push   edx
c001c22c:	52                   	push   edx
c001c22d:	50                   	push   eax
c001c22e:	68 79 be 02 c0       	push   0xc002be79
c001c233:	e8 ef 65 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001c238:	83 c4 10             	add    esp,0x10
c001c23b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c240:	31 d2                	xor    edx,edx
c001c242:	83 c4 08             	add    esp,0x8
c001c245:	5b                   	pop    ebx
c001c246:	c3                   	ret    

c001c247 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c247:	55                   	push   ebp
c001c248:	57                   	push   edi
c001c249:	56                   	push   esi
c001c24a:	53                   	push   ebx
c001c24b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c251:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c258:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c25f:	85 c0                	test   eax,eax
c001c261:	0f 95 c1             	setne  cl
c001c264:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c26c:	0f 94 c2             	sete   dl
c001c26f:	84 d1                	test   cl,dl
c001c271:	74 23                	je     c001c296 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c273:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c279:	74 1b                	je     c001c296 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c27b:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c281:	89 da                	mov    edx,ebx
c001c283:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c289:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c28f:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c296:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c29d:	05 ff 0f 00 00       	add    eax,0xfff
c001c2a2:	83 ec 0c             	sub    esp,0xc
c001c2a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c2a9:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c2af:	c1 e8 0c             	shr    eax,0xc
c001c2b2:	89 fe                	mov    esi,edi
c001c2b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c2b8:	c1 ee 0c             	shr    esi,0xc
c001c2bb:	6a 01                	push   0x1
c001c2bd:	e8 93 51 ff ff       	call   c0011455 <Virt::allocateKernelVirtualPages(int)>
c001c2c2:	89 c5                	mov    ebp,eax
c001c2c4:	58                   	pop    eax
c001c2c5:	5a                   	pop    edx
c001c2c6:	56                   	push   esi
c001c2c7:	68 8d be 02 c0       	push   0xc002be8d
c001c2cc:	e8 56 65 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001c2d1:	59                   	pop    ecx
c001c2d2:	58                   	pop    eax
c001c2d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c2d7:	68 9f be 02 c0       	push   0xc002be9f
c001c2dc:	e8 46 65 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001c2e1:	83 c4 10             	add    esp,0x10
c001c2e4:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c2ea:	0f 86 31 01 00 00    	jbe    c001c421 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c2f0:	c1 e6 0c             	shl    esi,0xc
c001c2f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2f6:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c2f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2fd:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c304:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c307:	01 df                	add    edi,ebx
c001c309:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c30c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c310:	0f 84 08 01 00 00    	je     c001c41e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c316:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c31c:	76 05                	jbe    c001c323 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c31e:	bf 00 10 00 00       	mov    edi,0x1000
c001c323:	83 ec 0c             	sub    esp,0xc
c001c326:	31 d2                	xor    edx,edx
c001c328:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c32f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c331:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c335:	50                   	push   eax
c001c336:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c33a:	56                   	push   esi
c001c33b:	52                   	push   edx
c001c33c:	57                   	push   edi
c001c33d:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c344:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c347:	83 c4 20             	add    esp,0x20
c001c34a:	85 c0                	test   eax,eax
c001c34c:	74 0a                	je     c001c358 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c34e:	53                   	push   ebx
c001c34f:	53                   	push   ebx
c001c350:	50                   	push   eax
c001c351:	68 b1 be 02 c0       	push   0xc002beb1
c001c356:	eb 0f                	jmp    c001c367 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c358:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c35c:	74 20                	je     c001c37e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c35e:	51                   	push   ecx
c001c35f:	51                   	push   ecx
c001c360:	6a 00                	push   0x0
c001c362:	68 dc be 02 c0       	push   0xc002bedc
c001c367:	e8 bb 64 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001c36c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c36f:	e8 11 54 ff ff       	call   c0011785 <Virt::freeKernelVirtualPages(unsigned long)>
c001c374:	83 c4 10             	add    esp,0x10
c001c377:	31 c0                	xor    eax,eax
c001c379:	e9 68 01 00 00       	jmp    c001c4e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c37e:	fa                   	cli    
c001c37f:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001c385:	e8 41 38 ff ff       	call   c000fbcb <Phys::allocatePage()>
c001c38a:	6a 07                	push   0x7
c001c38c:	89 c7                	mov    edi,eax
c001c38e:	55                   	push   ebp
c001c38f:	50                   	push   eax
c001c390:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c395:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c398:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c39e:	e8 59 57 ff ff       	call   c0011afc <VAS::mapPage(unsigned long, unsigned long, int)>
c001c3a3:	83 c4 0c             	add    esp,0xc
c001c3a6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c3ad:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c3b3:	6a 00                	push   0x0
c001c3b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c3bd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c3c3:	e8 8e 55 ff ff       	call   c0011956 <VAS::mapOtherVASIn(bool, VAS*)>
c001c3c8:	58                   	pop    eax
c001c3c9:	5a                   	pop    edx
c001c3ca:	68 07 0c 00 00       	push   0xc07
c001c3cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c3d3:	57                   	push   edi
c001c3d4:	89 ef                	mov    edi,ebp
c001c3d6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c3dd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c3e3:	6a 00                	push   0x0
c001c3e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c3ed:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c3f3:	e8 c0 5a ff ff       	call   c0011eb8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c3f8:	b9 00 10 00 00       	mov    ecx,0x1000
c001c3fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c3ff:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001c404:	83 c4 20             	add    esp,0x20
c001c407:	48                   	dec    eax
c001c408:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001c40d:	85 c0                	test   eax,eax
c001c40f:	75 01                	jne    c001c412 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c411:	fb                   	sti    
c001c412:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c419:	e9 df fe ff ff       	jmp    c001c2fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c41e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c421:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c429:	0f 86 a9 00 00 00    	jbe    c001c4d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c42f:	fa                   	cli    
c001c430:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001c436:	51                   	push   ecx
c001c437:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c43e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c444:	6a 00                	push   0x0
c001c446:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c44b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c44e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c454:	e8 fd 54 ff ff       	call   c0011956 <VAS::mapOtherVASIn(bool, VAS*)>
c001c459:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c45d:	c1 e6 0c             	shl    esi,0xc
c001c460:	01 de                	add    esi,ebx
c001c462:	83 c4 10             	add    esp,0x10
c001c465:	39 de                	cmp    esi,ebx
c001c467:	74 61                	je     c001c4ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c469:	e8 5d 37 ff ff       	call   c000fbcb <Phys::allocatePage()>
c001c46e:	6a 07                	push   0x7
c001c470:	89 c7                	mov    edi,eax
c001c472:	55                   	push   ebp
c001c473:	50                   	push   eax
c001c474:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c479:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c47c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c482:	e8 75 56 ff ff       	call   c0011afc <VAS::mapPage(unsigned long, unsigned long, int)>
c001c487:	58                   	pop    eax
c001c488:	5a                   	pop    edx
c001c489:	68 07 0c 00 00       	push   0xc07
c001c48e:	53                   	push   ebx
c001c48f:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c495:	57                   	push   edi
c001c496:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c49d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c4a3:	6a 00                	push   0x0
c001c4a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4ad:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c4b3:	e8 00 5a ff ff       	call   c0011eb8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c4b8:	83 c4 1c             	add    esp,0x1c
c001c4bb:	68 00 10 00 00       	push   0x1000
c001c4c0:	6a 00                	push   0x0
c001c4c2:	55                   	push   ebp
c001c4c3:	e8 88 42 fe ff       	call   c0000750 <memset>
c001c4c8:	eb 98                	jmp    c001c462 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c4ca:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001c4cf:	48                   	dec    eax
c001c4d0:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001c4d5:	75 01                	jne    c001c4d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c4d7:	fb                   	sti    
c001c4d8:	83 ec 0c             	sub    esp,0xc
c001c4db:	55                   	push   ebp
c001c4dc:	e8 a4 52 ff ff       	call   c0011785 <Virt::freeKernelVirtualPages(unsigned long)>
c001c4e1:	83 c4 10             	add    esp,0x10
c001c4e4:	b0 01                	mov    al,0x1
c001c4e6:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c4ec:	5b                   	pop    ebx
c001c4ed:	5e                   	pop    esi
c001c4ee:	5f                   	pop    edi
c001c4ef:	5d                   	pop    ebp
c001c4f0:	c3                   	ret    

c001c4f1 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c4f1:	55                   	push   ebp
c001c4f2:	57                   	push   edi
c001c4f3:	56                   	push   esi
c001c4f4:	53                   	push   ebx
c001c4f5:	83 ec 48             	sub    esp,0x48
c001c4f8:	68 14 01 00 00       	push   0x114
c001c4fd:	e8 cd 32 ff ff       	call   c000f7cf <malloc>
c001c502:	83 c4 0c             	add    esp,0xc
c001c505:	89 c6                	mov    esi,eax
c001c507:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c50b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c50f:	50                   	push   eax
c001c510:	e8 71 68 ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c001c515:	58                   	pop    eax
c001c516:	5a                   	pop    edx
c001c517:	6a 01                	push   0x1
c001c519:	56                   	push   esi
c001c51a:	e8 cb 68 ff ff       	call   c0012dea <File::open(FileOpenMode)>
c001c51f:	83 c4 10             	add    esp,0x10
c001c522:	85 c0                	test   eax,eax
c001c524:	0f 85 47 01 00 00    	jne    c001c671 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c52a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c532:	83 ec 0c             	sub    esp,0xc
c001c535:	6a 34                	push   0x34
c001c537:	e8 93 32 ff ff       	call   c000f7cf <malloc>
c001c53c:	89 c3                	mov    ebx,eax
c001c53e:	58                   	pop    eax
c001c53f:	8b 06                	mov    eax,DWORD PTR [esi]
c001c541:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c545:	57                   	push   edi
c001c546:	53                   	push   ebx
c001c547:	6a 00                	push   0x0
c001c549:	6a 34                	push   0x34
c001c54b:	56                   	push   esi
c001c54c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c54f:	83 c4 20             	add    esp,0x20
c001c552:	85 c0                	test   eax,eax
c001c554:	0f 85 17 01 00 00    	jne    c001c671 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c55a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c560:	0f 85 0b 01 00 00    	jne    c001c671 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c566:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c569:	85 c0                	test   eax,eax
c001c56b:	0f 84 00 01 00 00    	je     c001c671 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c571:	31 d2                	xor    edx,edx
c001c573:	55                   	push   ebp
c001c574:	52                   	push   edx
c001c575:	50                   	push   eax
c001c576:	56                   	push   esi
c001c577:	e8 2c 69 ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c001c57c:	83 c4 10             	add    esp,0x10
c001c57f:	85 c0                	test   eax,eax
c001c581:	0f 85 ea 00 00 00    	jne    c001c671 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c587:	83 ec 0c             	sub    esp,0xc
c001c58a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c58d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c591:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c595:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c599:	0f af c2             	imul   eax,edx
c001c59c:	50                   	push   eax
c001c59d:	e8 2d 32 ff ff       	call   c000f7cf <malloc>
c001c5a2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c5a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c5a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c5ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5af:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c5b3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c5b7:	0f af c2             	imul   eax,edx
c001c5ba:	99                   	cdq    
c001c5bb:	52                   	push   edx
c001c5bc:	50                   	push   eax
c001c5bd:	56                   	push   esi
c001c5be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c5c1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c5c4:	83 c4 20             	add    esp,0x20
c001c5c7:	85 c0                	test   eax,eax
c001c5c9:	0f 84 a2 00 00 00    	je     c001c671 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c5cf:	31 d2                	xor    edx,edx
c001c5d1:	51                   	push   ecx
c001c5d2:	52                   	push   edx
c001c5d3:	50                   	push   eax
c001c5d4:	56                   	push   esi
c001c5d5:	e8 ce 68 ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c001c5da:	83 c4 10             	add    esp,0x10
c001c5dd:	85 c0                	test   eax,eax
c001c5df:	0f 85 8c 00 00 00    	jne    c001c671 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c5e5:	83 ec 0c             	sub    esp,0xc
c001c5e8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c5ec:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c5f0:	31 ed                	xor    ebp,ebp
c001c5f2:	0f af c2             	imul   eax,edx
c001c5f5:	50                   	push   eax
c001c5f6:	e8 d4 31 ff ff       	call   c000f7cf <malloc>
c001c5fb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c5fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c601:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c608:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c60c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c610:	0f af c2             	imul   eax,edx
c001c613:	99                   	cdq    
c001c614:	52                   	push   edx
c001c615:	50                   	push   eax
c001c616:	56                   	push   esi
c001c617:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c61a:	83 c4 20             	add    esp,0x20
c001c61d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c625:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c629:	0f 86 80 00 00 00    	jbe    c001c6af <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c62f:	0f b7 fd             	movzx  edi,bp
c001c632:	c1 e7 05             	shl    edi,0x5
c001c635:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c639:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c63c:	75 6b                	jne    c001c6a9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c63e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c641:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c645:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c648:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c64c:	52                   	push   edx
c001c64d:	31 d2                	xor    edx,edx
c001c64f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c652:	52                   	push   edx
c001c653:	50                   	push   eax
c001c654:	56                   	push   esi
c001c655:	e8 4e 68 ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c001c65a:	83 c4 10             	add    esp,0x10
c001c65d:	85 c0                	test   eax,eax
c001c65f:	74 17                	je     c001c678 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c661:	83 ec 0c             	sub    esp,0xc
c001c664:	68 08 bf 02 c0       	push   0xc002bf08
c001c669:	e8 b9 61 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001c66e:	83 c4 10             	add    esp,0x10
c001c671:	31 c0                	xor    eax,eax
c001c673:	e9 87 00 00 00       	jmp    c001c6ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c678:	83 ec 0c             	sub    esp,0xc
c001c67b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c67e:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c681:	50                   	push   eax
c001c682:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c686:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c68a:	56                   	push   esi
c001c68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c68f:	e8 b3 fb ff ff       	call   c001c247 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c694:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c698:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c69c:	83 c4 20             	add    esp,0x20
c001c69f:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c6a3:	73 04                	jae    c001c6a9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c6a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c6a9:	45                   	inc    ebp
c001c6aa:	e9 76 ff ff ff       	jmp    c001c625 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c6af:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c6b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c6b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6bb:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c6c1:	83 ec 0c             	sub    esp,0xc
c001c6c4:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c6ca:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c6cf:	05 00 10 00 00       	add    eax,0x1000
c001c6d4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c6d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6db:	e8 ff 30 ff ff       	call   c000f7df <free>
c001c6e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c6e3:	e8 f7 30 ff ff       	call   c000f7df <free>
c001c6e8:	58                   	pop    eax
c001c6e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c6ed:	e8 ed 30 ff ff       	call   c000f7df <free>
c001c6f2:	89 34 24             	mov    DWORD PTR [esp],esi
c001c6f5:	e8 4e 67 ff ff       	call   c0012e48 <File::close()>
c001c6fa:	83 c4 10             	add    esp,0x10
c001c6fd:	b0 01                	mov    al,0x1
c001c6ff:	83 c4 3c             	add    esp,0x3c
c001c702:	5b                   	pop    ebx
c001c703:	5e                   	pop    esi
c001c704:	5f                   	pop    edi
c001c705:	5d                   	pop    ebp
c001c706:	c3                   	ret    

c001c707 <Thr::runtimeReferenceHelper()>:
c001c707:	83 ec 18             	sub    esp,0x18
c001c70a:	68 10 bf 02 c0       	push   0xc002bf10
c001c70f:	e8 13 61 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001c714:	fa                   	cli    
c001c715:	83 c4 10             	add    esp,0x10
c001c718:	eb fe                	jmp    c001c718 <Thr::runtimeReferenceHelper()+0x11>

c001c71a <Thr::getAddressOfKernelSymbol(char const*)>:
c001c71a:	57                   	push   edi
c001c71b:	56                   	push   esi
c001c71c:	53                   	push   ebx
c001c71d:	31 db                	xor    ebx,ebx
c001c71f:	39 1d 00 f4 02 c0    	cmp    DWORD PTR ds:0xc002f400,ebx
c001c725:	7e 3c                	jle    c001c763 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c727:	8b 34 9d 80 f3 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd0c80]
c001c72e:	31 ff                	xor    edi,edi
c001c730:	39 3c 9d 80 f2 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd0d80],edi
c001c737:	7e 27                	jle    c001c760 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c739:	50                   	push   eax
c001c73a:	50                   	push   eax
c001c73b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c73f:	8b 06                	mov    eax,DWORD PTR [esi]
c001c741:	03 04 9d 00 f3 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd0d00]
c001c748:	50                   	push   eax
c001c749:	e8 4a 41 fe ff       	call   c0000898 <strcmp>
c001c74e:	83 c4 10             	add    esp,0x10
c001c751:	85 c0                	test   eax,eax
c001c753:	75 05                	jne    c001c75a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c755:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c758:	eb 0b                	jmp    c001c765 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c75a:	83 c6 10             	add    esi,0x10
c001c75d:	47                   	inc    edi
c001c75e:	eb d0                	jmp    c001c730 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c760:	43                   	inc    ebx
c001c761:	eb bc                	jmp    c001c71f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c763:	31 c0                	xor    eax,eax
c001c765:	5b                   	pop    ebx
c001c766:	5e                   	pop    esi
c001c767:	5f                   	pop    edi
c001c768:	c3                   	ret    

c001c769 <Thr::loadKernelSymbolTable(char const*)>:
c001c769:	55                   	push   ebp
c001c76a:	57                   	push   edi
c001c76b:	56                   	push   esi
c001c76c:	53                   	push   ebx
c001c76d:	83 ec 68             	sub    esp,0x68
c001c770:	8b 35 50 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f450
c001c776:	68 14 01 00 00       	push   0x114
c001c77b:	e8 4f 30 ff ff       	call   c000f7cf <malloc>
c001c780:	83 c4 0c             	add    esp,0xc
c001c783:	89 c3                	mov    ebx,eax
c001c785:	56                   	push   esi
c001c786:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c78a:	50                   	push   eax
c001c78b:	e8 f6 65 ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c001c790:	5e                   	pop    esi
c001c791:	5f                   	pop    edi
c001c792:	6a 01                	push   0x1
c001c794:	53                   	push   ebx
c001c795:	e8 50 66 ff ff       	call   c0012dea <File::open(FileOpenMode)>
c001c79a:	83 c4 10             	add    esp,0x10
c001c79d:	85 c0                	test   eax,eax
c001c79f:	74 0a                	je     c001c7ab <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c7a1:	83 ec 0c             	sub    esp,0xc
c001c7a4:	68 32 bf 02 c0       	push   0xc002bf32
c001c7a9:	eb 34                	jmp    c001c7df <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c7ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c7b3:	83 ec 0c             	sub    esp,0xc
c001c7b6:	6a 34                	push   0x34
c001c7b8:	e8 12 30 ff ff       	call   c000f7cf <malloc>
c001c7bd:	59                   	pop    ecx
c001c7be:	89 c7                	mov    edi,eax
c001c7c0:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c7c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7c6:	56                   	push   esi
c001c7c7:	57                   	push   edi
c001c7c8:	6a 00                	push   0x0
c001c7ca:	6a 34                	push   0x34
c001c7cc:	53                   	push   ebx
c001c7cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7d0:	83 c4 20             	add    esp,0x20
c001c7d3:	85 c0                	test   eax,eax
c001c7d5:	74 17                	je     c001c7ee <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c7d7:	83 ec 0c             	sub    esp,0xc
c001c7da:	68 49 bf 02 c0       	push   0xc002bf49
c001c7df:	e8 2f d8 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001c7e4:	83 c4 10             	add    esp,0x10
c001c7e7:	31 c0                	xor    eax,eax
c001c7e9:	e9 31 02 00 00       	jmp    c001ca1f <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c7ee:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c7f4:	75 e1                	jne    c001c7d7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c7f6:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c7f9:	85 c0                	test   eax,eax
c001c7fb:	74 da                	je     c001c7d7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c7fd:	52                   	push   edx
c001c7fe:	31 d2                	xor    edx,edx
c001c800:	52                   	push   edx
c001c801:	50                   	push   eax
c001c802:	53                   	push   ebx
c001c803:	e8 a0 66 ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c001c808:	83 c4 10             	add    esp,0x10
c001c80b:	85 c0                	test   eax,eax
c001c80d:	75 c8                	jne    c001c7d7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c80f:	83 ec 0c             	sub    esp,0xc
c001c812:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c816:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c81a:	31 ed                	xor    ebp,ebp
c001c81c:	0f af c2             	imul   eax,edx
c001c81f:	50                   	push   eax
c001c820:	e8 aa 2f ff ff       	call   c000f7cf <malloc>
c001c825:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c827:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c82b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c82e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c832:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c836:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c83a:	0f af c2             	imul   eax,edx
c001c83d:	99                   	cdq    
c001c83e:	52                   	push   edx
c001c83f:	50                   	push   eax
c001c840:	53                   	push   ebx
c001c841:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c844:	83 c4 20             	add    esp,0x20
c001c847:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c84f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c85f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c867:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c86b:	0f 86 aa 00 00 00    	jbe    c001c91b <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c871:	0f b7 f5             	movzx  esi,bp
c001c874:	6b f6 28             	imul   esi,esi,0x28
c001c877:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c87b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c87e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c882:	50                   	push   eax
c001c883:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c887:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c88b:	8b 16                	mov    edx,DWORD PTR [esi]
c001c88d:	6b c0 28             	imul   eax,eax,0x28
c001c890:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c894:	89 d0                	mov    eax,edx
c001c896:	31 d2                	xor    edx,edx
c001c898:	52                   	push   edx
c001c899:	50                   	push   eax
c001c89a:	53                   	push   ebx
c001c89b:	e8 08 66 ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c001c8a0:	83 c4 0c             	add    esp,0xc
c001c8a3:	6a 20                	push   0x20
c001c8a5:	6a 00                	push   0x0
c001c8a7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c8ab:	52                   	push   edx
c001c8ac:	e8 9f 3e fe ff       	call   c0000750 <memset>
c001c8b1:	58                   	pop    eax
c001c8b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c8b4:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c8b8:	51                   	push   ecx
c001c8b9:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c8bd:	52                   	push   edx
c001c8be:	6a 00                	push   0x0
c001c8c0:	6a 1f                	push   0x1f
c001c8c2:	53                   	push   ebx
c001c8c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8c6:	83 c4 18             	add    esp,0x18
c001c8c9:	68 60 bf 02 c0       	push   0xc002bf60
c001c8ce:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c8d2:	52                   	push   edx
c001c8d3:	e8 c0 3f fe ff       	call   c0000898 <strcmp>
c001c8d8:	83 c4 10             	add    esp,0x10
c001c8db:	85 c0                	test   eax,eax
c001c8dd:	75 0f                	jne    c001c8ee <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c8df:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c8e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8ee:	50                   	push   eax
c001c8ef:	50                   	push   eax
c001c8f0:	68 68 bf 02 c0       	push   0xc002bf68
c001c8f5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c8f9:	50                   	push   eax
c001c8fa:	e8 99 3f fe ff       	call   c0000898 <strcmp>
c001c8ff:	83 c4 10             	add    esp,0x10
c001c902:	85 c0                	test   eax,eax
c001c904:	75 0f                	jne    c001c915 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c906:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c909:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c90d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c911:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c915:	45                   	inc    ebp
c001c916:	e9 4c ff ff ff       	jmp    c001c867 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c91b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c920:	75 10                	jne    c001c932 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c922:	83 ec 0c             	sub    esp,0xc
c001c925:	68 70 bf 02 c0       	push   0xc002bf70
c001c92a:	e8 e4 d6 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001c92f:	83 c4 10             	add    esp,0x10
c001c932:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c937:	75 10                	jne    c001c949 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c939:	83 ec 0c             	sub    esp,0xc
c001c93c:	68 70 bf 02 c0       	push   0xc002bf70
c001c941:	e8 cd d6 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001c946:	83 c4 10             	add    esp,0x10
c001c949:	31 d2                	xor    edx,edx
c001c94b:	50                   	push   eax
c001c94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c950:	52                   	push   edx
c001c951:	50                   	push   eax
c001c952:	53                   	push   ebx
c001c953:	e8 50 65 ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c001c958:	5a                   	pop    edx
c001c959:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c95d:	e8 6d 2e ff ff       	call   c000f7cf <malloc>
c001c962:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c966:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c96a:	31 c9                	xor    ecx,ecx
c001c96c:	5e                   	pop    esi
c001c96d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c96f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c973:	55                   	push   ebp
c001c974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c978:	51                   	push   ecx
c001c979:	52                   	push   edx
c001c97a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c97e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c982:	53                   	push   ebx
c001c983:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c986:	83 c4 14             	add    esp,0x14
c001c989:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c98d:	e8 3d 2e ff ff       	call   c000f7cf <malloc>
c001c992:	89 c6                	mov    esi,eax
c001c994:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c996:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c999:	56                   	push   esi
c001c99a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c99e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c9a2:	51                   	push   ecx
c001c9a3:	52                   	push   edx
c001c9a4:	53                   	push   ebx
c001c9a5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c9a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c9ac:	8b 15 00 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f400
c001c9b2:	83 c4 1c             	add    esp,0x1c
c001c9b5:	c1 e8 04             	shr    eax,0x4
c001c9b8:	89 04 95 80 f2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0d80],eax
c001c9bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c9c3:	31 d2                	xor    edx,edx
c001c9c5:	52                   	push   edx
c001c9c6:	50                   	push   eax
c001c9c7:	53                   	push   ebx
c001c9c8:	e8 db 64 ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c001c9cd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c9cf:	31 d2                	xor    edx,edx
c001c9d1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c9d4:	56                   	push   esi
c001c9d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c9d9:	52                   	push   edx
c001c9da:	50                   	push   eax
c001c9db:	53                   	push   ebx
c001c9dc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9df:	83 c4 14             	add    esp,0x14
c001c9e2:	53                   	push   ebx
c001c9e3:	e8 60 64 ff ff       	call   c0012e48 <File::close()>
c001c9e8:	5d                   	pop    ebp
c001c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9ed:	e8 ed 2d ff ff       	call   c000f7df <free>
c001c9f2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c9f5:	e8 e5 2d ff ff       	call   c000f7df <free>
c001c9fa:	a1 00 f4 02 c0       	mov    eax,ds:0xc002f400
c001c9ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ca03:	8d 50 01             	lea    edx,[eax+0x1]
c001ca06:	89 0c 85 80 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c80],ecx
c001ca0d:	89 34 85 00 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0d00],esi
c001ca14:	89 15 00 f4 02 c0    	mov    DWORD PTR ds:0xc002f400,edx
c001ca1a:	83 c4 10             	add    esp,0x10
c001ca1d:	b0 01                	mov    al,0x1
c001ca1f:	83 c4 5c             	add    esp,0x5c
c001ca22:	5b                   	pop    ebx
c001ca23:	5e                   	pop    esi
c001ca24:	5f                   	pop    edi
c001ca25:	5d                   	pop    ebp
c001ca26:	c3                   	ret    

c001ca27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ca27:	55                   	push   ebp
c001ca28:	57                   	push   edi
c001ca29:	56                   	push   esi
c001ca2a:	53                   	push   ebx
c001ca2b:	81 ec 68 03 00 00    	sub    esp,0x368
c001ca31:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ca38:	8b 1d 50 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f450
c001ca3e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ca42:	68 14 01 00 00       	push   0x114
c001ca47:	e8 83 2d ff ff       	call   c000f7cf <malloc>
c001ca4c:	83 c4 0c             	add    esp,0xc
c001ca4f:	89 c5                	mov    ebp,eax
c001ca51:	53                   	push   ebx
c001ca52:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ca59:	50                   	push   eax
c001ca5a:	e8 27 63 ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c001ca5f:	5e                   	pop    esi
c001ca60:	5f                   	pop    edi
c001ca61:	6a 01                	push   0x1
c001ca63:	55                   	push   ebp
c001ca64:	e8 81 63 ff ff       	call   c0012dea <File::open(FileOpenMode)>
c001ca69:	83 c4 10             	add    esp,0x10
c001ca6c:	85 c0                	test   eax,eax
c001ca6e:	0f 85 a7 06 00 00    	jne    c001d11b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca74:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ca7c:	83 ec 0c             	sub    esp,0xc
c001ca7f:	6a 34                	push   0x34
c001ca81:	e8 49 2d ff ff       	call   c000f7cf <malloc>
c001ca86:	5b                   	pop    ebx
c001ca87:	89 c7                	mov    edi,eax
c001ca89:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ca8d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ca90:	53                   	push   ebx
c001ca91:	57                   	push   edi
c001ca92:	6a 00                	push   0x0
c001ca94:	6a 34                	push   0x34
c001ca96:	55                   	push   ebp
c001ca97:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca9a:	83 c4 20             	add    esp,0x20
c001ca9d:	85 c0                	test   eax,eax
c001ca9f:	0f 85 76 06 00 00    	jne    c001d11b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001caa5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001caab:	0f 85 6a 06 00 00    	jne    c001d11b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cab1:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cab4:	85 c0                	test   eax,eax
c001cab6:	0f 84 5f 06 00 00    	je     c001d11b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cabc:	31 d2                	xor    edx,edx
c001cabe:	51                   	push   ecx
c001cabf:	52                   	push   edx
c001cac0:	50                   	push   eax
c001cac1:	55                   	push   ebp
c001cac2:	e8 e1 63 ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c001cac7:	83 c4 10             	add    esp,0x10
c001caca:	85 c0                	test   eax,eax
c001cacc:	0f 85 49 06 00 00    	jne    c001d11b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cad2:	83 ec 0c             	sub    esp,0xc
c001cad5:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cad8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cadc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cae0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cae4:	0f af c2             	imul   eax,edx
c001cae7:	50                   	push   eax
c001cae8:	e8 e2 2c ff ff       	call   c000f7cf <malloc>
c001caed:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001caf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001caf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001caf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cafb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001caff:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cb03:	0f af c2             	imul   eax,edx
c001cb06:	99                   	cdq    
c001cb07:	52                   	push   edx
c001cb08:	50                   	push   eax
c001cb09:	55                   	push   ebp
c001cb0a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb0d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cb10:	83 c4 20             	add    esp,0x20
c001cb13:	85 c0                	test   eax,eax
c001cb15:	0f 84 00 06 00 00    	je     c001d11b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cb1b:	52                   	push   edx
c001cb1c:	31 d2                	xor    edx,edx
c001cb1e:	52                   	push   edx
c001cb1f:	50                   	push   eax
c001cb20:	55                   	push   ebp
c001cb21:	e8 82 63 ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c001cb26:	83 c4 10             	add    esp,0x10
c001cb29:	85 c0                	test   eax,eax
c001cb2b:	0f 85 ea 05 00 00    	jne    c001d11b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cb31:	83 ec 0c             	sub    esp,0xc
c001cb34:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cb38:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cb3c:	31 f6                	xor    esi,esi
c001cb3e:	0f af c2             	imul   eax,edx
c001cb41:	50                   	push   eax
c001cb42:	e8 88 2c ff ff       	call   c000f7cf <malloc>
c001cb47:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb51:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb55:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cb59:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cb5d:	0f af c2             	imul   eax,edx
c001cb60:	99                   	cdq    
c001cb61:	52                   	push   edx
c001cb62:	50                   	push   eax
c001cb63:	55                   	push   ebp
c001cb64:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb67:	83 c4 20             	add    esp,0x20
c001cb6a:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cb6e:	0f 86 8a 00 00 00    	jbe    c001cbfe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cb74:	0f b7 de             	movzx  ebx,si
c001cb77:	c1 e3 05             	shl    ebx,0x5
c001cb7a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cb7e:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cb81:	75 75                	jne    c001cbf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cb83:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cb86:	31 d2                	xor    edx,edx
c001cb88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb8c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb93:	50                   	push   eax
c001cb94:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cb97:	52                   	push   edx
c001cb98:	50                   	push   eax
c001cb99:	55                   	push   ebp
c001cb9a:	e8 09 63 ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c001cb9f:	83 c4 10             	add    esp,0x10
c001cba2:	85 c0                	test   eax,eax
c001cba4:	0f 85 71 05 00 00    	jne    c001d11b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cbaa:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cbb1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbb4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cbb8:	31 d2                	xor    edx,edx
c001cbba:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cbbe:	83 ec 0c             	sub    esp,0xc
c001cbc1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cbc5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbcc:	50                   	push   eax
c001cbcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cbd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbd5:	52                   	push   edx
c001cbd6:	50                   	push   eax
c001cbd7:	55                   	push   ebp
c001cbd8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbdb:	83 c4 1c             	add    esp,0x1c
c001cbde:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cbe1:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cbe4:	50                   	push   eax
c001cbe5:	6a 00                	push   0x0
c001cbe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbeb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cbef:	50                   	push   eax
c001cbf0:	e8 5b 3b fe ff       	call   c0000750 <memset>
c001cbf5:	83 c4 10             	add    esp,0x10
c001cbf8:	46                   	inc    esi
c001cbf9:	e9 6c ff ff ff       	jmp    c001cb6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cbfe:	53                   	push   ebx
c001cbff:	31 db                	xor    ebx,ebx
c001cc01:	68 00 01 00 00       	push   0x100
c001cc06:	6a 00                	push   0x0
c001cc08:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cc0c:	50                   	push   eax
c001cc0d:	e8 3e 3b fe ff       	call   c0000750 <memset>
c001cc12:	83 c4 0c             	add    esp,0xc
c001cc15:	68 00 01 00 00       	push   0x100
c001cc1a:	6a 00                	push   0x0
c001cc1c:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cc23:	50                   	push   eax
c001cc24:	e8 27 3b fe ff       	call   c0000750 <memset>
c001cc29:	83 c4 10             	add    esp,0x10
c001cc2c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cc34:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cc3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cc44:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc4c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cc54:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cc58:	0f 86 30 01 00 00    	jbe    c001cd8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cc5e:	0f b7 f3             	movzx  esi,bx
c001cc61:	6b f6 28             	imul   esi,esi,0x28
c001cc64:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc68:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cc6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc6f:	52                   	push   edx
c001cc70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc74:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cc78:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc7a:	6b d2 28             	imul   edx,edx,0x28
c001cc7d:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cc81:	31 d2                	xor    edx,edx
c001cc83:	52                   	push   edx
c001cc84:	50                   	push   eax
c001cc85:	55                   	push   ebp
c001cc86:	e8 1d 62 ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c001cc8b:	83 c4 0c             	add    esp,0xc
c001cc8e:	6a 20                	push   0x20
c001cc90:	6a 00                	push   0x0
c001cc92:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cc99:	51                   	push   ecx
c001cc9a:	e8 b1 3a fe ff       	call   c0000750 <memset>
c001cc9f:	59                   	pop    ecx
c001cca0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cca3:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cca7:	52                   	push   edx
c001cca8:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001ccaf:	51                   	push   ecx
c001ccb0:	6a 00                	push   0x0
c001ccb2:	6a 1f                	push   0x1f
c001ccb4:	55                   	push   ebp
c001ccb5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ccb8:	83 c4 1c             	add    esp,0x1c
c001ccbb:	6a 09                	push   0x9
c001ccbd:	68 8a bf 02 c0       	push   0xc002bf8a
c001ccc2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ccc9:	51                   	push   ecx
c001ccca:	e8 7d 39 fe ff       	call   c000064c <memcmp>
c001cccf:	83 c4 10             	add    esp,0x10
c001ccd2:	85 c0                	test   eax,eax
c001ccd4:	75 21                	jne    c001ccf7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001ccd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ccde:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cce2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cce6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cce9:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ccf0:	89 d0                	mov    eax,edx
c001ccf2:	40                   	inc    eax
c001ccf3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccf7:	50                   	push   eax
c001ccf8:	6a 09                	push   0x9
c001ccfa:	68 94 bf 02 c0       	push   0xc002bf94
c001ccff:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd06:	50                   	push   eax
c001cd07:	e8 40 39 fe ff       	call   c000064c <memcmp>
c001cd0c:	83 c4 10             	add    esp,0x10
c001cd0f:	85 c0                	test   eax,eax
c001cd11:	75 21                	jne    c001cd34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cd13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cd1b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cd1f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd23:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd26:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cd2d:	89 d0                	mov    eax,edx
c001cd2f:	40                   	inc    eax
c001cd30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd34:	50                   	push   eax
c001cd35:	50                   	push   eax
c001cd36:	68 60 bf 02 c0       	push   0xc002bf60
c001cd3b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd42:	50                   	push   eax
c001cd43:	e8 50 3b fe ff       	call   c0000898 <strcmp>
c001cd48:	83 c4 10             	add    esp,0x10
c001cd4b:	85 c0                	test   eax,eax
c001cd4d:	75 0f                	jne    c001cd5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cd4f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd5e:	50                   	push   eax
c001cd5f:	50                   	push   eax
c001cd60:	68 68 bf 02 c0       	push   0xc002bf68
c001cd65:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd6c:	50                   	push   eax
c001cd6d:	e8 26 3b fe ff       	call   c0000898 <strcmp>
c001cd72:	83 c4 10             	add    esp,0x10
c001cd75:	85 c0                	test   eax,eax
c001cd77:	75 0f                	jne    c001cd88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cd79:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cd80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd84:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cd88:	43                   	inc    ebx
c001cd89:	e9 c6 fe ff ff       	jmp    c001cc54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cd8e:	31 d2                	xor    edx,edx
c001cd90:	50                   	push   eax
c001cd91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd95:	52                   	push   edx
c001cd96:	50                   	push   eax
c001cd97:	55                   	push   ebp
c001cd98:	e8 0b 61 ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c001cd9d:	58                   	pop    eax
c001cd9e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cda2:	e8 28 2a ff ff       	call   c000f7cf <malloc>
c001cda7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cdaa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cdae:	31 d2                	xor    edx,edx
c001cdb0:	58                   	pop    eax
c001cdb1:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cdb5:	53                   	push   ebx
c001cdb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cdba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cdbe:	52                   	push   edx
c001cdbf:	50                   	push   eax
c001cdc0:	55                   	push   ebp
c001cdc1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdc4:	83 c4 14             	add    esp,0x14
c001cdc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdcb:	e8 ff 29 ff ff       	call   c000f7cf <malloc>
c001cdd0:	31 d2                	xor    edx,edx
c001cdd2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cdd6:	83 c4 0c             	add    esp,0xc
c001cdd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cddd:	52                   	push   edx
c001cdde:	50                   	push   eax
c001cddf:	55                   	push   ebp
c001cde0:	e8 c3 60 ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c001cde5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cde8:	31 d2                	xor    edx,edx
c001cdea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cdf1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cdf5:	52                   	push   edx
c001cdf6:	50                   	push   eax
c001cdf7:	55                   	push   ebp
c001cdf8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdfb:	83 c4 20             	add    esp,0x20
c001cdfe:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ce0a:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001ce0e:	0f 84 0b 03 00 00    	je     c001d11f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001ce14:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001ce1b:	31 d2                	xor    edx,edx
c001ce1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce21:	c1 e8 03             	shr    eax,0x3
c001ce24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ce28:	51                   	push   ecx
c001ce29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce2d:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001ce31:	52                   	push   edx
c001ce32:	50                   	push   eax
c001ce33:	55                   	push   ebp
c001ce34:	e8 6f 60 ff ff       	call   c0012ea8 <File::seek(unsigned long long)>
c001ce39:	5b                   	pop    ebx
c001ce3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce3e:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001ce45:	e8 85 29 ff ff       	call   c000f7cf <malloc>
c001ce4a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ce4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce51:	31 d2                	xor    edx,edx
c001ce53:	5e                   	pop    esi
c001ce54:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ce58:	50                   	push   eax
c001ce59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ce61:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001ce68:	52                   	push   edx
c001ce69:	50                   	push   eax
c001ce6a:	55                   	push   ebp
c001ce6b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce6e:	83 c4 20             	add    esp,0x20
c001ce71:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ce79:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ce7d:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001ce81:	0f 8d 7c 02 00 00    	jge    c001d103 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001ce87:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ce8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce8f:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001ce94:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001ce97:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ce9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce9f:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cea3:	89 d8                	mov    eax,ebx
c001cea5:	c1 e8 08             	shr    eax,0x8
c001cea8:	89 c6                	mov    esi,eax
c001ceaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ceae:	c1 e6 04             	shl    esi,0x4
c001ceb1:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001ceb5:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001ceb8:	85 d2                	test   edx,edx
c001ceba:	0f 85 bf 00 00 00    	jne    c001cf7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cec0:	83 ec 0c             	sub    esp,0xc
c001cec3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cec7:	03 06                	add    eax,DWORD PTR [esi]
c001cec9:	50                   	push   eax
c001ceca:	e8 4b f8 ff ff       	call   c001c71a <Thr::getAddressOfKernelSymbol(char const*)>
c001cecf:	83 c4 10             	add    esp,0x10
c001ced2:	89 c2                	mov    edx,eax
c001ced4:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001ced9:	85 c0                	test   eax,eax
c001cedb:	0f 85 9e 00 00 00    	jne    c001cf7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cee1:	83 ec 0c             	sub    esp,0xc
c001cee4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cee8:	03 06                	add    eax,DWORD PTR [esi]
c001ceea:	50                   	push   eax
c001ceeb:	e8 85 18 ff ff       	call   c000e775 <Krnl::resolveCompatibilitySymbol(char*)>
c001cef0:	83 c4 10             	add    esp,0x10
c001cef3:	89 c2                	mov    edx,eax
c001cef5:	85 c0                	test   eax,eax
c001cef7:	0f 85 82 00 00 00    	jne    c001cf7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cefd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cf01:	50                   	push   eax
c001cf02:	50                   	push   eax
c001cf03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf07:	03 06                	add    eax,DWORD PTR [esi]
c001cf09:	50                   	push   eax
c001cf0a:	68 9e bf 02 c0       	push   0xc002bf9e
c001cf0f:	e8 13 59 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001cf14:	58                   	pop    eax
c001cf15:	5a                   	pop    edx
c001cf16:	68 b8 bf 02 c0       	push   0xc002bfb8
c001cf1b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf22:	50                   	push   eax
c001cf23:	e8 e4 38 fe ff       	call   c000080c <strcpy>
c001cf28:	59                   	pop    ecx
c001cf29:	58                   	pop    eax
c001cf2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf2e:	03 06                	add    eax,DWORD PTR [esi]
c001cf30:	50                   	push   eax
c001cf31:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf38:	50                   	push   eax
c001cf39:	e8 0e 3a fe ff       	call   c000094c <strcat>
c001cf3e:	58                   	pop    eax
c001cf3f:	5a                   	pop    edx
c001cf40:	68 4e c0 02 c0       	push   0xc002c04e
c001cf45:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf4c:	50                   	push   eax
c001cf4d:	e8 fa 39 fe ff       	call   c000094c <strcat>
c001cf52:	83 c4 10             	add    esp,0x10
c001cf55:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cf5a:	0f 84 5d 01 00 00    	je     c001d0bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cf60:	83 ec 0c             	sub    esp,0xc
c001cf63:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf6a:	50                   	push   eax
c001cf6b:	e8 a3 d0 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001cf70:	83 c4 10             	add    esp,0x10
c001cf73:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cf77:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cf7b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cf7f:	80 fb 01             	cmp    bl,0x1
c001cf82:	0f 85 88 00 00 00    	jne    c001d010 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cf88:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cf8f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cf93:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cf97:	01 ce                	add    esi,ecx
c001cf99:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cf9f:	0f 94 c0             	sete   al
c001cfa2:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cfa8:	0f 94 c3             	sete   bl
c001cfab:	09 c3                	or     ebx,eax
c001cfad:	8b 06                	mov    eax,DWORD PTR [esi]
c001cfaf:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cfb4:	74 41                	je     c001cff7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cfb6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cfb9:	84 db                	test   bl,bl
c001cfbb:	75 15                	jne    c001cfd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cfbd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfc1:	66 83 f8 0c          	cmp    ax,0xc
c001cfc5:	76 05                	jbe    c001cfcc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cfc7:	b8 0c 00 00 00       	mov    eax,0xc
c001cfcc:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cfd0:	76 37                	jbe    c001d009 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cfd2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cfd6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cfdb:	0f 84 dc 00 00 00    	je     c001d0bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cfe1:	83 ec 0c             	sub    esp,0xc
c001cfe4:	68 cf bf 02 c0       	push   0xc002bfcf
c001cfe9:	e8 25 d0 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001cfee:	83 c4 10             	add    esp,0x10
c001cff1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cff5:	eb 12                	jmp    c001d009 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cff7:	01 c1                	add    ecx,eax
c001cff9:	84 db                	test   bl,bl
c001cffb:	75 0c                	jne    c001d009 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cffd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d001:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d005:	77 02                	ja     c001d009 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d007:	01 d1                	add    ecx,edx
c001d009:	89 0e                	mov    DWORD PTR [esi],ecx
c001d00b:	e9 ea 00 00 00       	jmp    c001d0fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d010:	80 fb 02             	cmp    bl,0x2
c001d013:	75 7c                	jne    c001d091 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d015:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d01c:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d020:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d024:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d02a:	74 20                	je     c001d04c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d02c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d032:	74 18                	je     c001d04c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d034:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d038:	b9 0a 00 00 00       	mov    ecx,0xa
c001d03d:	66 83 f8 0e          	cmp    ax,0xe
c001d041:	77 03                	ja     c001d046 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d043:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d046:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d04a:	76 1f                	jbe    c001d06b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d04c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d050:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d055:	74 66                	je     c001d0bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d057:	83 ec 0c             	sub    esp,0xc
c001d05a:	68 eb bf 02 c0       	push   0xc002bfeb
c001d05f:	e8 af cf ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001d064:	83 c4 10             	add    esp,0x10
c001d067:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d06b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d06d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d072:	74 13                	je     c001d087 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d074:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d078:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d07f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d083:	01 c8                	add    eax,ecx
c001d085:	eb 04                	jmp    c001d08b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d087:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d08b:	01 c2                	add    edx,eax
c001d08d:	89 16                	mov    DWORD PTR [esi],edx
c001d08f:	eb 69                	jmp    c001d0fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d091:	0f b6 db             	movzx  ebx,bl
c001d094:	50                   	push   eax
c001d095:	50                   	push   eax
c001d096:	53                   	push   ebx
c001d097:	68 07 c0 02 c0       	push   0xc002c007
c001d09c:	e8 86 57 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001d0a1:	83 c4 10             	add    esp,0x10
c001d0a4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d0a9:	74 12                	je     c001d0bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d0ab:	83 ec 0c             	sub    esp,0xc
c001d0ae:	68 12 c0 02 c0       	push   0xc002c012
c001d0b3:	e8 5b cf ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001d0b8:	83 c4 10             	add    esp,0x10
c001d0bb:	eb 3d                	jmp    c001d0fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d0bd:	83 ec 0c             	sub    esp,0xc
c001d0c0:	55                   	push   ebp
c001d0c1:	e8 82 5d ff ff       	call   c0012e48 <File::close()>
c001d0c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0c9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d0cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0cf:	59                   	pop    ecx
c001d0d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0d4:	e8 06 27 ff ff       	call   c000f7df <free>
c001d0d9:	5b                   	pop    ebx
c001d0da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0de:	e8 fc 26 ff ff       	call   c000f7df <free>
c001d0e3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d0e6:	e8 f4 26 ff ff       	call   c000f7df <free>
c001d0eb:	5e                   	pop    esi
c001d0ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0f0:	e8 ea 26 ff ff       	call   c000f7df <free>
c001d0f5:	83 c4 10             	add    esp,0x10
c001d0f8:	eb 21                	jmp    c001d11b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0fa:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d0fe:	e9 76 fd ff ff       	jmp    c001ce79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d103:	83 ec 0c             	sub    esp,0xc
c001d106:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d10a:	e8 d0 26 ff ff       	call   c000f7df <free>
c001d10f:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d113:	83 c4 10             	add    esp,0x10
c001d116:	e9 eb fc ff ff       	jmp    c001ce06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d11b:	31 c0                	xor    eax,eax
c001d11d:	eb 33                	jmp    c001d152 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d11f:	83 ec 0c             	sub    esp,0xc
c001d122:	55                   	push   ebp
c001d123:	e8 20 5d ff ff       	call   c0012e48 <File::close()>
c001d128:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d12b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d12e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d131:	58                   	pop    eax
c001d132:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d136:	e8 a4 26 ff ff       	call   c000f7df <free>
c001d13b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d13e:	e8 9c 26 ff ff       	call   c000f7df <free>
c001d143:	5a                   	pop    edx
c001d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d148:	e8 92 26 ff ff       	call   c000f7df <free>
c001d14d:	83 c4 10             	add    esp,0x10
c001d150:	b0 01                	mov    al,0x1
c001d152:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d158:	5b                   	pop    ebx
c001d159:	5e                   	pop    esi
c001d15a:	5f                   	pop    edi
c001d15b:	5d                   	pop    ebp
c001d15c:	c3                   	ret    

c001d15d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d15d:	56                   	push   esi
c001d15e:	31 d2                	xor    edx,edx
c001d160:	53                   	push   ebx
c001d161:	8b 1d 60 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002ec60
c001d167:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d16b:	39 d3                	cmp    ebx,edx
c001d16d:	7e 1b                	jle    c001d18a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d16f:	8b 04 95 80 ee 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1180]
c001d176:	39 c8                	cmp    eax,ecx
c001d178:	77 0d                	ja     c001d187 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d17a:	8b 34 95 80 ec 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd1380]
c001d181:	01 c6                	add    esi,eax
c001d183:	39 ce                	cmp    esi,ecx
c001d185:	77 05                	ja     c001d18c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d187:	42                   	inc    edx
c001d188:	eb e1                	jmp    c001d16b <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d18a:	31 c0                	xor    eax,eax
c001d18c:	5b                   	pop    ebx
c001d18d:	5e                   	pop    esi
c001d18e:	c3                   	ret    

c001d18f <Thr::getDriverNameFromAddress(unsigned long)>:
c001d18f:	53                   	push   ebx
c001d190:	31 c0                	xor    eax,eax
c001d192:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d196:	8b 1d 60 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002ec60
c001d19c:	39 c3                	cmp    ebx,eax
c001d19e:	7e 22                	jle    c001d1c2 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d1a0:	8b 14 85 80 ee 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1180]
c001d1a7:	39 ca                	cmp    edx,ecx
c001d1a9:	77 14                	ja     c001d1bf <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d1ab:	03 14 85 80 ec 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd1380]
c001d1b2:	39 ca                	cmp    edx,ecx
c001d1b4:	76 09                	jbe    c001d1bf <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d1b6:	8b 04 85 80 f0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0f80]
c001d1bd:	eb 05                	jmp    c001d1c4 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d1bf:	40                   	inc    eax
c001d1c0:	eb da                	jmp    c001d19c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d1c2:	31 c0                	xor    eax,eax
c001d1c4:	5b                   	pop    ebx
c001d1c5:	c3                   	ret    

c001d1c6 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d1c6:	53                   	push   ebx
c001d1c7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d1cb:	53                   	push   ebx
c001d1cc:	e8 8c ff ff ff       	call   c001d15d <Thr::getDriverBaseFromAddress(unsigned long)>
c001d1d1:	5a                   	pop    edx
c001d1d2:	31 d2                	xor    edx,edx
c001d1d4:	85 c0                	test   eax,eax
c001d1d6:	74 04                	je     c001d1dc <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d1d8:	89 da                	mov    edx,ebx
c001d1da:	29 c2                	sub    edx,eax
c001d1dc:	89 d0                	mov    eax,edx
c001d1de:	5b                   	pop    ebx
c001d1df:	c3                   	ret    

c001d1e0 <Thr::loadDLL(char const*, bool)>:
c001d1e0:	55                   	push   ebp
c001d1e1:	57                   	push   edi
c001d1e2:	56                   	push   esi
c001d1e3:	53                   	push   ebx
c001d1e4:	81 ec 34 01 00 00    	sub    esp,0x134
c001d1ea:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d1f1:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d1f8:	56                   	push   esi
c001d1f9:	68 2a c0 02 c0       	push   0xc002c02a
c001d1fe:	e8 24 56 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001d203:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d20a:	e8 c0 25 ff ff       	call   c000f7cf <malloc>
c001d20f:	83 c4 0c             	add    esp,0xc
c001d212:	89 c3                	mov    ebx,eax
c001d214:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c001d21a:	56                   	push   esi
c001d21b:	50                   	push   eax
c001d21c:	e8 65 5b ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c001d221:	83 c4 10             	add    esp,0x10
c001d224:	85 db                	test   ebx,ebx
c001d226:	75 3c                	jne    c001d264 <Thr::loadDLL(char const*, bool)+0x84>
c001d228:	89 f8                	mov    eax,edi
c001d22a:	84 c0                	test   al,al
c001d22c:	0f 84 d2 01 00 00    	je     c001d404 <Thr::loadDLL(char const*, bool)+0x224>
c001d232:	55                   	push   ebp
c001d233:	55                   	push   ebp
c001d234:	68 3b c0 02 c0       	push   0xc002c03b
c001d239:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d23d:	55                   	push   ebp
c001d23e:	e8 c9 35 fe ff       	call   c000080c <strcpy>
c001d243:	58                   	pop    eax
c001d244:	5a                   	pop    edx
c001d245:	56                   	push   esi
c001d246:	55                   	push   ebp
c001d247:	e8 00 37 fe ff       	call   c000094c <strcat>
c001d24c:	59                   	pop    ecx
c001d24d:	58                   	pop    eax
c001d24e:	68 4e c0 02 c0       	push   0xc002c04e
c001d253:	55                   	push   ebp
c001d254:	e8 f3 36 fe ff       	call   c000094c <strcat>
c001d259:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d25c:	e8 b2 cd ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001d261:	83 c4 10             	add    esp,0x10
c001d264:	51                   	push   ecx
c001d265:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d269:	50                   	push   eax
c001d26a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d26e:	50                   	push   eax
c001d26f:	53                   	push   ebx
c001d270:	e8 21 5e ff ff       	call   c0013096 <File::stat(unsigned long long*, bool*)>
c001d275:	83 c4 10             	add    esp,0x10
c001d278:	85 db                	test   ebx,ebx
c001d27a:	74 0c                	je     c001d288 <Thr::loadDLL(char const*, bool)+0xa8>
c001d27c:	83 ec 0c             	sub    esp,0xc
c001d27f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d281:	53                   	push   ebx
c001d282:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d285:	83 c4 10             	add    esp,0x10
c001d288:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d28d:	75 0a                	jne    c001d299 <Thr::loadDLL(char const*, bool)+0xb9>
c001d28f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d293:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d297:	75 3c                	jne    c001d2d5 <Thr::loadDLL(char const*, bool)+0xf5>
c001d299:	89 f8                	mov    eax,edi
c001d29b:	84 c0                	test   al,al
c001d29d:	0f 84 49 01 00 00    	je     c001d3ec <Thr::loadDLL(char const*, bool)+0x20c>
c001d2a3:	51                   	push   ecx
c001d2a4:	51                   	push   ecx
c001d2a5:	68 3b c0 02 c0       	push   0xc002c03b
c001d2aa:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d2ae:	53                   	push   ebx
c001d2af:	e8 58 35 fe ff       	call   c000080c <strcpy>
c001d2b4:	5d                   	pop    ebp
c001d2b5:	58                   	pop    eax
c001d2b6:	56                   	push   esi
c001d2b7:	53                   	push   ebx
c001d2b8:	e8 8f 36 fe ff       	call   c000094c <strcat>
c001d2bd:	58                   	pop    eax
c001d2be:	5a                   	pop    edx
c001d2bf:	68 4e c0 02 c0       	push   0xc002c04e
c001d2c4:	53                   	push   ebx
c001d2c5:	e8 82 36 fe ff       	call   c000094c <strcat>
c001d2ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d2cd:	e8 41 cd ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001d2d2:	83 c4 10             	add    esp,0x10
c001d2d5:	52                   	push   edx
c001d2d6:	6a 03                	push   0x3
c001d2d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2dc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d2e0:	05 ff 0f 00 00       	add    eax,0xfff
c001d2e5:	83 d2 00             	adc    edx,0x0
c001d2e8:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d2ec:	50                   	push   eax
c001d2ed:	ff 35 90 e0 02 c0    	push   DWORD PTR ds:0xc002e090
c001d2f3:	e8 06 49 ff ff       	call   c0011bfe <VAS::allocatePages(int, int)>
c001d2f8:	59                   	pop    ecx
c001d2f9:	89 c3                	mov    ebx,eax
c001d2fb:	5d                   	pop    ebp
c001d2fc:	50                   	push   eax
c001d2fd:	68 51 a4 02 c0       	push   0xc002a451
c001d302:	e8 20 55 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001d307:	89 34 24             	mov    DWORD PTR [esp],esi
c001d30a:	e8 5d 34 fe ff       	call   c000076c <strlen>
c001d30f:	8b 2d 60 ec 02 c0    	mov    ebp,DWORD PTR ds:0xc002ec60
c001d315:	40                   	inc    eax
c001d316:	89 04 24             	mov    DWORD PTR [esp],eax
c001d319:	e8 b1 24 ff ff       	call   c000f7cf <malloc>
c001d31e:	89 04 ad 80 f0 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd0f80],eax
c001d325:	58                   	pop    eax
c001d326:	a1 60 ec 02 c0       	mov    eax,ds:0xc002ec60
c001d32b:	5a                   	pop    edx
c001d32c:	56                   	push   esi
c001d32d:	ff 34 85 80 f0 02 c0 	push   DWORD PTR [eax*4-0x3ffd0f80]
c001d334:	e8 d3 34 fe ff       	call   c000080c <strcpy>
c001d339:	a1 60 ec 02 c0       	mov    eax,ds:0xc002ec60
c001d33e:	8d 50 01             	lea    edx,[eax+0x1]
c001d341:	89 1c 85 80 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1180],ebx
c001d348:	89 15 60 ec 02 c0    	mov    DWORD PTR ds:0xc002ec60,edx
c001d34e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d352:	83 c4 0c             	add    esp,0xc
c001d355:	89 14 85 80 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1380],edx
c001d35c:	6a 01                	push   0x1
c001d35e:	53                   	push   ebx
c001d35f:	56                   	push   esi
c001d360:	e8 c2 f6 ff ff       	call   c001ca27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d365:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d369:	83 c4 10             	add    esp,0x10
c001d36c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d371:	0f 85 89 00 00 00    	jne    c001d400 <Thr::loadDLL(char const*, bool)+0x220>
c001d377:	89 f8                	mov    eax,edi
c001d379:	84 c0                	test   al,al
c001d37b:	74 73                	je     c001d3f0 <Thr::loadDLL(char const*, bool)+0x210>
c001d37d:	83 ec 0c             	sub    esp,0xc
c001d380:	68 50 c0 02 c0       	push   0xc002c050
c001d385:	e8 89 cc ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001d38a:	83 c4 10             	add    esp,0x10
c001d38d:	eb 61                	jmp    c001d3f0 <Thr::loadDLL(char const*, bool)+0x210>
c001d38f:	50                   	push   eax
c001d390:	50                   	push   eax
c001d391:	89 e8                	mov    eax,ebp
c001d393:	c1 e0 0c             	shl    eax,0xc
c001d396:	01 d8                	add    eax,ebx
c001d398:	50                   	push   eax
c001d399:	ff 35 90 e0 02 c0    	push   DWORD PTR ds:0xc002e090
c001d39f:	e8 c2 43 ff ff       	call   c0011766 <VAS::getPageTableEntry(unsigned long)>
c001d3a4:	83 c4 10             	add    esp,0x10
c001d3a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d3a9:	a8 60                	test   al,0x60
c001d3ab:	75 11                	jne    c001d3be <Thr::loadDLL(char const*, bool)+0x1de>
c001d3ad:	83 ec 0c             	sub    esp,0xc
c001d3b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d3b5:	50                   	push   eax
c001d3b6:	e8 9f 27 ff ff       	call   c000fb5a <Phys::freePage(unsigned long)>
c001d3bb:	83 c4 10             	add    esp,0x10
c001d3be:	45                   	inc    ebp
c001d3bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d3c7:	05 ff 0f 00 00       	add    eax,0xfff
c001d3cc:	bf 00 00 00 00       	mov    edi,0x0
c001d3d1:	83 d2 00             	adc    edx,0x0
c001d3d4:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d3d8:	c1 ea 0c             	shr    edx,0xc
c001d3db:	39 c5                	cmp    ebp,eax
c001d3dd:	89 d1                	mov    ecx,edx
c001d3df:	89 f8                	mov    eax,edi
c001d3e1:	19 c8                	sbb    eax,ecx
c001d3e3:	72 aa                	jb     c001d38f <Thr::loadDLL(char const*, bool)+0x1af>
c001d3e5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d3ea:	75 18                	jne    c001d404 <Thr::loadDLL(char const*, bool)+0x224>
c001d3ec:	31 db                	xor    ebx,ebx
c001d3ee:	eb 14                	jmp    c001d404 <Thr::loadDLL(char const*, bool)+0x224>
c001d3f0:	83 ec 0c             	sub    esp,0xc
c001d3f3:	68 6f c0 02 c0       	push   0xc002c06f
c001d3f8:	e8 16 cc ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001d3fd:	83 c4 10             	add    esp,0x10
c001d400:	31 ed                	xor    ebp,ebp
c001d402:	eb bb                	jmp    c001d3bf <Thr::loadDLL(char const*, bool)+0x1df>
c001d404:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d40a:	89 d8                	mov    eax,ebx
c001d40c:	5b                   	pop    ebx
c001d40d:	5e                   	pop    esi
c001d40e:	5f                   	pop    edi
c001d40f:	5d                   	pop    ebp
c001d410:	c3                   	ret    

c001d411 <Thr::executeDLL(unsigned long, void*)>:
c001d411:	56                   	push   esi
c001d412:	53                   	push   ebx
c001d413:	52                   	push   edx
c001d414:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d418:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d41c:	85 db                	test   ebx,ebx
c001d41e:	75 10                	jne    c001d430 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d420:	83 ec 0c             	sub    esp,0xc
c001d423:	68 8b c0 02 c0       	push   0xc002c08b
c001d428:	e8 e6 cb ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001d42d:	83 c4 10             	add    esp,0x10
c001d430:	50                   	push   eax
c001d431:	50                   	push   eax
c001d432:	53                   	push   ebx
c001d433:	68 b5 c0 02 c0       	push   0xc002c0b5
c001d438:	e8 ea 53 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001d43d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d441:	89 d8                	mov    eax,ebx
c001d443:	83 c4 14             	add    esp,0x14
c001d446:	5b                   	pop    ebx
c001d447:	5e                   	pop    esi
c001d448:	ff e0                	jmp    eax

c001d44a <userModeEntryPoint(void*)>:
c001d44a:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001d44f:	48                   	dec    eax
c001d450:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001d455:	75 01                	jne    c001d458 <userModeEntryPoint(void*)+0xe>
c001d457:	fb                   	sti    
c001d458:	fb                   	sti    
c001d459:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d45e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d461:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d467:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d46b:	e9 ba 2e fe ff       	jmp    c000032a <goToUsermode>

c001d470 <changeTSS>:
c001d470:	83 ec 14             	sub    esp,0x14
c001d473:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d478:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d47b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d480:	c1 e2 15             	shl    edx,0x15
c001d483:	29 d0                	sub    eax,edx
c001d485:	50                   	push   eax
c001d486:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001d48b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d491:	05 7c 11 00 00       	add    eax,0x117c
c001d496:	50                   	push   eax
c001d497:	e8 0e 39 ff ff       	call   c0010daa <TSS::setESP(unsigned long)>
c001d49c:	83 c4 1c             	add    esp,0x1c
c001d49f:	c3                   	ret    

c001d4a0 <switchToThread(ThreadControlBlock*)>:
c001d4a0:	57                   	push   edi
c001d4a1:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c001d4a6:	56                   	push   esi
c001d4a7:	85 c0                	test   eax,eax
c001d4a9:	53                   	push   ebx
c001d4aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d4ae:	0f 85 88 00 00 00    	jne    c001d53c <switchToThread(ThreadControlBlock*)+0x9c>
c001d4b4:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d4b7:	3c ff                	cmp    al,0xff
c001d4b9:	74 7d                	je     c001d538 <switchToThread(ThreadControlBlock*)+0x98>
c001d4bb:	0f b6 d0             	movzx  edx,al
c001d4be:	b8 84 03 00 00       	mov    eax,0x384
c001d4c3:	29 d0                	sub    eax,edx
c001d4c5:	c1 e0 10             	shl    eax,0x10
c001d4c8:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d4cb:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d4ce:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001d4d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d4d9:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d4e0:	74 4a                	je     c001d52c <switchToThread(ThreadControlBlock*)+0x8c>
c001d4e2:	0f 31                	rdtsc  
c001d4e4:	a3 68 f4 02 c0       	mov    ds:0xc002f468,eax
c001d4e9:	89 c6                	mov    esi,eax
c001d4eb:	89 d7                	mov    edi,edx
c001d4ed:	2b 35 58 f4 02 c0    	sub    esi,DWORD PTR ds:0xc002f458
c001d4f3:	89 15 6c f4 02 c0    	mov    DWORD PTR ds:0xc002f46c,edx
c001d4f9:	1b 3d 5c f4 02 c0    	sbb    edi,DWORD PTR ds:0xc002f45c
c001d4ff:	89 35 60 f4 02 c0    	mov    DWORD PTR ds:0xc002f460,esi
c001d505:	a3 58 f4 02 c0       	mov    ds:0xc002f458,eax
c001d50a:	89 3d 64 f4 02 c0    	mov    DWORD PTR ds:0xc002f464,edi
c001d510:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d516:	89 15 5c f4 02 c0    	mov    DWORD PTR ds:0xc002f45c,edx
c001d51c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d51f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d522:	01 c6                	add    esi,eax
c001d524:	11 d7                	adc    edi,edx
c001d526:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d529:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d52c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d530:	5b                   	pop    ebx
c001d531:	5e                   	pop    esi
c001d532:	5f                   	pop    edi
c001d533:	e9 2a 2e fe ff       	jmp    c0000362 <switchToThreadASM>
c001d538:	31 c0                	xor    eax,eax
c001d53a:	eb 8f                	jmp    c001d4cb <switchToThread(ThreadControlBlock*)+0x2b>
c001d53c:	5b                   	pop    ebx
c001d53d:	c7 05 20 f4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f420,0x1
c001d547:	5e                   	pop    esi
c001d548:	5f                   	pop    edi
c001d549:	c3                   	ret    

c001d54a <Process::addArgs(char**)>:
c001d54a:	57                   	push   edi
c001d54b:	56                   	push   esi
c001d54c:	53                   	push   ebx
c001d54d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d551:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d555:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d55f:	85 ff                	test   edi,edi
c001d561:	74 3d                	je     c001d5a0 <Process::addArgs(char**)+0x56>
c001d563:	8b 07                	mov    eax,DWORD PTR [edi]
c001d565:	85 c0                	test   eax,eax
c001d567:	74 37                	je     c001d5a0 <Process::addArgs(char**)+0x56>
c001d569:	31 db                	xor    ebx,ebx
c001d56b:	83 ec 0c             	sub    esp,0xc
c001d56e:	50                   	push   eax
c001d56f:	e8 f8 31 fe ff       	call   c000076c <strlen>
c001d574:	40                   	inc    eax
c001d575:	89 04 24             	mov    DWORD PTR [esp],eax
c001d578:	e8 52 22 ff ff       	call   c000f7cf <malloc>
c001d57d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d584:	5a                   	pop    edx
c001d585:	59                   	pop    ecx
c001d586:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d589:	43                   	inc    ebx
c001d58a:	50                   	push   eax
c001d58b:	e8 7c 32 fe ff       	call   c000080c <strcpy>
c001d590:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d596:	83 c4 10             	add    esp,0x10
c001d599:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d59c:	85 c0                	test   eax,eax
c001d59e:	75 cb                	jne    c001d56b <Process::addArgs(char**)+0x21>
c001d5a0:	5b                   	pop    ebx
c001d5a1:	5e                   	pop    esi
c001d5a2:	5f                   	pop    edi
c001d5a3:	c3                   	ret    

c001d5a4 <Process::Process(char const*, Process*, char**)>:
c001d5a4:	56                   	push   esi
c001d5a5:	53                   	push   ebx
c001d5a6:	83 ec 14             	sub    esp,0x14
c001d5a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5ad:	05 0c 02 00 00       	add    eax,0x20c
c001d5b2:	bb 07 00 00 00       	mov    ebx,0x7
c001d5b7:	89 c6                	mov    esi,eax
c001d5b9:	85 db                	test   ebx,ebx
c001d5bb:	78 12                	js     c001d5cf <Process::Process(char const*, Process*, char**)+0x2b>
c001d5bd:	83 ec 0c             	sub    esp,0xc
c001d5c0:	56                   	push   esi
c001d5c1:	e8 70 b8 00 00       	call   c0028e36 <ThreadControlBlock::ThreadControlBlock()>
c001d5c6:	83 c4 10             	add    esp,0x10
c001d5c9:	83 c6 63             	add    esi,0x63
c001d5cc:	4b                   	dec    ebx
c001d5cd:	eb ea                	jmp    c001d5b9 <Process::Process(char const*, Process*, char**)+0x15>
c001d5cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5d3:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d5da:	83 ec 0c             	sub    esp,0xc
c001d5dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5e1:	e8 b6 c8 ff ff       	call   c0019e9c <Krnl::newProcessEnv(Process*)>
c001d5e6:	83 c4 10             	add    esp,0x10
c001d5e9:	89 c2                	mov    edx,eax
c001d5eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5ef:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d5f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5f9:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d602:	a1 b0 d4 02 c0       	mov    eax,ds:0xc002d4b0
c001d607:	8d 50 01             	lea    edx,[eax+0x1]
c001d60a:	89 15 b0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4b0,edx
c001d610:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d614:	89 02                	mov    DWORD PTR [edx],eax
c001d616:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d61e:	83 ec 0c             	sub    esp,0xc
c001d621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d625:	e8 a5 21 ff ff       	call   c000f7cf <malloc>
c001d62a:	83 c4 10             	add    esp,0x10
c001d62d:	89 c3                	mov    ebx,eax
c001d62f:	83 ec 08             	sub    esp,0x8
c001d632:	6a 00                	push   0x0
c001d634:	53                   	push   ebx
c001d635:	e8 6c 49 ff ff       	call   c0011fa6 <VAS::VAS(bool)>
c001d63a:	83 c4 10             	add    esp,0x10
c001d63d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d641:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d647:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d64b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d655:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d659:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d65d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d667:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d66d:	85 c0                	test   eax,eax
c001d66f:	74 42                	je     c001d6b3 <Process::Process(char const*, Process*, char**)+0x10f>
c001d671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d675:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d67b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d685:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d68b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d68f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d695:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d69b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d69f:	05 0c 01 00 00       	add    eax,0x10c
c001d6a4:	83 ec 08             	sub    esp,0x8
c001d6a7:	52                   	push   edx
c001d6a8:	50                   	push   eax
c001d6a9:	e8 5e 31 fe ff       	call   c000080c <strcpy>
c001d6ae:	83 c4 10             	add    esp,0x10
c001d6b1:	eb 63                	jmp    c001d716 <Process::Process(char const*, Process*, char**)+0x172>
c001d6b3:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d6bb:	83 ec 0c             	sub    esp,0xc
c001d6be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d6c2:	e8 08 21 ff ff       	call   c000f7cf <malloc>
c001d6c7:	83 c4 10             	add    esp,0x10
c001d6ca:	89 c3                	mov    ebx,eax
c001d6cc:	83 ec 08             	sub    esp,0x8
c001d6cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6d3:	53                   	push   ebx
c001d6d4:	e8 e3 33 ff ff       	call   c0010abc <VgaText::VgaText(char const*)>
c001d6d9:	83 c4 10             	add    esp,0x10
c001d6dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6e0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d6e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6ea:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d6f0:	83 ec 0c             	sub    esp,0xc
c001d6f3:	50                   	push   eax
c001d6f4:	e8 82 2b ff ff       	call   c001027b <addToTerminalCycle(VgaText*)>
c001d6f9:	83 c4 10             	add    esp,0x10
c001d6fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d700:	05 0c 01 00 00       	add    eax,0x10c
c001d705:	83 ec 08             	sub    esp,0x8
c001d708:	68 d4 c0 02 c0       	push   0xc002c0d4
c001d70d:	50                   	push   eax
c001d70e:	e8 f9 30 fe ff       	call   c000080c <strcpy>
c001d713:	83 c4 10             	add    esp,0x10
c001d716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d71a:	83 c0 0c             	add    eax,0xc
c001d71d:	83 ec 08             	sub    esp,0x8
c001d720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d724:	50                   	push   eax
c001d725:	e8 e2 30 fe ff       	call   c000080c <strcpy>
c001d72a:	83 c4 10             	add    esp,0x10
c001d72d:	83 ec 08             	sub    esp,0x8
c001d730:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d738:	e8 0d fe ff ff       	call   c001d54a <Process::addArgs(char**)>
c001d73d:	83 c4 10             	add    esp,0x10
c001d740:	83 ec 08             	sub    esp,0x8
c001d743:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d747:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d74b:	e8 a1 ed ff ff       	call   c001c4f1 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d750:	83 c4 10             	add    esp,0x10
c001d753:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d757:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d75b:	83 f0 01             	xor    eax,0x1
c001d75e:	88 c2                	mov    dl,al
c001d760:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d764:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d76a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d76f:	83 ec 08             	sub    esp,0x8
c001d772:	50                   	push   eax
c001d773:	68 2c c1 02 c0       	push   0xc002c12c
c001d778:	e8 aa 50 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001d77d:	83 c4 10             	add    esp,0x10
c001d780:	90                   	nop
c001d781:	83 c4 14             	add    esp,0x14
c001d784:	5b                   	pop    ebx
c001d785:	5e                   	pop    esi
c001d786:	c3                   	ret    
c001d787:	90                   	nop

c001d788 <Process::Process(bool, char const*, Process*, char**)>:
c001d788:	56                   	push   esi
c001d789:	53                   	push   ebx
c001d78a:	83 ec 24             	sub    esp,0x24
c001d78d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d791:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d795:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d799:	05 0c 02 00 00       	add    eax,0x20c
c001d79e:	bb 07 00 00 00       	mov    ebx,0x7
c001d7a3:	89 c6                	mov    esi,eax
c001d7a5:	85 db                	test   ebx,ebx
c001d7a7:	78 12                	js     c001d7bb <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d7a9:	83 ec 0c             	sub    esp,0xc
c001d7ac:	56                   	push   esi
c001d7ad:	e8 84 b6 00 00       	call   c0028e36 <ThreadControlBlock::ThreadControlBlock()>
c001d7b2:	83 c4 10             	add    esp,0x10
c001d7b5:	83 c6 63             	add    esi,0x63
c001d7b8:	4b                   	dec    ebx
c001d7b9:	eb ea                	jmp    c001d7a5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d7bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7bf:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d7c6:	83 ec 0c             	sub    esp,0xc
c001d7c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d7cd:	e8 ca c6 ff ff       	call   c0019e9c <Krnl::newProcessEnv(Process*)>
c001d7d2:	83 c4 10             	add    esp,0x10
c001d7d5:	89 c2                	mov    edx,eax
c001d7d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7db:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d7e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7e5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d7ee:	a1 b0 d4 02 c0       	mov    eax,ds:0xc002d4b0
c001d7f3:	8d 50 01             	lea    edx,[eax+0x1]
c001d7f6:	89 15 b0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4b0,edx
c001d7fc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d800:	89 02                	mov    DWORD PTR [edx],eax
c001d802:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d80a:	83 ec 0c             	sub    esp,0xc
c001d80d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d811:	e8 b9 1f ff ff       	call   c000f7cf <malloc>
c001d816:	83 c4 10             	add    esp,0x10
c001d819:	89 c3                	mov    ebx,eax
c001d81b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d820:	83 ec 08             	sub    esp,0x8
c001d823:	50                   	push   eax
c001d824:	53                   	push   ebx
c001d825:	e8 7c 47 ff ff       	call   c0011fa6 <VAS::VAS(bool)>
c001d82a:	83 c4 10             	add    esp,0x10
c001d82d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d831:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d837:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d83b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d845:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d849:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d84d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d853:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d857:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d85d:	85 c0                	test   eax,eax
c001d85f:	74 42                	je     c001d8a3 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d861:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d865:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d86b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d871:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d875:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d87b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d87f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d885:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d88b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d88f:	05 0c 01 00 00       	add    eax,0x10c
c001d894:	83 ec 08             	sub    esp,0x8
c001d897:	52                   	push   edx
c001d898:	50                   	push   eax
c001d899:	e8 6e 2f fe ff       	call   c000080c <strcpy>
c001d89e:	83 c4 10             	add    esp,0x10
c001d8a1:	eb 63                	jmp    c001d906 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d8a3:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d8ab:	83 ec 0c             	sub    esp,0xc
c001d8ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d8b2:	e8 18 1f ff ff       	call   c000f7cf <malloc>
c001d8b7:	83 c4 10             	add    esp,0x10
c001d8ba:	89 c3                	mov    ebx,eax
c001d8bc:	83 ec 08             	sub    esp,0x8
c001d8bf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d8c3:	53                   	push   ebx
c001d8c4:	e8 f3 31 ff ff       	call   c0010abc <VgaText::VgaText(char const*)>
c001d8c9:	83 c4 10             	add    esp,0x10
c001d8cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8d0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d8d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8da:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d8e0:	83 ec 0c             	sub    esp,0xc
c001d8e3:	50                   	push   eax
c001d8e4:	e8 92 29 ff ff       	call   c001027b <addToTerminalCycle(VgaText*)>
c001d8e9:	83 c4 10             	add    esp,0x10
c001d8ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8f0:	05 0c 01 00 00       	add    eax,0x10c
c001d8f5:	83 ec 08             	sub    esp,0x8
c001d8f8:	68 d4 c0 02 c0       	push   0xc002c0d4
c001d8fd:	50                   	push   eax
c001d8fe:	e8 09 2f fe ff       	call   c000080c <strcpy>
c001d903:	83 c4 10             	add    esp,0x10
c001d906:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d90a:	83 c0 0c             	add    eax,0xc
c001d90d:	83 ec 08             	sub    esp,0x8
c001d910:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d914:	50                   	push   eax
c001d915:	e8 f2 2e fe ff       	call   c000080c <strcpy>
c001d91a:	83 c4 10             	add    esp,0x10
c001d91d:	83 ec 08             	sub    esp,0x8
c001d920:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d924:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d928:	e8 1d fc ff ff       	call   c001d54a <Process::addArgs(char**)>
c001d92d:	83 c4 10             	add    esp,0x10
c001d930:	90                   	nop
c001d931:	83 c4 24             	add    esp,0x24
c001d934:	5b                   	pop    ebx
c001d935:	5e                   	pop    esi
c001d936:	c3                   	ret    

c001d937 <taskStartupFunction>:
c001d937:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d93c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d93f:	c3                   	ret    

c001d940 <Semaphore::Semaphore(int)>:
c001d940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d944:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d948:	89 10                	mov    DWORD PTR [eax],edx
c001d94a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d94e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d955:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d959:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d964:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d96b:	90                   	nop
c001d96c:	c3                   	ret    
c001d96d:	90                   	nop

c001d96e <Mutex::Mutex()>:
c001d96e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d972:	6a 01                	push   0x1
c001d974:	50                   	push   eax
c001d975:	e8 c6 ff ff ff       	call   c001d940 <Semaphore::Semaphore(int)>
c001d97a:	83 c4 08             	add    esp,0x8
c001d97d:	90                   	nop
c001d97e:	c3                   	ret    
c001d97f:	90                   	nop

c001d980 <Process::createThread(void (*)(void*), void*, int)>:
c001d980:	55                   	push   ebp
c001d981:	31 c9                	xor    ecx,ecx
c001d983:	57                   	push   edi
c001d984:	56                   	push   esi
c001d985:	53                   	push   ebx
c001d986:	83 ec 1c             	sub    esp,0x1c
c001d989:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d98d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d994:	89 f2                	mov    edx,esi
c001d996:	0f b7 c2             	movzx  eax,dx
c001d999:	83 e2 01             	and    edx,0x1
c001d99c:	74 16                	je     c001d9b4 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d99e:	d1 f8                	sar    eax,1
c001d9a0:	41                   	inc    ecx
c001d9a1:	89 c2                	mov    edx,eax
c001d9a3:	83 f9 10             	cmp    ecx,0x10
c001d9a6:	75 ee                	jne    c001d996 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d9a8:	83 c4 1c             	add    esp,0x1c
c001d9ab:	31 db                	xor    ebx,ebx
c001d9ad:	89 d8                	mov    eax,ebx
c001d9af:	5b                   	pop    ebx
c001d9b0:	5e                   	pop    esi
c001d9b1:	5f                   	pop    edi
c001d9b2:	5d                   	pop    ebp
c001d9b3:	c3                   	ret    
c001d9b4:	b8 01 00 00 00       	mov    eax,0x1
c001d9b9:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d9bc:	d3 e0                	shl    eax,cl
c001d9be:	09 c6                	or     esi,eax
c001d9c0:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d9c3:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d9ca:	89 c6                	mov    esi,eax
c001d9cc:	c1 e6 05             	shl    esi,0x5
c001d9cf:	01 f0                	add    eax,esi
c001d9d1:	01 d8                	add    eax,ebx
c001d9d3:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d9da:	75 0a                	jne    c001d9e6 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d9dc:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d9e6:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d9ec:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d9f0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d9f3:	01 ca                	add    edx,ecx
c001d9f5:	83 ec 08             	sub    esp,0x8
c001d9f8:	89 d0                	mov    eax,edx
c001d9fa:	c1 e0 05             	shl    eax,0x5
c001d9fd:	01 d0                	add    eax,edx
c001d9ff:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001da03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001da07:	01 d8                	add    eax,ebx
c001da09:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001da0f:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001da15:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001da1b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001da21:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001da27:	89 cd                	mov    ebp,ecx
c001da29:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001da2d:	f7 dd                	neg    ebp
c001da2f:	c1 e5 15             	shl    ebp,0x15
c001da32:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001da38:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001da3e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001da48:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001da4e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001da58:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001da62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da66:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001da6d:	53                   	push   ebx
c001da6e:	68 44 f4 02 c0       	push   0xc002f444
c001da73:	e8 78 b1 00 00       	call   c0028bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da78:	89 d8                	mov    eax,ebx
c001da7a:	83 c4 10             	add    esp,0x10
c001da7d:	83 c4 1c             	add    esp,0x1c
c001da80:	5b                   	pop    ebx
c001da81:	5e                   	pop    esi
c001da82:	5f                   	pop    edi
c001da83:	5d                   	pop    ebp
c001da84:	c3                   	ret    
c001da85:	90                   	nop

c001da86 <Process::createUserThread()>:
c001da86:	83 ec 0c             	sub    esp,0xc
c001da89:	68 80 00 00 00       	push   0x80
c001da8e:	6a 00                	push   0x0
c001da90:	68 4a d4 01 c0       	push   0xc001d44a
c001da95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da99:	e8 e2 fe ff ff       	call   c001d980 <Process::createThread(void (*)(void*), void*, int)>
c001da9e:	83 c4 1c             	add    esp,0x1c
c001daa1:	c3                   	ret    

c001daa2 <setupMultitasking(void (*)())>:
c001daa2:	56                   	push   esi
c001daa3:	53                   	push   ebx
c001daa4:	51                   	push   ecx
c001daa5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001daa9:	eb 10                	jmp    c001dabb <setupMultitasking(void (*)())+0x19>
c001daab:	83 ec 0c             	sub    esp,0xc
c001daae:	68 44 f4 02 c0       	push   0xc002f444
c001dab3:	e8 8a b0 00 00       	call   c0028b42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dab8:	83 c4 10             	add    esp,0x10
c001dabb:	83 ec 0c             	sub    esp,0xc
c001dabe:	68 44 f4 02 c0       	push   0xc002f444
c001dac3:	e8 56 b0 00 00       	call   c0028b1e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dac8:	83 c4 10             	add    esp,0x10
c001dacb:	84 c0                	test   al,al
c001dacd:	74 dc                	je     c001daab <setupMultitasking(void (*)())+0x9>
c001dacf:	83 ec 0c             	sub    esp,0xc
c001dad2:	68 3f 07 00 00       	push   0x73f
c001dad7:	e8 f3 1c ff ff       	call   c000f7cf <malloc>
c001dadc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dae3:	89 c3                	mov    ebx,eax
c001dae5:	6a 00                	push   0x0
c001dae7:	68 d8 c0 02 c0       	push   0xc002c0d8
c001daec:	6a 01                	push   0x1
c001daee:	50                   	push   eax
c001daef:	e8 94 fc ff ff       	call   c001d788 <Process::Process(bool, char const*, Process*, char**)>
c001daf4:	83 c4 14             	add    esp,0x14
c001daf7:	89 1d 50 f4 02 c0    	mov    DWORD PTR ds:0xc002f450,ebx
c001dafd:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001db03:	e8 81 2a ff ff       	call   c0010589 <setActiveTerminal(VgaText*)>
c001db08:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001db10:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001db1a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001db20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001db23:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001db2d:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001db33:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001db39:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001db43:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001db4d:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001db57:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001db5d:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001db67:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001db6d:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001db77:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001db7d:	58                   	pop    eax
c001db7e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001db84:	5a                   	pop    edx
c001db85:	68 d4 c0 02 c0       	push   0xc002c0d4
c001db8a:	50                   	push   eax
c001db8b:	e8 7c 2c fe ff       	call   c000080c <strcpy>
c001db90:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001db97:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001db9b:	83 c4 14             	add    esp,0x14
c001db9e:	5b                   	pop    ebx
c001db9f:	5e                   	pop    esi
c001dba0:	e9 af 27 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001dba5 <schedule()>:
c001dba5:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c001dbaa:	85 c0                	test   eax,eax
c001dbac:	74 0b                	je     c001dbb9 <schedule()+0x14>
c001dbae:	c7 05 20 f4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f420,0x1
c001dbb8:	c3                   	ret    
c001dbb9:	53                   	push   ebx
c001dbba:	83 ec 14             	sub    esp,0x14
c001dbbd:	68 44 f4 02 c0       	push   0xc002f444
c001dbc2:	e8 57 af 00 00       	call   c0028b1e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dbc7:	83 c4 10             	add    esp,0x10
c001dbca:	84 c0                	test   al,al
c001dbcc:	75 38                	jne    c001dc06 <schedule()+0x61>
c001dbce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbd3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dbd6:	4a                   	dec    edx
c001dbd7:	74 32                	je     c001dc0b <schedule()+0x66>
c001dbd9:	83 ec 0c             	sub    esp,0xc
c001dbdc:	68 44 f4 02 c0       	push   0xc002f444
c001dbe1:	e8 54 af 00 00       	call   c0028b3a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dbe6:	c7 04 24 44 f4 02 c0 	mov    DWORD PTR [esp],0xc002f444
c001dbed:	89 c3                	mov    ebx,eax
c001dbef:	e8 4e af 00 00       	call   c0028b42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dbf4:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001dbfb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbfe:	e8 9d f8 ff ff       	call   c001d4a0 <switchToThread(ThreadControlBlock*)>
c001dc03:	83 c4 10             	add    esp,0x10
c001dc06:	83 c4 08             	add    esp,0x8
c001dc09:	5b                   	pop    ebx
c001dc0a:	c3                   	ret    
c001dc0b:	83 ec 08             	sub    esp,0x8
c001dc0e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001dc15:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dc1b:	68 44 f4 02 c0       	push   0xc002f444
c001dc20:	e8 cb af 00 00       	call   c0028bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc25:	83 c4 10             	add    esp,0x10
c001dc28:	eb af                	jmp    c001dbd9 <schedule()+0x34>

c001dc2a <Semaphore::tryAcquire()>:
c001dc2a:	53                   	push   ebx
c001dc2b:	83 ec 08             	sub    esp,0x8
c001dc2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc32:	fa                   	cli    
c001dc33:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001dc38:	8d 50 01             	lea    edx,[eax+0x1]
c001dc3b:	89 15 28 f4 02 c0    	mov    DWORD PTR ds:0xc002f428,edx
c001dc41:	8b 15 24 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f424
c001dc47:	8d 5a 01             	lea    ebx,[edx+0x1]
c001dc4a:	89 1d 24 f4 02 c0    	mov    DWORD PTR ds:0xc002f424,ebx
c001dc50:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001dc53:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001dc55:	7c 2a                	jl     c001dc81 <Semaphore::tryAcquire()+0x57>
c001dc57:	89 15 24 f4 02 c0    	mov    DWORD PTR ds:0xc002f424,edx
c001dc5d:	85 d2                	test   edx,edx
c001dc5f:	75 0a                	jne    c001dc6b <Semaphore::tryAcquire()+0x41>
c001dc61:	8b 15 20 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f420
c001dc67:	85 d2                	test   edx,edx
c001dc69:	75 5b                	jne    c001dcc6 <Semaphore::tryAcquire()+0x9c>
c001dc6b:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001dc70:	85 c0                	test   eax,eax
c001dc72:	74 07                	je     c001dc7b <Semaphore::tryAcquire()+0x51>
c001dc74:	31 c0                	xor    eax,eax
c001dc76:	83 c4 08             	add    esp,0x8
c001dc79:	5b                   	pop    ebx
c001dc7a:	c3                   	ret    
c001dc7b:	fb                   	sti    
c001dc7c:	83 c4 08             	add    esp,0x8
c001dc7f:	5b                   	pop    ebx
c001dc80:	c3                   	ret    
c001dc81:	43                   	inc    ebx
c001dc82:	89 15 24 f4 02 c0    	mov    DWORD PTR ds:0xc002f424,edx
c001dc88:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001dc8b:	85 d2                	test   edx,edx
c001dc8d:	75 1f                	jne    c001dcae <Semaphore::tryAcquire()+0x84>
c001dc8f:	8b 0d 20 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f420
c001dc95:	85 c9                	test   ecx,ecx
c001dc97:	74 15                	je     c001dcae <Semaphore::tryAcquire()+0x84>
c001dc99:	c7 05 20 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f420,0x0
c001dca3:	e8 fd fe ff ff       	call   c001dba5 <schedule()>
c001dca8:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001dcad:	48                   	dec    eax
c001dcae:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001dcb3:	85 c0                	test   eax,eax
c001dcb5:	75 08                	jne    c001dcbf <Semaphore::tryAcquire()+0x95>
c001dcb7:	fb                   	sti    
c001dcb8:	b0 01                	mov    al,0x1
c001dcba:	83 c4 08             	add    esp,0x8
c001dcbd:	5b                   	pop    ebx
c001dcbe:	c3                   	ret    
c001dcbf:	b0 01                	mov    al,0x1
c001dcc1:	83 c4 08             	add    esp,0x8
c001dcc4:	5b                   	pop    ebx
c001dcc5:	c3                   	ret    
c001dcc6:	c7 05 20 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f420,0x0
c001dcd0:	e8 d0 fe ff ff       	call   c001dba5 <schedule()>
c001dcd5:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001dcda:	48                   	dec    eax
c001dcdb:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001dce0:	85 c0                	test   eax,eax
c001dce2:	75 90                	jne    c001dc74 <Semaphore::tryAcquire()+0x4a>
c001dce4:	eb 95                	jmp    c001dc7b <Semaphore::tryAcquire()+0x51>

c001dce6 <Semaphore::assertLocked(char const*)>:
c001dce6:	83 ec 0c             	sub    esp,0xc
c001dce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dced:	fa                   	cli    
c001dcee:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001dcf4:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c001dcf9:	8d 48 01             	lea    ecx,[eax+0x1]
c001dcfc:	89 0d 24 f4 02 c0    	mov    DWORD PTR ds:0xc002f424,ecx
c001dd02:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001dd04:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001dd07:	7c 24                	jl     c001dd2d <Semaphore::assertLocked(char const*)+0x47>
c001dd09:	a3 24 f4 02 c0       	mov    ds:0xc002f424,eax
c001dd0e:	85 c0                	test   eax,eax
c001dd10:	75 09                	jne    c001dd1b <Semaphore::assertLocked(char const*)+0x35>
c001dd12:	a1 20 f4 02 c0       	mov    eax,ds:0xc002f420
c001dd17:	85 c0                	test   eax,eax
c001dd19:	75 29                	jne    c001dd44 <Semaphore::assertLocked(char const*)+0x5e>
c001dd1b:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001dd20:	48                   	dec    eax
c001dd21:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001dd26:	75 01                	jne    c001dd29 <Semaphore::assertLocked(char const*)+0x43>
c001dd28:	fb                   	sti    
c001dd29:	83 c4 0c             	add    esp,0xc
c001dd2c:	c3                   	ret    
c001dd2d:	83 ec 0c             	sub    esp,0xc
c001dd30:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001dd34:	e8 da c2 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001dd39:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c001dd3e:	83 c4 10             	add    esp,0x10
c001dd41:	48                   	dec    eax
c001dd42:	eb c5                	jmp    c001dd09 <Semaphore::assertLocked(char const*)+0x23>
c001dd44:	c7 05 20 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f420,0x0
c001dd4e:	e8 52 fe ff ff       	call   c001dba5 <schedule()>
c001dd53:	eb c6                	jmp    c001dd1b <Semaphore::assertLocked(char const*)+0x35>

c001dd55 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001dd55:	83 ec 0c             	sub    esp,0xc
c001dd58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd61:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dd64:	e8 3c fe ff ff       	call   c001dba5 <schedule()>
c001dd69:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001dd6e:	48                   	dec    eax
c001dd6f:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001dd74:	75 01                	jne    c001dd77 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001dd76:	fb                   	sti    
c001dd77:	83 c4 0c             	add    esp,0xc
c001dd7a:	c3                   	ret    

c001dd7b <blockTask(TaskState)>:
c001dd7b:	83 ec 0c             	sub    esp,0xc
c001dd7e:	fa                   	cli    
c001dd7f:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001dd85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd8e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dd91:	e8 0f fe ff ff       	call   c001dba5 <schedule()>
c001dd96:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001dd9b:	48                   	dec    eax
c001dd9c:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001dda1:	75 01                	jne    c001dda4 <blockTask(TaskState)+0x29>
c001dda3:	fb                   	sti    
c001dda4:	83 c4 0c             	add    esp,0xc
c001dda7:	c3                   	ret    

c001dda8 <waitTask(int, int*, int)>:
c001dda8:	83 ec 18             	sub    esp,0x18
c001ddab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddb0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ddb4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001ddb7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ddbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddc0:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001ddc3:	6a 07                	push   0x7
c001ddc5:	e8 b1 ff ff ff       	call   c001dd7b <blockTask(TaskState)>
c001ddca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddcf:	83 c4 10             	add    esp,0x10
c001ddd2:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001ddd5:	85 d2                	test   edx,edx
c001ddd7:	74 0a                	je     c001dde3 <waitTask(int, int*, int)+0x3b>
c001ddd9:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dddc:	89 02                	mov    DWORD PTR [edx],eax
c001ddde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dde3:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dde6:	83 c4 0c             	add    esp,0xc
c001dde9:	c3                   	ret    

c001ddea <nanoSleepUntil(unsigned long long)>:
c001ddea:	83 ec 0c             	sub    esp,0xc
c001dded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddf1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ddf5:	3b 05 90 e5 02 c0    	cmp    eax,DWORD PTR ds:0xc002e590
c001ddfb:	89 d1                	mov    ecx,edx
c001ddfd:	1b 0d 94 e5 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e594
c001de03:	73 04                	jae    c001de09 <nanoSleepUntil(unsigned long long)+0x1f>
c001de05:	83 c4 0c             	add    esp,0xc
c001de08:	c3                   	ret    
c001de09:	fa                   	cli    
c001de0a:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001de10:	83 ec 08             	sub    esp,0x8
c001de13:	ff 05 24 f4 02 c0    	inc    DWORD PTR ds:0xc002f424
c001de19:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001de1f:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001de22:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001de25:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001de2b:	68 38 f4 02 c0       	push   0xc002f438
c001de30:	e8 bb ad 00 00       	call   c0028bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de35:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001de3c:	e8 3a ff ff ff       	call   c001dd7b <blockTask(TaskState)>
c001de41:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c001de46:	83 c4 10             	add    esp,0x10
c001de49:	48                   	dec    eax
c001de4a:	a3 24 f4 02 c0       	mov    ds:0xc002f424,eax
c001de4f:	85 c0                	test   eax,eax
c001de51:	75 09                	jne    c001de5c <nanoSleepUntil(unsigned long long)+0x72>
c001de53:	a1 20 f4 02 c0       	mov    eax,ds:0xc002f420
c001de58:	85 c0                	test   eax,eax
c001de5a:	75 12                	jne    c001de6e <nanoSleepUntil(unsigned long long)+0x84>
c001de5c:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001de61:	48                   	dec    eax
c001de62:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001de67:	75 9c                	jne    c001de05 <nanoSleepUntil(unsigned long long)+0x1b>
c001de69:	fb                   	sti    
c001de6a:	83 c4 0c             	add    esp,0xc
c001de6d:	c3                   	ret    
c001de6e:	c7 05 20 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f420,0x0
c001de78:	e8 28 fd ff ff       	call   c001dba5 <schedule()>
c001de7d:	eb dd                	jmp    c001de5c <nanoSleepUntil(unsigned long long)+0x72>

c001de7f <nanoSleep(unsigned long long)>:
c001de7f:	a1 90 e5 02 c0       	mov    eax,ds:0xc002e590
c001de84:	8b 15 94 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e594
c001de8a:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001de8e:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001de92:	e9 53 ff ff ff       	jmp    c001ddea <nanoSleepUntil(unsigned long long)>

c001de97 <sleep(unsigned long long)>:
c001de97:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001de9f:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dea4:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dea8:	01 ca                	add    edx,ecx
c001deaa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001deae:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001deb2:	eb cb                	jmp    c001de7f <nanoSleep(unsigned long long)>

c001deb4 <Semaphore::acquire()>:
c001deb4:	83 ec 0c             	sub    esp,0xc
c001deb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001debb:	fa                   	cli    
c001debc:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c001dec1:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001dec7:	8d 48 01             	lea    ecx,[eax+0x1]
c001deca:	89 0d 24 f4 02 c0    	mov    DWORD PTR ds:0xc002f424,ecx
c001ded0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ded3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001ded5:	7d 28                	jge    c001deff <Semaphore::acquire()+0x4b>
c001ded7:	41                   	inc    ecx
c001ded8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dedb:	a3 24 f4 02 c0       	mov    ds:0xc002f424,eax
c001dee0:	85 c0                	test   eax,eax
c001dee2:	75 09                	jne    c001deed <Semaphore::acquire()+0x39>
c001dee4:	a1 20 f4 02 c0       	mov    eax,ds:0xc002f420
c001dee9:	85 c0                	test   eax,eax
c001deeb:	75 5d                	jne    c001df4a <Semaphore::acquire()+0x96>
c001deed:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001def2:	48                   	dec    eax
c001def3:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001def8:	75 01                	jne    c001defb <Semaphore::acquire()+0x47>
c001defa:	fb                   	sti    
c001defb:	83 c4 0c             	add    esp,0xc
c001defe:	c3                   	ret    
c001deff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df04:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001df0b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001df0e:	85 c9                	test   ecx,ecx
c001df10:	74 49                	je     c001df5b <Semaphore::acquire()+0xa7>
c001df12:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001df15:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001df1b:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001df1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df23:	83 ec 0c             	sub    esp,0xc
c001df26:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001df29:	68 54 c1 02 c0       	push   0xc002c154
c001df2e:	e8 f4 48 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001df33:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001df3a:	e8 3c fe ff ff       	call   c001dd7b <blockTask(TaskState)>
c001df3f:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c001df44:	83 c4 10             	add    esp,0x10
c001df47:	48                   	dec    eax
c001df48:	eb 91                	jmp    c001dedb <Semaphore::acquire()+0x27>
c001df4a:	c7 05 20 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f420,0x0
c001df54:	e8 4c fc ff ff       	call   c001dba5 <schedule()>
c001df59:	eb 92                	jmp    c001deed <Semaphore::acquire()+0x39>
c001df5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df60:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001df63:	eb b9                	jmp    c001df1e <Semaphore::acquire()+0x6a>

c001df65 <taskReturned>:
c001df65:	83 ec 18             	sub    esp,0x18
c001df68:	68 74 c1 02 c0       	push   0xc002c174
c001df6d:	e8 a1 c0 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001df72:	83 c4 10             	add    esp,0x10
c001df75:	83 ec 0c             	sub    esp,0xc
c001df78:	6a 02                	push   0x2
c001df7a:	e8 fc fd ff ff       	call   c001dd7b <blockTask(TaskState)>
c001df7f:	fa                   	cli    
c001df80:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001df86:	e8 1a fc ff ff       	call   c001dba5 <schedule()>
c001df8b:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001df90:	83 c4 10             	add    esp,0x10
c001df93:	48                   	dec    eax
c001df94:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001df99:	85 c0                	test   eax,eax
c001df9b:	75 d8                	jne    c001df75 <taskReturned+0x10>
c001df9d:	fb                   	sti    
c001df9e:	eb d5                	jmp    c001df75 <taskReturned+0x10>

c001dfa0 <Thr::processFromPID(int)>:
c001dfa0:	57                   	push   edi
c001dfa1:	56                   	push   esi
c001dfa2:	53                   	push   ebx
c001dfa3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dfa7:	fa                   	cli    
c001dfa8:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001dfae:	83 ec 0c             	sub    esp,0xc
c001dfb1:	68 44 f4 02 c0       	push   0xc002f444
c001dfb6:	e8 7f ab 00 00       	call   c0028b3a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dfbb:	83 c4 10             	add    esp,0x10
c001dfbe:	89 c7                	mov    edi,eax
c001dfc0:	eb 14                	jmp    c001dfd6 <Thr::processFromPID(int)+0x36>
c001dfc2:	83 ec 0c             	sub    esp,0xc
c001dfc5:	68 44 f4 02 c0       	push   0xc002f444
c001dfca:	e8 6b ab 00 00       	call   c0028b3a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dfcf:	83 c4 10             	add    esp,0x10
c001dfd2:	39 f8                	cmp    eax,edi
c001dfd4:	74 49                	je     c001e01f <Thr::processFromPID(int)+0x7f>
c001dfd6:	83 ec 0c             	sub    esp,0xc
c001dfd9:	68 44 f4 02 c0       	push   0xc002f444
c001dfde:	e8 57 ab 00 00       	call   c0028b3a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dfe3:	c7 04 24 44 f4 02 c0 	mov    DWORD PTR [esp],0xc002f444
c001dfea:	89 c3                	mov    ebx,eax
c001dfec:	e8 51 ab 00 00       	call   c0028b42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dff1:	58                   	pop    eax
c001dff2:	5a                   	pop    edx
c001dff3:	53                   	push   ebx
c001dff4:	68 44 f4 02 c0       	push   0xc002f444
c001dff9:	e8 f2 ab 00 00       	call   c0028bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dffe:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e001:	83 c4 10             	add    esp,0x10
c001e004:	39 30                	cmp    DWORD PTR [eax],esi
c001e006:	75 ba                	jne    c001dfc2 <Thr::processFromPID(int)+0x22>
c001e008:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001e00d:	48                   	dec    eax
c001e00e:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001e013:	74 07                	je     c001e01c <Thr::processFromPID(int)+0x7c>
c001e015:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e018:	5b                   	pop    ebx
c001e019:	5e                   	pop    esi
c001e01a:	5f                   	pop    edi
c001e01b:	c3                   	ret    
c001e01c:	fb                   	sti    
c001e01d:	eb f6                	jmp    c001e015 <Thr::processFromPID(int)+0x75>
c001e01f:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001e024:	48                   	dec    eax
c001e025:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001e02a:	75 05                	jne    c001e031 <Thr::processFromPID(int)+0x91>
c001e02c:	fb                   	sti    
c001e02d:	5b                   	pop    ebx
c001e02e:	5e                   	pop    esi
c001e02f:	5f                   	pop    edi
c001e030:	c3                   	ret    
c001e031:	5b                   	pop    ebx
c001e032:	31 c0                	xor    eax,eax
c001e034:	5e                   	pop    esi
c001e035:	5f                   	pop    edi
c001e036:	c3                   	ret    

c001e037 <unblockTask(ThreadControlBlock*)>:
c001e037:	53                   	push   ebx
c001e038:	83 ec 08             	sub    esp,0x8
c001e03b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e03f:	fa                   	cli    
c001e040:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001e046:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e049:	85 c0                	test   eax,eax
c001e04b:	74 5a                	je     c001e0a7 <unblockTask(ThreadControlBlock*)+0x70>
c001e04d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e050:	48                   	dec    eax
c001e051:	74 31                	je     c001e084 <unblockTask(ThreadControlBlock*)+0x4d>
c001e053:	83 ec 0c             	sub    esp,0xc
c001e056:	68 44 f4 02 c0       	push   0xc002f444
c001e05b:	e8 da aa 00 00       	call   c0028b3a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e060:	83 c4 10             	add    esp,0x10
c001e063:	85 c0                	test   eax,eax
c001e065:	75 17                	jne    c001e07e <unblockTask(ThreadControlBlock*)+0x47>
c001e067:	eb 50                	jmp    c001e0b9 <unblockTask(ThreadControlBlock*)+0x82>
c001e069:	83 ec 08             	sub    esp,0x8
c001e06c:	50                   	push   eax
c001e06d:	68 44 f4 02 c0       	push   0xc002f444
c001e072:	e8 4b ae 00 00       	call   c0028ec2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e077:	83 c4 10             	add    esp,0x10
c001e07a:	85 c0                	test   eax,eax
c001e07c:	74 3b                	je     c001e0b9 <unblockTask(ThreadControlBlock*)+0x82>
c001e07e:	39 c3                	cmp    ebx,eax
c001e080:	75 e7                	jne    c001e069 <unblockTask(ThreadControlBlock*)+0x32>
c001e082:	eb 10                	jmp    c001e094 <unblockTask(ThreadControlBlock*)+0x5d>
c001e084:	83 ec 0c             	sub    esp,0xc
c001e087:	68 f6 c0 02 c0       	push   0xc002c0f6
c001e08c:	e8 96 47 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001e091:	83 c4 10             	add    esp,0x10
c001e094:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001e099:	48                   	dec    eax
c001e09a:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001e09f:	75 01                	jne    c001e0a2 <unblockTask(ThreadControlBlock*)+0x6b>
c001e0a1:	fb                   	sti    
c001e0a2:	83 c4 08             	add    esp,0x8
c001e0a5:	5b                   	pop    ebx
c001e0a6:	c3                   	ret    
c001e0a7:	83 ec 0c             	sub    esp,0xc
c001e0aa:	68 df c0 02 c0       	push   0xc002c0df
c001e0af:	e8 73 47 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001e0b4:	83 c4 10             	add    esp,0x10
c001e0b7:	eb db                	jmp    c001e094 <unblockTask(ThreadControlBlock*)+0x5d>
c001e0b9:	83 ec 08             	sub    esp,0x8
c001e0bc:	53                   	push   ebx
c001e0bd:	68 44 f4 02 c0       	push   0xc002f444
c001e0c2:	e8 29 ab 00 00       	call   c0028bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0c7:	83 c4 10             	add    esp,0x10
c001e0ca:	eb c8                	jmp    c001e094 <unblockTask(ThreadControlBlock*)+0x5d>

c001e0cc <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e0cc:	55                   	push   ebp
c001e0cd:	57                   	push   edi
c001e0ce:	56                   	push   esi
c001e0cf:	53                   	push   ebx
c001e0d0:	83 ec 1c             	sub    esp,0x1c
c001e0d3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e0d7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e0da:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e0e0:	85 ff                	test   edi,edi
c001e0e2:	7e 20                	jle    c001e104 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e0e4:	31 f6                	xor    esi,esi
c001e0e6:	83 ec 0c             	sub    esp,0xc
c001e0e9:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e0f0:	46                   	inc    esi
c001e0f1:	e8 e9 16 ff ff       	call   c000f7df <free>
c001e0f6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e0f9:	83 c4 10             	add    esp,0x10
c001e0fc:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e102:	7f e2                	jg     c001e0e6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e104:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e10e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e113:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e116:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e119:	d3 c0                	rol    eax,cl
c001e11b:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e122:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e125:	89 f7                	mov    edi,esi
c001e127:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e12f:	0f 85 64 01 00 00    	jne    c001e299 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e135:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e13b:	85 ed                	test   ebp,ebp
c001e13d:	74 1b                	je     c001e15a <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e13f:	83 ec 0c             	sub    esp,0xc
c001e142:	55                   	push   ebp
c001e143:	e8 70 bc ff ff       	call   c0019db8 <EnvVarContainer::~EnvVarContainer()>
c001e148:	59                   	pop    ecx
c001e149:	5e                   	pop    esi
c001e14a:	6a 0c                	push   0xc
c001e14c:	55                   	push   ebp
c001e14d:	e8 fd 45 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c001e152:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e155:	83 c4 10             	add    esp,0x10
c001e158:	89 f7                	mov    edi,esi
c001e15a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e160:	85 c0                	test   eax,eax
c001e162:	0f 84 aa 00 00 00    	je     c001e212 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e168:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e16b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e16f:	31 c9                	xor    ecx,ecx
c001e171:	eb 10                	jmp    c001e183 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e173:	41                   	inc    ecx
c001e174:	83 f9 10             	cmp    ecx,0x10
c001e177:	0f 84 95 00 00 00    	je     c001e212 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e17d:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e183:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e18a:	d3 fa                	sar    edx,cl
c001e18c:	83 e2 01             	and    edx,0x1
c001e18f:	74 e2                	je     c001e173 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e191:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e194:	01 ca                	add    edx,ecx
c001e196:	89 d5                	mov    ebp,edx
c001e198:	c1 e5 05             	shl    ebp,0x5
c001e19b:	01 ea                	add    edx,ebp
c001e19d:	01 d0                	add    eax,edx
c001e19f:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e1a5:	83 fd 07             	cmp    ebp,0x7
c001e1a8:	75 c9                	jne    c001e173 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e1aa:	05 40 02 00 00       	add    eax,0x240
c001e1af:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e1b2:	83 fd ff             	cmp    ebp,0xffffffff
c001e1b5:	0f 8c e6 00 00 00    	jl     c001e2a1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e1bb:	0f 84 97 01 00 00    	je     c001e358 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e1c1:	85 ed                	test   ebp,ebp
c001e1c3:	0f 84 7e 01 00 00    	je     c001e347 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e1c9:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e1cb:	75 a6                	jne    c001e173 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e1cd:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e1d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e1d7:	01 d0                	add    eax,edx
c001e1d9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e1dd:	83 ec 0c             	sub    esp,0xc
c001e1e0:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e1e6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1e9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e1ef:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e1f6:	50                   	push   eax
c001e1f7:	e8 3b fe ff ff       	call   c001e037 <unblockTask(ThreadControlBlock*)>
c001e1fc:	83 c4 10             	add    esp,0x10
c001e1ff:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e202:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e206:	89 f7                	mov    edi,esi
c001e208:	41                   	inc    ecx
c001e209:	83 f9 10             	cmp    ecx,0x10
c001e20c:	0f 85 6b ff ff ff    	jne    c001e17d <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e212:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e218:	85 c0                	test   eax,eax
c001e21a:	74 5d                	je     c001e279 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e21c:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e222:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e228:	74 4f                	je     c001e279 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e22a:	83 ec 0c             	sub    esp,0xc
c001e22d:	68 44 f4 02 c0       	push   0xc002f444
c001e232:	e8 03 a9 00 00       	call   c0028b3a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e237:	c7 04 24 44 f4 02 c0 	mov    DWORD PTR [esp],0xc002f444
c001e23e:	89 c7                	mov    edi,eax
c001e240:	e8 d9 a8 00 00       	call   c0028b1e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e245:	83 c4 10             	add    esp,0x10
c001e248:	84 c0                	test   al,al
c001e24a:	0f 84 c2 00 00 00    	je     c001e312 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e250:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e253:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e259:	85 d2                	test   edx,edx
c001e25b:	74 0f                	je     c001e26c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e25d:	83 ec 0c             	sub    esp,0xc
c001e260:	8b 02                	mov    eax,DWORD PTR [edx]
c001e262:	52                   	push   edx
c001e263:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e266:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e269:	83 c4 10             	add    esp,0x10
c001e26c:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e276:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e279:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e27f:	85 db                	test   ebx,ebx
c001e281:	74 16                	je     c001e299 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e283:	83 ec 0c             	sub    esp,0xc
c001e286:	53                   	push   ebx
c001e287:	e8 f4 36 ff ff       	call   c0011980 <VAS::~VAS()>
c001e28c:	58                   	pop    eax
c001e28d:	5a                   	pop    edx
c001e28e:	6a 14                	push   0x14
c001e290:	53                   	push   ebx
c001e291:	e8 b9 44 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c001e296:	83 c4 10             	add    esp,0x10
c001e299:	83 c4 1c             	add    esp,0x1c
c001e29c:	5b                   	pop    ebx
c001e29d:	5e                   	pop    esi
c001e29e:	5f                   	pop    edi
c001e29f:	5d                   	pop    ebp
c001e2a0:	c3                   	ret    
c001e2a1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e2a5:	83 ec 0c             	sub    esp,0xc
c001e2a8:	68 a8 c1 02 c0       	push   0xc002c1a8
c001e2ad:	e8 61 bd ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001e2b2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e2b5:	83 c4 10             	add    esp,0x10
c001e2b8:	89 f7                	mov    edi,esi
c001e2ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e2be:	e9 b0 fe ff ff       	jmp    c001e173 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e2c3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e2c9:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e2cf:	75 1c                	jne    c001e2ed <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e2d1:	83 ec 0c             	sub    esp,0xc
c001e2d4:	68 10 c2 02 c0       	push   0xc002c210
c001e2d9:	e8 49 45 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001e2de:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e2e5:	e8 91 fa ff ff       	call   c001dd7b <blockTask(TaskState)>
c001e2ea:	83 c4 10             	add    esp,0x10
c001e2ed:	83 ec 08             	sub    esp,0x8
c001e2f0:	56                   	push   esi
c001e2f1:	68 44 f4 02 c0       	push   0xc002f444
c001e2f6:	e8 f5 a8 00 00       	call   c0028bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2fb:	c7 04 24 44 f4 02 c0 	mov    DWORD PTR [esp],0xc002f444
c001e302:	e8 33 a8 00 00       	call   c0028b3a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e307:	83 c4 10             	add    esp,0x10
c001e30a:	39 f8                	cmp    eax,edi
c001e30c:	0f 84 3e ff ff ff    	je     c001e250 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e312:	83 ec 0c             	sub    esp,0xc
c001e315:	68 44 f4 02 c0       	push   0xc002f444
c001e31a:	e8 1b a8 00 00       	call   c0028b3a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e31f:	c7 04 24 44 f4 02 c0 	mov    DWORD PTR [esp],0xc002f444
c001e326:	89 c6                	mov    esi,eax
c001e328:	e8 15 a8 00 00       	call   c0028b42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e32d:	83 c4 10             	add    esp,0x10
c001e330:	39 f3                	cmp    ebx,esi
c001e332:	74 b9                	je     c001e2ed <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e334:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e337:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e33a:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e340:	75 ab                	jne    c001e2ed <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e342:	e9 7c ff ff ff       	jmp    c001e2c3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e347:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e34b:	83 ec 0c             	sub    esp,0xc
c001e34e:	68 dc c1 02 c0       	push   0xc002c1dc
c001e353:	e9 55 ff ff ff       	jmp    c001e2ad <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e358:	8b 36                	mov    esi,DWORD PTR [esi]
c001e35a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e35e:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e361:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e364:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e36a:	01 d7                	add    edi,edx
c001e36c:	89 f8                	mov    eax,edi
c001e36e:	e9 66 fe ff ff       	jmp    c001e1d9 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e373 <cleanerTaskFunction(void*)>:
c001e373:	53                   	push   ebx
c001e374:	83 ec 08             	sub    esp,0x8
c001e377:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001e37c:	48                   	dec    eax
c001e37d:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001e382:	75 01                	jne    c001e385 <cleanerTaskFunction(void*)+0x12>
c001e384:	fb                   	sti    
c001e385:	fa                   	cli    
c001e386:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001e38b:	80 3d 0c f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f40c,0x0
c001e392:	8d 50 01             	lea    edx,[eax+0x1]
c001e395:	89 15 28 f4 02 c0    	mov    DWORD PTR ds:0xc002f428,edx
c001e39b:	0f 84 a1 00 00 00    	je     c001e442 <cleanerTaskFunction(void*)+0xcf>
c001e3a1:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001e3a6:	85 c0                	test   eax,eax
c001e3a8:	75 01                	jne    c001e3ab <cleanerTaskFunction(void*)+0x38>
c001e3aa:	fb                   	sti    
c001e3ab:	c6 05 0c f4 02 c0 00 	mov    BYTE PTR ds:0xc002f40c,0x0
c001e3b2:	fa                   	cli    
c001e3b3:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001e3b9:	ff 05 24 f4 02 c0    	inc    DWORD PTR ds:0xc002f424
c001e3bf:	fa                   	cli    
c001e3c0:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001e3c6:	eb 26                	jmp    c001e3ee <cleanerTaskFunction(void*)+0x7b>
c001e3c8:	83 ec 0c             	sub    esp,0xc
c001e3cb:	68 2c f4 02 c0       	push   0xc002f42c
c001e3d0:	e8 65 a7 00 00       	call   c0028b3a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e3d5:	c7 04 24 2c f4 02 c0 	mov    DWORD PTR [esp],0xc002f42c
c001e3dc:	89 c3                	mov    ebx,eax
c001e3de:	e8 5f a7 00 00       	call   c0028b42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e3e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e3e6:	e8 e1 fc ff ff       	call   c001e0cc <cleanupTerminatedTask(ThreadControlBlock*)>
c001e3eb:	83 c4 10             	add    esp,0x10
c001e3ee:	83 ec 0c             	sub    esp,0xc
c001e3f1:	68 2c f4 02 c0       	push   0xc002f42c
c001e3f6:	e8 23 a7 00 00       	call   c0028b1e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e3fb:	83 c4 10             	add    esp,0x10
c001e3fe:	84 c0                	test   al,al
c001e400:	74 c6                	je     c001e3c8 <cleanerTaskFunction(void*)+0x55>
c001e402:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001e407:	48                   	dec    eax
c001e408:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001e40d:	75 01                	jne    c001e410 <cleanerTaskFunction(void*)+0x9d>
c001e40f:	fb                   	sti    
c001e410:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c001e415:	48                   	dec    eax
c001e416:	a3 24 f4 02 c0       	mov    ds:0xc002f424,eax
c001e41b:	0f 85 56 ff ff ff    	jne    c001e377 <cleanerTaskFunction(void*)+0x4>
c001e421:	a1 20 f4 02 c0       	mov    eax,ds:0xc002f420
c001e426:	85 c0                	test   eax,eax
c001e428:	0f 84 49 ff ff ff    	je     c001e377 <cleanerTaskFunction(void*)+0x4>
c001e42e:	c7 05 20 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f420,0x0
c001e438:	e8 68 f7 ff ff       	call   c001dba5 <schedule()>
c001e43d:	e9 35 ff ff ff       	jmp    c001e377 <cleanerTaskFunction(void*)+0x4>
c001e442:	83 ec 0c             	sub    esp,0xc
c001e445:	6a 02                	push   0x2
c001e447:	e8 09 f9 ff ff       	call   c001dd55 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e44c:	83 c4 10             	add    esp,0x10
c001e44f:	e9 57 ff ff ff       	jmp    c001e3ab <cleanerTaskFunction(void*)+0x38>

c001e454 <terminateTask(int)>:
c001e454:	83 ec 14             	sub    esp,0x14
c001e457:	fa                   	cli    
c001e458:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001e45e:	ff 05 24 f4 02 c0    	inc    DWORD PTR ds:0xc002f424
c001e464:	fa                   	cli    
c001e465:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001e46b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e46f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e474:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e477:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e47c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e47f:	50                   	push   eax
c001e480:	68 2c f4 02 c0       	push   0xc002f42c
c001e485:	e8 66 a7 00 00       	call   c0028bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e48a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e48f:	83 c4 10             	add    esp,0x10
c001e492:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e499:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001e49e:	85 c0                	test   eax,eax
c001e4a0:	74 53                	je     c001e4f5 <terminateTask(int)+0xa1>
c001e4a2:	83 ec 0c             	sub    esp,0xc
c001e4a5:	c6 05 0c f4 02 c0 01 	mov    BYTE PTR ds:0xc002f40c,0x1
c001e4ac:	50                   	push   eax
c001e4ad:	e8 85 fb ff ff       	call   c001e037 <unblockTask(ThreadControlBlock*)>
c001e4b2:	83 c4 10             	add    esp,0x10
c001e4b5:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001e4ba:	48                   	dec    eax
c001e4bb:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001e4c0:	75 01                	jne    c001e4c3 <terminateTask(int)+0x6f>
c001e4c2:	fb                   	sti    
c001e4c3:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c001e4c8:	48                   	dec    eax
c001e4c9:	a3 24 f4 02 c0       	mov    ds:0xc002f424,eax
c001e4ce:	75 09                	jne    c001e4d9 <terminateTask(int)+0x85>
c001e4d0:	83 3d 20 f4 02 c0 00 	cmp    DWORD PTR ds:0xc002f420,0x0
c001e4d7:	75 2e                	jne    c001e507 <terminateTask(int)+0xb3>
c001e4d9:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001e4de:	48                   	dec    eax
c001e4df:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001e4e4:	75 01                	jne    c001e4e7 <terminateTask(int)+0x93>
c001e4e6:	fb                   	sti    
c001e4e7:	fa                   	cli    
c001e4e8:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001e4ee:	e8 b2 f6 ff ff       	call   c001dba5 <schedule()>
c001e4f3:	eb e4                	jmp    c001e4d9 <terminateTask(int)+0x85>
c001e4f5:	83 ec 0c             	sub    esp,0xc
c001e4f8:	68 0d c1 02 c0       	push   0xc002c10d
c001e4fd:	e8 25 43 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001e502:	83 c4 10             	add    esp,0x10
c001e505:	eb ae                	jmp    c001e4b5 <terminateTask(int)+0x61>
c001e507:	c7 05 20 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f420,0x0
c001e511:	eb db                	jmp    c001e4ee <terminateTask(int)+0x9a>

c001e513 <Thr::terminateFromIRQ(int)>:
c001e513:	83 ec 18             	sub    esp,0x18
c001e516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e51a:	e8 35 ff ff ff       	call   c001e454 <terminateTask(int)>
c001e51f:	90                   	nop

c001e520 <Semaphore::release()>:
c001e520:	83 ec 0c             	sub    esp,0xc
c001e523:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e527:	fa                   	cli    
c001e528:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c001e52d:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001e533:	8d 48 01             	lea    ecx,[eax+0x1]
c001e536:	89 0d 24 f4 02 c0    	mov    DWORD PTR ds:0xc002f424,ecx
c001e53c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e53f:	85 c9                	test   ecx,ecx
c001e541:	74 3c                	je     c001e57f <Semaphore::release()+0x5f>
c001e543:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e546:	83 ec 0c             	sub    esp,0xc
c001e549:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e54c:	51                   	push   ecx
c001e54d:	e8 e5 fa ff ff       	call   c001e037 <unblockTask(ThreadControlBlock*)>
c001e552:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c001e557:	83 c4 10             	add    esp,0x10
c001e55a:	48                   	dec    eax
c001e55b:	a3 24 f4 02 c0       	mov    ds:0xc002f424,eax
c001e560:	85 c0                	test   eax,eax
c001e562:	75 09                	jne    c001e56d <Semaphore::release()+0x4d>
c001e564:	a1 20 f4 02 c0       	mov    eax,ds:0xc002f420
c001e569:	85 c0                	test   eax,eax
c001e56b:	75 17                	jne    c001e584 <Semaphore::release()+0x64>
c001e56d:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001e572:	48                   	dec    eax
c001e573:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001e578:	75 01                	jne    c001e57b <Semaphore::release()+0x5b>
c001e57a:	fb                   	sti    
c001e57b:	83 c4 0c             	add    esp,0xc
c001e57e:	c3                   	ret    
c001e57f:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e582:	eb d7                	jmp    c001e55b <Semaphore::release()+0x3b>
c001e584:	c7 05 20 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f420,0x0
c001e58e:	e8 12 f6 ff ff       	call   c001dba5 <schedule()>
c001e593:	eb d8                	jmp    c001e56d <Semaphore::release()+0x4d>

c001e595 <__static_initialization_and_destruction_0(int, int)>:
c001e595:	83 ec 0c             	sub    esp,0xc
c001e598:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e59d:	0f 85 88 00 00 00    	jne    c001e62b <__static_initialization_and_destruction_0(int, int)+0x96>
c001e5a3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e5ab:	75 7e                	jne    c001e62b <__static_initialization_and_destruction_0(int, int)+0x96>
c001e5ad:	83 ec 0c             	sub    esp,0xc
c001e5b0:	68 44 f4 02 c0       	push   0xc002f444
c001e5b5:	e8 c6 a8 00 00       	call   c0028e80 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e5ba:	83 c4 10             	add    esp,0x10
c001e5bd:	83 ec 04             	sub    esp,0x4
c001e5c0:	68 f0 cc 02 c0       	push   0xc002ccf0
c001e5c5:	68 44 f4 02 c0       	push   0xc002f444
c001e5ca:	68 34 8e 02 c0       	push   0xc0028e34
c001e5cf:	e8 f5 40 ff ff       	call   c00126c9 <__cxa_atexit>
c001e5d4:	83 c4 10             	add    esp,0x10
c001e5d7:	83 ec 0c             	sub    esp,0xc
c001e5da:	68 38 f4 02 c0       	push   0xc002f438
c001e5df:	e8 9c a8 00 00       	call   c0028e80 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e5e4:	83 c4 10             	add    esp,0x10
c001e5e7:	83 ec 04             	sub    esp,0x4
c001e5ea:	68 f0 cc 02 c0       	push   0xc002ccf0
c001e5ef:	68 38 f4 02 c0       	push   0xc002f438
c001e5f4:	68 34 8e 02 c0       	push   0xc0028e34
c001e5f9:	e8 cb 40 ff ff       	call   c00126c9 <__cxa_atexit>
c001e5fe:	83 c4 10             	add    esp,0x10
c001e601:	83 ec 0c             	sub    esp,0xc
c001e604:	68 2c f4 02 c0       	push   0xc002f42c
c001e609:	e8 72 a8 00 00       	call   c0028e80 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e60e:	83 c4 10             	add    esp,0x10
c001e611:	83 ec 04             	sub    esp,0x4
c001e614:	68 f0 cc 02 c0       	push   0xc002ccf0
c001e619:	68 2c f4 02 c0       	push   0xc002f42c
c001e61e:	68 34 8e 02 c0       	push   0xc0028e34
c001e623:	e8 a1 40 ff ff       	call   c00126c9 <__cxa_atexit>
c001e628:	83 c4 10             	add    esp,0x10
c001e62b:	90                   	nop
c001e62c:	83 c4 0c             	add    esp,0xc
c001e62f:	c3                   	ret    

c001e630 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e630:	83 ec 0c             	sub    esp,0xc
c001e633:	83 ec 08             	sub    esp,0x8
c001e636:	68 ff ff 00 00       	push   0xffff
c001e63b:	6a 01                	push   0x1
c001e63d:	e8 53 ff ff ff       	call   c001e595 <__static_initialization_and_destruction_0(int, int)>
c001e642:	83 c4 10             	add    esp,0x10
c001e645:	83 c4 0c             	add    esp,0xc
c001e648:	c3                   	ret    

c001e649 <Vm::inbv(unsigned short)>:
c001e649:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e64d:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e652:	75 06                	jne    c001e65a <Vm::inbv(unsigned short)+0x11>
c001e654:	a0 8c f4 02 c0       	mov    al,ds:0xc002f48c
c001e659:	c3                   	ret    
c001e65a:	ec                   	in     al,dx
c001e65b:	c3                   	ret    

c001e65c <Vm::outbv(unsigned short, unsigned char)>:
c001e65c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e660:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e664:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e669:	75 25                	jne    c001e690 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e66b:	8b 0d 8c f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f48c
c001e671:	8d 51 01             	lea    edx,[ecx+0x1]
c001e674:	88 81 a0 f4 02 c0    	mov    BYTE PTR [ecx-0x3ffd0b60],al
c001e67a:	89 15 8c f4 02 c0    	mov    DWORD PTR ds:0xc002f48c,edx
c001e680:	83 fa 20             	cmp    edx,0x20
c001e683:	75 0c                	jne    c001e691 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e685:	c7 05 8c f4 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002f48c,0x1f
c001e68f:	c3                   	ret    
c001e690:	ee                   	out    dx,al
c001e691:	c3                   	ret    

c001e692 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e692:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e697:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e69c:	c1 e0 04             	shl    eax,0x4
c001e69f:	01 d0                	add    eax,edx
c001e6a1:	c3                   	ret    

c001e6a2 <Vm::getSegment(unsigned int)>:
c001e6a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6a6:	c1 e8 10             	shr    eax,0x10
c001e6a9:	c3                   	ret    

c001e6aa <Vm::getOffset(unsigned int)>:
c001e6aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6ae:	c3                   	ret    

c001e6af <Vm::mainloop2()>:
c001e6af:	83 ec 18             	sub    esp,0x18
c001e6b2:	fa                   	cli    
c001e6b3:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001e6b9:	6a 02                	push   0x2
c001e6bb:	c6 05 85 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f485,0x1
c001e6c2:	e8 8e f6 ff ff       	call   c001dd55 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e6c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6cc:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e6d0:	52                   	push   edx
c001e6d1:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e6d5:	52                   	push   edx
c001e6d6:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e6da:	52                   	push   edx
c001e6db:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e6df:	50                   	push   eax
c001e6e0:	e8 15 1c fe ff       	call   c00002fa <goToVM86>
c001e6e5:	83 c4 2c             	add    esp,0x2c
c001e6e8:	c3                   	ret    

c001e6e9 <Vm::mainVm8086Loop(void*)>:
c001e6e9:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001e6ee:	48                   	dec    eax
c001e6ef:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001e6f4:	75 01                	jne    c001e6f7 <Vm::mainVm8086Loop(void*)+0xe>
c001e6f6:	fb                   	sti    
c001e6f7:	eb b6                	jmp    c001e6af <Vm::mainloop2()>

c001e6f9 <Vm::mainloop3(unsigned long)>:
c001e6f9:	83 ec 18             	sub    esp,0x18
c001e6fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e700:	fa                   	cli    
c001e701:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001e707:	6a 02                	push   0x2
c001e709:	c6 05 84 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f484,0x1
c001e710:	a3 80 f4 02 c0       	mov    ds:0xc002f480,eax
c001e715:	e8 3b f6 ff ff       	call   c001dd55 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e71a:	83 c4 1c             	add    esp,0x1c
c001e71d:	eb 90                	jmp    c001e6af <Vm::mainloop2()>

c001e71f <Vm::initialise8086()>:
c001e71f:	83 ec 0c             	sub    esp,0xc
c001e722:	68 80 00 00 00       	push   0x80
c001e727:	6a 00                	push   0x0
c001e729:	68 e9 e6 01 c0       	push   0xc001e6e9
c001e72e:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c001e734:	e8 47 f2 ff ff       	call   c001d980 <Process::createThread(void (*)(void*), void*, int)>
c001e739:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e740:	a3 88 f4 02 c0       	mov    ds:0xc002f488,eax
c001e745:	68 00 01 00 00       	push   0x100
c001e74a:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001e74f:	6a 00                	push   0x0
c001e751:	6a 00                	push   0x0
c001e753:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e759:	e8 94 36 ff ff       	call   c0011df2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e75e:	83 c4 2c             	add    esp,0x2c
c001e761:	c3                   	ret    

c001e762 <Vm::finish8086()>:
c001e762:	53                   	push   ebx
c001e763:	83 ec 08             	sub    esp,0x8
c001e766:	fa                   	cli    
c001e767:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001e76d:	80 3d 84 f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f484,0x0
c001e774:	75 15                	jne    c001e78b <Vm::finish8086()+0x29>
c001e776:	e8 2a f4 ff ff       	call   c001dba5 <schedule()>
c001e77b:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001e780:	48                   	dec    eax
c001e781:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001e786:	75 de                	jne    c001e766 <Vm::finish8086()+0x4>
c001e788:	fb                   	sti    
c001e789:	eb db                	jmp    c001e766 <Vm::finish8086()+0x4>
c001e78b:	83 ec 0c             	sub    esp,0xc
c001e78e:	8b 1d 80 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f480
c001e794:	ff 35 88 f4 02 c0    	push   DWORD PTR ds:0xc002f488
c001e79a:	c6 05 84 f4 02 c0 00 	mov    BYTE PTR ds:0xc002f484,0x0
c001e7a1:	e8 91 f8 ff ff       	call   c001e037 <unblockTask(ThreadControlBlock*)>
c001e7a6:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001e7ab:	83 c4 10             	add    esp,0x10
c001e7ae:	8d 50 ff             	lea    edx,[eax-0x1]
c001e7b1:	89 15 28 f4 02 c0    	mov    DWORD PTR ds:0xc002f428,edx
c001e7b7:	85 d2                	test   edx,edx
c001e7b9:	75 01                	jne    c001e7bc <Vm::finish8086()+0x5a>
c001e7bb:	fb                   	sti    
c001e7bc:	89 d8                	mov    eax,ebx
c001e7be:	83 c4 08             	add    esp,0x8
c001e7c1:	5b                   	pop    ebx
c001e7c2:	c3                   	ret    

c001e7c3 <Vm::getOutput8086(unsigned char*)>:
c001e7c3:	57                   	push   edi
c001e7c4:	8b 0d 8c f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f48c
c001e7ca:	56                   	push   esi
c001e7cb:	be a0 f4 02 c0       	mov    esi,0xc002f4a0
c001e7d0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e7d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e7d6:	a1 8c f4 02 c0       	mov    eax,ds:0xc002f48c
c001e7db:	5e                   	pop    esi
c001e7dc:	c7 05 8c f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f48c,0x0
c001e7e6:	5f                   	pop    edi
c001e7e7:	c3                   	ret    

c001e7e8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e7e8:	55                   	push   ebp
c001e7e9:	57                   	push   edi
c001e7ea:	56                   	push   esi
c001e7eb:	53                   	push   ebx
c001e7ec:	83 ec 2c             	sub    esp,0x2c
c001e7ef:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e7f3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e7f7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e7fb:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e7ff:	fa                   	cli    
c001e800:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c001e806:	0f b6 35 85 f4 02 c0 	movzx  esi,BYTE PTR ds:0xc002f485
c001e80d:	89 f0                	mov    eax,esi
c001e80f:	84 c0                	test   al,al
c001e811:	75 1d                	jne    c001e830 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e813:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e817:	e8 89 f3 ff ff       	call   c001dba5 <schedule()>
c001e81c:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001e821:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e825:	48                   	dec    eax
c001e826:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001e82b:	75 d2                	jne    c001e7ff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e82d:	fb                   	sti    
c001e82e:	eb cf                	jmp    c001e7ff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e830:	a1 88 f4 02 c0       	mov    eax,ds:0xc002f488
c001e835:	c7 05 8c f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f48c,0x0
c001e83f:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e843:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e847:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e84b:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e84f:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e853:	50                   	push   eax
c001e854:	6a 20                	push   0x20
c001e856:	6a 00                	push   0x0
c001e858:	68 a0 f4 02 c0       	push   0xc002f4a0
c001e85d:	e8 ee 1e fe ff       	call   c0000750 <memset>
c001e862:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e869:	e8 61 0f ff ff       	call   c000f7cf <malloc>
c001e86e:	83 c4 0c             	add    esp,0xc
c001e871:	89 c3                	mov    ebx,eax
c001e873:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c001e879:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e87d:	50                   	push   eax
c001e87e:	e8 03 45 ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c001e883:	83 c4 10             	add    esp,0x10
c001e886:	85 db                	test   ebx,ebx
c001e888:	75 0a                	jne    c001e894 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e88a:	83 ec 0c             	sub    esp,0xc
c001e88d:	68 38 c2 02 c0       	push   0xc002c238
c001e892:	eb 3e                	jmp    c001e8d2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e894:	50                   	push   eax
c001e895:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e899:	50                   	push   eax
c001e89a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e89e:	50                   	push   eax
c001e89f:	53                   	push   ebx
c001e8a0:	e8 f1 47 ff ff       	call   c0013096 <File::stat(unsigned long long*, bool*)>
c001e8a5:	83 c4 10             	add    esp,0x10
c001e8a8:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e8ad:	74 0a                	je     c001e8b9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e8af:	83 ec 0c             	sub    esp,0xc
c001e8b2:	68 4c c2 02 c0       	push   0xc002c24c
c001e8b7:	eb 19                	jmp    c001e8d2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e8b9:	51                   	push   ecx
c001e8ba:	51                   	push   ecx
c001e8bb:	6a 01                	push   0x1
c001e8bd:	53                   	push   ebx
c001e8be:	e8 27 45 ff ff       	call   c0012dea <File::open(FileOpenMode)>
c001e8c3:	83 c4 10             	add    esp,0x10
c001e8c6:	85 c0                	test   eax,eax
c001e8c8:	74 24                	je     c001e8ee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e8ca:	83 ec 0c             	sub    esp,0xc
c001e8cd:	68 65 c2 02 c0       	push   0xc002c265
c001e8d2:	e8 3c b7 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001e8d7:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001e8dc:	83 c4 10             	add    esp,0x10
c001e8df:	48                   	dec    eax
c001e8e0:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001e8e5:	85 c0                	test   eax,eax
c001e8e7:	75 01                	jne    c001e8ea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e8e9:	fb                   	sti    
c001e8ea:	31 f6                	xor    esi,esi
c001e8ec:	eb 58                	jmp    c001e946 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e8ee:	0f b7 ed             	movzx  ebp,bp
c001e8f1:	50                   	push   eax
c001e8f2:	0f b7 ff             	movzx  edi,di
c001e8f5:	50                   	push   eax
c001e8f6:	55                   	push   ebp
c001e8f7:	57                   	push   edi
c001e8f8:	e8 95 fd ff ff       	call   c001e692 <Vm::realToLinear(unsigned short, unsigned short)>
c001e8fd:	5a                   	pop    edx
c001e8fe:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e900:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e904:	51                   	push   ecx
c001e905:	50                   	push   eax
c001e906:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e90a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e90e:	53                   	push   ebx
c001e90f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e912:	83 c4 14             	add    esp,0x14
c001e915:	53                   	push   ebx
c001e916:	e8 2d 45 ff ff       	call   c0012e48 <File::close()>
c001e91b:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001e920:	83 c4 10             	add    esp,0x10
c001e923:	48                   	dec    eax
c001e924:	c6 05 85 f4 02 c0 00 	mov    BYTE PTR ds:0xc002f485,0x0
c001e92b:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c001e930:	85 c0                	test   eax,eax
c001e932:	75 01                	jne    c001e935 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e934:	fb                   	sti    
c001e935:	83 ec 0c             	sub    esp,0xc
c001e938:	ff 35 88 f4 02 c0    	push   DWORD PTR ds:0xc002f488
c001e93e:	e8 f4 f6 ff ff       	call   c001e037 <unblockTask(ThreadControlBlock*)>
c001e943:	83 c4 10             	add    esp,0x10
c001e946:	83 c4 2c             	add    esp,0x2c
c001e949:	89 f0                	mov    eax,esi
c001e94b:	5b                   	pop    ebx
c001e94c:	5e                   	pop    esi
c001e94d:	5f                   	pop    edi
c001e94e:	5d                   	pop    ebp
c001e94f:	c3                   	ret    

c001e950 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e950:	57                   	push   edi
c001e951:	56                   	push   esi
c001e952:	53                   	push   ebx
c001e953:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e957:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e95b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e95f:	83 e8 06             	sub    eax,0x6
c001e962:	0f b7 c0             	movzx  eax,ax
c001e965:	50                   	push   eax
c001e966:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e96b:	50                   	push   eax
c001e96c:	e8 21 fd ff ff       	call   c001e692 <Vm::realToLinear(unsigned short, unsigned short)>
c001e971:	5a                   	pop    edx
c001e972:	5e                   	pop    esi
c001e973:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e976:	8d 56 fa             	lea    edx,[esi-0x6]
c001e979:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e97f:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e982:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e985:	83 c2 02             	add    edx,0x2
c001e988:	66 89 10             	mov    WORD PTR [eax],dx
c001e98b:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e98e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e992:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e995:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e999:	89 d6                	mov    esi,edx
c001e99b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e9a1:	66 81 e6 ff fd       	and    si,0xfdff
c001e9a6:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e9aa:	74 07                	je     c001e9b3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e9ac:	89 d6                	mov    esi,edx
c001e9ae:	66 81 ce 00 02       	or     si,0x200
c001e9b3:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e9b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9bc:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e9c0:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e9c8:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e9cb:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e9d3:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e9d6:	5b                   	pop    ebx
c001e9d7:	5e                   	pop    esi
c001e9d8:	5f                   	pop    edi
c001e9d9:	c3                   	ret    

c001e9da <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e9da:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9df:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9e4:	c1 e0 04             	shl    eax,0x4
c001e9e7:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e9ea:	c3                   	ret    

c001e9eb <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e9eb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9f0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9f5:	c1 e0 04             	shl    eax,0x4
c001e9f8:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e9fc:	c3                   	ret    

c001e9fd <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e9fd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea02:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea07:	c1 e0 04             	shl    eax,0x4
c001ea0a:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ea0d:	c3                   	ret    

c001ea0e <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ea0e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea13:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea18:	c1 e0 04             	shl    eax,0x4
c001ea1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea1f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ea22:	c3                   	ret    

c001ea23 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ea23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea28:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea2d:	c1 e0 04             	shl    eax,0x4
c001ea30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea34:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ea38:	c3                   	ret    

c001ea39 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ea39:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea3e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea43:	c1 e0 04             	shl    eax,0x4
c001ea46:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea4a:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ea4d:	c3                   	ret    

c001ea4e <Vm::faultHandler(regs*)>:
c001ea4e:	55                   	push   ebp
c001ea4f:	57                   	push   edi
c001ea50:	56                   	push   esi
c001ea51:	53                   	push   ebx
c001ea52:	83 ec 1c             	sub    esp,0x1c
c001ea55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ea59:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001ea5c:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001ea60:	0f b7 f8             	movzx  edi,ax
c001ea63:	52                   	push   edx
c001ea64:	0f b7 c0             	movzx  eax,ax
c001ea67:	50                   	push   eax
c001ea68:	e8 25 fc ff ff       	call   c001e692 <Vm::realToLinear(unsigned short, unsigned short)>
c001ea6d:	5a                   	pop    edx
c001ea6e:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001ea71:	59                   	pop    ecx
c001ea72:	89 c1                	mov    ecx,eax
c001ea74:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ea77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ea7b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ea84:	0f b7 c5             	movzx  eax,bp
c001ea87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea8b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ea8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ea93:	e8 fa fb ff ff       	call   c001e692 <Vm::realToLinear(unsigned short, unsigned short)>
c001ea98:	5e                   	pop    esi
c001ea99:	be 06 00 00 00       	mov    esi,0x6
c001ea9e:	5a                   	pop    edx
c001ea9f:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001eaa4:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001eaa9:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001eaac:	80 fa 9d             	cmp    dl,0x9d
c001eaaf:	0f 84 2c 02 00 00    	je     c001ece1 <Vm::faultHandler(regs*)+0x293>
c001eab5:	0f 87 91 00 00 00    	ja     c001eb4c <Vm::faultHandler(regs*)+0xfe>
c001eabb:	80 fa 66             	cmp    dl,0x66
c001eabe:	0f 84 98 01 00 00    	je     c001ec5c <Vm::faultHandler(regs*)+0x20e>
c001eac4:	77 47                	ja     c001eb0d <Vm::faultHandler(regs*)+0xbf>
c001eac6:	80 fa 36             	cmp    dl,0x36
c001eac9:	0f 84 80 01 00 00    	je     c001ec4f <Vm::faultHandler(regs*)+0x201>
c001eacf:	77 1a                	ja     c001eaeb <Vm::faultHandler(regs*)+0x9d>
c001ead1:	80 fa 26             	cmp    dl,0x26
c001ead4:	0f 84 4e 01 00 00    	je     c001ec28 <Vm::faultHandler(regs*)+0x1da>
c001eada:	80 fa 2e             	cmp    dl,0x2e
c001eadd:	0f 85 e2 05 00 00    	jne    c001f0c5 <Vm::faultHandler(regs*)+0x677>
c001eae3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eae6:	31 f6                	xor    esi,esi
c001eae8:	41                   	inc    ecx
c001eae9:	eb be                	jmp    c001eaa9 <Vm::faultHandler(regs*)+0x5b>
c001eaeb:	80 fa 64             	cmp    dl,0x64
c001eaee:	0f 84 41 01 00 00    	je     c001ec35 <Vm::faultHandler(regs*)+0x1e7>
c001eaf4:	0f 87 48 01 00 00    	ja     c001ec42 <Vm::faultHandler(regs*)+0x1f4>
c001eafa:	80 fa 3e             	cmp    dl,0x3e
c001eafd:	0f 85 c2 05 00 00    	jne    c001f0c5 <Vm::faultHandler(regs*)+0x677>
c001eb03:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb06:	be 01 00 00 00       	mov    esi,0x1
c001eb0b:	eb db                	jmp    c001eae8 <Vm::faultHandler(regs*)+0x9a>
c001eb0d:	80 fa 6d             	cmp    dl,0x6d
c001eb10:	0f 84 ec 02 00 00    	je     c001ee02 <Vm::faultHandler(regs*)+0x3b4>
c001eb16:	77 17                	ja     c001eb2f <Vm::faultHandler(regs*)+0xe1>
c001eb18:	80 fa 67             	cmp    dl,0x67
c001eb1b:	0f 84 48 01 00 00    	je     c001ec69 <Vm::faultHandler(regs*)+0x21b>
c001eb21:	80 fa 6c             	cmp    dl,0x6c
c001eb24:	0f 84 69 02 00 00    	je     c001ed93 <Vm::faultHandler(regs*)+0x345>
c001eb2a:	e9 96 05 00 00       	jmp    c001f0c5 <Vm::faultHandler(regs*)+0x677>
c001eb2f:	80 fa 6f             	cmp    dl,0x6f
c001eb32:	0f 84 f4 03 00 00    	je     c001ef2c <Vm::faultHandler(regs*)+0x4de>
c001eb38:	0f 82 59 03 00 00    	jb     c001ee97 <Vm::faultHandler(regs*)+0x449>
c001eb3e:	80 fa 9c             	cmp    dl,0x9c
c001eb41:	0f 84 2f 01 00 00    	je     c001ec76 <Vm::faultHandler(regs*)+0x228>
c001eb47:	e9 79 05 00 00       	jmp    c001f0c5 <Vm::faultHandler(regs*)+0x677>
c001eb4c:	80 fa ec             	cmp    dl,0xec
c001eb4f:	0f 84 14 05 00 00    	je     c001f069 <Vm::faultHandler(regs*)+0x61b>
c001eb55:	77 7b                	ja     c001ebd2 <Vm::faultHandler(regs*)+0x184>
c001eb57:	80 fa e4             	cmp    dl,0xe4
c001eb5a:	0f 84 93 04 00 00    	je     c001eff3 <Vm::faultHandler(regs*)+0x5a5>
c001eb60:	77 53                	ja     c001ebb5 <Vm::faultHandler(regs*)+0x167>
c001eb62:	80 fa cd             	cmp    dl,0xcd
c001eb65:	0f 84 d9 01 00 00    	je     c001ed44 <Vm::faultHandler(regs*)+0x2f6>
c001eb6b:	80 fa cf             	cmp    dl,0xcf
c001eb6e:	0f 85 51 05 00 00    	jne    c001f0c5 <Vm::faultHandler(regs*)+0x677>
c001eb74:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eb77:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001eb7a:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001eb7e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001eb81:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001eb85:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb8b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb8e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001eb92:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb98:	66 c1 e8 09          	shr    ax,0x9
c001eb9c:	83 e0 01             	and    eax,0x1
c001eb9f:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eba2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eba5:	83 c0 06             	add    eax,0x6
c001eba8:	25 ff ff 00 00       	and    eax,0xffff
c001ebad:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ebb0:	e9 0c 05 00 00       	jmp    c001f0c1 <Vm::faultHandler(regs*)+0x673>
c001ebb5:	80 fa e6             	cmp    dl,0xe6
c001ebb8:	0f 84 7f 04 00 00    	je     c001f03d <Vm::faultHandler(regs*)+0x5ef>
c001ebbe:	0f 82 4b 04 00 00    	jb     c001f00f <Vm::faultHandler(regs*)+0x5c1>
c001ebc4:	80 fa e7             	cmp    dl,0xe7
c001ebc7:	0f 84 87 04 00 00    	je     c001f054 <Vm::faultHandler(regs*)+0x606>
c001ebcd:	e9 f3 04 00 00       	jmp    c001f0c5 <Vm::faultHandler(regs*)+0x677>
c001ebd2:	80 fa ef             	cmp    dl,0xef
c001ebd5:	0f 84 d1 04 00 00    	je     c001f0ac <Vm::faultHandler(regs*)+0x65e>
c001ebdb:	77 28                	ja     c001ec05 <Vm::faultHandler(regs*)+0x1b7>
c001ebdd:	80 fa ed             	cmp    dl,0xed
c001ebe0:	0f 84 9f 04 00 00    	je     c001f085 <Vm::faultHandler(regs*)+0x637>
c001ebe6:	80 fa ee             	cmp    dl,0xee
c001ebe9:	0f 85 d6 04 00 00    	jne    c001f0c5 <Vm::faultHandler(regs*)+0x677>
c001ebef:	50                   	push   eax
c001ebf0:	50                   	push   eax
c001ebf1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ebf5:	50                   	push   eax
c001ebf6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ebfa:	50                   	push   eax
c001ebfb:	e8 5c fa ff ff       	call   c001e65c <Vm::outbv(unsigned short, unsigned char)>
c001ec00:	e9 9f 04 00 00       	jmp    c001f0a4 <Vm::faultHandler(regs*)+0x656>
c001ec05:	80 fa fa             	cmp    dl,0xfa
c001ec08:	0f 84 69 01 00 00    	je     c001ed77 <Vm::faultHandler(regs*)+0x329>
c001ec0e:	80 fa fb             	cmp    dl,0xfb
c001ec11:	0f 84 6e 01 00 00    	je     c001ed85 <Vm::faultHandler(regs*)+0x337>
c001ec17:	80 fa f3             	cmp    dl,0xf3
c001ec1a:	0f 85 a5 04 00 00    	jne    c001f0c5 <Vm::faultHandler(regs*)+0x677>
c001ec20:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ec23:	e9 c0 fe ff ff       	jmp    c001eae8 <Vm::faultHandler(regs*)+0x9a>
c001ec28:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ec2b:	be 02 00 00 00       	mov    esi,0x2
c001ec30:	e9 b3 fe ff ff       	jmp    c001eae8 <Vm::faultHandler(regs*)+0x9a>
c001ec35:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ec38:	be 03 00 00 00       	mov    esi,0x3
c001ec3d:	e9 a6 fe ff ff       	jmp    c001eae8 <Vm::faultHandler(regs*)+0x9a>
c001ec42:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ec45:	be 04 00 00 00       	mov    esi,0x4
c001ec4a:	e9 99 fe ff ff       	jmp    c001eae8 <Vm::faultHandler(regs*)+0x9a>
c001ec4f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ec52:	be 05 00 00 00       	mov    esi,0x5
c001ec57:	e9 8c fe ff ff       	jmp    c001eae8 <Vm::faultHandler(regs*)+0x9a>
c001ec5c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ec5f:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ec64:	e9 7f fe ff ff       	jmp    c001eae8 <Vm::faultHandler(regs*)+0x9a>
c001ec69:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ec6c:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ec71:	e9 72 fe ff ff       	jmp    c001eae8 <Vm::faultHandler(regs*)+0x9a>
c001ec76:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ec79:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ec7d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec82:	74 30                	je     c001ecb4 <Vm::faultHandler(regs*)+0x266>
c001ec84:	83 e9 04             	sub    ecx,0x4
c001ec87:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ec8d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ec93:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ec96:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ec99:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ec9f:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eca3:	0f 84 15 04 00 00    	je     c001f0be <Vm::faultHandler(regs*)+0x670>
c001eca9:	80 ce 02             	or     dh,0x2
c001ecac:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ecaf:	e9 0a 04 00 00       	jmp    c001f0be <Vm::faultHandler(regs*)+0x670>
c001ecb4:	83 e9 02             	sub    ecx,0x2
c001ecb7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ecbd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ecc0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ecc4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ecca:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ecce:	74 05                	je     c001ecd5 <Vm::faultHandler(regs*)+0x287>
c001ecd0:	80 ce 02             	or     dh,0x2
c001ecd3:	eb 03                	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x28a>
c001ecd5:	80 e6 fd             	and    dh,0xfd
c001ecd8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ecdc:	e9 dd 03 00 00       	jmp    c001f0be <Vm::faultHandler(regs*)+0x670>
c001ece1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ece6:	74 2a                	je     c001ed12 <Vm::faultHandler(regs*)+0x2c4>
c001ece8:	8b 10                	mov    edx,DWORD PTR [eax]
c001ecea:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ecf0:	81 ca 00 02 02 00    	or     edx,0x20200
c001ecf6:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ecf9:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecfb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ed01:	c1 e8 09             	shr    eax,0x9
c001ed04:	83 e0 01             	and    eax,0x1
c001ed07:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ed0a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ed0d:	83 c0 04             	add    eax,0x4
c001ed10:	eb 25                	jmp    c001ed37 <Vm::faultHandler(regs*)+0x2e9>
c001ed12:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ed15:	81 ca 00 02 02 00    	or     edx,0x20200
c001ed1b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ed1e:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ed21:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ed27:	66 c1 e8 09          	shr    ax,0x9
c001ed2b:	83 e0 01             	and    eax,0x1
c001ed2e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ed31:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ed34:	83 c0 02             	add    eax,0x2
c001ed37:	25 ff ff 00 00       	and    eax,0xffff
c001ed3c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ed3f:	e9 7a 03 00 00       	jmp    c001f0be <Vm::faultHandler(regs*)+0x670>
c001ed44:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed48:	3c ee                	cmp    al,0xee
c001ed4a:	75 10                	jne    c001ed5c <Vm::faultHandler(regs*)+0x30e>
c001ed4c:	83 ec 0c             	sub    esp,0xc
c001ed4f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ed52:	e8 a2 f9 ff ff       	call   c001e6f9 <Vm::mainloop3(unsigned long)>
c001ed57:	e9 4b 03 00 00       	jmp    c001f0a7 <Vm::faultHandler(regs*)+0x659>
c001ed5c:	83 ec 0c             	sub    esp,0xc
c001ed5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ed63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed67:	51                   	push   ecx
c001ed68:	50                   	push   eax
c001ed69:	53                   	push   ebx
c001ed6a:	e8 e1 fb ff ff       	call   c001e950 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ed6f:	83 c4 20             	add    esp,0x20
c001ed72:	e9 4a 03 00 00       	jmp    c001f0c1 <Vm::faultHandler(regs*)+0x673>
c001ed77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed7c:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed80:	e9 39 03 00 00       	jmp    c001f0be <Vm::faultHandler(regs*)+0x670>
c001ed85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed8a:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ed8e:	e9 2b 03 00 00       	jmp    c001f0be <Vm::faultHandler(regs*)+0x670>
c001ed93:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ed96:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed9b:	74 2b                	je     c001edc8 <Vm::faultHandler(regs*)+0x37a>
c001ed9d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001eda4:	76 22                	jbe    c001edc8 <Vm::faultHandler(regs*)+0x37a>
c001eda6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001edaa:	50                   	push   eax
c001edab:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001edaf:	50                   	push   eax
c001edb0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001edb4:	50                   	push   eax
c001edb5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001edb9:	50                   	push   eax
c001edba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001edbe:	50                   	push   eax
c001edbf:	6a 6c                	push   0x6c
c001edc1:	6a 6c                	push   0x6c
c001edc3:	e9 b9 01 00 00       	jmp    c001ef81 <Vm::faultHandler(regs*)+0x533>
c001edc8:	83 ec 0c             	sub    esp,0xc
c001edcb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001edcf:	0f b7 f6             	movzx  esi,si
c001edd2:	50                   	push   eax
c001edd3:	e8 71 f8 ff ff       	call   c001e649 <Vm::inbv(unsigned short)>
c001edd8:	83 c4 0c             	add    esp,0xc
c001eddb:	0f b6 c0             	movzx  eax,al
c001edde:	50                   	push   eax
c001eddf:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ede3:	50                   	push   eax
c001ede4:	56                   	push   esi
c001ede5:	e8 24 fc ff ff       	call   c001ea0e <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001edea:	83 c4 10             	add    esp,0x10
c001eded:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001edf0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001edf4:	74 03                	je     c001edf9 <Vm::faultHandler(regs*)+0x3ab>
c001edf6:	48                   	dec    eax
c001edf7:	eb 01                	jmp    c001edfa <Vm::faultHandler(regs*)+0x3ac>
c001edf9:	40                   	inc    eax
c001edfa:	0f b7 c0             	movzx  eax,ax
c001edfd:	e9 8d 00 00 00       	jmp    c001ee8f <Vm::faultHandler(regs*)+0x441>
c001ee02:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ee05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ee08:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ee0d:	74 29                	je     c001ee38 <Vm::faultHandler(regs*)+0x3ea>
c001ee0f:	3d ff ff 00 00       	cmp    eax,0xffff
c001ee14:	76 22                	jbe    c001ee38 <Vm::faultHandler(regs*)+0x3ea>
c001ee16:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ee1a:	50                   	push   eax
c001ee1b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ee1f:	50                   	push   eax
c001ee20:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ee24:	50                   	push   eax
c001ee25:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ee29:	50                   	push   eax
c001ee2a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee2e:	50                   	push   eax
c001ee2f:	6a 6d                	push   0x6d
c001ee31:	6a 6d                	push   0x6d
c001ee33:	e9 49 01 00 00       	jmp    c001ef81 <Vm::faultHandler(regs*)+0x533>
c001ee38:	0f b7 c8             	movzx  ecx,ax
c001ee3b:	0f b7 f6             	movzx  esi,si
c001ee3e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ee41:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee46:	74 20                	je     c001ee68 <Vm::faultHandler(regs*)+0x41a>
c001ee48:	ed                   	in     eax,dx
c001ee49:	55                   	push   ebp
c001ee4a:	50                   	push   eax
c001ee4b:	51                   	push   ecx
c001ee4c:	56                   	push   esi
c001ee4d:	e8 e7 fb ff ff       	call   c001ea39 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ee52:	83 c4 10             	add    esp,0x10
c001ee55:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ee58:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ee5c:	74 05                	je     c001ee63 <Vm::faultHandler(regs*)+0x415>
c001ee5e:	83 e8 04             	sub    eax,0x4
c001ee61:	eb 27                	jmp    c001ee8a <Vm::faultHandler(regs*)+0x43c>
c001ee63:	83 c0 04             	add    eax,0x4
c001ee66:	eb 22                	jmp    c001ee8a <Vm::faultHandler(regs*)+0x43c>
c001ee68:	66 ed                	in     ax,dx
c001ee6a:	0f b7 c0             	movzx  eax,ax
c001ee6d:	57                   	push   edi
c001ee6e:	50                   	push   eax
c001ee6f:	51                   	push   ecx
c001ee70:	56                   	push   esi
c001ee71:	e8 ad fb ff ff       	call   c001ea23 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ee76:	83 c4 10             	add    esp,0x10
c001ee79:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ee7c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ee80:	74 05                	je     c001ee87 <Vm::faultHandler(regs*)+0x439>
c001ee82:	83 e8 02             	sub    eax,0x2
c001ee85:	eb 03                	jmp    c001ee8a <Vm::faultHandler(regs*)+0x43c>
c001ee87:	83 c0 02             	add    eax,0x2
c001ee8a:	25 ff ff 00 00       	and    eax,0xffff
c001ee8f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ee92:	e9 27 02 00 00       	jmp    c001f0be <Vm::faultHandler(regs*)+0x670>
c001ee97:	8d 46 ff             	lea    eax,[esi-0x1]
c001ee9a:	3c 05                	cmp    al,0x5
c001ee9c:	77 24                	ja     c001eec2 <Vm::faultHandler(regs*)+0x474>
c001ee9e:	0f b6 c0             	movzx  eax,al
c001eea1:	ff 24 85 d8 c2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3d28]
c001eea8:	0f b7 fd             	movzx  edi,bp
c001eeab:	eb 15                	jmp    c001eec2 <Vm::faultHandler(regs*)+0x474>
c001eead:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001eeb1:	eb 0f                	jmp    c001eec2 <Vm::faultHandler(regs*)+0x474>
c001eeb3:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001eeb7:	eb 09                	jmp    c001eec2 <Vm::faultHandler(regs*)+0x474>
c001eeb9:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001eebd:	eb 03                	jmp    c001eec2 <Vm::faultHandler(regs*)+0x474>
c001eebf:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001eec2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001eec5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eeca:	74 29                	je     c001eef5 <Vm::faultHandler(regs*)+0x4a7>
c001eecc:	3d ff ff 00 00       	cmp    eax,0xffff
c001eed1:	76 22                	jbe    c001eef5 <Vm::faultHandler(regs*)+0x4a7>
c001eed3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eed7:	50                   	push   eax
c001eed8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eedc:	50                   	push   eax
c001eedd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eee1:	50                   	push   eax
c001eee2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eee6:	50                   	push   eax
c001eee7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eeeb:	50                   	push   eax
c001eeec:	6a 6e                	push   0x6e
c001eeee:	6a 6e                	push   0x6e
c001eef0:	e9 8c 00 00 00       	jmp    c001ef81 <Vm::faultHandler(regs*)+0x533>
c001eef5:	0f b7 c0             	movzx  eax,ax
c001eef8:	52                   	push   edx
c001eef9:	52                   	push   edx
c001eefa:	50                   	push   eax
c001eefb:	57                   	push   edi
c001eefc:	e8 d9 fa ff ff       	call   c001e9da <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ef01:	59                   	pop    ecx
c001ef02:	0f b6 c0             	movzx  eax,al
c001ef05:	5e                   	pop    esi
c001ef06:	50                   	push   eax
c001ef07:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ef0b:	50                   	push   eax
c001ef0c:	e8 4b f7 ff ff       	call   c001e65c <Vm::outbv(unsigned short, unsigned char)>
c001ef11:	83 c4 10             	add    esp,0x10
c001ef14:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ef17:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ef1b:	74 03                	je     c001ef20 <Vm::faultHandler(regs*)+0x4d2>
c001ef1d:	48                   	dec    eax
c001ef1e:	eb 01                	jmp    c001ef21 <Vm::faultHandler(regs*)+0x4d3>
c001ef20:	40                   	inc    eax
c001ef21:	0f b7 c0             	movzx  eax,ax
c001ef24:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ef27:	e9 92 01 00 00       	jmp    c001f0be <Vm::faultHandler(regs*)+0x670>
c001ef2c:	8d 46 ff             	lea    eax,[esi-0x1]
c001ef2f:	3c 05                	cmp    al,0x5
c001ef31:	77 1f                	ja     c001ef52 <Vm::faultHandler(regs*)+0x504>
c001ef33:	0f b6 c0             	movzx  eax,al
c001ef36:	ff 24 85 f0 c2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3d10]
c001ef3d:	89 ef                	mov    edi,ebp
c001ef3f:	eb 11                	jmp    c001ef52 <Vm::faultHandler(regs*)+0x504>
c001ef41:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ef44:	eb 0c                	jmp    c001ef52 <Vm::faultHandler(regs*)+0x504>
c001ef46:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ef49:	eb 07                	jmp    c001ef52 <Vm::faultHandler(regs*)+0x504>
c001ef4b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ef4e:	eb 02                	jmp    c001ef52 <Vm::faultHandler(regs*)+0x504>
c001ef50:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ef52:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ef55:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ef5a:	74 37                	je     c001ef93 <Vm::faultHandler(regs*)+0x545>
c001ef5c:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ef62:	76 2f                	jbe    c001ef93 <Vm::faultHandler(regs*)+0x545>
c001ef64:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ef68:	50                   	push   eax
c001ef69:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ef6d:	50                   	push   eax
c001ef6e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ef72:	50                   	push   eax
c001ef73:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ef77:	50                   	push   eax
c001ef78:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef7c:	50                   	push   eax
c001ef7d:	6a 6f                	push   0x6f
c001ef7f:	6a 6f                	push   0x6f
c001ef81:	68 7e c2 02 c0       	push   0xc002c27e
c001ef86:	e8 9c 38 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001ef8b:	83 c4 20             	add    esp,0x20
c001ef8e:	e9 86 01 00 00       	jmp    c001f119 <Vm::faultHandler(regs*)+0x6cb>
c001ef93:	0f b7 d7             	movzx  edx,di
c001ef96:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ef99:	0f b7 c6             	movzx  eax,si
c001ef9c:	81 e1 00 04 00 00    	and    ecx,0x400
c001efa2:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001efa5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001efaa:	74 1d                	je     c001efc9 <Vm::faultHandler(regs*)+0x57b>
c001efac:	55                   	push   ebp
c001efad:	55                   	push   ebp
c001efae:	50                   	push   eax
c001efaf:	52                   	push   edx
c001efb0:	e8 48 fa ff ff       	call   c001e9fd <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001efb5:	83 c4 10             	add    esp,0x10
c001efb8:	89 fa                	mov    edx,edi
c001efba:	ef                   	out    dx,eax
c001efbb:	85 c9                	test   ecx,ecx
c001efbd:	74 05                	je     c001efc4 <Vm::faultHandler(regs*)+0x576>
c001efbf:	83 ee 04             	sub    esi,0x4
c001efc2:	eb 21                	jmp    c001efe5 <Vm::faultHandler(regs*)+0x597>
c001efc4:	83 c6 04             	add    esi,0x4
c001efc7:	eb 1c                	jmp    c001efe5 <Vm::faultHandler(regs*)+0x597>
c001efc9:	55                   	push   ebp
c001efca:	55                   	push   ebp
c001efcb:	50                   	push   eax
c001efcc:	52                   	push   edx
c001efcd:	e8 19 fa ff ff       	call   c001e9eb <Vm::readWordFromReal(unsigned short, unsigned short)>
c001efd2:	83 c4 10             	add    esp,0x10
c001efd5:	89 fa                	mov    edx,edi
c001efd7:	66 ef                	out    dx,ax
c001efd9:	85 c9                	test   ecx,ecx
c001efdb:	74 05                	je     c001efe2 <Vm::faultHandler(regs*)+0x594>
c001efdd:	83 ee 02             	sub    esi,0x2
c001efe0:	eb 03                	jmp    c001efe5 <Vm::faultHandler(regs*)+0x597>
c001efe2:	83 c6 02             	add    esi,0x2
c001efe5:	81 e6 ff ff 00 00    	and    esi,0xffff
c001efeb:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001efee:	e9 cb 00 00 00       	jmp    c001f0be <Vm::faultHandler(regs*)+0x670>
c001eff3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001effa:	83 ec 0c             	sub    esp,0xc
c001effd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f001:	50                   	push   eax
c001f002:	e8 42 f6 ff ff       	call   c001e649 <Vm::inbv(unsigned short)>
c001f007:	0f b6 c0             	movzx  eax,al
c001f00a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f00d:	eb 3f                	jmp    c001f04e <Vm::faultHandler(regs*)+0x600>
c001f00f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f014:	74 07                	je     c001f01d <Vm::faultHandler(regs*)+0x5cf>
c001f016:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f01a:	ed                   	in     eax,dx
c001f01b:	eb 14                	jmp    c001f031 <Vm::faultHandler(regs*)+0x5e3>
c001f01d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f020:	66 31 f6             	xor    si,si
c001f023:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f026:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f02a:	66 ed                	in     ax,dx
c001f02c:	0f b7 c0             	movzx  eax,ax
c001f02f:	09 f0                	or     eax,esi
c001f031:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f034:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f038:	e9 84 00 00 00       	jmp    c001f0c1 <Vm::faultHandler(regs*)+0x673>
c001f03d:	52                   	push   edx
c001f03e:	52                   	push   edx
c001f03f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f043:	50                   	push   eax
c001f044:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f048:	50                   	push   eax
c001f049:	e8 0e f6 ff ff       	call   c001e65c <Vm::outbv(unsigned short, unsigned char)>
c001f04e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f052:	eb 53                	jmp    c001f0a7 <Vm::faultHandler(regs*)+0x659>
c001f054:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f057:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f05b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f060:	74 03                	je     c001f065 <Vm::faultHandler(regs*)+0x617>
c001f062:	ef                   	out    dx,eax
c001f063:	eb cf                	jmp    c001f034 <Vm::faultHandler(regs*)+0x5e6>
c001f065:	66 ef                	out    dx,ax
c001f067:	eb cb                	jmp    c001f034 <Vm::faultHandler(regs*)+0x5e6>
c001f069:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f070:	83 ec 0c             	sub    esp,0xc
c001f073:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f077:	50                   	push   eax
c001f078:	e8 cc f5 ff ff       	call   c001e649 <Vm::inbv(unsigned short)>
c001f07d:	0f b6 c0             	movzx  eax,al
c001f080:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f083:	eb 1f                	jmp    c001f0a4 <Vm::faultHandler(regs*)+0x656>
c001f085:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f088:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f08d:	74 03                	je     c001f092 <Vm::faultHandler(regs*)+0x644>
c001f08f:	ed                   	in     eax,dx
c001f090:	eb 0d                	jmp    c001f09f <Vm::faultHandler(regs*)+0x651>
c001f092:	66 ed                	in     ax,dx
c001f094:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f097:	0f b7 c0             	movzx  eax,ax
c001f09a:	66 31 d2             	xor    dx,dx
c001f09d:	09 d0                	or     eax,edx
c001f09f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f0a2:	eb 1a                	jmp    c001f0be <Vm::faultHandler(regs*)+0x670>
c001f0a4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f0a7:	83 c4 10             	add    esp,0x10
c001f0aa:	eb 15                	jmp    c001f0c1 <Vm::faultHandler(regs*)+0x673>
c001f0ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f0af:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f0b2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f0b7:	74 03                	je     c001f0bc <Vm::faultHandler(regs*)+0x66e>
c001f0b9:	ef                   	out    dx,eax
c001f0ba:	eb 02                	jmp    c001f0be <Vm::faultHandler(regs*)+0x670>
c001f0bc:	66 ef                	out    dx,ax
c001f0be:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f0c1:	b0 01                	mov    al,0x1
c001f0c3:	eb 56                	jmp    c001f11b <Vm::faultHandler(regs*)+0x6cd>
c001f0c5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f0c9:	50                   	push   eax
c001f0ca:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f0ce:	50                   	push   eax
c001f0cf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f0d3:	50                   	push   eax
c001f0d4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f0d8:	50                   	push   eax
c001f0d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f0dd:	50                   	push   eax
c001f0de:	52                   	push   edx
c001f0df:	52                   	push   edx
c001f0e0:	68 ab c2 02 c0       	push   0xc002c2ab
c001f0e5:	e8 3d 37 ff ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c001f0ea:	83 c4 20             	add    esp,0x20
c001f0ed:	83 ec 0c             	sub    esp,0xc
c001f0f0:	6a 60                	push   0x60
c001f0f2:	e8 52 f5 ff ff       	call   c001e649 <Vm::inbv(unsigned short)>
c001f0f7:	83 c4 10             	add    esp,0x10
c001f0fa:	3c 1c                	cmp    al,0x1c
c001f0fc:	74 04                	je     c001f102 <Vm::faultHandler(regs*)+0x6b4>
c001f0fe:	3c 5a                	cmp    al,0x5a
c001f100:	75 eb                	jne    c001f0ed <Vm::faultHandler(regs*)+0x69f>
c001f102:	3c 5a                	cmp    al,0x5a
c001f104:	74 04                	je     c001f10a <Vm::faultHandler(regs*)+0x6bc>
c001f106:	3c 1c                	cmp    al,0x1c
c001f108:	75 0f                	jne    c001f119 <Vm::faultHandler(regs*)+0x6cb>
c001f10a:	83 ec 0c             	sub    esp,0xc
c001f10d:	6a 60                	push   0x60
c001f10f:	e8 35 f5 ff ff       	call   c001e649 <Vm::inbv(unsigned short)>
c001f114:	83 c4 10             	add    esp,0x10
c001f117:	eb e9                	jmp    c001f102 <Vm::faultHandler(regs*)+0x6b4>
c001f119:	31 c0                	xor    eax,eax
c001f11b:	83 c4 1c             	add    esp,0x1c
c001f11e:	5b                   	pop    ebx
c001f11f:	5e                   	pop    esi
c001f120:	5f                   	pop    edi
c001f121:	5d                   	pop    ebp
c001f122:	c3                   	ret    

c001f123 <Vm::fpuInternalTo32(unsigned long long)>:
c001f123:	57                   	push   edi
c001f124:	56                   	push   esi
c001f125:	53                   	push   ebx
c001f126:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12e:	89 d6                	mov    esi,edx
c001f130:	89 d7                	mov    edi,edx
c001f132:	89 c1                	mov    ecx,eax
c001f134:	c1 ef 14             	shr    edi,0x14
c001f137:	89 d3                	mov    ebx,edx
c001f139:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f13f:	31 d2                	xor    edx,edx
c001f141:	89 f8                	mov    eax,edi
c001f143:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f149:	bf ff 00 00 00       	mov    edi,0xff
c001f14e:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f153:	83 d2 ff             	adc    edx,0xffffffff
c001f156:	39 c7                	cmp    edi,eax
c001f158:	bf 00 00 00 00       	mov    edi,0x0
c001f15d:	19 d7                	sbb    edi,edx
c001f15f:	72 15                	jb     c001f176 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f161:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f165:	c1 e0 17             	shl    eax,0x17
c001f168:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f16e:	09 f1                	or     ecx,esi
c001f170:	09 c1                	or     ecx,eax
c001f172:	89 cf                	mov    edi,ecx
c001f174:	eb 02                	jmp    c001f178 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f176:	31 ff                	xor    edi,edi
c001f178:	89 f8                	mov    eax,edi
c001f17a:	5b                   	pop    ebx
c001f17b:	5e                   	pop    esi
c001f17c:	5f                   	pop    edi
c001f17d:	c3                   	ret    

c001f17e <Vm::fpuInternalTo64(unsigned long long)>:
c001f17e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f182:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f186:	c3                   	ret    

c001f187 <Vm::fpu32ToInternal(unsigned int)>:
c001f187:	57                   	push   edi
c001f188:	31 ff                	xor    edi,edi
c001f18a:	56                   	push   esi
c001f18b:	53                   	push   ebx
c001f18c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f190:	89 cb                	mov    ebx,ecx
c001f192:	89 ce                	mov    esi,ecx
c001f194:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f19a:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f1a0:	c1 e9 17             	shr    ecx,0x17
c001f1a3:	89 f0                	mov    eax,esi
c001f1a5:	0f b6 d1             	movzx  edx,cl
c001f1a8:	81 c2 80 03 00 00    	add    edx,0x380
c001f1ae:	89 d1                	mov    ecx,edx
c001f1b0:	89 fa                	mov    edx,edi
c001f1b2:	c1 e1 14             	shl    ecx,0x14
c001f1b5:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f1b9:	c1 e0 1d             	shl    eax,0x1d
c001f1bc:	89 d7                	mov    edi,edx
c001f1be:	89 c6                	mov    esi,eax
c001f1c0:	89 ca                	mov    edx,ecx
c001f1c2:	89 f0                	mov    eax,esi
c001f1c4:	09 fa                	or     edx,edi
c001f1c6:	09 da                	or     edx,ebx
c001f1c8:	5b                   	pop    ebx
c001f1c9:	5e                   	pop    esi
c001f1ca:	5f                   	pop    edi
c001f1cb:	c3                   	ret    

c001f1cc <Vm::fpu64ToInternal(unsigned long long)>:
c001f1cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1d4:	c3                   	ret    

c001f1d5 <Vm::fpuFloatToLong(unsigned long long)>:
c001f1d5:	57                   	push   edi
c001f1d6:	31 c0                	xor    eax,eax
c001f1d8:	56                   	push   esi
c001f1d9:	31 d2                	xor    edx,edx
c001f1db:	53                   	push   ebx
c001f1dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f1e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f1e4:	89 d9                	mov    ecx,ebx
c001f1e6:	c1 e9 14             	shr    ecx,0x14
c001f1e9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f1ef:	89 cf                	mov    edi,ecx
c001f1f1:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f1f7:	78 33                	js     c001f22c <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f1f9:	89 d9                	mov    ecx,ebx
c001f1fb:	89 f0                	mov    eax,esi
c001f1fd:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f203:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f209:	89 ca                	mov    edx,ecx
c001f20b:	b9 34 00 00 00       	mov    ecx,0x34
c001f210:	29 f9                	sub    ecx,edi
c001f212:	0f ad d0             	shrd   eax,edx,cl
c001f215:	d3 fa                	sar    edx,cl
c001f217:	f6 c1 20             	test   cl,0x20
c001f21a:	74 05                	je     c001f221 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f21c:	89 d0                	mov    eax,edx
c001f21e:	c1 fa 1f             	sar    edx,0x1f
c001f221:	85 db                	test   ebx,ebx
c001f223:	79 07                	jns    c001f22c <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f225:	f7 d8                	neg    eax
c001f227:	83 d2 00             	adc    edx,0x0
c001f22a:	f7 da                	neg    edx
c001f22c:	5b                   	pop    ebx
c001f22d:	5e                   	pop    esi
c001f22e:	5f                   	pop    edi
c001f22f:	c3                   	ret    

c001f230 <Vm::fpuULongToFloat(unsigned long long)>:
c001f230:	57                   	push   edi
c001f231:	31 c9                	xor    ecx,ecx
c001f233:	56                   	push   esi
c001f234:	53                   	push   ebx
c001f235:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f239:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f23d:	0f ba e7 14          	bt     edi,0x14
c001f241:	72 07                	jb     c001f24a <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f243:	01 f6                	add    esi,esi
c001f245:	11 ff                	adc    edi,edi
c001f247:	41                   	inc    ecx
c001f248:	eb f3                	jmp    c001f23d <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f24a:	89 fa                	mov    edx,edi
c001f24c:	89 f0                	mov    eax,esi
c001f24e:	bb 33 04 00 00       	mov    ebx,0x433
c001f253:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f259:	29 cb                	sub    ebx,ecx
c001f25b:	89 d9                	mov    ecx,ebx
c001f25d:	5b                   	pop    ebx
c001f25e:	c1 e1 14             	shl    ecx,0x14
c001f261:	5e                   	pop    esi
c001f262:	09 ca                	or     edx,ecx
c001f264:	5f                   	pop    edi
c001f265:	c3                   	ret    

c001f266 <Vm::fpuLongToFloat(long long)>:
c001f266:	56                   	push   esi
c001f267:	31 c0                	xor    eax,eax
c001f269:	53                   	push   ebx
c001f26a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f26e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f272:	39 c8                	cmp    eax,ecx
c001f274:	19 d8                	sbb    eax,ebx
c001f276:	7d 04                	jge    c001f27c <Vm::fpuLongToFloat(long long)+0x16>
c001f278:	31 f6                	xor    esi,esi
c001f27a:	eb 0c                	jmp    c001f288 <Vm::fpuLongToFloat(long long)+0x22>
c001f27c:	f7 d9                	neg    ecx
c001f27e:	be 01 00 00 00       	mov    esi,0x1
c001f283:	83 d3 00             	adc    ebx,0x0
c001f286:	f7 db                	neg    ebx
c001f288:	31 c0                	xor    eax,eax
c001f28a:	0f ba e3 14          	bt     ebx,0x14
c001f28e:	72 07                	jb     c001f297 <Vm::fpuLongToFloat(long long)+0x31>
c001f290:	01 c9                	add    ecx,ecx
c001f292:	11 db                	adc    ebx,ebx
c001f294:	40                   	inc    eax
c001f295:	eb f3                	jmp    c001f28a <Vm::fpuLongToFloat(long long)+0x24>
c001f297:	ba 33 04 00 00       	mov    edx,0x433
c001f29c:	29 c2                	sub    edx,eax
c001f29e:	89 c8                	mov    eax,ecx
c001f2a0:	c1 e2 14             	shl    edx,0x14
c001f2a3:	89 d9                	mov    ecx,ebx
c001f2a5:	89 f3                	mov    ebx,esi
c001f2a7:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f2ad:	09 ca                	or     edx,ecx
c001f2af:	84 db                	test   bl,bl
c001f2b1:	74 06                	je     c001f2b9 <Vm::fpuLongToFloat(long long)+0x53>
c001f2b3:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f2b9:	5b                   	pop    ebx
c001f2ba:	5e                   	pop    esi
c001f2bb:	c3                   	ret    

c001f2bc <Vm::fpuGet0()>:
c001f2bc:	31 c0                	xor    eax,eax
c001f2be:	31 d2                	xor    edx,edx
c001f2c0:	c3                   	ret    

c001f2c1 <Vm::fpuGet1()>:
c001f2c1:	b8 01 00 00 00       	mov    eax,0x1
c001f2c6:	31 d2                	xor    edx,edx
c001f2c8:	c3                   	ret    

c001f2c9 <Vm::fpuGetPi()>:
c001f2c9:	b8 03 00 00 00       	mov    eax,0x3
c001f2ce:	31 d2                	xor    edx,edx
c001f2d0:	c3                   	ret    

c001f2d1 <Vm::fpuGetLog2E()>:
c001f2d1:	83 ec 18             	sub    esp,0x18
c001f2d4:	68 08 c3 02 c0       	push   0xc002c308
c001f2d9:	e8 35 ad ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001f2de:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f2e3:	31 d2                	xor    edx,edx
c001f2e5:	83 c4 1c             	add    esp,0x1c
c001f2e8:	c3                   	ret    

c001f2e9 <Vm::fpuGetLogE2()>:
c001f2e9:	83 ec 18             	sub    esp,0x18
c001f2ec:	68 14 c3 02 c0       	push   0xc002c314
c001f2f1:	e8 1d ad ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001f2f6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f2fb:	31 d2                	xor    edx,edx
c001f2fd:	83 c4 1c             	add    esp,0x1c
c001f300:	c3                   	ret    

c001f301 <Vm::fpuGetLog210()>:
c001f301:	83 ec 18             	sub    esp,0x18
c001f304:	68 20 c3 02 c0       	push   0xc002c320
c001f309:	e8 05 ad ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001f30e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f313:	31 d2                	xor    edx,edx
c001f315:	83 c4 1c             	add    esp,0x1c
c001f318:	c3                   	ret    

c001f319 <Vm::fpuGetLog102()>:
c001f319:	83 ec 18             	sub    esp,0x18
c001f31c:	68 2d c3 02 c0       	push   0xc002c32d
c001f321:	e8 ed ac ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001f326:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f32b:	31 d2                	xor    edx,edx
c001f32d:	83 c4 1c             	add    esp,0x1c
c001f330:	c3                   	ret    

c001f331 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f331:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f335:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f339:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f33d:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f341:	0f 92 c0             	setb   al
c001f344:	c3                   	ret    

c001f345 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f345:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f34d:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f351:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f355:	09 c2                	or     edx,eax
c001f357:	0f 94 c0             	sete   al
c001f35a:	c3                   	ret    

c001f35b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f35b:	57                   	push   edi
c001f35c:	56                   	push   esi
c001f35d:	53                   	push   ebx
c001f35e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f362:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f366:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f36a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f36e:	57                   	push   edi
c001f36f:	56                   	push   esi
c001f370:	53                   	push   ebx
c001f371:	51                   	push   ecx
c001f372:	e8 ce ff ff ff       	call   c001f345 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f377:	83 c4 10             	add    esp,0x10
c001f37a:	88 c2                	mov    dl,al
c001f37c:	31 c0                	xor    eax,eax
c001f37e:	84 d2                	test   dl,dl
c001f380:	75 0c                	jne    c001f38e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f382:	57                   	push   edi
c001f383:	56                   	push   esi
c001f384:	53                   	push   ebx
c001f385:	51                   	push   ecx
c001f386:	e8 a6 ff ff ff       	call   c001f331 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f38b:	83 c4 10             	add    esp,0x10
c001f38e:	83 e0 01             	and    eax,0x1
c001f391:	5b                   	pop    ebx
c001f392:	88 c1                	mov    cl,al
c001f394:	83 e2 01             	and    edx,0x1
c001f397:	a0 c1 f4 02 c0       	mov    al,ds:0xc002f4c1
c001f39c:	c1 e2 06             	shl    edx,0x6
c001f39f:	83 e0 ba             	and    eax,0xffffffba
c001f3a2:	5e                   	pop    esi
c001f3a3:	09 c8                	or     eax,ecx
c001f3a5:	5f                   	pop    edi
c001f3a6:	09 d0                	or     eax,edx
c001f3a8:	a2 c1 f4 02 c0       	mov    ds:0xc002f4c1,al
c001f3ad:	c3                   	ret    

c001f3ae <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f3ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f3b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f3b6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f3ba:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f3be:	c3                   	ret    

c001f3bf <Vm::fpuAbs(unsigned long long)>:
c001f3bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f3c7:	c3                   	ret    

c001f3c8 <Vm::fpuChs(unsigned long long)>:
c001f3c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f3d0:	f7 d8                	neg    eax
c001f3d2:	83 d2 00             	adc    edx,0x0
c001f3d5:	f7 da                	neg    edx
c001f3d7:	c3                   	ret    

c001f3d8 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f3d8:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f3dc:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f3e1:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f3e5:	eb c7                	jmp    c001f3ae <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f3e7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f3e7:	53                   	push   ebx
c001f3e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f3ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f3f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f3f4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f3f8:	0f af ca             	imul   ecx,edx
c001f3fb:	0f af d8             	imul   ebx,eax
c001f3fe:	f7 e2                	mul    edx
c001f400:	01 d9                	add    ecx,ebx
c001f402:	5b                   	pop    ebx
c001f403:	01 ca                	add    edx,ecx
c001f405:	c3                   	ret    

c001f406 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f406:	83 ec 0c             	sub    esp,0xc
c001f409:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f40d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f411:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f415:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f419:	e8 a6 76 00 00       	call   c0026ac4 <__udivdi3>
c001f41e:	83 c4 1c             	add    esp,0x1c
c001f421:	c3                   	ret    

c001f422 <Vm::fpuSquare(unsigned long long)>:
c001f422:	50                   	push   eax
c001f423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f427:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f42b:	52                   	push   edx
c001f42c:	50                   	push   eax
c001f42d:	52                   	push   edx
c001f42e:	50                   	push   eax
c001f42f:	e8 b3 ff ff ff       	call   c001f3e7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f434:	83 c4 14             	add    esp,0x14
c001f437:	c3                   	ret    

c001f438 <Vm::fpuGetReg(int)>:
c001f438:	83 ec 0c             	sub    esp,0xc
c001f43b:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f440:	76 10                	jbe    c001f452 <Vm::fpuGetReg(int)+0x1a>
c001f442:	83 ec 0c             	sub    esp,0xc
c001f445:	68 3a c3 02 c0       	push   0xc002c33a
c001f44a:	e8 c4 ab ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001f44f:	83 c4 10             	add    esp,0x10
c001f452:	a0 c1 f4 02 c0       	mov    al,ds:0xc002f4c1
c001f457:	b9 08 00 00 00       	mov    ecx,0x8
c001f45c:	c0 e8 03             	shr    al,0x3
c001f45f:	83 e0 07             	and    eax,0x7
c001f462:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f466:	99                   	cdq    
c001f467:	f7 f9                	idiv   ecx
c001f469:	8b 04 d5 c4 f4 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd0b3c]
c001f470:	8b 14 d5 c8 f4 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd0b38]
c001f477:	83 c4 0c             	add    esp,0xc
c001f47a:	c3                   	ret    

c001f47b <Vm::fpuSetReg(int, unsigned long long)>:
c001f47b:	57                   	push   edi
c001f47c:	56                   	push   esi
c001f47d:	52                   	push   edx
c001f47e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f482:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f486:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f48b:	76 10                	jbe    c001f49d <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f48d:	83 ec 0c             	sub    esp,0xc
c001f490:	68 4d c3 02 c0       	push   0xc002c34d
c001f495:	e8 79 ab ff ff       	call   c001a013 <Krnl::panic(char const*)>
c001f49a:	83 c4 10             	add    esp,0x10
c001f49d:	a0 c1 f4 02 c0       	mov    al,ds:0xc002f4c1
c001f4a2:	b9 08 00 00 00       	mov    ecx,0x8
c001f4a7:	c0 e8 03             	shr    al,0x3
c001f4aa:	83 e0 07             	and    eax,0x7
c001f4ad:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f4b1:	99                   	cdq    
c001f4b2:	f7 f9                	idiv   ecx
c001f4b4:	89 34 d5 c4 f4 02 c0 	mov    DWORD PTR [edx*8-0x3ffd0b3c],esi
c001f4bb:	89 3c d5 c8 f4 02 c0 	mov    DWORD PTR [edx*8-0x3ffd0b38],edi
c001f4c2:	58                   	pop    eax
c001f4c3:	5e                   	pop    esi
c001f4c4:	5f                   	pop    edi
c001f4c5:	c3                   	ret    

c001f4c6 <Vm::fpuPush(unsigned long long)>:
c001f4c6:	a0 c1 f4 02 c0       	mov    al,ds:0xc002f4c1
c001f4cb:	c0 e8 03             	shr    al,0x3
c001f4ce:	83 e0 07             	and    eax,0x7
c001f4d1:	83 c0 07             	add    eax,0x7
c001f4d4:	88 c2                	mov    dl,al
c001f4d6:	83 e0 07             	and    eax,0x7
c001f4d9:	83 e2 07             	and    edx,0x7
c001f4dc:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f4e3:	8a 15 c1 f4 02 c0    	mov    dl,BYTE PTR ds:0xc002f4c1
c001f4e9:	83 e2 c7             	and    edx,0xffffffc7
c001f4ec:	09 ca                	or     edx,ecx
c001f4ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f4f2:	88 15 c1 f4 02 c0    	mov    BYTE PTR ds:0xc002f4c1,dl
c001f4f8:	89 0c c5 c8 f4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0b38],ecx
c001f4ff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f503:	89 14 c5 c4 f4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0b3c],edx
c001f50a:	a1 04 f5 02 c0       	mov    eax,ds:0xc002f504
c001f50f:	83 f8 08             	cmp    eax,0x8
c001f512:	75 08                	jne    c001f51c <Vm::fpuPush(unsigned long long)+0x56>
c001f514:	80 0d c0 f4 02 c0 40 	or     BYTE PTR ds:0xc002f4c0,0x40
c001f51b:	c3                   	ret    
c001f51c:	40                   	inc    eax
c001f51d:	a3 04 f5 02 c0       	mov    ds:0xc002f504,eax
c001f522:	c3                   	ret    

c001f523 <Vm::fpuPop()>:
c001f523:	8a 0d c1 f4 02 c0    	mov    cl,BYTE PTR ds:0xc002f4c1
c001f529:	53                   	push   ebx
c001f52a:	c0 e9 03             	shr    cl,0x3
c001f52d:	8a 1d c1 f4 02 c0    	mov    bl,BYTE PTR ds:0xc002f4c1
c001f533:	83 e1 07             	and    ecx,0x7
c001f536:	83 e3 c7             	and    ebx,0xffffffc7
c001f539:	8b 04 cd c4 f4 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd0b3c]
c001f540:	8b 14 cd c8 f4 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd0b38]
c001f547:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f54e:	83 e1 38             	and    ecx,0x38
c001f551:	09 d9                	or     ecx,ebx
c001f553:	88 0d c1 f4 02 c0    	mov    BYTE PTR ds:0xc002f4c1,cl
c001f559:	8b 0d 04 f5 02 c0    	mov    ecx,DWORD PTR ds:0xc002f504
c001f55f:	85 c9                	test   ecx,ecx
c001f561:	74 09                	je     c001f56c <Vm::fpuPop()+0x49>
c001f563:	49                   	dec    ecx
c001f564:	89 0d 04 f5 02 c0    	mov    DWORD PTR ds:0xc002f504,ecx
c001f56a:	eb 07                	jmp    c001f573 <Vm::fpuPop()+0x50>
c001f56c:	80 0d c0 f4 02 c0 40 	or     BYTE PTR ds:0xc002f4c0,0x40
c001f573:	5b                   	pop    ebx
c001f574:	c3                   	ret    

c001f575 <Vm::x87Handler(regs*)>:
c001f575:	55                   	push   ebp
c001f576:	57                   	push   edi
c001f577:	56                   	push   esi
c001f578:	53                   	push   ebx
c001f579:	83 ec 1c             	sub    esp,0x1c
c001f57c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f580:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f585:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f588:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f590:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f594:	50                   	push   eax
c001f595:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f599:	50                   	push   eax
c001f59a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f59e:	50                   	push   eax
c001f59f:	53                   	push   ebx
c001f5a0:	e8 87 a1 ff ff       	call   c001972c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f5a5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f5a8:	83 c4 10             	add    esp,0x10
c001f5ab:	89 c6                	mov    esi,eax
c001f5ad:	80 fa d9             	cmp    dl,0xd9
c001f5b0:	0f 85 52 01 00 00    	jne    c001f708 <Vm::x87Handler(regs*)+0x193>
c001f5b6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5ba:	8d 50 20             	lea    edx,[eax+0x20]
c001f5bd:	80 fa 0e             	cmp    dl,0xe
c001f5c0:	0f 87 86 00 00 00    	ja     c001f64c <Vm::x87Handler(regs*)+0xd7>
c001f5c6:	0f b6 d2             	movzx  edx,dl
c001f5c9:	ff 24 95 60 c3 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3ca0]
c001f5d0:	e8 e7 fc ff ff       	call   c001f2bc <Vm::fpuGet0()>
c001f5d5:	eb 05                	jmp    c001f5dc <Vm::x87Handler(regs*)+0x67>
c001f5d7:	e8 e5 fc ff ff       	call   c001f2c1 <Vm::fpuGet1()>
c001f5dc:	57                   	push   edi
c001f5dd:	57                   	push   edi
c001f5de:	52                   	push   edx
c001f5df:	50                   	push   eax
c001f5e0:	e8 e1 fe ff ff       	call   c001f4c6 <Vm::fpuPush(unsigned long long)>
c001f5e5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f5e9:	83 c4 10             	add    esp,0x10
c001f5ec:	b0 01                	mov    al,0x1
c001f5ee:	e9 e3 09 00 00       	jmp    c001ffd6 <Vm::x87Handler(regs*)+0xa61>
c001f5f3:	83 ec 0c             	sub    esp,0xc
c001f5f6:	6a 00                	push   0x0
c001f5f8:	e8 3b fe ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f5fd:	59                   	pop    ecx
c001f5fe:	5e                   	pop    esi
c001f5ff:	52                   	push   edx
c001f600:	50                   	push   eax
c001f601:	e8 c2 fd ff ff       	call   c001f3c8 <Vm::fpuChs(unsigned long long)>
c001f606:	eb 13                	jmp    c001f61b <Vm::x87Handler(regs*)+0xa6>
c001f608:	83 ec 0c             	sub    esp,0xc
c001f60b:	6a 00                	push   0x0
c001f60d:	e8 26 fe ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f612:	5f                   	pop    edi
c001f613:	5d                   	pop    ebp
c001f614:	52                   	push   edx
c001f615:	50                   	push   eax
c001f616:	e8 a4 fd ff ff       	call   c001f3bf <Vm::fpuAbs(unsigned long long)>
c001f61b:	83 c4 0c             	add    esp,0xc
c001f61e:	52                   	push   edx
c001f61f:	50                   	push   eax
c001f620:	6a 00                	push   0x0
c001f622:	e8 54 fe ff ff       	call   c001f47b <Vm::fpuSetReg(int, unsigned long long)>
c001f627:	eb bc                	jmp    c001f5e5 <Vm::x87Handler(regs*)+0x70>
c001f629:	e8 d3 fc ff ff       	call   c001f301 <Vm::fpuGetLog210()>
c001f62e:	eb ac                	jmp    c001f5dc <Vm::x87Handler(regs*)+0x67>
c001f630:	e8 9c fc ff ff       	call   c001f2d1 <Vm::fpuGetLog2E()>
c001f635:	eb a5                	jmp    c001f5dc <Vm::x87Handler(regs*)+0x67>
c001f637:	e8 8d fc ff ff       	call   c001f2c9 <Vm::fpuGetPi()>
c001f63c:	eb 9e                	jmp    c001f5dc <Vm::x87Handler(regs*)+0x67>
c001f63e:	e8 d6 fc ff ff       	call   c001f319 <Vm::fpuGetLog102()>
c001f643:	eb 97                	jmp    c001f5dc <Vm::x87Handler(regs*)+0x67>
c001f645:	e8 9f fc ff ff       	call   c001f2e9 <Vm::fpuGetLogE2()>
c001f64a:	eb 90                	jmp    c001f5dc <Vm::x87Handler(regs*)+0x67>
c001f64c:	8d 50 40             	lea    edx,[eax+0x40]
c001f64f:	80 fa 07             	cmp    dl,0x7
c001f652:	77 15                	ja     c001f669 <Vm::x87Handler(regs*)+0xf4>
c001f654:	83 ec 0c             	sub    esp,0xc
c001f657:	2d c0 00 00 00       	sub    eax,0xc0
c001f65c:	50                   	push   eax
c001f65d:	e8 d6 fd ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f662:	59                   	pop    ecx
c001f663:	5e                   	pop    esi
c001f664:	e9 75 ff ff ff       	jmp    c001f5de <Vm::x87Handler(regs*)+0x69>
c001f669:	8d 50 38             	lea    edx,[eax+0x38]
c001f66c:	80 fa 07             	cmp    dl,0x7
c001f66f:	77 3c                	ja     c001f6ad <Vm::x87Handler(regs*)+0x138>
c001f671:	83 ec 0c             	sub    esp,0xc
c001f674:	2d c8 00 00 00       	sub    eax,0xc8
c001f679:	50                   	push   eax
c001f67a:	e8 b9 fd ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f67f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f686:	89 c6                	mov    esi,eax
c001f688:	89 d7                	mov    edi,edx
c001f68a:	e8 a9 fd ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f68f:	83 c4 0c             	add    esp,0xc
c001f692:	52                   	push   edx
c001f693:	50                   	push   eax
c001f694:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f698:	2d c8 00 00 00       	sub    eax,0xc8
c001f69d:	50                   	push   eax
c001f69e:	e8 d8 fd ff ff       	call   c001f47b <Vm::fpuSetReg(int, unsigned long long)>
c001f6a3:	83 c4 0c             	add    esp,0xc
c001f6a6:	57                   	push   edi
c001f6a7:	56                   	push   esi
c001f6a8:	e9 73 ff ff ff       	jmp    c001f620 <Vm::x87Handler(regs*)+0xab>
c001f6ad:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f6b1:	84 d2                	test   dl,dl
c001f6b3:	75 0f                	jne    c001f6c4 <Vm::x87Handler(regs*)+0x14f>
c001f6b5:	83 ec 0c             	sub    esp,0xc
c001f6b8:	ff 36                	push   DWORD PTR [esi]
c001f6ba:	e8 c8 fa ff ff       	call   c001f187 <Vm::fpu32ToInternal(unsigned int)>
c001f6bf:	e9 bf 00 00 00       	jmp    c001f783 <Vm::x87Handler(regs*)+0x20e>
c001f6c4:	80 fa 03             	cmp    dl,0x3
c001f6c7:	75 13                	jne    c001f6dc <Vm::x87Handler(regs*)+0x167>
c001f6c9:	e8 55 fe ff ff       	call   c001f523 <Vm::fpuPop()>
c001f6ce:	55                   	push   ebp
c001f6cf:	55                   	push   ebp
c001f6d0:	52                   	push   edx
c001f6d1:	50                   	push   eax
c001f6d2:	e8 4c fa ff ff       	call   c001f123 <Vm::fpuInternalTo32(unsigned long long)>
c001f6d7:	e9 88 00 00 00       	jmp    c001f764 <Vm::x87Handler(regs*)+0x1ef>
c001f6dc:	80 fa 05             	cmp    dl,0x5
c001f6df:	75 0e                	jne    c001f6ef <Vm::x87Handler(regs*)+0x17a>
c001f6e1:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f6e4:	66 a3 c2 f4 02 c0    	mov    ds:0xc002f4c2,ax
c001f6ea:	e9 df 00 00 00       	jmp    c001f7ce <Vm::x87Handler(regs*)+0x259>
c001f6ef:	31 c0                	xor    eax,eax
c001f6f1:	80 fa 07             	cmp    dl,0x7
c001f6f4:	0f 85 dc 08 00 00    	jne    c001ffd6 <Vm::x87Handler(regs*)+0xa61>
c001f6fa:	66 a1 c2 f4 02 c0    	mov    ax,ds:0xc002f4c2
c001f700:	66 89 06             	mov    WORD PTR [esi],ax
c001f703:	e9 c6 00 00 00       	jmp    c001f7ce <Vm::x87Handler(regs*)+0x259>
c001f708:	80 fa d8             	cmp    dl,0xd8
c001f70b:	0f 84 c9 00 00 00    	je     c001f7da <Vm::x87Handler(regs*)+0x265>
c001f711:	80 fa dc             	cmp    dl,0xdc
c001f714:	0f 84 0d 02 00 00    	je     c001f927 <Vm::x87Handler(regs*)+0x3b2>
c001f71a:	80 fa de             	cmp    dl,0xde
c001f71d:	0f 84 cd 02 00 00    	je     c001f9f0 <Vm::x87Handler(regs*)+0x47b>
c001f723:	80 fa dd             	cmp    dl,0xdd
c001f726:	0f 84 5f 04 00 00    	je     c001fb8b <Vm::x87Handler(regs*)+0x616>
c001f72c:	80 fa da             	cmp    dl,0xda
c001f72f:	0f 84 24 05 00 00    	je     c001fc59 <Vm::x87Handler(regs*)+0x6e4>
c001f735:	80 fa df             	cmp    dl,0xdf
c001f738:	0f 84 68 05 00 00    	je     c001fca6 <Vm::x87Handler(regs*)+0x731>
c001f73e:	31 c0                	xor    eax,eax
c001f740:	80 fa db             	cmp    dl,0xdb
c001f743:	0f 85 8d 08 00 00    	jne    c001ffd6 <Vm::x87Handler(regs*)+0xa61>
c001f749:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f74d:	80 fa 03             	cmp    dl,0x3
c001f750:	0f 85 70 06 00 00    	jne    c001fdc6 <Vm::x87Handler(regs*)+0x851>
c001f756:	e8 c8 fd ff ff       	call   c001f523 <Vm::fpuPop()>
c001f75b:	55                   	push   ebp
c001f75c:	55                   	push   ebp
c001f75d:	52                   	push   edx
c001f75e:	50                   	push   eax
c001f75f:	e8 71 fa ff ff       	call   c001f1d5 <Vm::fpuFloatToLong(unsigned long long)>
c001f764:	83 c4 10             	add    esp,0x10
c001f767:	89 06                	mov    DWORD PTR [esi],eax
c001f769:	eb 63                	jmp    c001f7ce <Vm::x87Handler(regs*)+0x259>
c001f76b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f76f:	84 d2                	test   dl,dl
c001f771:	0f 85 e6 05 00 00    	jne    c001fd5d <Vm::x87Handler(regs*)+0x7e8>
c001f777:	57                   	push   edi
c001f778:	57                   	push   edi
c001f779:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f77c:	ff 36                	push   DWORD PTR [esi]
c001f77e:	e8 49 fa ff ff       	call   c001f1cc <Vm::fpu64ToInternal(unsigned long long)>
c001f783:	5e                   	pop    esi
c001f784:	5f                   	pop    edi
c001f785:	52                   	push   edx
c001f786:	50                   	push   eax
c001f787:	e8 3a fd ff ff       	call   c001f4c6 <Vm::fpuPush(unsigned long long)>
c001f78c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f790:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f793:	e9 51 fe ff ff       	jmp    c001f5e9 <Vm::x87Handler(regs*)+0x74>
c001f798:	80 fa 03             	cmp    dl,0x3
c001f79b:	0f 85 d7 06 00 00    	jne    c001fe78 <Vm::x87Handler(regs*)+0x903>
c001f7a1:	57                   	push   edi
c001f7a2:	57                   	push   edi
c001f7a3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f7a6:	ff 36                	push   DWORD PTR [esi]
c001f7a8:	e8 1f fa ff ff       	call   c001f1cc <Vm::fpu64ToInternal(unsigned long long)>
c001f7ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7b4:	89 c6                	mov    esi,eax
c001f7b6:	89 d7                	mov    edi,edx
c001f7b8:	e8 7b fc ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f7bd:	57                   	push   edi
c001f7be:	56                   	push   esi
c001f7bf:	52                   	push   edx
c001f7c0:	50                   	push   eax
c001f7c1:	e8 95 fb ff ff       	call   c001f35b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f7c6:	83 c4 20             	add    esp,0x20
c001f7c9:	e8 55 fd ff ff       	call   c001f523 <Vm::fpuPop()>
c001f7ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7d2:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f7d5:	e9 12 fe ff ff       	jmp    c001f5ec <Vm::x87Handler(regs*)+0x77>
c001f7da:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7de:	8d 50 40             	lea    edx,[eax+0x40]
c001f7e1:	80 fa 07             	cmp    dl,0x7
c001f7e4:	77 29                	ja     c001f80f <Vm::x87Handler(regs*)+0x29a>
c001f7e6:	83 ec 0c             	sub    esp,0xc
c001f7e9:	2d c0 00 00 00       	sub    eax,0xc0
c001f7ee:	50                   	push   eax
c001f7ef:	e8 44 fc ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f7f4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7fb:	89 c6                	mov    esi,eax
c001f7fd:	89 d7                	mov    edi,edx
c001f7ff:	e8 34 fc ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f804:	57                   	push   edi
c001f805:	56                   	push   esi
c001f806:	52                   	push   edx
c001f807:	50                   	push   eax
c001f808:	e8 a1 fb ff ff       	call   c001f3ae <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f80d:	eb 2f                	jmp    c001f83e <Vm::x87Handler(regs*)+0x2c9>
c001f80f:	8d 50 38             	lea    edx,[eax+0x38]
c001f812:	80 fa 07             	cmp    dl,0x7
c001f815:	77 2f                	ja     c001f846 <Vm::x87Handler(regs*)+0x2d1>
c001f817:	83 ec 0c             	sub    esp,0xc
c001f81a:	2d c8 00 00 00       	sub    eax,0xc8
c001f81f:	50                   	push   eax
c001f820:	e8 13 fc ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f825:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f82c:	89 c6                	mov    esi,eax
c001f82e:	89 d7                	mov    edi,edx
c001f830:	e8 03 fc ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f835:	57                   	push   edi
c001f836:	56                   	push   esi
c001f837:	52                   	push   edx
c001f838:	50                   	push   eax
c001f839:	e8 a9 fb ff ff       	call   c001f3e7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f83e:	83 c4 1c             	add    esp,0x1c
c001f841:	e9 d8 fd ff ff       	jmp    c001f61e <Vm::x87Handler(regs*)+0xa9>
c001f846:	8d 50 30             	lea    edx,[eax+0x30]
c001f849:	80 fa 07             	cmp    dl,0x7
c001f84c:	77 0d                	ja     c001f85b <Vm::x87Handler(regs*)+0x2e6>
c001f84e:	83 ec 0c             	sub    esp,0xc
c001f851:	2d d0 00 00 00       	sub    eax,0xd0
c001f856:	e9 99 03 00 00       	jmp    c001fbf4 <Vm::x87Handler(regs*)+0x67f>
c001f85b:	8d 50 28             	lea    edx,[eax+0x28]
c001f85e:	80 fa 07             	cmp    dl,0x7
c001f861:	77 0d                	ja     c001f870 <Vm::x87Handler(regs*)+0x2fb>
c001f863:	83 ec 0c             	sub    esp,0xc
c001f866:	2d d8 00 00 00       	sub    eax,0xd8
c001f86b:	e9 c0 03 00 00       	jmp    c001fc30 <Vm::x87Handler(regs*)+0x6bb>
c001f870:	8d 50 20             	lea    edx,[eax+0x20]
c001f873:	80 fa 07             	cmp    dl,0x7
c001f876:	77 1b                	ja     c001f893 <Vm::x87Handler(regs*)+0x31e>
c001f878:	83 ec 0c             	sub    esp,0xc
c001f87b:	2d e0 00 00 00       	sub    eax,0xe0
c001f880:	50                   	push   eax
c001f881:	e8 b2 fb ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f886:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f88d:	89 c6                	mov    esi,eax
c001f88f:	89 d7                	mov    edi,edx
c001f891:	eb 22                	jmp    c001f8b5 <Vm::x87Handler(regs*)+0x340>
c001f893:	8d 50 18             	lea    edx,[eax+0x18]
c001f896:	80 fa 07             	cmp    dl,0x7
c001f899:	77 2d                	ja     c001f8c8 <Vm::x87Handler(regs*)+0x353>
c001f89b:	83 ec 0c             	sub    esp,0xc
c001f89e:	6a 00                	push   0x0
c001f8a0:	e8 93 fb ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f8a5:	89 c6                	mov    esi,eax
c001f8a7:	89 d7                	mov    edi,edx
c001f8a9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8ad:	2d e8 00 00 00       	sub    eax,0xe8
c001f8b2:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8b5:	e8 7e fb ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f8ba:	57                   	push   edi
c001f8bb:	56                   	push   esi
c001f8bc:	52                   	push   edx
c001f8bd:	50                   	push   eax
c001f8be:	e8 15 fb ff ff       	call   c001f3d8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f8c3:	e9 76 ff ff ff       	jmp    c001f83e <Vm::x87Handler(regs*)+0x2c9>
c001f8c8:	8d 50 10             	lea    edx,[eax+0x10]
c001f8cb:	80 fa 07             	cmp    dl,0x7
c001f8ce:	77 1b                	ja     c001f8eb <Vm::x87Handler(regs*)+0x376>
c001f8d0:	83 ec 0c             	sub    esp,0xc
c001f8d3:	2d f0 00 00 00       	sub    eax,0xf0
c001f8d8:	50                   	push   eax
c001f8d9:	e8 5a fb ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f8de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8e5:	89 c6                	mov    esi,eax
c001f8e7:	89 d7                	mov    edi,edx
c001f8e9:	eb 22                	jmp    c001f90d <Vm::x87Handler(regs*)+0x398>
c001f8eb:	3c f7                	cmp    al,0xf7
c001f8ed:	0f 86 d1 03 00 00    	jbe    c001fcc4 <Vm::x87Handler(regs*)+0x74f>
c001f8f3:	83 ec 0c             	sub    esp,0xc
c001f8f6:	6a 00                	push   0x0
c001f8f8:	e8 3b fb ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f8fd:	89 c6                	mov    esi,eax
c001f8ff:	89 d7                	mov    edi,edx
c001f901:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f905:	2d f8 00 00 00       	sub    eax,0xf8
c001f90a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f90d:	e8 26 fb ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f912:	57                   	push   edi
c001f913:	56                   	push   esi
c001f914:	52                   	push   edx
c001f915:	50                   	push   eax
c001f916:	e8 eb fa ff ff       	call   c001f406 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f91b:	83 c4 1c             	add    esp,0x1c
c001f91e:	52                   	push   edx
c001f91f:	50                   	push   eax
c001f920:	6a 00                	push   0x0
c001f922:	e9 51 02 00 00       	jmp    c001fb78 <Vm::x87Handler(regs*)+0x603>
c001f927:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f92b:	8d 50 40             	lea    edx,[eax+0x40]
c001f92e:	80 fa 07             	cmp    dl,0x7
c001f931:	77 37                	ja     c001f96a <Vm::x87Handler(regs*)+0x3f5>
c001f933:	83 ec 0c             	sub    esp,0xc
c001f936:	2d c0 00 00 00       	sub    eax,0xc0
c001f93b:	50                   	push   eax
c001f93c:	e8 f7 fa ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f941:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f948:	89 c6                	mov    esi,eax
c001f94a:	89 d7                	mov    edi,edx
c001f94c:	e8 e7 fa ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f951:	57                   	push   edi
c001f952:	56                   	push   esi
c001f953:	52                   	push   edx
c001f954:	50                   	push   eax
c001f955:	e8 54 fa ff ff       	call   c001f3ae <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f95a:	83 c4 1c             	add    esp,0x1c
c001f95d:	52                   	push   edx
c001f95e:	50                   	push   eax
c001f95f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f963:	2d c0 00 00 00       	sub    eax,0xc0
c001f968:	eb 3d                	jmp    c001f9a7 <Vm::x87Handler(regs*)+0x432>
c001f96a:	8d 50 38             	lea    edx,[eax+0x38]
c001f96d:	80 fa 07             	cmp    dl,0x7
c001f970:	77 3b                	ja     c001f9ad <Vm::x87Handler(regs*)+0x438>
c001f972:	83 ec 0c             	sub    esp,0xc
c001f975:	2d c8 00 00 00       	sub    eax,0xc8
c001f97a:	50                   	push   eax
c001f97b:	e8 b8 fa ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f980:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f987:	89 c6                	mov    esi,eax
c001f989:	89 d7                	mov    edi,edx
c001f98b:	e8 a8 fa ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f990:	57                   	push   edi
c001f991:	56                   	push   esi
c001f992:	52                   	push   edx
c001f993:	50                   	push   eax
c001f994:	e8 4e fa ff ff       	call   c001f3e7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f999:	83 c4 1c             	add    esp,0x1c
c001f99c:	52                   	push   edx
c001f99d:	50                   	push   eax
c001f99e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9a2:	2d c8 00 00 00       	sub    eax,0xc8
c001f9a7:	50                   	push   eax
c001f9a8:	e9 75 fc ff ff       	jmp    c001f622 <Vm::x87Handler(regs*)+0xad>
c001f9ad:	83 c0 18             	add    eax,0x18
c001f9b0:	3c 07                	cmp    al,0x7
c001f9b2:	0f 87 3b 04 00 00    	ja     c001fdf3 <Vm::x87Handler(regs*)+0x87e>
c001f9b8:	83 ec 0c             	sub    esp,0xc
c001f9bb:	6a 00                	push   0x0
c001f9bd:	e8 76 fa ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f9c2:	89 c6                	mov    esi,eax
c001f9c4:	89 d7                	mov    edi,edx
c001f9c6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9ca:	2d e8 00 00 00       	sub    eax,0xe8
c001f9cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9d2:	e8 61 fa ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001f9d7:	57                   	push   edi
c001f9d8:	56                   	push   esi
c001f9d9:	52                   	push   edx
c001f9da:	50                   	push   eax
c001f9db:	e8 f8 f9 ff ff       	call   c001f3d8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f9e0:	83 c4 1c             	add    esp,0x1c
c001f9e3:	52                   	push   edx
c001f9e4:	50                   	push   eax
c001f9e5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9e9:	2d e8 00 00 00       	sub    eax,0xe8
c001f9ee:	eb b7                	jmp    c001f9a7 <Vm::x87Handler(regs*)+0x432>
c001f9f0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9f4:	8d 50 40             	lea    edx,[eax+0x40]
c001f9f7:	80 fa 07             	cmp    dl,0x7
c001f9fa:	77 3a                	ja     c001fa36 <Vm::x87Handler(regs*)+0x4c1>
c001f9fc:	83 ec 0c             	sub    esp,0xc
c001f9ff:	2d c0 00 00 00       	sub    eax,0xc0
c001fa04:	50                   	push   eax
c001fa05:	e8 2e fa ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fa0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa11:	89 c6                	mov    esi,eax
c001fa13:	89 d7                	mov    edi,edx
c001fa15:	e8 1e fa ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fa1a:	57                   	push   edi
c001fa1b:	56                   	push   esi
c001fa1c:	52                   	push   edx
c001fa1d:	50                   	push   eax
c001fa1e:	e8 8b f9 ff ff       	call   c001f3ae <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fa23:	83 c4 1c             	add    esp,0x1c
c001fa26:	52                   	push   edx
c001fa27:	50                   	push   eax
c001fa28:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa2c:	2d c0 00 00 00       	sub    eax,0xc0
c001fa31:	e9 9e 01 00 00       	jmp    c001fbd4 <Vm::x87Handler(regs*)+0x65f>
c001fa36:	8d 50 20             	lea    edx,[eax+0x20]
c001fa39:	80 fa 07             	cmp    dl,0x7
c001fa3c:	77 3a                	ja     c001fa78 <Vm::x87Handler(regs*)+0x503>
c001fa3e:	83 ec 0c             	sub    esp,0xc
c001fa41:	2d e0 00 00 00       	sub    eax,0xe0
c001fa46:	50                   	push   eax
c001fa47:	e8 ec f9 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fa4c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa53:	89 c6                	mov    esi,eax
c001fa55:	89 d7                	mov    edi,edx
c001fa57:	e8 dc f9 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fa5c:	57                   	push   edi
c001fa5d:	56                   	push   esi
c001fa5e:	52                   	push   edx
c001fa5f:	50                   	push   eax
c001fa60:	e8 73 f9 ff ff       	call   c001f3d8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fa65:	83 c4 1c             	add    esp,0x1c
c001fa68:	52                   	push   edx
c001fa69:	50                   	push   eax
c001fa6a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa6e:	2d e0 00 00 00       	sub    eax,0xe0
c001fa73:	e9 5c 01 00 00       	jmp    c001fbd4 <Vm::x87Handler(regs*)+0x65f>
c001fa78:	8d 50 18             	lea    edx,[eax+0x18]
c001fa7b:	80 fa 07             	cmp    dl,0x7
c001fa7e:	77 3b                	ja     c001fabb <Vm::x87Handler(regs*)+0x546>
c001fa80:	83 ec 0c             	sub    esp,0xc
c001fa83:	6a 00                	push   0x0
c001fa85:	e8 ae f9 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fa8a:	89 c6                	mov    esi,eax
c001fa8c:	89 d7                	mov    edi,edx
c001fa8e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa92:	2d e8 00 00 00       	sub    eax,0xe8
c001fa97:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa9a:	e8 99 f9 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fa9f:	57                   	push   edi
c001faa0:	56                   	push   esi
c001faa1:	52                   	push   edx
c001faa2:	50                   	push   eax
c001faa3:	e8 30 f9 ff ff       	call   c001f3d8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001faa8:	83 c4 1c             	add    esp,0x1c
c001faab:	52                   	push   edx
c001faac:	50                   	push   eax
c001faad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fab1:	2d e8 00 00 00       	sub    eax,0xe8
c001fab6:	e9 19 01 00 00       	jmp    c001fbd4 <Vm::x87Handler(regs*)+0x65f>
c001fabb:	8d 50 38             	lea    edx,[eax+0x38]
c001fabe:	80 fa 07             	cmp    dl,0x7
c001fac1:	77 37                	ja     c001fafa <Vm::x87Handler(regs*)+0x585>
c001fac3:	83 ec 0c             	sub    esp,0xc
c001fac6:	2d c8 00 00 00       	sub    eax,0xc8
c001facb:	50                   	push   eax
c001facc:	e8 67 f9 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fad1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fad8:	89 c6                	mov    esi,eax
c001fada:	89 d7                	mov    edi,edx
c001fadc:	e8 57 f9 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fae1:	57                   	push   edi
c001fae2:	56                   	push   esi
c001fae3:	52                   	push   edx
c001fae4:	50                   	push   eax
c001fae5:	e8 fd f8 ff ff       	call   c001f3e7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001faea:	83 c4 1c             	add    esp,0x1c
c001faed:	52                   	push   edx
c001faee:	50                   	push   eax
c001faef:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faf3:	2d c8 00 00 00       	sub    eax,0xc8
c001faf8:	eb 7d                	jmp    c001fb77 <Vm::x87Handler(regs*)+0x602>
c001fafa:	3c f7                	cmp    al,0xf7
c001fafc:	76 38                	jbe    c001fb36 <Vm::x87Handler(regs*)+0x5c1>
c001fafe:	83 ec 0c             	sub    esp,0xc
c001fb01:	6a 00                	push   0x0
c001fb03:	e8 30 f9 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fb08:	89 c6                	mov    esi,eax
c001fb0a:	89 d7                	mov    edi,edx
c001fb0c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb10:	2d f8 00 00 00       	sub    eax,0xf8
c001fb15:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb18:	e8 1b f9 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fb1d:	57                   	push   edi
c001fb1e:	56                   	push   esi
c001fb1f:	52                   	push   edx
c001fb20:	50                   	push   eax
c001fb21:	e8 e0 f8 ff ff       	call   c001f406 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb26:	83 c4 1c             	add    esp,0x1c
c001fb29:	52                   	push   edx
c001fb2a:	50                   	push   eax
c001fb2b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb2f:	2d f8 00 00 00       	sub    eax,0xf8
c001fb34:	eb 41                	jmp    c001fb77 <Vm::x87Handler(regs*)+0x602>
c001fb36:	8d 50 10             	lea    edx,[eax+0x10]
c001fb39:	80 fa 07             	cmp    dl,0x7
c001fb3c:	0f 87 5a 01 00 00    	ja     c001fc9c <Vm::x87Handler(regs*)+0x727>
c001fb42:	83 ec 0c             	sub    esp,0xc
c001fb45:	2d f0 00 00 00       	sub    eax,0xf0
c001fb4a:	50                   	push   eax
c001fb4b:	e8 e8 f8 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fb50:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb57:	89 c6                	mov    esi,eax
c001fb59:	89 d7                	mov    edi,edx
c001fb5b:	e8 d8 f8 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fb60:	57                   	push   edi
c001fb61:	56                   	push   esi
c001fb62:	52                   	push   edx
c001fb63:	50                   	push   eax
c001fb64:	e8 9d f8 ff ff       	call   c001f406 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb69:	83 c4 1c             	add    esp,0x1c
c001fb6c:	52                   	push   edx
c001fb6d:	50                   	push   eax
c001fb6e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb72:	2d f0 00 00 00       	sub    eax,0xf0
c001fb77:	50                   	push   eax
c001fb78:	e8 fe f8 ff ff       	call   c001f47b <Vm::fpuSetReg(int, unsigned long long)>
c001fb7d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb81:	e8 9d f9 ff ff       	call   c001f523 <Vm::fpuPop()>
c001fb86:	e9 5e fa ff ff       	jmp    c001f5e9 <Vm::x87Handler(regs*)+0x74>
c001fb8b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb8f:	8d 50 30             	lea    edx,[eax+0x30]
c001fb92:	80 fa 07             	cmp    dl,0x7
c001fb95:	77 1d                	ja     c001fbb4 <Vm::x87Handler(regs*)+0x63f>
c001fb97:	83 ec 0c             	sub    esp,0xc
c001fb9a:	6a 00                	push   0x0
c001fb9c:	e8 97 f8 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fba1:	83 c4 0c             	add    esp,0xc
c001fba4:	52                   	push   edx
c001fba5:	50                   	push   eax
c001fba6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbaa:	2d d0 00 00 00       	sub    eax,0xd0
c001fbaf:	e9 f3 fd ff ff       	jmp    c001f9a7 <Vm::x87Handler(regs*)+0x432>
c001fbb4:	8d 50 28             	lea    edx,[eax+0x28]
c001fbb7:	80 fa 07             	cmp    dl,0x7
c001fbba:	77 28                	ja     c001fbe4 <Vm::x87Handler(regs*)+0x66f>
c001fbbc:	83 ec 0c             	sub    esp,0xc
c001fbbf:	6a 00                	push   0x0
c001fbc1:	e8 72 f8 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fbc6:	83 c4 0c             	add    esp,0xc
c001fbc9:	52                   	push   edx
c001fbca:	50                   	push   eax
c001fbcb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbcf:	2d d8 00 00 00       	sub    eax,0xd8
c001fbd4:	50                   	push   eax
c001fbd5:	e8 a1 f8 ff ff       	call   c001f47b <Vm::fpuSetReg(int, unsigned long long)>
c001fbda:	e8 44 f9 ff ff       	call   c001f523 <Vm::fpuPop()>
c001fbdf:	e9 01 fa ff ff       	jmp    c001f5e5 <Vm::x87Handler(regs*)+0x70>
c001fbe4:	8d 50 20             	lea    edx,[eax+0x20]
c001fbe7:	80 fa 07             	cmp    dl,0x7
c001fbea:	77 30                	ja     c001fc1c <Vm::x87Handler(regs*)+0x6a7>
c001fbec:	83 ec 0c             	sub    esp,0xc
c001fbef:	2d e0 00 00 00       	sub    eax,0xe0
c001fbf4:	50                   	push   eax
c001fbf5:	e8 3e f8 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fbfa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc01:	89 c6                	mov    esi,eax
c001fc03:	89 d7                	mov    edi,edx
c001fc05:	e8 2e f8 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fc0a:	57                   	push   edi
c001fc0b:	56                   	push   esi
c001fc0c:	52                   	push   edx
c001fc0d:	50                   	push   eax
c001fc0e:	e8 48 f7 ff ff       	call   c001f35b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc13:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fc17:	e9 54 02 00 00       	jmp    c001fe70 <Vm::x87Handler(regs*)+0x8fb>
c001fc1c:	8d 50 18             	lea    edx,[eax+0x18]
c001fc1f:	80 fa 07             	cmp    dl,0x7
c001fc22:	0f 87 43 fb ff ff    	ja     c001f76b <Vm::x87Handler(regs*)+0x1f6>
c001fc28:	83 ec 0c             	sub    esp,0xc
c001fc2b:	2d e8 00 00 00       	sub    eax,0xe8
c001fc30:	50                   	push   eax
c001fc31:	e8 02 f8 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fc36:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc3d:	89 c6                	mov    esi,eax
c001fc3f:	89 d7                	mov    edi,edx
c001fc41:	e8 f2 f7 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fc46:	57                   	push   edi
c001fc47:	56                   	push   esi
c001fc48:	52                   	push   edx
c001fc49:	50                   	push   eax
c001fc4a:	e8 0c f7 ff ff       	call   c001f35b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc4f:	83 c4 20             	add    esp,0x20
c001fc52:	e8 cc f8 ff ff       	call   c001f523 <Vm::fpuPop()>
c001fc57:	eb 62                	jmp    c001fcbb <Vm::x87Handler(regs*)+0x746>
c001fc59:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fc5d:	0f 85 0f 01 00 00    	jne    c001fd72 <Vm::x87Handler(regs*)+0x7fd>
c001fc63:	83 ec 0c             	sub    esp,0xc
c001fc66:	6a 01                	push   0x1
c001fc68:	e8 cb f7 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fc6d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc74:	89 c6                	mov    esi,eax
c001fc76:	89 d7                	mov    edi,edx
c001fc78:	e8 bb f7 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fc7d:	57                   	push   edi
c001fc7e:	56                   	push   esi
c001fc7f:	52                   	push   edx
c001fc80:	50                   	push   eax
c001fc81:	e8 d5 f6 ff ff       	call   c001f35b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc86:	83 c4 20             	add    esp,0x20
c001fc89:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fc8d:	e8 91 f8 ff ff       	call   c001f523 <Vm::fpuPop()>
c001fc92:	e8 8c f8 ff ff       	call   c001f523 <Vm::fpuPop()>
c001fc97:	e9 50 f9 ff ff       	jmp    c001f5ec <Vm::x87Handler(regs*)+0x77>
c001fc9c:	3c d9                	cmp    al,0xd9
c001fc9e:	0f 85 b5 02 00 00    	jne    c001ff59 <Vm::x87Handler(regs*)+0x9e4>
c001fca4:	eb bd                	jmp    c001fc63 <Vm::x87Handler(regs*)+0x6ee>
c001fca6:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fcaa:	0f 85 ea 02 00 00    	jne    c001ff9a <Vm::x87Handler(regs*)+0xa25>
c001fcb0:	0f b7 05 c0 f4 02 c0 	movzx  eax,WORD PTR ds:0xc002f4c0
c001fcb7:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fcbb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fcbf:	e9 28 f9 ff ff       	jmp    c001f5ec <Vm::x87Handler(regs*)+0x77>
c001fcc4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcc8:	84 d2                	test   dl,dl
c001fcca:	75 0f                	jne    c001fcdb <Vm::x87Handler(regs*)+0x766>
c001fccc:	83 ec 0c             	sub    esp,0xc
c001fccf:	ff 36                	push   DWORD PTR [esi]
c001fcd1:	e8 b1 f4 ff ff       	call   c001f187 <Vm::fpu32ToInternal(unsigned int)>
c001fcd6:	e9 2c 01 00 00       	jmp    c001fe07 <Vm::x87Handler(regs*)+0x892>
c001fcdb:	80 fa 01             	cmp    dl,0x1
c001fcde:	75 0f                	jne    c001fcef <Vm::x87Handler(regs*)+0x77a>
c001fce0:	83 ec 0c             	sub    esp,0xc
c001fce3:	ff 36                	push   DWORD PTR [esi]
c001fce5:	e8 9d f4 ff ff       	call   c001f187 <Vm::fpu32ToInternal(unsigned int)>
c001fcea:	e9 81 02 00 00       	jmp    c001ff70 <Vm::x87Handler(regs*)+0x9fb>
c001fcef:	80 fa 04             	cmp    dl,0x4
c001fcf2:	75 0f                	jne    c001fd03 <Vm::x87Handler(regs*)+0x78e>
c001fcf4:	83 ec 0c             	sub    esp,0xc
c001fcf7:	ff 36                	push   DWORD PTR [esi]
c001fcf9:	e8 89 f4 ff ff       	call   c001f187 <Vm::fpu32ToInternal(unsigned int)>
c001fcfe:	e9 86 01 00 00       	jmp    c001fe89 <Vm::x87Handler(regs*)+0x914>
c001fd03:	80 fa 05             	cmp    dl,0x5
c001fd06:	75 1b                	jne    c001fd23 <Vm::x87Handler(regs*)+0x7ae>
c001fd08:	83 ec 0c             	sub    esp,0xc
c001fd0b:	6a 00                	push   0x0
c001fd0d:	e8 26 f7 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fd12:	89 c7                	mov    edi,eax
c001fd14:	89 d5                	mov    ebp,edx
c001fd16:	58                   	pop    eax
c001fd17:	ff 36                	push   DWORD PTR [esi]
c001fd19:	e8 69 f4 ff ff       	call   c001f187 <Vm::fpu32ToInternal(unsigned int)>
c001fd1e:	e9 a3 01 00 00       	jmp    c001fec6 <Vm::x87Handler(regs*)+0x951>
c001fd23:	80 fa 06             	cmp    dl,0x6
c001fd26:	75 0f                	jne    c001fd37 <Vm::x87Handler(regs*)+0x7c2>
c001fd28:	83 ec 0c             	sub    esp,0xc
c001fd2b:	ff 36                	push   DWORD PTR [esi]
c001fd2d:	e8 55 f4 ff ff       	call   c001f187 <Vm::fpu32ToInternal(unsigned int)>
c001fd32:	e9 ae 01 00 00       	jmp    c001fee5 <Vm::x87Handler(regs*)+0x970>
c001fd37:	31 c0                	xor    eax,eax
c001fd39:	80 fa 07             	cmp    dl,0x7
c001fd3c:	0f 85 94 02 00 00    	jne    c001ffd6 <Vm::x87Handler(regs*)+0xa61>
c001fd42:	83 ec 0c             	sub    esp,0xc
c001fd45:	6a 00                	push   0x0
c001fd47:	e8 ec f6 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fd4c:	89 c7                	mov    edi,eax
c001fd4e:	89 d5                	mov    ebp,edx
c001fd50:	58                   	pop    eax
c001fd51:	ff 36                	push   DWORD PTR [esi]
c001fd53:	e8 2f f4 ff ff       	call   c001f187 <Vm::fpu32ToInternal(unsigned int)>
c001fd58:	e9 cb 01 00 00       	jmp    c001ff28 <Vm::x87Handler(regs*)+0x9b3>
c001fd5d:	80 fa 03             	cmp    dl,0x3
c001fd60:	0f 85 d3 01 00 00    	jne    c001ff39 <Vm::x87Handler(regs*)+0x9c4>
c001fd66:	e8 b8 f7 ff ff       	call   c001f523 <Vm::fpuPop()>
c001fd6b:	51                   	push   ecx
c001fd6c:	51                   	push   ecx
c001fd6d:	e9 de 01 00 00       	jmp    c001ff50 <Vm::x87Handler(regs*)+0x9db>
c001fd72:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd76:	80 fa 01             	cmp    dl,0x1
c001fd79:	75 09                	jne    c001fd84 <Vm::x87Handler(regs*)+0x80f>
c001fd7b:	57                   	push   edi
c001fd7c:	57                   	push   edi
c001fd7d:	8b 06                	mov    eax,DWORD PTR [esi]
c001fd7f:	e9 e3 01 00 00       	jmp    c001ff67 <Vm::x87Handler(regs*)+0x9f2>
c001fd84:	80 fa 04             	cmp    dl,0x4
c001fd87:	75 12                	jne    c001fd9b <Vm::x87Handler(regs*)+0x826>
c001fd89:	31 d2                	xor    edx,edx
c001fd8b:	51                   	push   ecx
c001fd8c:	51                   	push   ecx
c001fd8d:	8b 06                	mov    eax,DWORD PTR [esi]
c001fd8f:	52                   	push   edx
c001fd90:	50                   	push   eax
c001fd91:	e8 d0 f4 ff ff       	call   c001f266 <Vm::fpuLongToFloat(long long)>
c001fd96:	e9 ee 00 00 00       	jmp    c001fe89 <Vm::x87Handler(regs*)+0x914>
c001fd9b:	31 c0                	xor    eax,eax
c001fd9d:	80 fa 07             	cmp    dl,0x7
c001fda0:	0f 85 30 02 00 00    	jne    c001ffd6 <Vm::x87Handler(regs*)+0xa61>
c001fda6:	83 ec 0c             	sub    esp,0xc
c001fda9:	6a 00                	push   0x0
c001fdab:	e8 88 f6 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fdb0:	89 c7                	mov    edi,eax
c001fdb2:	89 d5                	mov    ebp,edx
c001fdb4:	58                   	pop    eax
c001fdb5:	8b 06                	mov    eax,DWORD PTR [esi]
c001fdb7:	5a                   	pop    edx
c001fdb8:	31 d2                	xor    edx,edx
c001fdba:	52                   	push   edx
c001fdbb:	50                   	push   eax
c001fdbc:	e8 a5 f4 ff ff       	call   c001f266 <Vm::fpuLongToFloat(long long)>
c001fdc1:	e9 62 01 00 00       	jmp    c001ff28 <Vm::x87Handler(regs*)+0x9b3>
c001fdc6:	84 d2                	test   dl,dl
c001fdc8:	75 0d                	jne    c001fdd7 <Vm::x87Handler(regs*)+0x862>
c001fdca:	31 d2                	xor    edx,edx
c001fdcc:	55                   	push   ebp
c001fdcd:	55                   	push   ebp
c001fdce:	8b 06                	mov    eax,DWORD PTR [esi]
c001fdd0:	52                   	push   edx
c001fdd1:	50                   	push   eax
c001fdd2:	e9 d3 01 00 00       	jmp    c001ffaa <Vm::x87Handler(regs*)+0xa35>
c001fdd7:	31 c0                	xor    eax,eax
c001fdd9:	80 fa 02             	cmp    dl,0x2
c001fddc:	0f 85 f4 01 00 00    	jne    c001ffd6 <Vm::x87Handler(regs*)+0xa61>
c001fde2:	83 ec 0c             	sub    esp,0xc
c001fde5:	6a 00                	push   0x0
c001fde7:	e8 4c f6 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fdec:	59                   	pop    ecx
c001fded:	5f                   	pop    edi
c001fdee:	e9 6a f9 ff ff       	jmp    c001f75d <Vm::x87Handler(regs*)+0x1e8>
c001fdf3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fdf7:	84 d2                	test   dl,dl
c001fdf9:	75 2a                	jne    c001fe25 <Vm::x87Handler(regs*)+0x8b0>
c001fdfb:	50                   	push   eax
c001fdfc:	50                   	push   eax
c001fdfd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe00:	ff 36                	push   DWORD PTR [esi]
c001fe02:	e8 c5 f3 ff ff       	call   c001f1cc <Vm::fpu64ToInternal(unsigned long long)>
c001fe07:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe0e:	89 c6                	mov    esi,eax
c001fe10:	89 d7                	mov    edi,edx
c001fe12:	e8 21 f6 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fe17:	57                   	push   edi
c001fe18:	56                   	push   esi
c001fe19:	52                   	push   edx
c001fe1a:	50                   	push   eax
c001fe1b:	e8 8e f5 ff ff       	call   c001f3ae <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe20:	e9 64 01 00 00       	jmp    c001ff89 <Vm::x87Handler(regs*)+0xa14>
c001fe25:	80 fa 01             	cmp    dl,0x1
c001fe28:	75 11                	jne    c001fe3b <Vm::x87Handler(regs*)+0x8c6>
c001fe2a:	50                   	push   eax
c001fe2b:	50                   	push   eax
c001fe2c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe2f:	ff 36                	push   DWORD PTR [esi]
c001fe31:	e8 96 f3 ff ff       	call   c001f1cc <Vm::fpu64ToInternal(unsigned long long)>
c001fe36:	e9 35 01 00 00       	jmp    c001ff70 <Vm::x87Handler(regs*)+0x9fb>
c001fe3b:	80 fa 02             	cmp    dl,0x2
c001fe3e:	0f 85 54 f9 ff ff    	jne    c001f798 <Vm::x87Handler(regs*)+0x223>
c001fe44:	55                   	push   ebp
c001fe45:	55                   	push   ebp
c001fe46:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe49:	ff 36                	push   DWORD PTR [esi]
c001fe4b:	e8 7c f3 ff ff       	call   c001f1cc <Vm::fpu64ToInternal(unsigned long long)>
c001fe50:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe57:	89 c6                	mov    esi,eax
c001fe59:	89 d7                	mov    edi,edx
c001fe5b:	e8 d8 f5 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fe60:	57                   	push   edi
c001fe61:	56                   	push   esi
c001fe62:	52                   	push   edx
c001fe63:	50                   	push   eax
c001fe64:	e8 f2 f4 ff ff       	call   c001f35b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fe69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fe6d:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fe70:	83 c4 20             	add    esp,0x20
c001fe73:	e9 74 f7 ff ff       	jmp    c001f5ec <Vm::x87Handler(regs*)+0x77>
c001fe78:	80 fa 04             	cmp    dl,0x4
c001fe7b:	75 2a                	jne    c001fea7 <Vm::x87Handler(regs*)+0x932>
c001fe7d:	51                   	push   ecx
c001fe7e:	51                   	push   ecx
c001fe7f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe82:	ff 36                	push   DWORD PTR [esi]
c001fe84:	e8 43 f3 ff ff       	call   c001f1cc <Vm::fpu64ToInternal(unsigned long long)>
c001fe89:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe90:	89 c6                	mov    esi,eax
c001fe92:	89 d7                	mov    edi,edx
c001fe94:	e8 9f f5 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fe99:	57                   	push   edi
c001fe9a:	56                   	push   esi
c001fe9b:	52                   	push   edx
c001fe9c:	50                   	push   eax
c001fe9d:	e8 36 f5 ff ff       	call   c001f3d8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fea2:	e9 e2 00 00 00       	jmp    c001ff89 <Vm::x87Handler(regs*)+0xa14>
c001fea7:	80 fa 05             	cmp    dl,0x5
c001feaa:	75 28                	jne    c001fed4 <Vm::x87Handler(regs*)+0x95f>
c001feac:	83 ec 0c             	sub    esp,0xc
c001feaf:	6a 00                	push   0x0
c001feb1:	e8 82 f5 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001feb6:	89 c7                	mov    edi,eax
c001feb8:	89 d5                	mov    ebp,edx
c001feba:	58                   	pop    eax
c001febb:	5a                   	pop    edx
c001febc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001febf:	ff 36                	push   DWORD PTR [esi]
c001fec1:	e8 06 f3 ff ff       	call   c001f1cc <Vm::fpu64ToInternal(unsigned long long)>
c001fec6:	83 c4 10             	add    esp,0x10
c001fec9:	55                   	push   ebp
c001feca:	57                   	push   edi
c001fecb:	52                   	push   edx
c001fecc:	50                   	push   eax
c001fecd:	e8 06 f5 ff ff       	call   c001f3d8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fed2:	eb 60                	jmp    c001ff34 <Vm::x87Handler(regs*)+0x9bf>
c001fed4:	80 fa 06             	cmp    dl,0x6
c001fed7:	75 2a                	jne    c001ff03 <Vm::x87Handler(regs*)+0x98e>
c001fed9:	51                   	push   ecx
c001feda:	51                   	push   ecx
c001fedb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fede:	ff 36                	push   DWORD PTR [esi]
c001fee0:	e8 e7 f2 ff ff       	call   c001f1cc <Vm::fpu64ToInternal(unsigned long long)>
c001fee5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feec:	89 c6                	mov    esi,eax
c001feee:	89 d7                	mov    edi,edx
c001fef0:	e8 43 f5 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001fef5:	57                   	push   edi
c001fef6:	56                   	push   esi
c001fef7:	52                   	push   edx
c001fef8:	50                   	push   eax
c001fef9:	e8 08 f5 ff ff       	call   c001f406 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fefe:	e9 86 00 00 00       	jmp    c001ff89 <Vm::x87Handler(regs*)+0xa14>
c001ff03:	31 c0                	xor    eax,eax
c001ff05:	80 fa 07             	cmp    dl,0x7
c001ff08:	0f 85 c8 00 00 00    	jne    c001ffd6 <Vm::x87Handler(regs*)+0xa61>
c001ff0e:	83 ec 0c             	sub    esp,0xc
c001ff11:	6a 00                	push   0x0
c001ff13:	e8 20 f5 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001ff18:	89 c7                	mov    edi,eax
c001ff1a:	89 d5                	mov    ebp,edx
c001ff1c:	58                   	pop    eax
c001ff1d:	5a                   	pop    edx
c001ff1e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff21:	ff 36                	push   DWORD PTR [esi]
c001ff23:	e8 a4 f2 ff ff       	call   c001f1cc <Vm::fpu64ToInternal(unsigned long long)>
c001ff28:	83 c4 10             	add    esp,0x10
c001ff2b:	55                   	push   ebp
c001ff2c:	57                   	push   edi
c001ff2d:	52                   	push   edx
c001ff2e:	50                   	push   eax
c001ff2f:	e8 d2 f4 ff ff       	call   c001f406 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff34:	83 c4 0c             	add    esp,0xc
c001ff37:	eb 53                	jmp    c001ff8c <Vm::x87Handler(regs*)+0xa17>
c001ff39:	31 c0                	xor    eax,eax
c001ff3b:	80 fa 02             	cmp    dl,0x2
c001ff3e:	0f 85 92 00 00 00    	jne    c001ffd6 <Vm::x87Handler(regs*)+0xa61>
c001ff44:	83 ec 0c             	sub    esp,0xc
c001ff47:	6a 00                	push   0x0
c001ff49:	e8 ea f4 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001ff4e:	59                   	pop    ecx
c001ff4f:	5f                   	pop    edi
c001ff50:	52                   	push   edx
c001ff51:	50                   	push   eax
c001ff52:	e8 27 f2 ff ff       	call   c001f17e <Vm::fpuInternalTo64(unsigned long long)>
c001ff57:	eb 70                	jmp    c001ffc9 <Vm::x87Handler(regs*)+0xa54>
c001ff59:	31 c0                	xor    eax,eax
c001ff5b:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001ff60:	75 74                	jne    c001ffd6 <Vm::x87Handler(regs*)+0xa61>
c001ff62:	50                   	push   eax
c001ff63:	50                   	push   eax
c001ff64:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ff67:	31 d2                	xor    edx,edx
c001ff69:	52                   	push   edx
c001ff6a:	50                   	push   eax
c001ff6b:	e8 f6 f2 ff ff       	call   c001f266 <Vm::fpuLongToFloat(long long)>
c001ff70:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff77:	89 c6                	mov    esi,eax
c001ff79:	89 d7                	mov    edi,edx
c001ff7b:	e8 b8 f4 ff ff       	call   c001f438 <Vm::fpuGetReg(int)>
c001ff80:	57                   	push   edi
c001ff81:	56                   	push   esi
c001ff82:	52                   	push   edx
c001ff83:	50                   	push   eax
c001ff84:	e8 5e f4 ff ff       	call   c001f3e7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff89:	83 c4 1c             	add    esp,0x1c
c001ff8c:	52                   	push   edx
c001ff8d:	50                   	push   eax
c001ff8e:	6a 00                	push   0x0
c001ff90:	e8 e6 f4 ff ff       	call   c001f47b <Vm::fpuSetReg(int, unsigned long long)>
c001ff95:	e9 f2 f7 ff ff       	jmp    c001f78c <Vm::x87Handler(regs*)+0x217>
c001ff9a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ff9e:	80 fa 05             	cmp    dl,0x5
c001ffa1:	75 11                	jne    c001ffb4 <Vm::x87Handler(regs*)+0xa3f>
c001ffa3:	55                   	push   ebp
c001ffa4:	55                   	push   ebp
c001ffa5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ffa8:	ff 36                	push   DWORD PTR [esi]
c001ffaa:	e8 81 f2 ff ff       	call   c001f230 <Vm::fpuULongToFloat(unsigned long long)>
c001ffaf:	e9 cf f7 ff ff       	jmp    c001f783 <Vm::x87Handler(regs*)+0x20e>
c001ffb4:	31 c0                	xor    eax,eax
c001ffb6:	80 fa 07             	cmp    dl,0x7
c001ffb9:	75 1b                	jne    c001ffd6 <Vm::x87Handler(regs*)+0xa61>
c001ffbb:	e8 63 f5 ff ff       	call   c001f523 <Vm::fpuPop()>
c001ffc0:	51                   	push   ecx
c001ffc1:	51                   	push   ecx
c001ffc2:	52                   	push   edx
c001ffc3:	50                   	push   eax
c001ffc4:	e8 0c f2 ff ff       	call   c001f1d5 <Vm::fpuFloatToLong(unsigned long long)>
c001ffc9:	83 c4 10             	add    esp,0x10
c001ffcc:	89 06                	mov    DWORD PTR [esi],eax
c001ffce:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001ffd1:	e9 f8 f7 ff ff       	jmp    c001f7ce <Vm::x87Handler(regs*)+0x259>
c001ffd6:	83 c4 1c             	add    esp,0x1c
c001ffd9:	5b                   	pop    ebx
c001ffda:	5e                   	pop    esi
c001ffdb:	5f                   	pop    edi
c001ffdc:	5d                   	pop    ebp
c001ffdd:	c3                   	ret    

c001ffde <__static_initialization_and_destruction_0(int, int)>:
c001ffde:	83 ec 0c             	sub    esp,0xc
c001ffe1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ffe6:	75 1a                	jne    c0020002 <__static_initialization_and_destruction_0(int, int)+0x24>
c001ffe8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fff0:	75 10                	jne    c0020002 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fff2:	83 ec 0c             	sub    esp,0xc
c001fff5:	68 c0 f4 02 c0       	push   0xc002f4c0
c001fffa:	e8 cb 8e 00 00       	call   c0028eca <Vm::_FPUState::_FPUState()>
c001ffff:	83 c4 10             	add    esp,0x10
c0020002:	90                   	nop
c0020003:	83 c4 0c             	add    esp,0xc
c0020006:	c3                   	ret    

c0020007 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020007:	83 ec 0c             	sub    esp,0xc
c002000a:	83 ec 08             	sub    esp,0x8
c002000d:	68 ff ff 00 00       	push   0xffff
c0020012:	6a 01                	push   0x1
c0020014:	e8 c5 ff ff ff       	call   c001ffde <__static_initialization_and_destruction_0(int, int)>
c0020019:	83 c4 10             	add    esp,0x10
c002001c:	83 c4 0c             	add    esp,0xc
c002001f:	c3                   	ret    

c0020020 <FAT::getName()>:
c0020020:	b8 9c c3 02 c0       	mov    eax,0xc002c39c
c0020025:	c3                   	ret    

c0020026 <FAT::tell(void*, unsigned long long*)>:
c0020026:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002002b:	75 06                	jne    c0020033 <FAT::tell(void*, unsigned long long*)+0xd>
c002002d:	b8 04 00 00 00       	mov    eax,0x4
c0020032:	c3                   	ret    
c0020033:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020038:	75 06                	jne    c0020040 <FAT::tell(void*, unsigned long long*)+0x1a>
c002003a:	b8 04 00 00 00       	mov    eax,0x4
c002003f:	c3                   	ret    
c0020040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020044:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020047:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002004a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002004e:	89 01                	mov    DWORD PTR [ecx],eax
c0020050:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020053:	b8 00 00 00 00       	mov    eax,0x0
c0020058:	c3                   	ret    
c0020059:	90                   	nop

c002005a <FAT::stat(void*, unsigned long long*)>:
c002005a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002005f:	75 06                	jne    c0020067 <FAT::stat(void*, unsigned long long*)+0xd>
c0020061:	b8 04 00 00 00       	mov    eax,0x4
c0020066:	c3                   	ret    
c0020067:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002006c:	75 06                	jne    c0020074 <FAT::stat(void*, unsigned long long*)+0x1a>
c002006e:	b8 04 00 00 00       	mov    eax,0x4
c0020073:	c3                   	ret    
c0020074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020078:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002007b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002007e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020082:	89 01                	mov    DWORD PTR [ecx],eax
c0020084:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020087:	b8 00 00 00 00       	mov    eax,0x0
c002008c:	c3                   	ret    
c002008d:	90                   	nop

c002008e <FAT::~FAT()>:
c002008e:	83 ec 0c             	sub    esp,0xc
c0020091:	ba e8 c3 02 c0       	mov    edx,0xc002c3e8
c0020096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002009a:	89 10                	mov    DWORD PTR [eax],edx
c002009c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a0:	83 ec 0c             	sub    esp,0xc
c00200a3:	50                   	push   eax
c00200a4:	e8 ad 2a ff ff       	call   c0012b56 <Filesystem::~Filesystem()>
c00200a9:	83 c4 10             	add    esp,0x10
c00200ac:	90                   	nop
c00200ad:	83 c4 0c             	add    esp,0xc
c00200b0:	c3                   	ret    
c00200b1:	90                   	nop

c00200b2 <FAT::~FAT()>:
c00200b2:	83 ec 0c             	sub    esp,0xc
c00200b5:	83 ec 0c             	sub    esp,0xc
c00200b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200bc:	e8 cd ff ff ff       	call   c002008e <FAT::~FAT()>
c00200c1:	83 c4 10             	add    esp,0x10
c00200c4:	83 ec 08             	sub    esp,0x8
c00200c7:	6a 08                	push   0x8
c00200c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200cd:	e8 7d 26 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c00200d2:	83 c4 10             	add    esp,0x10
c00200d5:	83 c4 0c             	add    esp,0xc
c00200d8:	c3                   	ret    
c00200d9:	90                   	nop

c00200da <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00200da:	83 ec 1c             	sub    esp,0x1c
c00200dd:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00200e4:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00200e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00200ed:	8b 04 85 40 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ac0]
c00200f4:	83 f8 ff             	cmp    eax,0xffffffff
c00200f7:	75 34                	jne    c002012d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00200f9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00200fd:	88 c2                	mov    dl,al
c00200ff:	a1 20 f5 02 c0       	mov    eax,ds:0xc002f520
c0020104:	01 d0                	add    eax,edx
c0020106:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002010a:	8b 15 20 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f520
c0020110:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020114:	89 14 85 40 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ac0],edx
c002011b:	a1 20 f5 02 c0       	mov    eax,ds:0xc002f520
c0020120:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020124:	89 14 85 c0 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0a40],edx
c002012b:	eb 17                	jmp    c0020144 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002012d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020131:	88 c2                	mov    dl,al
c0020133:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020137:	8b 04 85 40 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ac0]
c002013e:	01 d0                	add    eax,edx
c0020140:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020144:	83 ec 04             	sub    esp,0x4
c0020147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002014b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002014f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020153:	50                   	push   eax
c0020154:	e8 a5 6b fe ff       	call   c0006cfe <f_getlabel>
c0020159:	83 c4 10             	add    esp,0x10
c002015c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020160:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020165:	75 07                	jne    c002016e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020167:	b8 00 00 00 00       	mov    eax,0x0
c002016c:	eb 05                	jmp    c0020173 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c002016e:	b8 01 00 00 00       	mov    eax,0x1
c0020173:	83 c4 1c             	add    esp,0x1c
c0020176:	c3                   	ret    
c0020177:	90                   	nop

c0020178 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020178:	57                   	push   edi
c0020179:	83 ec 58             	sub    esp,0x58
c002017c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020184:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020188:	b9 0f 00 00 00       	mov    ecx,0xf
c002018d:	b8 00 00 00 00       	mov    eax,0x0
c0020192:	fc                   	cld    
c0020193:	89 d7                	mov    edi,edx
c0020195:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020197:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002019b:	8b 04 85 40 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ac0]
c00201a2:	83 f8 ff             	cmp    eax,0xffffffff
c00201a5:	75 34                	jne    c00201db <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00201a7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00201ab:	88 c2                	mov    dl,al
c00201ad:	a1 20 f5 02 c0       	mov    eax,ds:0xc002f520
c00201b2:	01 d0                	add    eax,edx
c00201b4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00201b8:	8b 15 20 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f520
c00201be:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00201c2:	89 14 85 40 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ac0],edx
c00201c9:	a1 20 f5 02 c0       	mov    eax,ds:0xc002f520
c00201ce:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00201d2:	89 14 85 c0 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0a40],edx
c00201d9:	eb 17                	jmp    c00201f2 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00201db:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00201df:	88 c2                	mov    dl,al
c00201e1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00201e5:	8b 04 85 40 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ac0]
c00201ec:	01 d0                	add    eax,edx
c00201ee:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00201f2:	83 ec 08             	sub    esp,0x8
c00201f5:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00201f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00201fd:	50                   	push   eax
c00201fe:	e8 49 07 fe ff       	call   c000094c <strcat>
c0020203:	83 c4 10             	add    esp,0x10
c0020206:	83 ec 0c             	sub    esp,0xc
c0020209:	8d 44 24 18          	lea    eax,[esp+0x18]
c002020d:	50                   	push   eax
c002020e:	e8 d9 6c fe ff       	call   c0006eec <f_setlabel>
c0020213:	83 c4 10             	add    esp,0x10
c0020216:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002021a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002021f:	75 07                	jne    c0020228 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020221:	b8 00 00 00 00       	mov    eax,0x0
c0020226:	eb 05                	jmp    c002022d <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020228:	b8 01 00 00 00       	mov    eax,0x1
c002022d:	83 c4 58             	add    esp,0x58
c0020230:	5f                   	pop    edi
c0020231:	c3                   	ret    

c0020232 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020232:	83 ec 2c             	sub    esp,0x2c
c0020235:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002023d:	83 ec 08             	sub    esp,0x8
c0020240:	68 c0 c3 02 c0       	push   0xc002c3c0
c0020245:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020249:	e8 4a 06 fe ff       	call   c0000898 <strcmp>
c002024e:	83 c4 10             	add    esp,0x10
c0020251:	85 c0                	test   eax,eax
c0020253:	0f 94 c0             	sete   al
c0020256:	84 c0                	test   al,al
c0020258:	74 0d                	je     c0020267 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002025a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020262:	e9 a6 00 00 00       	jmp    c002030d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020267:	83 ec 08             	sub    esp,0x8
c002026a:	68 b2 c3 02 c0       	push   0xc002c3b2
c002026f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020273:	e8 20 06 fe ff       	call   c0000898 <strcmp>
c0020278:	83 c4 10             	add    esp,0x10
c002027b:	85 c0                	test   eax,eax
c002027d:	0f 94 c0             	sete   al
c0020280:	84 c0                	test   al,al
c0020282:	74 0a                	je     c002028e <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020284:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002028c:	eb 7f                	jmp    c002030d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002028e:	83 ec 08             	sub    esp,0x8
c0020291:	68 b8 c3 02 c0       	push   0xc002c3b8
c0020296:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002029a:	e8 f9 05 fe ff       	call   c0000898 <strcmp>
c002029f:	83 c4 10             	add    esp,0x10
c00202a2:	85 c0                	test   eax,eax
c00202a4:	0f 94 c0             	sete   al
c00202a7:	84 c0                	test   al,al
c00202a9:	74 0a                	je     c00202b5 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00202ab:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00202b3:	eb 58                	jmp    c002030d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00202b5:	83 ec 08             	sub    esp,0x8
c00202b8:	68 2c 96 02 c0       	push   0xc002962c
c00202bd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00202c1:	e8 d2 05 fe ff       	call   c0000898 <strcmp>
c00202c6:	83 c4 10             	add    esp,0x10
c00202c9:	85 c0                	test   eax,eax
c00202cb:	0f 94 c0             	sete   al
c00202ce:	84 c0                	test   al,al
c00202d0:	74 0a                	je     c00202dc <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00202d2:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00202da:	eb 31                	jmp    c002030d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00202dc:	83 ec 08             	sub    esp,0x8
c00202df:	68 be c3 02 c0       	push   0xc002c3be
c00202e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00202e8:	e8 ab 05 fe ff       	call   c0000898 <strcmp>
c00202ed:	83 c4 10             	add    esp,0x10
c00202f0:	85 c0                	test   eax,eax
c00202f2:	0f 94 c0             	sete   al
c00202f5:	84 c0                	test   al,al
c00202f7:	74 0a                	je     c0020303 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00202f9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020301:	eb 0a                	jmp    c002030d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020303:	b8 08 00 00 00       	mov    eax,0x8
c0020308:	e9 df 00 00 00       	jmp    c00203ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002030d:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020314:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020319:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002031d:	8b 04 85 40 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ac0]
c0020324:	83 f8 ff             	cmp    eax,0xffffffff
c0020327:	75 34                	jne    c002035d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020329:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002032d:	88 c2                	mov    dl,al
c002032f:	a1 20 f5 02 c0       	mov    eax,ds:0xc002f520
c0020334:	01 d0                	add    eax,edx
c0020336:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002033a:	8b 15 20 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f520
c0020340:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020344:	89 14 85 40 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ac0],edx
c002034b:	a1 20 f5 02 c0       	mov    eax,ds:0xc002f520
c0020350:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020354:	89 14 85 c0 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0a40],edx
c002035b:	eb 17                	jmp    c0020374 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002035d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020361:	88 c2                	mov    dl,al
c0020363:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020367:	8b 04 85 40 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ac0]
c002036e:	01 d0                	add    eax,edx
c0020370:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020374:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020378:	88 04 24             	mov    BYTE PTR [esp],al
c002037b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002037f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020383:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002038b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020390:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020398:	83 ec 0c             	sub    esp,0xc
c002039b:	68 00 20 00 00       	push   0x2000
c00203a0:	e8 2a f4 fe ff       	call   c000f7cf <malloc>
c00203a5:	83 c4 10             	add    esp,0x10
c00203a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00203ac:	68 00 20 00 00       	push   0x2000
c00203b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203b5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00203b9:	50                   	push   eax
c00203ba:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00203be:	50                   	push   eax
c00203bf:	e8 a9 71 fe ff       	call   c000756d <f_mkfs>
c00203c4:	83 c4 10             	add    esp,0x10
c00203c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00203cb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00203d0:	75 07                	jne    c00203d9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00203d2:	b8 00 00 00 00       	mov    eax,0x0
c00203d7:	eb 13                	jmp    c00203ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00203d9:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00203de:	75 07                	jne    c00203e7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00203e0:	b8 09 00 00 00       	mov    eax,0x9
c00203e5:	eb 05                	jmp    c00203ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00203e7:	b8 01 00 00 00       	mov    eax,0x1
c00203ec:	83 c4 2c             	add    esp,0x2c
c00203ef:	c3                   	ret    

c00203f0 <FAT::tryMount(LogicalDisk*, int)>:
c00203f0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00203f6:	a1 20 f5 02 c0       	mov    eax,ds:0xc002f520
c00203fb:	83 f8 14             	cmp    eax,0x14
c00203fe:	75 17                	jne    c0020417 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020400:	83 ec 0c             	sub    esp,0xc
c0020403:	68 c4 c3 02 c0       	push   0xc002c3c4
c0020408:	e8 06 9c ff ff       	call   c001a013 <Krnl::panic(char const*)>
c002040d:	83 c4 10             	add    esp,0x10
c0020410:	b0 00                	mov    al,0x0
c0020412:	e9 d7 01 00 00       	jmp    c00205ee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020417:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002041e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020424:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002042a:	3d 00 02 00 00       	cmp    eax,0x200
c002042f:	74 07                	je     c0020438 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020431:	b0 00                	mov    al,0x0
c0020433:	e9 b6 01 00 00       	jmp    c00205ee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020438:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020440:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020447:	8b 04 85 40 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ac0]
c002044e:	83 f8 ff             	cmp    eax,0xffffffff
c0020451:	74 07                	je     c002045a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020453:	b0 01                	mov    al,0x1
c0020455:	e9 94 01 00 00       	jmp    c00205ee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002045a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020464:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002046c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020473:	88 c2                	mov    dl,al
c0020475:	a1 20 f5 02 c0       	mov    eax,ds:0xc002f520
c002047a:	01 d0                	add    eax,edx
c002047c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020483:	8b 15 20 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f520
c0020489:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020490:	89 14 85 40 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ac0],edx
c0020497:	a1 20 f5 02 c0       	mov    eax,ds:0xc002f520
c002049c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00204a3:	89 14 85 c0 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0a40],edx
c00204aa:	83 ec 0c             	sub    esp,0xc
c00204ad:	68 54 02 00 00       	push   0x254
c00204b2:	e8 18 f3 fe ff       	call   c000f7cf <malloc>
c00204b7:	83 c4 10             	add    esp,0x10
c00204ba:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00204c1:	83 ec 04             	sub    esp,0x4
c00204c4:	6a 00                	push   0x0
c00204c6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00204cd:	50                   	push   eax
c00204ce:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00204d5:	e8 1b 4a fe ff       	call   c0004ef5 <f_mount>
c00204da:	83 c4 10             	add    esp,0x10
c00204dd:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00204e4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00204ec:	74 19                	je     c0020507 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00204ee:	83 ec 0c             	sub    esp,0xc
c00204f1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00204f8:	e8 f2 f2 fe ff       	call   c000f7ef <rfree>
c00204fd:	83 c4 10             	add    esp,0x10
c0020500:	b0 00                	mov    al,0x0
c0020502:	e9 e7 00 00 00       	jmp    c00205ee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020507:	83 ec 04             	sub    esp,0x4
c002050a:	68 00 01 00 00       	push   0x100
c002050f:	6a 00                	push   0x0
c0020511:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020518:	50                   	push   eax
c0020519:	e8 32 02 fe ff       	call   c0000750 <memset>
c002051e:	83 c4 10             	add    esp,0x10
c0020521:	83 ec 08             	sub    esp,0x8
c0020524:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002052b:	50                   	push   eax
c002052c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020533:	50                   	push   eax
c0020534:	e8 13 04 fe ff       	call   c000094c <strcat>
c0020539:	83 c4 10             	add    esp,0x10
c002053c:	83 ec 08             	sub    esp,0x8
c002053f:	68 d2 c3 02 c0       	push   0xc002c3d2
c0020544:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002054b:	50                   	push   eax
c002054c:	e8 fb 03 fe ff       	call   c000094c <strcat>
c0020551:	83 c4 10             	add    esp,0x10
c0020554:	83 ec 04             	sub    esp,0x4
c0020557:	6a 01                	push   0x1
c0020559:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020560:	50                   	push   eax
c0020561:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020565:	50                   	push   eax
c0020566:	e8 ec 49 fe ff       	call   c0004f57 <f_open>
c002056b:	83 c4 10             	add    esp,0x10
c002056e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020575:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002057c:	85 c0                	test   eax,eax
c002057e:	74 0a                	je     c002058a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020580:	78 2d                	js     c00205af <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020582:	83 e8 04             	sub    eax,0x4
c0020585:	83 f8 01             	cmp    eax,0x1
c0020588:	77 25                	ja     c00205af <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002058a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020592:	83 ec 0c             	sub    esp,0xc
c0020595:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020599:	50                   	push   eax
c002059a:	e8 0a 55 fe ff       	call   c0005aa9 <f_close>
c002059f:	83 c4 10             	add    esp,0x10
c00205a2:	90                   	nop
c00205a3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00205ab:	74 3a                	je     c00205e7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00205ad:	eb 2d                	jmp    c00205dc <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00205af:	83 ec 0c             	sub    esp,0xc
c00205b2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00205b9:	e8 31 f2 fe ff       	call   c000f7ef <rfree>
c00205be:	83 c4 10             	add    esp,0x10
c00205c1:	83 ec 04             	sub    esp,0x4
c00205c4:	6a 00                	push   0x0
c00205c6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00205cd:	50                   	push   eax
c00205ce:	6a 00                	push   0x0
c00205d0:	e8 20 49 fe ff       	call   c0004ef5 <f_mount>
c00205d5:	83 c4 10             	add    esp,0x10
c00205d8:	b0 00                	mov    al,0x0
c00205da:	eb 12                	jmp    c00205ee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00205dc:	a1 20 f5 02 c0       	mov    eax,ds:0xc002f520
c00205e1:	40                   	inc    eax
c00205e2:	a3 20 f5 02 c0       	mov    ds:0xc002f520,eax
c00205e7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00205ee:	81 c4 6c 03 00 00    	add    esp,0x36c
c00205f4:	c3                   	ret    
c00205f5:	90                   	nop

c00205f6 <FAT::allocateSwapfile(char const*, int)>:
c00205f6:	53                   	push   ebx
c00205f7:	81 ec 28 04 00 00    	sub    esp,0x428
c00205fd:	c7 84 24 10 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x410],0x114
c0020608:	83 ec 0c             	sub    esp,0xc
c002060b:	ff b4 24 1c 04 00 00 	push   DWORD PTR [esp+0x41c]
c0020612:	e8 b8 f1 fe ff       	call   c000f7cf <malloc>
c0020617:	83 c4 10             	add    esp,0x10
c002061a:	89 c3                	mov    ebx,eax
c002061c:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0020621:	83 ec 04             	sub    esp,0x4
c0020624:	50                   	push   eax
c0020625:	ff b4 24 3c 04 00 00 	push   DWORD PTR [esp+0x43c]
c002062c:	53                   	push   ebx
c002062d:	e8 54 27 ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c0020632:	83 c4 10             	add    esp,0x10
c0020635:	89 9c 24 1c 04 00 00 	mov    DWORD PTR [esp+0x41c],ebx
c002063c:	83 ec 08             	sub    esp,0x8
c002063f:	6a 12                	push   0x12
c0020641:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020648:	e8 9d 27 ff ff       	call   c0012dea <File::open(FileOpenMode)>
c002064d:	83 c4 10             	add    esp,0x10
c0020650:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020657:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002065d:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c0020664:	8b 84 24 38 04 00 00 	mov    eax,DWORD PTR [esp+0x438]
c002066b:	c1 e0 14             	shl    eax,0x14
c002066e:	99                   	cdq    
c002066f:	6a 01                	push   0x1
c0020671:	52                   	push   edx
c0020672:	50                   	push   eax
c0020673:	ff b4 24 24 04 00 00 	push   DWORD PTR [esp+0x424]
c002067a:	e8 da 6a fe ff       	call   c0007159 <f_expand>
c002067f:	83 c4 10             	add    esp,0x10
c0020682:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020689:	8b 00                	mov    eax,DWORD PTR [eax]
c002068b:	83 c0 10             	add    eax,0x10
c002068e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020690:	83 ec 0c             	sub    esp,0xc
c0020693:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020697:	52                   	push   edx
c0020698:	8d 54 24 20          	lea    edx,[esp+0x20]
c002069c:	52                   	push   edx
c002069d:	6a 00                	push   0x0
c002069f:	68 00 04 00 00       	push   0x400
c00206a4:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00206ab:	ff d0                	call   eax
c00206ad:	83 c4 20             	add    esp,0x20
c00206b0:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c00206b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00206b9:	83 c0 10             	add    eax,0x10
c00206bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00206be:	83 ec 0c             	sub    esp,0xc
c00206c1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00206c5:	52                   	push   edx
c00206c6:	8d 54 24 20          	lea    edx,[esp+0x20]
c00206ca:	52                   	push   edx
c00206cb:	6a 00                	push   0x0
c00206cd:	68 00 04 00 00       	push   0x400
c00206d2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00206d9:	ff d0                	call   eax
c00206db:	83 c4 20             	add    esp,0x20
c00206de:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c00206e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00206e7:	83 c0 10             	add    eax,0x10
c00206ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00206ec:	83 ec 0c             	sub    esp,0xc
c00206ef:	8d 54 24 14          	lea    edx,[esp+0x14]
c00206f3:	52                   	push   edx
c00206f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00206f8:	52                   	push   edx
c00206f9:	6a 00                	push   0x0
c00206fb:	68 00 04 00 00       	push   0x400
c0020700:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020707:	ff d0                	call   eax
c0020709:	83 c4 20             	add    esp,0x20
c002070c:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020713:	8b 00                	mov    eax,DWORD PTR [eax]
c0020715:	83 c0 10             	add    eax,0x10
c0020718:	8b 00                	mov    eax,DWORD PTR [eax]
c002071a:	83 ec 0c             	sub    esp,0xc
c002071d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020721:	52                   	push   edx
c0020722:	8d 54 24 20          	lea    edx,[esp+0x20]
c0020726:	52                   	push   edx
c0020727:	6a 00                	push   0x0
c0020729:	68 00 04 00 00       	push   0x400
c002072e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020735:	ff d0                	call   eax
c0020737:	83 c4 20             	add    esp,0x20
c002073a:	83 ec 0c             	sub    esp,0xc
c002073d:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020744:	e8 ff 26 ff ff       	call   c0012e48 <File::close()>
c0020749:	83 c4 10             	add    esp,0x10
c002074c:	83 ec 08             	sub    esp,0x8
c002074f:	6a 01                	push   0x1
c0020751:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020758:	e8 8d 26 ff ff       	call   c0012dea <File::open(FileOpenMode)>
c002075d:	83 c4 10             	add    esp,0x10
c0020760:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020767:	8b 00                	mov    eax,DWORD PTR [eax]
c0020769:	83 c0 0c             	add    eax,0xc
c002076c:	8b 00                	mov    eax,DWORD PTR [eax]
c002076e:	83 ec 0c             	sub    esp,0xc
c0020771:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020775:	52                   	push   edx
c0020776:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002077a:	52                   	push   edx
c002077b:	6a 00                	push   0x0
c002077d:	6a 04                	push   0x4
c002077f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020786:	ff d0                	call   eax
c0020788:	83 c4 20             	add    esp,0x20
c002078b:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020792:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020798:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c002079f:	8b 84 24 18 04 00 00 	mov    eax,DWORD PTR [esp+0x418]
c00207a6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00207a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00207ac:	89 84 24 14 04 00 00 	mov    DWORD PTR [esp+0x414],eax
c00207b3:	83 ec 0c             	sub    esp,0xc
c00207b6:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c00207bd:	e8 86 26 ff ff       	call   c0012e48 <File::close()>
c00207c2:	83 c4 10             	add    esp,0x10
c00207c5:	8b 84 24 14 04 00 00 	mov    eax,DWORD PTR [esp+0x414]
c00207cc:	ba 00 00 00 00       	mov    edx,0x0
c00207d1:	81 c4 28 04 00 00    	add    esp,0x428
c00207d7:	5b                   	pop    ebx
c00207d8:	c3                   	ret    
c00207d9:	90                   	nop

c00207da <FAT::readDir(void*, unsigned long, void*, int*)>:
c00207da:	57                   	push   edi
c00207db:	56                   	push   esi
c00207dc:	53                   	push   ebx
c00207dd:	81 ec 50 02 00 00    	sub    esp,0x250
c00207e3:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00207eb:	74 0a                	je     c00207f7 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00207ed:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00207f5:	75 0a                	jne    c0020801 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00207f7:	b8 04 00 00 00       	mov    eax,0x4
c00207fc:	e9 29 01 00 00       	jmp    c002092a <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020801:	83 ec 08             	sub    esp,0x8
c0020804:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002080b:	50                   	push   eax
c002080c:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020813:	e8 9b 58 fe ff       	call   c00060b3 <f_readdir>
c0020818:	83 c4 10             	add    esp,0x10
c002081b:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020822:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020829:	83 ec 0c             	sub    esp,0xc
c002082c:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020833:	83 c0 1a             	add    eax,0x1a
c0020836:	50                   	push   eax
c0020837:	e8 30 ff fd ff       	call   c000076c <strlen>
c002083c:	83 c4 10             	add    esp,0x10
c002083f:	ba 00 00 00 00       	mov    edx,0x0
c0020844:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002084c:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020853:	0f b6 c0             	movzx  eax,al
c0020856:	83 e0 10             	and    eax,0x10
c0020859:	74 07                	je     c0020862 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c002085b:	b8 02 00 00 00       	mov    eax,0x2
c0020860:	eb 05                	jmp    c0020867 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020862:	b8 01 00 00 00       	mov    eax,0x1
c0020867:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002086b:	83 ec 08             	sub    esp,0x8
c002086e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020875:	83 c0 1a             	add    eax,0x1a
c0020878:	50                   	push   eax
c0020879:	8d 44 24 10          	lea    eax,[esp+0x10]
c002087d:	83 c0 10             	add    eax,0x10
c0020880:	50                   	push   eax
c0020881:	e8 86 ff fd ff       	call   c000080c <strcpy>
c0020886:	83 c4 10             	add    esp,0x10
c0020889:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020890:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020897:	8d 44 24 04          	lea    eax,[esp+0x4]
c002089b:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00208a2:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00208a9:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00208b0:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00208b7:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00208be:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00208c5:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00208cc:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00208d3:	89 c6                	mov    esi,eax
c00208d5:	89 d7                	mov    edi,edx
c00208d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00208d9:	89 c8                	mov    eax,ecx
c00208db:	89 fa                	mov    edx,edi
c00208dd:	89 f3                	mov    ebx,esi
c00208df:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00208e6:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00208ed:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00208f4:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00208fb:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020901:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020908:	84 c0                	test   al,al
c002090a:	75 07                	jne    c0020913 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c002090c:	b8 07 00 00 00       	mov    eax,0x7
c0020911:	eb 17                	jmp    c002092a <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020913:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c002091a:	85 c0                	test   eax,eax
c002091c:	75 07                	jne    c0020925 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c002091e:	b8 00 00 00 00       	mov    eax,0x0
c0020923:	eb 05                	jmp    c002092a <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020925:	b8 01 00 00 00       	mov    eax,0x1
c002092a:	81 c4 50 02 00 00    	add    esp,0x250
c0020930:	5b                   	pop    ebx
c0020931:	5e                   	pop    esi
c0020932:	5f                   	pop    edi
c0020933:	c3                   	ret    

c0020934 <FAT::read(void*, unsigned long, void*, int*)>:
c0020934:	83 ec 1c             	sub    esp,0x1c
c0020937:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002093c:	74 07                	je     c0020945 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002093e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020943:	75 07                	jne    c002094c <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020945:	b8 04 00 00 00       	mov    eax,0x4
c002094a:	eb 3d                	jmp    c0020989 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002094c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020950:	50                   	push   eax
c0020951:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020955:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020959:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002095d:	e8 31 4a fe ff       	call   c0005393 <f_read>
c0020962:	83 c4 10             	add    esp,0x10
c0020965:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020969:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002096d:	89 c2                	mov    edx,eax
c002096f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020973:	89 10                	mov    DWORD PTR [eax],edx
c0020975:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020979:	85 c0                	test   eax,eax
c002097b:	75 07                	jne    c0020984 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002097d:	b8 00 00 00 00       	mov    eax,0x0
c0020982:	eb 05                	jmp    c0020989 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020984:	b8 01 00 00 00       	mov    eax,0x1
c0020989:	83 c4 1c             	add    esp,0x1c
c002098c:	c3                   	ret    
c002098d:	90                   	nop

c002098e <FAT::write(void*, unsigned long, void*, int*)>:
c002098e:	83 ec 1c             	sub    esp,0x1c
c0020991:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020996:	74 07                	je     c002099f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020998:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002099d:	75 07                	jne    c00209a6 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002099f:	b8 04 00 00 00       	mov    eax,0x4
c00209a4:	eb 3d                	jmp    c00209e3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00209a6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00209aa:	50                   	push   eax
c00209ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00209af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00209b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00209b7:	e8 57 4c fe ff       	call   c0005613 <f_write>
c00209bc:	83 c4 10             	add    esp,0x10
c00209bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209c7:	89 c2                	mov    edx,eax
c00209c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00209cd:	89 10                	mov    DWORD PTR [eax],edx
c00209cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209d3:	85 c0                	test   eax,eax
c00209d5:	75 07                	jne    c00209de <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00209d7:	b8 00 00 00 00       	mov    eax,0x0
c00209dc:	eb 05                	jmp    c00209e3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00209de:	b8 01 00 00 00       	mov    eax,0x1
c00209e3:	83 c4 1c             	add    esp,0x1c
c00209e6:	c3                   	ret    
c00209e7:	90                   	nop

c00209e8 <FAT::close(void*)>:
c00209e8:	83 ec 1c             	sub    esp,0x1c
c00209eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00209f0:	75 07                	jne    c00209f9 <FAT::close(void*)+0x11>
c00209f2:	b8 04 00 00 00       	mov    eax,0x4
c00209f7:	eb 36                	jmp    c0020a2f <FAT::close(void*)+0x47>
c00209f9:	83 ec 0c             	sub    esp,0xc
c00209fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020a00:	e8 a4 50 fe ff       	call   c0005aa9 <f_close>
c0020a05:	83 c4 10             	add    esp,0x10
c0020a08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a0c:	83 ec 0c             	sub    esp,0xc
c0020a0f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020a13:	e8 c7 ed fe ff       	call   c000f7df <free>
c0020a18:	83 c4 10             	add    esp,0x10
c0020a1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a1f:	85 c0                	test   eax,eax
c0020a21:	75 07                	jne    c0020a2a <FAT::close(void*)+0x42>
c0020a23:	b8 00 00 00 00       	mov    eax,0x0
c0020a28:	eb 05                	jmp    c0020a2f <FAT::close(void*)+0x47>
c0020a2a:	b8 01 00 00 00       	mov    eax,0x1
c0020a2f:	83 c4 1c             	add    esp,0x1c
c0020a32:	c3                   	ret    
c0020a33:	90                   	nop

c0020a34 <FAT::closeDir(void*)>:
c0020a34:	83 ec 1c             	sub    esp,0x1c
c0020a37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020a3c:	75 07                	jne    c0020a45 <FAT::closeDir(void*)+0x11>
c0020a3e:	b8 04 00 00 00       	mov    eax,0x4
c0020a43:	eb 36                	jmp    c0020a7b <FAT::closeDir(void*)+0x47>
c0020a45:	83 ec 0c             	sub    esp,0xc
c0020a48:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020a4c:	e8 40 56 fe ff       	call   c0006091 <f_closedir>
c0020a51:	83 c4 10             	add    esp,0x10
c0020a54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a58:	83 ec 0c             	sub    esp,0xc
c0020a5b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020a5f:	e8 7b ed fe ff       	call   c000f7df <free>
c0020a64:	83 c4 10             	add    esp,0x10
c0020a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a6b:	85 c0                	test   eax,eax
c0020a6d:	75 07                	jne    c0020a76 <FAT::closeDir(void*)+0x42>
c0020a6f:	b8 00 00 00 00       	mov    eax,0x0
c0020a74:	eb 05                	jmp    c0020a7b <FAT::closeDir(void*)+0x47>
c0020a76:	b8 01 00 00 00       	mov    eax,0x1
c0020a7b:	83 c4 1c             	add    esp,0x1c
c0020a7e:	c3                   	ret    
c0020a7f:	90                   	nop

c0020a80 <FAT::seek(void*, unsigned long long)>:
c0020a80:	83 ec 2c             	sub    esp,0x2c
c0020a83:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020a8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a93:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020a98:	75 07                	jne    c0020aa1 <FAT::seek(void*, unsigned long long)+0x21>
c0020a9a:	b8 04 00 00 00       	mov    eax,0x4
c0020a9f:	eb 2f                	jmp    c0020ad0 <FAT::seek(void*, unsigned long long)+0x50>
c0020aa1:	83 ec 04             	sub    esp,0x4
c0020aa4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020aa8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020aac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020ab0:	e8 23 50 fe ff       	call   c0005ad8 <f_lseek>
c0020ab5:	83 c4 10             	add    esp,0x10
c0020ab8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020abc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020ac0:	85 c0                	test   eax,eax
c0020ac2:	75 07                	jne    c0020acb <FAT::seek(void*, unsigned long long)+0x4b>
c0020ac4:	b8 00 00 00 00       	mov    eax,0x0
c0020ac9:	eb 05                	jmp    c0020ad0 <FAT::seek(void*, unsigned long long)+0x50>
c0020acb:	b8 01 00 00 00       	mov    eax,0x1
c0020ad0:	83 c4 2c             	add    esp,0x2c
c0020ad3:	c3                   	ret    

c0020ad4 <fatWrapperReadDisk>:
c0020ad4:	83 ec 1c             	sub    esp,0x1c
c0020ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020adb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020adf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ae3:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ae6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020aea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020aee:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020af3:	8b 04 85 20 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ae0]
c0020afa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020afe:	83 ec 0c             	sub    esp,0xc
c0020b01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b05:	52                   	push   edx
c0020b06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020b0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020b0e:	50                   	push   eax
c0020b0f:	e8 6e 56 ff ff       	call   c0016182 <LogicalDisk::read(unsigned long long, int, void*)>
c0020b14:	83 c4 20             	add    esp,0x20
c0020b17:	83 c4 1c             	add    esp,0x1c
c0020b1a:	c3                   	ret    

c0020b1b <fatWrapperWriteDisk>:
c0020b1b:	83 ec 1c             	sub    esp,0x1c
c0020b1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b22:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020b26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020b2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0020b2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020b31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b35:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020b3a:	8b 04 85 20 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ae0]
c0020b41:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020b45:	83 ec 0c             	sub    esp,0xc
c0020b48:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b4c:	52                   	push   edx
c0020b4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020b51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020b55:	50                   	push   eax
c0020b56:	e8 93 56 ff ff       	call   c00161ee <LogicalDisk::write(unsigned long long, int, void*)>
c0020b5b:	83 c4 20             	add    esp,0x20
c0020b5e:	83 c4 1c             	add    esp,0x1c
c0020b61:	c3                   	ret    

c0020b62 <fatWrapperIoctl>:
c0020b62:	53                   	push   ebx
c0020b63:	83 ec 28             	sub    esp,0x28
c0020b66:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020b6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020b6e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020b72:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020b76:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020b7b:	75 31                	jne    c0020bae <fatWrapperIoctl+0x4c>
c0020b7d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020b81:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020b85:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020b8a:	8b 04 85 20 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ae0]
c0020b91:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020b97:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020b9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ba1:	66 89 02             	mov    WORD PTR [edx],ax
c0020ba4:	b8 00 00 00 00       	mov    eax,0x0
c0020ba9:	e9 b2 00 00 00       	jmp    c0020c60 <fatWrapperIoctl+0xfe>
c0020bae:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020bb3:	75 6a                	jne    c0020c1f <fatWrapperIoctl+0xbd>
c0020bb5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020bb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020bbd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020bc2:	8b 04 85 20 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ae0]
c0020bc9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020bcf:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020bd5:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020bdb:	89 c8                	mov    eax,ecx
c0020bdd:	89 da                	mov    edx,ebx
c0020bdf:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020be3:	c1 e0 0a             	shl    eax,0xa
c0020be6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020beb:	8b 0c 8d 20 e5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ae0]
c0020bf2:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020bf8:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020bfe:	89 cb                	mov    ebx,ecx
c0020c00:	c1 fb 1f             	sar    ebx,0x1f
c0020c03:	53                   	push   ebx
c0020c04:	51                   	push   ecx
c0020c05:	52                   	push   edx
c0020c06:	50                   	push   eax
c0020c07:	e8 b8 5e 00 00       	call   c0026ac4 <__udivdi3>
c0020c0c:	83 c4 10             	add    esp,0x10
c0020c0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020c13:	89 01                	mov    DWORD PTR [ecx],eax
c0020c15:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c18:	b8 00 00 00 00       	mov    eax,0x0
c0020c1d:	eb 41                	jmp    c0020c60 <fatWrapperIoctl+0xfe>
c0020c1f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020c24:	75 07                	jne    c0020c2d <fatWrapperIoctl+0xcb>
c0020c26:	b8 00 00 00 00       	mov    eax,0x0
c0020c2b:	eb 33                	jmp    c0020c60 <fatWrapperIoctl+0xfe>
c0020c2d:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020c32:	75 19                	jne    c0020c4d <fatWrapperIoctl+0xeb>
c0020c34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c38:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020c3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c40:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020c46:	b8 00 00 00 00       	mov    eax,0x0
c0020c4b:	eb 13                	jmp    c0020c60 <fatWrapperIoctl+0xfe>
c0020c4d:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020c52:	75 07                	jne    c0020c5b <fatWrapperIoctl+0xf9>
c0020c54:	b8 00 00 00 00       	mov    eax,0x0
c0020c59:	eb 05                	jmp    c0020c60 <fatWrapperIoctl+0xfe>
c0020c5b:	b8 04 00 00 00       	mov    eax,0x4
c0020c60:	83 c4 28             	add    esp,0x28
c0020c63:	5b                   	pop    ebx
c0020c64:	c3                   	ret    
c0020c65:	90                   	nop

c0020c66 <FAT::FAT()>:
c0020c66:	83 ec 1c             	sub    esp,0x1c
c0020c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c6d:	83 ec 0c             	sub    esp,0xc
c0020c70:	50                   	push   eax
c0020c71:	e8 bc 1e ff ff       	call   c0012b32 <Filesystem::Filesystem()>
c0020c76:	83 c4 10             	add    esp,0x10
c0020c79:	ba e8 c3 02 c0       	mov    edx,0xc002c3e8
c0020c7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c82:	89 10                	mov    DWORD PTR [eax],edx
c0020c84:	c7 05 20 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f520,0x0
c0020c8e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020c96:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020c9b:	7f 15                	jg     c0020cb2 <FAT::FAT()+0x4c>
c0020c9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ca1:	c7 04 85 40 f5 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0ac0],0xffffffff
c0020cac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020cb0:	eb e4                	jmp    c0020c96 <FAT::FAT()+0x30>
c0020cb2:	90                   	nop
c0020cb3:	83 c4 1c             	add    esp,0x1c
c0020cb6:	c3                   	ret    
c0020cb7:	90                   	nop

c0020cb8 <FAT::fixFilepath(char*)>:
c0020cb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cbc:	8a 00                	mov    al,BYTE PTR [eax]
c0020cbe:	3c 40                	cmp    al,0x40
c0020cc0:	7e 2c                	jle    c0020cee <FAT::fixFilepath(char*)+0x36>
c0020cc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cc6:	8a 00                	mov    al,BYTE PTR [eax]
c0020cc8:	83 e8 41             	sub    eax,0x41
c0020ccb:	88 c2                	mov    dl,al
c0020ccd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cd1:	88 10                	mov    BYTE PTR [eax],dl
c0020cd3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cd7:	8a 00                	mov    al,BYTE PTR [eax]
c0020cd9:	0f be c0             	movsx  eax,al
c0020cdc:	8b 04 85 40 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ac0]
c0020ce3:	83 c0 30             	add    eax,0x30
c0020ce6:	88 c2                	mov    dl,al
c0020ce8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cec:	88 10                	mov    BYTE PTR [eax],dl
c0020cee:	90                   	nop
c0020cef:	c3                   	ret    

c0020cf0 <FAT::open(char const*, void**, FileOpenMode)>:
c0020cf0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020cf6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020cfe:	74 0a                	je     c0020d0a <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020d00:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020d08:	75 0a                	jne    c0020d14 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020d0a:	b8 04 00 00 00       	mov    eax,0x4
c0020d0f:	e9 fd 00 00 00       	jmp    c0020e11 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020d14:	83 ec 08             	sub    esp,0x8
c0020d17:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d1e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d22:	50                   	push   eax
c0020d23:	e8 e4 fa fd ff       	call   c000080c <strcpy>
c0020d28:	83 c4 10             	add    esp,0x10
c0020d2b:	83 ec 08             	sub    esp,0x8
c0020d2e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020d32:	50                   	push   eax
c0020d33:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d3a:	e8 79 ff ff ff       	call   c0020cb8 <FAT::fixFilepath(char*)>
c0020d3f:	83 c4 10             	add    esp,0x10
c0020d42:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020d4a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020d51:	83 e0 01             	and    eax,0x1
c0020d54:	74 08                	je     c0020d5e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020d56:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020d5e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020d65:	83 e0 04             	and    eax,0x4
c0020d68:	74 10                	je     c0020d7a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020d6a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020d72:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020d7a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020d81:	83 e0 02             	and    eax,0x2
c0020d84:	74 08                	je     c0020d8e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020d86:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020d8e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020d95:	83 e0 08             	and    eax,0x8
c0020d98:	74 08                	je     c0020da2 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020d9a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020da2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020da9:	83 e0 10             	and    eax,0x10
c0020dac:	74 08                	je     c0020db6 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020dae:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020db6:	83 ec 0c             	sub    esp,0xc
c0020db9:	68 50 02 00 00       	push   0x250
c0020dbe:	e8 0c ea fe ff       	call   c000f7cf <malloc>
c0020dc3:	83 c4 10             	add    esp,0x10
c0020dc6:	89 c2                	mov    edx,eax
c0020dc8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020dcf:	89 10                	mov    DWORD PTR [eax],edx
c0020dd1:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020dd9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020de0:	8b 00                	mov    eax,DWORD PTR [eax]
c0020de2:	83 ec 04             	sub    esp,0x4
c0020de5:	52                   	push   edx
c0020de6:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020dea:	52                   	push   edx
c0020deb:	50                   	push   eax
c0020dec:	e8 66 41 fe ff       	call   c0004f57 <f_open>
c0020df1:	83 c4 10             	add    esp,0x10
c0020df4:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020dfb:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020e03:	74 07                	je     c0020e0c <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020e05:	b8 01 00 00 00       	mov    eax,0x1
c0020e0a:	eb 05                	jmp    c0020e11 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020e0c:	b8 00 00 00 00       	mov    eax,0x0
c0020e11:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e17:	c3                   	ret    

c0020e18 <FAT::openDir(char const*, void**)>:
c0020e18:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020e1e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020e26:	74 0a                	je     c0020e32 <FAT::openDir(char const*, void**)+0x1a>
c0020e28:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020e30:	75 07                	jne    c0020e39 <FAT::openDir(char const*, void**)+0x21>
c0020e32:	b8 04 00 00 00       	mov    eax,0x4
c0020e37:	eb 7d                	jmp    c0020eb6 <FAT::openDir(char const*, void**)+0x9e>
c0020e39:	83 ec 08             	sub    esp,0x8
c0020e3c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e43:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e47:	50                   	push   eax
c0020e48:	e8 bf f9 fd ff       	call   c000080c <strcpy>
c0020e4d:	83 c4 10             	add    esp,0x10
c0020e50:	83 ec 08             	sub    esp,0x8
c0020e53:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e57:	50                   	push   eax
c0020e58:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e5f:	e8 54 fe ff ff       	call   c0020cb8 <FAT::fixFilepath(char*)>
c0020e64:	83 c4 10             	add    esp,0x10
c0020e67:	83 ec 0c             	sub    esp,0xc
c0020e6a:	6a 4c                	push   0x4c
c0020e6c:	e8 5e e9 fe ff       	call   c000f7cf <malloc>
c0020e71:	83 c4 10             	add    esp,0x10
c0020e74:	89 c2                	mov    edx,eax
c0020e76:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020e7d:	89 10                	mov    DWORD PTR [eax],edx
c0020e7f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020e86:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e88:	83 ec 08             	sub    esp,0x8
c0020e8b:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020e8f:	52                   	push   edx
c0020e90:	50                   	push   eax
c0020e91:	e8 f9 50 fe ff       	call   c0005f8f <f_opendir>
c0020e96:	83 c4 10             	add    esp,0x10
c0020e99:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020ea0:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020ea8:	74 07                	je     c0020eb1 <FAT::openDir(char const*, void**)+0x99>
c0020eaa:	b8 01 00 00 00       	mov    eax,0x1
c0020eaf:	eb 05                	jmp    c0020eb6 <FAT::openDir(char const*, void**)+0x9e>
c0020eb1:	b8 00 00 00 00       	mov    eax,0x0
c0020eb6:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020ebc:	c3                   	ret    
c0020ebd:	90                   	nop

c0020ebe <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020ebe:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020ec4:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020ecc:	75 0a                	jne    c0020ed8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020ece:	b8 04 00 00 00       	mov    eax,0x4
c0020ed3:	e9 c9 00 00 00       	jmp    c0020fa1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ed8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020ee0:	75 0a                	jne    c0020eec <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020ee2:	b8 04 00 00 00       	mov    eax,0x4
c0020ee7:	e9 b5 00 00 00       	jmp    c0020fa1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020eec:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020ef4:	75 0a                	jne    c0020f00 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020ef6:	b8 04 00 00 00       	mov    eax,0x4
c0020efb:	e9 a1 00 00 00       	jmp    c0020fa1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020f00:	83 ec 08             	sub    esp,0x8
c0020f03:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020f0a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020f11:	50                   	push   eax
c0020f12:	e8 f5 f8 fd ff       	call   c000080c <strcpy>
c0020f17:	83 c4 10             	add    esp,0x10
c0020f1a:	83 ec 08             	sub    esp,0x8
c0020f1d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020f24:	50                   	push   eax
c0020f25:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020f2c:	e8 87 fd ff ff       	call   c0020cb8 <FAT::fixFilepath(char*)>
c0020f31:	83 c4 10             	add    esp,0x10
c0020f34:	83 ec 08             	sub    esp,0x8
c0020f37:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f3b:	50                   	push   eax
c0020f3c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020f43:	50                   	push   eax
c0020f44:	e8 05 52 fe ff       	call   c000614e <f_stat>
c0020f49:	83 c4 10             	add    esp,0x10
c0020f4c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020f53:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020f5a:	85 c0                	test   eax,eax
c0020f5c:	74 07                	je     c0020f65 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020f5e:	83 f8 04             	cmp    eax,0x4
c0020f61:	74 32                	je     c0020f95 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020f63:	eb 37                	jmp    c0020f9c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020f65:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020f69:	0f b6 c0             	movzx  eax,al
c0020f6c:	83 e0 10             	and    eax,0x10
c0020f6f:	0f 95 c2             	setne  dl
c0020f72:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020f79:	88 10                	mov    BYTE PTR [eax],dl
c0020f7b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020f7e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020f82:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020f89:	89 01                	mov    DWORD PTR [ecx],eax
c0020f8b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f8e:	b8 00 00 00 00       	mov    eax,0x0
c0020f93:	eb 0c                	jmp    c0020fa1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020f95:	b8 02 00 00 00       	mov    eax,0x2
c0020f9a:	eb 05                	jmp    c0020fa1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020f9c:	b8 01 00 00 00       	mov    eax,0x1
c0020fa1:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020fa7:	c3                   	ret    

c0020fa8 <FAT::unlink(char const*)>:
c0020fa8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fb6:	75 07                	jne    c0020fbf <FAT::unlink(char const*)+0x17>
c0020fb8:	b8 04 00 00 00       	mov    eax,0x4
c0020fbd:	eb 5c                	jmp    c002101b <FAT::unlink(char const*)+0x73>
c0020fbf:	83 ec 08             	sub    esp,0x8
c0020fc2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fc9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fcd:	50                   	push   eax
c0020fce:	e8 39 f8 fd ff       	call   c000080c <strcpy>
c0020fd3:	83 c4 10             	add    esp,0x10
c0020fd6:	83 ec 08             	sub    esp,0x8
c0020fd9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fdd:	50                   	push   eax
c0020fde:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fe5:	e8 ce fc ff ff       	call   c0020cb8 <FAT::fixFilepath(char*)>
c0020fea:	83 c4 10             	add    esp,0x10
c0020fed:	83 ec 0c             	sub    esp,0xc
c0020ff0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ff4:	50                   	push   eax
c0020ff5:	e8 a6 54 fe ff       	call   c00064a0 <f_unlink>
c0020ffa:	83 c4 10             	add    esp,0x10
c0020ffd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021004:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002100b:	85 c0                	test   eax,eax
c002100d:	75 07                	jne    c0021016 <FAT::unlink(char const*)+0x6e>
c002100f:	b8 00 00 00 00       	mov    eax,0x0
c0021014:	eb 05                	jmp    c002101b <FAT::unlink(char const*)+0x73>
c0021016:	b8 01 00 00 00       	mov    eax,0x1
c002101b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021021:	c3                   	ret    

c0021022 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021022:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021028:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002102f:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021036:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002103a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002103e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021046:	75 0a                	jne    c0021052 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021048:	b8 04 00 00 00       	mov    eax,0x4
c002104d:	e9 1c 01 00 00       	jmp    c002116e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021052:	83 ec 08             	sub    esp,0x8
c0021055:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002105c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021060:	50                   	push   eax
c0021061:	e8 a6 f7 fd ff       	call   c000080c <strcpy>
c0021066:	83 c4 10             	add    esp,0x10
c0021069:	83 ec 08             	sub    esp,0x8
c002106c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021070:	50                   	push   eax
c0021071:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021078:	e8 3b fc ff ff       	call   c0020cb8 <FAT::fixFilepath(char*)>
c002107d:	83 c4 10             	add    esp,0x10
c0021080:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021088:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021090:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021095:	83 e0 01             	and    eax,0x1
c0021098:	74 08                	je     c00210a2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002109a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00210a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00210a7:	83 e0 02             	and    eax,0x2
c00210aa:	74 08                	je     c00210b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00210ac:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00210b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00210b9:	83 e0 04             	and    eax,0x4
c00210bc:	74 08                	je     c00210c6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00210be:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00210c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00210cb:	83 e0 08             	and    eax,0x8
c00210ce:	74 08                	je     c00210d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00210d0:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00210d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00210dd:	83 e0 01             	and    eax,0x1
c00210e0:	74 08                	je     c00210ea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00210e2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00210ea:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00210ef:	83 e0 02             	and    eax,0x2
c00210f2:	74 08                	je     c00210fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00210f4:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00210fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021101:	83 e0 04             	and    eax,0x4
c0021104:	74 08                	je     c002110e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021106:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002110e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021113:	83 e0 08             	and    eax,0x8
c0021116:	74 08                	je     c0021120 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021118:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021120:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021127:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002112e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021136:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002113e:	83 ec 04             	sub    esp,0x4
c0021141:	52                   	push   edx
c0021142:	50                   	push   eax
c0021143:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021147:	50                   	push   eax
c0021148:	e8 f5 59 fe ff       	call   c0006b42 <f_chmod>
c002114d:	83 c4 10             	add    esp,0x10
c0021150:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021157:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002115e:	85 c0                	test   eax,eax
c0021160:	75 07                	jne    c0021169 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021162:	b8 00 00 00 00       	mov    eax,0x0
c0021167:	eb 05                	jmp    c002116e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021169:	b8 01 00 00 00       	mov    eax,0x1
c002116e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021174:	c3                   	ret    
c0021175:	90                   	nop

c0021176 <FAT::rename(char const*, char const*)>:
c0021176:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002117c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021184:	74 0a                	je     c0021190 <FAT::rename(char const*, char const*)+0x1a>
c0021186:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002118e:	75 0a                	jne    c002119a <FAT::rename(char const*, char const*)+0x24>
c0021190:	b8 04 00 00 00       	mov    eax,0x4
c0021195:	e9 98 00 00 00       	jmp    c0021232 <FAT::rename(char const*, char const*)+0xbc>
c002119a:	83 ec 08             	sub    esp,0x8
c002119d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00211a4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00211ab:	50                   	push   eax
c00211ac:	e8 5b f6 fd ff       	call   c000080c <strcpy>
c00211b1:	83 c4 10             	add    esp,0x10
c00211b4:	83 ec 08             	sub    esp,0x8
c00211b7:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00211be:	50                   	push   eax
c00211bf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00211c6:	e8 ed fa ff ff       	call   c0020cb8 <FAT::fixFilepath(char*)>
c00211cb:	83 c4 10             	add    esp,0x10
c00211ce:	83 ec 08             	sub    esp,0x8
c00211d1:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00211d8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211dc:	50                   	push   eax
c00211dd:	e8 2a f6 fd ff       	call   c000080c <strcpy>
c00211e2:	83 c4 10             	add    esp,0x10
c00211e5:	83 ec 08             	sub    esp,0x8
c00211e8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211ec:	50                   	push   eax
c00211ed:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00211f4:	e8 bf fa ff ff       	call   c0020cb8 <FAT::fixFilepath(char*)>
c00211f9:	83 c4 10             	add    esp,0x10
c00211fc:	83 ec 08             	sub    esp,0x8
c00211ff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021203:	50                   	push   eax
c0021204:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002120b:	50                   	push   eax
c002120c:	e8 3e 56 fe ff       	call   c000684f <f_rename>
c0021211:	83 c4 10             	add    esp,0x10
c0021214:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002121b:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021222:	85 c0                	test   eax,eax
c0021224:	75 07                	jne    c002122d <FAT::rename(char const*, char const*)+0xb7>
c0021226:	b8 00 00 00 00       	mov    eax,0x0
c002122b:	eb 05                	jmp    c0021232 <FAT::rename(char const*, char const*)+0xbc>
c002122d:	b8 01 00 00 00       	mov    eax,0x1
c0021232:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021238:	c3                   	ret    
c0021239:	90                   	nop

c002123a <FAT::mkdir(char const*)>:
c002123a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021240:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021248:	75 07                	jne    c0021251 <FAT::mkdir(char const*)+0x17>
c002124a:	b8 04 00 00 00       	mov    eax,0x4
c002124f:	eb 5c                	jmp    c00212ad <FAT::mkdir(char const*)+0x73>
c0021251:	83 ec 08             	sub    esp,0x8
c0021254:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002125b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002125f:	50                   	push   eax
c0021260:	e8 a7 f5 fd ff       	call   c000080c <strcpy>
c0021265:	83 c4 10             	add    esp,0x10
c0021268:	83 ec 08             	sub    esp,0x8
c002126b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002126f:	50                   	push   eax
c0021270:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021277:	e8 3c fa ff ff       	call   c0020cb8 <FAT::fixFilepath(char*)>
c002127c:	83 c4 10             	add    esp,0x10
c002127f:	83 ec 0c             	sub    esp,0xc
c0021282:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021286:	50                   	push   eax
c0021287:	e8 97 53 fe ff       	call   c0006623 <f_mkdir>
c002128c:	83 c4 10             	add    esp,0x10
c002128f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021296:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002129d:	85 c0                	test   eax,eax
c002129f:	75 07                	jne    c00212a8 <FAT::mkdir(char const*)+0x6e>
c00212a1:	b8 00 00 00 00       	mov    eax,0x0
c00212a6:	eb 05                	jmp    c00212ad <FAT::mkdir(char const*)+0x73>
c00212a8:	b8 01 00 00 00       	mov    eax,0x1
c00212ad:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212b3:	c3                   	ret    

c00212b4 <FAT::exists(char const*)>:
c00212b4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00212ba:	83 ec 08             	sub    esp,0x8
c00212bd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00212c8:	50                   	push   eax
c00212c9:	e8 3e f5 fd ff       	call   c000080c <strcpy>
c00212ce:	83 c4 10             	add    esp,0x10
c00212d1:	83 ec 08             	sub    esp,0x8
c00212d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00212d8:	50                   	push   eax
c00212d9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212e0:	e8 d3 f9 ff ff       	call   c0020cb8 <FAT::fixFilepath(char*)>
c00212e5:	83 c4 10             	add    esp,0x10
c00212e8:	83 ec 08             	sub    esp,0x8
c00212eb:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00212f2:	50                   	push   eax
c00212f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00212f7:	50                   	push   eax
c00212f8:	e8 51 4e fe ff       	call   c000614e <f_stat>
c00212fd:	83 c4 10             	add    esp,0x10
c0021300:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021307:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002130e:	85 c0                	test   eax,eax
c0021310:	75 04                	jne    c0021316 <FAT::exists(char const*)+0x62>
c0021312:	b0 01                	mov    al,0x1
c0021314:	eb 02                	jmp    c0021318 <FAT::exists(char const*)+0x64>
c0021316:	b0 00                	mov    al,0x0
c0021318:	81 c4 2c 02 00 00    	add    esp,0x22c
c002131e:	c3                   	ret    
c002131f:	90                   	nop

c0021320 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021320:	b8 08 00 00 00       	mov    eax,0x8
c0021325:	c3                   	ret    

c0021326 <ISO9660::seek(void*, unsigned long long)>:
c0021326:	53                   	push   ebx
c0021327:	b8 04 00 00 00       	mov    eax,0x4
c002132c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021330:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021338:	85 d2                	test   edx,edx
c002133a:	74 17                	je     c0021353 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002133c:	89 c8                	mov    eax,ecx
c002133e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021341:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021344:	b8 01 00 00 00       	mov    eax,0x1
c0021349:	73 08                	jae    c0021353 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002134b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002134e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021351:	31 c0                	xor    eax,eax
c0021353:	5b                   	pop    ebx
c0021354:	c3                   	ret    
c0021355:	90                   	nop

c0021356 <ISO9660::tell(void*, unsigned long long*)>:
c0021356:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002135a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002135e:	85 d2                	test   edx,edx
c0021360:	74 12                	je     c0021374 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021362:	85 c0                	test   eax,eax
c0021364:	74 0e                	je     c0021374 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021366:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021369:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002136c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002136f:	89 10                	mov    DWORD PTR [eax],edx
c0021371:	31 c0                	xor    eax,eax
c0021373:	c3                   	ret    
c0021374:	b8 04 00 00 00       	mov    eax,0x4
c0021379:	c3                   	ret    

c002137a <ISO9660::getName()>:
c002137a:	b8 48 c4 02 c0       	mov    eax,0xc002c448
c002137f:	c3                   	ret    

c0021380 <ISO9660::stat(void*, unsigned long long*)>:
c0021380:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021384:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021388:	85 d2                	test   edx,edx
c002138a:	74 12                	je     c002139e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002138c:	85 c0                	test   eax,eax
c002138e:	74 0e                	je     c002139e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021390:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021393:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021396:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021399:	89 10                	mov    DWORD PTR [eax],edx
c002139b:	31 c0                	xor    eax,eax
c002139d:	c3                   	ret    
c002139e:	b8 04 00 00 00       	mov    eax,0x4
c00213a3:	c3                   	ret    

c00213a4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00213a4:	b8 01 00 00 00       	mov    eax,0x1
c00213a9:	c3                   	ret    

c00213aa <ISO9660::unlink(char const*)>:
c00213aa:	b8 01 00 00 00       	mov    eax,0x1
c00213af:	c3                   	ret    

c00213b0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00213b0:	b8 01 00 00 00       	mov    eax,0x1
c00213b5:	c3                   	ret    

c00213b6 <ISO9660::rename(char const*, char const*)>:
c00213b6:	b8 01 00 00 00       	mov    eax,0x1
c00213bb:	c3                   	ret    

c00213bc <ISO9660::mkdir(char const*)>:
c00213bc:	b8 01 00 00 00       	mov    eax,0x1
c00213c1:	c3                   	ret    

c00213c2 <ISO9660::close(void*)>:
c00213c2:	83 ec 0c             	sub    esp,0xc
c00213c5:	b8 04 00 00 00       	mov    eax,0x4
c00213ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213ce:	85 d2                	test   edx,edx
c00213d0:	74 0e                	je     c00213e0 <ISO9660::close(void*)+0x1e>
c00213d2:	83 ec 0c             	sub    esp,0xc
c00213d5:	52                   	push   edx
c00213d6:	e8 04 e4 fe ff       	call   c000f7df <free>
c00213db:	83 c4 10             	add    esp,0x10
c00213de:	31 c0                	xor    eax,eax
c00213e0:	83 c4 0c             	add    esp,0xc
c00213e3:	c3                   	ret    

c00213e4 <ISO9660::closeDir(void*)>:
c00213e4:	83 ec 0c             	sub    esp,0xc
c00213e7:	b8 04 00 00 00       	mov    eax,0x4
c00213ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213f0:	85 d2                	test   edx,edx
c00213f2:	74 0e                	je     c0021402 <ISO9660::closeDir(void*)+0x1e>
c00213f4:	83 ec 0c             	sub    esp,0xc
c00213f7:	52                   	push   edx
c00213f8:	e8 e2 e3 fe ff       	call   c000f7df <free>
c00213fd:	83 c4 10             	add    esp,0x10
c0021400:	31 c0                	xor    eax,eax
c0021402:	83 c4 0c             	add    esp,0xc
c0021405:	c3                   	ret    

c0021406 <ISO9660::~ISO9660()>:
c0021406:	83 ec 0c             	sub    esp,0xc
c0021409:	ba 6c c4 02 c0       	mov    edx,0xc002c46c
c002140e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021412:	89 10                	mov    DWORD PTR [eax],edx
c0021414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021418:	83 ec 0c             	sub    esp,0xc
c002141b:	50                   	push   eax
c002141c:	e8 35 17 ff ff       	call   c0012b56 <Filesystem::~Filesystem()>
c0021421:	83 c4 10             	add    esp,0x10
c0021424:	90                   	nop
c0021425:	83 c4 0c             	add    esp,0xc
c0021428:	c3                   	ret    
c0021429:	90                   	nop

c002142a <ISO9660::~ISO9660()>:
c002142a:	83 ec 0c             	sub    esp,0xc
c002142d:	83 ec 0c             	sub    esp,0xc
c0021430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021434:	e8 cd ff ff ff       	call   c0021406 <ISO9660::~ISO9660()>
c0021439:	83 c4 10             	add    esp,0x10
c002143c:	83 ec 08             	sub    esp,0x8
c002143f:	6a 08                	push   0x8
c0021441:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021445:	e8 05 13 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c002144a:	83 c4 10             	add    esp,0x10
c002144d:	83 c4 0c             	add    esp,0xc
c0021450:	c3                   	ret    

c0021451 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021451:	55                   	push   ebp
c0021452:	31 c9                	xor    ecx,ecx
c0021454:	57                   	push   edi
c0021455:	56                   	push   esi
c0021456:	53                   	push   ebx
c0021457:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002145b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002145f:	89 eb                	mov    ebx,ebp
c0021461:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021465:	39 ce                	cmp    esi,ecx
c0021467:	7e 17                	jle    c0021480 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021469:	31 d2                	xor    edx,edx
c002146b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002146f:	7d 13                	jge    c0021484 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021471:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021475:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021478:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002147b:	75 0d                	jne    c002148a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002147d:	42                   	inc    edx
c002147e:	eb eb                	jmp    c002146b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021480:	31 c0                	xor    eax,eax
c0021482:	eb 0a                	jmp    c002148e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021484:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021488:	eb 04                	jmp    c002148e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002148a:	41                   	inc    ecx
c002148b:	43                   	inc    ebx
c002148c:	eb d7                	jmp    c0021465 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002148e:	5b                   	pop    ebx
c002148f:	5e                   	pop    esi
c0021490:	5f                   	pop    edi
c0021491:	5d                   	pop    ebp
c0021492:	c3                   	ret    

c0021493 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021493:	57                   	push   edi
c0021494:	56                   	push   esi
c0021495:	53                   	push   ebx
c0021496:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002149a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002149e:	39 0d 20 f6 02 c0    	cmp    DWORD PTR ds:0xc002f620,ecx
c00214a4:	75 08                	jne    c00214ae <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00214a6:	38 05 b4 d4 02 c0    	cmp    BYTE PTR ds:0xc002d4b4,al
c00214ac:	74 2b                	je     c00214d9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00214ae:	83 ec 0c             	sub    esp,0xc
c00214b1:	a2 b4 d4 02 c0       	mov    ds:0xc002d4b4,al
c00214b6:	68 40 f6 02 c0       	push   0xc002f640
c00214bb:	0f be c0             	movsx  eax,al
c00214be:	6a 01                	push   0x1
c00214c0:	89 0d 20 f6 02 c0    	mov    DWORD PTR ds:0xc002f620,ecx
c00214c6:	31 db                	xor    ebx,ebx
c00214c8:	53                   	push   ebx
c00214c9:	51                   	push   ecx
c00214ca:	ff 34 85 1c e4 02 c0 	push   DWORD PTR [eax*4-0x3ffd1be4]
c00214d1:	e8 ac 4c ff ff       	call   c0016182 <LogicalDisk::read(unsigned long long, int, void*)>
c00214d6:	83 c4 20             	add    esp,0x20
c00214d9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00214dd:	be 40 f6 02 c0       	mov    esi,0xc002f640
c00214e2:	b9 00 08 00 00       	mov    ecx,0x800
c00214e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00214e9:	5b                   	pop    ebx
c00214ea:	5e                   	pop    esi
c00214eb:	5f                   	pop    edi
c00214ec:	c3                   	ret    
c00214ed:	90                   	nop

c00214ee <ISO9660::tryMount(LogicalDisk*, int)>:
c00214ee:	81 ec 10 08 00 00    	sub    esp,0x810
c00214f4:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00214fb:	83 c0 41             	add    eax,0x41
c00214fe:	0f be c0             	movsx  eax,al
c0021501:	50                   	push   eax
c0021502:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021506:	50                   	push   eax
c0021507:	6a 10                	push   0x10
c0021509:	e8 85 ff ff ff       	call   c0021493 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002150e:	83 c4 10             	add    esp,0x10
c0021511:	31 c0                	xor    eax,eax
c0021513:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021518:	75 1d                	jne    c0021537 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002151a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002151f:	75 16                	jne    c0021537 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021521:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021526:	75 0f                	jne    c0021537 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021528:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002152d:	75 08                	jne    c0021537 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002152f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021534:	0f 94 c0             	sete   al
c0021537:	81 c4 0c 08 00 00    	add    esp,0x80c
c002153d:	c3                   	ret    

c002153e <ISO9660::read(void*, unsigned long, void*, int*)>:
c002153e:	55                   	push   ebp
c002153f:	57                   	push   edi
c0021540:	56                   	push   esi
c0021541:	53                   	push   ebx
c0021542:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021548:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002154f:	85 ed                	test   ebp,ebp
c0021551:	0f 84 da 01 00 00    	je     c0021731 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021557:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002155f:	0f 84 cc 01 00 00    	je     c0021731 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021565:	b8 01 00 00 00       	mov    eax,0x1
c002156a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002156e:	0f 85 c2 01 00 00    	jne    c0021736 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021574:	31 d2                	xor    edx,edx
c0021576:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002157d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021580:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021583:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021586:	89 04 24             	mov    DWORD PTR [esp],eax
c0021589:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002158d:	01 c8                	add    eax,ecx
c002158f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021592:	11 da                	adc    edx,ebx
c0021594:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021598:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002159c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00215a0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00215a4:	19 d7                	sbb    edi,edx
c00215a6:	72 11                	jb     c00215b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00215a8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00215ab:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00215af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00215b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00215b7:	eb 0c                	jmp    c00215c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00215b9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00215bd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00215c1:	29 ce                	sub    esi,ecx
c00215c3:	19 df                	sbb    edi,ebx
c00215c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00215c8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00215cb:	0f a4 c2 0b          	shld   edx,eax,0xb
c00215cf:	c1 e0 0b             	shl    eax,0xb
c00215d2:	01 c8                	add    eax,ecx
c00215d4:	11 da                	adc    edx,ebx
c00215d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00215d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00215dd:	51                   	push   ecx
c00215de:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00215e2:	50                   	push   eax
c00215e3:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00215e7:	53                   	push   ebx
c00215e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00215ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215f0:	0f ac d0 0b          	shrd   eax,edx,0xb
c00215f4:	50                   	push   eax
c00215f5:	e8 99 fe ff ff       	call   c0021493 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215fa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00215fd:	b8 00 08 00 00       	mov    eax,0x800
c0021602:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021608:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c002160c:	29 d0                	sub    eax,edx
c002160e:	83 c4 10             	add    esp,0x10
c0021611:	89 f9                	mov    ecx,edi
c0021613:	39 c6                	cmp    esi,eax
c0021615:	83 d9 00             	sbb    ecx,0x0
c0021618:	7d 1b                	jge    c0021635 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c002161a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002161f:	75 12                	jne    c0021633 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021621:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021628:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002162e:	e9 fa 00 00 00       	jmp    c002172d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021633:	89 f0                	mov    eax,esi
c0021635:	01 d3                	add    ebx,edx
c0021637:	31 d2                	xor    edx,edx
c0021639:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c002163d:	39 c2                	cmp    edx,eax
c002163f:	7d 14                	jge    c0021655 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021641:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021648:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002164c:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002164f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021652:	42                   	inc    edx
c0021653:	eb e8                	jmp    c002163d <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021655:	89 c2                	mov    edx,eax
c0021657:	85 c0                	test   eax,eax
c0021659:	79 02                	jns    c002165d <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c002165b:	31 d2                	xor    edx,edx
c002165d:	01 c2                	add    edx,eax
c002165f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021662:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021669:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c002166d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021671:	99                   	cdq    
c0021672:	01 c1                	add    ecx,eax
c0021674:	11 d3                	adc    ebx,edx
c0021676:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002167a:	29 c6                	sub    esi,eax
c002167c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021680:	19 d7                	sbb    edi,edx
c0021682:	89 34 24             	mov    DWORD PTR [esp],esi
c0021685:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021689:	b8 ff 07 00 00       	mov    eax,0x7ff
c002168e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021691:	b8 00 00 00 00       	mov    eax,0x0
c0021696:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002169a:	7d 43                	jge    c00216df <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c002169c:	52                   	push   edx
c002169d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00216a1:	50                   	push   eax
c00216a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00216a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00216aa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00216ae:	0f ac d0 0b          	shrd   eax,edx,0xb
c00216b2:	50                   	push   eax
c00216b3:	e8 db fd ff ff       	call   c0021493 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216b8:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00216c0:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00216c5:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00216cd:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00216d5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00216da:	83 c4 10             	add    esp,0x10
c00216dd:	eb aa                	jmp    c0021689 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00216df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216e3:	0b 04 24             	or     eax,DWORD PTR [esp]
c00216e6:	74 2a                	je     c0021712 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00216e8:	50                   	push   eax
c00216e9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00216ed:	50                   	push   eax
c00216ee:	8d 74 24 28          	lea    esi,[esp+0x28]
c00216f2:	56                   	push   esi
c00216f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00216f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00216fb:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00216ff:	51                   	push   ecx
c0021700:	e8 8e fd ff ff       	call   c0021493 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021705:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021709:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002170d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002170f:	83 c4 10             	add    esp,0x10
c0021712:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021719:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021721:	89 18                	mov    DWORD PTR [eax],ebx
c0021723:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021727:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002172a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002172d:	31 c0                	xor    eax,eax
c002172f:	eb 05                	jmp    c0021736 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021731:	b8 04 00 00 00       	mov    eax,0x4
c0021736:	81 c4 2c 08 00 00    	add    esp,0x82c
c002173c:	5b                   	pop    ebx
c002173d:	5e                   	pop    esi
c002173e:	5f                   	pop    edi
c002173f:	5d                   	pop    ebp
c0021740:	c3                   	ret    
c0021741:	90                   	nop

c0021742 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021742:	55                   	push   ebp
c0021743:	57                   	push   edi
c0021744:	56                   	push   esi
c0021745:	53                   	push   ebx
c0021746:	81 ec 5c 09 00 00    	sub    esp,0x95c
c002174c:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021753:	85 ed                	test   ebp,ebp
c0021755:	0f 84 51 02 00 00    	je     c00219ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002175b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021763:	0f 84 43 02 00 00    	je     c00219ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021769:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002176c:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c002176f:	75 0a                	jne    c002177b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021771:	b8 07 00 00 00       	mov    eax,0x7
c0021776:	e9 36 02 00 00       	jmp    c00219b1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002177b:	50                   	push   eax
c002177c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021780:	50                   	push   eax
c0021781:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021788:	53                   	push   ebx
c0021789:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002178c:	c1 e0 0b             	shl    eax,0xb
c002178f:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021792:	c1 e8 0b             	shr    eax,0xb
c0021795:	50                   	push   eax
c0021796:	e8 f8 fc ff ff       	call   c0021493 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002179b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002179e:	83 c4 10             	add    esp,0x10
c00217a1:	89 c1                	mov    ecx,eax
c00217a3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00217a6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00217ac:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00217af:	84 db                	test   bl,bl
c00217b1:	0f 85 8b 00 00 00    	jne    c0021842 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00217b7:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00217bd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00217c0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00217c6:	29 c6                	sub    esi,eax
c00217c8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00217cc:	89 f3                	mov    ebx,esi
c00217ce:	89 f1                	mov    ecx,esi
c00217d0:	c1 fb 1f             	sar    ebx,0x1f
c00217d3:	01 f0                	add    eax,esi
c00217d5:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00217d8:	11 da                	adc    edx,ebx
c00217da:	89 04 24             	mov    DWORD PTR [esp],eax
c00217dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00217e1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00217e4:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00217e7:	89 d8                	mov    eax,ebx
c00217e9:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00217ed:	ba 00 00 00 00       	mov    edx,0x0
c00217f2:	19 f8                	sbb    eax,edi
c00217f4:	b8 00 00 00 00       	mov    eax,0x0
c00217f9:	73 08                	jae    c0021803 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00217fb:	89 f0                	mov    eax,esi
c00217fd:	89 fa                	mov    edx,edi
c00217ff:	29 c8                	sub    eax,ecx
c0021801:	19 da                	sbb    edx,ebx
c0021803:	89 d7                	mov    edi,edx
c0021805:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021808:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002180b:	09 c7                	or     edi,eax
c002180d:	0f 84 5e ff ff ff    	je     c0021771 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021813:	57                   	push   edi
c0021814:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021818:	50                   	push   eax
c0021819:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021820:	53                   	push   ebx
c0021821:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021824:	c1 e0 0b             	shl    eax,0xb
c0021827:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002182b:	c1 e8 0b             	shr    eax,0xb
c002182e:	50                   	push   eax
c002182f:	e8 5f fc ff ff       	call   c0021493 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021834:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021837:	83 c4 10             	add    esp,0x10
c002183a:	25 ff 07 00 00       	and    eax,0x7ff
c002183f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021842:	31 ff                	xor    edi,edi
c0021844:	56                   	push   esi
c0021845:	6a 28                	push   0x28
c0021847:	6a 00                	push   0x0
c0021849:	8d 44 24 24          	lea    eax,[esp+0x24]
c002184d:	50                   	push   eax
c002184e:	e8 fd ee fd ff       	call   c0000750 <memset>
c0021853:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021856:	25 ff 07 00 00       	and    eax,0x7ff
c002185b:	89 c6                	mov    esi,eax
c002185d:	83 c6 21             	add    esi,0x21
c0021860:	83 d7 00             	adc    edi,0x0
c0021863:	83 c4 10             	add    esp,0x10
c0021866:	31 c9                	xor    ecx,ecx
c0021868:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c002186f:	83 f9 28             	cmp    ecx,0x28
c0021872:	88 04 24             	mov    BYTE PTR [esp],al
c0021875:	0f 94 c2             	sete   dl
c0021878:	88 d0                	mov    al,dl
c002187a:	ba ff 07 00 00       	mov    edx,0x7ff
c002187f:	39 f2                	cmp    edx,esi
c0021881:	ba 00 00 00 00       	mov    edx,0x0
c0021886:	19 fa                	sbb    edx,edi
c0021888:	0f 92 c2             	setb   dl
c002188b:	09 c2                	or     edx,eax
c002188d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021891:	0f 94 c0             	sete   al
c0021894:	08 d0                	or     al,dl
c0021896:	75 16                	jne    c00218ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021898:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002189c:	74 10                	je     c00218ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002189e:	8a 04 24             	mov    al,BYTE PTR [esp]
c00218a1:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00218a5:	41                   	inc    ecx
c00218a6:	83 c6 01             	add    esi,0x1
c00218a9:	83 d7 00             	adc    edi,0x0
c00218ac:	eb ba                	jmp    c0021868 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c00218ae:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00218b5:	83 ec 0c             	sub    esp,0xc
c00218b8:	8d 74 24 24          	lea    esi,[esp+0x24]
c00218bc:	56                   	push   esi
c00218bd:	e8 aa ee fd ff       	call   c000076c <strlen>
c00218c2:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00218c9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00218cd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00218d5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00218d8:	5a                   	pop    edx
c00218d9:	25 ff 07 00 00       	and    eax,0x7ff
c00218de:	59                   	pop    ecx
c00218df:	01 f8                	add    eax,edi
c00218e1:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00218e7:	83 e0 02             	and    eax,0x2
c00218ea:	3c 01                	cmp    al,0x1
c00218ec:	19 c0                	sbb    eax,eax
c00218ee:	83 c0 02             	add    eax,0x2
c00218f1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00218f5:	56                   	push   esi
c00218f6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00218fa:	50                   	push   eax
c00218fb:	e8 0c ef fd ff       	call   c000080c <strcpy>
c0021900:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021904:	83 c4 10             	add    esp,0x10
c0021907:	84 c0                	test   al,al
c0021909:	75 21                	jne    c002192c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c002190b:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021913:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002191b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021923:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c002192a:	eb 28                	jmp    c0021954 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002192c:	fe c8                	dec    al
c002192e:	75 24                	jne    c0021954 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021930:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021938:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021940:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021948:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002194f:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021954:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021958:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c002195f:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021966:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021968:	0f b6 f3             	movzx  esi,bl
c002196b:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021972:	31 db                	xor    ebx,ebx
c0021974:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002197a:	89 df                	mov    edi,ebx
c002197c:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c002197f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021982:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021985:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021988:	39 c6                	cmp    esi,eax
c002198a:	19 d7                	sbb    edi,edx
c002198c:	72 10                	jb     c002199e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c002198e:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021995:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c002199c:	eb 0a                	jmp    c00219a8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c002199e:	29 f0                	sub    eax,esi
c00219a0:	19 da                	sbb    edx,ebx
c00219a2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00219a5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00219a8:	31 c0                	xor    eax,eax
c00219aa:	eb 05                	jmp    c00219b1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00219ac:	b8 04 00 00 00       	mov    eax,0x4
c00219b1:	81 c4 5c 09 00 00    	add    esp,0x95c
c00219b7:	5b                   	pop    ebx
c00219b8:	5e                   	pop    esi
c00219b9:	5f                   	pop    edi
c00219ba:	5d                   	pop    ebp
c00219bb:	c3                   	ret    

c00219bc <readRoot(unsigned int*, unsigned int*, char)>:
c00219bc:	57                   	push   edi
c00219bd:	56                   	push   esi
c00219be:	81 ec 38 08 00 00    	sub    esp,0x838
c00219c4:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00219cc:	50                   	push   eax
c00219cd:	8d 44 24 38          	lea    eax,[esp+0x38]
c00219d1:	50                   	push   eax
c00219d2:	6a 10                	push   0x10
c00219d4:	e8 ba fa ff ff       	call   c0021493 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219d9:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00219e0:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00219e4:	b9 22 00 00 00       	mov    ecx,0x22
c00219e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00219eb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219f2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00219f6:	89 10                	mov    DWORD PTR [eax],edx
c00219f8:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00219ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021a03:	89 10                	mov    DWORD PTR [eax],edx
c0021a05:	81 c4 44 08 00 00    	add    esp,0x844
c0021a0b:	b0 01                	mov    al,0x1
c0021a0d:	5e                   	pop    esi
c0021a0e:	5f                   	pop    edi
c0021a0f:	c3                   	ret    

c0021a10 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021a10:	55                   	push   ebp
c0021a11:	57                   	push   edi
c0021a12:	56                   	push   esi
c0021a13:	53                   	push   ebx
c0021a14:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021a1a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021a21:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021a28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021a2c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021a30:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021a34:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021a38:	75 03                	jne    c0021a3d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021a3a:	83 c3 02             	add    ebx,0x2
c0021a3d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021a40:	75 03                	jne    c0021a45 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021a42:	43                   	inc    ebx
c0021a43:	eb f8                	jmp    c0021a3d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021a45:	51                   	push   ecx
c0021a46:	68 00 01 00 00       	push   0x100
c0021a4b:	6a 00                	push   0x0
c0021a4d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a51:	50                   	push   eax
c0021a52:	e8 f9 ec fd ff       	call   c0000750 <memset>
c0021a57:	83 c4 10             	add    esp,0x10
c0021a5a:	31 d2                	xor    edx,edx
c0021a5c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021a5f:	84 c0                	test   al,al
c0021a61:	74 21                	je     c0021a84 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021a63:	3c 2f                	cmp    al,0x2f
c0021a65:	75 0b                	jne    c0021a72 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021a67:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021a6b:	bd 01 00 00 00       	mov    ebp,0x1
c0021a70:	eb 14                	jmp    c0021a86 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021a72:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021a75:	80 f9 19             	cmp    cl,0x19
c0021a78:	77 03                	ja     c0021a7d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021a7a:	83 e8 20             	sub    eax,0x20
c0021a7d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021a81:	42                   	inc    edx
c0021a82:	eb d8                	jmp    c0021a5c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021a84:	31 ed                	xor    ebp,ebp
c0021a86:	83 ec 0c             	sub    esp,0xc
c0021a89:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021a90:	e8 3a dd fe ff       	call   c000f7cf <malloc>
c0021a95:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021a9c:	89 c6                	mov    esi,eax
c0021a9e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021aa4:	c1 ef 0b             	shr    edi,0xb
c0021aa7:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021aae:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021ab2:	83 c4 10             	add    esp,0x10
c0021ab5:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021aba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021abe:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021ac5:	74 28                	je     c0021aef <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021ac7:	52                   	push   edx
c0021ac8:	57                   	push   edi
c0021ac9:	50                   	push   eax
c0021aca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021ace:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021ad5:	e8 b9 f9 ff ff       	call   c0021493 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ada:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ade:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ae5:	05 00 08 00 00       	add    eax,0x800
c0021aea:	83 c4 10             	add    esp,0x10
c0021aed:	eb cb                	jmp    c0021aba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021aef:	83 ec 0c             	sub    esp,0xc
c0021af2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021af6:	57                   	push   edi
c0021af7:	e8 70 ec fd ff       	call   c000076c <strlen>
c0021afc:	50                   	push   eax
c0021afd:	57                   	push   edi
c0021afe:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021b05:	56                   	push   esi
c0021b06:	e8 46 f9 ff ff       	call   c0021451 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021b0b:	83 c4 20             	add    esp,0x20
c0021b0e:	85 c0                	test   eax,eax
c0021b10:	75 13                	jne    c0021b25 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021b12:	83 ec 0c             	sub    esp,0xc
c0021b15:	56                   	push   esi
c0021b16:	e8 c4 dc fe ff       	call   c000f7df <free>
c0021b1b:	83 c4 10             	add    esp,0x10
c0021b1e:	31 c0                	xor    eax,eax
c0021b20:	e9 b3 00 00 00       	jmp    c0021bd8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021b25:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021b29:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021b2d:	c1 e7 08             	shl    edi,0x8
c0021b30:	c1 e2 10             	shl    edx,0x10
c0021b33:	09 d7                	or     edi,edx
c0021b35:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021b39:	09 d7                	or     edi,edx
c0021b3b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021b3f:	c1 e2 18             	shl    edx,0x18
c0021b42:	09 d7                	or     edi,edx
c0021b44:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021b48:	89 d1                	mov    ecx,edx
c0021b4a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021b4e:	c1 e1 08             	shl    ecx,0x8
c0021b51:	c1 e2 10             	shl    edx,0x10
c0021b54:	09 ca                	or     edx,ecx
c0021b56:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021b5a:	09 ca                	or     edx,ecx
c0021b5c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021b60:	c1 e1 18             	shl    ecx,0x18
c0021b63:	09 ca                	or     edx,ecx
c0021b65:	89 e9                	mov    ecx,ebp
c0021b67:	84 c9                	test   cl,cl
c0021b69:	74 3c                	je     c0021ba7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021b6b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021b6f:	83 ec 0c             	sub    esp,0xc
c0021b72:	56                   	push   esi
c0021b73:	e8 67 dc fe ff       	call   c000f7df <free>
c0021b78:	83 c4 0c             	add    esp,0xc
c0021b7b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021b82:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021b87:	50                   	push   eax
c0021b88:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021b8f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021b96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021b9a:	52                   	push   edx
c0021b9b:	57                   	push   edi
c0021b9c:	53                   	push   ebx
c0021b9d:	e8 6e fe ff ff       	call   c0021a10 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ba2:	83 c4 20             	add    esp,0x20
c0021ba5:	eb 31                	jmp    c0021bd8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ba7:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021baa:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021bb1:	d0 e8                	shr    al,1
c0021bb3:	89 3b                	mov    DWORD PTR [ebx],edi
c0021bb5:	83 e0 01             	and    eax,0x1
c0021bb8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021bbf:	83 ec 0c             	sub    esp,0xc
c0021bc2:	89 13                	mov    DWORD PTR [ebx],edx
c0021bc4:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021bcb:	89 03                	mov    DWORD PTR [ebx],eax
c0021bcd:	56                   	push   esi
c0021bce:	e8 0c dc fe ff       	call   c000f7df <free>
c0021bd3:	83 c4 10             	add    esp,0x10
c0021bd6:	b0 01                	mov    al,0x1
c0021bd8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021bde:	5b                   	pop    ebx
c0021bdf:	5e                   	pop    esi
c0021be0:	5f                   	pop    edi
c0021be1:	5d                   	pop    ebp
c0021be2:	c3                   	ret    

c0021be3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021be3:	55                   	push   ebp
c0021be4:	57                   	push   edi
c0021be5:	56                   	push   esi
c0021be6:	53                   	push   ebx
c0021be7:	83 ec 20             	sub    esp,0x20
c0021bea:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021bee:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021bf2:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021bf6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021bfe:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021c06:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021c0b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021c11:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021c17:	57                   	push   edi
c0021c18:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c1c:	50                   	push   eax
c0021c1d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c21:	50                   	push   eax
c0021c22:	e8 95 fd ff ff       	call   c00219bc <readRoot(unsigned int*, unsigned int*, char)>
c0021c27:	5a                   	pop    edx
c0021c28:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021c2c:	e8 3b eb fd ff       	call   c000076c <strlen>
c0021c31:	83 c4 10             	add    esp,0x10
c0021c34:	83 f8 03             	cmp    eax,0x3
c0021c37:	77 17                	ja     c0021c50 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021c39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c3d:	89 03                	mov    DWORD PTR [ebx],eax
c0021c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c43:	89 06                	mov    DWORD PTR [esi],eax
c0021c45:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021c4c:	b0 01                	mov    al,0x1
c0021c4e:	eb 19                	jmp    c0021c69 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021c50:	50                   	push   eax
c0021c51:	55                   	push   ebp
c0021c52:	57                   	push   edi
c0021c53:	56                   	push   esi
c0021c54:	53                   	push   ebx
c0021c55:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021c59:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021c5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021c61:	e8 aa fd ff ff       	call   c0021a10 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021c66:	83 c4 20             	add    esp,0x20
c0021c69:	83 c4 1c             	add    esp,0x1c
c0021c6c:	5b                   	pop    ebx
c0021c6d:	5e                   	pop    esi
c0021c6e:	5f                   	pop    edi
c0021c6f:	5d                   	pop    ebp
c0021c70:	c3                   	ret    
c0021c71:	90                   	nop

c0021c72 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021c72:	57                   	push   edi
c0021c73:	56                   	push   esi
c0021c74:	53                   	push   ebx
c0021c75:	83 ec 10             	sub    esp,0x10
c0021c78:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021c7c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021c80:	85 ff                	test   edi,edi
c0021c82:	0f 84 8b 00 00 00    	je     c0021d13 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021c88:	85 f6                	test   esi,esi
c0021c8a:	0f 84 83 00 00 00    	je     c0021d13 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021c90:	b8 03 00 00 00       	mov    eax,0x3
c0021c95:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021c9a:	75 7c                	jne    c0021d18 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021c9c:	83 ec 0c             	sub    esp,0xc
c0021c9f:	6a 1c                	push   0x1c
c0021ca1:	e8 29 db fe ff       	call   c000f7cf <malloc>
c0021ca6:	89 07                	mov    DWORD PTR [edi],eax
c0021ca8:	89 c3                	mov    ebx,eax
c0021caa:	58                   	pop    eax
c0021cab:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021caf:	50                   	push   eax
c0021cb0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021cb3:	50                   	push   eax
c0021cb4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021cb8:	50                   	push   eax
c0021cb9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021cbd:	50                   	push   eax
c0021cbe:	56                   	push   esi
c0021cbf:	e8 1f ff ff ff       	call   c0021be3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021cc4:	83 c4 20             	add    esp,0x20
c0021cc7:	84 c0                	test   al,al
c0021cc9:	74 07                	je     c0021cd2 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021ccb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021cd0:	74 0b                	je     c0021cdd <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021cd2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021cd6:	b8 01 00 00 00       	mov    eax,0x1
c0021cdb:	eb 3b                	jmp    c0021d18 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021cdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ce1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ce5:	89 03                	mov    DWORD PTR [ebx],eax
c0021ce7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021cee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021cf2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021cf9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021d00:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021d03:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021d0a:	8a 06                	mov    al,BYTE PTR [esi]
c0021d0c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021d0f:	31 c0                	xor    eax,eax
c0021d11:	eb 05                	jmp    c0021d18 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021d13:	b8 04 00 00 00       	mov    eax,0x4
c0021d18:	83 c4 10             	add    esp,0x10
c0021d1b:	5b                   	pop    ebx
c0021d1c:	5e                   	pop    esi
c0021d1d:	5f                   	pop    edi
c0021d1e:	c3                   	ret    
c0021d1f:	90                   	nop

c0021d20 <ISO9660::exists(char const*)>:
c0021d20:	83 ec 28             	sub    esp,0x28
c0021d23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021d27:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021d2b:	52                   	push   edx
c0021d2c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021d2f:	52                   	push   edx
c0021d30:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021d34:	52                   	push   edx
c0021d35:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021d39:	52                   	push   edx
c0021d3a:	50                   	push   eax
c0021d3b:	e8 a3 fe ff ff       	call   c0021be3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021d40:	83 c4 3c             	add    esp,0x3c
c0021d43:	c3                   	ret    

c0021d44 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021d44:	56                   	push   esi
c0021d45:	53                   	push   ebx
c0021d46:	83 ec 14             	sub    esp,0x14
c0021d49:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021d4d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021d51:	85 db                	test   ebx,ebx
c0021d53:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021d57:	0f 94 c2             	sete   dl
c0021d5a:	85 f6                	test   esi,esi
c0021d5c:	0f 94 c0             	sete   al
c0021d5f:	08 c2                	or     dl,al
c0021d61:	75 68                	jne    c0021dcb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021d63:	85 c9                	test   ecx,ecx
c0021d65:	74 64                	je     c0021dcb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021d67:	83 ec 0c             	sub    esp,0xc
c0021d6a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021d6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021d71:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021d77:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021d7e:	50                   	push   eax
c0021d7f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021d82:	50                   	push   eax
c0021d83:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d87:	50                   	push   eax
c0021d88:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d8c:	50                   	push   eax
c0021d8d:	51                   	push   ecx
c0021d8e:	e8 50 fe ff ff       	call   c0021be3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021d93:	83 c4 20             	add    esp,0x20
c0021d96:	ba 01 00 00 00       	mov    edx,0x1
c0021d9b:	84 c0                	test   al,al
c0021d9d:	74 31                	je     c0021dd0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021d9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021da3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021daa:	89 03                	mov    DWORD PTR [ebx],eax
c0021dac:	ba 00 00 00 00       	mov    edx,0x0
c0021db1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021db5:	85 c0                	test   eax,eax
c0021db7:	0f 95 06             	setne  BYTE PTR [esi]
c0021dba:	74 14                	je     c0021dd0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021dbc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021dc2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021dc9:	eb 05                	jmp    c0021dd0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021dcb:	ba 04 00 00 00       	mov    edx,0x4
c0021dd0:	83 c4 14             	add    esp,0x14
c0021dd3:	89 d0                	mov    eax,edx
c0021dd5:	5b                   	pop    ebx
c0021dd6:	5e                   	pop    esi
c0021dd7:	c3                   	ret    

c0021dd8 <ISO9660::openDir(char const*, void**)>:
c0021dd8:	57                   	push   edi
c0021dd9:	56                   	push   esi
c0021dda:	53                   	push   ebx
c0021ddb:	83 ec 10             	sub    esp,0x10
c0021dde:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021de2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021de6:	85 ff                	test   edi,edi
c0021de8:	74 7b                	je     c0021e65 <ISO9660::openDir(char const*, void**)+0x8d>
c0021dea:	85 f6                	test   esi,esi
c0021dec:	74 77                	je     c0021e65 <ISO9660::openDir(char const*, void**)+0x8d>
c0021dee:	83 ec 0c             	sub    esp,0xc
c0021df1:	6a 1c                	push   0x1c
c0021df3:	e8 d7 d9 fe ff       	call   c000f7cf <malloc>
c0021df8:	89 07                	mov    DWORD PTR [edi],eax
c0021dfa:	89 c3                	mov    ebx,eax
c0021dfc:	58                   	pop    eax
c0021dfd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e01:	50                   	push   eax
c0021e02:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021e05:	50                   	push   eax
c0021e06:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e0a:	50                   	push   eax
c0021e0b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e0f:	50                   	push   eax
c0021e10:	56                   	push   esi
c0021e11:	e8 cd fd ff ff       	call   c0021be3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021e16:	83 c4 20             	add    esp,0x20
c0021e19:	84 c0                	test   al,al
c0021e1b:	74 07                	je     c0021e24 <ISO9660::openDir(char const*, void**)+0x4c>
c0021e1d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021e22:	75 0b                	jne    c0021e2f <ISO9660::openDir(char const*, void**)+0x57>
c0021e24:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021e28:	b8 01 00 00 00       	mov    eax,0x1
c0021e2d:	eb 3b                	jmp    c0021e6a <ISO9660::openDir(char const*, void**)+0x92>
c0021e2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e33:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021e37:	89 03                	mov    DWORD PTR [ebx],eax
c0021e39:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021e40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e44:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021e4b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021e52:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021e55:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021e5c:	8a 06                	mov    al,BYTE PTR [esi]
c0021e5e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021e61:	31 c0                	xor    eax,eax
c0021e63:	eb 05                	jmp    c0021e6a <ISO9660::openDir(char const*, void**)+0x92>
c0021e65:	b8 04 00 00 00       	mov    eax,0x4
c0021e6a:	83 c4 10             	add    esp,0x10
c0021e6d:	5b                   	pop    ebx
c0021e6e:	5e                   	pop    esi
c0021e6f:	5f                   	pop    edi
c0021e70:	c3                   	ret    
c0021e71:	90                   	nop

c0021e72 <ISO9660::ISO9660()>:
c0021e72:	83 ec 0c             	sub    esp,0xc
c0021e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e79:	83 ec 0c             	sub    esp,0xc
c0021e7c:	50                   	push   eax
c0021e7d:	e8 b0 0c ff ff       	call   c0012b32 <Filesystem::Filesystem()>
c0021e82:	83 c4 10             	add    esp,0x10
c0021e85:	ba 6c c4 02 c0       	mov    edx,0xc002c46c
c0021e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e8e:	89 10                	mov    DWORD PTR [eax],edx
c0021e90:	90                   	nop
c0021e91:	83 c4 0c             	add    esp,0xc
c0021e94:	c3                   	ret    
c0021e95:	90                   	nop

c0021e96 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021e96:	83 ec 1c             	sub    esp,0x1c
c0021e99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e9d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021ea1:	89 10                	mov    DWORD PTR [eax],edx
c0021ea3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ea7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021eab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021eae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021eb2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021eb6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021eb9:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021ebe:	75 23                	jne    c0021ee3 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ec4:	8b 10                	mov    edx,DWORD PTR [eax]
c0021ec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021eca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ecd:	0f af c2             	imul   eax,edx
c0021ed0:	85 c0                	test   eax,eax
c0021ed2:	79 03                	jns    c0021ed7 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021ed4:	83 c0 03             	add    eax,0x3
c0021ed7:	c1 f8 02             	sar    eax,0x2
c0021eda:	05 a0 0f 00 00       	add    eax,0xfa0
c0021edf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021ee3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ee7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021eeb:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021eee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ef2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021ef9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021efd:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021f04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f08:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021f0b:	c1 e0 02             	shl    eax,0x2
c0021f0e:	83 ec 0c             	sub    esp,0xc
c0021f11:	50                   	push   eax
c0021f12:	e8 b8 d8 fe ff       	call   c000f7cf <malloc>
c0021f17:	83 c4 10             	add    esp,0x10
c0021f1a:	89 c2                	mov    edx,eax
c0021f1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f20:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021f23:	83 ec 04             	sub    esp,0x4
c0021f26:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021f2a:	50                   	push   eax
c0021f2b:	6a 01                	push   0x1
c0021f2d:	6a 04                	push   0x4
c0021f2f:	e8 67 6e fe ff       	call   c0008d9b <src_new>
c0021f34:	83 c4 10             	add    esp,0x10
c0021f37:	89 c2                	mov    edx,eax
c0021f39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f3d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f44:	85 c0                	test   eax,eax
c0021f46:	74 10                	je     c0021f58 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021f48:	83 ec 0c             	sub    esp,0xc
c0021f4b:	68 cc c4 02 c0       	push   0xc002c4cc
c0021f50:	e8 be 80 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0021f55:	83 c4 10             	add    esp,0x10
c0021f58:	a0 40 02 03 c0       	mov    al,ds:0xc0030240
c0021f5d:	83 f0 01             	xor    eax,0x1
c0021f60:	84 c0                	test   al,al
c0021f62:	74 57                	je     c0021fbb <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021f64:	a1 e8 c4 02 c0       	mov    eax,ds:0xc002c4e8
c0021f69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f6d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f75:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021f7d:	7f 35                	jg     c0021fb4 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021f7f:	83 ec 0c             	sub    esp,0xc
c0021f82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021f86:	e8 64 54 00 00       	call   c00273ef <__floatsisf>
c0021f8b:	83 c4 10             	add    esp,0x10
c0021f8e:	8b 15 e8 c4 02 c0    	mov    edx,DWORD PTR ds:0xc002c4e8
c0021f94:	83 ec 08             	sub    esp,0x8
c0021f97:	52                   	push   edx
c0021f98:	50                   	push   eax
c0021f99:	e8 63 50 00 00       	call   c0027001 <__mulsf3>
c0021f9e:	83 c4 10             	add    esp,0x10
c0021fa1:	89 c2                	mov    edx,eax
c0021fa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fa7:	89 14 85 40 fe 02 c0 	mov    DWORD PTR [eax*4-0x3ffd01c0],edx
c0021fae:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021fb2:	eb c1                	jmp    c0021f75 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021fb4:	c6 05 40 02 03 c0 01 	mov    BYTE PTR ds:0xc0030240,0x1
c0021fbb:	90                   	nop
c0021fbc:	83 c4 1c             	add    esp,0x1c
c0021fbf:	c3                   	ret    

c0021fc0 <SoundChannel::~SoundChannel()>:
c0021fc0:	83 ec 0c             	sub    esp,0xc
c0021fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021fca:	83 ec 0c             	sub    esp,0xc
c0021fcd:	50                   	push   eax
c0021fce:	e8 0c d8 fe ff       	call   c000f7df <free>
c0021fd3:	83 c4 10             	add    esp,0x10
c0021fd6:	90                   	nop
c0021fd7:	83 c4 0c             	add    esp,0xc
c0021fda:	c3                   	ret    
c0021fdb:	90                   	nop

c0021fdc <SoundChannel::getSampleRate()>:
c0021fdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fe0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fe2:	c3                   	ret    
c0021fe3:	90                   	nop

c0021fe4 <SoundChannel::getBits()>:
c0021fe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021feb:	c3                   	ret    

c0021fec <SoundChannel::getBufferUsed()>:
c0021fec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ff0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021ff3:	c3                   	ret    

c0021ff4 <SoundChannel::getBufferSize()>:
c0021ff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ff8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021ffb:	c3                   	ret    

c0021ffc <SoundChannel::unbuffer(float*, int, int)>:
c0021ffc:	56                   	push   esi
c0021ffd:	53                   	push   ebx
c0021ffe:	83 ec 40             	sub    esp,0x40
c0022001:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022005:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022008:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002200c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002200f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022013:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022017:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002201b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002201f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022023:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022027:	e8 c3 53 00 00       	call   c00273ef <__floatsisf>
c002202c:	5a                   	pop    edx
c002202d:	89 c6                	mov    esi,eax
c002202f:	ff 33                	push   DWORD PTR [ebx]
c0022031:	e8 b9 53 00 00       	call   c00273ef <__floatsisf>
c0022036:	59                   	pop    ecx
c0022037:	5a                   	pop    edx
c0022038:	50                   	push   eax
c0022039:	56                   	push   esi
c002203a:	e8 85 51 00 00       	call   c00271c4 <__divsf3>
c002203f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022042:	e8 78 66 00 00       	call   c00286bf <__extendsfdf2>
c0022047:	59                   	pop    ecx
c0022048:	5e                   	pop    esi
c0022049:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002204d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022051:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022059:	8d 44 24 14          	lea    eax,[esp+0x14]
c002205d:	50                   	push   eax
c002205e:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022061:	e8 2a 69 fe ff       	call   c0008990 <src_process>
c0022066:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002206a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002206d:	83 c4 0c             	add    esp,0xc
c0022070:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022073:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022076:	29 d0                	sub    eax,edx
c0022078:	c1 e0 02             	shl    eax,0x2
c002207b:	50                   	push   eax
c002207c:	8d 04 91             	lea    eax,[ecx+edx*4]
c002207f:	50                   	push   eax
c0022080:	51                   	push   ecx
c0022081:	e8 02 e6 fd ff       	call   c0000688 <memmove>
c0022086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002208a:	83 c4 44             	add    esp,0x44
c002208d:	5b                   	pop    ebx
c002208e:	5e                   	pop    esi
c002208f:	c3                   	ret    

c0022090 <SoundChannel::buffer16(short*, int)>:
c0022090:	55                   	push   ebp
c0022091:	57                   	push   edi
c0022092:	56                   	push   esi
c0022093:	53                   	push   ebx
c0022094:	83 ec 1c             	sub    esp,0x1c
c0022097:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002209b:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c002209e:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00220a1:	0f 84 d2 00 00 00    	je     c0022179 <SoundChannel::buffer16(short*, int)+0xe9>
c00220a7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00220ab:	85 ed                	test   ebp,ebp
c00220ad:	0f 8e c6 00 00 00    	jle    c0022179 <SoundChannel::buffer16(short*, int)+0xe9>
c00220b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00220b7:	bd 00 00 00 38       	mov    ebp,0x38000000
c00220bc:	83 ec 0c             	sub    esp,0xc
c00220bf:	0f bf 00             	movsx  eax,WORD PTR [eax]
c00220c2:	50                   	push   eax
c00220c3:	e8 27 53 00 00       	call   c00273ef <__floatsisf>
c00220c8:	59                   	pop    ecx
c00220c9:	8d 4e 01             	lea    ecx,[esi+0x1]
c00220cc:	5f                   	pop    edi
c00220cd:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00220d0:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00220d3:	55                   	push   ebp
c00220d4:	50                   	push   eax
c00220d5:	e8 27 4f 00 00       	call   c0027001 <__mulsf3>
c00220da:	83 c4 10             	add    esp,0x10
c00220dd:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00220e0:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00220e3:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00220e6:	0f 84 99 00 00 00    	je     c0022185 <SoundChannel::buffer16(short*, int)+0xf5>
c00220ec:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c00220f1:	74 78                	je     c002216b <SoundChannel::buffer16(short*, int)+0xdb>
c00220f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00220f7:	83 ec 0c             	sub    esp,0xc
c00220fa:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c00220fe:	50                   	push   eax
c00220ff:	e8 eb 52 00 00       	call   c00273ef <__floatsisf>
c0022104:	5f                   	pop    edi
c0022105:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022108:	5a                   	pop    edx
c0022109:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c002210c:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002210f:	55                   	push   ebp
c0022110:	50                   	push   eax
c0022111:	e8 eb 4e 00 00       	call   c0027001 <__mulsf3>
c0022116:	83 c4 10             	add    esp,0x10
c0022119:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c002211c:	be 02 00 00 00       	mov    esi,0x2
c0022121:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022124:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022127:	74 46                	je     c002216f <SoundChannel::buffer16(short*, int)+0xdf>
c0022129:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c002212d:	eb 36                	jmp    c0022165 <SoundChannel::buffer16(short*, int)+0xd5>
c002212f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022133:	83 ec 0c             	sub    esp,0xc
c0022136:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c002213a:	46                   	inc    esi
c002213b:	50                   	push   eax
c002213c:	e8 ae 52 00 00       	call   c00273ef <__floatsisf>
c0022141:	5a                   	pop    edx
c0022142:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0022145:	59                   	pop    ecx
c0022146:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022149:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002214c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022150:	50                   	push   eax
c0022151:	e8 ab 4e 00 00       	call   c0027001 <__mulsf3>
c0022156:	83 c4 10             	add    esp,0x10
c0022159:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c002215d:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022160:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022163:	74 0a                	je     c002216f <SoundChannel::buffer16(short*, int)+0xdf>
c0022165:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0022169:	75 c4                	jne    c002212f <SoundChannel::buffer16(short*, int)+0x9f>
c002216b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002216f:	83 c4 1c             	add    esp,0x1c
c0022172:	89 f0                	mov    eax,esi
c0022174:	5b                   	pop    ebx
c0022175:	5e                   	pop    esi
c0022176:	5f                   	pop    edi
c0022177:	5d                   	pop    ebp
c0022178:	c3                   	ret    
c0022179:	83 c4 1c             	add    esp,0x1c
c002217c:	31 f6                	xor    esi,esi
c002217e:	5b                   	pop    ebx
c002217f:	89 f0                	mov    eax,esi
c0022181:	5e                   	pop    esi
c0022182:	5f                   	pop    edi
c0022183:	5d                   	pop    ebp
c0022184:	c3                   	ret    
c0022185:	be 01 00 00 00       	mov    esi,0x1
c002218a:	eb e3                	jmp    c002216f <SoundChannel::buffer16(short*, int)+0xdf>

c002218c <SoundChannel::buffer8(unsigned char*, int)>:
c002218c:	55                   	push   ebp
c002218d:	57                   	push   edi
c002218e:	56                   	push   esi
c002218f:	53                   	push   ebx
c0022190:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022194:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022198:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002219b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002219f:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00221a2:	74 7a                	je     c002221e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00221a4:	85 ff                	test   edi,edi
c00221a6:	7e 76                	jle    c002221e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00221a8:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00221ac:	8d 70 01             	lea    esi,[eax+0x1]
c00221af:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00221b2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00221b5:	8b 1c 9d 40 fe 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd01c0]
c00221bc:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00221bf:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00221c2:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00221c5:	74 5e                	je     c0022225 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00221c7:	83 ff 01             	cmp    edi,0x1
c00221ca:	74 4b                	je     c0022217 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00221cc:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00221d0:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00221d3:	8d 70 01             	lea    esi,[eax+0x1]
c00221d6:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00221d9:	8b 1c 9d 40 fe 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd01c0]
c00221e0:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00221e3:	b8 02 00 00 00       	mov    eax,0x2
c00221e8:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00221eb:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00221ee:	75 23                	jne    c0022213 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00221f0:	eb 27                	jmp    c0022219 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00221f2:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00221f7:	8d 71 01             	lea    esi,[ecx+0x1]
c00221fa:	40                   	inc    eax
c00221fb:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00221fe:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022201:	8b 1c 9d 40 fe 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd01c0]
c0022208:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002220b:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002220e:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022211:	74 06                	je     c0022219 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022213:	39 c7                	cmp    edi,eax
c0022215:	75 db                	jne    c00221f2 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022217:	89 f8                	mov    eax,edi
c0022219:	5b                   	pop    ebx
c002221a:	5e                   	pop    esi
c002221b:	5f                   	pop    edi
c002221c:	5d                   	pop    ebp
c002221d:	c3                   	ret    
c002221e:	5b                   	pop    ebx
c002221f:	31 c0                	xor    eax,eax
c0022221:	5e                   	pop    esi
c0022222:	5f                   	pop    edi
c0022223:	5d                   	pop    ebp
c0022224:	c3                   	ret    
c0022225:	b8 01 00 00 00       	mov    eax,0x1
c002222a:	eb ed                	jmp    c0022219 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002222c <SoundDevice::SoundDevice(char const*)>:
c002222c:	83 ec 1c             	sub    esp,0x1c
c002222f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022233:	83 ec 08             	sub    esp,0x8
c0022236:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002223a:	50                   	push   eax
c002223b:	e8 24 1c ff ff       	call   c0013e64 <Device::Device(char const*)>
c0022240:	83 c4 10             	add    esp,0x10
c0022243:	ba f4 c4 02 c0       	mov    edx,0xc002c4f4
c0022248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002224c:	89 10                	mov    DWORD PTR [eax],edx
c002224e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022252:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002225c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022260:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002226a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022272:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022277:	7f 19                	jg     c0022292 <SoundDevice::SoundDevice(char const*)+0x66>
c0022279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002227d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022281:	83 c2 54             	add    edx,0x54
c0022284:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002228c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022290:	eb e0                	jmp    c0022272 <SoundDevice::SoundDevice(char const*)+0x46>
c0022292:	90                   	nop
c0022293:	83 c4 1c             	add    esp,0x1c
c0022296:	c3                   	ret    
c0022297:	90                   	nop

c0022298 <SoundDevice::~SoundDevice()>:
c0022298:	53                   	push   ebx
c0022299:	83 ec 18             	sub    esp,0x18
c002229c:	ba f4 c4 02 c0       	mov    edx,0xc002c4f4
c00222a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a5:	89 10                	mov    DWORD PTR [eax],edx
c00222a7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222af:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00222b4:	7f 46                	jg     c00222fc <SoundDevice::~SoundDevice()+0x64>
c00222b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00222be:	83 c2 54             	add    edx,0x54
c00222c1:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00222c5:	85 c0                	test   eax,eax
c00222c7:	74 2d                	je     c00222f6 <SoundDevice::~SoundDevice()+0x5e>
c00222c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00222d1:	83 c2 54             	add    edx,0x54
c00222d4:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00222d8:	85 db                	test   ebx,ebx
c00222da:	74 1a                	je     c00222f6 <SoundDevice::~SoundDevice()+0x5e>
c00222dc:	83 ec 0c             	sub    esp,0xc
c00222df:	53                   	push   ebx
c00222e0:	e8 db fc ff ff       	call   c0021fc0 <SoundChannel::~SoundChannel()>
c00222e5:	83 c4 10             	add    esp,0x10
c00222e8:	83 ec 08             	sub    esp,0x8
c00222eb:	6a 2c                	push   0x2c
c00222ed:	53                   	push   ebx
c00222ee:	e8 5c 04 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c00222f3:	83 c4 10             	add    esp,0x10
c00222f6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00222fa:	eb b3                	jmp    c00222af <SoundDevice::~SoundDevice()+0x17>
c00222fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022300:	83 ec 0c             	sub    esp,0xc
c0022303:	50                   	push   eax
c0022304:	e8 25 18 ff ff       	call   c0013b2e <Device::~Device()>
c0022309:	83 c4 10             	add    esp,0x10
c002230c:	90                   	nop
c002230d:	83 c4 18             	add    esp,0x18
c0022310:	5b                   	pop    ebx
c0022311:	c3                   	ret    

c0022312 <SoundDevice::~SoundDevice()>:
c0022312:	83 ec 0c             	sub    esp,0xc
c0022315:	83 ec 0c             	sub    esp,0xc
c0022318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002231c:	e8 77 ff ff ff       	call   c0022298 <SoundDevice::~SoundDevice()>
c0022321:	83 c4 10             	add    esp,0x10
c0022324:	83 ec 08             	sub    esp,0x8
c0022327:	68 e4 01 00 00       	push   0x1e4
c002232c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022330:	e8 1a 04 ff ff       	call   c001274f <operator delete(void*, unsigned long)>
c0022335:	83 c4 10             	add    esp,0x10
c0022338:	83 c4 0c             	add    esp,0xc
c002233b:	c3                   	ret    

c002233c <SoundDevice::getFreeChannelNum()>:
c002233c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022340:	31 c0                	xor    eax,eax
c0022342:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002234a:	74 09                	je     c0022355 <SoundDevice::getFreeChannelNum()+0x19>
c002234c:	40                   	inc    eax
c002234d:	83 f8 20             	cmp    eax,0x20
c0022350:	75 f0                	jne    c0022342 <SoundDevice::getFreeChannelNum()+0x6>
c0022352:	83 c8 ff             	or     eax,0xffffffff
c0022355:	c3                   	ret    

c0022356 <SoundDevice::addChannel(SoundChannel*)>:
c0022356:	56                   	push   esi
c0022357:	53                   	push   ebx
c0022358:	51                   	push   ecx
c0022359:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002235d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022361:	53                   	push   ebx
c0022362:	e8 d5 ff ff ff       	call   c002233c <SoundDevice::getFreeChannelNum()>
c0022367:	5a                   	pop    edx
c0022368:	83 f8 ff             	cmp    eax,0xffffffff
c002236b:	74 51                	je     c00223be <SoundDevice::addChannel(SoundChannel*)+0x68>
c002236d:	85 f6                	test   esi,esi
c002236f:	74 4d                	je     c00223be <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022371:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022378:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002237f:	75 30                	jne    c00223b1 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022381:	83 ec 0c             	sub    esp,0xc
c0022384:	56                   	push   esi
c0022385:	e8 52 fc ff ff       	call   c0021fdc <SoundChannel::getSampleRate()>
c002238a:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022390:	89 34 24             	mov    DWORD PTR [esp],esi
c0022393:	e8 4c fc ff ff       	call   c0021fe4 <SoundChannel::getBits()>
c0022398:	83 c4 0c             	add    esp,0xc
c002239b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00223a1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00223a3:	50                   	push   eax
c00223a4:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00223aa:	53                   	push   ebx
c00223ab:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00223ae:	83 c4 10             	add    esp,0x10
c00223b1:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00223b7:	b8 01 00 00 00       	mov    eax,0x1
c00223bc:	eb 03                	jmp    c00223c1 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00223be:	83 c8 ff             	or     eax,0xffffffff
c00223c1:	5a                   	pop    edx
c00223c2:	5b                   	pop    ebx
c00223c3:	5e                   	pop    esi
c00223c4:	c3                   	ret    
c00223c5:	90                   	nop

c00223c6 <SoundDevice::removeChannel(int)>:
c00223c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ce:	83 fa 1f             	cmp    edx,0x1f
c00223d1:	77 23                	ja     c00223f6 <SoundDevice::removeChannel(int)+0x30>
c00223d3:	8d 14 90             	lea    edx,[eax+edx*4]
c00223d6:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00223dd:	74 17                	je     c00223f6 <SoundDevice::removeChannel(int)+0x30>
c00223df:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00223e9:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00223ef:	75 05                	jne    c00223f6 <SoundDevice::removeChannel(int)+0x30>
c00223f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00223f3:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00223f6:	c3                   	ret    
c00223f7:	90                   	nop

c00223f8 <SoundDevice::floatTo16(float*, short*, int)>:
c00223f8:	57                   	push   edi
c00223f9:	56                   	push   esi
c00223fa:	53                   	push   ebx
c00223fb:	31 db                	xor    ebx,ebx
c00223fd:	83 ec 10             	sub    esp,0x10
c0022400:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022404:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022408:	0f 8d d0 00 00 00    	jge    c00224de <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c002240e:	83 ec 0c             	sub    esp,0xc
c0022411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022415:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022418:	e8 a2 62 00 00       	call   c00286bf <__extendsfdf2>
c002241d:	83 c4 10             	add    esp,0x10
c0022420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022428:	68 00 00 f0 3f       	push   0x3ff00000
c002242d:	6a 00                	push   0x0
c002242f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022437:	e8 0f 52 00 00       	call   c002764b <__adddf3>
c002243c:	83 c4 10             	add    esp,0x10
c002243f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022447:	68 00 00 e0 3f       	push   0x3fe00000
c002244c:	6a 00                	push   0x0
c002244e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022452:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022456:	e8 6d 58 00 00       	call   c0027cc8 <__muldf3>
c002245b:	83 c4 10             	add    esp,0x10
c002245e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022462:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022466:	68 c0 ff df 40       	push   0x40dfffc0
c002246b:	6a 00                	push   0x0
c002246d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022475:	e8 4e 58 00 00       	call   c0027cc8 <__muldf3>
c002247a:	59                   	pop    ecx
c002247b:	5f                   	pop    edi
c002247c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022480:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002248c:	e8 0a 61 00 00       	call   c002859b <__truncdfsf2>
c0022491:	5a                   	pop    edx
c0022492:	89 c7                	mov    edi,eax
c0022494:	59                   	pop    ecx
c0022495:	68 00 fe ff 46       	push   0x46fffe00
c002249a:	50                   	push   eax
c002249b:	e8 a5 51 00 00       	call   c0027645 <__gesf2>
c00224a0:	83 c4 10             	add    esp,0x10
c00224a3:	85 c0                	test   eax,eax
c00224a5:	78 08                	js     c00224af <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c00224a7:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c00224ad:	eb 29                	jmp    c00224d8 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00224af:	50                   	push   eax
c00224b0:	50                   	push   eax
c00224b1:	6a 00                	push   0x0
c00224b3:	57                   	push   edi
c00224b4:	e8 90 51 00 00       	call   c0027649 <__lesf2>
c00224b9:	83 c4 10             	add    esp,0x10
c00224bc:	85 c0                	test   eax,eax
c00224be:	7f 08                	jg     c00224c8 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c00224c0:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c00224c6:	eb 10                	jmp    c00224d8 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00224c8:	83 ec 0c             	sub    esp,0xc
c00224cb:	57                   	push   edi
c00224cc:	e8 8b 62 00 00       	call   c002875c <lrintf>
c00224d1:	83 c4 10             	add    esp,0x10
c00224d4:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00224d8:	43                   	inc    ebx
c00224d9:	e9 26 ff ff ff       	jmp    c0022404 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00224de:	83 c4 10             	add    esp,0x10
c00224e1:	5b                   	pop    ebx
c00224e2:	5e                   	pop    esi
c00224e3:	5f                   	pop    edi
c00224e4:	c3                   	ret    
c00224e5:	90                   	nop

c00224e6 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00224e6:	57                   	push   edi
c00224e7:	56                   	push   esi
c00224e8:	53                   	push   ebx
c00224e9:	31 db                	xor    ebx,ebx
c00224eb:	83 ec 10             	sub    esp,0x10
c00224ee:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00224f2:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00224f6:	0f 8d cb 00 00 00    	jge    c00225c7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00224fc:	83 ec 0c             	sub    esp,0xc
c00224ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022503:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022506:	e8 b4 61 00 00       	call   c00286bf <__extendsfdf2>
c002250b:	83 c4 10             	add    esp,0x10
c002250e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022512:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022516:	68 00 00 f0 3f       	push   0x3ff00000
c002251b:	6a 00                	push   0x0
c002251d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022525:	e8 21 51 00 00       	call   c002764b <__adddf3>
c002252a:	83 c4 10             	add    esp,0x10
c002252d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022531:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022535:	68 00 00 e0 3f       	push   0x3fe00000
c002253a:	6a 00                	push   0x0
c002253c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022544:	e8 7f 57 00 00       	call   c0027cc8 <__muldf3>
c0022549:	83 c4 10             	add    esp,0x10
c002254c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022550:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022554:	68 00 00 60 40       	push   0x40600000
c0022559:	6a 00                	push   0x0
c002255b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002255f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022563:	e8 60 57 00 00       	call   c0027cc8 <__muldf3>
c0022568:	59                   	pop    ecx
c0022569:	5f                   	pop    edi
c002256a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002256e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022572:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022576:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002257a:	e8 1c 60 00 00       	call   c002859b <__truncdfsf2>
c002257f:	5a                   	pop    edx
c0022580:	89 c7                	mov    edi,eax
c0022582:	59                   	pop    ecx
c0022583:	68 00 00 fe 42       	push   0x42fe0000
c0022588:	50                   	push   eax
c0022589:	e8 b7 50 00 00       	call   c0027645 <__gesf2>
c002258e:	83 c4 10             	add    esp,0x10
c0022591:	85 c0                	test   eax,eax
c0022593:	78 06                	js     c002259b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022595:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022599:	eb 26                	jmp    c00225c1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002259b:	50                   	push   eax
c002259c:	50                   	push   eax
c002259d:	6a 00                	push   0x0
c002259f:	57                   	push   edi
c00225a0:	e8 a4 50 00 00       	call   c0027649 <__lesf2>
c00225a5:	83 c4 10             	add    esp,0x10
c00225a8:	85 c0                	test   eax,eax
c00225aa:	7f 06                	jg     c00225b2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00225ac:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00225b0:	eb 0f                	jmp    c00225c1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00225b2:	83 ec 0c             	sub    esp,0xc
c00225b5:	57                   	push   edi
c00225b6:	e8 a1 61 00 00       	call   c002875c <lrintf>
c00225bb:	83 c4 10             	add    esp,0x10
c00225be:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00225c1:	43                   	inc    ebx
c00225c2:	e9 2b ff ff ff       	jmp    c00224f2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00225c7:	83 c4 10             	add    esp,0x10
c00225ca:	5b                   	pop    ebx
c00225cb:	5e                   	pop    esi
c00225cc:	5f                   	pop    edi
c00225cd:	c3                   	ret    

c00225ce <SoundDevice::getAudio(int, float*, float*)>:
c00225ce:	55                   	push   ebp
c00225cf:	31 ed                	xor    ebp,ebp
c00225d1:	57                   	push   edi
c00225d2:	56                   	push   esi
c00225d3:	31 f6                	xor    esi,esi
c00225d5:	53                   	push   ebx
c00225d6:	83 ec 20             	sub    esp,0x20
c00225d9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00225dd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00225e1:	c1 e0 02             	shl    eax,0x2
c00225e4:	50                   	push   eax
c00225e5:	6a 00                	push   0x0
c00225e7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00225eb:	e8 60 e1 fd ff       	call   c0000750 <memset>
c00225f0:	83 c4 10             	add    esp,0x10
c00225f3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225fb:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c0022602:	85 c9                	test   ecx,ecx
c0022604:	74 52                	je     c0022658 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c0022606:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002260a:	99                   	cdq    
c002260b:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022611:	50                   	push   eax
c0022612:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022618:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002261c:	51                   	push   ecx
c002261d:	e8 da f9 ff ff       	call   c0021ffc <SoundChannel::unbuffer(float*, int, int)>
c0022622:	31 d2                	xor    edx,edx
c0022624:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022628:	83 c4 10             	add    esp,0x10
c002262b:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c002262f:	7d 1e                	jge    c002264f <SoundDevice::getAudio(int, float*, float*)+0x81>
c0022631:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022635:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022639:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c002263c:	89 cf                	mov    edi,ecx
c002263e:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022644:	0f af ca             	imul   ecx,edx
c0022647:	42                   	inc    edx
c0022648:	01 e9                	add    ecx,ebp
c002264a:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c002264d:	eb dc                	jmp    c002262b <SoundDevice::getAudio(int, float*, float*)+0x5d>
c002264f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022653:	45                   	inc    ebp
c0022654:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022658:	46                   	inc    esi
c0022659:	83 fe 20             	cmp    esi,0x20
c002265c:	75 9d                	jne    c00225fb <SoundDevice::getAudio(int, float*, float*)+0x2d>
c002265e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022662:	83 c4 1c             	add    esp,0x1c
c0022665:	5b                   	pop    ebx
c0022666:	5e                   	pop    esi
c0022667:	5f                   	pop    edi
c0022668:	5d                   	pop    ebp
c0022669:	c3                   	ret    

c002266a <PCI::open(int, int, void*)>:
c002266a:	83 ec 18             	sub    esp,0x18
c002266d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022671:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022675:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002267b:	8b 10                	mov    edx,DWORD PTR [eax]
c002267d:	50                   	push   eax
c002267e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022681:	31 c0                	xor    eax,eax
c0022683:	83 c4 1c             	add    esp,0x1c
c0022686:	c3                   	ret    
c0022687:	90                   	nop

c0022688 <PCI::close(int, int, void*)>:
c0022688:	31 c0                	xor    eax,eax
c002268a:	c3                   	ret    
c002268b:	90                   	nop

c002268c <PCI::PCI()>:
c002268c:	83 ec 0c             	sub    esp,0xc
c002268f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022693:	83 ec 08             	sub    esp,0x8
c0022696:	68 24 c5 02 c0       	push   0xc002c524
c002269b:	50                   	push   eax
c002269c:	e8 27 0e ff ff       	call   c00134c8 <Bus::Bus(char const*)>
c00226a1:	83 c4 10             	add    esp,0x10
c00226a4:	ba 10 c6 02 c0       	mov    edx,0xc002c610
c00226a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226ad:	89 10                	mov    DWORD PTR [eax],edx
c00226af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226b3:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00226bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226c1:	a3 44 02 03 c0       	mov    ds:0xc0030244,eax
c00226c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226ca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00226d0:	0f b6 d0             	movzx  edx,al
c00226d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226d7:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00226de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226e2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00226e8:	0f b6 d0             	movzx  edx,al
c00226eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226ef:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00226f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00226fe:	8d 50 01             	lea    edx,[eax+0x1]
c0022701:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022705:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002270b:	0f b6 d0             	movzx  edx,al
c002270e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022712:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022716:	83 c9 c0             	or     ecx,0xffffffc0
c0022719:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002271d:	90                   	nop
c002271e:	83 c4 0c             	add    esp,0xc
c0022721:	c3                   	ret    

c0022722 <PCI::readBAR8(unsigned int, int)>:
c0022722:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022726:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002272a:	f6 c2 01             	test   dl,0x1
c002272d:	74 07                	je     c0022736 <PCI::readBAR8(unsigned int, int)+0x14>
c002272f:	83 e2 fc             	and    edx,0xfffffffc
c0022732:	01 c2                	add    edx,eax
c0022734:	ec                   	in     al,dx
c0022735:	c3                   	ret    
c0022736:	83 e2 f0             	and    edx,0xfffffff0
c0022739:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002273c:	c3                   	ret    
c002273d:	90                   	nop

c002273e <PCI::readBAR16(unsigned int, int)>:
c002273e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022742:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022746:	f6 c2 01             	test   dl,0x1
c0022749:	74 08                	je     c0022753 <PCI::readBAR16(unsigned int, int)+0x15>
c002274b:	83 e2 fc             	and    edx,0xfffffffc
c002274e:	01 c2                	add    edx,eax
c0022750:	66 ed                	in     ax,dx
c0022752:	c3                   	ret    
c0022753:	83 e2 f0             	and    edx,0xfffffff0
c0022756:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002275a:	c3                   	ret    
c002275b:	90                   	nop

c002275c <PCI::readBAR32(unsigned int, int)>:
c002275c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022760:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022764:	f6 c2 01             	test   dl,0x1
c0022767:	74 07                	je     c0022770 <PCI::readBAR32(unsigned int, int)+0x14>
c0022769:	83 e2 fc             	and    edx,0xfffffffc
c002276c:	01 c2                	add    edx,eax
c002276e:	ed                   	in     eax,dx
c002276f:	c3                   	ret    
c0022770:	83 e2 f0             	and    edx,0xfffffff0
c0022773:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022776:	c3                   	ret    
c0022777:	90                   	nop

c0022778 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022778:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002277c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022780:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022784:	f6 c2 01             	test   dl,0x1
c0022787:	74 07                	je     c0022790 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022789:	83 e2 fc             	and    edx,0xfffffffc
c002278c:	01 ca                	add    edx,ecx
c002278e:	ee                   	out    dx,al
c002278f:	c3                   	ret    
c0022790:	83 e2 f0             	and    edx,0xfffffff0
c0022793:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022796:	c3                   	ret    
c0022797:	90                   	nop

c0022798 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002279c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00227a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00227a4:	f6 c2 01             	test   dl,0x1
c00227a7:	74 08                	je     c00227b1 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00227a9:	83 e2 fc             	and    edx,0xfffffffc
c00227ac:	01 ca                	add    edx,ecx
c00227ae:	66 ef                	out    dx,ax
c00227b0:	c3                   	ret    
c00227b1:	83 e2 f0             	and    edx,0xfffffff0
c00227b4:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00227b8:	c3                   	ret    
c00227b9:	90                   	nop

c00227ba <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00227ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00227be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00227c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00227c6:	f6 c2 01             	test   dl,0x1
c00227c9:	74 07                	je     c00227d2 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00227cb:	83 e2 fc             	and    edx,0xfffffffc
c00227ce:	01 ca                	add    edx,ecx
c00227d0:	ef                   	out    dx,eax
c00227d1:	c3                   	ret    
c00227d2:	83 e2 f0             	and    edx,0xfffffff0
c00227d5:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00227d8:	c3                   	ret    
c00227d9:	90                   	nop

c00227da <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00227da:	55                   	push   ebp
c00227db:	57                   	push   edi
c00227dc:	56                   	push   esi
c00227dd:	53                   	push   ebx
c00227de:	83 ec 0c             	sub    esp,0xc
c00227e1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00227e5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00227e9:	89 f0                	mov    eax,esi
c00227eb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00227ef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00227f3:	3c 07                	cmp    al,0x7
c00227f5:	76 10                	jbe    c0022807 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00227f7:	83 ec 0c             	sub    esp,0xc
c00227fa:	68 2c c5 02 c0       	push   0xc002c52c
c00227ff:	e8 0f 78 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0022804:	83 c4 10             	add    esp,0x10
c0022807:	80 fb 0f             	cmp    bl,0xf
c002280a:	76 10                	jbe    c002281c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c002280c:	83 ec 0c             	sub    esp,0xc
c002280f:	68 5c c5 02 c0       	push   0xc002c55c
c0022814:	e8 fa 77 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0022819:	83 c4 10             	add    esp,0x10
c002281c:	8d 04 36             	lea    eax,[esi+esi*1]
c002281f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022824:	83 c8 f0             	or     eax,0xfffffff0
c0022827:	ee                   	out    dx,al
c0022828:	ba fa 0c 00 00       	mov    edx,0xcfa
c002282d:	89 e8                	mov    eax,ebp
c002282f:	ee                   	out    dx,al
c0022830:	83 c4 0c             	add    esp,0xc
c0022833:	89 d8                	mov    eax,ebx
c0022835:	66 81 e7 fc 00       	and    di,0xfc
c002283a:	5b                   	pop    ebx
c002283b:	c1 e0 08             	shl    eax,0x8
c002283e:	5e                   	pop    esi
c002283f:	09 f8                	or     eax,edi
c0022841:	5f                   	pop    edi
c0022842:	66 0d 00 c0          	or     ax,0xc000
c0022846:	5d                   	pop    ebp
c0022847:	c3                   	ret    

c0022848 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022848:	57                   	push   edi
c0022849:	56                   	push   esi
c002284a:	53                   	push   ebx
c002284b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002284f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022853:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022859:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002285d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022861:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022865:	83 ff 01             	cmp    edi,0x1
c0022868:	75 3e                	jne    c00228a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c002286a:	89 de                	mov    esi,ebx
c002286c:	0f b6 c0             	movzx  eax,al
c002286f:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022875:	c1 e0 10             	shl    eax,0x10
c0022878:	0f b6 c9             	movzx  ecx,cl
c002287b:	09 f0                	or     eax,esi
c002287d:	c1 e1 08             	shl    ecx,0x8
c0022880:	0f b6 d2             	movzx  edx,dl
c0022883:	09 c8                	or     eax,ecx
c0022885:	c1 e2 0b             	shl    edx,0xb
c0022888:	09 d0                	or     eax,edx
c002288a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002288f:	0d 00 00 00 80       	or     eax,0x80000000
c0022894:	ef                   	out    dx,eax
c0022895:	ba fc 0c 00 00       	mov    edx,0xcfc
c002289a:	ed                   	in     eax,dx
c002289b:	83 e3 02             	and    ebx,0x2
c002289e:	0f b6 cb             	movzx  ecx,bl
c00228a1:	c1 e1 03             	shl    ecx,0x3
c00228a4:	d3 e8                	shr    eax,cl
c00228a6:	eb 43                	jmp    c00228eb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00228a8:	83 ff 02             	cmp    edi,0x2
c00228ab:	75 2c                	jne    c00228d9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00228ad:	83 ec 0c             	sub    esp,0xc
c00228b0:	0f b6 c9             	movzx  ecx,cl
c00228b3:	0f b6 d2             	movzx  edx,dl
c00228b6:	0f b6 fb             	movzx  edi,bl
c00228b9:	0f b6 c0             	movzx  eax,al
c00228bc:	57                   	push   edi
c00228bd:	51                   	push   ecx
c00228be:	52                   	push   edx
c00228bf:	50                   	push   eax
c00228c0:	56                   	push   esi
c00228c1:	e8 14 ff ff ff       	call   c00227da <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228c6:	89 c2                	mov    edx,eax
c00228c8:	ed                   	in     eax,dx
c00228c9:	83 e3 02             	and    ebx,0x2
c00228cc:	83 c4 20             	add    esp,0x20
c00228cf:	0f b6 cb             	movzx  ecx,bl
c00228d2:	c1 e1 03             	shl    ecx,0x3
c00228d5:	d3 e8                	shr    eax,cl
c00228d7:	eb 12                	jmp    c00228eb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00228d9:	83 ec 0c             	sub    esp,0xc
c00228dc:	68 8c c5 02 c0       	push   0xc002c58c
c00228e1:	e8 2d 77 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c00228e6:	83 c4 10             	add    esp,0x10
c00228e9:	31 c0                	xor    eax,eax
c00228eb:	5b                   	pop    ebx
c00228ec:	5e                   	pop    esi
c00228ed:	5f                   	pop    edi
c00228ee:	c3                   	ret    
c00228ef:	90                   	nop

c00228f0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00228f0:	83 ec 18             	sub    esp,0x18
c00228f3:	6a 00                	push   0x0
c00228f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00228fa:	50                   	push   eax
c00228fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022900:	50                   	push   eax
c0022901:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022906:	50                   	push   eax
c0022907:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002290b:	e8 38 ff ff ff       	call   c0022848 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022910:	83 c4 2c             	add    esp,0x2c
c0022913:	c3                   	ret    

c0022914 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022914:	83 ec 18             	sub    esp,0x18
c0022917:	6a 0e                	push   0xe
c0022919:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002291e:	50                   	push   eax
c002291f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022924:	50                   	push   eax
c0022925:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002292a:	50                   	push   eax
c002292b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002292f:	e8 14 ff ff ff       	call   c0022848 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022934:	83 c4 2c             	add    esp,0x2c
c0022937:	0f b6 c0             	movzx  eax,al
c002293a:	c3                   	ret    
c002293b:	90                   	nop

c002293c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002293c:	55                   	push   ebp
c002293d:	57                   	push   edi
c002293e:	56                   	push   esi
c002293f:	53                   	push   ebx
c0022940:	83 ec 18             	sub    esp,0x18
c0022943:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022948:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002294d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022952:	6a 0a                	push   0xa
c0022954:	56                   	push   esi
c0022955:	55                   	push   ebp
c0022956:	57                   	push   edi
c0022957:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002295b:	e8 e8 fe ff ff       	call   c0022848 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022960:	83 c4 14             	add    esp,0x14
c0022963:	89 c3                	mov    ebx,eax
c0022965:	6a 0a                	push   0xa
c0022967:	0f b6 db             	movzx  ebx,bl
c002296a:	56                   	push   esi
c002296b:	55                   	push   ebp
c002296c:	57                   	push   edi
c002296d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022971:	e8 d2 fe ff ff       	call   c0022848 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022976:	83 c4 2c             	add    esp,0x2c
c0022979:	25 00 ff 00 00       	and    eax,0xff00
c002297e:	09 d8                	or     eax,ebx
c0022980:	5b                   	pop    ebx
c0022981:	5e                   	pop    esi
c0022982:	5f                   	pop    edi
c0022983:	5d                   	pop    ebp
c0022984:	c3                   	ret    
c0022985:	90                   	nop

c0022986 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022986:	83 ec 18             	sub    esp,0x18
c0022989:	6a 08                	push   0x8
c002298b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022990:	50                   	push   eax
c0022991:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022996:	50                   	push   eax
c0022997:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002299c:	50                   	push   eax
c002299d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00229a1:	e8 a2 fe ff ff       	call   c0022848 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229a6:	83 c4 2c             	add    esp,0x2c
c00229a9:	0f b6 c4             	movzx  eax,ah
c00229ac:	c3                   	ret    
c00229ad:	90                   	nop

c00229ae <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00229ae:	83 ec 18             	sub    esp,0x18
c00229b1:	6a 08                	push   0x8
c00229b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229b8:	50                   	push   eax
c00229b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229be:	50                   	push   eax
c00229bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229c4:	50                   	push   eax
c00229c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00229c9:	e8 7a fe ff ff       	call   c0022848 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229ce:	83 c4 2c             	add    esp,0x2c
c00229d1:	c3                   	ret    

c00229d2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00229d2:	83 ec 18             	sub    esp,0x18
c00229d5:	6a 3c                	push   0x3c
c00229d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229dc:	50                   	push   eax
c00229dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229e2:	50                   	push   eax
c00229e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229e8:	50                   	push   eax
c00229e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00229ed:	e8 56 fe ff ff       	call   c0022848 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229f2:	83 c4 2c             	add    esp,0x2c
c00229f5:	c3                   	ret    

c00229f6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00229f6:	83 ec 18             	sub    esp,0x18
c00229f9:	6a 18                	push   0x18
c00229fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a00:	50                   	push   eax
c0022a01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a06:	50                   	push   eax
c0022a07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a0c:	50                   	push   eax
c0022a0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022a11:	e8 32 fe ff ff       	call   c0022848 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a16:	83 c4 2c             	add    esp,0x2c
c0022a19:	0f b6 c4             	movzx  eax,ah
c0022a1c:	c3                   	ret    
c0022a1d:	90                   	nop

c0022a1e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a1e:	55                   	push   ebp
c0022a1f:	57                   	push   edi
c0022a20:	56                   	push   esi
c0022a21:	53                   	push   ebx
c0022a22:	83 ec 28             	sub    esp,0x28
c0022a25:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022a29:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022a2e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022a33:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022a38:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022a3f:	8d 43 12             	lea    eax,[ebx+0x12]
c0022a42:	83 c3 10             	add    ebx,0x10
c0022a45:	0f b6 c0             	movzx  eax,al
c0022a48:	0f b6 db             	movzx  ebx,bl
c0022a4b:	50                   	push   eax
c0022a4c:	51                   	push   ecx
c0022a4d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022a51:	57                   	push   edi
c0022a52:	55                   	push   ebp
c0022a53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022a57:	e8 ec fd ff ff       	call   c0022848 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a5c:	83 c4 14             	add    esp,0x14
c0022a5f:	89 c6                	mov    esi,eax
c0022a61:	53                   	push   ebx
c0022a62:	c1 e6 10             	shl    esi,0x10
c0022a65:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022a69:	51                   	push   ecx
c0022a6a:	57                   	push   edi
c0022a6b:	55                   	push   ebp
c0022a6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022a70:	e8 d3 fd ff ff       	call   c0022848 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a75:	83 c4 3c             	add    esp,0x3c
c0022a78:	0f b7 c0             	movzx  eax,ax
c0022a7b:	5b                   	pop    ebx
c0022a7c:	09 f0                	or     eax,esi
c0022a7e:	5e                   	pop    esi
c0022a7f:	5f                   	pop    edi
c0022a80:	5d                   	pop    ebp
c0022a81:	c3                   	ret    

c0022a82 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022a82:	55                   	push   ebp
c0022a83:	57                   	push   edi
c0022a84:	56                   	push   esi
c0022a85:	53                   	push   ebx
c0022a86:	83 ec 0c             	sub    esp,0xc
c0022a89:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022a8d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022a91:	89 f5                	mov    ebp,esi
c0022a93:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022a99:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022a9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022aa1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022aa5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022aa9:	83 f9 01             	cmp    ecx,0x1
c0022aac:	75 5d                	jne    c0022b0b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022aae:	0f b6 c8             	movzx  ecx,al
c0022ab1:	0f b6 d2             	movzx  edx,dl
c0022ab4:	c1 e1 10             	shl    ecx,0x10
c0022ab7:	c1 e2 0b             	shl    edx,0xb
c0022aba:	89 f0                	mov    eax,esi
c0022abc:	25 fc 00 00 00       	and    eax,0xfc
c0022ac1:	09 c1                	or     ecx,eax
c0022ac3:	89 e8                	mov    eax,ebp
c0022ac5:	0f b6 c0             	movzx  eax,al
c0022ac8:	c1 e0 08             	shl    eax,0x8
c0022acb:	09 c1                	or     ecx,eax
c0022acd:	09 d1                	or     ecx,edx
c0022acf:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ad4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022ada:	89 c8                	mov    eax,ecx
c0022adc:	ef                   	out    dx,eax
c0022add:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ae2:	ed                   	in     eax,dx
c0022ae3:	0f b7 db             	movzx  ebx,bx
c0022ae6:	83 e6 02             	and    esi,0x2
c0022ae9:	74 0a                	je     c0022af5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022aeb:	0f b7 d0             	movzx  edx,ax
c0022aee:	c1 e3 10             	shl    ebx,0x10
c0022af1:	09 d3                	or     ebx,edx
c0022af3:	eb 05                	jmp    c0022afa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022af5:	66 31 c0             	xor    ax,ax
c0022af8:	09 c3                	or     ebx,eax
c0022afa:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022aff:	89 c8                	mov    eax,ecx
c0022b01:	ef                   	out    dx,eax
c0022b02:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b07:	89 d8                	mov    eax,ebx
c0022b09:	eb 41                	jmp    c0022b4c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022b0b:	83 f9 02             	cmp    ecx,0x2
c0022b0e:	75 45                	jne    c0022b55 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022b10:	83 ec 0c             	sub    esp,0xc
c0022b13:	0f b6 d2             	movzx  edx,dl
c0022b16:	89 f1                	mov    ecx,esi
c0022b18:	0f b6 c0             	movzx  eax,al
c0022b1b:	0f b6 f1             	movzx  esi,cl
c0022b1e:	89 e9                	mov    ecx,ebp
c0022b20:	56                   	push   esi
c0022b21:	0f b6 c9             	movzx  ecx,cl
c0022b24:	51                   	push   ecx
c0022b25:	52                   	push   edx
c0022b26:	50                   	push   eax
c0022b27:	57                   	push   edi
c0022b28:	e8 ad fc ff ff       	call   c00227da <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b2d:	89 c2                	mov    edx,eax
c0022b2f:	ed                   	in     eax,dx
c0022b30:	83 c4 20             	add    esp,0x20
c0022b33:	0f b7 db             	movzx  ebx,bx
c0022b36:	f6 c2 02             	test   dl,0x2
c0022b39:	74 0c                	je     c0022b47 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022b3b:	0f b7 c8             	movzx  ecx,ax
c0022b3e:	89 d8                	mov    eax,ebx
c0022b40:	c1 e0 10             	shl    eax,0x10
c0022b43:	09 c8                	or     eax,ecx
c0022b45:	eb 05                	jmp    c0022b4c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022b47:	66 31 c0             	xor    ax,ax
c0022b4a:	09 d8                	or     eax,ebx
c0022b4c:	ef                   	out    dx,eax
c0022b4d:	83 c4 0c             	add    esp,0xc
c0022b50:	5b                   	pop    ebx
c0022b51:	5e                   	pop    esi
c0022b52:	5f                   	pop    edi
c0022b53:	5d                   	pop    ebp
c0022b54:	c3                   	ret    
c0022b55:	c7 44 24 20 8c c5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c58c
c0022b5d:	83 c4 0c             	add    esp,0xc
c0022b60:	5b                   	pop    ebx
c0022b61:	5e                   	pop    esi
c0022b62:	5f                   	pop    edi
c0022b63:	5d                   	pop    ebp
c0022b64:	e9 aa 74 ff ff       	jmp    c001a013 <Krnl::panic(char const*)>
c0022b69:	90                   	nop

c0022b6a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022b6a:	55                   	push   ebp
c0022b6b:	57                   	push   edi
c0022b6c:	56                   	push   esi
c0022b6d:	53                   	push   ebx
c0022b6e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022b74:	80 3d 50 02 03 c0 00 	cmp    BYTE PTR ds:0xc0030250,0x0
c0022b7b:	0f 85 84 00 00 00    	jne    c0022c05 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022b81:	83 ec 0c             	sub    esp,0xc
c0022b84:	68 14 01 00 00       	push   0x114
c0022b89:	e8 41 cc fe ff       	call   c000f7cf <malloc>
c0022b8e:	83 c4 0c             	add    esp,0xc
c0022b91:	89 c3                	mov    ebx,eax
c0022b93:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c0022b99:	68 92 c5 02 c0       	push   0xc002c592
c0022b9e:	50                   	push   eax
c0022b9f:	e8 e2 01 ff ff       	call   c0012d86 <File::File(char const*, Process*)>
c0022ba4:	5a                   	pop    edx
c0022ba5:	59                   	pop    ecx
c0022ba6:	6a 01                	push   0x1
c0022ba8:	53                   	push   ebx
c0022ba9:	e8 3c 02 ff ff       	call   c0012dea <File::open(FileOpenMode)>
c0022bae:	83 c4 0c             	add    esp,0xc
c0022bb1:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022bb5:	50                   	push   eax
c0022bb6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022bba:	50                   	push   eax
c0022bbb:	53                   	push   ebx
c0022bbc:	e8 d5 04 ff ff       	call   c0013096 <File::stat(unsigned long long*, bool*)>
c0022bc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022bc5:	40                   	inc    eax
c0022bc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bc9:	e8 01 cc fe ff       	call   c000f7cf <malloc>
c0022bce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022bd2:	a3 4c 02 03 c0       	mov    ds:0xc003024c,eax
c0022bd7:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022bdb:	5e                   	pop    esi
c0022bdc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022bde:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022be2:	51                   	push   ecx
c0022be3:	50                   	push   eax
c0022be4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022be8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022bec:	53                   	push   ebx
c0022bed:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022bf0:	83 c4 14             	add    esp,0x14
c0022bf3:	53                   	push   ebx
c0022bf4:	e8 4f 02 ff ff       	call   c0012e48 <File::close()>
c0022bf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022bfd:	83 c4 10             	add    esp,0x10
c0022c00:	a3 48 02 03 c0       	mov    ds:0xc0030248,eax
c0022c05:	a1 48 02 03 c0       	mov    eax,ds:0xc0030248
c0022c0a:	8b 15 4c 02 03 c0    	mov    edx,DWORD PTR ds:0xc003024c
c0022c10:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c13:	31 ff                	xor    edi,edi
c0022c15:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022c1d:	31 f6                	xor    esi,esi
c0022c1f:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022c24:	31 db                	xor    ebx,ebx
c0022c26:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022c2e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022c33:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022c3a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022c3e:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022c45:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022c49:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022c4c:	0f 8e 6b 01 00 00    	jle    c0022dbd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022c52:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022c55:	d4 40                	aam    0x40
c0022c57:	d5 39                	aad    0x39
c0022c59:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022c5d:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022c61:	d4 40                	aam    0x40
c0022c63:	d5 39                	aad    0x39
c0022c65:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022c69:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022c6d:	d4 40                	aam    0x40
c0022c6f:	d5 39                	aad    0x39
c0022c71:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022c75:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022c79:	d4 40                	aam    0x40
c0022c7b:	d5 39                	aad    0x39
c0022c7d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022c81:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022c85:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022c89:	3c 56                	cmp    al,0x56
c0022c8b:	74 45                	je     c0022cd2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022c8d:	d4 40                	aam    0x40
c0022c8f:	d5 39                	aad    0x39
c0022c91:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022c94:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022c98:	0f b6 c9             	movzx  ecx,cl
c0022c9b:	c1 e1 04             	shl    ecx,0x4
c0022c9e:	d4 40                	aam    0x40
c0022ca0:	d5 39                	aad    0x39
c0022ca2:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022ca5:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022ca9:	0f b6 db             	movzx  ebx,bl
c0022cac:	09 cb                	or     ebx,ecx
c0022cae:	c1 e3 04             	shl    ebx,0x4
c0022cb1:	d4 40                	aam    0x40
c0022cb3:	d5 39                	aad    0x39
c0022cb5:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022cb8:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022cbc:	0f b6 c9             	movzx  ecx,cl
c0022cbf:	09 cb                	or     ebx,ecx
c0022cc1:	c1 e3 04             	shl    ebx,0x4
c0022cc4:	89 d9                	mov    ecx,ebx
c0022cc6:	d4 40                	aam    0x40
c0022cc8:	d5 39                	aad    0x39
c0022cca:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022ccd:	0f b6 db             	movzx  ebx,bl
c0022cd0:	09 cb                	or     ebx,ecx
c0022cd2:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022cd6:	80 f9 44             	cmp    cl,0x44
c0022cd9:	74 47                	je     c0022d22 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022cdb:	88 c8                	mov    al,cl
c0022cdd:	d4 40                	aam    0x40
c0022cdf:	d5 39                	aad    0x39
c0022ce1:	83 e8 30             	sub    eax,0x30
c0022ce4:	0f b6 e8             	movzx  ebp,al
c0022ce7:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022ceb:	c1 e5 04             	shl    ebp,0x4
c0022cee:	d4 40                	aam    0x40
c0022cf0:	d5 39                	aad    0x39
c0022cf2:	83 e8 30             	sub    eax,0x30
c0022cf5:	0f b6 f0             	movzx  esi,al
c0022cf8:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022cfc:	09 ee                	or     esi,ebp
c0022cfe:	c1 e6 04             	shl    esi,0x4
c0022d01:	d4 40                	aam    0x40
c0022d03:	d5 39                	aad    0x39
c0022d05:	83 e8 30             	sub    eax,0x30
c0022d08:	0f b6 e8             	movzx  ebp,al
c0022d0b:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022d0f:	09 ee                	or     esi,ebp
c0022d11:	c1 e6 04             	shl    esi,0x4
c0022d14:	89 f5                	mov    ebp,esi
c0022d16:	d4 40                	aam    0x40
c0022d18:	d5 39                	aad    0x39
c0022d1a:	83 e8 30             	sub    eax,0x30
c0022d1d:	0f b6 f0             	movzx  esi,al
c0022d20:	09 ee                	or     esi,ebp
c0022d22:	83 c7 10             	add    edi,0x10
c0022d25:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022d29:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022d2c:	3c 0a                	cmp    al,0xa
c0022d2e:	74 09                	je     c0022d39 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022d30:	45                   	inc    ebp
c0022d31:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022d34:	75 16                	jne    c0022d4c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022d36:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022d39:	3c 0a                	cmp    al,0xa
c0022d3b:	0f 94 c0             	sete   al
c0022d3e:	0f b6 c0             	movzx  eax,al
c0022d41:	01 c7                	add    edi,eax
c0022d43:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022d48:	75 0c                	jne    c0022d56 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022d4a:	eb 15                	jmp    c0022d61 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022d4c:	47                   	inc    edi
c0022d4d:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022d50:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022d54:	eb d3                	jmp    c0022d29 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022d56:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022d5b:	0f 85 e8 fe ff ff    	jne    c0022c49 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022d61:	80 f9 44             	cmp    cl,0x44
c0022d64:	74 0b                	je     c0022d71 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022d66:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022d6b:	0f 85 d8 fe ff ff    	jne    c0022c49 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022d71:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022d75:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022d79:	c1 e1 04             	shl    ecx,0x4
c0022d7c:	83 e8 30             	sub    eax,0x30
c0022d7f:	09 c8                	or     eax,ecx
c0022d81:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022d85:	0f 85 be fe ff ff    	jne    c0022c49 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022d8b:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022d8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022d93:	c1 e1 04             	shl    ecx,0x4
c0022d96:	83 e8 30             	sub    eax,0x30
c0022d99:	09 c8                	or     eax,ecx
c0022d9b:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022d9f:	0f 85 a4 fe ff ff    	jne    c0022c49 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022da5:	50                   	push   eax
c0022da6:	50                   	push   eax
c0022da7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022dab:	50                   	push   eax
c0022dac:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022db3:	e8 54 da fd ff       	call   c000080c <strcpy>
c0022db8:	83 c4 10             	add    esp,0x10
c0022dbb:	eb 15                	jmp    c0022dd2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022dbd:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022dc4:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022dcf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022dd2:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022dd9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022ddf:	5b                   	pop    ebx
c0022de0:	5e                   	pop    esi
c0022de1:	5f                   	pop    edi
c0022de2:	5d                   	pop    ebp
c0022de3:	c3                   	ret    

c0022de4 <PCI::checkBus(unsigned char)>:
c0022de4:	56                   	push   esi
c0022de5:	53                   	push   ebx
c0022de6:	31 db                	xor    ebx,ebx
c0022de8:	51                   	push   ecx
c0022de9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022dee:	52                   	push   edx
c0022def:	53                   	push   ebx
c0022df0:	43                   	inc    ebx
c0022df1:	56                   	push   esi
c0022df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022df6:	e8 37 03 00 00       	call   c0023132 <PCI::checkDevice(unsigned char, unsigned char)>
c0022dfb:	83 c4 10             	add    esp,0x10
c0022dfe:	83 fb 20             	cmp    ebx,0x20
c0022e01:	75 eb                	jne    c0022dee <PCI::checkBus(unsigned char)+0xa>
c0022e03:	58                   	pop    eax
c0022e04:	5b                   	pop    ebx
c0022e05:	5e                   	pop    esi
c0022e06:	c3                   	ret    
c0022e07:	90                   	nop

c0022e08 <PCI::foundDevice(PCIDeviceInfo)>:
c0022e08:	55                   	push   ebp
c0022e09:	57                   	push   edi
c0022e0a:	56                   	push   esi
c0022e0b:	53                   	push   ebx
c0022e0c:	83 ec 1c             	sub    esp,0x1c
c0022e0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022e13:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022e19:	0f 84 52 01 00 00    	je     c0022f71 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022e1f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022e23:	66 81 f9 06 04       	cmp    cx,0x406
c0022e28:	75 2c                	jne    c0022e56 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022e2a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022e2f:	50                   	push   eax
c0022e30:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022e35:	50                   	push   eax
c0022e36:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022e3b:	50                   	push   eax
c0022e3c:	56                   	push   esi
c0022e3d:	e8 b4 fb ff ff       	call   c00229f6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022e42:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022e46:	0f b6 c0             	movzx  eax,al
c0022e49:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022e4d:	83 c4 2c             	add    esp,0x2c
c0022e50:	5b                   	pop    ebx
c0022e51:	5e                   	pop    esi
c0022e52:	5f                   	pop    edi
c0022e53:	5d                   	pop    ebp
c0022e54:	eb 8e                	jmp    c0022de4 <PCI::checkBus(unsigned char)>
c0022e56:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022e5a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022e60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e64:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022e68:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022e6c:	88 d3                	mov    bl,dl
c0022e6e:	85 c0                	test   eax,eax
c0022e70:	74 33                	je     c0022ea5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022e72:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022e75:	85 d2                	test   edx,edx
c0022e77:	74 28                	je     c0022ea1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022e79:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022e7f:	31 ef                	xor    edi,ebp
c0022e81:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022e87:	75 18                	jne    c0022ea1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022e89:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022e8d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022e93:	75 0c                	jne    c0022ea1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022e95:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022e9b:	0f 84 d0 00 00 00    	je     c0022f71 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022ea1:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ea3:	eb c9                	jmp    c0022e6e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022ea5:	66 81 f9 01 06       	cmp    cx,0x601
c0022eaa:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022eae:	75 19                	jne    c0022ec9 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022eb0:	83 ec 0c             	sub    esp,0xc
c0022eb3:	68 64 01 00 00       	push   0x164
c0022eb8:	e8 12 c9 fe ff       	call   c000f7cf <malloc>
c0022ebd:	89 c5                	mov    ebp,eax
c0022ebf:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ec2:	e8 85 0e 00 00       	call   c0023d4c <SATABus::SATABus()>
c0022ec7:	eb 1e                	jmp    c0022ee7 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022ec9:	66 81 f9 01 01       	cmp    cx,0x101
c0022ece:	75 60                	jne    c0022f30 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022ed0:	83 ec 0c             	sub    esp,0xc
c0022ed3:	68 70 02 00 00       	push   0x270
c0022ed8:	e8 f2 c8 fe ff       	call   c000f7cf <malloc>
c0022edd:	89 c5                	mov    ebp,eax
c0022edf:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ee2:	e8 0f 03 00 00       	call   c00231f6 <IDE::IDE()>
c0022ee7:	58                   	pop    eax
c0022ee8:	5a                   	pop    edx
c0022ee9:	55                   	push   ebp
c0022eea:	56                   	push   esi
c0022eeb:	e8 70 0d ff ff       	call   c0013c60 <Device::addChild(Device*)>
c0022ef0:	83 ec 1c             	sub    esp,0x1c
c0022ef3:	b9 09 00 00 00       	mov    ecx,0x9
c0022ef8:	fc                   	cld    
c0022ef9:	89 e7                	mov    edi,esp
c0022efb:	89 de                	mov    esi,ebx
c0022efd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022eff:	55                   	push   ebp
c0022f00:	e8 6d 0c ff ff       	call   c0013b72 <Device::preOpenPCI(PCIDeviceInfo)>
c0022f05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022f08:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022f0c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022f14:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022f1c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022f24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f27:	83 c4 4c             	add    esp,0x4c
c0022f2a:	5b                   	pop    ebx
c0022f2b:	5e                   	pop    esi
c0022f2c:	5f                   	pop    edi
c0022f2d:	5d                   	pop    ebp
c0022f2e:	ff e0                	jmp    eax
c0022f30:	83 ec 0c             	sub    esp,0xc
c0022f33:	68 58 01 00 00       	push   0x158
c0022f38:	e8 92 c8 fe ff       	call   c000f7cf <malloc>
c0022f3d:	89 c5                	mov    ebp,eax
c0022f3f:	58                   	pop    eax
c0022f40:	5a                   	pop    edx
c0022f41:	68 ab c5 02 c0       	push   0xc002c5ab
c0022f46:	55                   	push   ebp
c0022f47:	e8 1e 10 ff ff       	call   c0013f6a <DriverlessDevice::DriverlessDevice(char const*)>
c0022f4c:	59                   	pop    ecx
c0022f4d:	5f                   	pop    edi
c0022f4e:	55                   	push   ebp
c0022f4f:	56                   	push   esi
c0022f50:	e8 0b 0d ff ff       	call   c0013c60 <Device::addChild(Device*)>
c0022f55:	b9 09 00 00 00       	mov    ecx,0x9
c0022f5a:	fc                   	cld    
c0022f5b:	89 df                	mov    edi,ebx
c0022f5d:	89 de                	mov    esi,ebx
c0022f5f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f61:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022f65:	83 c4 2c             	add    esp,0x2c
c0022f68:	5b                   	pop    ebx
c0022f69:	5e                   	pop    esi
c0022f6a:	5f                   	pop    edi
c0022f6b:	5d                   	pop    ebp
c0022f6c:	e9 01 0c ff ff       	jmp    c0013b72 <Device::preOpenPCI(PCIDeviceInfo)>
c0022f71:	83 c4 1c             	add    esp,0x1c
c0022f74:	5b                   	pop    ebx
c0022f75:	5e                   	pop    esi
c0022f76:	5f                   	pop    edi
c0022f77:	5d                   	pop    ebp
c0022f78:	c3                   	ret    
c0022f79:	90                   	nop

c0022f7a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022f7a:	55                   	push   ebp
c0022f7b:	57                   	push   edi
c0022f7c:	56                   	push   esi
c0022f7d:	53                   	push   ebx
c0022f7e:	83 ec 68             	sub    esp,0x68
c0022f81:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022f85:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022f8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022f90:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022f97:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022f9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022fa0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022fa7:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022fac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022fb0:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022fb5:	6a 0c                	push   0xc
c0022fb7:	57                   	push   edi
c0022fb8:	53                   	push   ebx
c0022fb9:	56                   	push   esi
c0022fba:	55                   	push   ebp
c0022fbb:	e8 88 f8 ff ff       	call   c0022848 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fc0:	83 c4 20             	add    esp,0x20
c0022fc3:	57                   	push   edi
c0022fc4:	53                   	push   ebx
c0022fc5:	56                   	push   esi
c0022fc6:	55                   	push   ebp
c0022fc7:	e8 70 f9 ff ff       	call   c002293c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022fcc:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022fd1:	57                   	push   edi
c0022fd2:	53                   	push   ebx
c0022fd3:	56                   	push   esi
c0022fd4:	55                   	push   ebp
c0022fd5:	e8 f8 f9 ff ff       	call   c00229d2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022fda:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022fde:	83 c4 14             	add    esp,0x14
c0022fe1:	6a 3c                	push   0x3c
c0022fe3:	57                   	push   edi
c0022fe4:	53                   	push   ebx
c0022fe5:	56                   	push   esi
c0022fe6:	55                   	push   ebp
c0022fe7:	e8 5c f8 ff ff       	call   c0022848 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fec:	0f b6 c4             	movzx  eax,ah
c0022fef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022ff3:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022ff7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022ffb:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0023000:	83 c4 20             	add    esp,0x20
c0023003:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023009:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023010:	74 7c                	je     c002308e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023012:	31 c0                	xor    eax,eax
c0023014:	8b 15 28 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df28
c002301a:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023020:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0023026:	7e 66                	jle    c002308e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023028:	8d 14 c2             	lea    edx,[edx+eax*8]
c002302b:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023032:	39 cb                	cmp    ebx,ecx
c0023034:	75 55                	jne    c002308b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023036:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c002303d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023041:	75 48                	jne    c002308b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023043:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023047:	83 ec 0c             	sub    esp,0xc
c002304a:	68 c5 c5 02 c0       	push   0xc002c5c5
c002304f:	e8 d3 f7 fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0023054:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023058:	8b 15 28 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df28
c002305e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023062:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023068:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0023070:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0023074:	52                   	push   edx
c0023075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023079:	53                   	push   ebx
c002307a:	68 ea c5 02 c0       	push   0xc002c5ea
c002307f:	e8 a3 f7 fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0023084:	83 c4 20             	add    esp,0x20
c0023087:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002308b:	40                   	inc    eax
c002308c:	eb 86                	jmp    c0023014 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c002308e:	31 d2                	xor    edx,edx
c0023090:	83 ec 0c             	sub    esp,0xc
c0023093:	57                   	push   edi
c0023094:	53                   	push   ebx
c0023095:	56                   	push   esi
c0023096:	52                   	push   edx
c0023097:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002309b:	55                   	push   ebp
c002309c:	e8 7d f9 ff ff       	call   c0022a1e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00230a5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00230a9:	42                   	inc    edx
c00230aa:	83 c4 20             	add    esp,0x20
c00230ad:	83 fa 06             	cmp    edx,0x6
c00230b0:	75 de                	jne    c0023090 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c00230b2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00230b7:	83 ec 0c             	sub    esp,0xc
c00230ba:	86 e0                	xchg   al,ah
c00230bc:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00230c1:	6a 02                	push   0x2
c00230c3:	57                   	push   edi
c00230c4:	53                   	push   ebx
c00230c5:	56                   	push   esi
c00230c6:	55                   	push   ebp
c00230c7:	e8 7c f7 ff ff       	call   c0022848 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230cc:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00230d1:	83 c4 20             	add    esp,0x20
c00230d4:	57                   	push   edi
c00230d5:	53                   	push   ebx
c00230d6:	56                   	push   esi
c00230d7:	55                   	push   ebp
c00230d8:	e8 a9 f8 ff ff       	call   c0022986 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00230dd:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00230e1:	57                   	push   edi
c00230e2:	53                   	push   ebx
c00230e3:	56                   	push   esi
c00230e4:	55                   	push   ebp
c00230e5:	e8 06 f8 ff ff       	call   c00228f0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00230ea:	b9 09 00 00 00       	mov    ecx,0x9
c00230ef:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c00230f4:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00230f8:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00230fc:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023100:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0023104:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023108:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002310c:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0023110:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0023114:	83 ec 0c             	sub    esp,0xc
c0023117:	fc                   	cld    
c0023118:	89 e7                	mov    edi,esp
c002311a:	8d 74 24 58          	lea    esi,[esp+0x58]
c002311e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023120:	55                   	push   ebp
c0023121:	e8 e2 fc ff ff       	call   c0022e08 <PCI::foundDevice(PCIDeviceInfo)>
c0023126:	81 c4 8c 00 00 00    	add    esp,0x8c
c002312c:	5b                   	pop    ebx
c002312d:	5e                   	pop    esi
c002312e:	5f                   	pop    edi
c002312f:	5d                   	pop    ebp
c0023130:	c3                   	ret    
c0023131:	90                   	nop

c0023132 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023132:	55                   	push   ebp
c0023133:	57                   	push   edi
c0023134:	56                   	push   esi
c0023135:	53                   	push   ebx
c0023136:	83 ec 0c             	sub    esp,0xc
c0023139:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002313d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023142:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023147:	6a 00                	push   0x0
c0023149:	56                   	push   esi
c002314a:	57                   	push   edi
c002314b:	55                   	push   ebp
c002314c:	e8 9f f7 ff ff       	call   c00228f0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023151:	6a 00                	push   0x0
c0023153:	56                   	push   esi
c0023154:	57                   	push   edi
c0023155:	55                   	push   ebp
c0023156:	e8 1f fe ff ff       	call   c0022f7a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002315b:	83 c4 20             	add    esp,0x20
c002315e:	6a 00                	push   0x0
c0023160:	56                   	push   esi
c0023161:	57                   	push   edi
c0023162:	55                   	push   ebp
c0023163:	e8 ac f7 ff ff       	call   c0022914 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023168:	83 c4 10             	add    esp,0x10
c002316b:	84 c0                	test   al,al
c002316d:	79 27                	jns    c0023196 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002316f:	bb 01 00 00 00       	mov    ebx,0x1
c0023174:	53                   	push   ebx
c0023175:	56                   	push   esi
c0023176:	57                   	push   edi
c0023177:	55                   	push   ebp
c0023178:	e8 73 f7 ff ff       	call   c00228f0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002317d:	83 c4 10             	add    esp,0x10
c0023180:	66 40                	inc    ax
c0023182:	74 0c                	je     c0023190 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023184:	53                   	push   ebx
c0023185:	56                   	push   esi
c0023186:	57                   	push   edi
c0023187:	55                   	push   ebp
c0023188:	e8 ed fd ff ff       	call   c0022f7a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002318d:	83 c4 10             	add    esp,0x10
c0023190:	43                   	inc    ebx
c0023191:	83 fb 08             	cmp    ebx,0x8
c0023194:	75 de                	jne    c0023174 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023196:	83 c4 0c             	add    esp,0xc
c0023199:	5b                   	pop    ebx
c002319a:	5e                   	pop    esi
c002319b:	5f                   	pop    edi
c002319c:	5d                   	pop    ebp
c002319d:	c3                   	ret    

c002319e <PCI::detect()>:
c002319e:	56                   	push   esi
c002319f:	53                   	push   ebx
c00231a0:	53                   	push   ebx
c00231a1:	31 db                	xor    ebx,ebx
c00231a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00231a7:	6a 00                	push   0x0
c00231a9:	6a 00                	push   0x0
c00231ab:	6a 00                	push   0x0
c00231ad:	56                   	push   esi
c00231ae:	e8 61 f7 ff ff       	call   c0022914 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00231b3:	83 c4 10             	add    esp,0x10
c00231b6:	a8 80                	test   al,0x80
c00231b8:	75 21                	jne    c00231db <PCI::detect()+0x3d>
c00231ba:	51                   	push   ecx
c00231bb:	51                   	push   ecx
c00231bc:	6a 00                	push   0x0
c00231be:	56                   	push   esi
c00231bf:	e8 20 fc ff ff       	call   c0022de4 <PCI::checkBus(unsigned char)>
c00231c4:	83 c4 10             	add    esp,0x10
c00231c7:	eb 24                	jmp    c00231ed <PCI::detect()+0x4f>
c00231c9:	52                   	push   edx
c00231ca:	52                   	push   edx
c00231cb:	53                   	push   ebx
c00231cc:	43                   	inc    ebx
c00231cd:	56                   	push   esi
c00231ce:	e8 11 fc ff ff       	call   c0022de4 <PCI::checkBus(unsigned char)>
c00231d3:	83 c4 10             	add    esp,0x10
c00231d6:	83 fb 08             	cmp    ebx,0x8
c00231d9:	74 12                	je     c00231ed <PCI::detect()+0x4f>
c00231db:	53                   	push   ebx
c00231dc:	6a 00                	push   0x0
c00231de:	6a 00                	push   0x0
c00231e0:	56                   	push   esi
c00231e1:	e8 0a f7 ff ff       	call   c00228f0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00231e6:	83 c4 10             	add    esp,0x10
c00231e9:	66 40                	inc    ax
c00231eb:	74 dc                	je     c00231c9 <PCI::detect()+0x2b>
c00231ed:	58                   	pop    eax
c00231ee:	5b                   	pop    ebx
c00231ef:	5e                   	pop    esi
c00231f0:	c3                   	ret    
c00231f1:	90                   	nop

c00231f2 <IDE::close(int, int, void*)>:
c00231f2:	83 c8 ff             	or     eax,0xffffffff
c00231f5:	c3                   	ret    

c00231f6 <IDE::IDE()>:
c00231f6:	83 ec 0c             	sub    esp,0xc
c00231f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231fd:	83 ec 08             	sub    esp,0x8
c0023200:	68 34 c6 02 c0       	push   0xc002c634
c0023205:	50                   	push   eax
c0023206:	e8 03 0e ff ff       	call   c001400e <HardDiskController::HardDiskController(char const*)>
c002320b:	83 c4 10             	add    esp,0x10
c002320e:	ba c4 c6 02 c0       	mov    edx,0xc002c6c4
c0023213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023217:	89 10                	mov    DWORD PTR [eax],edx
c0023219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002321d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023224:	90                   	nop
c0023225:	83 c4 0c             	add    esp,0xc
c0023228:	c3                   	ret    
c0023229:	90                   	nop

c002322a <IDE::prepareInterrupt(unsigned char)>:
c002322a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002322f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023233:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002323b:	c3                   	ret    

c002323c <selectDrive(unsigned char, unsigned char)>:
c002323c:	c3                   	ret    
c002323d:	90                   	nop

c002323e <IDE::getBase(unsigned char)>:
c002323e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023243:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023247:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002324f:	c3                   	ret    

c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023250:	55                   	push   ebp
c0023251:	57                   	push   edi
c0023252:	56                   	push   esi
c0023253:	53                   	push   ebx
c0023254:	83 ec 1c             	sub    esp,0x1c
c0023257:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002325b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002325f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023262:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023266:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002326a:	80 f9 03             	cmp    cl,0x3
c002326d:	77 51                	ja     c00232c0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002326f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023273:	0f b6 f2             	movzx  esi,dl
c0023276:	0f b6 db             	movzx  ebx,bl
c0023279:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002327c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023280:	83 ca 80             	or     edx,0xffffff80
c0023283:	0f b6 d2             	movzx  edx,dl
c0023286:	52                   	push   edx
c0023287:	6a 0c                	push   0xc
c0023289:	56                   	push   esi
c002328a:	57                   	push   edi
c002328b:	e8 c0 ff ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023290:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023295:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023299:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002329d:	ee                   	out    dx,al
c002329e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00232a3:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00232a7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00232ab:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00232af:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00232b7:	83 c4 2c             	add    esp,0x2c
c00232ba:	5b                   	pop    ebx
c00232bb:	5e                   	pop    esi
c00232bc:	5f                   	pop    edi
c00232bd:	5d                   	pop    ebp
c00232be:	eb 90                	jmp    c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232c0:	80 fb 07             	cmp    bl,0x7
c00232c3:	77 12                	ja     c00232d7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00232c5:	0f b6 d2             	movzx  edx,dl
c00232c8:	0f b6 db             	movzx  ebx,bl
c00232cb:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00232d3:	89 da                	mov    edx,ebx
c00232d5:	eb 2f                	jmp    c0023306 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00232d7:	80 fb 0d             	cmp    bl,0xd
c00232da:	77 13                	ja     c00232ef <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00232dc:	0f b6 d2             	movzx  edx,dl
c00232df:	0f b6 db             	movzx  ebx,bl
c00232e2:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00232e9:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00232ed:	eb 17                	jmp    c0023306 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00232ef:	80 fb 15             	cmp    bl,0x15
c00232f2:	77 13                	ja     c0023307 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00232f4:	0f b6 d2             	movzx  edx,dl
c00232f7:	0f b6 db             	movzx  ebx,bl
c00232fa:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023302:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023306:	ee                   	out    dx,al
c0023307:	83 c4 1c             	add    esp,0x1c
c002330a:	5b                   	pop    ebx
c002330b:	5e                   	pop    esi
c002330c:	5f                   	pop    edi
c002330d:	5d                   	pop    ebp
c002330e:	c3                   	ret    
c002330f:	90                   	nop

c0023310 <IDE::read(unsigned char, unsigned char)>:
c0023310:	55                   	push   ebp
c0023311:	57                   	push   edi
c0023312:	56                   	push   esi
c0023313:	53                   	push   ebx
c0023314:	83 ec 1c             	sub    esp,0x1c
c0023317:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002331b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002331f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023322:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023326:	3c 03                	cmp    al,0x3
c0023328:	77 43                	ja     c002336d <IDE::read(unsigned char, unsigned char)+0x5d>
c002332a:	0f b6 f2             	movzx  esi,dl
c002332d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023330:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023334:	83 c8 80             	or     eax,0xffffff80
c0023337:	0f b6 c0             	movzx  eax,al
c002333a:	50                   	push   eax
c002333b:	6a 0c                	push   0xc
c002333d:	56                   	push   esi
c002333e:	57                   	push   edi
c002333f:	e8 0c ff ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023344:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023349:	0f b6 c3             	movzx  eax,bl
c002334c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023350:	ec                   	in     al,dx
c0023351:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023355:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002335a:	52                   	push   edx
c002335b:	6a 0c                	push   0xc
c002335d:	56                   	push   esi
c002335e:	57                   	push   edi
c002335f:	e8 ec fe ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023364:	83 c4 20             	add    esp,0x20
c0023367:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002336b:	eb 49                	jmp    c00233b6 <IDE::read(unsigned char, unsigned char)+0xa6>
c002336d:	80 fb 07             	cmp    bl,0x7
c0023370:	77 12                	ja     c0023384 <IDE::read(unsigned char, unsigned char)+0x74>
c0023372:	0f b6 d2             	movzx  edx,dl
c0023375:	0f b6 c3             	movzx  eax,bl
c0023378:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023380:	89 c2                	mov    edx,eax
c0023382:	eb 31                	jmp    c00233b5 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023384:	80 fb 0d             	cmp    bl,0xd
c0023387:	77 13                	ja     c002339c <IDE::read(unsigned char, unsigned char)+0x8c>
c0023389:	0f b6 d2             	movzx  edx,dl
c002338c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023393:	0f b6 d3             	movzx  edx,bl
c0023396:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002339a:	eb 19                	jmp    c00233b5 <IDE::read(unsigned char, unsigned char)+0xa5>
c002339c:	31 c0                	xor    eax,eax
c002339e:	80 fb 15             	cmp    bl,0x15
c00233a1:	77 13                	ja     c00233b6 <IDE::read(unsigned char, unsigned char)+0xa6>
c00233a3:	0f b6 d2             	movzx  edx,dl
c00233a6:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00233ae:	0f b6 d3             	movzx  edx,bl
c00233b1:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00233b5:	ec                   	in     al,dx
c00233b6:	83 c4 1c             	add    esp,0x1c
c00233b9:	5b                   	pop    ebx
c00233ba:	5e                   	pop    esi
c00233bb:	5f                   	pop    edi
c00233bc:	5d                   	pop    ebp
c00233bd:	c3                   	ret    

c00233be <IDE::waitInterrupt(unsigned char)>:
c00233be:	55                   	push   ebp
c00233bf:	57                   	push   edi
c00233c0:	56                   	push   esi
c00233c1:	53                   	push   ebx
c00233c2:	31 db                	xor    ebx,ebx
c00233c4:	83 ec 0c             	sub    esp,0xc
c00233c7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00233cb:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00233d0:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00233d8:	89 e8                	mov    eax,ebp
c00233da:	84 c0                	test   al,al
c00233dc:	75 34                	jne    c0023412 <IDE::waitInterrupt(unsigned char)+0x54>
c00233de:	52                   	push   edx
c00233df:	6a 0c                	push   0xc
c00233e1:	56                   	push   esi
c00233e2:	57                   	push   edi
c00233e3:	e8 28 ff ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c00233e8:	83 c4 10             	add    esp,0x10
c00233eb:	a8 01                	test   al,0x1
c00233ed:	75 2b                	jne    c002341a <IDE::waitInterrupt(unsigned char)+0x5c>
c00233ef:	f6 c3 04             	test   bl,0x4
c00233f2:	75 16                	jne    c002340a <IDE::waitInterrupt(unsigned char)+0x4c>
c00233f4:	83 fb 32             	cmp    ebx,0x32
c00233f7:	7e 11                	jle    c002340a <IDE::waitInterrupt(unsigned char)+0x4c>
c00233f9:	50                   	push   eax
c00233fa:	50                   	push   eax
c00233fb:	6a 00                	push   0x0
c00233fd:	68 80 96 98 00       	push   0x989680
c0023402:	e8 78 aa ff ff       	call   c001de7f <nanoSleep(unsigned long long)>
c0023407:	83 c4 10             	add    esp,0x10
c002340a:	83 fb 3c             	cmp    ebx,0x3c
c002340d:	74 0b                	je     c002341a <IDE::waitInterrupt(unsigned char)+0x5c>
c002340f:	43                   	inc    ebx
c0023410:	eb be                	jmp    c00233d0 <IDE::waitInterrupt(unsigned char)+0x12>
c0023412:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002341a:	83 c4 0c             	add    esp,0xc
c002341d:	89 e8                	mov    eax,ebp
c002341f:	5b                   	pop    ebx
c0023420:	5e                   	pop    esi
c0023421:	5f                   	pop    edi
c0023422:	5d                   	pop    ebp
c0023423:	c3                   	ret    

c0023424 <ideChannel0IRQHandler(regs*, void*)>:
c0023424:	83 ec 10             	sub    esp,0x10
c0023427:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002342b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023432:	6a 07                	push   0x7
c0023434:	6a 00                	push   0x0
c0023436:	50                   	push   eax
c0023437:	e8 d4 fe ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c002343c:	83 c4 1c             	add    esp,0x1c
c002343f:	c3                   	ret    

c0023440 <ideChannel1IRQHandler(regs*, void*)>:
c0023440:	83 ec 10             	sub    esp,0x10
c0023443:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023447:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002344e:	6a 07                	push   0x7
c0023450:	6a 01                	push   0x1
c0023452:	50                   	push   eax
c0023453:	e8 b8 fe ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0023458:	83 c4 1c             	add    esp,0x1c
c002345b:	c3                   	ret    

c002345c <IDE::enableIRQs(unsigned char, bool)>:
c002345c:	57                   	push   edi
c002345d:	56                   	push   esi
c002345e:	be 04 00 00 00       	mov    esi,0x4
c0023463:	53                   	push   ebx
c0023464:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023469:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002346d:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023472:	0f 94 c0             	sete   al
c0023475:	d1 e0                	shl    eax,1
c0023477:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002347e:	0f b6 c0             	movzx  eax,al
c0023481:	50                   	push   eax
c0023482:	6a 0c                	push   0xc
c0023484:	57                   	push   edi
c0023485:	53                   	push   ebx
c0023486:	e8 c5 fd ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002348b:	83 c4 10             	add    esp,0x10
c002348e:	50                   	push   eax
c002348f:	6a 0c                	push   0xc
c0023491:	57                   	push   edi
c0023492:	53                   	push   ebx
c0023493:	e8 78 fe ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0023498:	83 c4 10             	add    esp,0x10
c002349b:	4e                   	dec    esi
c002349c:	75 f0                	jne    c002348e <IDE::enableIRQs(unsigned char, bool)+0x32>
c002349e:	5b                   	pop    ebx
c002349f:	5e                   	pop    esi
c00234a0:	5f                   	pop    edi
c00234a1:	c3                   	ret    

c00234a2 <IDE::open(int, int, void*)>:
c00234a2:	55                   	push   ebp
c00234a3:	57                   	push   edi
c00234a4:	56                   	push   esi
c00234a5:	53                   	push   ebx
c00234a6:	83 ec 1c             	sub    esp,0x1c
c00234a9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00234ad:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00234b6:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00234bf:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00234c6:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00234cd:	0f 85 b0 02 00 00    	jne    c0023783 <IDE::open(int, int, void*)+0x2e1>
c00234d3:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00234d9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00234dd:	83 e0 7f             	and    eax,0x7f
c00234e0:	3c 05                	cmp    al,0x5
c00234e2:	74 04                	je     c00234e8 <IDE::open(int, int, void*)+0x46>
c00234e4:	3c 0f                	cmp    al,0xf
c00234e6:	75 32                	jne    c002351a <IDE::open(int, int, void*)+0x78>
c00234e8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00234ee:	83 e0 fc             	and    eax,0xfffffffc
c00234f1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00234f8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00234fe:	83 e0 fc             	and    eax,0xfffffffc
c0023501:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023508:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002350e:	83 e0 fc             	and    eax,0xfffffffc
c0023511:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023518:	eb 14                	jmp    c002352e <IDE::open(int, int, void*)+0x8c>
c002351a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023524:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002352e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023535:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002353c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023540:	89 c6                	mov    esi,eax
c0023542:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023547:	c1 e6 10             	shl    esi,0x10
c002354a:	89 e8                	mov    eax,ebp
c002354c:	89 fa                	mov    edx,edi
c002354e:	c1 e0 0b             	shl    eax,0xb
c0023551:	09 f0                	or     eax,esi
c0023553:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002355a:	c1 e6 08             	shl    esi,0x8
c002355d:	09 c6                	or     esi,eax
c002355f:	89 f0                	mov    eax,esi
c0023561:	0d 08 00 00 80       	or     eax,0x80000008
c0023566:	ef                   	out    dx,eax
c0023567:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002356c:	89 ca                	mov    edx,ecx
c002356e:	ed                   	in     eax,dx
c002356f:	c1 e8 10             	shr    eax,0x10
c0023572:	3d ff ff 00 00       	cmp    eax,0xffff
c0023577:	0f 84 f5 00 00 00    	je     c0023672 <IDE::open(int, int, void*)+0x1d0>
c002357d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023583:	89 fa                	mov    edx,edi
c0023585:	89 f0                	mov    eax,esi
c0023587:	ef                   	out    dx,eax
c0023588:	b0 fe                	mov    al,0xfe
c002358a:	89 ca                	mov    edx,ecx
c002358c:	ee                   	out    dx,al
c002358d:	89 f0                	mov    eax,esi
c002358f:	89 fa                	mov    edx,edi
c0023591:	ef                   	out    dx,eax
c0023592:	89 ca                	mov    edx,ecx
c0023594:	ed                   	in     eax,dx
c0023595:	3c fe                	cmp    al,0xfe
c0023597:	0f 85 a9 00 00 00    	jne    c0023646 <IDE::open(int, int, void*)+0x1a4>
c002359d:	8b 15 28 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df28
c00235a3:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00235aa:	74 33                	je     c00235df <IDE::open(int, int, void*)+0x13d>
c00235ac:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00235b2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00235b6:	40                   	inc    eax
c00235b7:	83 ec 0c             	sub    esp,0xc
c00235ba:	0f b6 c0             	movzx  eax,al
c00235bd:	50                   	push   eax
c00235be:	55                   	push   ebp
c00235bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00235c3:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00235c9:	51                   	push   ecx
c00235ca:	e8 fd 46 ff ff       	call   c0017ccc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00235cf:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00235d4:	83 c4 1c             	add    esp,0x1c
c00235d7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00235dd:	eb 0a                	jmp    c00235e9 <IDE::open(int, int, void*)+0x147>
c00235df:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00235e9:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00235f0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00235f7:	c1 e1 10             	shl    ecx,0x10
c00235fa:	c1 e0 08             	shl    eax,0x8
c00235fd:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023602:	09 c1                	or     ecx,eax
c0023604:	89 fa                	mov    edx,edi
c0023606:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002360d:	c1 e0 0b             	shl    eax,0xb
c0023610:	09 c1                	or     ecx,eax
c0023612:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023618:	89 c8                	mov    eax,ecx
c002361a:	ef                   	out    dx,eax
c002361b:	be fc 0c 00 00       	mov    esi,0xcfc
c0023620:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023626:	89 f2                	mov    edx,esi
c0023628:	ee                   	out    dx,al
c0023629:	89 c8                	mov    eax,ecx
c002362b:	89 fa                	mov    edx,edi
c002362d:	ef                   	out    dx,eax
c002362e:	89 f2                	mov    edx,esi
c0023630:	ed                   	in     eax,dx
c0023631:	0f b6 c0             	movzx  eax,al
c0023634:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002363a:	74 46                	je     c0023682 <IDE::open(int, int, void*)+0x1e0>
c002363c:	83 ec 0c             	sub    esp,0xc
c002363f:	68 4c c6 02 c0       	push   0xc002c64c
c0023644:	eb 34                	jmp    c002367a <IDE::open(int, int, void*)+0x1d8>
c0023646:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002364f:	75 17                	jne    c0023668 <IDE::open(int, int, void*)+0x1c6>
c0023651:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023656:	74 07                	je     c002365f <IDE::open(int, int, void*)+0x1bd>
c0023658:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002365d:	75 09                	jne    c0023668 <IDE::open(int, int, void*)+0x1c6>
c002365f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023666:	eb 1a                	jmp    c0023682 <IDE::open(int, int, void*)+0x1e0>
c0023668:	83 ec 0c             	sub    esp,0xc
c002366b:	68 54 c6 02 c0       	push   0xc002c654
c0023670:	eb 08                	jmp    c002367a <IDE::open(int, int, void*)+0x1d8>
c0023672:	83 ec 0c             	sub    esp,0xc
c0023675:	68 85 c6 02 c0       	push   0xc002c685
c002367a:	e8 94 69 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c002367f:	83 c4 10             	add    esp,0x10
c0023682:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023689:	79 1a                	jns    c00236a5 <IDE::open(int, int, void*)+0x203>
c002368b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023691:	83 e0 fc             	and    eax,0xfffffffc
c0023694:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002369b:	83 c0 08             	add    eax,0x8
c002369e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00236a5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00236ab:	89 c2                	mov    edx,eax
c00236ad:	83 e2 0f             	and    edx,0xf
c00236b0:	66 83 fa 08          	cmp    dx,0x8
c00236b4:	75 0a                	jne    c00236c0 <IDE::open(int, int, void*)+0x21e>
c00236b6:	83 e8 02             	sub    eax,0x2
c00236b9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00236c0:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00236c6:	89 c2                	mov    edx,eax
c00236c8:	83 e2 0f             	and    edx,0xf
c00236cb:	66 83 fa 08          	cmp    dx,0x8
c00236cf:	75 0a                	jne    c00236db <IDE::open(int, int, void*)+0x239>
c00236d1:	83 e8 02             	sub    eax,0x2
c00236d4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00236db:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00236e2:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00236e9:	89 d0                	mov    eax,edx
c00236eb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00236ee:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00236f2:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00236f6:	8d 4a 01             	lea    ecx,[edx+0x1]
c00236f9:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00236fe:	0f b6 c9             	movzx  ecx,cl
c0023701:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023708:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002370b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002370f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023713:	8d 50 02             	lea    edx,[eax+0x2]
c0023716:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002371b:	0f b6 d2             	movzx  edx,dl
c002371e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023724:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023727:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002372b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002372f:	8d 48 03             	lea    ecx,[eax+0x3]
c0023732:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023737:	0f b6 c9             	movzx  ecx,cl
c002373a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023740:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023743:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023747:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002374b:	8d 50 04             	lea    edx,[eax+0x4]
c002374e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023754:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023759:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023760:	66 85 f6             	test   si,si
c0023763:	74 5b                	je     c00237c0 <IDE::open(int, int, void*)+0x31e>
c0023765:	0f b6 d2             	movzx  edx,dl
c0023768:	83 c0 05             	add    eax,0x5
c002376b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002376e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023772:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023776:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002377c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023781:	eb 3d                	jmp    c00237c0 <IDE::open(int, int, void*)+0x31e>
c0023783:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023789:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023790:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023797:	66 05 06 02          	add    ax,0x206
c002379b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00237a2:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00237a9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00237b0:	66 05 06 02          	add    ax,0x206
c00237b4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00237bb:	e9 e5 fe ff ff       	jmp    c00236a5 <IDE::open(int, int, void*)+0x203>
c00237c0:	50                   	push   eax
c00237c1:	50                   	push   eax
c00237c2:	6a 00                	push   0x0
c00237c4:	53                   	push   ebx
c00237c5:	e8 60 fa ff ff       	call   c002322a <IDE::prepareInterrupt(unsigned char)>
c00237ca:	5a                   	pop    edx
c00237cb:	59                   	pop    ecx
c00237cc:	6a 01                	push   0x1
c00237ce:	53                   	push   ebx
c00237cf:	e8 56 fa ff ff       	call   c002322a <IDE::prepareInterrupt(unsigned char)>
c00237d4:	83 c4 0c             	add    esp,0xc
c00237d7:	6a 00                	push   0x0
c00237d9:	6a 00                	push   0x0
c00237db:	53                   	push   ebx
c00237dc:	e8 7b fc ff ff       	call   c002345c <IDE::enableIRQs(unsigned char, bool)>
c00237e1:	83 c4 0c             	add    esp,0xc
c00237e4:	6a 00                	push   0x0
c00237e6:	6a 01                	push   0x1
c00237e8:	53                   	push   ebx
c00237e9:	e8 6e fc ff ff       	call   c002345c <IDE::enableIRQs(unsigned char, bool)>
c00237ee:	83 c4 10             	add    esp,0x10
c00237f1:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00237f8:	74 34                	je     c002382e <IDE::open(int, int, void*)+0x38c>
c00237fa:	83 ec 0c             	sub    esp,0xc
c00237fd:	53                   	push   ebx
c00237fe:	6a 01                	push   0x1
c0023800:	68 24 34 02 c0       	push   0xc0023424
c0023805:	6a 0e                	push   0xe
c0023807:	53                   	push   ebx
c0023808:	e8 cb 03 ff ff       	call   c0013bd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002380d:	83 c4 14             	add    esp,0x14
c0023810:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023816:	53                   	push   ebx
c0023817:	6a 01                	push   0x1
c0023819:	68 40 34 02 c0       	push   0xc0023440
c002381e:	6a 0f                	push   0xf
c0023820:	53                   	push   ebx
c0023821:	e8 b2 03 ff ff       	call   c0013bd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023826:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002382c:	eb 38                	jmp    c0023866 <IDE::open(int, int, void*)+0x3c4>
c002382e:	83 ec 0c             	sub    esp,0xc
c0023831:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002383b:	53                   	push   ebx
c002383c:	6a 00                	push   0x0
c002383e:	68 24 34 02 c0       	push   0xc0023424
c0023843:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023849:	53                   	push   ebx
c002384a:	e8 89 03 ff ff       	call   c0013bd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002384f:	83 c4 14             	add    esp,0x14
c0023852:	53                   	push   ebx
c0023853:	6a 00                	push   0x0
c0023855:	68 40 34 02 c0       	push   0xc0023440
c002385a:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023860:	53                   	push   ebx
c0023861:	e8 72 03 ff ff       	call   c0013bd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023866:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023868:	83 c4 20             	add    esp,0x20
c002386b:	83 ec 0c             	sub    esp,0xc
c002386e:	53                   	push   ebx
c002386f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023872:	83 c4 0c             	add    esp,0xc
c0023875:	6a 07                	push   0x7
c0023877:	6a 00                	push   0x0
c0023879:	53                   	push   ebx
c002387a:	e8 91 fa ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c002387f:	83 c4 0c             	add    esp,0xc
c0023882:	6a 07                	push   0x7
c0023884:	6a 01                	push   0x1
c0023886:	53                   	push   ebx
c0023887:	e8 84 fa ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c002388c:	83 c4 0c             	add    esp,0xc
c002388f:	6a 01                	push   0x1
c0023891:	6a 00                	push   0x0
c0023893:	53                   	push   ebx
c0023894:	e8 c3 fb ff ff       	call   c002345c <IDE::enableIRQs(unsigned char, bool)>
c0023899:	83 c4 0c             	add    esp,0xc
c002389c:	6a 01                	push   0x1
c002389e:	6a 01                	push   0x1
c00238a0:	53                   	push   ebx
c00238a1:	e8 b6 fb ff ff       	call   c002345c <IDE::enableIRQs(unsigned char, bool)>
c00238a6:	83 c4 2c             	add    esp,0x2c
c00238a9:	31 c0                	xor    eax,eax
c00238ab:	5b                   	pop    ebx
c00238ac:	5e                   	pop    esi
c00238ad:	5f                   	pop    edi
c00238ae:	5d                   	pop    ebp
c00238af:	c3                   	ret    

c00238b0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00238b0:	55                   	push   ebp
c00238b1:	57                   	push   edi
c00238b2:	56                   	push   esi
c00238b3:	53                   	push   ebx
c00238b4:	83 ec 1c             	sub    esp,0x1c
c00238b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00238bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00238bf:	8d 50 f8             	lea    edx,[eax-0x8]
c00238c2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00238c6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00238ca:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00238ce:	80 fa 03             	cmp    dl,0x3
c00238d1:	77 5d                	ja     c0023930 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00238d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00238d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00238db:	0f b6 db             	movzx  ebx,bl
c00238de:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00238e1:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00238e5:	83 ca 80             	or     edx,0xffffff80
c00238e8:	0f b6 d2             	movzx  edx,dl
c00238eb:	52                   	push   edx
c00238ec:	6a 0c                	push   0xc
c00238ee:	53                   	push   ebx
c00238ef:	56                   	push   esi
c00238f0:	e8 5b f9 ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238f5:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00238fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00238fe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023902:	0f b6 c0             	movzx  eax,al
c0023905:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023909:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002390b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023910:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023914:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023918:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002391c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023924:	83 c4 2c             	add    esp,0x2c
c0023927:	5b                   	pop    ebx
c0023928:	5e                   	pop    esi
c0023929:	5f                   	pop    edi
c002392a:	5d                   	pop    ebp
c002392b:	e9 20 f9 ff ff       	jmp    c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023930:	3c 07                	cmp    al,0x7
c0023932:	77 10                	ja     c0023944 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023934:	0f b6 db             	movzx  ebx,bl
c0023937:	0f b6 d0             	movzx  edx,al
c002393a:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023942:	eb 2d                	jmp    c0023971 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023944:	3c 0d                	cmp    al,0xd
c0023946:	77 13                	ja     c002395b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023948:	0f b6 db             	movzx  ebx,bl
c002394b:	0f b6 c0             	movzx  eax,al
c002394e:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023955:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023959:	eb 16                	jmp    c0023971 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002395b:	3c 15                	cmp    al,0x15
c002395d:	77 14                	ja     c0023973 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002395f:	0f b6 db             	movzx  ebx,bl
c0023962:	0f b6 c0             	movzx  eax,al
c0023965:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002396d:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023971:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023973:	83 c4 1c             	add    esp,0x1c
c0023976:	5b                   	pop    ebx
c0023977:	5e                   	pop    esi
c0023978:	5f                   	pop    edi
c0023979:	5d                   	pop    ebp
c002397a:	c3                   	ret    
c002397b:	90                   	nop

c002397c <IDE::detect()>:
c002397c:	55                   	push   ebp
c002397d:	57                   	push   edi
c002397e:	56                   	push   esi
c002397f:	53                   	push   ebx
c0023980:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023986:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002398d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023994:	0f 85 9d 02 00 00    	jne    c0023c37 <IDE::detect()+0x2bb>
c002399a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00239a1:	31 f6                	xor    esi,esi
c00239a3:	31 ed                	xor    ebp,ebp
c00239a5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00239ad:	89 e8                	mov    eax,ebp
c00239af:	c1 e0 06             	shl    eax,0x6
c00239b2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00239ba:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00239be:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00239c2:	c1 e0 04             	shl    eax,0x4
c00239c5:	83 c8 a0             	or     eax,0xffffffa0
c00239c8:	0f b6 c0             	movzx  eax,al
c00239cb:	50                   	push   eax
c00239cc:	6a 06                	push   0x6
c00239ce:	56                   	push   esi
c00239cf:	53                   	push   ebx
c00239d0:	e8 7b f8 ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239d5:	83 c4 0c             	add    esp,0xc
c00239d8:	6a 0c                	push   0xc
c00239da:	56                   	push   esi
c00239db:	53                   	push   ebx
c00239dc:	e8 2f f9 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c00239e1:	83 c4 0c             	add    esp,0xc
c00239e4:	6a 0c                	push   0xc
c00239e6:	56                   	push   esi
c00239e7:	53                   	push   ebx
c00239e8:	e8 23 f9 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c00239ed:	83 c4 0c             	add    esp,0xc
c00239f0:	6a 0c                	push   0xc
c00239f2:	56                   	push   esi
c00239f3:	53                   	push   ebx
c00239f4:	e8 17 f9 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c00239f9:	83 c4 0c             	add    esp,0xc
c00239fc:	6a 0c                	push   0xc
c00239fe:	56                   	push   esi
c00239ff:	53                   	push   ebx
c0023a00:	e8 0b f9 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0023a05:	68 ec 00 00 00       	push   0xec
c0023a0a:	6a 07                	push   0x7
c0023a0c:	56                   	push   esi
c0023a0d:	53                   	push   ebx
c0023a0e:	e8 3d f8 ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a13:	83 c4 1c             	add    esp,0x1c
c0023a16:	6a 0c                	push   0xc
c0023a18:	56                   	push   esi
c0023a19:	53                   	push   ebx
c0023a1a:	e8 f1 f8 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0023a1f:	83 c4 0c             	add    esp,0xc
c0023a22:	6a 0c                	push   0xc
c0023a24:	56                   	push   esi
c0023a25:	53                   	push   ebx
c0023a26:	e8 e5 f8 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0023a2b:	83 c4 0c             	add    esp,0xc
c0023a2e:	6a 0c                	push   0xc
c0023a30:	56                   	push   esi
c0023a31:	53                   	push   ebx
c0023a32:	e8 d9 f8 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0023a37:	83 c4 0c             	add    esp,0xc
c0023a3a:	6a 0c                	push   0xc
c0023a3c:	56                   	push   esi
c0023a3d:	53                   	push   ebx
c0023a3e:	e8 cd f8 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0023a43:	83 c4 0c             	add    esp,0xc
c0023a46:	6a 0c                	push   0xc
c0023a48:	56                   	push   esi
c0023a49:	53                   	push   ebx
c0023a4a:	e8 c1 f8 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0023a4f:	83 c4 10             	add    esp,0x10
c0023a52:	84 c0                	test   al,al
c0023a54:	0f 84 63 01 00 00    	je     c0023bbd <IDE::detect()+0x241>
c0023a5a:	31 ff                	xor    edi,edi
c0023a5c:	50                   	push   eax
c0023a5d:	6a 0c                	push   0xc
c0023a5f:	56                   	push   esi
c0023a60:	53                   	push   ebx
c0023a61:	e8 aa f8 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0023a66:	83 c4 10             	add    esp,0x10
c0023a69:	a8 01                	test   al,0x1
c0023a6b:	0f 85 6d 01 00 00    	jne    c0023bde <IDE::detect()+0x262>
c0023a71:	84 c0                	test   al,al
c0023a73:	78 04                	js     c0023a79 <IDE::detect()+0xfd>
c0023a75:	a8 08                	test   al,0x8
c0023a77:	75 27                	jne    c0023aa0 <IDE::detect()+0x124>
c0023a79:	47                   	inc    edi
c0023a7a:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023a80:	7e da                	jle    c0023a5c <IDE::detect()+0xe0>
c0023a82:	50                   	push   eax
c0023a83:	50                   	push   eax
c0023a84:	6a 00                	push   0x0
c0023a86:	68 40 4b 4c 00       	push   0x4c4b40
c0023a8b:	e8 ef a3 ff ff       	call   c001de7f <nanoSleep(unsigned long long)>
c0023a90:	83 c4 10             	add    esp,0x10
c0023a93:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023a99:	75 c1                	jne    c0023a5c <IDE::detect()+0xe0>
c0023a9b:	e9 3e 01 00 00       	jmp    c0023bde <IDE::detect()+0x262>
c0023aa0:	31 c9                	xor    ecx,ecx
c0023aa2:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023aa6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023aaa:	83 ec 0c             	sub    esp,0xc
c0023aad:	68 80 00 00 00       	push   0x80
c0023ab2:	57                   	push   edi
c0023ab3:	6a 00                	push   0x0
c0023ab5:	56                   	push   esi
c0023ab6:	53                   	push   ebx
c0023ab7:	e8 f4 fd ff ff       	call   c00238b0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023abc:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023ac1:	89 e8                	mov    eax,ebp
c0023ac3:	89 d1                	mov    ecx,edx
c0023ac5:	c1 e0 06             	shl    eax,0x6
c0023ac8:	01 d8                	add    eax,ebx
c0023aca:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023ad1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023ad8:	89 f2                	mov    edx,esi
c0023ada:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023ae0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023ae4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023aea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023aee:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023af5:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023afd:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023b04:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023b0c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023b12:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023b19:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023b1f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023b23:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023b27:	83 c4 20             	add    esp,0x20
c0023b2a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023b2d:	83 c0 02             	add    eax,0x2
c0023b30:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023b36:	83 c7 02             	add    edi,0x2
c0023b39:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023b3c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023b42:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023b46:	75 e2                	jne    c0023b2a <IDE::detect()+0x1ae>
c0023b48:	89 e8                	mov    eax,ebp
c0023b4a:	c1 e0 06             	shl    eax,0x6
c0023b4d:	01 d8                	add    eax,ebx
c0023b4f:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023b55:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023b5c:	66 c1 ea 09          	shr    dx,0x9
c0023b60:	83 e2 01             	and    edx,0x1
c0023b63:	84 c9                	test   cl,cl
c0023b65:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023b6b:	75 22                	jne    c0023b8f <IDE::detect()+0x213>
c0023b6d:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023b74:	74 46                	je     c0023bbc <IDE::detect()+0x240>
c0023b76:	83 ec 0c             	sub    esp,0xc
c0023b79:	68 7c 01 00 00       	push   0x17c
c0023b7e:	e8 4c bc fe ff       	call   c000f7cf <malloc>
c0023b83:	89 c7                	mov    edi,eax
c0023b85:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b88:	e8 15 05 00 00       	call   c00240a2 <ATA::ATA()>
c0023b8d:	eb 17                	jmp    c0023ba6 <IDE::detect()+0x22a>
c0023b8f:	83 ec 0c             	sub    esp,0xc
c0023b92:	68 80 01 00 00       	push   0x180
c0023b97:	e8 33 bc fe ff       	call   c000f7cf <malloc>
c0023b9c:	89 c7                	mov    edi,eax
c0023b9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ba1:	e8 88 0b 00 00       	call   c002472e <ATAPI::ATAPI()>
c0023ba6:	5a                   	pop    edx
c0023ba7:	59                   	pop    ecx
c0023ba8:	57                   	push   edi
c0023ba9:	53                   	push   ebx
c0023baa:	e8 b1 00 ff ff       	call   c0013c60 <Device::addChild(Device*)>
c0023baf:	8b 07                	mov    eax,DWORD PTR [edi]
c0023bb1:	53                   	push   ebx
c0023bb2:	55                   	push   ebp
c0023bb3:	6a 00                	push   0x0
c0023bb5:	57                   	push   edi
c0023bb6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023bb9:	83 c4 20             	add    esp,0x20
c0023bbc:	45                   	inc    ebp
c0023bbd:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023bc2:	74 0d                	je     c0023bd1 <IDE::detect()+0x255>
c0023bc4:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023bcc:	e9 dc fd ff ff       	jmp    c00239ad <IDE::detect()+0x31>
c0023bd1:	4e                   	dec    esi
c0023bd2:	74 63                	je     c0023c37 <IDE::detect()+0x2bb>
c0023bd4:	be 01 00 00 00       	mov    esi,0x1
c0023bd9:	e9 c7 fd ff ff       	jmp    c00239a5 <IDE::detect()+0x29>
c0023bde:	50                   	push   eax
c0023bdf:	6a 04                	push   0x4
c0023be1:	56                   	push   esi
c0023be2:	53                   	push   ebx
c0023be3:	e8 28 f7 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0023be8:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023bec:	83 c4 0c             	add    esp,0xc
c0023bef:	6a 05                	push   0x5
c0023bf1:	56                   	push   esi
c0023bf2:	53                   	push   ebx
c0023bf3:	e8 18 f7 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0023bf8:	83 c4 10             	add    esp,0x10
c0023bfb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023bff:	80 fa 14             	cmp    dl,0x14
c0023c02:	75 04                	jne    c0023c08 <IDE::detect()+0x28c>
c0023c04:	3c eb                	cmp    al,0xeb
c0023c06:	eb 07                	jmp    c0023c0f <IDE::detect()+0x293>
c0023c08:	3c 96                	cmp    al,0x96
c0023c0a:	75 b1                	jne    c0023bbd <IDE::detect()+0x241>
c0023c0c:	80 fa 69             	cmp    dl,0x69
c0023c0f:	75 ac                	jne    c0023bbd <IDE::detect()+0x241>
c0023c11:	68 a1 00 00 00       	push   0xa1
c0023c16:	6a 07                	push   0x7
c0023c18:	56                   	push   esi
c0023c19:	53                   	push   ebx
c0023c1a:	e8 31 f6 ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c1f:	5f                   	pop    edi
c0023c20:	58                   	pop    eax
c0023c21:	6a 00                	push   0x0
c0023c23:	68 40 42 0f 00       	push   0xf4240
c0023c28:	e8 52 a2 ff ff       	call   c001de7f <nanoSleep(unsigned long long)>
c0023c2d:	83 c4 10             	add    esp,0x10
c0023c30:	b1 01                	mov    cl,0x1
c0023c32:	e9 6b fe ff ff       	jmp    c0023aa2 <IDE::detect()+0x126>
c0023c37:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023c3d:	5b                   	pop    ebx
c0023c3e:	5e                   	pop    esi
c0023c3f:	5f                   	pop    edi
c0023c40:	5d                   	pop    ebp
c0023c41:	c3                   	ret    

c0023c42 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023c42:	55                   	push   ebp
c0023c43:	57                   	push   edi
c0023c44:	56                   	push   esi
c0023c45:	53                   	push   ebx
c0023c46:	83 ec 1c             	sub    esp,0x1c
c0023c49:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023c4d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023c51:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023c55:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023c59:	88 c3                	mov    bl,al
c0023c5b:	84 c0                	test   al,al
c0023c5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023c61:	0f 84 81 00 00 00    	je     c0023ce8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023c67:	83 ec 0c             	sub    esp,0xc
c0023c6a:	68 af c6 02 c0       	push   0xc002c6af
c0023c6f:	e8 b3 eb fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0023c74:	83 c4 10             	add    esp,0x10
c0023c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c7b:	3c 01                	cmp    al,0x1
c0023c7d:	74 63                	je     c0023ce2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023c7f:	3c 02                	cmp    al,0x2
c0023c81:	75 53                	jne    c0023cd6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023c83:	d1 e6                	shl    esi,1
c0023c85:	09 ee                	or     esi,ebp
c0023c87:	50                   	push   eax
c0023c88:	89 f0                	mov    eax,esi
c0023c8a:	6a 01                	push   0x1
c0023c8c:	0f b6 f0             	movzx  esi,al
c0023c8f:	c1 e6 06             	shl    esi,0x6
c0023c92:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023c9a:	50                   	push   eax
c0023c9b:	57                   	push   edi
c0023c9c:	e8 6f f6 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0023ca1:	83 c4 10             	add    esp,0x10
c0023ca4:	a8 01                	test   al,0x1
c0023ca6:	74 02                	je     c0023caa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023ca8:	b3 07                	mov    bl,0x7
c0023caa:	a8 02                	test   al,0x2
c0023cac:	74 02                	je     c0023cb0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023cae:	b3 03                	mov    bl,0x3
c0023cb0:	a8 04                	test   al,0x4
c0023cb2:	74 02                	je     c0023cb6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023cb4:	b3 14                	mov    bl,0x14
c0023cb6:	a8 08                	test   al,0x8
c0023cb8:	74 02                	je     c0023cbc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023cba:	b3 03                	mov    bl,0x3
c0023cbc:	a8 10                	test   al,0x10
c0023cbe:	74 02                	je     c0023cc2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023cc0:	b3 15                	mov    bl,0x15
c0023cc2:	a8 20                	test   al,0x20
c0023cc4:	74 02                	je     c0023cc8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023cc6:	b3 03                	mov    bl,0x3
c0023cc8:	a8 40                	test   al,0x40
c0023cca:	74 02                	je     c0023cce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023ccc:	b3 16                	mov    bl,0x16
c0023cce:	84 c0                	test   al,al
c0023cd0:	79 16                	jns    c0023ce8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023cd2:	b3 0d                	mov    bl,0xd
c0023cd4:	eb 12                	jmp    c0023ce8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023cd6:	3c 03                	cmp    al,0x3
c0023cd8:	74 0c                	je     c0023ce6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023cda:	3c 04                	cmp    al,0x4
c0023cdc:	75 0a                	jne    c0023ce8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023cde:	b3 08                	mov    bl,0x8
c0023ce0:	eb 06                	jmp    c0023ce8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023ce2:	b3 13                	mov    bl,0x13
c0023ce4:	eb 02                	jmp    c0023ce8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023ce6:	b3 17                	mov    bl,0x17
c0023ce8:	83 c4 1c             	add    esp,0x1c
c0023ceb:	88 d8                	mov    al,bl
c0023ced:	5b                   	pop    ebx
c0023cee:	5e                   	pop    esi
c0023cef:	5f                   	pop    edi
c0023cf0:	5d                   	pop    ebp
c0023cf1:	c3                   	ret    

c0023cf2 <IDE::polling(unsigned char, unsigned int)>:
c0023cf2:	57                   	push   edi
c0023cf3:	56                   	push   esi
c0023cf4:	53                   	push   ebx
c0023cf5:	bb 04 00 00 00       	mov    ebx,0x4
c0023cfa:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023cfe:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023d03:	52                   	push   edx
c0023d04:	6a 0c                	push   0xc
c0023d06:	56                   	push   esi
c0023d07:	57                   	push   edi
c0023d08:	e8 03 f6 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0023d0d:	83 c4 10             	add    esp,0x10
c0023d10:	4b                   	dec    ebx
c0023d11:	75 f0                	jne    c0023d03 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023d13:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023d18:	50                   	push   eax
c0023d19:	6a 0c                	push   0xc
c0023d1b:	56                   	push   esi
c0023d1c:	57                   	push   edi
c0023d1d:	e8 ee f5 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0023d22:	83 c4 10             	add    esp,0x10
c0023d25:	a8 01                	test   al,0x1
c0023d27:	75 17                	jne    c0023d40 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023d29:	a8 20                	test   al,0x20
c0023d2b:	75 0f                	jne    c0023d3c <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023d2d:	4b                   	dec    ebx
c0023d2e:	74 10                	je     c0023d40 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023d30:	84 c0                	test   al,al
c0023d32:	78 e4                	js     c0023d18 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023d34:	a8 08                	test   al,0x8
c0023d36:	74 e0                	je     c0023d18 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023d38:	31 c0                	xor    eax,eax
c0023d3a:	eb 06                	jmp    c0023d42 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023d3c:	b0 01                	mov    al,0x1
c0023d3e:	eb 02                	jmp    c0023d42 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023d40:	b0 02                	mov    al,0x2
c0023d42:	5b                   	pop    ebx
c0023d43:	5e                   	pop    esi
c0023d44:	5f                   	pop    edi
c0023d45:	c3                   	ret    

c0023d46 <SATABus::close(int, int, void*)>:
c0023d46:	31 c0                	xor    eax,eax
c0023d48:	c3                   	ret    
c0023d49:	90                   	nop

c0023d4a <SATABus::detect()>:
c0023d4a:	c3                   	ret    
c0023d4b:	90                   	nop

c0023d4c <SATABus::SATABus()>:
c0023d4c:	83 ec 0c             	sub    esp,0xc
c0023d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d53:	83 ec 08             	sub    esp,0x8
c0023d56:	68 e8 c6 02 c0       	push   0xc002c6e8
c0023d5b:	50                   	push   eax
c0023d5c:	e8 ad 02 ff ff       	call   c001400e <HardDiskController::HardDiskController(char const*)>
c0023d61:	83 c4 10             	add    esp,0x10
c0023d64:	ba 3c c7 02 c0       	mov    edx,0xc002c73c
c0023d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d6d:	89 10                	mov    DWORD PTR [eax],edx
c0023d6f:	83 ec 0c             	sub    esp,0xc
c0023d72:	6a 50                	push   0x50
c0023d74:	e8 4a bf fe ff       	call   c000fcc3 <Phys::allocateContiguousPages(int)>
c0023d79:	83 c4 10             	add    esp,0x10
c0023d7c:	89 c2                	mov    edx,eax
c0023d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d82:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023d88:	83 ec 0c             	sub    esp,0xc
c0023d8b:	6a 50                	push   0x50
c0023d8d:	e8 c3 d6 fe ff       	call   c0011455 <Virt::allocateKernelVirtualPages(int)>
c0023d92:	83 c4 10             	add    esp,0x10
c0023d95:	89 c2                	mov    edx,eax
c0023d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d9b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023da1:	a1 90 e0 02 c0       	mov    eax,ds:0xc002e090
c0023da6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023daa:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023db0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023db4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023dba:	83 ec 0c             	sub    esp,0xc
c0023dbd:	6a 03                	push   0x3
c0023dbf:	6a 50                	push   0x50
c0023dc1:	51                   	push   ecx
c0023dc2:	52                   	push   edx
c0023dc3:	50                   	push   eax
c0023dc4:	e8 29 e0 fe ff       	call   c0011df2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023dc9:	83 c4 20             	add    esp,0x20
c0023dcc:	90                   	nop
c0023dcd:	83 c4 0c             	add    esp,0xc
c0023dd0:	c3                   	ret    
c0023dd1:	90                   	nop

c0023dd2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023dd2:	83 ec 0c             	sub    esp,0xc
c0023dd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023dd9:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023ddc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023ddf:	09 c2                	or     edx,eax
c0023de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023de5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023deb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023ded:	31 c0                	xor    eax,eax
c0023def:	c1 e9 08             	shr    ecx,0x8
c0023df2:	83 e1 0f             	and    ecx,0xf
c0023df5:	39 c8                	cmp    eax,ecx
c0023df7:	74 0a                	je     c0023e03 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023df9:	f6 c2 01             	test   dl,0x1
c0023dfc:	74 18                	je     c0023e16 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023dfe:	d1 ea                	shr    edx,1
c0023e00:	40                   	inc    eax
c0023e01:	eb f2                	jmp    c0023df5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023e03:	83 ec 0c             	sub    esp,0xc
c0023e06:	68 0c c7 02 c0       	push   0xc002c70c
c0023e0b:	e8 03 62 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0023e10:	83 c4 10             	add    esp,0x10
c0023e13:	83 c8 ff             	or     eax,0xffffffff
c0023e16:	83 c4 0c             	add    esp,0xc
c0023e19:	c3                   	ret    

c0023e1a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023e1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023e1e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023e21:	89 c2                	mov    edx,eax
c0023e23:	c1 ea 08             	shr    edx,0x8
c0023e26:	83 e2 0f             	and    edx,0xf
c0023e29:	fe ca                	dec    dl
c0023e2b:	75 31                	jne    c0023e5e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023e2d:	83 e0 0f             	and    eax,0xf
c0023e30:	3c 03                	cmp    al,0x3
c0023e32:	75 2a                	jne    c0023e5e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023e34:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023e37:	b8 02 00 00 00       	mov    eax,0x2
c0023e3c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023e42:	74 1c                	je     c0023e60 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023e44:	b8 04 00 00 00       	mov    eax,0x4
c0023e49:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023e4f:	74 0f                	je     c0023e60 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023e51:	31 c0                	xor    eax,eax
c0023e53:	83 fa 03             	cmp    edx,0x3
c0023e56:	0f 94 c0             	sete   al
c0023e59:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023e5d:	c3                   	ret    
c0023e5e:	31 c0                	xor    eax,eax
c0023e60:	c3                   	ret    
c0023e61:	90                   	nop

c0023e62 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e66:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e69:	0f ba e2 0f          	bt     edx,0xf
c0023e6d:	72 f7                	jb     c0023e66 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023e6f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e72:	83 ca 10             	or     edx,0x10
c0023e75:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e78:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e7b:	83 ca 01             	or     edx,0x1
c0023e7e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e81:	c3                   	ret    

c0023e82 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e86:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e89:	83 e2 fe             	and    edx,0xfffffffe
c0023e8c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e8f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e92:	83 e2 ef             	and    edx,0xffffffef
c0023e95:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e98:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e9b:	0f ba e2 0e          	bt     edx,0xe
c0023e9f:	72 f7                	jb     c0023e98 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023ea1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ea4:	0f ba e2 0f          	bt     edx,0xf
c0023ea8:	72 ee                	jb     c0023e98 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023eaa:	c3                   	ret    
c0023eab:	90                   	nop

c0023eac <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023eac:	55                   	push   ebp
c0023ead:	57                   	push   edi
c0023eae:	56                   	push   esi
c0023eaf:	53                   	push   ebx
c0023eb0:	83 ec 1c             	sub    esp,0x1c
c0023eb3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023eb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023ebb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023ebf:	53                   	push   ebx
c0023ec0:	89 fd                	mov    ebp,edi
c0023ec2:	56                   	push   esi
c0023ec3:	c1 e5 0a             	shl    ebp,0xa
c0023ec6:	e8 b7 ff ff ff       	call   c0023e82 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023ecb:	83 ec 0c             	sub    esp,0xc
c0023ece:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023ed4:	01 e8                	add    eax,ebp
c0023ed6:	89 03                	mov    DWORD PTR [ebx],eax
c0023ed8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023eda:	68 00 04 00 00       	push   0x400
c0023edf:	6a 00                	push   0x0
c0023ee1:	50                   	push   eax
c0023ee2:	e8 69 c8 fd ff       	call   c0000750 <memset>
c0023ee7:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023eed:	89 fa                	mov    edx,edi
c0023eef:	01 e8                	add    eax,ebp
c0023ef1:	c1 e7 0d             	shl    edi,0xd
c0023ef4:	89 03                	mov    DWORD PTR [ebx],eax
c0023ef6:	c1 e2 08             	shl    edx,0x8
c0023ef9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023f00:	81 c2 00 80 00 00    	add    edx,0x8000
c0023f06:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023f0a:	89 d0                	mov    eax,edx
c0023f0c:	83 c4 1c             	add    esp,0x1c
c0023f0f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023f15:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023f18:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023f1b:	68 00 01 00 00       	push   0x100
c0023f20:	6a 00                	push   0x0
c0023f22:	50                   	push   eax
c0023f23:	e8 28 c8 fd ff       	call   c0000750 <memset>
c0023f28:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023f2c:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023f32:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023f38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023f3c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023f3f:	83 c4 10             	add    esp,0x10
c0023f42:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023f49:	31 ff                	xor    edi,edi
c0023f4b:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023f51:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023f57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f5b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023f61:	83 c5 20             	add    ebp,0x20
c0023f64:	01 f8                	add    eax,edi
c0023f66:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f69:	52                   	push   edx
c0023f6a:	68 00 01 00 00       	push   0x100
c0023f6f:	6a 00                	push   0x0
c0023f71:	50                   	push   eax
c0023f72:	e8 d9 c7 fd ff       	call   c0000750 <memset>
c0023f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023f7b:	83 c4 10             	add    esp,0x10
c0023f7e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023f84:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023f8b:	01 f8                	add    eax,edi
c0023f8d:	81 c7 00 01 00 00    	add    edi,0x100
c0023f93:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f96:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023f9c:	75 b3                	jne    c0023f51 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023f9e:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023fa2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023fa6:	83 c4 1c             	add    esp,0x1c
c0023fa9:	5b                   	pop    ebx
c0023faa:	5e                   	pop    esi
c0023fab:	5f                   	pop    edi
c0023fac:	5d                   	pop    ebp
c0023fad:	e9 b0 fe ff ff       	jmp    c0023e62 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023fb2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023fb2:	55                   	push   ebp
c0023fb3:	57                   	push   edi
c0023fb4:	56                   	push   esi
c0023fb5:	53                   	push   ebx
c0023fb6:	31 db                	xor    ebx,ebx
c0023fb8:	83 ec 0c             	sub    esp,0xc
c0023fbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023fbf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023fc3:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023fc6:	f7 c7 01 00 00 00    	test   edi,0x1
c0023fcc:	74 7a                	je     c0024048 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023fce:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023fd2:	89 d8                	mov    eax,ebx
c0023fd4:	c1 e0 07             	shl    eax,0x7
c0023fd7:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023fde:	55                   	push   ebp
c0023fdf:	56                   	push   esi
c0023fe0:	e8 35 fe ff ff       	call   c0023e1a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023fe5:	5a                   	pop    edx
c0023fe6:	83 f8 01             	cmp    eax,0x1
c0023fe9:	59                   	pop    ecx
c0023fea:	75 21                	jne    c002400d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023fec:	50                   	push   eax
c0023fed:	53                   	push   ebx
c0023fee:	55                   	push   ebp
c0023fef:	56                   	push   esi
c0023ff0:	e8 b7 fe ff ff       	call   c0023eac <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ff5:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023ffc:	e8 ce b7 fe ff       	call   c000f7cf <malloc>
c0024001:	89 c5                	mov    ebp,eax
c0024003:	89 04 24             	mov    DWORD PTR [esp],eax
c0024006:	e8 87 0d 00 00       	call   c0024d92 <SATA::SATA()>
c002400b:	eb 24                	jmp    c0024031 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002400d:	83 f8 04             	cmp    eax,0x4
c0024010:	75 36                	jne    c0024048 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0024012:	51                   	push   ecx
c0024013:	53                   	push   ebx
c0024014:	55                   	push   ebp
c0024015:	56                   	push   esi
c0024016:	e8 91 fe ff ff       	call   c0023eac <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002401b:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024022:	e8 a8 b7 fe ff       	call   c000f7cf <malloc>
c0024027:	89 c5                	mov    ebp,eax
c0024029:	89 04 24             	mov    DWORD PTR [esp],eax
c002402c:	e8 d7 10 00 00       	call   c0025108 <SATAPI::SATAPI()>
c0024031:	58                   	pop    eax
c0024032:	5a                   	pop    edx
c0024033:	55                   	push   ebp
c0024034:	56                   	push   esi
c0024035:	e8 26 fc fe ff       	call   c0013c60 <Device::addChild(Device*)>
c002403a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002403d:	56                   	push   esi
c002403e:	6a 00                	push   0x0
c0024040:	53                   	push   ebx
c0024041:	55                   	push   ebp
c0024042:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0024045:	83 c4 20             	add    esp,0x20
c0024048:	d1 ef                	shr    edi,1
c002404a:	43                   	inc    ebx
c002404b:	83 fb 20             	cmp    ebx,0x20
c002404e:	0f 85 72 ff ff ff    	jne    c0023fc6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024054:	83 c4 0c             	add    esp,0xc
c0024057:	5b                   	pop    ebx
c0024058:	5e                   	pop    esi
c0024059:	5f                   	pop    edi
c002405a:	5d                   	pop    ebp
c002405b:	c3                   	ret    

c002405c <SATABus::open(int, int, void*)>:
c002405c:	83 ec 14             	sub    esp,0x14
c002405f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024063:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024069:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002406f:	52                   	push   edx
c0024070:	50                   	push   eax
c0024071:	e8 3c ff ff ff       	call   c0023fb2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024076:	31 c0                	xor    eax,eax
c0024078:	83 c4 1c             	add    esp,0x1c
c002407b:	c3                   	ret    

c002407c <ATA::close(int, int, void*)>:
c002407c:	83 ec 0c             	sub    esp,0xc
c002407f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024083:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024089:	85 c0                	test   eax,eax
c002408b:	74 0c                	je     c0024099 <ATA::close(int, int, void*)+0x1d>
c002408d:	83 ec 0c             	sub    esp,0xc
c0024090:	8b 10                	mov    edx,DWORD PTR [eax]
c0024092:	50                   	push   eax
c0024093:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024096:	83 c4 10             	add    esp,0x10
c0024099:	31 c0                	xor    eax,eax
c002409b:	83 c4 0c             	add    esp,0xc
c002409e:	c3                   	ret    
c002409f:	90                   	nop

c00240a0 <ATA::powerSaving(PowerSavingLevel)>:
c00240a0:	c3                   	ret    
c00240a1:	90                   	nop

c00240a2 <ATA::ATA()>:
c00240a2:	83 ec 0c             	sub    esp,0xc
c00240a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240a9:	83 ec 04             	sub    esp,0x4
c00240ac:	68 00 02 00 00       	push   0x200
c00240b1:	68 31 c8 02 c0       	push   0xc002c831
c00240b6:	50                   	push   eax
c00240b7:	e8 da ff fe ff       	call   c0014096 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00240bc:	83 c4 10             	add    esp,0x10
c00240bf:	ba b4 c7 02 c0       	mov    edx,0xc002c7b4
c00240c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240c8:	89 10                	mov    DWORD PTR [eax],edx
c00240ca:	90                   	nop
c00240cb:	83 c4 0c             	add    esp,0xc
c00240ce:	c3                   	ret    
c00240cf:	90                   	nop

c00240d0 <ATA::flush(bool)>:
c00240d0:	53                   	push   ebx
c00240d1:	83 ec 08             	sub    esp,0x8
c00240d4:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00240d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00240dd:	19 c0                	sbb    eax,eax
c00240df:	83 e0 fd             	and    eax,0xfffffffd
c00240e2:	05 ea 00 00 00       	add    eax,0xea
c00240e7:	50                   	push   eax
c00240e8:	6a 07                	push   0x7
c00240ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240f1:	50                   	push   eax
c00240f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240f8:	e8 53 f1 ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240fd:	83 c4 0c             	add    esp,0xc
c0024100:	6a 00                	push   0x0
c0024102:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024109:	50                   	push   eax
c002410a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024110:	e8 dd fb ff ff       	call   c0023cf2 <IDE::polling(unsigned char, unsigned int)>
c0024115:	83 c4 18             	add    esp,0x18
c0024118:	5b                   	pop    ebx
c0024119:	c3                   	ret    

c002411a <ATA::readyForCommand()>:
c002411a:	56                   	push   esi
c002411b:	53                   	push   ebx
c002411c:	31 db                	xor    ebx,ebx
c002411e:	50                   	push   eax
c002411f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024123:	50                   	push   eax
c0024124:	6a 0c                	push   0xc
c0024126:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002412d:	50                   	push   eax
c002412e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024134:	e8 d7 f1 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0024139:	83 c4 10             	add    esp,0x10
c002413c:	a8 88                	test   al,0x88
c002413e:	74 23                	je     c0024163 <ATA::readyForCommand()+0x49>
c0024140:	43                   	inc    ebx
c0024141:	83 fb 63             	cmp    ebx,0x63
c0024144:	7e dd                	jle    c0024123 <ATA::readyForCommand()+0x9>
c0024146:	51                   	push   ecx
c0024147:	51                   	push   ecx
c0024148:	6a 00                	push   0x0
c002414a:	68 40 42 0f 00       	push   0xf4240
c002414f:	e8 2b 9d ff ff       	call   c001de7f <nanoSleep(unsigned long long)>
c0024154:	83 c4 10             	add    esp,0x10
c0024157:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002415d:	75 c4                	jne    c0024123 <ATA::readyForCommand()+0x9>
c002415f:	31 c0                	xor    eax,eax
c0024161:	eb 02                	jmp    c0024165 <ATA::readyForCommand()+0x4b>
c0024163:	b0 01                	mov    al,0x1
c0024165:	5a                   	pop    edx
c0024166:	5b                   	pop    ebx
c0024167:	5e                   	pop    esi
c0024168:	c3                   	ret    
c0024169:	90                   	nop

c002416a <ATA::access(unsigned long long, int, void*, bool)>:
c002416a:	55                   	push   ebp
c002416b:	57                   	push   edi
c002416c:	56                   	push   esi
c002416d:	53                   	push   ebx
c002416e:	83 ec 38             	sub    esp,0x38
c0024171:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0024175:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0024179:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002417d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024181:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024185:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024189:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c002418d:	68 60 c7 02 c0       	push   0xc002c760
c0024192:	e8 90 e6 fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0024197:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002419d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00241a1:	83 c4 10             	add    esp,0x10
c00241a4:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00241aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00241ae:	c1 e0 06             	shl    eax,0x6
c00241b1:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00241b9:	74 5d                	je     c0024218 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c00241bb:	89 fa                	mov    edx,edi
c00241bd:	89 f0                	mov    eax,esi
c00241bf:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00241c3:	c1 ea 1c             	shr    edx,0x1c
c00241c6:	89 d1                	mov    ecx,edx
c00241c8:	09 c1                	or     ecx,eax
c00241ca:	74 25                	je     c00241f1 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c00241cc:	31 ed                	xor    ebp,ebp
c00241ce:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00241d5:	89 fa                	mov    edx,edi
c00241d7:	89 f0                	mov    eax,esi
c00241d9:	0f ad d0             	shrd   eax,edx,cl
c00241dc:	d3 ea                	shr    edx,cl
c00241de:	f6 c1 20             	test   cl,0x20
c00241e1:	74 02                	je     c00241e5 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c00241e3:	89 d0                	mov    eax,edx
c00241e5:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00241e9:	45                   	inc    ebp
c00241ea:	83 fd 06             	cmp    ebp,0x6
c00241ed:	75 df                	jne    c00241ce <ATA::access(unsigned long long, int, void*, bool)+0x64>
c00241ef:	eb 76                	jmp    c0024267 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c00241f1:	89 f0                	mov    eax,esi
c00241f3:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00241f8:	89 fa                	mov    edx,edi
c00241fa:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024201:	0f ac d0 10          	shrd   eax,edx,0x10
c0024205:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002420a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002420e:	c1 ee 18             	shr    esi,0x18
c0024211:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024216:	eb 56                	jmp    c002426e <ATA::access(unsigned long long, int, void*, bool)+0x104>
c0024218:	6a 00                	push   0x0
c002421a:	6a 3f                	push   0x3f
c002421c:	57                   	push   edi
c002421d:	56                   	push   esi
c002421e:	e8 a1 29 00 00       	call   c0026bc4 <__umoddi3>
c0024223:	83 c4 10             	add    esp,0x10
c0024226:	40                   	inc    eax
c0024227:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002422b:	6a 00                	push   0x0
c002422d:	68 f0 03 00 00       	push   0x3f0
c0024232:	57                   	push   edi
c0024233:	56                   	push   esi
c0024234:	e8 8b 28 00 00       	call   c0026ac4 <__udivdi3>
c0024239:	83 c4 10             	add    esp,0x10
c002423c:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024241:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024248:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002424d:	6a 00                	push   0x0
c002424f:	6a 3f                	push   0x3f
c0024251:	57                   	push   edi
c0024252:	56                   	push   esi
c0024253:	e8 6c 28 00 00       	call   c0026ac4 <__udivdi3>
c0024258:	83 c4 10             	add    esp,0x10
c002425b:	89 c6                	mov    esi,eax
c002425d:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024262:	83 e6 0f             	and    esi,0xf
c0024265:	eb 07                	jmp    c002426e <ATA::access(unsigned long long, int, void*, bool)+0x104>
c0024267:	31 f6                	xor    esi,esi
c0024269:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002426e:	bf 01 00 00 00       	mov    edi,0x1
c0024273:	50                   	push   eax
c0024274:	6a 00                	push   0x0
c0024276:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002427d:	50                   	push   eax
c002427e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024282:	e8 d5 f1 ff ff       	call   c002345c <IDE::enableIRQs(unsigned char, bool)>
c0024287:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002428a:	e8 8b fe ff ff       	call   c002411a <ATA::readyForCommand()>
c002428f:	83 c4 10             	add    esp,0x10
c0024292:	84 c0                	test   al,al
c0024294:	0f 84 bc 02 00 00    	je     c0024556 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c002429a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00242a0:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00242a6:	c1 e0 04             	shl    eax,0x4
c00242a9:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00242b0:	09 c6                	or     esi,eax
c00242b2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00242b7:	75 05                	jne    c00242be <ATA::access(unsigned long long, int, void*, bool)+0x154>
c00242b9:	83 ce a0             	or     esi,0xffffffa0
c00242bc:	eb 03                	jmp    c00242c1 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c00242be:	83 ce e0             	or     esi,0xffffffe0
c00242c1:	89 f0                	mov    eax,esi
c00242c3:	0f b6 f0             	movzx  esi,al
c00242c6:	56                   	push   esi
c00242c7:	6a 06                	push   0x6
c00242c9:	51                   	push   ecx
c00242ca:	52                   	push   edx
c00242cb:	e8 80 ef ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d0:	83 c4 10             	add    esp,0x10
c00242d3:	6a 00                	push   0x0
c00242d5:	6a 01                	push   0x1
c00242d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242de:	50                   	push   eax
c00242df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242e5:	e8 66 ef ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ea:	83 c4 10             	add    esp,0x10
c00242ed:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242f2:	75 6e                	jne    c0024362 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c00242f4:	6a 00                	push   0x0
c00242f6:	6a 08                	push   0x8
c00242f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ff:	50                   	push   eax
c0024300:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024306:	e8 45 ef ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002430b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024310:	50                   	push   eax
c0024311:	6a 09                	push   0x9
c0024313:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002431a:	50                   	push   eax
c002431b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024321:	e8 2a ef ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024326:	83 c4 20             	add    esp,0x20
c0024329:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002432e:	50                   	push   eax
c002432f:	6a 0a                	push   0xa
c0024331:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024338:	50                   	push   eax
c0024339:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002433f:	e8 0c ef ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024344:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024349:	50                   	push   eax
c002434a:	6a 0b                	push   0xb
c002434c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024353:	50                   	push   eax
c0024354:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002435a:	e8 f1 ee ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002435f:	83 c4 20             	add    esp,0x20
c0024362:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024367:	50                   	push   eax
c0024368:	6a 02                	push   0x2
c002436a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024371:	50                   	push   eax
c0024372:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024378:	e8 d3 ee ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002437d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024382:	50                   	push   eax
c0024383:	6a 03                	push   0x3
c0024385:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002438c:	50                   	push   eax
c002438d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024393:	e8 b8 ee ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024398:	83 c4 20             	add    esp,0x20
c002439b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00243a0:	50                   	push   eax
c00243a1:	6a 04                	push   0x4
c00243a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243aa:	50                   	push   eax
c00243ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243b1:	e8 9a ee ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243b6:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00243bb:	50                   	push   eax
c00243bc:	6a 05                	push   0x5
c00243be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243c5:	50                   	push   eax
c00243c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243cc:	e8 7f ee ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243d1:	83 c4 20             	add    esp,0x20
c00243d4:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00243d9:	0f 94 c0             	sete   al
c00243dc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243e1:	74 09                	je     c00243ec <ATA::access(unsigned long long, int, void*, bool)+0x282>
c00243e3:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00243ea:	eb 07                	jmp    c00243f3 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c00243ec:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00243f3:	0f b6 c0             	movzx  eax,al
c00243f6:	50                   	push   eax
c00243f7:	6a 07                	push   0x7
c00243f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024400:	50                   	push   eax
c0024401:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024407:	e8 44 ee ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002440c:	c7 04 24 6d c7 02 c0 	mov    DWORD PTR [esp],0xc002c76d
c0024413:	e8 0f e4 fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0024418:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002441c:	83 c4 10             	add    esp,0x10
c002441f:	85 f6                	test   esi,esi
c0024421:	0f 84 f7 00 00 00    	je     c002451e <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c0024427:	83 ec 0c             	sub    esp,0xc
c002442a:	68 70 c7 02 c0       	push   0xc002c770
c002442f:	e8 f3 e3 fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0024434:	83 c4 0c             	add    esp,0xc
c0024437:	6a 01                	push   0x1
c0024439:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024440:	50                   	push   eax
c0024441:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024447:	e8 a6 f8 ff ff       	call   c0023cf2 <IDE::polling(unsigned char, unsigned int)>
c002444c:	c7 04 24 73 c7 02 c0 	mov    DWORD PTR [esp],0xc002c773
c0024453:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0024457:	e8 cb e3 fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c002445c:	83 c4 10             	add    esp,0x10
c002445f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0024463:	84 c0                	test   al,al
c0024465:	74 2b                	je     c0024492 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c0024467:	0f b6 f8             	movzx  edi,al
c002446a:	57                   	push   edi
c002446b:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024472:	50                   	push   eax
c0024473:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002447a:	50                   	push   eax
c002447b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024481:	e8 bc f7 ff ff       	call   c0023c42 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024486:	c7 04 24 76 c7 02 c0 	mov    DWORD PTR [esp],0xc002c776
c002448d:	e9 bc 00 00 00       	jmp    c002454e <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c0024492:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024497:	74 50                	je     c00244e9 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c0024499:	83 ec 0c             	sub    esp,0xc
c002449c:	31 ed                	xor    ebp,ebp
c002449e:	68 81 c7 02 c0       	push   0xc002c781
c00244a3:	e8 7f e3 fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00244a8:	83 c4 10             	add    esp,0x10
c00244ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00244af:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00244b3:	50                   	push   eax
c00244b4:	50                   	push   eax
c00244b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244bc:	50                   	push   eax
c00244bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244c3:	e8 76 ed ff ff       	call   c002323e <IDE::getBase(unsigned char)>
c00244c8:	89 c2                	mov    edx,eax
c00244ca:	89 f8                	mov    eax,edi
c00244cc:	66 ef                	out    dx,ax
c00244ce:	45                   	inc    ebp
c00244cf:	83 c4 10             	add    esp,0x10
c00244d2:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00244d8:	75 d1                	jne    c00244ab <ATA::access(unsigned long long, int, void*, bool)+0x341>
c00244da:	83 ec 0c             	sub    esp,0xc
c00244dd:	68 84 c7 02 c0       	push   0xc002c784
c00244e2:	e8 40 e3 fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00244e7:	eb 24                	jmp    c002450d <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c00244e9:	51                   	push   ecx
c00244ea:	51                   	push   ecx
c00244eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244f2:	50                   	push   eax
c00244f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244f9:	e8 40 ed ff ff       	call   c002323e <IDE::getBase(unsigned char)>
c00244fe:	b9 00 01 00 00       	mov    ecx,0x100
c0024503:	89 c2                	mov    edx,eax
c0024505:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024509:	fc                   	cld    
c002450a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002450d:	83 c4 10             	add    esp,0x10
c0024510:	4e                   	dec    esi
c0024511:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024519:	e9 01 ff ff ff       	jmp    c002441f <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c002451e:	31 ff                	xor    edi,edi
c0024520:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024525:	74 2f                	je     c0024556 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c0024527:	83 ec 0c             	sub    esp,0xc
c002452a:	68 87 c7 02 c0       	push   0xc002c787
c002452f:	e8 f3 e2 fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0024534:	58                   	pop    eax
c0024535:	31 c0                	xor    eax,eax
c0024537:	5a                   	pop    edx
c0024538:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002453d:	0f 94 c0             	sete   al
c0024540:	50                   	push   eax
c0024541:	53                   	push   ebx
c0024542:	e8 89 fb ff ff       	call   c00240d0 <ATA::flush(bool)>
c0024547:	c7 04 24 8a c7 02 c0 	mov    DWORD PTR [esp],0xc002c78a
c002454e:	e8 d4 e2 fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0024553:	83 c4 10             	add    esp,0x10
c0024556:	83 c4 2c             	add    esp,0x2c
c0024559:	89 f8                	mov    eax,edi
c002455b:	5b                   	pop    ebx
c002455c:	5e                   	pop    esi
c002455d:	5f                   	pop    edi
c002455e:	5d                   	pop    ebp
c002455f:	c3                   	ret    

c0024560 <ATA::read(unsigned long long, int, void*)>:
c0024560:	57                   	push   edi
c0024561:	b8 04 00 00 00       	mov    eax,0x4
c0024566:	56                   	push   esi
c0024567:	53                   	push   ebx
c0024568:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002456c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024570:	8d 7a ff             	lea    edi,[edx-0x1]
c0024573:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024577:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002457b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024581:	77 25                	ja     c00245a8 <ATA::read(unsigned long long, int, void*)+0x48>
c0024583:	b8 06 00 00 00       	mov    eax,0x6
c0024588:	85 f6                	test   esi,esi
c002458a:	74 1c                	je     c00245a8 <ATA::read(unsigned long long, int, void*)+0x48>
c002458c:	50                   	push   eax
c002458d:	50                   	push   eax
c002458e:	6a 00                	push   0x0
c0024590:	56                   	push   esi
c0024591:	52                   	push   edx
c0024592:	53                   	push   ebx
c0024593:	51                   	push   ecx
c0024594:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024598:	e8 cd fb ff ff       	call   c002416a <ATA::access(unsigned long long, int, void*, bool)>
c002459d:	83 c4 20             	add    esp,0x20
c00245a0:	85 c0                	test   eax,eax
c00245a2:	0f 95 c0             	setne  al
c00245a5:	0f b6 c0             	movzx  eax,al
c00245a8:	5b                   	pop    ebx
c00245a9:	5e                   	pop    esi
c00245aa:	5f                   	pop    edi
c00245ab:	c3                   	ret    

c00245ac <ATA::write(unsigned long long, int, void*)>:
c00245ac:	55                   	push   ebp
c00245ad:	57                   	push   edi
c00245ae:	56                   	push   esi
c00245af:	53                   	push   ebx
c00245b0:	83 ec 18             	sub    esp,0x18
c00245b3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00245b7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00245bb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00245bf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00245c3:	68 8d c7 02 c0       	push   0xc002c78d
c00245c8:	e8 5a e2 fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c00245cd:	8d 53 ff             	lea    edx,[ebx-0x1]
c00245d0:	83 c4 10             	add    esp,0x10
c00245d3:	b8 04 00 00 00       	mov    eax,0x4
c00245d8:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00245de:	77 25                	ja     c0024605 <ATA::write(unsigned long long, int, void*)+0x59>
c00245e0:	b8 06 00 00 00       	mov    eax,0x6
c00245e5:	85 f6                	test   esi,esi
c00245e7:	74 1c                	je     c0024605 <ATA::write(unsigned long long, int, void*)+0x59>
c00245e9:	50                   	push   eax
c00245ea:	50                   	push   eax
c00245eb:	6a 01                	push   0x1
c00245ed:	56                   	push   esi
c00245ee:	53                   	push   ebx
c00245ef:	55                   	push   ebp
c00245f0:	57                   	push   edi
c00245f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00245f5:	e8 70 fb ff ff       	call   c002416a <ATA::access(unsigned long long, int, void*, bool)>
c00245fa:	83 c4 20             	add    esp,0x20
c00245fd:	85 c0                	test   eax,eax
c00245ff:	0f 95 c0             	setne  al
c0024602:	0f b6 c0             	movzx  eax,al
c0024605:	83 c4 0c             	add    esp,0xc
c0024608:	5b                   	pop    ebx
c0024609:	5e                   	pop    esi
c002460a:	5f                   	pop    edi
c002460b:	5d                   	pop    ebp
c002460c:	c3                   	ret    
c002460d:	90                   	nop

c002460e <ATA::detectCHS()>:
c002460e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024612:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024618:	c1 e0 06             	shl    eax,0x6
c002461b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024621:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002462b:	c7 44 24 04 99 c7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c799
c0024633:	e9 db 59 ff ff       	jmp    c001a013 <Krnl::panic(char const*)>

c0024638 <ATA::open(int, int, void*)>:
c0024638:	53                   	push   ebx
c0024639:	83 ec 08             	sub    esp,0x8
c002463c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024640:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024644:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024648:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002464e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024654:	c1 e0 06             	shl    eax,0x6
c0024657:	01 d0                	add    eax,edx
c0024659:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024660:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024666:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002466d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024677:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002467d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024684:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002468b:	75 0c                	jne    c0024699 <ATA::open(int, int, void*)+0x61>
c002468d:	83 ec 0c             	sub    esp,0xc
c0024690:	53                   	push   ebx
c0024691:	e8 78 ff ff ff       	call   c002460e <ATA::detectCHS()>
c0024696:	83 c4 10             	add    esp,0x10
c0024699:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002469f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00246a5:	c1 e0 06             	shl    eax,0x6
c00246a8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00246af:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00246b9:	d1 e8                	shr    eax,1
c00246bb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00246c1:	6a 04                	push   0x4
c00246c3:	6a 0c                	push   0xc
c00246c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246cc:	50                   	push   eax
c00246cd:	52                   	push   edx
c00246ce:	e8 7d eb ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246d3:	90                   	nop
c00246d4:	90                   	nop
c00246d5:	6a 00                	push   0x0
c00246d7:	6a 0c                	push   0xc
c00246d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246e0:	50                   	push   eax
c00246e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246e7:	e8 64 eb ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246ec:	83 c4 14             	add    esp,0x14
c00246ef:	53                   	push   ebx
c00246f0:	e8 09 fa fe ff       	call   c00140fe <PhysicalDisk::startCache()>
c00246f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00246f8:	e8 89 1c ff ff       	call   c0016386 <createPartitionsForDisk(PhysicalDisk*)>
c00246fd:	31 c0                	xor    eax,eax
c00246ff:	83 c4 18             	add    esp,0x18
c0024702:	5b                   	pop    ebx
c0024703:	c3                   	ret    

c0024704 <ATAPI::write(unsigned long long, int, void*)>:
c0024704:	b8 03 00 00 00       	mov    eax,0x3
c0024709:	c3                   	ret    

c002470a <ATAPI::close(int, int, void*)>:
c002470a:	83 ec 0c             	sub    esp,0xc
c002470d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024711:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024717:	85 c0                	test   eax,eax
c0024719:	74 0c                	je     c0024727 <ATAPI::close(int, int, void*)+0x1d>
c002471b:	83 ec 0c             	sub    esp,0xc
c002471e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024720:	50                   	push   eax
c0024721:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024724:	83 c4 10             	add    esp,0x10
c0024727:	31 c0                	xor    eax,eax
c0024729:	83 c4 0c             	add    esp,0xc
c002472c:	c3                   	ret    
c002472d:	90                   	nop

c002472e <ATAPI::ATAPI()>:
c002472e:	83 ec 0c             	sub    esp,0xc
c0024731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024735:	83 ec 04             	sub    esp,0x4
c0024738:	68 00 08 00 00       	push   0x800
c002473d:	68 d1 c8 02 c0       	push   0xc002c8d1
c0024742:	50                   	push   eax
c0024743:	e8 4e f9 fe ff       	call   c0014096 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024748:	83 c4 10             	add    esp,0x10
c002474b:	ba ec c7 02 c0       	mov    edx,0xc002c7ec
c0024750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024754:	89 10                	mov    DWORD PTR [eax],edx
c0024756:	90                   	nop
c0024757:	83 c4 0c             	add    esp,0xc
c002475a:	c3                   	ret    
c002475b:	90                   	nop

c002475c <ATAPI::readyForCommand()>:
c002475c:	56                   	push   esi
c002475d:	53                   	push   ebx
c002475e:	31 db                	xor    ebx,ebx
c0024760:	50                   	push   eax
c0024761:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024765:	50                   	push   eax
c0024766:	6a 0c                	push   0xc
c0024768:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002476f:	50                   	push   eax
c0024770:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024776:	e8 95 eb ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c002477b:	83 c4 10             	add    esp,0x10
c002477e:	a8 88                	test   al,0x88
c0024780:	74 23                	je     c00247a5 <ATAPI::readyForCommand()+0x49>
c0024782:	43                   	inc    ebx
c0024783:	83 fb 63             	cmp    ebx,0x63
c0024786:	7e dd                	jle    c0024765 <ATAPI::readyForCommand()+0x9>
c0024788:	51                   	push   ecx
c0024789:	51                   	push   ecx
c002478a:	6a 00                	push   0x0
c002478c:	68 40 42 0f 00       	push   0xf4240
c0024791:	e8 e9 96 ff ff       	call   c001de7f <nanoSleep(unsigned long long)>
c0024796:	83 c4 10             	add    esp,0x10
c0024799:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002479f:	75 c4                	jne    c0024765 <ATAPI::readyForCommand()+0x9>
c00247a1:	31 c0                	xor    eax,eax
c00247a3:	eb 02                	jmp    c00247a7 <ATAPI::readyForCommand()+0x4b>
c00247a5:	b0 01                	mov    al,0x1
c00247a7:	5a                   	pop    edx
c00247a8:	5b                   	pop    ebx
c00247a9:	5e                   	pop    esi
c00247aa:	c3                   	ret    
c00247ab:	90                   	nop

c00247ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00247ac:	55                   	push   ebp
c00247ad:	57                   	push   edi
c00247ae:	56                   	push   esi
c00247af:	53                   	push   ebx
c00247b0:	83 ec 20             	sub    esp,0x20
c00247b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00247b7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00247bb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00247bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00247c3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00247c7:	6a 01                	push   0x1
c00247c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247d0:	50                   	push   eax
c00247d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d7:	e8 80 ec ff ff       	call   c002345c <IDE::enableIRQs(unsigned char, bool)>
c00247dc:	5e                   	pop    esi
c00247dd:	58                   	pop    eax
c00247de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e5:	50                   	push   eax
c00247e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ec:	e8 39 ea ff ff       	call   c002322a <IDE::prepareInterrupt(unsigned char)>
c00247f1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00247f4:	e8 63 ff ff ff       	call   c002475c <ATAPI::readyForCommand()>
c00247f9:	83 c4 10             	add    esp,0x10
c00247fc:	84 c0                	test   al,al
c00247fe:	75 0a                	jne    c002480a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024800:	bb 01 00 00 00       	mov    ebx,0x1
c0024805:	e9 57 02 00 00       	jmp    c0024a61 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002480a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024810:	c1 e0 04             	shl    eax,0x4
c0024813:	0f b6 c0             	movzx  eax,al
c0024816:	50                   	push   eax
c0024817:	6a 06                	push   0x6
c0024819:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024820:	50                   	push   eax
c0024821:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024827:	e8 24 ea ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002482c:	6a 00                	push   0x0
c002482e:	6a 01                	push   0x1
c0024830:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024837:	50                   	push   eax
c0024838:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002483e:	e8 0d ea ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024843:	83 c4 20             	add    esp,0x20
c0024846:	0f b6 c3             	movzx  eax,bl
c0024849:	0f b6 df             	movzx  ebx,bh
c002484c:	50                   	push   eax
c002484d:	6a 04                	push   0x4
c002484f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024856:	50                   	push   eax
c0024857:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002485d:	e8 ee e9 ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024862:	53                   	push   ebx
c0024863:	6a 05                	push   0x5
c0024865:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002486c:	50                   	push   eax
c002486d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024873:	e8 d8 e9 ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024878:	83 c4 20             	add    esp,0x20
c002487b:	68 a0 00 00 00       	push   0xa0
c0024880:	6a 07                	push   0x7
c0024882:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024889:	50                   	push   eax
c002488a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024890:	e8 bb e9 ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024895:	83 c4 0c             	add    esp,0xc
c0024898:	6a 01                	push   0x1
c002489a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248a1:	50                   	push   eax
c00248a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248a8:	e8 45 f4 ff ff       	call   c0023cf2 <IDE::polling(unsigned char, unsigned int)>
c00248ad:	83 c4 10             	add    esp,0x10
c00248b0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00248b6:	84 c0                	test   al,al
c00248b8:	74 23                	je     c00248dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00248ba:	0f b6 d8             	movzx  ebx,al
c00248bd:	0f b6 d2             	movzx  edx,dl
c00248c0:	53                   	push   ebx
c00248c1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00248c8:	50                   	push   eax
c00248c9:	52                   	push   edx
c00248ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248d0:	e8 6d f3 ff ff       	call   c0023c42 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00248d5:	83 c4 10             	add    esp,0x10
c00248d8:	e9 84 01 00 00       	jmp    c0024a61 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00248dd:	0f b6 d2             	movzx  edx,dl
c00248e0:	53                   	push   ebx
c00248e1:	53                   	push   ebx
c00248e2:	52                   	push   edx
c00248e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248e9:	e8 50 e9 ff ff       	call   c002323e <IDE::getBase(unsigned char)>
c00248ee:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00248f2:	b9 06 00 00 00       	mov    ecx,0x6
c00248f7:	89 c2                	mov    edx,eax
c00248f9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00248fc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024900:	83 c4 10             	add    esp,0x10
c0024903:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024909:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024910:	85 db                	test   ebx,ebx
c0024912:	0f 84 ec 00 00 00    	je     c0024a04 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024918:	51                   	push   ecx
c0024919:	51                   	push   ecx
c002491a:	52                   	push   edx
c002491b:	50                   	push   eax
c002491c:	e8 9d ea ff ff       	call   c00233be <IDE::waitInterrupt(unsigned char)>
c0024921:	83 c4 10             	add    esp,0x10
c0024924:	84 c0                	test   al,al
c0024926:	0f 84 d4 fe ff ff    	je     c0024800 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002492c:	56                   	push   esi
c002492d:	56                   	push   esi
c002492e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024935:	50                   	push   eax
c0024936:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002493c:	e8 e9 e8 ff ff       	call   c002322a <IDE::prepareInterrupt(unsigned char)>
c0024941:	83 c4 0c             	add    esp,0xc
c0024944:	6a 04                	push   0x4
c0024946:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002494d:	50                   	push   eax
c002494e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024954:	e8 b7 e9 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0024959:	83 c4 0c             	add    esp,0xc
c002495c:	89 c6                	mov    esi,eax
c002495e:	6a 05                	push   0x5
c0024960:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024967:	50                   	push   eax
c0024968:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002496e:	e8 9d e9 ff ff       	call   c0023310 <IDE::read(unsigned char, unsigned char)>
c0024973:	89 f1                	mov    ecx,esi
c0024975:	0f b6 c0             	movzx  eax,al
c0024978:	0f b6 f1             	movzx  esi,cl
c002497b:	c1 e0 08             	shl    eax,0x8
c002497e:	09 c6                	or     esi,eax
c0024980:	d1 fe                	sar    esi,1
c0024982:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024986:	83 c4 10             	add    esp,0x10
c0024989:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002498e:	74 41                	je     c00249d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024990:	31 c9                	xor    ecx,ecx
c0024992:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024998:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002499f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00249a3:	75 0a                	jne    c00249af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00249a5:	01 c9                	add    ecx,ecx
c00249a7:	01 cd                	add    ebp,ecx
c00249a9:	4b                   	dec    ebx
c00249aa:	e9 54 ff ff ff       	jmp    c0024903 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00249af:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00249b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00249b8:	51                   	push   ecx
c00249b9:	51                   	push   ecx
c00249ba:	52                   	push   edx
c00249bb:	50                   	push   eax
c00249bc:	e8 7d e8 ff ff       	call   c002323e <IDE::getBase(unsigned char)>
c00249c1:	89 c2                	mov    edx,eax
c00249c3:	89 f0                	mov    eax,esi
c00249c5:	66 ef                	out    dx,ax
c00249c7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00249cb:	83 c4 10             	add    esp,0x10
c00249ce:	41                   	inc    ecx
c00249cf:	eb c1                	jmp    c0024992 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00249d1:	31 f6                	xor    esi,esi
c00249d3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00249d9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00249e0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00249e4:	75 06                	jne    c00249ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00249e6:	01 f6                	add    esi,esi
c00249e8:	01 f5                	add    ebp,esi
c00249ea:	eb bd                	jmp    c00249a9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00249ec:	51                   	push   ecx
c00249ed:	51                   	push   ecx
c00249ee:	52                   	push   edx
c00249ef:	50                   	push   eax
c00249f0:	e8 49 e8 ff ff       	call   c002323e <IDE::getBase(unsigned char)>
c00249f5:	89 c2                	mov    edx,eax
c00249f7:	66 ed                	in     ax,dx
c00249f9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00249fe:	83 c4 10             	add    esp,0x10
c0024a01:	46                   	inc    esi
c0024a02:	eb cf                	jmp    c00249d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024a04:	51                   	push   ecx
c0024a05:	51                   	push   ecx
c0024a06:	52                   	push   edx
c0024a07:	50                   	push   eax
c0024a08:	e8 b1 e9 ff ff       	call   c00233be <IDE::waitInterrupt(unsigned char)>
c0024a0d:	83 c4 10             	add    esp,0x10
c0024a10:	84 c0                	test   al,al
c0024a12:	0f 84 e8 fd ff ff    	je     c0024800 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024a18:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024a1d:	52                   	push   edx
c0024a1e:	52                   	push   edx
c0024a1f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a26:	50                   	push   eax
c0024a27:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a2d:	e8 f8 e7 ff ff       	call   c002322a <IDE::prepareInterrupt(unsigned char)>
c0024a32:	83 c4 10             	add    esp,0x10
c0024a35:	50                   	push   eax
c0024a36:	50                   	push   eax
c0024a37:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a3e:	50                   	push   eax
c0024a3f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a45:	e8 f4 e7 ff ff       	call   c002323e <IDE::getBase(unsigned char)>
c0024a4a:	8d 50 07             	lea    edx,[eax+0x7]
c0024a4d:	ec                   	in     al,dx
c0024a4e:	83 c4 10             	add    esp,0x10
c0024a51:	a8 88                	test   al,0x88
c0024a53:	74 0a                	je     c0024a5f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024a55:	4b                   	dec    ebx
c0024a56:	75 dd                	jne    c0024a35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024a58:	bb 02 00 00 00       	mov    ebx,0x2
c0024a5d:	eb 02                	jmp    c0024a61 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024a5f:	31 db                	xor    ebx,ebx
c0024a61:	83 c4 1c             	add    esp,0x1c
c0024a64:	89 d8                	mov    eax,ebx
c0024a66:	5b                   	pop    ebx
c0024a67:	5e                   	pop    esi
c0024a68:	5f                   	pop    edi
c0024a69:	5d                   	pop    ebp
c0024a6a:	c3                   	ret    
c0024a6b:	90                   	nop

c0024a6c <ATAPI::diskRemoved()>:
c0024a6c:	83 ec 18             	sub    esp,0x18
c0024a6f:	68 dd c8 02 c0       	push   0xc002c8dd
c0024a74:	e8 ae dd fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0024a79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024a7d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024a84:	83 c4 1c             	add    esp,0x1c
c0024a87:	c3                   	ret    

c0024a88 <ATAPI::eject()>:
c0024a88:	57                   	push   edi
c0024a89:	b9 03 00 00 00       	mov    ecx,0x3
c0024a8e:	53                   	push   ebx
c0024a8f:	83 ec 14             	sub    esp,0x14
c0024a92:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024a96:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a9a:	fc                   	cld    
c0024a9b:	31 c0                	xor    eax,eax
c0024a9d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a9f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024aa4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024aa9:	50                   	push   eax
c0024aaa:	50                   	push   eax
c0024aab:	6a 00                	push   0x0
c0024aad:	6a 00                	push   0x0
c0024aaf:	6a 00                	push   0x0
c0024ab1:	6a 02                	push   0x2
c0024ab3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024ab7:	50                   	push   eax
c0024ab8:	53                   	push   ebx
c0024ab9:	e8 ee fc ff ff       	call   c00247ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024abe:	83 c4 14             	add    esp,0x14
c0024ac1:	53                   	push   ebx
c0024ac2:	e8 a5 ff ff ff       	call   c0024a6c <ATAPI::diskRemoved()>
c0024ac7:	83 c4 24             	add    esp,0x24
c0024aca:	31 c0                	xor    eax,eax
c0024acc:	5b                   	pop    ebx
c0024acd:	5f                   	pop    edi
c0024ace:	c3                   	ret    
c0024acf:	90                   	nop

c0024ad0 <ATAPI::diskInserted()>:
c0024ad0:	53                   	push   ebx
c0024ad1:	83 ec 14             	sub    esp,0x14
c0024ad4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024ad8:	68 f4 c8 02 c0       	push   0xc002c8f4
c0024add:	e8 45 dd fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0024ae2:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024ae9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024aec:	e8 0d f6 fe ff       	call   c00140fe <PhysicalDisk::startCache()>
c0024af1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024af5:	83 c4 18             	add    esp,0x18
c0024af8:	5b                   	pop    ebx
c0024af9:	e9 88 18 ff ff       	jmp    c0016386 <createPartitionsForDisk(PhysicalDisk*)>

c0024afe <ATAPI::detectMedia()>:
c0024afe:	56                   	push   esi
c0024aff:	53                   	push   ebx
c0024b00:	83 ec 28             	sub    esp,0x28
c0024b03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b07:	6a 0c                	push   0xc
c0024b09:	6a 00                	push   0x0
c0024b0b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024b0f:	56                   	push   esi
c0024b10:	e8 3b bc fd ff       	call   c0000750 <memset>
c0024b15:	58                   	pop    eax
c0024b16:	5a                   	pop    edx
c0024b17:	6a 00                	push   0x0
c0024b19:	6a 00                	push   0x0
c0024b1b:	6a 00                	push   0x0
c0024b1d:	6a 00                	push   0x0
c0024b1f:	56                   	push   esi
c0024b20:	53                   	push   ebx
c0024b21:	e8 86 fc ff ff       	call   c00247ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b26:	83 c4 1c             	add    esp,0x1c
c0024b29:	6a 0c                	push   0xc
c0024b2b:	6a 00                	push   0x0
c0024b2d:	56                   	push   esi
c0024b2e:	e8 1d bc fd ff       	call   c0000750 <memset>
c0024b33:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024b38:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024b3d:	59                   	pop    ecx
c0024b3e:	58                   	pop    eax
c0024b3f:	6a 01                	push   0x1
c0024b41:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024b45:	50                   	push   eax
c0024b46:	6a 00                	push   0x0
c0024b48:	6a 12                	push   0x12
c0024b4a:	56                   	push   esi
c0024b4b:	53                   	push   ebx
c0024b4c:	e8 5b fc ff ff       	call   c00247ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b51:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024b55:	83 c4 20             	add    esp,0x20
c0024b58:	83 e0 7f             	and    eax,0x7f
c0024b5b:	3c 70                	cmp    al,0x70
c0024b5d:	74 15                	je     c0024b74 <ATAPI::detectMedia()+0x76>
c0024b5f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b66:	75 0c                	jne    c0024b74 <ATAPI::detectMedia()+0x76>
c0024b68:	83 ec 0c             	sub    esp,0xc
c0024b6b:	53                   	push   ebx
c0024b6c:	e8 5f ff ff ff       	call   c0024ad0 <ATAPI::diskInserted()>
c0024b71:	83 c4 10             	add    esp,0x10
c0024b74:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024b78:	83 e0 0f             	and    eax,0xf
c0024b7b:	3c 02                	cmp    al,0x2
c0024b7d:	75 1b                	jne    c0024b9a <ATAPI::detectMedia()+0x9c>
c0024b7f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024b84:	75 2d                	jne    c0024bb3 <ATAPI::detectMedia()+0xb5>
c0024b86:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b8d:	74 24                	je     c0024bb3 <ATAPI::detectMedia()+0xb5>
c0024b8f:	83 ec 0c             	sub    esp,0xc
c0024b92:	53                   	push   ebx
c0024b93:	e8 d4 fe ff ff       	call   c0024a6c <ATAPI::diskRemoved()>
c0024b98:	eb 16                	jmp    c0024bb0 <ATAPI::detectMedia()+0xb2>
c0024b9a:	84 c0                	test   al,al
c0024b9c:	75 15                	jne    c0024bb3 <ATAPI::detectMedia()+0xb5>
c0024b9e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024ba5:	75 0c                	jne    c0024bb3 <ATAPI::detectMedia()+0xb5>
c0024ba7:	83 ec 0c             	sub    esp,0xc
c0024baa:	53                   	push   ebx
c0024bab:	e8 20 ff ff ff       	call   c0024ad0 <ATAPI::diskInserted()>
c0024bb0:	83 c4 10             	add    esp,0x10
c0024bb3:	83 c4 24             	add    esp,0x24
c0024bb6:	5b                   	pop    ebx
c0024bb7:	5e                   	pop    esi
c0024bb8:	c3                   	ret    
c0024bb9:	90                   	nop

c0024bba <ATAPI::open(int, int, void*)>:
c0024bba:	53                   	push   ebx
c0024bbb:	83 ec 08             	sub    esp,0x8
c0024bbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024bc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024bca:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024bd0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024bd6:	c1 e0 06             	shl    eax,0x6
c0024bd9:	01 d0                	add    eax,edx
c0024bdb:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024be2:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024be8:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024bef:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024bf9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024bff:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024c06:	6a 04                	push   0x4
c0024c08:	6a 0c                	push   0xc
c0024c0a:	51                   	push   ecx
c0024c0b:	52                   	push   edx
c0024c0c:	e8 3f e6 ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c11:	90                   	nop
c0024c12:	90                   	nop
c0024c13:	6a 00                	push   0x0
c0024c15:	6a 0c                	push   0xc
c0024c17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c1e:	50                   	push   eax
c0024c1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c25:	e8 26 e6 ff ff       	call   c0023250 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c2a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024c31:	83 c4 14             	add    esp,0x14
c0024c34:	53                   	push   ebx
c0024c35:	e8 c4 fe ff ff       	call   c0024afe <ATAPI::detectMedia()>
c0024c3a:	31 c0                	xor    eax,eax
c0024c3c:	83 c4 18             	add    esp,0x18
c0024c3f:	5b                   	pop    ebx
c0024c40:	c3                   	ret    
c0024c41:	90                   	nop

c0024c42 <ATAPI::read(unsigned long long, int, void*)>:
c0024c42:	55                   	push   ebp
c0024c43:	57                   	push   edi
c0024c44:	56                   	push   esi
c0024c45:	53                   	push   ebx
c0024c46:	83 ec 1c             	sub    esp,0x1c
c0024c49:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024c4d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024c51:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024c55:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c5c:	74 41                	je     c0024c9f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024c5e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024c62:	b9 03 00 00 00       	mov    ecx,0x3
c0024c67:	fc                   	cld    
c0024c68:	31 c0                	xor    eax,eax
c0024c6a:	86 fb                	xchg   bl,bh
c0024c6c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024c6e:	c1 c3 10             	rol    ebx,0x10
c0024c71:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024c76:	89 e8                	mov    eax,ebp
c0024c78:	86 fb                	xchg   bl,bh
c0024c7a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024c7e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024c82:	50                   	push   eax
c0024c83:	50                   	push   eax
c0024c84:	55                   	push   ebp
c0024c85:	c1 e5 0b             	shl    ebp,0xb
c0024c88:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024c8c:	6a 00                	push   0x0
c0024c8e:	55                   	push   ebp
c0024c8f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c93:	50                   	push   eax
c0024c94:	56                   	push   esi
c0024c95:	e8 12 fb ff ff       	call   c00247ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024c9a:	83 c4 20             	add    esp,0x20
c0024c9d:	eb 1a                	jmp    c0024cb9 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024c9f:	83 ec 0c             	sub    esp,0xc
c0024ca2:	56                   	push   esi
c0024ca3:	e8 56 fe ff ff       	call   c0024afe <ATAPI::detectMedia()>
c0024ca8:	83 c4 10             	add    esp,0x10
c0024cab:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024cb2:	75 aa                	jne    c0024c5e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024cb4:	b8 02 00 00 00       	mov    eax,0x2
c0024cb9:	83 c4 1c             	add    esp,0x1c
c0024cbc:	5b                   	pop    ebx
c0024cbd:	5e                   	pop    esi
c0024cbe:	5f                   	pop    edi
c0024cbf:	5d                   	pop    ebp
c0024cc0:	c3                   	ret    
c0024cc1:	90                   	nop

c0024cc2 <SATA::close(int, int, void*)>:
c0024cc2:	83 ec 0c             	sub    esp,0xc
c0024cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cc9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024ccf:	85 c0                	test   eax,eax
c0024cd1:	74 0c                	je     c0024cdf <SATA::close(int, int, void*)+0x1d>
c0024cd3:	83 ec 0c             	sub    esp,0xc
c0024cd6:	8b 10                	mov    edx,DWORD PTR [eax]
c0024cd8:	50                   	push   eax
c0024cd9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024cdc:	83 c4 10             	add    esp,0x10
c0024cdf:	31 c0                	xor    eax,eax
c0024ce1:	83 c4 0c             	add    esp,0xc
c0024ce4:	c3                   	ret    
c0024ce5:	90                   	nop

c0024ce6 <SATA::powerSaving(PowerSavingLevel)>:
c0024ce6:	c3                   	ret    
c0024ce7:	90                   	nop

c0024ce8 <SATA::open(int, int, void*)>:
c0024ce8:	56                   	push   esi
c0024ce9:	53                   	push   ebx
c0024cea:	50                   	push   eax
c0024ceb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024cef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cf3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024cfd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024d03:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024d0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d11:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024d1b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024d21:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024d28:	e8 9e ae fe ff       	call   c000fbcb <Phys::allocatePage()>
c0024d2d:	89 c6                	mov    esi,eax
c0024d2f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024d35:	81 c6 00 10 00 00    	add    esi,0x1000
c0024d3b:	e8 8b ae fe ff       	call   c000fbcb <Phys::allocatePage()>
c0024d40:	39 c6                	cmp    esi,eax
c0024d42:	74 10                	je     c0024d54 <SATA::open(int, int, void*)+0x6c>
c0024d44:	83 ec 0c             	sub    esp,0xc
c0024d47:	68 1c c8 02 c0       	push   0xc002c81c
c0024d4c:	e8 c2 52 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0024d51:	83 c4 10             	add    esp,0x10
c0024d54:	83 ec 0c             	sub    esp,0xc
c0024d57:	6a 02                	push   0x2
c0024d59:	e8 f7 c6 fe ff       	call   c0011455 <Virt::allocateKernelVirtualPages(int)>
c0024d5e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d64:	6a 03                	push   0x3
c0024d66:	50                   	push   eax
c0024d67:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024d6d:	ff 35 90 e0 02 c0    	push   DWORD PTR ds:0xc002e090
c0024d73:	e8 84 cd fe ff       	call   c0011afc <VAS::mapPage(unsigned long, unsigned long, int)>
c0024d78:	83 c4 14             	add    esp,0x14
c0024d7b:	53                   	push   ebx
c0024d7c:	e8 7d f3 fe ff       	call   c00140fe <PhysicalDisk::startCache()>
c0024d81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d84:	e8 fd 15 ff ff       	call   c0016386 <createPartitionsForDisk(PhysicalDisk*)>
c0024d89:	83 c4 14             	add    esp,0x14
c0024d8c:	31 c0                	xor    eax,eax
c0024d8e:	5b                   	pop    ebx
c0024d8f:	5e                   	pop    esi
c0024d90:	c3                   	ret    
c0024d91:	90                   	nop

c0024d92 <SATA::SATA()>:
c0024d92:	83 ec 0c             	sub    esp,0xc
c0024d95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d99:	83 ec 04             	sub    esp,0x4
c0024d9c:	68 00 02 00 00       	push   0x200
c0024da1:	68 30 c8 02 c0       	push   0xc002c830
c0024da6:	50                   	push   eax
c0024da7:	e8 ea f2 fe ff       	call   c0014096 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024dac:	83 c4 10             	add    esp,0x10
c0024daf:	ba a0 c8 02 c0       	mov    edx,0xc002c8a0
c0024db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024db8:	89 10                	mov    DWORD PTR [eax],edx
c0024dba:	90                   	nop
c0024dbb:	83 c4 0c             	add    esp,0xc
c0024dbe:	c3                   	ret    
c0024dbf:	90                   	nop

c0024dc0 <SATA::access(unsigned long long, int, void*, bool)>:
c0024dc0:	55                   	push   ebp
c0024dc1:	57                   	push   edi
c0024dc2:	56                   	push   esi
c0024dc3:	53                   	push   ebx
c0024dc4:	83 ec 2c             	sub    esp,0x2c
c0024dc7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024dcb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024dcf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024dd3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024dd7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024ddb:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024de0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024de4:	7e 10                	jle    c0024df6 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024de6:	83 ec 0c             	sub    esp,0xc
c0024de9:	68 40 c8 02 c0       	push   0xc002c840
c0024dee:	e8 20 52 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0024df3:	83 c4 10             	add    esp,0x10
c0024df6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024dfc:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024e02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024e08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024e0c:	89 d0                	mov    eax,edx
c0024e0e:	c1 e0 07             	shl    eax,0x7
c0024e11:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024e15:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024e1f:	51                   	push   ecx
c0024e20:	8d 42 02             	lea    eax,[edx+0x2]
c0024e23:	51                   	push   ecx
c0024e24:	c1 e0 07             	shl    eax,0x7
c0024e27:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024e2b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024e2f:	50                   	push   eax
c0024e30:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024e36:	e8 97 ef ff ff       	call   c0023dd2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e3b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e3f:	83 c4 10             	add    esp,0x10
c0024e42:	b8 01 00 00 00       	mov    eax,0x1
c0024e47:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024e4c:	0f 84 cb 01 00 00    	je     c002501d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024e52:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024e5a:	c1 e0 09             	shl    eax,0x9
c0024e5d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024e62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024e66:	74 0e                	je     c0024e76 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024e68:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024e6e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024e72:	89 c1                	mov    ecx,eax
c0024e74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024e76:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024e7a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024e80:	8d 42 02             	lea    eax,[edx+0x2]
c0024e83:	c1 e0 07             	shl    eax,0x7
c0024e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024e8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e8c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e92:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e9c:	c1 e1 05             	shl    ecx,0x5
c0024e9f:	01 c8                	add    eax,ecx
c0024ea1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024ea5:	83 e1 01             	and    ecx,0x1
c0024ea8:	89 ce                	mov    esi,ecx
c0024eaa:	8a 08                	mov    cl,BYTE PTR [eax]
c0024eac:	c1 e6 06             	shl    esi,0x6
c0024eaf:	83 e1 bf             	and    ecx,0xffffffbf
c0024eb2:	09 f1                	or     ecx,esi
c0024eb4:	88 08                	mov    BYTE PTR [eax],cl
c0024eb6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024eb8:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024ebe:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024ec4:	89 08                	mov    DWORD PTR [eax],ecx
c0024ec6:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024ecc:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024ed2:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024ed8:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024edb:	50                   	push   eax
c0024edc:	68 90 00 00 00       	push   0x90
c0024ee1:	6a 00                	push   0x0
c0024ee3:	56                   	push   esi
c0024ee4:	e8 67 b8 fd ff       	call   c0000750 <memset>
c0024ee9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024eef:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024ef3:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024ef9:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024efd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024f01:	83 c4 10             	add    esp,0x10
c0024f04:	48                   	dec    eax
c0024f05:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024f0a:	89 c1                	mov    ecx,eax
c0024f0c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024f12:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024f17:	09 c8                	or     eax,ecx
c0024f19:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024f1f:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024f22:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024f29:	66 25 00 7f          	and    ax,0x7f00
c0024f2d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024f31:	66 0d 27 80          	or     ax,0x8027
c0024f35:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024f3a:	66 89 06             	mov    WORD PTR [esi],ax
c0024f3d:	19 c0                	sbb    eax,eax
c0024f3f:	83 e0 f0             	and    eax,0xfffffff0
c0024f42:	83 c0 35             	add    eax,0x35
c0024f45:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024f48:	89 e8                	mov    eax,ebp
c0024f4a:	c1 e8 10             	shr    eax,0x10
c0024f4d:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024f50:	89 e8                	mov    eax,ebp
c0024f52:	c1 e8 18             	shr    eax,0x18
c0024f55:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024f58:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024f5c:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024f5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024f63:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024f66:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024f6a:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024f6e:	89 d6                	mov    esi,edx
c0024f70:	31 c0                	xor    eax,eax
c0024f72:	c1 e6 07             	shl    esi,0x7
c0024f75:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024f79:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024f7f:	80 e1 88             	and    cl,0x88
c0024f82:	74 0a                	je     c0024f8e <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024f84:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f89:	74 0a                	je     c0024f95 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024f8b:	40                   	inc    eax
c0024f8c:	eb eb                	jmp    c0024f79 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024f8e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f93:	75 0a                	jne    c0024f9f <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024f95:	83 ec 0c             	sub    esp,0xc
c0024f98:	68 79 c8 02 c0       	push   0xc002c879
c0024f9d:	eb 56                	jmp    c0024ff5 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024f9f:	b8 01 00 00 00       	mov    eax,0x1
c0024fa4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024fa8:	c1 e2 07             	shl    edx,0x7
c0024fab:	d3 e0                	shl    eax,cl
c0024fad:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024fb1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024fb7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024fbd:	85 c8                	test   eax,ecx
c0024fbf:	74 20                	je     c0024fe1 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024fc1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024fc7:	0f ba e1 1e          	bt     ecx,0x1e
c0024fcb:	73 ea                	jae    c0024fb7 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024fcd:	83 ec 0c             	sub    esp,0xc
c0024fd0:	68 87 c8 02 c0       	push   0xc002c887
c0024fd5:	e8 39 50 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0024fda:	83 c4 10             	add    esp,0x10
c0024fdd:	31 c0                	xor    eax,eax
c0024fdf:	eb 3c                	jmp    c002501d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024fe1:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024fe7:	0f ba e0 1e          	bt     eax,0x1e
c0024feb:	73 17                	jae    c0025004 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024fed:	83 ec 0c             	sub    esp,0xc
c0024ff0:	68 87 c8 02 c0       	push   0xc002c887
c0024ff5:	e8 19 50 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0024ffa:	83 c4 10             	add    esp,0x10
c0024ffd:	b8 01 00 00 00       	mov    eax,0x1
c0025002:	eb 19                	jmp    c002501d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025004:	31 c0                	xor    eax,eax
c0025006:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002500b:	75 10                	jne    c002501d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002500d:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025013:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025017:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002501b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002501d:	83 c4 2c             	add    esp,0x2c
c0025020:	5b                   	pop    ebx
c0025021:	5e                   	pop    esi
c0025022:	5f                   	pop    edi
c0025023:	5d                   	pop    ebp
c0025024:	c3                   	ret    
c0025025:	90                   	nop

c0025026 <SATA::read(unsigned long long, int, void*)>:
c0025026:	57                   	push   edi
c0025027:	b8 04 00 00 00       	mov    eax,0x4
c002502c:	56                   	push   esi
c002502d:	53                   	push   ebx
c002502e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025032:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025036:	8d 7a ff             	lea    edi,[edx-0x1]
c0025039:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002503d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025041:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0025047:	77 25                	ja     c002506e <SATA::read(unsigned long long, int, void*)+0x48>
c0025049:	b8 06 00 00 00       	mov    eax,0x6
c002504e:	85 f6                	test   esi,esi
c0025050:	74 1c                	je     c002506e <SATA::read(unsigned long long, int, void*)+0x48>
c0025052:	50                   	push   eax
c0025053:	50                   	push   eax
c0025054:	6a 00                	push   0x0
c0025056:	56                   	push   esi
c0025057:	52                   	push   edx
c0025058:	53                   	push   ebx
c0025059:	51                   	push   ecx
c002505a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002505e:	e8 5d fd ff ff       	call   c0024dc0 <SATA::access(unsigned long long, int, void*, bool)>
c0025063:	83 c4 20             	add    esp,0x20
c0025066:	85 c0                	test   eax,eax
c0025068:	0f 95 c0             	setne  al
c002506b:	0f b6 c0             	movzx  eax,al
c002506e:	5b                   	pop    ebx
c002506f:	5e                   	pop    esi
c0025070:	5f                   	pop    edi
c0025071:	c3                   	ret    

c0025072 <SATA::write(unsigned long long, int, void*)>:
c0025072:	55                   	push   ebp
c0025073:	b8 04 00 00 00       	mov    eax,0x4
c0025078:	57                   	push   edi
c0025079:	56                   	push   esi
c002507a:	53                   	push   ebx
c002507b:	83 ec 0c             	sub    esp,0xc
c002507e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025082:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025086:	8d 73 ff             	lea    esi,[ebx-0x1]
c0025089:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002508d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025091:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025097:	77 3d                	ja     c00250d6 <SATA::write(unsigned long long, int, void*)+0x64>
c0025099:	b8 06 00 00 00       	mov    eax,0x6
c002509e:	85 ed                	test   ebp,ebp
c00250a0:	74 34                	je     c00250d6 <SATA::write(unsigned long long, int, void*)+0x64>
c00250a2:	c1 e3 09             	shl    ebx,0x9
c00250a5:	01 eb                	add    ebx,ebp
c00250a7:	89 d6                	mov    esi,edx
c00250a9:	89 cf                	mov    edi,ecx
c00250ab:	83 c6 01             	add    esi,0x1
c00250ae:	83 d7 00             	adc    edi,0x0
c00250b1:	50                   	push   eax
c00250b2:	50                   	push   eax
c00250b3:	6a 01                	push   0x1
c00250b5:	55                   	push   ebp
c00250b6:	81 c5 00 02 00 00    	add    ebp,0x200
c00250bc:	6a 01                	push   0x1
c00250be:	51                   	push   ecx
c00250bf:	52                   	push   edx
c00250c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00250c4:	e8 f7 fc ff ff       	call   c0024dc0 <SATA::access(unsigned long long, int, void*, bool)>
c00250c9:	83 c4 20             	add    esp,0x20
c00250cc:	89 f2                	mov    edx,esi
c00250ce:	89 f9                	mov    ecx,edi
c00250d0:	39 dd                	cmp    ebp,ebx
c00250d2:	75 d3                	jne    c00250a7 <SATA::write(unsigned long long, int, void*)+0x35>
c00250d4:	31 c0                	xor    eax,eax
c00250d6:	83 c4 0c             	add    esp,0xc
c00250d9:	5b                   	pop    ebx
c00250da:	5e                   	pop    esi
c00250db:	5f                   	pop    edi
c00250dc:	5d                   	pop    ebp
c00250dd:	c3                   	ret    

c00250de <SATAPI::write(unsigned long long, int, void*)>:
c00250de:	b8 03 00 00 00       	mov    eax,0x3
c00250e3:	c3                   	ret    

c00250e4 <SATAPI::close(int, int, void*)>:
c00250e4:	83 ec 0c             	sub    esp,0xc
c00250e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00250f1:	85 c0                	test   eax,eax
c00250f3:	74 0c                	je     c0025101 <SATAPI::close(int, int, void*)+0x1d>
c00250f5:	83 ec 0c             	sub    esp,0xc
c00250f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00250fa:	50                   	push   eax
c00250fb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00250fe:	83 c4 10             	add    esp,0x10
c0025101:	31 c0                	xor    eax,eax
c0025103:	83 c4 0c             	add    esp,0xc
c0025106:	c3                   	ret    
c0025107:	90                   	nop

c0025108 <SATAPI::SATAPI()>:
c0025108:	83 ec 0c             	sub    esp,0xc
c002510b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002510f:	83 ec 04             	sub    esp,0x4
c0025112:	68 00 08 00 00       	push   0x800
c0025117:	68 d0 c8 02 c0       	push   0xc002c8d0
c002511c:	50                   	push   eax
c002511d:	e8 74 ef fe ff       	call   c0014096 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025122:	83 c4 10             	add    esp,0x10
c0025125:	ba 7c c9 02 c0       	mov    edx,0xc002c97c
c002512a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002512e:	89 10                	mov    DWORD PTR [eax],edx
c0025130:	90                   	nop
c0025131:	83 c4 0c             	add    esp,0xc
c0025134:	c3                   	ret    
c0025135:	90                   	nop

c0025136 <SATAPI::diskRemoved()>:
c0025136:	83 ec 18             	sub    esp,0x18
c0025139:	68 dc c8 02 c0       	push   0xc002c8dc
c002513e:	e8 e4 d6 fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0025143:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025147:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002514e:	83 c4 1c             	add    esp,0x1c
c0025151:	c3                   	ret    

c0025152 <SATAPI::diskInserted()>:
c0025152:	53                   	push   ebx
c0025153:	83 ec 14             	sub    esp,0x14
c0025156:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002515a:	68 f3 c8 02 c0       	push   0xc002c8f3
c002515f:	e8 c3 d6 fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0025164:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002516b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002516e:	e8 8b ef fe ff       	call   c00140fe <PhysicalDisk::startCache()>
c0025173:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025177:	83 c4 18             	add    esp,0x18
c002517a:	5b                   	pop    ebx
c002517b:	e9 06 12 ff ff       	jmp    c0016386 <createPartitionsForDisk(PhysicalDisk*)>

c0025180 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025180:	55                   	push   ebp
c0025181:	57                   	push   edi
c0025182:	56                   	push   esi
c0025183:	53                   	push   ebx
c0025184:	83 ec 34             	sub    esp,0x34
c0025187:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002518b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002518f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025193:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025197:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002519b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00251a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00251a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00251ab:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00251b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00251b5:	c1 e0 07             	shl    eax,0x7
c00251b8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00251bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00251c0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00251ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251ce:	8d 58 02             	lea    ebx,[eax+0x2]
c00251d1:	c1 e3 07             	shl    ebx,0x7
c00251d4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00251d8:	53                   	push   ebx
c00251d9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00251df:	e8 ee eb ff ff       	call   c0023dd2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00251e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00251e8:	83 c4 10             	add    esp,0x10
c00251eb:	b8 01 00 00 00       	mov    eax,0x1
c00251f0:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00251f5:	0f 84 85 01 00 00    	je     c0025380 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c00251fb:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025201:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025203:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025209:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002520f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025213:	c1 e1 05             	shl    ecx,0x5
c0025216:	01 c8                	add    eax,ecx
c0025218:	8b 08                	mov    ecx,DWORD PTR [eax]
c002521a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025220:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025226:	89 08                	mov    DWORD PTR [eax],ecx
c0025228:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002522e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025234:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002523a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002523d:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025240:	50                   	push   eax
c0025241:	68 90 00 00 00       	push   0x90
c0025246:	6a 00                	push   0x0
c0025248:	53                   	push   ebx
c0025249:	e8 02 b5 fd ff       	call   c0000750 <memset>
c002524e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025252:	b9 0c 00 00 00       	mov    ecx,0xc
c0025257:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025259:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c002525f:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025263:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025269:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002526d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025271:	48                   	dec    eax
c0025272:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025277:	89 c1                	mov    ecx,eax
c0025279:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002527f:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025284:	09 c8                	or     eax,ecx
c0025286:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002528c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002528f:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025296:	66 25 00 7f          	and    ax,0x7f00
c002529a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002529e:	66 0d 27 80          	or     ax,0x8027
c00252a2:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00252a6:	66 89 03             	mov    WORD PTR [ebx],ax
c00252a9:	89 d0                	mov    eax,edx
c00252ab:	c1 ea 18             	shr    edx,0x18
c00252ae:	c1 e8 10             	shr    eax,0x10
c00252b1:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00252b4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00252b7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00252bb:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00252be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00252c2:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00252c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00252c9:	83 c4 10             	add    esp,0x10
c00252cc:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00252d0:	31 c0                	xor    eax,eax
c00252d2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00252d6:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c00252dc:	80 e2 88             	and    dl,0x88
c00252df:	74 0a                	je     c00252eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00252e1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252e6:	74 0a                	je     c00252f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c00252e8:	40                   	inc    eax
c00252e9:	eb eb                	jmp    c00252d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c00252eb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252f0:	75 0f                	jne    c0025301 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c00252f2:	83 ec 0c             	sub    esp,0xc
c00252f5:	68 79 c8 02 c0       	push   0xc002c879
c00252fa:	e8 14 4d ff ff       	call   c001a013 <Krnl::panic(char const*)>
c00252ff:	eb 3f                	jmp    c0025340 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025301:	ba 01 00 00 00       	mov    edx,0x1
c0025306:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002530a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002530e:	d3 e2                	shl    edx,cl
c0025310:	c1 e0 07             	shl    eax,0x7
c0025313:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025319:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002531d:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025323:	85 ca                	test   edx,ecx
c0025325:	74 23                	je     c002534a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025327:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c002532d:	0f ba e1 1e          	bt     ecx,0x1e
c0025331:	73 ea                	jae    c002531d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025333:	83 ec 0c             	sub    esp,0xc
c0025336:	68 0b c9 02 c0       	push   0xc002c90b
c002533b:	e8 e7 d4 fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0025340:	83 c4 10             	add    esp,0x10
c0025343:	b8 01 00 00 00       	mov    eax,0x1
c0025348:	eb 36                	jmp    c0025380 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c002534a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025350:	0f ba e0 1e          	bt     eax,0x1e
c0025354:	73 0a                	jae    c0025360 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025356:	83 ec 0c             	sub    esp,0xc
c0025359:	68 1e c9 02 c0       	push   0xc002c91e
c002535e:	eb db                	jmp    c002533b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025360:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025365:	74 17                	je     c002537e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025367:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002536c:	74 10                	je     c002537e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c002536e:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025374:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025378:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002537c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002537e:	31 c0                	xor    eax,eax
c0025380:	83 c4 2c             	add    esp,0x2c
c0025383:	5b                   	pop    ebx
c0025384:	5e                   	pop    esi
c0025385:	5f                   	pop    edi
c0025386:	5d                   	pop    ebp
c0025387:	c3                   	ret    

c0025388 <SATAPI::eject()>:
c0025388:	57                   	push   edi
c0025389:	b9 03 00 00 00       	mov    ecx,0x3
c002538e:	53                   	push   ebx
c002538f:	83 ec 14             	sub    esp,0x14
c0025392:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025396:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002539a:	fc                   	cld    
c002539b:	31 c0                	xor    eax,eax
c002539d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002539f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00253a4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00253a9:	50                   	push   eax
c00253aa:	6a 00                	push   0x0
c00253ac:	6a 00                	push   0x0
c00253ae:	6a 00                	push   0x0
c00253b0:	6a 00                	push   0x0
c00253b2:	6a 02                	push   0x2
c00253b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00253b8:	50                   	push   eax
c00253b9:	53                   	push   ebx
c00253ba:	e8 c1 fd ff ff       	call   c0025180 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253bf:	83 c4 14             	add    esp,0x14
c00253c2:	53                   	push   ebx
c00253c3:	e8 6e fd ff ff       	call   c0025136 <SATAPI::diskRemoved()>
c00253c8:	83 c4 24             	add    esp,0x24
c00253cb:	31 c0                	xor    eax,eax
c00253cd:	5b                   	pop    ebx
c00253ce:	5f                   	pop    edi
c00253cf:	c3                   	ret    

c00253d0 <SATAPI::detectMedia()>:
c00253d0:	56                   	push   esi
c00253d1:	53                   	push   ebx
c00253d2:	83 ec 28             	sub    esp,0x28
c00253d5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253d9:	6a 0c                	push   0xc
c00253db:	6a 00                	push   0x0
c00253dd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00253e1:	56                   	push   esi
c00253e2:	e8 69 b3 fd ff       	call   c0000750 <memset>
c00253e7:	83 c4 0c             	add    esp,0xc
c00253ea:	6a 00                	push   0x0
c00253ec:	6a 00                	push   0x0
c00253ee:	6a 00                	push   0x0
c00253f0:	6a 00                	push   0x0
c00253f2:	6a 00                	push   0x0
c00253f4:	56                   	push   esi
c00253f5:	53                   	push   ebx
c00253f6:	e8 85 fd ff ff       	call   c0025180 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253fb:	83 c4 1c             	add    esp,0x1c
c00253fe:	6a 0c                	push   0xc
c0025400:	6a 00                	push   0x0
c0025402:	56                   	push   esi
c0025403:	e8 48 b3 fd ff       	call   c0000750 <memset>
c0025408:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002540d:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025412:	83 c4 0c             	add    esp,0xc
c0025415:	6a 01                	push   0x1
c0025417:	8d 44 24 16          	lea    eax,[esp+0x16]
c002541b:	50                   	push   eax
c002541c:	6a 00                	push   0x0
c002541e:	6a 00                	push   0x0
c0025420:	6a 12                	push   0x12
c0025422:	56                   	push   esi
c0025423:	53                   	push   ebx
c0025424:	e8 57 fd ff ff       	call   c0025180 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025429:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002542d:	83 c4 20             	add    esp,0x20
c0025430:	83 e0 7f             	and    eax,0x7f
c0025433:	3c 70                	cmp    al,0x70
c0025435:	74 15                	je     c002544c <SATAPI::detectMedia()+0x7c>
c0025437:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002543e:	75 0c                	jne    c002544c <SATAPI::detectMedia()+0x7c>
c0025440:	83 ec 0c             	sub    esp,0xc
c0025443:	53                   	push   ebx
c0025444:	e8 09 fd ff ff       	call   c0025152 <SATAPI::diskInserted()>
c0025449:	83 c4 10             	add    esp,0x10
c002544c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025450:	83 e0 0f             	and    eax,0xf
c0025453:	3c 02                	cmp    al,0x2
c0025455:	75 1b                	jne    c0025472 <SATAPI::detectMedia()+0xa2>
c0025457:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002545c:	75 2d                	jne    c002548b <SATAPI::detectMedia()+0xbb>
c002545e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025465:	74 24                	je     c002548b <SATAPI::detectMedia()+0xbb>
c0025467:	83 ec 0c             	sub    esp,0xc
c002546a:	53                   	push   ebx
c002546b:	e8 c6 fc ff ff       	call   c0025136 <SATAPI::diskRemoved()>
c0025470:	eb 16                	jmp    c0025488 <SATAPI::detectMedia()+0xb8>
c0025472:	84 c0                	test   al,al
c0025474:	75 15                	jne    c002548b <SATAPI::detectMedia()+0xbb>
c0025476:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002547d:	75 0c                	jne    c002548b <SATAPI::detectMedia()+0xbb>
c002547f:	83 ec 0c             	sub    esp,0xc
c0025482:	53                   	push   ebx
c0025483:	e8 ca fc ff ff       	call   c0025152 <SATAPI::diskInserted()>
c0025488:	83 c4 10             	add    esp,0x10
c002548b:	83 c4 24             	add    esp,0x24
c002548e:	5b                   	pop    ebx
c002548f:	5e                   	pop    esi
c0025490:	c3                   	ret    
c0025491:	90                   	nop

c0025492 <SATAPI::open(int, int, void*)>:
c0025492:	56                   	push   esi
c0025493:	53                   	push   ebx
c0025494:	50                   	push   eax
c0025495:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025499:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002549d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00254a7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00254ad:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00254b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254bb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00254c5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00254cb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00254d2:	e8 f4 a6 fe ff       	call   c000fbcb <Phys::allocatePage()>
c00254d7:	89 c6                	mov    esi,eax
c00254d9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00254df:	81 c6 00 10 00 00    	add    esi,0x1000
c00254e5:	e8 e1 a6 fe ff       	call   c000fbcb <Phys::allocatePage()>
c00254ea:	39 c6                	cmp    esi,eax
c00254ec:	74 10                	je     c00254fe <SATAPI::open(int, int, void*)+0x6c>
c00254ee:	83 ec 0c             	sub    esp,0xc
c00254f1:	68 33 c9 02 c0       	push   0xc002c933
c00254f6:	e8 18 4b ff ff       	call   c001a013 <Krnl::panic(char const*)>
c00254fb:	83 c4 10             	add    esp,0x10
c00254fe:	83 ec 0c             	sub    esp,0xc
c0025501:	6a 02                	push   0x2
c0025503:	e8 4d bf fe ff       	call   c0011455 <Virt::allocateKernelVirtualPages(int)>
c0025508:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002550e:	6a 03                	push   0x3
c0025510:	50                   	push   eax
c0025511:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025517:	ff 35 90 e0 02 c0    	push   DWORD PTR ds:0xc002e090
c002551d:	e8 da c5 fe ff       	call   c0011afc <VAS::mapPage(unsigned long, unsigned long, int)>
c0025522:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025529:	83 c4 14             	add    esp,0x14
c002552c:	53                   	push   ebx
c002552d:	e8 9e fe ff ff       	call   c00253d0 <SATAPI::detectMedia()>
c0025532:	83 c4 14             	add    esp,0x14
c0025535:	31 c0                	xor    eax,eax
c0025537:	5b                   	pop    ebx
c0025538:	5e                   	pop    esi
c0025539:	c3                   	ret    

c002553a <SATAPI::read(unsigned long long, int, void*)>:
c002553a:	55                   	push   ebp
c002553b:	57                   	push   edi
c002553c:	56                   	push   esi
c002553d:	53                   	push   ebx
c002553e:	83 ec 1c             	sub    esp,0x1c
c0025541:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025545:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025549:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002554d:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025554:	74 19                	je     c002556f <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025556:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002555b:	7e 2e                	jle    c002558b <SATAPI::read(unsigned long long, int, void*)+0x51>
c002555d:	83 ec 0c             	sub    esp,0xc
c0025560:	68 49 c9 02 c0       	push   0xc002c949
c0025565:	e8 a9 4a ff ff       	call   c001a013 <Krnl::panic(char const*)>
c002556a:	83 c4 10             	add    esp,0x10
c002556d:	eb 1c                	jmp    c002558b <SATAPI::read(unsigned long long, int, void*)+0x51>
c002556f:	83 ec 0c             	sub    esp,0xc
c0025572:	55                   	push   ebp
c0025573:	e8 58 fe ff ff       	call   c00253d0 <SATAPI::detectMedia()>
c0025578:	83 c4 10             	add    esp,0x10
c002557b:	b8 02 00 00 00       	mov    eax,0x2
c0025580:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025587:	75 cd                	jne    c0025556 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025589:	eb 49                	jmp    c00255d4 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002558b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002558f:	b9 03 00 00 00       	mov    ecx,0x3
c0025594:	fc                   	cld    
c0025595:	31 c0                	xor    eax,eax
c0025597:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025599:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002559e:	89 d8                	mov    eax,ebx
c00255a0:	86 e0                	xchg   al,ah
c00255a2:	c1 c0 10             	rol    eax,0x10
c00255a5:	86 e0                	xchg   al,ah
c00255a7:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00255ab:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00255af:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00255b3:	50                   	push   eax
c00255b4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00255b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00255bc:	56                   	push   esi
c00255bd:	53                   	push   ebx
c00255be:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00255c2:	c1 e0 0b             	shl    eax,0xb
c00255c5:	50                   	push   eax
c00255c6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00255ca:	50                   	push   eax
c00255cb:	55                   	push   ebp
c00255cc:	e8 af fb ff ff       	call   c0025180 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00255d1:	83 c4 20             	add    esp,0x20
c00255d4:	83 c4 1c             	add    esp,0x1c
c00255d7:	5b                   	pop    ebx
c00255d8:	5e                   	pop    esi
c00255d9:	5f                   	pop    edi
c00255da:	5d                   	pop    ebp
c00255db:	c3                   	ret    

c00255dc <AVX::open(int, int, void*)>:
c00255dc:	83 ec 0c             	sub    esp,0xc
c00255df:	e8 44 11 00 00       	call   c0026728 <avxInit>
c00255e4:	b8 00 00 00 00       	mov    eax,0x0
c00255e9:	83 c4 0c             	add    esp,0xc
c00255ec:	c3                   	ret    
c00255ed:	90                   	nop

c00255ee <AVX::close(int, int, void*)>:
c00255ee:	83 ec 0c             	sub    esp,0xc
c00255f1:	e8 33 11 00 00       	call   c0026729 <avxClose>
c00255f6:	b8 00 00 00 00       	mov    eax,0x0
c00255fb:	83 c4 0c             	add    esp,0xc
c00255fe:	c3                   	ret    
c00255ff:	90                   	nop

c0025600 <AVX::available()>:
c0025600:	83 ec 0c             	sub    esp,0xc
c0025603:	e8 18 11 00 00       	call   c0026720 <avxDetect>
c0025608:	85 c0                	test   eax,eax
c002560a:	0f 95 c0             	setne  al
c002560d:	83 c4 0c             	add    esp,0xc
c0025610:	c3                   	ret    
c0025611:	90                   	nop

c0025612 <AVX::save(void*)>:
c0025612:	83 ec 0c             	sub    esp,0xc
c0025615:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025619:	83 ec 0c             	sub    esp,0xc
c002561c:	50                   	push   eax
c002561d:	e8 04 11 00 00       	call   c0026726 <avxSave>
c0025622:	83 c4 10             	add    esp,0x10
c0025625:	90                   	nop
c0025626:	83 c4 0c             	add    esp,0xc
c0025629:	c3                   	ret    

c002562a <AVX::load(void*)>:
c002562a:	83 ec 0c             	sub    esp,0xc
c002562d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025631:	83 ec 0c             	sub    esp,0xc
c0025634:	50                   	push   eax
c0025635:	e8 ed 10 00 00       	call   c0026727 <avxLoad>
c002563a:	83 c4 10             	add    esp,0x10
c002563d:	90                   	nop
c002563e:	83 c4 0c             	add    esp,0xc
c0025641:	c3                   	ret    

c0025642 <AVX::AVX()>:
c0025642:	83 ec 0c             	sub    esp,0xc
c0025645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025649:	83 ec 08             	sub    esp,0x8
c002564c:	68 ac c9 02 c0       	push   0xc002c9ac
c0025651:	50                   	push   eax
c0025652:	e8 1d eb fe ff       	call   c0014174 <FPU::FPU(char const*)>
c0025657:	83 c4 10             	add    esp,0x10
c002565a:	ba bc c9 02 c0       	mov    edx,0xc002c9bc
c002565f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025663:	89 10                	mov    DWORD PTR [eax],edx
c0025665:	90                   	nop
c0025666:	83 c4 0c             	add    esp,0xc
c0025669:	c3                   	ret    

c002566a <MMX::available()>:
c002566a:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c002566f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025675:	83 e0 20             	and    eax,0x20
c0025678:	84 c0                	test   al,al
c002567a:	0f 95 c0             	setne  al
c002567d:	c3                   	ret    

c002567e <MMX::open(int, int, void*)>:
c002567e:	83 ec 0c             	sub    esp,0xc
c0025681:	e8 2c 11 00 00       	call   c00267b2 <x87Init>
c0025686:	b8 00 00 00 00       	mov    eax,0x0
c002568b:	83 c4 0c             	add    esp,0xc
c002568e:	c3                   	ret    
c002568f:	90                   	nop

c0025690 <MMX::close(int, int, void*)>:
c0025690:	83 ec 0c             	sub    esp,0xc
c0025693:	e8 34 11 00 00       	call   c00267cc <x87Close>
c0025698:	b8 00 00 00 00       	mov    eax,0x0
c002569d:	83 c4 0c             	add    esp,0xc
c00256a0:	c3                   	ret    
c00256a1:	90                   	nop

c00256a2 <MMX::save(void*)>:
c00256a2:	83 ec 0c             	sub    esp,0xc
c00256a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256a9:	83 ec 0c             	sub    esp,0xc
c00256ac:	50                   	push   eax
c00256ad:	e8 ef 10 00 00       	call   c00267a1 <x87Save>
c00256b2:	83 c4 10             	add    esp,0x10
c00256b5:	90                   	nop
c00256b6:	83 c4 0c             	add    esp,0xc
c00256b9:	c3                   	ret    

c00256ba <MMX::load(void*)>:
c00256ba:	83 ec 0c             	sub    esp,0xc
c00256bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256c1:	83 ec 0c             	sub    esp,0xc
c00256c4:	50                   	push   eax
c00256c5:	e8 e0 10 00 00       	call   c00267aa <x87Load>
c00256ca:	83 c4 10             	add    esp,0x10
c00256cd:	90                   	nop
c00256ce:	83 c4 0c             	add    esp,0xc
c00256d1:	c3                   	ret    

c00256d2 <MMX::MMX()>:
c00256d2:	83 ec 0c             	sub    esp,0xc
c00256d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256d9:	83 ec 08             	sub    esp,0x8
c00256dc:	68 ec c9 02 c0       	push   0xc002c9ec
c00256e1:	50                   	push   eax
c00256e2:	e8 8d ea fe ff       	call   c0014174 <FPU::FPU(char const*)>
c00256e7:	83 c4 10             	add    esp,0x10
c00256ea:	ba fc c9 02 c0       	mov    edx,0xc002c9fc
c00256ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256f3:	89 10                	mov    DWORD PTR [eax],edx
c00256f5:	90                   	nop
c00256f6:	83 c4 0c             	add    esp,0xc
c00256f9:	c3                   	ret    

c00256fa <SSE::open(int, int, void*)>:
c00256fa:	83 ec 0c             	sub    esp,0xc
c00256fd:	e8 62 10 00 00       	call   c0026764 <sseInit>
c0025702:	b8 00 00 00 00       	mov    eax,0x0
c0025707:	83 c4 0c             	add    esp,0xc
c002570a:	c3                   	ret    
c002570b:	90                   	nop

c002570c <SSE::close(int, int, void*)>:
c002570c:	83 ec 0c             	sub    esp,0xc
c002570f:	e8 60 10 00 00       	call   c0026774 <sseClose>
c0025714:	b8 00 00 00 00       	mov    eax,0x0
c0025719:	83 c4 0c             	add    esp,0xc
c002571c:	c3                   	ret    
c002571d:	90                   	nop

c002571e <SSE::available()>:
c002571e:	83 ec 1c             	sub    esp,0x1c
c0025721:	e8 1a 10 00 00       	call   c0026740 <absolutelyNoChanceInHell>
c0025726:	85 c0                	test   eax,eax
c0025728:	0f 95 c0             	setne  al
c002572b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002572f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025733:	83 c4 1c             	add    esp,0x1c
c0025736:	c3                   	ret    
c0025737:	90                   	nop

c0025738 <SSE::save(void*)>:
c0025738:	83 ec 0c             	sub    esp,0xc
c002573b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002573f:	83 ec 0c             	sub    esp,0xc
c0025742:	50                   	push   eax
c0025743:	e8 10 10 00 00       	call   c0026758 <sseSave>
c0025748:	83 c4 10             	add    esp,0x10
c002574b:	90                   	nop
c002574c:	83 c4 0c             	add    esp,0xc
c002574f:	c3                   	ret    

c0025750 <SSE::load(void*)>:
c0025750:	83 ec 0c             	sub    esp,0xc
c0025753:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025757:	83 ec 0c             	sub    esp,0xc
c002575a:	50                   	push   eax
c002575b:	e8 fe 0f 00 00       	call   c002675e <sseLoad>
c0025760:	83 c4 10             	add    esp,0x10
c0025763:	90                   	nop
c0025764:	83 c4 0c             	add    esp,0xc
c0025767:	c3                   	ret    

c0025768 <SSE::SSE()>:
c0025768:	83 ec 0c             	sub    esp,0xc
c002576b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002576f:	83 ec 08             	sub    esp,0x8
c0025772:	68 2c ca 02 c0       	push   0xc002ca2c
c0025777:	50                   	push   eax
c0025778:	e8 f7 e9 fe ff       	call   c0014174 <FPU::FPU(char const*)>
c002577d:	83 c4 10             	add    esp,0x10
c0025780:	ba 3c ca 02 c0       	mov    edx,0xc002ca3c
c0025785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025789:	89 10                	mov    DWORD PTR [eax],edx
c002578b:	90                   	nop
c002578c:	83 c4 0c             	add    esp,0xc
c002578f:	c3                   	ret    

c0025790 <x87::open(int, int, void*)>:
c0025790:	83 ec 0c             	sub    esp,0xc
c0025793:	e8 1a 10 00 00       	call   c00267b2 <x87Init>
c0025798:	b8 00 00 00 00       	mov    eax,0x0
c002579d:	83 c4 0c             	add    esp,0xc
c00257a0:	c3                   	ret    
c00257a1:	90                   	nop

c00257a2 <x87::close(int, int, void*)>:
c00257a2:	83 ec 0c             	sub    esp,0xc
c00257a5:	e8 22 10 00 00       	call   c00267cc <x87Close>
c00257aa:	b8 00 00 00 00       	mov    eax,0x0
c00257af:	83 c4 0c             	add    esp,0xc
c00257b2:	c3                   	ret    
c00257b3:	90                   	nop

c00257b4 <x87::available()>:
c00257b4:	83 ec 0c             	sub    esp,0xc
c00257b7:	e8 ca 0f 00 00       	call   c0026786 <x87Detect>
c00257bc:	85 c0                	test   eax,eax
c00257be:	0f 95 c0             	setne  al
c00257c1:	83 c4 0c             	add    esp,0xc
c00257c4:	c3                   	ret    
c00257c5:	90                   	nop

c00257c6 <x87::save(void*)>:
c00257c6:	83 ec 0c             	sub    esp,0xc
c00257c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257cd:	83 ec 0c             	sub    esp,0xc
c00257d0:	50                   	push   eax
c00257d1:	e8 cb 0f 00 00       	call   c00267a1 <x87Save>
c00257d6:	83 c4 10             	add    esp,0x10
c00257d9:	90                   	nop
c00257da:	83 c4 0c             	add    esp,0xc
c00257dd:	c3                   	ret    

c00257de <x87::load(void*)>:
c00257de:	83 ec 0c             	sub    esp,0xc
c00257e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257e5:	83 ec 0c             	sub    esp,0xc
c00257e8:	50                   	push   eax
c00257e9:	e8 bc 0f 00 00       	call   c00267aa <x87Load>
c00257ee:	83 c4 10             	add    esp,0x10
c00257f1:	90                   	nop
c00257f2:	83 c4 0c             	add    esp,0xc
c00257f5:	c3                   	ret    

c00257f6 <x87::x87()>:
c00257f6:	83 ec 0c             	sub    esp,0xc
c00257f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257fd:	83 ec 08             	sub    esp,0x8
c0025800:	68 6c ca 02 c0       	push   0xc002ca6c
c0025805:	50                   	push   eax
c0025806:	e8 69 e9 fe ff       	call   c0014174 <FPU::FPU(char const*)>
c002580b:	83 c4 10             	add    esp,0x10
c002580e:	ba 7c ca 02 c0       	mov    edx,0xc002ca7c
c0025813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025817:	89 10                	mov    DWORD PTR [eax],edx
c0025819:	90                   	nop
c002581a:	83 c4 0c             	add    esp,0xc
c002581d:	c3                   	ret    

c002581e <APIC::disable()>:
c002581e:	90                   	nop
c002581f:	c3                   	ret    

c0025820 <APIC::close(int, int, void*)>:
c0025820:	55                   	push   ebp
c0025821:	89 e5                	mov    ebp,esp
c0025823:	83 ec 08             	sub    esp,0x8
c0025826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025829:	8b 00                	mov    eax,DWORD PTR [eax]
c002582b:	83 c0 3c             	add    eax,0x3c
c002582e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025830:	83 ec 0c             	sub    esp,0xc
c0025833:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025836:	ff d0                	call   eax
c0025838:	83 c4 10             	add    esp,0x10
c002583b:	b8 00 00 00 00       	mov    eax,0x0
c0025840:	c9                   	leave  
c0025841:	c3                   	ret    

c0025842 <IOAPIC::close(int, int, void*)>:
c0025842:	b8 00 00 00 00       	mov    eax,0x0
c0025847:	c3                   	ret    

c0025848 <APIC::io_wait()>:
c0025848:	eb 00                	jmp    c002584a <APIC::io_wait()+0x2>
c002584a:	eb 00                	jmp    c002584c <APIC::io_wait()+0x4>
c002584c:	90                   	nop
c002584d:	c3                   	ret    

c002584e <APIC::getBase()>:
c002584e:	55                   	push   ebp
c002584f:	89 e5                	mov    ebp,esp
c0025851:	83 ec 18             	sub    esp,0x18
c0025854:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0025859:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002585f:	83 e0 08             	and    eax,0x8
c0025862:	84 c0                	test   al,al
c0025864:	75 07                	jne    c002586d <APIC::getBase()+0x1f>
c0025866:	b8 00 00 00 00       	mov    eax,0x0
c002586b:	eb 21                	jmp    c002588e <APIC::getBase()+0x40>
c002586d:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0025872:	83 ec 08             	sub    esp,0x8
c0025875:	6a 1b                	push   0x1b
c0025877:	50                   	push   eax
c0025878:	e8 f9 94 fe ff       	call   c000ed76 <Computer::rdmsr(unsigned int)>
c002587d:	83 c4 10             	add    esp,0x10
c0025880:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025883:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025886:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025889:	25 00 f0 ff ff       	and    eax,0xfffff000
c002588e:	c9                   	leave  
c002588f:	c3                   	ret    

c0025890 <APIC::eoi(unsigned char)>:
c0025890:	55                   	push   ebp
c0025891:	89 e5                	mov    ebp,esp
c0025893:	83 ec 28             	sub    esp,0x28
c0025896:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025899:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002589c:	83 ec 0c             	sub    esp,0xc
c002589f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258a2:	e8 a7 ff ff ff       	call   c002584e <APIC::getBase()>
c00258a7:	83 c4 10             	add    esp,0x10
c00258aa:	05 b0 00 00 00       	add    eax,0xb0
c00258af:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00258b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00258b5:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00258bb:	90                   	nop
c00258bc:	c9                   	leave  
c00258bd:	c3                   	ret    

c00258be <APIC::open(int, int, void*)>:
c00258be:	55                   	push   ebp
c00258bf:	89 e5                	mov    ebp,esp
c00258c1:	57                   	push   edi
c00258c2:	56                   	push   esi
c00258c3:	53                   	push   ebx
c00258c4:	83 ec 2c             	sub    esp,0x2c
c00258c7:	83 ec 0c             	sub    esp,0xc
c00258ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258cd:	e8 7c ff ff ff       	call   c002584e <APIC::getBase()>
c00258d2:	83 c4 10             	add    esp,0x10
c00258d5:	89 c2                	mov    edx,eax
c00258d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258da:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258e0:	0f b6 f8             	movzx  edi,al
c00258e3:	89 d0                	mov    eax,edx
c00258e5:	ba 00 00 00 00       	mov    edx,0x0
c00258ea:	89 c1                	mov    ecx,eax
c00258ec:	80 e5 ff             	and    ch,0xff
c00258ef:	89 cb                	mov    ebx,ecx
c00258f1:	0f b6 f2             	movzx  esi,dl
c00258f4:	89 d8                	mov    eax,ebx
c00258f6:	89 f2                	mov    edx,esi
c00258f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258fb:	8d 5f 08             	lea    ebx,[edi+0x8]
c00258fe:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025902:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025906:	83 e0 00             	and    eax,0x0
c0025909:	09 d0                	or     eax,edx
c002590b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002590f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025912:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025918:	8d 50 01             	lea    edx,[eax+0x1]
c002591b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002591e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025924:	0f b6 d0             	movzx  edx,al
c0025927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002592a:	83 c2 08             	add    edx,0x8
c002592d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025931:	0f b6 c9             	movzx  ecx,cl
c0025934:	81 c9 00 00 01 00    	or     ecx,0x10000
c002593a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002593e:	83 ec 0c             	sub    esp,0xc
c0025941:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025944:	e8 05 ff ff ff       	call   c002584e <APIC::getBase()>
c0025949:	83 c4 10             	add    esp,0x10
c002594c:	05 f0 00 00 00       	add    eax,0xf0
c0025951:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025954:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025957:	8b 00                	mov    eax,DWORD PTR [eax]
c0025959:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002595c:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025963:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002596a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002596d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025970:	89 10                	mov    DWORD PTR [eax],edx
c0025972:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025979:	a1 d0 e7 02 c0       	mov    eax,ds:0xc002e7d0
c002597e:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025981:	7d 7c                	jge    c00259ff <APIC::open(int, int, void*)+0x141>
c0025983:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025986:	8b 04 85 e0 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1820]
c002598d:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025990:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025993:	8b 04 85 e0 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1820]
c002599a:	c1 e8 08             	shr    eax,0x8
c002599d:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00259a1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00259a4:	8b 04 85 e0 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1820]
c00259ab:	c1 e8 18             	shr    eax,0x18
c00259ae:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00259b1:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00259b5:	75 40                	jne    c00259f7 <APIC::open(int, int, void*)+0x139>
c00259b7:	83 ec 0c             	sub    esp,0xc
c00259ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259bd:	e8 8c fe ff ff       	call   c002584e <APIC::getBase()>
c00259c2:	83 c4 10             	add    esp,0x10
c00259c5:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00259c9:	75 07                	jne    c00259d2 <APIC::open(int, int, void*)+0x114>
c00259cb:	ba 60 03 00 00       	mov    edx,0x360
c00259d0:	eb 05                	jmp    c00259d7 <APIC::open(int, int, void*)+0x119>
c00259d2:	ba 50 03 00 00       	mov    edx,0x350
c00259d7:	01 d0                	add    eax,edx
c00259d9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00259dc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259df:	8b 00                	mov    eax,DWORD PTR [eax]
c00259e1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00259e4:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00259eb:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00259ef:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259f2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00259f5:	89 10                	mov    DWORD PTR [eax],edx
c00259f7:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00259fa:	e9 7a ff ff ff       	jmp    c0025979 <APIC::open(int, int, void*)+0xbb>
c00259ff:	b8 00 00 00 00       	mov    eax,0x0
c0025a04:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a07:	5b                   	pop    ebx
c0025a08:	5e                   	pop    esi
c0025a09:	5f                   	pop    edi
c0025a0a:	5d                   	pop    ebp
c0025a0b:	c3                   	ret    

c0025a0c <IOAPIC::IOAPIC()>:
c0025a0c:	83 ec 0c             	sub    esp,0xc
c0025a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a13:	83 ec 08             	sub    esp,0x8
c0025a16:	68 ac ca 02 c0       	push   0xc002caac
c0025a1b:	50                   	push   eax
c0025a1c:	e8 43 e4 fe ff       	call   c0013e64 <Device::Device(char const*)>
c0025a21:	83 c4 10             	add    esp,0x10
c0025a24:	ba d4 cb 02 c0       	mov    edx,0xc002cbd4
c0025a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a2d:	89 10                	mov    DWORD PTR [eax],edx
c0025a2f:	90                   	nop
c0025a30:	83 c4 0c             	add    esp,0xc
c0025a33:	c3                   	ret    

c0025a34 <APIC::APIC()>:
c0025a34:	53                   	push   ebx
c0025a35:	83 ec 18             	sub    esp,0x18
c0025a38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a3c:	83 ec 08             	sub    esp,0x8
c0025a3f:	68 b4 ca 02 c0       	push   0xc002cab4
c0025a44:	50                   	push   eax
c0025a45:	e8 84 eb fe ff       	call   c00145ce <InterruptController::InterruptController(char const*)>
c0025a4a:	83 c4 10             	add    esp,0x10
c0025a4d:	ba 8c cb 02 c0       	mov    edx,0xc002cb8c
c0025a52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a56:	89 10                	mov    DWORD PTR [eax],edx
c0025a58:	a0 a0 02 03 c0       	mov    al,ds:0xc00302a0
c0025a5d:	83 f0 01             	xor    eax,0x1
c0025a60:	84 c0                	test   al,al
c0025a62:	0f 84 a1 00 00 00    	je     c0025b09 <APIC::APIC()+0xd5>
c0025a68:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025a6d:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c0025a72:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025a76:	0f 83 86 00 00 00    	jae    c0025b02 <APIC::APIC()+0xce>
c0025a7c:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025a84:	83 ec 0c             	sub    esp,0xc
c0025a87:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a8b:	e8 3f 9d fe ff       	call   c000f7cf <malloc>
c0025a90:	83 c4 10             	add    esp,0x10
c0025a93:	89 c3                	mov    ebx,eax
c0025a95:	83 ec 0c             	sub    esp,0xc
c0025a98:	53                   	push   ebx
c0025a99:	e8 6e ff ff ff       	call   c0025a0c <IOAPIC::IOAPIC()>
c0025a9e:	83 c4 10             	add    esp,0x10
c0025aa1:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025aa5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025aaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025aae:	89 14 85 80 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfd80],edx
c0025ab5:	a1 60 02 03 c0       	mov    eax,ds:0xc0030260
c0025aba:	40                   	inc    eax
c0025abb:	a3 60 02 03 c0       	mov    ds:0xc0030260,eax
c0025ac0:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0025ac5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025acb:	83 ec 08             	sub    esp,0x8
c0025ace:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025ad2:	50                   	push   eax
c0025ad3:	e8 88 e1 fe ff       	call   c0013c60 <Device::addChild(Device*)>
c0025ad8:	83 c4 10             	add    esp,0x10
c0025adb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025adf:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ae1:	83 c0 08             	add    eax,0x8
c0025ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ae6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025aeb:	6a 00                	push   0x0
c0025aed:	6a 00                	push   0x0
c0025aef:	52                   	push   edx
c0025af0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025af4:	ff d0                	call   eax
c0025af6:	83 c4 10             	add    esp,0x10
c0025af9:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025afd:	e9 6b ff ff ff       	jmp    c0025a6d <APIC::APIC()+0x39>
c0025b02:	c6 05 a0 02 03 c0 01 	mov    BYTE PTR ds:0xc00302a0,0x1
c0025b09:	90                   	nop
c0025b0a:	83 c4 18             	add    esp,0x18
c0025b0d:	5b                   	pop    ebx
c0025b0e:	c3                   	ret    
c0025b0f:	90                   	nop

c0025b10 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025b10:	55                   	push   ebp
c0025b11:	89 e5                	mov    ebp,esp
c0025b13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b1c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025b1f:	72 1d                	jb     c0025b3e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025b21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b24:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025b2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b2d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025b33:	01 d0                	add    eax,edx
c0025b35:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025b38:	73 04                	jae    c0025b3e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025b3a:	b0 01                	mov    al,0x1
c0025b3c:	eb 02                	jmp    c0025b40 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025b3e:	b0 00                	mov    al,0x0
c0025b40:	5d                   	pop    ebp
c0025b41:	c3                   	ret    

c0025b42 <IOAPIC::read(int)>:
c0025b42:	55                   	push   ebp
c0025b43:	89 e5                	mov    ebp,esp
c0025b45:	83 ec 10             	sub    esp,0x10
c0025b48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b4b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b51:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b57:	0f b6 d0             	movzx  edx,al
c0025b5a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b5d:	89 10                	mov    DWORD PTR [eax],edx
c0025b5f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b62:	83 c0 10             	add    eax,0x10
c0025b65:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b67:	c9                   	leave  
c0025b68:	c3                   	ret    
c0025b69:	90                   	nop

c0025b6a <IOAPIC::open(int, int, void*)>:
c0025b6a:	55                   	push   ebp
c0025b6b:	89 e5                	mov    ebp,esp
c0025b6d:	57                   	push   edi
c0025b6e:	56                   	push   esi
c0025b6f:	53                   	push   ebx
c0025b70:	83 ec 0c             	sub    esp,0xc
c0025b73:	83 ec 0c             	sub    esp,0xc
c0025b76:	68 df ca 02 c0       	push   0xc002cadf
c0025b7b:	e8 a7 cc fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0025b80:	83 c4 10             	add    esp,0x10
c0025b83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b86:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b89:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b92:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b98:	8b 14 85 c0 e8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1740]
c0025b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ba2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025ba8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025bb1:	8b 14 85 40 e9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd16c0]
c0025bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bbb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bc4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025bca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bcd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bd3:	0f b6 f8             	movzx  edi,al
c0025bd6:	89 d0                	mov    eax,edx
c0025bd8:	ba 00 00 00 00       	mov    edx,0x0
c0025bdd:	89 c1                	mov    ecx,eax
c0025bdf:	80 e5 ff             	and    ch,0xff
c0025be2:	89 cb                	mov    ebx,ecx
c0025be4:	0f b6 f2             	movzx  esi,dl
c0025be7:	89 d8                	mov    eax,ebx
c0025be9:	89 f2                	mov    edx,esi
c0025beb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bee:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025bf1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025bf5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025bf9:	83 e0 00             	and    eax,0x0
c0025bfc:	09 d0                	or     eax,edx
c0025bfe:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c05:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c0b:	8d 50 01             	lea    edx,[eax+0x1]
c0025c0e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025c11:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025c17:	0f b6 d0             	movzx  edx,al
c0025c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c1d:	83 c2 08             	add    edx,0x8
c0025c20:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025c24:	0f b6 c9             	movzx  ecx,cl
c0025c27:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025c2d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025c31:	83 ec 08             	sub    esp,0x8
c0025c34:	6a 01                	push   0x1
c0025c36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c39:	e8 04 ff ff ff       	call   c0025b42 <IOAPIC::read(int)>
c0025c3e:	83 c4 10             	add    esp,0x10
c0025c41:	c1 f8 10             	sar    eax,0x10
c0025c44:	0f b6 c0             	movzx  eax,al
c0025c47:	8d 50 01             	lea    edx,[eax+0x1]
c0025c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c4d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025c53:	b8 00 00 00 00       	mov    eax,0x0
c0025c58:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c5b:	5b                   	pop    ebx
c0025c5c:	5e                   	pop    esi
c0025c5d:	5f                   	pop    edi
c0025c5e:	5d                   	pop    ebp
c0025c5f:	c3                   	ret    

c0025c60 <IOAPIC::write(int, int)>:
c0025c60:	55                   	push   ebp
c0025c61:	89 e5                	mov    ebp,esp
c0025c63:	83 ec 10             	sub    esp,0x10
c0025c66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c69:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025c6f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025c72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c75:	0f b6 d0             	movzx  edx,al
c0025c78:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c7b:	89 10                	mov    DWORD PTR [eax],edx
c0025c7d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c80:	8d 50 10             	lea    edx,[eax+0x10]
c0025c83:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c86:	89 02                	mov    DWORD PTR [edx],eax
c0025c88:	90                   	nop
c0025c89:	c9                   	leave  
c0025c8a:	c3                   	ret    
c0025c8b:	90                   	nop

c0025c8c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025c8c:	55                   	push   ebp
c0025c8d:	89 e5                	mov    ebp,esp
c0025c8f:	53                   	push   ebx
c0025c90:	83 ec 2c             	sub    esp,0x2c
c0025c93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c96:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025c99:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025c9c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025c9f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025ca2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025ca5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025ca8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025cab:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025cae:	88 d8                	mov    al,bl
c0025cb0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025cb3:	88 c8                	mov    al,cl
c0025cb5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025cb8:	88 d0                	mov    al,dl
c0025cba:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025cbd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025cc1:	83 c0 08             	add    eax,0x8
c0025cc4:	01 c0                	add    eax,eax
c0025cc6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025cc9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025ccd:	83 c0 08             	add    eax,0x8
c0025cd0:	01 c0                	add    eax,eax
c0025cd2:	40                   	inc    eax
c0025cd3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025cd6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025cd9:	50                   	push   eax
c0025cda:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cdd:	e8 60 fe ff ff       	call   c0025b42 <IOAPIC::read(int)>
c0025ce2:	83 c4 08             	add    esp,0x8
c0025ce5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025ce8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025cef:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025cf2:	c1 e0 18             	shl    eax,0x18
c0025cf5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025cf8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025cfb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025cfe:	52                   	push   edx
c0025cff:	50                   	push   eax
c0025d00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d03:	e8 58 ff ff ff       	call   c0025c60 <IOAPIC::write(int, int)>
c0025d08:	83 c4 0c             	add    esp,0xc
c0025d0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d0e:	50                   	push   eax
c0025d0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d12:	e8 2b fe ff ff       	call   c0025b42 <IOAPIC::read(int)>
c0025d17:	83 c4 08             	add    esp,0x8
c0025d1a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025d1d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025d24:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025d2b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025d32:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d36:	74 09                	je     c0025d41 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025d38:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025d3f:	eb 07                	jmp    c0025d48 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025d41:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025d48:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025d4c:	74 09                	je     c0025d57 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025d4e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025d55:	eb 07                	jmp    c0025d5e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025d57:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025d5e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025d65:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025d69:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025d6c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025d6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d72:	52                   	push   edx
c0025d73:	50                   	push   eax
c0025d74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d77:	e8 e4 fe ff ff       	call   c0025c60 <IOAPIC::write(int, int)>
c0025d7c:	83 c4 0c             	add    esp,0xc
c0025d7f:	90                   	nop
c0025d80:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025d83:	c9                   	leave  
c0025d84:	c3                   	ret    
c0025d85:	90                   	nop

c0025d86 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025d86:	55                   	push   ebp
c0025d87:	89 e5                	mov    ebp,esp
c0025d89:	57                   	push   edi
c0025d8a:	56                   	push   esi
c0025d8b:	53                   	push   ebx
c0025d8c:	83 ec 2c             	sub    esp,0x2c
c0025d8f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d92:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d95:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d99:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025d9d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025da1:	74 5a                	je     c0025dfd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025da3:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025da7:	7f 44                	jg     c0025ded <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025da9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dac:	05 80 d1 02 c0       	add    eax,0xc002d180
c0025db1:	8a 00                	mov    al,BYTE PTR [eax]
c0025db3:	0f b6 c0             	movzx  eax,al
c0025db6:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025db9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dbc:	66 8b 84 00 60 e8 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd17a0]
c0025dc4:	0f b7 c0             	movzx  eax,ax
c0025dc7:	83 e0 02             	and    eax,0x2
c0025dca:	85 c0                	test   eax,eax
c0025dcc:	74 04                	je     c0025dd2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025dce:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025dd2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dd5:	66 8b 84 00 60 e8 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd17a0]
c0025ddd:	0f b7 c0             	movzx  eax,ax
c0025de0:	83 e0 08             	and    eax,0x8
c0025de3:	85 c0                	test   eax,eax
c0025de5:	74 16                	je     c0025dfd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025de7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025deb:	eb 10                	jmp    c0025dfd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ded:	83 ec 0c             	sub    esp,0xc
c0025df0:	68 f0 ca 02 c0       	push   0xc002caf0
c0025df5:	e8 19 42 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0025dfa:	83 c4 10             	add    esp,0x10
c0025dfd:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025e01:	a1 60 02 03 c0       	mov    eax,ds:0xc0030260
c0025e06:	83 ec 08             	sub    esp,0x8
c0025e09:	50                   	push   eax
c0025e0a:	68 28 cb 02 c0       	push   0xc002cb28
c0025e0f:	e8 13 ca fe ff       	call   c0012827 <Dbg::kprintf(char const*, ...)>
c0025e14:	83 c4 10             	add    esp,0x10
c0025e17:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025e1e:	a1 60 02 03 c0       	mov    eax,ds:0xc0030260
c0025e23:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025e26:	7d 67                	jge    c0025e8f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e28:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e2b:	8b 04 85 80 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd80]
c0025e32:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e35:	83 ec 08             	sub    esp,0x8
c0025e38:	52                   	push   edx
c0025e39:	50                   	push   eax
c0025e3a:	e8 d1 fc ff ff       	call   c0025b10 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025e3f:	83 c4 10             	add    esp,0x10
c0025e42:	84 c0                	test   al,al
c0025e44:	74 44                	je     c0025e8a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025e46:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e49:	8b 1c 85 80 02 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcfd80]
c0025e50:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025e54:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025e57:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025e5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e5e:	83 c0 20             	add    eax,0x20
c0025e61:	0f b6 f0             	movzx  esi,al
c0025e64:	b8 00 00 00 00       	mov    eax,0x0
c0025e69:	99                   	cdq    
c0025e6a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e6d:	0f b6 c9             	movzx  ecx,cl
c0025e70:	83 ec 04             	sub    esp,0x4
c0025e73:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025e76:	57                   	push   edi
c0025e77:	56                   	push   esi
c0025e78:	52                   	push   edx
c0025e79:	50                   	push   eax
c0025e7a:	51                   	push   ecx
c0025e7b:	53                   	push   ebx
c0025e7c:	e8 0b fe ff ff       	call   c0025c8c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025e81:	83 c4 20             	add    esp,0x20
c0025e84:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025e88:	eb 05                	jmp    c0025e8f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e8a:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025e8d:	eb 8f                	jmp    c0025e1e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025e8f:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025e92:	83 f0 01             	xor    eax,0x1
c0025e95:	84 c0                	test   al,al
c0025e97:	74 10                	je     c0025ea9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025e99:	83 ec 0c             	sub    esp,0xc
c0025e9c:	68 3f cb 02 c0       	push   0xc002cb3f
c0025ea1:	e8 6d 41 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0025ea6:	83 c4 10             	add    esp,0x10
c0025ea9:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025ead:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025eb4:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025eb8:	7f 65                	jg     c0025f1f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025eba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ebd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ec0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ec7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025eca:	01 ca                	add    edx,ecx
c0025ecc:	83 c2 54             	add    edx,0x54
c0025ecf:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025ed3:	85 c0                	test   eax,eax
c0025ed5:	75 43                	jne    c0025f1a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025ed7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025eda:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025edd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ee4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ee7:	01 ca                	add    edx,ecx
c0025ee9:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025eec:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025eef:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ef6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ef9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025f00:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025f03:	01 ca                	add    edx,ecx
c0025f05:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025f0b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025f0e:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025f12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f15:	83 e8 20             	sub    eax,0x20
c0025f18:	eb 1a                	jmp    c0025f34 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025f1a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025f1d:	eb 95                	jmp    c0025eb4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025f1f:	83 ec 0c             	sub    esp,0xc
c0025f22:	68 4c cb 02 c0       	push   0xc002cb4c
c0025f27:	e8 e7 40 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0025f2c:	83 c4 10             	add    esp,0x10
c0025f2f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025f34:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025f37:	5b                   	pop    ebx
c0025f38:	5e                   	pop    esi
c0025f39:	5f                   	pop    edi
c0025f3a:	5d                   	pop    ebp
c0025f3b:	c3                   	ret    

c0025f3c <PIC::disable()>:
c0025f3c:	55                   	push   ebp
c0025f3d:	89 e5                	mov    ebp,esp
c0025f3f:	83 ec 10             	sub    esp,0x10
c0025f42:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025f48:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025f4c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f4f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f53:	ee                   	out    dx,al
c0025f54:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025f5a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025f5e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f61:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025f65:	ee                   	out    dx,al
c0025f66:	90                   	nop
c0025f67:	c9                   	leave  
c0025f68:	c3                   	ret    
c0025f69:	90                   	nop

c0025f6a <PIC::close(int, int, void*)>:
c0025f6a:	55                   	push   ebp
c0025f6b:	89 e5                	mov    ebp,esp
c0025f6d:	83 ec 08             	sub    esp,0x8
c0025f70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f73:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f75:	83 c0 3c             	add    eax,0x3c
c0025f78:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f7a:	83 ec 0c             	sub    esp,0xc
c0025f7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f80:	ff d0                	call   eax
c0025f82:	83 c4 10             	add    esp,0x10
c0025f85:	b8 00 00 00 00       	mov    eax,0x0
c0025f8a:	c9                   	leave  
c0025f8b:	c3                   	ret    

c0025f8c <PIC::PIC()>:
c0025f8c:	83 ec 0c             	sub    esp,0xc
c0025f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f93:	83 ec 08             	sub    esp,0x8
c0025f96:	68 f8 cb 02 c0       	push   0xc002cbf8
c0025f9b:	50                   	push   eax
c0025f9c:	e8 2d e6 fe ff       	call   c00145ce <InterruptController::InterruptController(char const*)>
c0025fa1:	83 c4 10             	add    esp,0x10
c0025fa4:	ba 24 cc 02 c0       	mov    edx,0xc002cc24
c0025fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fad:	89 10                	mov    DWORD PTR [eax],edx
c0025faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fb9:	0f b6 d0             	movzx  edx,al
c0025fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc0:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fcb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fd1:	0f b6 d0             	movzx  edx,al
c0025fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fd8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fe1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fe7:	8d 50 01             	lea    edx,[eax+0x1]
c0025fea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fee:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ff4:	0f b6 d0             	movzx  edx,al
c0025ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ffb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025fff:	83 e1 3f             	and    ecx,0x3f
c0026002:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002600a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026010:	0f b6 d0             	movzx  edx,al
c0026013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026017:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002601e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026022:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026028:	0f b6 d0             	movzx  edx,al
c002602b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002602f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026038:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002603e:	8d 50 01             	lea    edx,[eax+0x1]
c0026041:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026045:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002604b:	0f b6 d0             	movzx  edx,al
c002604e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026052:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026056:	83 e1 3f             	and    ecx,0x3f
c0026059:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002605d:	90                   	nop
c002605e:	83 c4 0c             	add    esp,0xc
c0026061:	c3                   	ret    

c0026062 <PIC::ioWait()>:
c0026062:	eb 00                	jmp    c0026064 <PIC::ioWait()+0x2>
c0026064:	eb 00                	jmp    c0026066 <PIC::ioWait()+0x4>
c0026066:	90                   	nop
c0026067:	c3                   	ret    

c0026068 <PIC::getIRQReg(int)>:
c0026068:	55                   	push   ebp
c0026069:	89 e5                	mov    ebp,esp
c002606b:	83 ec 10             	sub    esp,0x10
c002606e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026071:	0f b6 c0             	movzx  eax,al
c0026074:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002607a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002607d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026080:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026084:	ee                   	out    dx,al
c0026085:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026088:	0f b6 c0             	movzx  eax,al
c002608b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026091:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026094:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026097:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002609b:	ee                   	out    dx,al
c002609c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00260a2:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00260a6:	89 c2                	mov    edx,eax
c00260a8:	ec                   	in     al,dx
c00260a9:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00260ac:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00260af:	0f b6 c0             	movzx  eax,al
c00260b2:	c1 e0 08             	shl    eax,0x8
c00260b5:	89 c1                	mov    ecx,eax
c00260b7:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00260bd:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00260c1:	89 c2                	mov    edx,eax
c00260c3:	ec                   	in     al,dx
c00260c4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00260c7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00260ca:	0f b6 c0             	movzx  eax,al
c00260cd:	09 c8                	or     eax,ecx
c00260cf:	c9                   	leave  
c00260d0:	c3                   	ret    
c00260d1:	90                   	nop

c00260d2 <PIC::eoi(unsigned char)>:
c00260d2:	55                   	push   ebp
c00260d3:	89 e5                	mov    ebp,esp
c00260d5:	83 ec 14             	sub    esp,0x14
c00260d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260db:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00260de:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00260e2:	75 1e                	jne    c0026102 <PIC::eoi(unsigned char)+0x30>
c00260e4:	6a 0b                	push   0xb
c00260e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260e9:	e8 7a ff ff ff       	call   c0026068 <PIC::getIRQReg(int)>
c00260ee:	83 c4 08             	add    esp,0x8
c00260f1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00260f5:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00260f9:	25 80 00 00 00       	and    eax,0x80
c00260fe:	85 c0                	test   eax,eax
c0026100:	74 5f                	je     c0026161 <PIC::eoi(unsigned char)+0x8f>
c0026102:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026106:	75 2d                	jne    c0026135 <PIC::eoi(unsigned char)+0x63>
c0026108:	6a 0b                	push   0xb
c002610a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002610d:	e8 56 ff ff ff       	call   c0026068 <PIC::getIRQReg(int)>
c0026112:	83 c4 08             	add    esp,0x8
c0026115:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026119:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002611c:	66 85 c0             	test   ax,ax
c002611f:	78 14                	js     c0026135 <PIC::eoi(unsigned char)+0x63>
c0026121:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026127:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002612b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002612e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026132:	ee                   	out    dx,al
c0026133:	eb 2d                	jmp    c0026162 <PIC::eoi(unsigned char)+0x90>
c0026135:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026139:	76 12                	jbe    c002614d <PIC::eoi(unsigned char)+0x7b>
c002613b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026141:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026145:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026148:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002614c:	ee                   	out    dx,al
c002614d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026153:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026157:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002615a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002615e:	ee                   	out    dx,al
c002615f:	eb 01                	jmp    c0026162 <PIC::eoi(unsigned char)+0x90>
c0026161:	90                   	nop
c0026162:	c9                   	leave  
c0026163:	c3                   	ret    

c0026164 <PIC::remap()>:
c0026164:	55                   	push   ebp
c0026165:	89 e5                	mov    ebp,esp
c0026167:	83 ec 48             	sub    esp,0x48
c002616a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026171:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026178:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002617e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026181:	89 c2                	mov    edx,eax
c0026183:	ec                   	in     al,dx
c0026184:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026187:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002618a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002618d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026193:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026196:	89 c2                	mov    edx,eax
c0026198:	ec                   	in     al,dx
c0026199:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002619c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002619f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00261a2:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00261a8:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00261ac:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00261af:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00261b2:	ee                   	out    dx,al
c00261b3:	83 ec 0c             	sub    esp,0xc
c00261b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261b9:	e8 a4 fe ff ff       	call   c0026062 <PIC::ioWait()>
c00261be:	83 c4 10             	add    esp,0x10
c00261c1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00261c7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00261cb:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00261ce:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00261d1:	ee                   	out    dx,al
c00261d2:	83 ec 0c             	sub    esp,0xc
c00261d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261d8:	e8 85 fe ff ff       	call   c0026062 <PIC::ioWait()>
c00261dd:	83 c4 10             	add    esp,0x10
c00261e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00261e3:	0f b6 c0             	movzx  eax,al
c00261e6:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00261ec:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00261ef:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00261f2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00261f5:	ee                   	out    dx,al
c00261f6:	83 ec 0c             	sub    esp,0xc
c00261f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261fc:	e8 61 fe ff ff       	call   c0026062 <PIC::ioWait()>
c0026201:	83 c4 10             	add    esp,0x10
c0026204:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026207:	0f b6 c0             	movzx  eax,al
c002620a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026210:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026213:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026216:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026219:	ee                   	out    dx,al
c002621a:	83 ec 0c             	sub    esp,0xc
c002621d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026220:	e8 3d fe ff ff       	call   c0026062 <PIC::ioWait()>
c0026225:	83 c4 10             	add    esp,0x10
c0026228:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002622e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026232:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026235:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026238:	ee                   	out    dx,al
c0026239:	83 ec 0c             	sub    esp,0xc
c002623c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002623f:	e8 1e fe ff ff       	call   c0026062 <PIC::ioWait()>
c0026244:	83 c4 10             	add    esp,0x10
c0026247:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002624d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026251:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026254:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026257:	ee                   	out    dx,al
c0026258:	83 ec 0c             	sub    esp,0xc
c002625b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002625e:	e8 ff fd ff ff       	call   c0026062 <PIC::ioWait()>
c0026263:	83 c4 10             	add    esp,0x10
c0026266:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002626c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026270:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026273:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026276:	ee                   	out    dx,al
c0026277:	83 ec 0c             	sub    esp,0xc
c002627a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002627d:	e8 e0 fd ff ff       	call   c0026062 <PIC::ioWait()>
c0026282:	83 c4 10             	add    esp,0x10
c0026285:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002628b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002628f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026292:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026295:	ee                   	out    dx,al
c0026296:	83 ec 0c             	sub    esp,0xc
c0026299:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002629c:	e8 c1 fd ff ff       	call   c0026062 <PIC::ioWait()>
c00262a1:	83 c4 10             	add    esp,0x10
c00262a4:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00262a8:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00262ae:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00262b1:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00262b4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00262b7:	ee                   	out    dx,al
c00262b8:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00262bc:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00262c2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00262c5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00262c8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00262cb:	ee                   	out    dx,al
c00262cc:	90                   	nop
c00262cd:	c9                   	leave  
c00262ce:	c3                   	ret    
c00262cf:	90                   	nop

c00262d0 <PIC::open(int, int, void*)>:
c00262d0:	55                   	push   ebp
c00262d1:	89 e5                	mov    ebp,esp
c00262d3:	83 ec 18             	sub    esp,0x18
c00262d6:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00262dc:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00262e0:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00262e3:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00262e7:	ee                   	out    dx,al
c00262e8:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00262ee:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00262f2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00262f5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00262f9:	ee                   	out    dx,al
c00262fa:	83 ec 0c             	sub    esp,0xc
c00262fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026300:	e8 5f fe ff ff       	call   c0026164 <PIC::remap()>
c0026305:	83 c4 10             	add    esp,0x10
c0026308:	b8 00 00 00 00       	mov    eax,0x0
c002630d:	c9                   	leave  
c002630e:	c3                   	ret    
c002630f:	90                   	nop

c0026310 <APICTimer::close(int, int, void*)>:
c0026310:	b8 00 00 00 00       	mov    eax,0x0
c0026315:	c3                   	ret    

c0026316 <apicTimerHandler(regs*, void*)>:
c0026316:	83 ec 0c             	sub    esp,0xc
c0026319:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002631d:	8b 00                	mov    eax,DWORD PTR [eax]
c002631f:	99                   	cdq    
c0026320:	52                   	push   edx
c0026321:	50                   	push   eax
c0026322:	6a 00                	push   0x0
c0026324:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026329:	e8 96 07 00 00       	call   c0026ac4 <__udivdi3>
c002632e:	83 c4 10             	add    esp,0x10
c0026331:	83 ec 08             	sub    esp,0x8
c0026334:	52                   	push   edx
c0026335:	50                   	push   eax
c0026336:	e8 f0 03 ff ff       	call   c001672b <timerHandler(unsigned long long)>
c002633b:	83 c4 10             	add    esp,0x10
c002633e:	90                   	nop
c002633f:	83 c4 0c             	add    esp,0xc
c0026342:	c3                   	ret    
c0026343:	90                   	nop

c0026344 <APICTimer::write(int)>:
c0026344:	53                   	push   ebx
c0026345:	83 ec 28             	sub    esp,0x28
c0026348:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002634c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026350:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026356:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c002635b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026361:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026367:	83 ec 0c             	sub    esp,0xc
c002636a:	50                   	push   eax
c002636b:	e8 de f4 ff ff       	call   c002584e <APIC::getBase()>
c0026370:	83 c4 10             	add    esp,0x10
c0026373:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026377:	a1 90 e5 02 c0       	mov    eax,ds:0xc002e590
c002637c:	8b 15 94 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e594
c0026382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026386:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002638a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002638e:	05 e0 03 00 00       	add    eax,0x3e0
c0026393:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002639d:	05 80 03 00 00       	add    eax,0x380
c00263a2:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00263a8:	fb                   	sti    
c00263a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00263b1:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00263b6:	83 d2 00             	adc    edx,0x0
c00263b9:	89 c1                	mov    ecx,eax
c00263bb:	89 d3                	mov    ebx,edx
c00263bd:	a1 90 e5 02 c0       	mov    eax,ds:0xc002e590
c00263c2:	8b 15 94 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e594
c00263c8:	39 c8                	cmp    eax,ecx
c00263ca:	89 d0                	mov    eax,edx
c00263cc:	19 d8                	sbb    eax,ebx
c00263ce:	73 02                	jae    c00263d2 <APICTimer::write(int)+0x8e>
c00263d0:	eb d7                	jmp    c00263a9 <APICTimer::write(int)+0x65>
c00263d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263d6:	05 20 03 00 00       	add    eax,0x320
c00263db:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00263e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263e5:	05 90 03 00 00       	add    eax,0x390
c00263ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00263ec:	f7 d0                	not    eax
c00263ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263f2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00263f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263fa:	ba 00 00 00 00       	mov    edx,0x0
c00263ff:	f7 f3                	div    ebx
c0026401:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026405:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026409:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002640f:	0d 00 00 02 00       	or     eax,0x20000
c0026414:	89 c2                	mov    edx,eax
c0026416:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002641a:	05 20 03 00 00       	add    eax,0x320
c002641f:	89 10                	mov    DWORD PTR [eax],edx
c0026421:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026425:	05 e0 03 00 00       	add    eax,0x3e0
c002642a:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026434:	05 80 03 00 00       	add    eax,0x380
c0026439:	89 c2                	mov    edx,eax
c002643b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002643f:	89 02                	mov    DWORD PTR [edx],eax
c0026441:	90                   	nop
c0026442:	83 c4 28             	add    esp,0x28
c0026445:	5b                   	pop    ebx
c0026446:	c3                   	ret    
c0026447:	90                   	nop

c0026448 <APICTimer::open(int, int, void*)>:
c0026448:	57                   	push   edi
c0026449:	56                   	push   esi
c002644a:	53                   	push   ebx
c002644b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002644f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026451:	83 c0 24             	add    eax,0x24
c0026454:	8b 00                	mov    eax,DWORD PTR [eax]
c0026456:	83 ec 08             	sub    esp,0x8
c0026459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002645d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026461:	ff d0                	call   eax
c0026463:	83 c4 10             	add    esp,0x10
c0026466:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c002646b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026471:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026477:	83 ec 0c             	sub    esp,0xc
c002647a:	50                   	push   eax
c002647b:	e8 ce f3 ff ff       	call   c002584e <APIC::getBase()>
c0026480:	83 c4 10             	add    esp,0x10
c0026483:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002648d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026493:	0f b6 f8             	movzx  edi,al
c0026496:	89 d0                	mov    eax,edx
c0026498:	ba 00 00 00 00       	mov    edx,0x0
c002649d:	89 c1                	mov    ecx,eax
c002649f:	80 e5 ff             	and    ch,0xff
c00264a2:	89 cb                	mov    ebx,ecx
c00264a4:	0f b6 f2             	movzx  esi,dl
c00264a7:	89 d8                	mov    eax,ebx
c00264a9:	89 f2                	mov    edx,esi
c00264ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264af:	8d 5f 08             	lea    ebx,[edi+0x8]
c00264b2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00264b6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00264ba:	83 e0 00             	and    eax,0x0
c00264bd:	09 d0                	or     eax,edx
c00264bf:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00264c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00264cd:	8d 50 01             	lea    edx,[eax+0x1]
c00264d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264d4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00264da:	0f b6 d0             	movzx  edx,al
c00264dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264e1:	83 c2 08             	add    edx,0x8
c00264e4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00264e8:	0f b6 c9             	movzx  ecx,cl
c00264eb:	81 c9 00 00 01 00    	or     ecx,0x10000
c00264f1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00264f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264fd:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026507:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002650b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026511:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026515:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002651b:	83 ec 0c             	sub    esp,0xc
c002651e:	51                   	push   ecx
c002651f:	6a 01                	push   0x1
c0026521:	68 16 63 02 c0       	push   0xc0026316
c0026526:	52                   	push   edx
c0026527:	50                   	push   eax
c0026528:	e8 ab d6 fe ff       	call   c0013bd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002652d:	83 c4 20             	add    esp,0x20
c0026530:	89 c2                	mov    edx,eax
c0026532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026536:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002653c:	b8 00 00 00 00       	mov    eax,0x0
c0026541:	5b                   	pop    ebx
c0026542:	5e                   	pop    esi
c0026543:	5f                   	pop    edi
c0026544:	c3                   	ret    
c0026545:	90                   	nop

c0026546 <APICTimer::APICTimer()>:
c0026546:	83 ec 0c             	sub    esp,0xc
c0026549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002654d:	83 ec 08             	sub    esp,0x8
c0026550:	68 64 cc 02 c0       	push   0xc002cc64
c0026555:	50                   	push   eax
c0026556:	e8 41 01 ff ff       	call   c001669c <Timer::Timer(char const*)>
c002655b:	83 c4 10             	add    esp,0x10
c002655e:	ba 78 cc 02 c0       	mov    edx,0xc002cc78
c0026563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026567:	89 10                	mov    DWORD PTR [eax],edx
c0026569:	90                   	nop
c002656a:	83 c4 0c             	add    esp,0xc
c002656d:	c3                   	ret    

c002656e <PIT::write(int)>:
c002656e:	83 ec 10             	sub    esp,0x10
c0026571:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026575:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026579:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002657f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026583:	a3 a4 02 03 c0       	mov    ds:0xc00302a4,eax
c0026588:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002658d:	99                   	cdq    
c002658e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026596:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002659d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00265a2:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00265a6:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00265ab:	ee                   	out    dx,al
c00265ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00265b0:	0f b6 c0             	movzx  eax,al
c00265b3:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00265ba:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00265be:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00265c2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00265c7:	ee                   	out    dx,al
c00265c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00265cc:	c1 f8 08             	sar    eax,0x8
c00265cf:	0f b6 c0             	movzx  eax,al
c00265d2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00265d9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00265dd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00265e1:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00265e6:	ee                   	out    dx,al
c00265e7:	90                   	nop
c00265e8:	83 c4 10             	add    esp,0x10
c00265eb:	c3                   	ret    

c00265ec <pitHandler(regs*, void*)>:
c00265ec:	83 ec 0c             	sub    esp,0xc
c00265ef:	a1 a4 02 03 c0       	mov    eax,ds:0xc00302a4
c00265f4:	99                   	cdq    
c00265f5:	52                   	push   edx
c00265f6:	50                   	push   eax
c00265f7:	6a 00                	push   0x0
c00265f9:	68 00 ca 9a 3b       	push   0x3b9aca00
c00265fe:	e8 c1 04 00 00       	call   c0026ac4 <__udivdi3>
c0026603:	83 c4 10             	add    esp,0x10
c0026606:	83 ec 08             	sub    esp,0x8
c0026609:	52                   	push   edx
c002660a:	50                   	push   eax
c002660b:	e8 1b 01 ff ff       	call   c001672b <timerHandler(unsigned long long)>
c0026610:	83 c4 10             	add    esp,0x10
c0026613:	90                   	nop
c0026614:	83 c4 0c             	add    esp,0xc
c0026617:	c3                   	ret    

c0026618 <PIT::open(int, int, void*)>:
c0026618:	83 ec 0c             	sub    esp,0xc
c002661b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002661f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026621:	83 c0 24             	add    eax,0x24
c0026624:	8b 00                	mov    eax,DWORD PTR [eax]
c0026626:	83 ec 08             	sub    esp,0x8
c0026629:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002662d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026631:	ff d0                	call   eax
c0026633:	83 c4 10             	add    esp,0x10
c0026636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002663a:	83 ec 0c             	sub    esp,0xc
c002663d:	6a 00                	push   0x0
c002663f:	6a 01                	push   0x1
c0026641:	68 ec 65 02 c0       	push   0xc00265ec
c0026646:	6a 00                	push   0x0
c0026648:	50                   	push   eax
c0026649:	e8 8a d5 fe ff       	call   c0013bd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002664e:	83 c4 20             	add    esp,0x20
c0026651:	89 c2                	mov    edx,eax
c0026653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026657:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002665d:	b8 00 00 00 00       	mov    eax,0x0
c0026662:	83 c4 0c             	add    esp,0xc
c0026665:	c3                   	ret    

c0026666 <PIT::close(int, int, void*)>:
c0026666:	83 ec 0c             	sub    esp,0xc
c0026669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002666d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002667b:	6a 01                	push   0x1
c002667d:	68 ec 65 02 c0       	push   0xc00265ec
c0026682:	6a 00                	push   0x0
c0026684:	50                   	push   eax
c0026685:	e8 98 d5 fe ff       	call   c0013c22 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002668a:	83 c4 10             	add    esp,0x10
c002668d:	b8 00 00 00 00       	mov    eax,0x0
c0026692:	83 c4 0c             	add    esp,0xc
c0026695:	c3                   	ret    

c0026696 <PIT::PIT()>:
c0026696:	83 ec 0c             	sub    esp,0xc
c0026699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669d:	83 ec 08             	sub    esp,0x8
c00266a0:	68 a0 cc 02 c0       	push   0xc002cca0
c00266a5:	50                   	push   eax
c00266a6:	e8 f1 ff fe ff       	call   c001669c <Timer::Timer(char const*)>
c00266ab:	83 c4 10             	add    esp,0x10
c00266ae:	ba c8 cc 02 c0       	mov    edx,0xc002ccc8
c00266b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b7:	89 10                	mov    DWORD PTR [eax],edx
c00266b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266c3:	0f b6 d0             	movzx  edx,al
c00266c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ca:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00266d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266d5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266db:	0f b6 d0             	movzx  edx,al
c00266de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00266e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266f1:	8d 50 01             	lea    edx,[eax+0x1]
c00266f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266f8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266fe:	0f b6 d0             	movzx  edx,al
c0026701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026705:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026709:	83 e1 3f             	and    ecx,0x3f
c002670c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026710:	90                   	nop
c0026711:	83 c4 0c             	add    esp,0xc
c0026714:	c3                   	ret    
c0026715:	66 90                	xchg   ax,ax
c0026717:	66 90                	xchg   ax,ax
c0026719:	66 90                	xchg   ax,ax
c002671b:	66 90                	xchg   ax,ax
c002671d:	66 90                	xchg   ax,ax
c002671f:	90                   	nop

c0026720 <avxDetect>:
c0026720:	b8 00 00 00 00       	mov    eax,0x0
c0026725:	c3                   	ret    

c0026726 <avxSave>:
c0026726:	c3                   	ret    

c0026727 <avxLoad>:
c0026727:	c3                   	ret    

c0026728 <avxInit>:
c0026728:	c3                   	ret    

c0026729 <avxClose>:
c0026729:	c3                   	ret    

c002672a <wouldSheSayYes>:
c002672a:	c3                   	ret    
c002672b:	49                   	dec    ecx
c002672c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026730:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026734:	75 20                	jne    c0026756 <sseDetect.noSSE+0x1>
c0026736:	4e                   	dec    esi
c0026737:	79 61                	jns    c002679a <x87Detect+0x14>
c0026739:	68 2e 2e 2e 00       	push   0x2e2e2e
c002673e:	66 90                	xchg   ax,ax

c0026740 <absolutelyNoChanceInHell>:
c0026740:	b8 01 00 00 00       	mov    eax,0x1
c0026745:	0f a2                	cpuid  
c0026747:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002674d:	74 06                	je     c0026755 <sseDetect.noSSE>
c002674f:	b8 01 00 00 00       	mov    eax,0x1
c0026754:	c3                   	ret    

c0026755 <sseDetect.noSSE>:
c0026755:	31 c0                	xor    eax,eax
c0026757:	c3                   	ret    

c0026758 <sseSave>:
c0026758:	0f ae 44 24 04       	fxsave [esp+0x4]
c002675d:	c3                   	ret    

c002675e <sseLoad>:
c002675e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026763:	c3                   	ret    

c0026764 <sseInit>:
c0026764:	e8 49 00 00 00       	call   c00267b2 <x87Init>
c0026769:	0f 20 e0             	mov    eax,cr4
c002676c:	66 0d 00 06          	or     ax,0x600
c0026770:	0f 22 e0             	mov    cr4,eax
c0026773:	c3                   	ret    

c0026774 <sseClose>:
c0026774:	c3                   	ret    
c0026775:	66 90                	xchg   ax,ax
c0026777:	66 90                	xchg   ax,ax
c0026779:	66 90                	xchg   ax,ax
c002677b:	66 90                	xchg   ax,ax
c002677d:	66 90                	xchg   ax,ax
c002677f:	90                   	nop

c0026780 <value_37F>:
c0026780:	7f 03                	jg     c0026785 <value_37A+0x1>

c0026782 <value_37E>:
c0026782:	7e 03                	jle    c0026787 <x87Detect+0x1>

c0026784 <value_37A>:
c0026784:	7a 03                	jp     c0026789 <x87Detect+0x3>

c0026786 <x87Detect>:
c0026786:	b8 01 00 00 00       	mov    eax,0x1
c002678b:	0f a2                	cpuid  
c002678d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026793:	74 06                	je     c002679b <x87Detect.nox87>
c0026795:	b8 01 00 00 00       	mov    eax,0x1
c002679a:	c3                   	ret    

c002679b <x87Detect.nox87>:
c002679b:	b8 00 00 00 00       	mov    eax,0x0
c00267a0:	c3                   	ret    

c00267a1 <x87Save>:
c00267a1:	55                   	push   ebp
c00267a2:	89 e5                	mov    ebp,esp
c00267a4:	9b dd 75 08          	fsave  [ebp+0x8]
c00267a8:	c9                   	leave  
c00267a9:	c3                   	ret    

c00267aa <x87Load>:
c00267aa:	55                   	push   ebp
c00267ab:	89 e5                	mov    ebp,esp
c00267ad:	dd 65 08             	frstor [ebp+0x8]
c00267b0:	c9                   	leave  
c00267b1:	c3                   	ret    

c00267b2 <x87Init>:
c00267b2:	9b db e3             	finit  
c00267b5:	0f 20 c0             	mov    eax,cr0
c00267b8:	66 25 fb ff          	and    ax,0xfffb
c00267bc:	66 0d 22 00          	or     ax,0x22
c00267c0:	0f 22 c0             	mov    cr0,eax
c00267c3:	0f 06                	clts   
c00267c5:	d9 2d 84 67 02 c0    	fldcw  WORD PTR ds:0xc0026784
c00267cb:	c3                   	ret    

c00267cc <x87Close>:
c00267cc:	c3                   	ret    
c00267cd:	66 90                	xchg   ax,ax
c00267cf:	90                   	nop

c00267d0 <__do_global_ctors_aux>:
c00267d0:	a1 c4 93 02 c0       	mov    eax,ds:0xc00293c4
c00267d5:	83 f8 ff             	cmp    eax,0xffffffff
c00267d8:	74 1a                	je     c00267f4 <__do_global_ctors_aux+0x24>
c00267da:	55                   	push   ebp
c00267db:	89 e5                	mov    ebp,esp
c00267dd:	53                   	push   ebx
c00267de:	52                   	push   edx
c00267df:	bb c4 93 02 c0       	mov    ebx,0xc00293c4
c00267e4:	ff d0                	call   eax
c00267e6:	83 eb 04             	sub    ebx,0x4
c00267e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00267eb:	83 f8 ff             	cmp    eax,0xffffffff
c00267ee:	75 f4                	jne    c00267e4 <__do_global_ctors_aux+0x14>
c00267f0:	58                   	pop    eax
c00267f1:	5b                   	pop    ebx
c00267f2:	5d                   	pop    ebp
c00267f3:	c3                   	ret    
c00267f4:	c3                   	ret    
c00267f5:	66 90                	xchg   ax,ax
c00267f7:	90                   	nop

c00267f8 <__divdi3>:
c00267f8:	55                   	push   ebp
c00267f9:	57                   	push   edi
c00267fa:	56                   	push   esi
c00267fb:	53                   	push   ebx
c00267fc:	83 ec 1c             	sub    esp,0x1c
c00267ff:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026803:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026807:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002680a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002680e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026812:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026816:	85 db                	test   ebx,ebx
c0026818:	0f 88 8e 00 00 00    	js     c00268ac <__divdi3+0xb4>
c002681e:	89 dd                	mov    ebp,ebx
c0026820:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026828:	89 d3                	mov    ebx,edx
c002682a:	85 d2                	test   edx,edx
c002682c:	79 0d                	jns    c002683b <__divdi3+0x43>
c002682e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026832:	f7 d8                	neg    eax
c0026834:	83 d2 00             	adc    edx,0x0
c0026837:	f7 da                	neg    edx
c0026839:	89 d3                	mov    ebx,edx
c002683b:	89 c7                	mov    edi,eax
c002683d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026840:	85 db                	test   ebx,ebx
c0026842:	75 48                	jne    c002688c <__divdi3+0x94>
c0026844:	39 ef                	cmp    edi,ebp
c0026846:	76 24                	jbe    c002686c <__divdi3+0x74>
c0026848:	89 ea                	mov    edx,ebp
c002684a:	f7 f7                	div    edi
c002684c:	89 c1                	mov    ecx,eax
c002684e:	31 f6                	xor    esi,esi
c0026850:	89 c8                	mov    eax,ecx
c0026852:	89 f2                	mov    edx,esi
c0026854:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026858:	85 c9                	test   ecx,ecx
c002685a:	74 07                	je     c0026863 <__divdi3+0x6b>
c002685c:	f7 d8                	neg    eax
c002685e:	83 d2 00             	adc    edx,0x0
c0026861:	f7 da                	neg    edx
c0026863:	83 c4 1c             	add    esp,0x1c
c0026866:	5b                   	pop    ebx
c0026867:	5e                   	pop    esi
c0026868:	5f                   	pop    edi
c0026869:	5d                   	pop    ebp
c002686a:	c3                   	ret    
c002686b:	90                   	nop
c002686c:	85 ff                	test   edi,edi
c002686e:	75 0b                	jne    c002687b <__divdi3+0x83>
c0026870:	b8 01 00 00 00       	mov    eax,0x1
c0026875:	31 d2                	xor    edx,edx
c0026877:	f7 f3                	div    ebx
c0026879:	89 c7                	mov    edi,eax
c002687b:	31 d2                	xor    edx,edx
c002687d:	89 e8                	mov    eax,ebp
c002687f:	f7 f7                	div    edi
c0026881:	89 c6                	mov    esi,eax
c0026883:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026886:	f7 f7                	div    edi
c0026888:	89 c1                	mov    ecx,eax
c002688a:	eb c4                	jmp    c0026850 <__divdi3+0x58>
c002688c:	39 eb                	cmp    ebx,ebp
c002688e:	77 3c                	ja     c00268cc <__divdi3+0xd4>
c0026890:	0f bd f3             	bsr    esi,ebx
c0026893:	83 f6 1f             	xor    esi,0x1f
c0026896:	75 40                	jne    c00268d8 <__divdi3+0xe0>
c0026898:	39 eb                	cmp    ebx,ebp
c002689a:	72 09                	jb     c00268a5 <__divdi3+0xad>
c002689c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002689f:	0f 87 97 00 00 00    	ja     c002693c <__divdi3+0x144>
c00268a5:	b9 01 00 00 00       	mov    ecx,0x1
c00268aa:	eb a4                	jmp    c0026850 <__divdi3+0x58>
c00268ac:	f7 d9                	neg    ecx
c00268ae:	83 d3 00             	adc    ebx,0x0
c00268b1:	f7 db                	neg    ebx
c00268b3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00268b6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00268ba:	89 dd                	mov    ebp,ebx
c00268bc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00268c4:	e9 5f ff ff ff       	jmp    c0026828 <__divdi3+0x30>
c00268c9:	8d 76 00             	lea    esi,[esi+0x0]
c00268cc:	31 f6                	xor    esi,esi
c00268ce:	31 c9                	xor    ecx,ecx
c00268d0:	e9 7b ff ff ff       	jmp    c0026850 <__divdi3+0x58>
c00268d5:	8d 76 00             	lea    esi,[esi+0x0]
c00268d8:	b8 20 00 00 00       	mov    eax,0x20
c00268dd:	29 f0                	sub    eax,esi
c00268df:	89 f1                	mov    ecx,esi
c00268e1:	d3 e3                	shl    ebx,cl
c00268e3:	89 fa                	mov    edx,edi
c00268e5:	88 c1                	mov    cl,al
c00268e7:	d3 ea                	shr    edx,cl
c00268e9:	09 da                	or     edx,ebx
c00268eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00268ef:	89 f1                	mov    ecx,esi
c00268f1:	d3 e7                	shl    edi,cl
c00268f3:	89 eb                	mov    ebx,ebp
c00268f5:	88 c1                	mov    cl,al
c00268f7:	d3 eb                	shr    ebx,cl
c00268f9:	89 f1                	mov    ecx,esi
c00268fb:	d3 e5                	shl    ebp,cl
c00268fd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026900:	88 c1                	mov    cl,al
c0026902:	d3 ea                	shr    edx,cl
c0026904:	09 d5                	or     ebp,edx
c0026906:	89 e8                	mov    eax,ebp
c0026908:	89 da                	mov    edx,ebx
c002690a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002690e:	89 d3                	mov    ebx,edx
c0026910:	89 c5                	mov    ebp,eax
c0026912:	f7 e7                	mul    edi
c0026914:	39 d3                	cmp    ebx,edx
c0026916:	72 18                	jb     c0026930 <__divdi3+0x138>
c0026918:	74 0a                	je     c0026924 <__divdi3+0x12c>
c002691a:	89 e9                	mov    ecx,ebp
c002691c:	31 f6                	xor    esi,esi
c002691e:	e9 2d ff ff ff       	jmp    c0026850 <__divdi3+0x58>
c0026923:	90                   	nop
c0026924:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026927:	89 f1                	mov    ecx,esi
c0026929:	d3 e7                	shl    edi,cl
c002692b:	39 c7                	cmp    edi,eax
c002692d:	73 eb                	jae    c002691a <__divdi3+0x122>
c002692f:	90                   	nop
c0026930:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026933:	31 f6                	xor    esi,esi
c0026935:	e9 16 ff ff ff       	jmp    c0026850 <__divdi3+0x58>
c002693a:	66 90                	xchg   ax,ax
c002693c:	31 c9                	xor    ecx,ecx
c002693e:	e9 0d ff ff ff       	jmp    c0026850 <__divdi3+0x58>
c0026943:	90                   	nop

c0026944 <__moddi3>:
c0026944:	55                   	push   ebp
c0026945:	57                   	push   edi
c0026946:	56                   	push   esi
c0026947:	53                   	push   ebx
c0026948:	83 ec 2c             	sub    esp,0x2c
c002694b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002694f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026953:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026957:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002695b:	85 db                	test   ebx,ebx
c002695d:	0f 88 85 00 00 00    	js     c00269e8 <__moddi3+0xa4>
c0026963:	89 de                	mov    esi,ebx
c0026965:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002696d:	89 d7                	mov    edi,edx
c002696f:	85 d2                	test   edx,edx
c0026971:	79 09                	jns    c002697c <__moddi3+0x38>
c0026973:	f7 d8                	neg    eax
c0026975:	83 d2 00             	adc    edx,0x0
c0026978:	f7 da                	neg    edx
c002697a:	89 d7                	mov    edi,edx
c002697c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026980:	89 cd                	mov    ebp,ecx
c0026982:	85 ff                	test   edi,edi
c0026984:	75 52                	jne    c00269d8 <__moddi3+0x94>
c0026986:	89 c3                	mov    ebx,eax
c0026988:	39 f0                	cmp    eax,esi
c002698a:	76 24                	jbe    c00269b0 <__moddi3+0x6c>
c002698c:	89 c8                	mov    eax,ecx
c002698e:	89 f2                	mov    edx,esi
c0026990:	f7 f3                	div    ebx
c0026992:	89 d6                	mov    esi,edx
c0026994:	89 f0                	mov    eax,esi
c0026996:	31 d2                	xor    edx,edx
c0026998:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002699c:	85 c9                	test   ecx,ecx
c002699e:	74 07                	je     c00269a7 <__moddi3+0x63>
c00269a0:	f7 d8                	neg    eax
c00269a2:	83 d2 00             	adc    edx,0x0
c00269a5:	f7 da                	neg    edx
c00269a7:	83 c4 2c             	add    esp,0x2c
c00269aa:	5b                   	pop    ebx
c00269ab:	5e                   	pop    esi
c00269ac:	5f                   	pop    edi
c00269ad:	5d                   	pop    ebp
c00269ae:	c3                   	ret    
c00269af:	90                   	nop
c00269b0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00269b4:	85 db                	test   ebx,ebx
c00269b6:	75 0d                	jne    c00269c5 <__moddi3+0x81>
c00269b8:	b8 01 00 00 00       	mov    eax,0x1
c00269bd:	31 d2                	xor    edx,edx
c00269bf:	f7 f7                	div    edi
c00269c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00269c5:	89 f0                	mov    eax,esi
c00269c7:	31 d2                	xor    edx,edx
c00269c9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00269cd:	f7 f7                	div    edi
c00269cf:	89 e8                	mov    eax,ebp
c00269d1:	f7 f7                	div    edi
c00269d3:	89 d6                	mov    esi,edx
c00269d5:	eb bd                	jmp    c0026994 <__moddi3+0x50>
c00269d7:	90                   	nop
c00269d8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269dc:	39 f7                	cmp    edi,esi
c00269de:	76 20                	jbe    c0026a00 <__moddi3+0xbc>
c00269e0:	89 c8                	mov    eax,ecx
c00269e2:	89 f2                	mov    edx,esi
c00269e4:	eb b2                	jmp    c0026998 <__moddi3+0x54>
c00269e6:	66 90                	xchg   ax,ax
c00269e8:	f7 d9                	neg    ecx
c00269ea:	83 d3 00             	adc    ebx,0x0
c00269ed:	f7 db                	neg    ebx
c00269ef:	89 de                	mov    esi,ebx
c00269f1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00269f9:	e9 6f ff ff ff       	jmp    c002696d <__moddi3+0x29>
c00269fe:	66 90                	xchg   ax,ax
c0026a00:	0f bd c7             	bsr    eax,edi
c0026a03:	83 f0 1f             	xor    eax,0x1f
c0026a06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026a0a:	75 24                	jne    c0026a30 <__moddi3+0xec>
c0026a0c:	39 f7                	cmp    edi,esi
c0026a0e:	72 06                	jb     c0026a16 <__moddi3+0xd2>
c0026a10:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026a14:	77 0c                	ja     c0026a22 <__moddi3+0xde>
c0026a16:	89 e9                	mov    ecx,ebp
c0026a18:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026a1c:	19 fe                	sbb    esi,edi
c0026a1e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026a22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a26:	89 f2                	mov    edx,esi
c0026a28:	e9 6b ff ff ff       	jmp    c0026998 <__moddi3+0x54>
c0026a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a30:	b8 20 00 00 00       	mov    eax,0x20
c0026a35:	89 c2                	mov    edx,eax
c0026a37:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026a3b:	29 da                	sub    edx,ebx
c0026a3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026a41:	88 d9                	mov    cl,bl
c0026a43:	d3 e7                	shl    edi,cl
c0026a45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026a49:	88 d1                	mov    cl,dl
c0026a4b:	d3 e8                	shr    eax,cl
c0026a4d:	09 c7                	or     edi,eax
c0026a4f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026a53:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026a57:	89 d8                	mov    eax,ebx
c0026a59:	88 d9                	mov    cl,bl
c0026a5b:	d3 e7                	shl    edi,cl
c0026a5d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a61:	89 f3                	mov    ebx,esi
c0026a63:	88 d1                	mov    cl,dl
c0026a65:	d3 eb                	shr    ebx,cl
c0026a67:	89 c7                	mov    edi,eax
c0026a69:	88 c1                	mov    cl,al
c0026a6b:	d3 e6                	shl    esi,cl
c0026a6d:	89 e8                	mov    eax,ebp
c0026a6f:	88 d1                	mov    cl,dl
c0026a71:	d3 e8                	shr    eax,cl
c0026a73:	09 f0                	or     eax,esi
c0026a75:	89 f9                	mov    ecx,edi
c0026a77:	d3 e5                	shl    ebp,cl
c0026a79:	89 da                	mov    edx,ebx
c0026a7b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026a7f:	89 d3                	mov    ebx,edx
c0026a81:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a85:	89 c6                	mov    esi,eax
c0026a87:	89 d1                	mov    ecx,edx
c0026a89:	39 d3                	cmp    ebx,edx
c0026a8b:	72 27                	jb     c0026ab4 <__moddi3+0x170>
c0026a8d:	74 21                	je     c0026ab0 <__moddi3+0x16c>
c0026a8f:	29 f5                	sub    ebp,esi
c0026a91:	19 cb                	sbb    ebx,ecx
c0026a93:	89 de                	mov    esi,ebx
c0026a95:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026a99:	d3 e6                	shl    esi,cl
c0026a9b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026a9f:	89 f9                	mov    ecx,edi
c0026aa1:	d3 ed                	shr    ebp,cl
c0026aa3:	09 ee                	or     esi,ebp
c0026aa5:	89 f0                	mov    eax,esi
c0026aa7:	d3 eb                	shr    ebx,cl
c0026aa9:	89 da                	mov    edx,ebx
c0026aab:	e9 e8 fe ff ff       	jmp    c0026998 <__moddi3+0x54>
c0026ab0:	39 c5                	cmp    ebp,eax
c0026ab2:	73 db                	jae    c0026a8f <__moddi3+0x14b>
c0026ab4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026ab8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026abc:	89 d1                	mov    ecx,edx
c0026abe:	89 c6                	mov    esi,eax
c0026ac0:	eb cd                	jmp    c0026a8f <__moddi3+0x14b>
c0026ac2:	66 90                	xchg   ax,ax

c0026ac4 <__udivdi3>:
c0026ac4:	55                   	push   ebp
c0026ac5:	57                   	push   edi
c0026ac6:	56                   	push   esi
c0026ac7:	53                   	push   ebx
c0026ac8:	83 ec 1c             	sub    esp,0x1c
c0026acb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026acf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026ad3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026ad7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026adb:	85 d2                	test   edx,edx
c0026add:	75 41                	jne    c0026b20 <__udivdi3+0x5c>
c0026adf:	39 f7                	cmp    edi,esi
c0026ae1:	76 15                	jbe    c0026af8 <__udivdi3+0x34>
c0026ae3:	89 e8                	mov    eax,ebp
c0026ae5:	89 f2                	mov    edx,esi
c0026ae7:	f7 f7                	div    edi
c0026ae9:	31 db                	xor    ebx,ebx
c0026aeb:	89 da                	mov    edx,ebx
c0026aed:	83 c4 1c             	add    esp,0x1c
c0026af0:	5b                   	pop    ebx
c0026af1:	5e                   	pop    esi
c0026af2:	5f                   	pop    edi
c0026af3:	5d                   	pop    ebp
c0026af4:	c3                   	ret    
c0026af5:	8d 76 00             	lea    esi,[esi+0x0]
c0026af8:	89 f9                	mov    ecx,edi
c0026afa:	85 ff                	test   edi,edi
c0026afc:	75 0b                	jne    c0026b09 <__udivdi3+0x45>
c0026afe:	b8 01 00 00 00       	mov    eax,0x1
c0026b03:	31 d2                	xor    edx,edx
c0026b05:	f7 f7                	div    edi
c0026b07:	89 c1                	mov    ecx,eax
c0026b09:	31 d2                	xor    edx,edx
c0026b0b:	89 f0                	mov    eax,esi
c0026b0d:	f7 f1                	div    ecx
c0026b0f:	89 c3                	mov    ebx,eax
c0026b11:	89 e8                	mov    eax,ebp
c0026b13:	f7 f1                	div    ecx
c0026b15:	89 da                	mov    edx,ebx
c0026b17:	83 c4 1c             	add    esp,0x1c
c0026b1a:	5b                   	pop    ebx
c0026b1b:	5e                   	pop    esi
c0026b1c:	5f                   	pop    edi
c0026b1d:	5d                   	pop    ebp
c0026b1e:	c3                   	ret    
c0026b1f:	90                   	nop
c0026b20:	39 f2                	cmp    edx,esi
c0026b22:	77 1c                	ja     c0026b40 <__udivdi3+0x7c>
c0026b24:	0f bd da             	bsr    ebx,edx
c0026b27:	83 f3 1f             	xor    ebx,0x1f
c0026b2a:	75 24                	jne    c0026b50 <__udivdi3+0x8c>
c0026b2c:	39 f2                	cmp    edx,esi
c0026b2e:	72 08                	jb     c0026b38 <__udivdi3+0x74>
c0026b30:	39 ef                	cmp    edi,ebp
c0026b32:	0f 87 84 00 00 00    	ja     c0026bbc <__udivdi3+0xf8>
c0026b38:	b8 01 00 00 00       	mov    eax,0x1
c0026b3d:	eb ac                	jmp    c0026aeb <__udivdi3+0x27>
c0026b3f:	90                   	nop
c0026b40:	31 db                	xor    ebx,ebx
c0026b42:	31 c0                	xor    eax,eax
c0026b44:	89 da                	mov    edx,ebx
c0026b46:	83 c4 1c             	add    esp,0x1c
c0026b49:	5b                   	pop    ebx
c0026b4a:	5e                   	pop    esi
c0026b4b:	5f                   	pop    edi
c0026b4c:	5d                   	pop    ebp
c0026b4d:	c3                   	ret    
c0026b4e:	66 90                	xchg   ax,ax
c0026b50:	b8 20 00 00 00       	mov    eax,0x20
c0026b55:	29 d8                	sub    eax,ebx
c0026b57:	88 d9                	mov    cl,bl
c0026b59:	d3 e2                	shl    edx,cl
c0026b5b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026b5f:	89 fa                	mov    edx,edi
c0026b61:	88 c1                	mov    cl,al
c0026b63:	d3 ea                	shr    edx,cl
c0026b65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b69:	09 d1                	or     ecx,edx
c0026b6b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b6f:	88 d9                	mov    cl,bl
c0026b71:	d3 e7                	shl    edi,cl
c0026b73:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b77:	89 f7                	mov    edi,esi
c0026b79:	88 c1                	mov    cl,al
c0026b7b:	d3 ef                	shr    edi,cl
c0026b7d:	88 d9                	mov    cl,bl
c0026b7f:	d3 e6                	shl    esi,cl
c0026b81:	89 ea                	mov    edx,ebp
c0026b83:	88 c1                	mov    cl,al
c0026b85:	d3 ea                	shr    edx,cl
c0026b87:	09 d6                	or     esi,edx
c0026b89:	89 f0                	mov    eax,esi
c0026b8b:	89 fa                	mov    edx,edi
c0026b8d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b91:	89 d7                	mov    edi,edx
c0026b93:	89 c6                	mov    esi,eax
c0026b95:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b99:	39 d7                	cmp    edi,edx
c0026b9b:	72 13                	jb     c0026bb0 <__udivdi3+0xec>
c0026b9d:	74 09                	je     c0026ba8 <__udivdi3+0xe4>
c0026b9f:	89 f0                	mov    eax,esi
c0026ba1:	31 db                	xor    ebx,ebx
c0026ba3:	e9 43 ff ff ff       	jmp    c0026aeb <__udivdi3+0x27>
c0026ba8:	88 d9                	mov    cl,bl
c0026baa:	d3 e5                	shl    ebp,cl
c0026bac:	39 c5                	cmp    ebp,eax
c0026bae:	73 ef                	jae    c0026b9f <__udivdi3+0xdb>
c0026bb0:	8d 46 ff             	lea    eax,[esi-0x1]
c0026bb3:	31 db                	xor    ebx,ebx
c0026bb5:	e9 31 ff ff ff       	jmp    c0026aeb <__udivdi3+0x27>
c0026bba:	66 90                	xchg   ax,ax
c0026bbc:	31 c0                	xor    eax,eax
c0026bbe:	e9 28 ff ff ff       	jmp    c0026aeb <__udivdi3+0x27>
c0026bc3:	90                   	nop

c0026bc4 <__umoddi3>:
c0026bc4:	55                   	push   ebp
c0026bc5:	57                   	push   edi
c0026bc6:	56                   	push   esi
c0026bc7:	53                   	push   ebx
c0026bc8:	83 ec 1c             	sub    esp,0x1c
c0026bcb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026bcf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026bd3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026bd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026bdb:	89 da                	mov    edx,ebx
c0026bdd:	85 c0                	test   eax,eax
c0026bdf:	75 37                	jne    c0026c18 <__umoddi3+0x54>
c0026be1:	39 df                	cmp    edi,ebx
c0026be3:	76 13                	jbe    c0026bf8 <__umoddi3+0x34>
c0026be5:	89 f0                	mov    eax,esi
c0026be7:	f7 f7                	div    edi
c0026be9:	89 d0                	mov    eax,edx
c0026beb:	31 d2                	xor    edx,edx
c0026bed:	83 c4 1c             	add    esp,0x1c
c0026bf0:	5b                   	pop    ebx
c0026bf1:	5e                   	pop    esi
c0026bf2:	5f                   	pop    edi
c0026bf3:	5d                   	pop    ebp
c0026bf4:	c3                   	ret    
c0026bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0026bf8:	89 fd                	mov    ebp,edi
c0026bfa:	85 ff                	test   edi,edi
c0026bfc:	75 0b                	jne    c0026c09 <__umoddi3+0x45>
c0026bfe:	b8 01 00 00 00       	mov    eax,0x1
c0026c03:	31 d2                	xor    edx,edx
c0026c05:	f7 f7                	div    edi
c0026c07:	89 c5                	mov    ebp,eax
c0026c09:	89 d8                	mov    eax,ebx
c0026c0b:	31 d2                	xor    edx,edx
c0026c0d:	f7 f5                	div    ebp
c0026c0f:	89 f0                	mov    eax,esi
c0026c11:	f7 f5                	div    ebp
c0026c13:	89 d0                	mov    eax,edx
c0026c15:	eb d4                	jmp    c0026beb <__umoddi3+0x27>
c0026c17:	90                   	nop
c0026c18:	89 f1                	mov    ecx,esi
c0026c1a:	39 d8                	cmp    eax,ebx
c0026c1c:	76 0a                	jbe    c0026c28 <__umoddi3+0x64>
c0026c1e:	89 f0                	mov    eax,esi
c0026c20:	83 c4 1c             	add    esp,0x1c
c0026c23:	5b                   	pop    ebx
c0026c24:	5e                   	pop    esi
c0026c25:	5f                   	pop    edi
c0026c26:	5d                   	pop    ebp
c0026c27:	c3                   	ret    
c0026c28:	0f bd e8             	bsr    ebp,eax
c0026c2b:	83 f5 1f             	xor    ebp,0x1f
c0026c2e:	75 1c                	jne    c0026c4c <__umoddi3+0x88>
c0026c30:	39 d8                	cmp    eax,ebx
c0026c32:	72 04                	jb     c0026c38 <__umoddi3+0x74>
c0026c34:	39 f7                	cmp    edi,esi
c0026c36:	77 08                	ja     c0026c40 <__umoddi3+0x7c>
c0026c38:	89 da                	mov    edx,ebx
c0026c3a:	29 fe                	sub    esi,edi
c0026c3c:	19 c2                	sbb    edx,eax
c0026c3e:	89 f1                	mov    ecx,esi
c0026c40:	89 c8                	mov    eax,ecx
c0026c42:	83 c4 1c             	add    esp,0x1c
c0026c45:	5b                   	pop    ebx
c0026c46:	5e                   	pop    esi
c0026c47:	5f                   	pop    edi
c0026c48:	5d                   	pop    ebp
c0026c49:	c3                   	ret    
c0026c4a:	66 90                	xchg   ax,ax
c0026c4c:	ba 20 00 00 00       	mov    edx,0x20
c0026c51:	29 ea                	sub    edx,ebp
c0026c53:	89 e9                	mov    ecx,ebp
c0026c55:	d3 e0                	shl    eax,cl
c0026c57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c5b:	89 f8                	mov    eax,edi
c0026c5d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026c61:	88 d1                	mov    cl,dl
c0026c63:	d3 e8                	shr    eax,cl
c0026c65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026c69:	09 c1                	or     ecx,eax
c0026c6b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026c6f:	89 e9                	mov    ecx,ebp
c0026c71:	d3 e7                	shl    edi,cl
c0026c73:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026c77:	89 d8                	mov    eax,ebx
c0026c79:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026c7d:	88 d1                	mov    cl,dl
c0026c7f:	d3 e8                	shr    eax,cl
c0026c81:	89 c7                	mov    edi,eax
c0026c83:	89 e9                	mov    ecx,ebp
c0026c85:	d3 e3                	shl    ebx,cl
c0026c87:	89 f0                	mov    eax,esi
c0026c89:	88 d1                	mov    cl,dl
c0026c8b:	d3 e8                	shr    eax,cl
c0026c8d:	09 d8                	or     eax,ebx
c0026c8f:	89 e9                	mov    ecx,ebp
c0026c91:	d3 e6                	shl    esi,cl
c0026c93:	89 f3                	mov    ebx,esi
c0026c95:	89 fa                	mov    edx,edi
c0026c97:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c9b:	89 d1                	mov    ecx,edx
c0026c9d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ca1:	89 c6                	mov    esi,eax
c0026ca3:	89 d7                	mov    edi,edx
c0026ca5:	39 d1                	cmp    ecx,edx
c0026ca7:	72 27                	jb     c0026cd0 <__umoddi3+0x10c>
c0026ca9:	74 21                	je     c0026ccc <__umoddi3+0x108>
c0026cab:	89 ca                	mov    edx,ecx
c0026cad:	29 f3                	sub    ebx,esi
c0026caf:	19 fa                	sbb    edx,edi
c0026cb1:	89 d0                	mov    eax,edx
c0026cb3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026cb7:	d3 e0                	shl    eax,cl
c0026cb9:	89 e9                	mov    ecx,ebp
c0026cbb:	d3 eb                	shr    ebx,cl
c0026cbd:	09 d8                	or     eax,ebx
c0026cbf:	d3 ea                	shr    edx,cl
c0026cc1:	83 c4 1c             	add    esp,0x1c
c0026cc4:	5b                   	pop    ebx
c0026cc5:	5e                   	pop    esi
c0026cc6:	5f                   	pop    edi
c0026cc7:	5d                   	pop    ebp
c0026cc8:	c3                   	ret    
c0026cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0026ccc:	39 c3                	cmp    ebx,eax
c0026cce:	73 db                	jae    c0026cab <__umoddi3+0xe7>
c0026cd0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026cd4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026cd8:	89 d7                	mov    edi,edx
c0026cda:	89 c6                	mov    esi,eax
c0026cdc:	eb cd                	jmp    c0026cab <__umoddi3+0xe7>

c0026cde <__addsf3>:
c0026cde:	55                   	push   ebp
c0026cdf:	89 e5                	mov    ebp,esp
c0026ce1:	57                   	push   edi
c0026ce2:	56                   	push   esi
c0026ce3:	53                   	push   ebx
c0026ce4:	83 ec 08             	sub    esp,0x8
c0026ce7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026cea:	89 fa                	mov    edx,edi
c0026cec:	89 f8                	mov    eax,edi
c0026cee:	c1 f8 17             	sar    eax,0x17
c0026cf1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026cf4:	c1 e2 08             	shl    edx,0x8
c0026cf7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026cfd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026d00:	89 de                	mov    esi,ebx
c0026d02:	c1 fe 17             	sar    esi,0x17
c0026d05:	c1 e3 08             	shl    ebx,0x8
c0026d08:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026d0e:	31 f0                	xor    eax,esi
c0026d10:	0f 88 3b 01 00 00    	js     c0026e51 <__addsf3+0x173>
c0026d16:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026d19:	29 f1                	sub    ecx,esi
c0026d1b:	85 c9                	test   ecx,ecx
c0026d1d:	7e 54                	jle    c0026d73 <__addsf3+0x95>
c0026d1f:	89 f0                	mov    eax,esi
c0026d21:	84 c0                	test   al,al
c0026d23:	75 10                	jne    c0026d35 <__addsf3+0x57>
c0026d25:	85 db                	test   ebx,ebx
c0026d27:	0f 84 aa 02 00 00    	je     c0026fd7 <__addsf3+0x2f9>
c0026d2d:	49                   	dec    ecx
c0026d2e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d31:	74 38                	je     c0026d6b <__addsf3+0x8d>
c0026d33:	eb 13                	jmp    c0026d48 <__addsf3+0x6a>
c0026d35:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d38:	f7 d0                	not    eax
c0026d3a:	84 c0                	test   al,al
c0026d3c:	0f 84 95 02 00 00    	je     c0026fd7 <__addsf3+0x2f9>
c0026d42:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d48:	83 f9 1f             	cmp    ecx,0x1f
c0026d4b:	0f 8f 86 02 00 00    	jg     c0026fd7 <__addsf3+0x2f9>
c0026d51:	89 de                	mov    esi,ebx
c0026d53:	d3 ee                	shr    esi,cl
c0026d55:	b8 20 00 00 00       	mov    eax,0x20
c0026d5a:	29 c8                	sub    eax,ecx
c0026d5c:	89 c1                	mov    ecx,eax
c0026d5e:	d3 e3                	shl    ebx,cl
c0026d60:	31 c0                	xor    eax,eax
c0026d62:	85 db                	test   ebx,ebx
c0026d64:	0f 95 c0             	setne  al
c0026d67:	09 f0                	or     eax,esi
c0026d69:	01 d0                	add    eax,edx
c0026d6b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d6e:	e9 b6 00 00 00       	jmp    c0026e29 <__addsf3+0x14b>
c0026d73:	74 5c                	je     c0026dd1 <__addsf3+0xf3>
c0026d75:	89 f1                	mov    ecx,esi
c0026d77:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026d7a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d7d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d81:	75 14                	jne    c0026d97 <__addsf3+0xb9>
c0026d83:	85 d2                	test   edx,edx
c0026d85:	0f 84 4c 02 00 00    	je     c0026fd7 <__addsf3+0x2f9>
c0026d8b:	49                   	dec    ecx
c0026d8c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d8f:	0f 84 94 00 00 00    	je     c0026e29 <__addsf3+0x14b>
c0026d95:	eb 12                	jmp    c0026da9 <__addsf3+0xcb>
c0026d97:	89 f0                	mov    eax,esi
c0026d99:	f7 d0                	not    eax
c0026d9b:	84 c0                	test   al,al
c0026d9d:	0f 84 34 02 00 00    	je     c0026fd7 <__addsf3+0x2f9>
c0026da3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026da9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dac:	83 f9 1f             	cmp    ecx,0x1f
c0026daf:	0f 8f 22 02 00 00    	jg     c0026fd7 <__addsf3+0x2f9>
c0026db5:	89 d7                	mov    edi,edx
c0026db7:	d3 ef                	shr    edi,cl
c0026db9:	b8 20 00 00 00       	mov    eax,0x20
c0026dbe:	29 c8                	sub    eax,ecx
c0026dc0:	89 c1                	mov    ecx,eax
c0026dc2:	d3 e2                	shl    edx,cl
c0026dc4:	31 c0                	xor    eax,eax
c0026dc6:	85 d2                	test   edx,edx
c0026dc8:	0f 95 c0             	setne  al
c0026dcb:	09 f8                	or     eax,edi
c0026dcd:	01 d8                	add    eax,ebx
c0026dcf:	eb 58                	jmp    c0026e29 <__addsf3+0x14b>
c0026dd1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026dd4:	8d 70 01             	lea    esi,[eax+0x1]
c0026dd7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026ddd:	75 32                	jne    c0026e11 <__addsf3+0x133>
c0026ddf:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026de3:	75 1f                	jne    c0026e04 <__addsf3+0x126>
c0026de5:	85 d2                	test   edx,edx
c0026de7:	0f 84 e0 01 00 00    	je     c0026fcd <__addsf3+0x2ef>
c0026ded:	85 db                	test   ebx,ebx
c0026def:	0f 84 e2 01 00 00    	je     c0026fd7 <__addsf3+0x2f9>
c0026df5:	89 d0                	mov    eax,edx
c0026df7:	01 d8                	add    eax,ebx
c0026df9:	0f 89 a9 01 00 00    	jns    c0026fa8 <__addsf3+0x2ca>
c0026dff:	e9 9d 01 00 00       	jmp    c0026fa1 <__addsf3+0x2c3>
c0026e04:	85 d2                	test   edx,edx
c0026e06:	0f 85 cb 01 00 00    	jne    c0026fd7 <__addsf3+0x2f9>
c0026e0c:	e9 bc 01 00 00       	jmp    c0026fcd <__addsf3+0x2ef>
c0026e11:	31 c0                	xor    eax,eax
c0026e13:	89 f1                	mov    ecx,esi
c0026e15:	f7 d1                	not    ecx
c0026e17:	84 c9                	test   cl,cl
c0026e19:	0f 84 90 01 00 00    	je     c0026faf <__addsf3+0x2d1>
c0026e1f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026e22:	d1 e8                	shr    eax,1
c0026e24:	e9 86 01 00 00       	jmp    c0026faf <__addsf3+0x2d1>
c0026e29:	85 c0                	test   eax,eax
c0026e2b:	0f 89 7e 01 00 00    	jns    c0026faf <__addsf3+0x2d1>
c0026e31:	46                   	inc    esi
c0026e32:	89 f2                	mov    edx,esi
c0026e34:	f7 d2                	not    edx
c0026e36:	84 d2                	test   dl,dl
c0026e38:	0f 84 6f 01 00 00    	je     c0026fad <__addsf3+0x2cf>
c0026e3e:	89 c2                	mov    edx,eax
c0026e40:	83 e2 01             	and    edx,0x1
c0026e43:	d1 e8                	shr    eax,1
c0026e45:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026e4a:	09 d0                	or     eax,edx
c0026e4c:	e9 5e 01 00 00       	jmp    c0026faf <__addsf3+0x2d1>
c0026e51:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026e55:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026e58:	89 f0                	mov    eax,esi
c0026e5a:	0f b6 c0             	movzx  eax,al
c0026e5d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026e60:	29 c1                	sub    ecx,eax
c0026e62:	85 c9                	test   ecx,ecx
c0026e64:	7e 55                	jle    c0026ebb <__addsf3+0x1dd>
c0026e66:	85 c0                	test   eax,eax
c0026e68:	75 11                	jne    c0026e7b <__addsf3+0x19d>
c0026e6a:	85 db                	test   ebx,ebx
c0026e6c:	0f 84 65 01 00 00    	je     c0026fd7 <__addsf3+0x2f9>
c0026e72:	49                   	dec    ecx
c0026e73:	75 19                	jne    c0026e8e <__addsf3+0x1b0>
c0026e75:	89 d0                	mov    eax,edx
c0026e77:	29 d8                	sub    eax,ebx
c0026e79:	eb 38                	jmp    c0026eb3 <__addsf3+0x1d5>
c0026e7b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e7e:	f7 d0                	not    eax
c0026e80:	84 c0                	test   al,al
c0026e82:	0f 84 4f 01 00 00    	je     c0026fd7 <__addsf3+0x2f9>
c0026e88:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e8e:	83 f9 1f             	cmp    ecx,0x1f
c0026e91:	0f 8f 40 01 00 00    	jg     c0026fd7 <__addsf3+0x2f9>
c0026e97:	89 de                	mov    esi,ebx
c0026e99:	d3 ee                	shr    esi,cl
c0026e9b:	b8 20 00 00 00       	mov    eax,0x20
c0026ea0:	29 c8                	sub    eax,ecx
c0026ea2:	89 c1                	mov    ecx,eax
c0026ea4:	d3 e3                	shl    ebx,cl
c0026ea6:	31 c0                	xor    eax,eax
c0026ea8:	85 db                	test   ebx,ebx
c0026eaa:	0f 95 c0             	setne  al
c0026ead:	09 f0                	or     eax,esi
c0026eaf:	29 c2                	sub    edx,eax
c0026eb1:	89 d0                	mov    eax,edx
c0026eb3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026eb6:	e9 af 00 00 00       	jmp    c0026f6a <__addsf3+0x28c>
c0026ebb:	74 5c                	je     c0026f19 <__addsf3+0x23b>
c0026ebd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026ec0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ec3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ec7:	75 14                	jne    c0026edd <__addsf3+0x1ff>
c0026ec9:	85 d2                	test   edx,edx
c0026ecb:	0f 84 06 01 00 00    	je     c0026fd7 <__addsf3+0x2f9>
c0026ed1:	48                   	dec    eax
c0026ed2:	75 1b                	jne    c0026eef <__addsf3+0x211>
c0026ed4:	89 d8                	mov    eax,ebx
c0026ed6:	29 d0                	sub    eax,edx
c0026ed8:	e9 8d 00 00 00       	jmp    c0026f6a <__addsf3+0x28c>
c0026edd:	89 f1                	mov    ecx,esi
c0026edf:	f7 d1                	not    ecx
c0026ee1:	84 c9                	test   cl,cl
c0026ee3:	0f 84 ee 00 00 00    	je     c0026fd7 <__addsf3+0x2f9>
c0026ee9:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026eef:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ef2:	83 f8 1f             	cmp    eax,0x1f
c0026ef5:	0f 8f dc 00 00 00    	jg     c0026fd7 <__addsf3+0x2f9>
c0026efb:	89 d7                	mov    edi,edx
c0026efd:	88 c1                	mov    cl,al
c0026eff:	d3 ef                	shr    edi,cl
c0026f01:	b9 20 00 00 00       	mov    ecx,0x20
c0026f06:	29 c1                	sub    ecx,eax
c0026f08:	d3 e2                	shl    edx,cl
c0026f0a:	31 c0                	xor    eax,eax
c0026f0c:	85 d2                	test   edx,edx
c0026f0e:	0f 95 c0             	setne  al
c0026f11:	09 f8                	or     eax,edi
c0026f13:	29 c3                	sub    ebx,eax
c0026f15:	89 d8                	mov    eax,ebx
c0026f17:	eb 51                	jmp    c0026f6a <__addsf3+0x28c>
c0026f19:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026f1c:	40                   	inc    eax
c0026f1d:	a8 fe                	test   al,0xfe
c0026f1f:	75 3d                	jne    c0026f5e <__addsf3+0x280>
c0026f21:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026f25:	0f 85 a7 00 00 00    	jne    c0026fd2 <__addsf3+0x2f4>
c0026f2b:	85 d2                	test   edx,edx
c0026f2d:	75 12                	jne    c0026f41 <__addsf3+0x263>
c0026f2f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f32:	85 db                	test   ebx,ebx
c0026f34:	0f 85 9d 00 00 00    	jne    c0026fd7 <__addsf3+0x2f9>
c0026f3a:	31 ff                	xor    edi,edi
c0026f3c:	e9 96 00 00 00       	jmp    c0026fd7 <__addsf3+0x2f9>
c0026f41:	85 db                	test   ebx,ebx
c0026f43:	0f 84 8e 00 00 00    	je     c0026fd7 <__addsf3+0x2f9>
c0026f49:	89 d0                	mov    eax,edx
c0026f4b:	29 d8                	sub    eax,ebx
c0026f4d:	79 06                	jns    c0026f55 <__addsf3+0x277>
c0026f4f:	89 d8                	mov    eax,ebx
c0026f51:	29 d0                	sub    eax,edx
c0026f53:	eb 5a                	jmp    c0026faf <__addsf3+0x2d1>
c0026f55:	bf 00 00 00 00       	mov    edi,0x0
c0026f5a:	74 7b                	je     c0026fd7 <__addsf3+0x2f9>
c0026f5c:	eb 4a                	jmp    c0026fa8 <__addsf3+0x2ca>
c0026f5e:	89 d0                	mov    eax,edx
c0026f60:	29 d8                	sub    eax,ebx
c0026f62:	79 12                	jns    c0026f76 <__addsf3+0x298>
c0026f64:	89 d8                	mov    eax,ebx
c0026f66:	29 d0                	sub    eax,edx
c0026f68:	eb 09                	jmp    c0026f73 <__addsf3+0x295>
c0026f6a:	85 c0                	test   eax,eax
c0026f6c:	79 41                	jns    c0026faf <__addsf3+0x2d1>
c0026f6e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f73:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026f76:	31 f6                	xor    esi,esi
c0026f78:	85 c0                	test   eax,eax
c0026f7a:	74 33                	je     c0026faf <__addsf3+0x2d1>
c0026f7c:	0f bd c8             	bsr    ecx,eax
c0026f7f:	83 f1 1f             	xor    ecx,0x1f
c0026f82:	d3 e0                	shl    eax,cl
c0026f84:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026f88:	39 ca                	cmp    edx,ecx
c0026f8a:	7f 10                	jg     c0026f9c <__addsf3+0x2be>
c0026f8c:	29 d1                	sub    ecx,edx
c0026f8e:	41                   	inc    ecx
c0026f8f:	d3 e8                	shr    eax,cl
c0026f91:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f94:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026f9a:	eb 13                	jmp    c0026faf <__addsf3+0x2d1>
c0026f9c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f9f:	29 ce                	sub    esi,ecx
c0026fa1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fa6:	eb 07                	jmp    c0026faf <__addsf3+0x2d1>
c0026fa8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026fab:	eb 02                	jmp    c0026faf <__addsf3+0x2d1>
c0026fad:	31 c0                	xor    eax,eax
c0026faf:	89 c2                	mov    edx,eax
c0026fb1:	c1 ea 08             	shr    edx,0x8
c0026fb4:	a8 7f                	test   al,0x7f
c0026fb6:	0f 95 c1             	setne  cl
c0026fb9:	09 d1                	or     ecx,edx
c0026fbb:	83 e1 01             	and    ecx,0x1
c0026fbe:	c1 e8 07             	shr    eax,0x7
c0026fc1:	21 c8                	and    eax,ecx
c0026fc3:	c1 e6 17             	shl    esi,0x17
c0026fc6:	09 d6                	or     esi,edx
c0026fc8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026fcb:	eb 0a                	jmp    c0026fd7 <__addsf3+0x2f9>
c0026fcd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026fd0:	eb 05                	jmp    c0026fd7 <__addsf3+0x2f9>
c0026fd2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026fd7:	89 f8                	mov    eax,edi
c0026fd9:	5a                   	pop    edx
c0026fda:	59                   	pop    ecx
c0026fdb:	5b                   	pop    ebx
c0026fdc:	5e                   	pop    esi
c0026fdd:	5f                   	pop    edi
c0026fde:	5d                   	pop    ebp
c0026fdf:	c3                   	ret    

c0026fe0 <__subsf3>:
c0026fe0:	55                   	push   ebp
c0026fe1:	89 e5                	mov    ebp,esp
c0026fe3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fe6:	05 00 00 00 80       	add    eax,0x80000000
c0026feb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026fee:	5d                   	pop    ebp
c0026fef:	e9 ea fc ff ff       	jmp    c0026cde <__addsf3>

c0026ff4 <__negsf2>:
c0026ff4:	55                   	push   ebp
c0026ff5:	89 e5                	mov    ebp,esp
c0026ff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ffa:	05 00 00 00 80       	add    eax,0x80000000
c0026fff:	5d                   	pop    ebp
c0027000:	c3                   	ret    

c0027001 <__mulsf3>:
c0027001:	55                   	push   ebp
c0027002:	89 e5                	mov    ebp,esp
c0027004:	57                   	push   edi
c0027005:	56                   	push   esi
c0027006:	53                   	push   ebx
c0027007:	83 ec 1c             	sub    esp,0x1c
c002700a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002700d:	89 f0                	mov    eax,esi
c002700f:	89 f1                	mov    ecx,esi
c0027011:	c1 f9 17             	sar    ecx,0x17
c0027014:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027017:	c1 e0 08             	shl    eax,0x8
c002701a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002701f:	89 c1                	mov    ecx,eax
c0027021:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027024:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027027:	89 c7                	mov    edi,eax
c0027029:	c1 ff 17             	sar    edi,0x17
c002702c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027030:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027033:	89 f8                	mov    eax,edi
c0027035:	0f b6 c0             	movzx  eax,al
c0027038:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002703b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002703f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027042:	42                   	inc    edx
c0027043:	80 e2 fe             	and    dl,0xfe
c0027046:	75 7b                	jne    c00270c3 <__mulsf3+0xc2>
c0027048:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002704c:	74 54                	je     c00270a2 <__mulsf3+0xa1>
c002704e:	85 c9                	test   ecx,ecx
c0027050:	0f 85 64 01 00 00    	jne    c00271ba <__mulsf3+0x1b9>
c0027056:	8d 57 01             	lea    edx,[edi+0x1]
c0027059:	80 e2 fe             	and    dl,0xfe
c002705c:	75 1f                	jne    c002707d <__mulsf3+0x7c>
c002705e:	85 c0                	test   eax,eax
c0027060:	b8 00 00 00 00       	mov    eax,0x0
c0027065:	74 29                	je     c0027090 <__mulsf3+0x8f>
c0027067:	53                   	push   ebx
c0027068:	53                   	push   ebx
c0027069:	50                   	push   eax
c002706a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002706d:	e8 96 05 00 00       	call   c0027608 <__nesf2>
c0027072:	83 c4 10             	add    esp,0x10
c0027075:	85 c0                	test   eax,eax
c0027077:	0f 85 3a 01 00 00    	jne    c00271b7 <__mulsf3+0x1b6>
c002707d:	85 ff                	test   edi,edi
c002707f:	0f 89 35 01 00 00    	jns    c00271ba <__mulsf3+0x1b9>
c0027085:	81 c6 00 00 00 80    	add    esi,0x80000000
c002708b:	e9 2a 01 00 00       	jmp    c00271ba <__mulsf3+0x1b9>
c0027090:	51                   	push   ecx
c0027091:	51                   	push   ecx
c0027092:	50                   	push   eax
c0027093:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027096:	e8 6d 05 00 00       	call   c0027608 <__nesf2>
c002709b:	83 c4 10             	add    esp,0x10
c002709e:	85 c0                	test   eax,eax
c00270a0:	eb 15                	jmp    c00270b7 <__mulsf3+0xb6>
c00270a2:	85 c9                	test   ecx,ecx
c00270a4:	74 0b                	je     c00270b1 <__mulsf3+0xb0>
c00270a6:	8d 53 ff             	lea    edx,[ebx-0x1]
c00270a9:	01 c9                	add    ecx,ecx
c00270ab:	78 16                	js     c00270c3 <__mulsf3+0xc2>
c00270ad:	89 d3                	mov    ebx,edx
c00270af:	eb f5                	jmp    c00270a6 <__mulsf3+0xa5>
c00270b1:	89 f8                	mov    eax,edi
c00270b3:	f7 d0                	not    eax
c00270b5:	84 c0                	test   al,al
c00270b7:	75 c4                	jne    c002707d <__mulsf3+0x7c>
c00270b9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00270be:	e9 f7 00 00 00       	jmp    c00271ba <__mulsf3+0x1b9>
c00270c3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00270c6:	c1 e6 08             	shl    esi,0x8
c00270c9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00270cf:	8d 57 01             	lea    edx,[edi+0x1]
c00270d2:	80 e2 fe             	and    dl,0xfe
c00270d5:	75 63                	jne    c002713a <__mulsf3+0x139>
c00270d7:	85 c0                	test   eax,eax
c00270d9:	74 2f                	je     c002710a <__mulsf3+0x109>
c00270db:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270df:	0f 89 d2 00 00 00    	jns    c00271b7 <__mulsf3+0x1b6>
c00270e5:	52                   	push   edx
c00270e6:	52                   	push   edx
c00270e7:	6a 00                	push   0x0
c00270e9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270ec:	e8 dc 04 00 00       	call   c00275cd <__eqsf2>
c00270f1:	83 c4 10             	add    esp,0x10
c00270f4:	85 c0                	test   eax,eax
c00270f6:	0f 85 bb 00 00 00    	jne    c00271b7 <__mulsf3+0x1b6>
c00270fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270ff:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027105:	e9 b0 00 00 00       	jmp    c00271ba <__mulsf3+0x1b9>
c002710a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002710d:	50                   	push   eax
c002710e:	50                   	push   eax
c002710f:	6a 00                	push   0x0
c0027111:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027114:	e8 b4 04 00 00       	call   c00275cd <__eqsf2>
c0027119:	83 c4 10             	add    esp,0x10
c002711c:	85 c0                	test   eax,eax
c002711e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027121:	75 0c                	jne    c002712f <__mulsf3+0x12e>
c0027123:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027127:	0f 89 8a 00 00 00    	jns    c00271b7 <__mulsf3+0x1b6>
c002712d:	eb cd                	jmp    c00270fc <__mulsf3+0xfb>
c002712f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027132:	01 f6                	add    esi,esi
c0027134:	78 04                	js     c002713a <__mulsf3+0x139>
c0027136:	89 c3                	mov    ebx,eax
c0027138:	eb f5                	jmp    c002712f <__mulsf3+0x12e>
c002713a:	89 c8                	mov    eax,ecx
c002713c:	0d 00 00 00 80       	or     eax,0x80000000
c0027141:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027147:	f7 e6                	mul    esi
c0027149:	85 c0                	test   eax,eax
c002714b:	0f 95 c0             	setne  al
c002714e:	0f b6 c0             	movzx  eax,al
c0027151:	09 c2                	or     edx,eax
c0027153:	78 03                	js     c0027158 <__mulsf3+0x157>
c0027155:	01 d2                	add    edx,edx
c0027157:	4b                   	dec    ebx
c0027158:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002715e:	7f 22                	jg     c0027182 <__mulsf3+0x181>
c0027160:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027166:	85 db                	test   ebx,ebx
c0027168:	7f 23                	jg     c002718d <__mulsf3+0x18c>
c002716a:	83 fb e9             	cmp    ebx,0xffffffe9
c002716d:	7c 1a                	jl     c0027189 <__mulsf3+0x188>
c002716f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027175:	b9 01 00 00 00       	mov    ecx,0x1
c002717a:	29 d9                	sub    ecx,ebx
c002717c:	d3 ea                	shr    edx,cl
c002717e:	31 db                	xor    ebx,ebx
c0027180:	eb 0b                	jmp    c002718d <__mulsf3+0x18c>
c0027182:	bb ff 00 00 00       	mov    ebx,0xff
c0027187:	eb 02                	jmp    c002718b <__mulsf3+0x18a>
c0027189:	31 db                	xor    ebx,ebx
c002718b:	31 d2                	xor    edx,edx
c002718d:	89 d0                	mov    eax,edx
c002718f:	c1 e8 08             	shr    eax,0x8
c0027192:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027195:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002719b:	09 fb                	or     ebx,edi
c002719d:	c1 e3 17             	shl    ebx,0x17
c00271a0:	09 c3                	or     ebx,eax
c00271a2:	f6 c2 7f             	test   dl,0x7f
c00271a5:	0f 95 c1             	setne  cl
c00271a8:	09 c8                	or     eax,ecx
c00271aa:	83 e0 01             	and    eax,0x1
c00271ad:	c1 ea 07             	shr    edx,0x7
c00271b0:	21 c2                	and    edx,eax
c00271b2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00271b5:	eb 03                	jmp    c00271ba <__mulsf3+0x1b9>
c00271b7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00271ba:	89 f0                	mov    eax,esi
c00271bc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00271bf:	5b                   	pop    ebx
c00271c0:	5e                   	pop    esi
c00271c1:	5f                   	pop    edi
c00271c2:	5d                   	pop    ebp
c00271c3:	c3                   	ret    

c00271c4 <__divsf3>:
c00271c4:	55                   	push   ebp
c00271c5:	89 e5                	mov    ebp,esp
c00271c7:	57                   	push   edi
c00271c8:	56                   	push   esi
c00271c9:	53                   	push   ebx
c00271ca:	83 ec 1c             	sub    esp,0x1c
c00271cd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00271d0:	89 d8                	mov    eax,ebx
c00271d2:	89 d9                	mov    ecx,ebx
c00271d4:	c1 f9 17             	sar    ecx,0x17
c00271d7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00271da:	c1 e0 08             	shl    eax,0x8
c00271dd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271e2:	89 c1                	mov    ecx,eax
c00271e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00271e7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00271ea:	89 c7                	mov    edi,eax
c00271ec:	c1 ff 17             	sar    edi,0x17
c00271ef:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00271f3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00271f6:	89 f8                	mov    eax,edi
c00271f8:	0f b6 c0             	movzx  eax,al
c00271fb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00271fe:	29 c6                	sub    esi,eax
c0027200:	83 c6 7f             	add    esi,0x7f
c0027203:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027206:	42                   	inc    edx
c0027207:	80 e2 fe             	and    dl,0xfe
c002720a:	0f 85 9c 00 00 00    	jne    c00272ac <__divsf3+0xe8>
c0027210:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027214:	74 33                	je     c0027249 <__divsf3+0x85>
c0027216:	85 c9                	test   ecx,ecx
c0027218:	0f 85 c7 01 00 00    	jne    c00273e5 <__divsf3+0x221>
c002721e:	8d 57 01             	lea    edx,[edi+0x1]
c0027221:	80 e2 fe             	and    dl,0xfe
c0027224:	75 2f                	jne    c0027255 <__divsf3+0x91>
c0027226:	85 c0                	test   eax,eax
c0027228:	74 2b                	je     c0027255 <__divsf3+0x91>
c002722a:	51                   	push   ecx
c002722b:	51                   	push   ecx
c002722c:	6a 00                	push   0x0
c002722e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027231:	e8 d2 03 00 00       	call   c0027608 <__nesf2>
c0027236:	83 c4 10             	add    esp,0x10
c0027239:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002723c:	85 c0                	test   eax,eax
c002723e:	0f 85 a1 01 00 00    	jne    c00273e5 <__divsf3+0x221>
c0027244:	e9 92 01 00 00       	jmp    c00273db <__divsf3+0x217>
c0027249:	85 c9                	test   ecx,ecx
c002724b:	75 1b                	jne    c0027268 <__divsf3+0xa4>
c002724d:	8d 57 01             	lea    edx,[edi+0x1]
c0027250:	80 e2 fe             	and    dl,0xfe
c0027253:	74 1e                	je     c0027273 <__divsf3+0xaf>
c0027255:	85 ff                	test   edi,edi
c0027257:	0f 89 88 01 00 00    	jns    c00273e5 <__divsf3+0x221>
c002725d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027263:	e9 7d 01 00 00       	jmp    c00273e5 <__divsf3+0x221>
c0027268:	8d 56 ff             	lea    edx,[esi-0x1]
c002726b:	01 c9                	add    ecx,ecx
c002726d:	78 3d                	js     c00272ac <__divsf3+0xe8>
c002726f:	89 d6                	mov    esi,edx
c0027271:	eb f5                	jmp    c0027268 <__divsf3+0xa4>
c0027273:	85 c0                	test   eax,eax
c0027275:	b8 00 00 00 00       	mov    eax,0x0
c002727a:	74 18                	je     c0027294 <__divsf3+0xd0>
c002727c:	52                   	push   edx
c002727d:	52                   	push   edx
c002727e:	50                   	push   eax
c002727f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027282:	e8 81 03 00 00       	call   c0027608 <__nesf2>
c0027287:	83 c4 10             	add    esp,0x10
c002728a:	85 c0                	test   eax,eax
c002728c:	0f 85 50 01 00 00    	jne    c00273e2 <__divsf3+0x21e>
c0027292:	eb c1                	jmp    c0027255 <__divsf3+0x91>
c0027294:	56                   	push   esi
c0027295:	56                   	push   esi
c0027296:	50                   	push   eax
c0027297:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002729a:	e8 69 03 00 00       	call   c0027608 <__nesf2>
c002729f:	83 c4 10             	add    esp,0x10
c00272a2:	85 c0                	test   eax,eax
c00272a4:	0f 84 31 01 00 00    	je     c00273db <__divsf3+0x217>
c00272aa:	eb a9                	jmp    c0027255 <__divsf3+0x91>
c00272ac:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00272af:	c1 e3 08             	shl    ebx,0x8
c00272b2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00272b8:	8d 57 01             	lea    edx,[edi+0x1]
c00272bb:	80 e2 fe             	and    dl,0xfe
c00272be:	75 71                	jne    c0027331 <__divsf3+0x16d>
c00272c0:	85 c0                	test   eax,eax
c00272c2:	ba 00 00 00 00       	mov    edx,0x0
c00272c7:	74 2f                	je     c00272f8 <__divsf3+0x134>
c00272c9:	51                   	push   ecx
c00272ca:	51                   	push   ecx
c00272cb:	52                   	push   edx
c00272cc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272cf:	e8 f9 02 00 00       	call   c00275cd <__eqsf2>
c00272d4:	83 c4 10             	add    esp,0x10
c00272d7:	85 c0                	test   eax,eax
c00272d9:	0f 85 03 01 00 00    	jne    c00273e2 <__divsf3+0x21e>
c00272df:	31 d2                	xor    edx,edx
c00272e1:	89 d3                	mov    ebx,edx
c00272e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00272e6:	31 f8                	xor    eax,edi
c00272e8:	0f 89 f7 00 00 00    	jns    c00273e5 <__divsf3+0x221>
c00272ee:	bb 00 00 00 80       	mov    ebx,0x80000000
c00272f3:	e9 ed 00 00 00       	jmp    c00273e5 <__divsf3+0x221>
c00272f8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00272fb:	50                   	push   eax
c00272fc:	50                   	push   eax
c00272fd:	52                   	push   edx
c00272fe:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027301:	e8 c7 02 00 00       	call   c00275cd <__eqsf2>
c0027306:	83 c4 10             	add    esp,0x10
c0027309:	85 c0                	test   eax,eax
c002730b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002730e:	75 16                	jne    c0027326 <__divsf3+0x162>
c0027310:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027313:	31 fb                	xor    ebx,edi
c0027315:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002731b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027321:	e9 bf 00 00 00       	jmp    c00273e5 <__divsf3+0x221>
c0027326:	8d 46 01             	lea    eax,[esi+0x1]
c0027329:	01 db                	add    ebx,ebx
c002732b:	78 04                	js     c0027331 <__divsf3+0x16d>
c002732d:	89 c6                	mov    esi,eax
c002732f:	eb f5                	jmp    c0027326 <__divsf3+0x162>
c0027331:	89 c8                	mov    eax,ecx
c0027333:	0d 00 00 00 80       	or     eax,0x80000000
c0027338:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002733e:	31 d2                	xor    edx,edx
c0027340:	39 d8                	cmp    eax,ebx
c0027342:	72 07                	jb     c002734b <__divsf3+0x187>
c0027344:	29 d8                	sub    eax,ebx
c0027346:	ba 01 00 00 00       	mov    edx,0x1
c002734b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027352:	01 d2                	add    edx,edx
c0027354:	89 c1                	mov    ecx,eax
c0027356:	01 c0                	add    eax,eax
c0027358:	85 c9                	test   ecx,ecx
c002735a:	78 04                	js     c0027360 <__divsf3+0x19c>
c002735c:	39 c3                	cmp    ebx,eax
c002735e:	77 05                	ja     c0027365 <__divsf3+0x1a1>
c0027360:	29 d8                	sub    eax,ebx
c0027362:	83 ca 01             	or     edx,0x1
c0027365:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027368:	75 e8                	jne    c0027352 <__divsf3+0x18e>
c002736a:	85 c0                	test   eax,eax
c002736c:	0f 95 c0             	setne  al
c002736f:	0f b6 c0             	movzx  eax,al
c0027372:	c1 e2 06             	shl    edx,0x6
c0027375:	09 c2                	or     edx,eax
c0027377:	78 03                	js     c002737c <__divsf3+0x1b8>
c0027379:	01 d2                	add    edx,edx
c002737b:	4e                   	dec    esi
c002737c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027382:	7f 22                	jg     c00273a6 <__divsf3+0x1e2>
c0027384:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002738a:	85 f6                	test   esi,esi
c002738c:	7f 23                	jg     c00273b1 <__divsf3+0x1ed>
c002738e:	83 fe e9             	cmp    esi,0xffffffe9
c0027391:	7c 1a                	jl     c00273ad <__divsf3+0x1e9>
c0027393:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027399:	b9 01 00 00 00       	mov    ecx,0x1
c002739e:	29 f1                	sub    ecx,esi
c00273a0:	d3 ea                	shr    edx,cl
c00273a2:	31 f6                	xor    esi,esi
c00273a4:	eb 0b                	jmp    c00273b1 <__divsf3+0x1ed>
c00273a6:	be ff 00 00 00       	mov    esi,0xff
c00273ab:	eb 02                	jmp    c00273af <__divsf3+0x1eb>
c00273ad:	31 f6                	xor    esi,esi
c00273af:	31 d2                	xor    edx,edx
c00273b1:	89 d0                	mov    eax,edx
c00273b3:	c1 e8 08             	shr    eax,0x8
c00273b6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00273b9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00273bf:	09 fe                	or     esi,edi
c00273c1:	c1 e6 17             	shl    esi,0x17
c00273c4:	09 c6                	or     esi,eax
c00273c6:	f6 c2 7f             	test   dl,0x7f
c00273c9:	0f 95 c1             	setne  cl
c00273cc:	09 c8                	or     eax,ecx
c00273ce:	83 e0 01             	and    eax,0x1
c00273d1:	c1 ea 07             	shr    edx,0x7
c00273d4:	21 c2                	and    edx,eax
c00273d6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00273d9:	eb 0a                	jmp    c00273e5 <__divsf3+0x221>
c00273db:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00273e0:	eb 03                	jmp    c00273e5 <__divsf3+0x221>
c00273e2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00273e5:	89 d8                	mov    eax,ebx
c00273e7:	8d 65 f4             	lea    esp,[ebp-0xc]
c00273ea:	5b                   	pop    ebx
c00273eb:	5e                   	pop    esi
c00273ec:	5f                   	pop    edi
c00273ed:	5d                   	pop    ebp
c00273ee:	c3                   	ret    

c00273ef <__floatsisf>:
c00273ef:	55                   	push   ebp
c00273f0:	89 e5                	mov    ebp,esp
c00273f2:	53                   	push   ebx
c00273f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273f6:	85 d2                	test   edx,edx
c00273f8:	7e 2b                	jle    c0027425 <__floatsisf+0x36>
c00273fa:	0f bd ca             	bsr    ecx,edx
c00273fd:	83 f1 1f             	xor    ecx,0x1f
c0027400:	d3 e2                	shl    edx,cl
c0027402:	89 d0                	mov    eax,edx
c0027404:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027409:	89 c3                	mov    ebx,eax
c002740b:	c1 eb 08             	shr    ebx,0x8
c002740e:	80 e2 7f             	and    dl,0x7f
c0027411:	0f 95 c2             	setne  dl
c0027414:	09 da                	or     edx,ebx
c0027416:	83 e2 01             	and    edx,0x1
c0027419:	c1 e8 07             	shr    eax,0x7
c002741c:	21 c2                	and    edx,eax
c002741e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027423:	eb 32                	jmp    c0027457 <__floatsisf+0x68>
c0027425:	b8 00 00 00 00       	mov    eax,0x0
c002742a:	74 34                	je     c0027460 <__floatsisf+0x71>
c002742c:	f7 da                	neg    edx
c002742e:	0f bd ca             	bsr    ecx,edx
c0027431:	83 f1 1f             	xor    ecx,0x1f
c0027434:	d3 e2                	shl    edx,cl
c0027436:	89 d0                	mov    eax,edx
c0027438:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002743d:	89 c3                	mov    ebx,eax
c002743f:	c1 eb 08             	shr    ebx,0x8
c0027442:	80 e2 7f             	and    dl,0x7f
c0027445:	0f 95 c2             	setne  dl
c0027448:	09 da                	or     edx,ebx
c002744a:	83 e2 01             	and    edx,0x1
c002744d:	c1 e8 07             	shr    eax,0x7
c0027450:	21 c2                	and    edx,eax
c0027452:	b8 9e 01 00 00       	mov    eax,0x19e
c0027457:	29 c8                	sub    eax,ecx
c0027459:	c1 e0 17             	shl    eax,0x17
c002745c:	09 d8                	or     eax,ebx
c002745e:	01 d0                	add    eax,edx
c0027460:	5b                   	pop    ebx
c0027461:	5d                   	pop    ebp
c0027462:	c3                   	ret    

c0027463 <__floatunsisf>:
c0027463:	55                   	push   ebp
c0027464:	89 e5                	mov    ebp,esp
c0027466:	53                   	push   ebx
c0027467:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002746a:	31 c0                	xor    eax,eax
c002746c:	85 d2                	test   edx,edx
c002746e:	74 32                	je     c00274a2 <__floatunsisf+0x3f>
c0027470:	0f bd ca             	bsr    ecx,edx
c0027473:	83 f1 1f             	xor    ecx,0x1f
c0027476:	d3 e2                	shl    edx,cl
c0027478:	89 d0                	mov    eax,edx
c002747a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002747f:	89 c3                	mov    ebx,eax
c0027481:	c1 eb 08             	shr    ebx,0x8
c0027484:	80 e2 7f             	and    dl,0x7f
c0027487:	0f 95 c2             	setne  dl
c002748a:	09 da                	or     edx,ebx
c002748c:	83 e2 01             	and    edx,0x1
c002748f:	c1 e8 07             	shr    eax,0x7
c0027492:	21 c2                	and    edx,eax
c0027494:	b8 9e 00 00 00       	mov    eax,0x9e
c0027499:	29 c8                	sub    eax,ecx
c002749b:	c1 e0 17             	shl    eax,0x17
c002749e:	09 d8                	or     eax,ebx
c00274a0:	01 d0                	add    eax,edx
c00274a2:	5b                   	pop    ebx
c00274a3:	5d                   	pop    ebp
c00274a4:	c3                   	ret    

c00274a5 <__fixsfsi>:
c00274a5:	55                   	push   ebp
c00274a6:	89 e5                	mov    ebp,esp
c00274a8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274ab:	89 d1                	mov    ecx,edx
c00274ad:	c1 e1 08             	shl    ecx,0x8
c00274b0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00274b6:	c1 fa 17             	sar    edx,0x17
c00274b9:	78 1c                	js     c00274d7 <__fixsfsi+0x32>
c00274bb:	83 ea 7f             	sub    edx,0x7f
c00274be:	31 c0                	xor    eax,eax
c00274c0:	83 fa 1e             	cmp    edx,0x1e
c00274c3:	77 40                	ja     c0027505 <__fixsfsi+0x60>
c00274c5:	89 c8                	mov    eax,ecx
c00274c7:	0d 00 00 00 80       	or     eax,0x80000000
c00274cc:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274d1:	29 d1                	sub    ecx,edx
c00274d3:	d3 e8                	shr    eax,cl
c00274d5:	eb 2e                	jmp    c0027505 <__fixsfsi+0x60>
c00274d7:	31 c0                	xor    eax,eax
c00274d9:	81 c2 81 00 00 00    	add    edx,0x81
c00274df:	78 24                	js     c0027505 <__fixsfsi+0x60>
c00274e1:	83 fa 1e             	cmp    edx,0x1e
c00274e4:	7e 09                	jle    c00274ef <__fixsfsi+0x4a>
c00274e6:	83 fa 1f             	cmp    edx,0x1f
c00274e9:	75 18                	jne    c0027503 <__fixsfsi+0x5e>
c00274eb:	85 c9                	test   ecx,ecx
c00274ed:	75 14                	jne    c0027503 <__fixsfsi+0x5e>
c00274ef:	89 c8                	mov    eax,ecx
c00274f1:	0d 00 00 00 80       	or     eax,0x80000000
c00274f6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274fb:	29 d1                	sub    ecx,edx
c00274fd:	d3 e8                	shr    eax,cl
c00274ff:	f7 d8                	neg    eax
c0027501:	eb 02                	jmp    c0027505 <__fixsfsi+0x60>
c0027503:	31 c0                	xor    eax,eax
c0027505:	5d                   	pop    ebp
c0027506:	c3                   	ret    

c0027507 <__fixunssfsi>:
c0027507:	55                   	push   ebp
c0027508:	89 e5                	mov    ebp,esp
c002750a:	53                   	push   ebx
c002750b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002750e:	89 d3                	mov    ebx,edx
c0027510:	c1 fb 17             	sar    ebx,0x17
c0027513:	83 eb 7f             	sub    ebx,0x7f
c0027516:	31 c0                	xor    eax,eax
c0027518:	83 fb 1f             	cmp    ebx,0x1f
c002751b:	77 18                	ja     c0027535 <__fixunssfsi+0x2e>
c002751d:	89 d0                	mov    eax,edx
c002751f:	c1 e0 08             	shl    eax,0x8
c0027522:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027527:	0d 00 00 00 80       	or     eax,0x80000000
c002752c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027531:	29 d9                	sub    ecx,ebx
c0027533:	d3 e8                	shr    eax,cl
c0027535:	5b                   	pop    ebx
c0027536:	5d                   	pop    ebp
c0027537:	c3                   	ret    

c0027538 <__cmpsf2>:
c0027538:	55                   	push   ebp
c0027539:	89 e5                	mov    ebp,esp
c002753b:	57                   	push   edi
c002753c:	56                   	push   esi
c002753d:	53                   	push   ebx
c002753e:	83 ec 24             	sub    esp,0x24
c0027541:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027544:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027547:	e8 4f 10 00 00       	call   c002859b <__truncdfsf2>
c002754c:	5a                   	pop    edx
c002754d:	59                   	pop    ecx
c002754e:	89 c3                	mov    ebx,eax
c0027550:	c1 e8 17             	shr    eax,0x17
c0027553:	0f b6 f0             	movzx  esi,al
c0027556:	89 d8                	mov    eax,ebx
c0027558:	c1 e8 1f             	shr    eax,0x1f
c002755b:	31 c6                	xor    esi,eax
c002755d:	c1 e3 08             	shl    ebx,0x8
c0027560:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027563:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027566:	e8 30 10 00 00       	call   c002859b <__truncdfsf2>
c002756b:	83 c4 10             	add    esp,0x10
c002756e:	89 c1                	mov    ecx,eax
c0027570:	c1 e9 17             	shr    ecx,0x17
c0027573:	0f b6 c9             	movzx  ecx,cl
c0027576:	89 c7                	mov    edi,eax
c0027578:	c1 ef 1f             	shr    edi,0x1f
c002757b:	89 ca                	mov    edx,ecx
c002757d:	31 fa                	xor    edx,edi
c002757f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027582:	c1 e0 08             	shl    eax,0x8
c0027585:	89 c2                	mov    edx,eax
c0027587:	89 d8                	mov    eax,ebx
c0027589:	09 d0                	or     eax,edx
c002758b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027590:	09 f0                	or     eax,esi
c0027592:	75 08                	jne    c002759c <__cmpsf2+0x64>
c0027594:	31 c0                	xor    eax,eax
c0027596:	39 f9                	cmp    ecx,edi
c0027598:	75 0c                	jne    c00275a6 <__cmpsf2+0x6e>
c002759a:	eb 29                	jmp    c00275c5 <__cmpsf2+0x8d>
c002759c:	b8 01 00 00 00       	mov    eax,0x1
c00275a1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00275a4:	7f 1f                	jg     c00275c5 <__cmpsf2+0x8d>
c00275a6:	83 c8 ff             	or     eax,0xffffffff
c00275a9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00275ac:	7c 17                	jl     c00275c5 <__cmpsf2+0x8d>
c00275ae:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00275b4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00275ba:	b8 01 00 00 00       	mov    eax,0x1
c00275bf:	39 d3                	cmp    ebx,edx
c00275c1:	77 02                	ja     c00275c5 <__cmpsf2+0x8d>
c00275c3:	19 c0                	sbb    eax,eax
c00275c5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00275c8:	5b                   	pop    ebx
c00275c9:	5e                   	pop    esi
c00275ca:	5f                   	pop    edi
c00275cb:	5d                   	pop    ebp
c00275cc:	c3                   	ret    

c00275cd <__eqsf2>:
c00275cd:	55                   	push   ebp
c00275ce:	89 e5                	mov    ebp,esp
c00275d0:	83 ec 24             	sub    esp,0x24
c00275d3:	6a 01                	push   0x1
c00275d5:	83 ec 0c             	sub    esp,0xc
c00275d8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275db:	e8 df 10 00 00       	call   c00286bf <__extendsfdf2>
c00275e0:	83 c4 10             	add    esp,0x10
c00275e3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275e6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275e9:	52                   	push   edx
c00275ea:	50                   	push   eax
c00275eb:	50                   	push   eax
c00275ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275ef:	e8 cb 10 00 00       	call   c00286bf <__extendsfdf2>
c00275f4:	59                   	pop    ecx
c00275f5:	59                   	pop    ecx
c00275f6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275f9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275fc:	52                   	push   edx
c00275fd:	50                   	push   eax
c00275fe:	e8 35 ff ff ff       	call   c0027538 <__cmpsf2>
c0027603:	83 c4 20             	add    esp,0x20
c0027606:	c9                   	leave  
c0027607:	c3                   	ret    

c0027608 <__nesf2>:
c0027608:	eb c3                	jmp    c00275cd <__eqsf2>

c002760a <__gtsf2>:
c002760a:	55                   	push   ebp
c002760b:	89 e5                	mov    ebp,esp
c002760d:	83 ec 24             	sub    esp,0x24
c0027610:	6a ff                	push   0xffffffff
c0027612:	83 ec 0c             	sub    esp,0xc
c0027615:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027618:	e8 a2 10 00 00       	call   c00286bf <__extendsfdf2>
c002761d:	83 c4 10             	add    esp,0x10
c0027620:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027623:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027626:	52                   	push   edx
c0027627:	50                   	push   eax
c0027628:	50                   	push   eax
c0027629:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002762c:	e8 8e 10 00 00       	call   c00286bf <__extendsfdf2>
c0027631:	59                   	pop    ecx
c0027632:	59                   	pop    ecx
c0027633:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027636:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027639:	52                   	push   edx
c002763a:	50                   	push   eax
c002763b:	e8 f8 fe ff ff       	call   c0027538 <__cmpsf2>
c0027640:	83 c4 20             	add    esp,0x20
c0027643:	c9                   	leave  
c0027644:	c3                   	ret    

c0027645 <__gesf2>:
c0027645:	eb c3                	jmp    c002760a <__gtsf2>

c0027647 <__ltsf2>:
c0027647:	eb 84                	jmp    c00275cd <__eqsf2>

c0027649 <__lesf2>:
c0027649:	eb 82                	jmp    c00275cd <__eqsf2>

c002764b <__adddf3>:
c002764b:	55                   	push   ebp
c002764c:	89 e5                	mov    ebp,esp
c002764e:	57                   	push   edi
c002764f:	56                   	push   esi
c0027650:	53                   	push   ebx
c0027651:	83 ec 24             	sub    esp,0x24
c0027654:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027657:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002765a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002765d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027660:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027663:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027666:	89 c8                	mov    eax,ecx
c0027668:	89 ce                	mov    esi,ecx
c002766a:	c1 fe 14             	sar    esi,0x14
c002766d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027670:	89 fb                	mov    ebx,edi
c0027672:	89 fa                	mov    edx,edi
c0027674:	c1 e2 0b             	shl    edx,0xb
c0027677:	c1 e0 0b             	shl    eax,0xb
c002767a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002767f:	c1 eb 15             	shr    ebx,0x15
c0027682:	09 d8                	or     eax,ebx
c0027684:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027687:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002768a:	c1 fe 14             	sar    esi,0x14
c002768d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027690:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027693:	89 f3                	mov    ebx,esi
c0027695:	c1 e3 0b             	shl    ebx,0xb
c0027698:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002769b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002769e:	c1 e3 0b             	shl    ebx,0xb
c00276a1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00276a7:	c1 ee 15             	shr    esi,0x15
c00276aa:	09 f3                	or     ebx,esi
c00276ac:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00276af:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276b2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00276b5:	0f 88 5f 02 00 00    	js     c002791a <__adddf3+0x2cf>
c00276bb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00276be:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00276c1:	85 db                	test   ebx,ebx
c00276c3:	0f 8e c7 00 00 00    	jle    c0027790 <__adddf3+0x145>
c00276c9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00276d0:	75 1a                	jne    c00276ec <__adddf3+0xa1>
c00276d2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00276d5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00276d8:	0f 84 b2 05 00 00    	je     c0027c90 <__adddf3+0x645>
c00276de:	4b                   	dec    ebx
c00276df:	75 23                	jne    c0027704 <__adddf3+0xb9>
c00276e1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00276e4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00276e7:	e9 99 00 00 00       	jmp    c0027785 <__adddf3+0x13a>
c00276ec:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276ef:	f7 d6                	not    esi
c00276f1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276f7:	0f 84 93 05 00 00    	je     c0027c90 <__adddf3+0x645>
c00276fd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027704:	83 fb 1f             	cmp    ebx,0x1f
c0027707:	7e 42                	jle    c002774b <__adddf3+0x100>
c0027709:	83 fb 3f             	cmp    ebx,0x3f
c002770c:	0f 8f 7e 05 00 00    	jg     c0027c90 <__adddf3+0x645>
c0027712:	83 e3 1f             	and    ebx,0x1f
c0027715:	89 d9                	mov    ecx,ebx
c0027717:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002771a:	d3 ef                	shr    edi,cl
c002771c:	31 db                	xor    ebx,ebx
c002771e:	85 c9                	test   ecx,ecx
c0027720:	74 15                	je     c0027737 <__adddf3+0xec>
c0027722:	be 20 00 00 00       	mov    esi,0x20
c0027727:	29 ce                	sub    esi,ecx
c0027729:	89 f1                	mov    ecx,esi
c002772b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002772e:	d3 e6                	shl    esi,cl
c0027730:	31 db                	xor    ebx,ebx
c0027732:	85 f6                	test   esi,esi
c0027734:	0f 95 c3             	setne  bl
c0027737:	31 c9                	xor    ecx,ecx
c0027739:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002773d:	0f 95 c1             	setne  cl
c0027740:	09 cf                	or     edi,ecx
c0027742:	09 fb                	or     ebx,edi
c0027744:	01 da                	add    edx,ebx
c0027746:	83 d0 00             	adc    eax,0x0
c0027749:	eb 3a                	jmp    c0027785 <__adddf3+0x13a>
c002774b:	bf 20 00 00 00       	mov    edi,0x20
c0027750:	29 df                	sub    edi,ebx
c0027752:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027755:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027758:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002775b:	d3 e6                	shl    esi,cl
c002775d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027760:	88 d9                	mov    cl,bl
c0027762:	d3 ef                	shr    edi,cl
c0027764:	09 fe                	or     esi,edi
c0027766:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027769:	88 d9                	mov    cl,bl
c002776b:	d3 ef                	shr    edi,cl
c002776d:	89 fb                	mov    ebx,edi
c002776f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027772:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027775:	d3 e7                	shl    edi,cl
c0027777:	85 ff                	test   edi,edi
c0027779:	0f 95 c1             	setne  cl
c002777c:	0f b6 c9             	movzx  ecx,cl
c002777f:	09 ce                	or     esi,ecx
c0027781:	01 f2                	add    edx,esi
c0027783:	11 d8                	adc    eax,ebx
c0027785:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027788:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002778b:	e9 52 01 00 00       	jmp    c00278e2 <__adddf3+0x297>
c0027790:	0f 84 d5 00 00 00    	je     c002786b <__adddf3+0x220>
c0027796:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027799:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002779c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002779f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277a2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00277a9:	75 20                	jne    c00277cb <__adddf3+0x180>
c00277ab:	89 d6                	mov    esi,edx
c00277ad:	09 c6                	or     esi,eax
c00277af:	0f 84 db 04 00 00    	je     c0027c90 <__adddf3+0x645>
c00277b5:	4b                   	dec    ebx
c00277b6:	75 29                	jne    c00277e1 <__adddf3+0x196>
c00277b8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277bb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00277be:	01 d1                	add    ecx,edx
c00277c0:	11 c6                	adc    esi,eax
c00277c2:	89 f0                	mov    eax,esi
c00277c4:	89 ca                	mov    edx,ecx
c00277c6:	e9 17 01 00 00       	jmp    c00278e2 <__adddf3+0x297>
c00277cb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00277ce:	f7 d6                	not    esi
c00277d0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277d6:	0f 84 b4 04 00 00    	je     c0027c90 <__adddf3+0x645>
c00277dc:	0d 00 00 00 80       	or     eax,0x80000000
c00277e1:	83 fb 1f             	cmp    ebx,0x1f
c00277e4:	7e 48                	jle    c002782e <__adddf3+0x1e3>
c00277e6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277e9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277ec:	83 fb 3f             	cmp    ebx,0x3f
c00277ef:	0f 8f 9b 04 00 00    	jg     c0027c90 <__adddf3+0x645>
c00277f5:	83 e3 1f             	and    ebx,0x1f
c00277f8:	89 d9                	mov    ecx,ebx
c00277fa:	89 c7                	mov    edi,eax
c00277fc:	d3 ef                	shr    edi,cl
c00277fe:	31 db                	xor    ebx,ebx
c0027800:	85 c9                	test   ecx,ecx
c0027802:	74 12                	je     c0027816 <__adddf3+0x1cb>
c0027804:	be 20 00 00 00       	mov    esi,0x20
c0027809:	29 ce                	sub    esi,ecx
c002780b:	89 f1                	mov    ecx,esi
c002780d:	d3 e0                	shl    eax,cl
c002780f:	31 db                	xor    ebx,ebx
c0027811:	85 c0                	test   eax,eax
c0027813:	0f 95 c3             	setne  bl
c0027816:	31 c0                	xor    eax,eax
c0027818:	85 d2                	test   edx,edx
c002781a:	0f 95 c0             	setne  al
c002781d:	09 c7                	or     edi,eax
c002781f:	09 fb                	or     ebx,edi
c0027821:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027824:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027827:	01 da                	add    edx,ebx
c0027829:	83 d6 00             	adc    esi,0x0
c002782c:	eb 39                	jmp    c0027867 <__adddf3+0x21c>
c002782e:	be 20 00 00 00       	mov    esi,0x20
c0027833:	29 de                	sub    esi,ebx
c0027835:	89 c7                	mov    edi,eax
c0027837:	89 f1                	mov    ecx,esi
c0027839:	d3 e7                	shl    edi,cl
c002783b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002783e:	89 d7                	mov    edi,edx
c0027840:	88 d9                	mov    cl,bl
c0027842:	d3 ef                	shr    edi,cl
c0027844:	89 f9                	mov    ecx,edi
c0027846:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027849:	09 cf                	or     edi,ecx
c002784b:	88 d9                	mov    cl,bl
c002784d:	d3 e8                	shr    eax,cl
c002784f:	89 f1                	mov    ecx,esi
c0027851:	d3 e2                	shl    edx,cl
c0027853:	85 d2                	test   edx,edx
c0027855:	0f 95 c2             	setne  dl
c0027858:	0f b6 d2             	movzx  edx,dl
c002785b:	09 d7                	or     edi,edx
c002785d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027860:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027863:	01 fa                	add    edx,edi
c0027865:	11 c6                	adc    esi,eax
c0027867:	89 f0                	mov    eax,esi
c0027869:	eb 77                	jmp    c00278e2 <__adddf3+0x297>
c002786b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002786e:	46                   	inc    esi
c002786f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027872:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027878:	75 41                	jne    c00278bb <__adddf3+0x270>
c002787a:	89 d3                	mov    ebx,edx
c002787c:	09 c3                	or     ebx,eax
c002787e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027885:	75 27                	jne    c00278ae <__adddf3+0x263>
c0027887:	85 db                	test   ebx,ebx
c0027889:	0f 84 fb 03 00 00    	je     c0027c8a <__adddf3+0x63f>
c002788f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027892:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027895:	0f 84 f5 03 00 00    	je     c0027c90 <__adddf3+0x645>
c002789b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002789e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00278a1:	85 c0                	test   eax,eax
c00278a3:	0f 89 91 03 00 00    	jns    c0027c3a <__adddf3+0x5ef>
c00278a9:	e9 85 03 00 00       	jmp    c0027c33 <__adddf3+0x5e8>
c00278ae:	85 db                	test   ebx,ebx
c00278b0:	0f 85 da 03 00 00    	jne    c0027c90 <__adddf3+0x645>
c00278b6:	e9 cf 03 00 00       	jmp    c0027c8a <__adddf3+0x63f>
c00278bb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00278be:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00278c1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278c4:	f7 d1                	not    ecx
c00278c6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278cc:	0f 84 70 03 00 00    	je     c0027c42 <__adddf3+0x5f7>
c00278d2:	d1 ea                	shr    edx,1
c00278d4:	89 c1                	mov    ecx,eax
c00278d6:	c1 e1 1f             	shl    ecx,0x1f
c00278d9:	09 ca                	or     edx,ecx
c00278db:	d1 e8                	shr    eax,1
c00278dd:	e9 6f 03 00 00       	jmp    c0027c51 <__adddf3+0x606>
c00278e2:	85 c0                	test   eax,eax
c00278e4:	0f 89 67 03 00 00    	jns    c0027c51 <__adddf3+0x606>
c00278ea:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00278ed:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278f0:	f7 d1                	not    ecx
c00278f2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278f8:	0f 84 44 03 00 00    	je     c0027c42 <__adddf3+0x5f7>
c00278fe:	89 d1                	mov    ecx,edx
c0027900:	d1 e9                	shr    ecx,1
c0027902:	83 e2 01             	and    edx,0x1
c0027905:	09 ca                	or     edx,ecx
c0027907:	89 c1                	mov    ecx,eax
c0027909:	c1 e1 1f             	shl    ecx,0x1f
c002790c:	09 ca                	or     edx,ecx
c002790e:	d1 e8                	shr    eax,1
c0027910:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027915:	e9 37 03 00 00       	jmp    c0027c51 <__adddf3+0x606>
c002791a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002791d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027923:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027926:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027929:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002792f:	29 de                	sub    esi,ebx
c0027931:	85 f6                	test   esi,esi
c0027933:	0f 8e bd 00 00 00    	jle    c00279f6 <__adddf3+0x3ab>
c0027939:	85 db                	test   ebx,ebx
c002793b:	75 17                	jne    c0027954 <__adddf3+0x309>
c002793d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027940:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027943:	0f 84 47 03 00 00    	je     c0027c90 <__adddf3+0x645>
c0027949:	4e                   	dec    esi
c002794a:	75 20                	jne    c002796c <__adddf3+0x321>
c002794c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002794f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027952:	eb 5b                	jmp    c00279af <__adddf3+0x364>
c0027954:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027957:	f7 d3                	not    ebx
c0027959:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002795f:	0f 84 2b 03 00 00    	je     c0027c90 <__adddf3+0x645>
c0027965:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002796c:	83 fe 1f             	cmp    esi,0x1f
c002796f:	7e 49                	jle    c00279ba <__adddf3+0x36f>
c0027971:	83 fe 3f             	cmp    esi,0x3f
c0027974:	0f 8f 16 03 00 00    	jg     c0027c90 <__adddf3+0x645>
c002797a:	83 e6 1f             	and    esi,0x1f
c002797d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027980:	89 f1                	mov    ecx,esi
c0027982:	d3 ef                	shr    edi,cl
c0027984:	31 db                	xor    ebx,ebx
c0027986:	85 f6                	test   esi,esi
c0027988:	74 13                	je     c002799d <__adddf3+0x352>
c002798a:	b9 20 00 00 00       	mov    ecx,0x20
c002798f:	29 f1                	sub    ecx,esi
c0027991:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027994:	d3 e6                	shl    esi,cl
c0027996:	31 db                	xor    ebx,ebx
c0027998:	85 f6                	test   esi,esi
c002799a:	0f 95 c3             	setne  bl
c002799d:	31 c9                	xor    ecx,ecx
c002799f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00279a3:	0f 95 c1             	setne  cl
c00279a6:	09 cf                	or     edi,ecx
c00279a8:	09 fb                	or     ebx,edi
c00279aa:	29 da                	sub    edx,ebx
c00279ac:	83 d8 00             	sbb    eax,0x0
c00279af:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279b2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279b5:	e9 aa 01 00 00       	jmp    c0027b64 <__adddf3+0x519>
c00279ba:	bf 20 00 00 00       	mov    edi,0x20
c00279bf:	29 f7                	sub    edi,esi
c00279c1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279c4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00279c7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279ca:	d3 e3                	shl    ebx,cl
c00279cc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279cf:	89 f1                	mov    ecx,esi
c00279d1:	d3 ef                	shr    edi,cl
c00279d3:	09 fb                	or     ebx,edi
c00279d5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00279d8:	89 f1                	mov    ecx,esi
c00279da:	d3 ef                	shr    edi,cl
c00279dc:	89 fe                	mov    esi,edi
c00279de:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279e1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279e4:	d3 e7                	shl    edi,cl
c00279e6:	85 ff                	test   edi,edi
c00279e8:	0f 95 c1             	setne  cl
c00279eb:	0f b6 c9             	movzx  ecx,cl
c00279ee:	09 cb                	or     ebx,ecx
c00279f0:	29 da                	sub    edx,ebx
c00279f2:	19 f0                	sbb    eax,esi
c00279f4:	eb b9                	jmp    c00279af <__adddf3+0x364>
c00279f6:	0f 84 cd 00 00 00    	je     c0027ac9 <__adddf3+0x47e>
c00279fc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00279ff:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a02:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a05:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a09:	75 1b                	jne    c0027a26 <__adddf3+0x3db>
c0027a0b:	89 d6                	mov    esi,edx
c0027a0d:	09 c6                	or     esi,eax
c0027a0f:	0f 84 7b 02 00 00    	je     c0027c90 <__adddf3+0x645>
c0027a15:	4b                   	dec    ebx
c0027a16:	75 24                	jne    c0027a3c <__adddf3+0x3f1>
c0027a18:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a1b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a1e:	29 d1                	sub    ecx,edx
c0027a20:	19 c6                	sbb    esi,eax
c0027a22:	89 ca                	mov    edx,ecx
c0027a24:	eb 61                	jmp    c0027a87 <__adddf3+0x43c>
c0027a26:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027a29:	f7 d6                	not    esi
c0027a2b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027a31:	0f 84 59 02 00 00    	je     c0027c90 <__adddf3+0x645>
c0027a37:	0d 00 00 00 80       	or     eax,0x80000000
c0027a3c:	83 fb 1f             	cmp    ebx,0x1f
c0027a3f:	7e 4d                	jle    c0027a8e <__adddf3+0x443>
c0027a41:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a44:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a47:	83 fb 3f             	cmp    ebx,0x3f
c0027a4a:	0f 8f 40 02 00 00    	jg     c0027c90 <__adddf3+0x645>
c0027a50:	83 e3 1f             	and    ebx,0x1f
c0027a53:	89 d9                	mov    ecx,ebx
c0027a55:	89 c7                	mov    edi,eax
c0027a57:	d3 ef                	shr    edi,cl
c0027a59:	31 db                	xor    ebx,ebx
c0027a5b:	85 c9                	test   ecx,ecx
c0027a5d:	74 12                	je     c0027a71 <__adddf3+0x426>
c0027a5f:	be 20 00 00 00       	mov    esi,0x20
c0027a64:	29 ce                	sub    esi,ecx
c0027a66:	89 f1                	mov    ecx,esi
c0027a68:	d3 e0                	shl    eax,cl
c0027a6a:	31 db                	xor    ebx,ebx
c0027a6c:	85 c0                	test   eax,eax
c0027a6e:	0f 95 c3             	setne  bl
c0027a71:	31 c0                	xor    eax,eax
c0027a73:	85 d2                	test   edx,edx
c0027a75:	0f 95 c0             	setne  al
c0027a78:	09 c7                	or     edi,eax
c0027a7a:	09 fb                	or     ebx,edi
c0027a7c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a7f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a82:	29 da                	sub    edx,ebx
c0027a84:	83 de 00             	sbb    esi,0x0
c0027a87:	89 f0                	mov    eax,esi
c0027a89:	e9 d6 00 00 00       	jmp    c0027b64 <__adddf3+0x519>
c0027a8e:	be 20 00 00 00       	mov    esi,0x20
c0027a93:	29 de                	sub    esi,ebx
c0027a95:	89 c7                	mov    edi,eax
c0027a97:	89 f1                	mov    ecx,esi
c0027a99:	d3 e7                	shl    edi,cl
c0027a9b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a9e:	89 d7                	mov    edi,edx
c0027aa0:	88 d9                	mov    cl,bl
c0027aa2:	d3 ef                	shr    edi,cl
c0027aa4:	89 f9                	mov    ecx,edi
c0027aa6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027aa9:	09 cf                	or     edi,ecx
c0027aab:	88 d9                	mov    cl,bl
c0027aad:	d3 e8                	shr    eax,cl
c0027aaf:	89 f1                	mov    ecx,esi
c0027ab1:	d3 e2                	shl    edx,cl
c0027ab3:	85 d2                	test   edx,edx
c0027ab5:	0f 95 c2             	setne  dl
c0027ab8:	0f b6 d2             	movzx  edx,dl
c0027abb:	09 d7                	or     edi,edx
c0027abd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ac0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027ac3:	29 fa                	sub    edx,edi
c0027ac5:	19 c6                	sbb    esi,eax
c0027ac7:	eb be                	jmp    c0027a87 <__adddf3+0x43c>
c0027ac9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027acc:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027acf:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027ad5:	75 6a                	jne    c0027b41 <__adddf3+0x4f6>
c0027ad7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027adb:	75 58                	jne    c0027b35 <__adddf3+0x4ea>
c0027add:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027ae0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027ae3:	89 d6                	mov    esi,edx
c0027ae5:	09 c6                	or     esi,eax
c0027ae7:	75 17                	jne    c0027b00 <__adddf3+0x4b5>
c0027ae9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027aec:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027aef:	85 db                	test   ebx,ebx
c0027af1:	0f 85 99 01 00 00    	jne    c0027c90 <__adddf3+0x645>
c0027af7:	31 ff                	xor    edi,edi
c0027af9:	31 c9                	xor    ecx,ecx
c0027afb:	e9 90 01 00 00       	jmp    c0027c90 <__adddf3+0x645>
c0027b00:	85 db                	test   ebx,ebx
c0027b02:	0f 84 88 01 00 00    	je     c0027c90 <__adddf3+0x645>
c0027b08:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027b0b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027b0e:	85 c0                	test   eax,eax
c0027b10:	79 10                	jns    c0027b22 <__adddf3+0x4d7>
c0027b12:	31 c9                	xor    ecx,ecx
c0027b14:	f7 da                	neg    edx
c0027b16:	0f 95 c1             	setne  cl
c0027b19:	01 c8                	add    eax,ecx
c0027b1b:	f7 d8                	neg    eax
c0027b1d:	e9 2f 01 00 00       	jmp    c0027c51 <__adddf3+0x606>
c0027b22:	31 ff                	xor    edi,edi
c0027b24:	31 c9                	xor    ecx,ecx
c0027b26:	89 c3                	mov    ebx,eax
c0027b28:	09 d3                	or     ebx,edx
c0027b2a:	0f 84 60 01 00 00    	je     c0027c90 <__adddf3+0x645>
c0027b30:	e9 05 01 00 00       	jmp    c0027c3a <__adddf3+0x5ef>
c0027b35:	31 ff                	xor    edi,edi
c0027b37:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027b3c:	e9 4f 01 00 00       	jmp    c0027c90 <__adddf3+0x645>
c0027b41:	89 c1                	mov    ecx,eax
c0027b43:	89 d0                	mov    eax,edx
c0027b45:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027b48:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027b4b:	89 ca                	mov    edx,ecx
c0027b4d:	85 c9                	test   ecx,ecx
c0027b4f:	79 2c                	jns    c0027b7d <__adddf3+0x532>
c0027b51:	31 c9                	xor    ecx,ecx
c0027b53:	f7 d8                	neg    eax
c0027b55:	0f 95 c1             	setne  cl
c0027b58:	01 ca                	add    edx,ecx
c0027b5a:	f7 da                	neg    edx
c0027b5c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b5f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b62:	eb 19                	jmp    c0027b7d <__adddf3+0x532>
c0027b64:	85 c0                	test   eax,eax
c0027b66:	0f 89 e5 00 00 00    	jns    c0027c51 <__adddf3+0x606>
c0027b6c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b71:	89 c1                	mov    ecx,eax
c0027b73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b76:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b79:	89 d0                	mov    eax,edx
c0027b7b:	89 ca                	mov    edx,ecx
c0027b7d:	85 d2                	test   edx,edx
c0027b7f:	74 59                	je     c0027bda <__adddf3+0x58f>
c0027b81:	0f bd da             	bsr    ebx,edx
c0027b84:	83 f3 1f             	xor    ebx,0x1f
c0027b87:	88 d9                	mov    cl,bl
c0027b89:	d3 e2                	shl    edx,cl
c0027b8b:	bf 20 00 00 00       	mov    edi,0x20
c0027b90:	89 f9                	mov    ecx,edi
c0027b92:	29 d9                	sub    ecx,ebx
c0027b94:	89 c6                	mov    esi,eax
c0027b96:	d3 ee                	shr    esi,cl
c0027b98:	09 d6                	or     esi,edx
c0027b9a:	88 d9                	mov    cl,bl
c0027b9c:	d3 e0                	shl    eax,cl
c0027b9e:	89 c2                	mov    edx,eax
c0027ba0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ba3:	25 ff 07 00 00       	and    eax,0x7ff
c0027ba8:	39 d8                	cmp    eax,ebx
c0027baa:	7f 22                	jg     c0027bce <__adddf3+0x583>
c0027bac:	29 c3                	sub    ebx,eax
c0027bae:	43                   	inc    ebx
c0027baf:	88 d9                	mov    cl,bl
c0027bb1:	d3 ea                	shr    edx,cl
c0027bb3:	29 df                	sub    edi,ebx
c0027bb5:	89 f9                	mov    ecx,edi
c0027bb7:	89 f0                	mov    eax,esi
c0027bb9:	d3 e0                	shl    eax,cl
c0027bbb:	09 c2                	or     edx,eax
c0027bbd:	89 f0                	mov    eax,esi
c0027bbf:	88 d9                	mov    cl,bl
c0027bc1:	d3 e8                	shr    eax,cl
c0027bc3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bc6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027bcc:	eb 6f                	jmp    c0027c3d <__adddf3+0x5f2>
c0027bce:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bd1:	29 d8                	sub    eax,ebx
c0027bd3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bd6:	89 f0                	mov    eax,esi
c0027bd8:	eb 59                	jmp    c0027c33 <__adddf3+0x5e8>
c0027bda:	85 c0                	test   eax,eax
c0027bdc:	74 6a                	je     c0027c48 <__adddf3+0x5fd>
c0027bde:	0f bd c8             	bsr    ecx,eax
c0027be1:	83 f1 1f             	xor    ecx,0x1f
c0027be4:	d3 e0                	shl    eax,cl
c0027be6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027be9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027bef:	83 c1 20             	add    ecx,0x20
c0027bf2:	39 cb                	cmp    ebx,ecx
c0027bf4:	7f 35                	jg     c0027c2b <__adddf3+0x5e0>
c0027bf6:	29 d9                	sub    ecx,ebx
c0027bf8:	8d 71 01             	lea    esi,[ecx+0x1]
c0027bfb:	83 fe 1f             	cmp    esi,0x1f
c0027bfe:	7e 09                	jle    c0027c09 <__adddf3+0x5be>
c0027c00:	83 e9 1f             	sub    ecx,0x1f
c0027c03:	d3 e8                	shr    eax,cl
c0027c05:	89 c3                	mov    ebx,eax
c0027c07:	eb 11                	jmp    c0027c1a <__adddf3+0x5cf>
c0027c09:	b9 20 00 00 00       	mov    ecx,0x20
c0027c0e:	29 f1                	sub    ecx,esi
c0027c10:	89 c3                	mov    ebx,eax
c0027c12:	d3 e3                	shl    ebx,cl
c0027c14:	89 f1                	mov    ecx,esi
c0027c16:	d3 e8                	shr    eax,cl
c0027c18:	89 c2                	mov    edx,eax
c0027c1a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c1d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027c22:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c25:	89 d0                	mov    eax,edx
c0027c27:	89 da                	mov    edx,ebx
c0027c29:	eb 26                	jmp    c0027c51 <__adddf3+0x606>
c0027c2b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c2e:	29 cf                	sub    edi,ecx
c0027c30:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c33:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c38:	eb 17                	jmp    c0027c51 <__adddf3+0x606>
c0027c3a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c3d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c40:	eb 0f                	jmp    c0027c51 <__adddf3+0x606>
c0027c42:	31 d2                	xor    edx,edx
c0027c44:	31 c0                	xor    eax,eax
c0027c46:	eb 09                	jmp    c0027c51 <__adddf3+0x606>
c0027c48:	89 c2                	mov    edx,eax
c0027c4a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027c51:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c54:	c1 e1 14             	shl    ecx,0x14
c0027c57:	89 c3                	mov    ebx,eax
c0027c59:	c1 eb 0b             	shr    ebx,0xb
c0027c5c:	09 d9                	or     ecx,ebx
c0027c5e:	89 d3                	mov    ebx,edx
c0027c60:	c1 eb 0b             	shr    ebx,0xb
c0027c63:	c1 e0 15             	shl    eax,0x15
c0027c66:	09 d8                	or     eax,ebx
c0027c68:	89 c7                	mov    edi,eax
c0027c6a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027c70:	0f 95 c0             	setne  al
c0027c73:	89 c6                	mov    esi,eax
c0027c75:	09 f3                	or     ebx,esi
c0027c77:	83 e3 01             	and    ebx,0x1
c0027c7a:	c1 ea 0a             	shr    edx,0xa
c0027c7d:	21 da                	and    edx,ebx
c0027c7f:	89 f8                	mov    eax,edi
c0027c81:	01 d0                	add    eax,edx
c0027c83:	83 d1 00             	adc    ecx,0x0
c0027c86:	89 c7                	mov    edi,eax
c0027c88:	eb 06                	jmp    c0027c90 <__adddf3+0x645>
c0027c8a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c8d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c90:	89 f8                	mov    eax,edi
c0027c92:	89 ca                	mov    edx,ecx
c0027c94:	83 c4 24             	add    esp,0x24
c0027c97:	5b                   	pop    ebx
c0027c98:	5e                   	pop    esi
c0027c99:	5f                   	pop    edi
c0027c9a:	5d                   	pop    ebp
c0027c9b:	c3                   	ret    

c0027c9c <__subdf3>:
c0027c9c:	55                   	push   ebp
c0027c9d:	89 e5                	mov    ebp,esp
c0027c9f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ca2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027ca5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027cab:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027cae:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027cb1:	5d                   	pop    ebp
c0027cb2:	e9 94 f9 ff ff       	jmp    c002764b <__adddf3>

c0027cb7 <__negdf2>:
c0027cb7:	55                   	push   ebp
c0027cb8:	89 e5                	mov    ebp,esp
c0027cba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027cbd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027cc0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027cc6:	5d                   	pop    ebp
c0027cc7:	c3                   	ret    

c0027cc8 <__muldf3>:
c0027cc8:	55                   	push   ebp
c0027cc9:	89 e5                	mov    ebp,esp
c0027ccb:	57                   	push   edi
c0027ccc:	56                   	push   esi
c0027ccd:	53                   	push   ebx
c0027cce:	83 ec 24             	sub    esp,0x24
c0027cd1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027cd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027cd7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cda:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027cdd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027ce0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027ce3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ce6:	89 c8                	mov    eax,ecx
c0027ce8:	c1 f8 14             	sar    eax,0x14
c0027ceb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027cee:	89 f8                	mov    eax,edi
c0027cf0:	89 fb                	mov    ebx,edi
c0027cf2:	c1 e3 0b             	shl    ebx,0xb
c0027cf5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027cf8:	c1 e1 0b             	shl    ecx,0xb
c0027cfb:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027d01:	c1 e8 15             	shr    eax,0x15
c0027d04:	09 c1                	or     ecx,eax
c0027d06:	89 d6                	mov    esi,edx
c0027d08:	89 d0                	mov    eax,edx
c0027d0a:	c1 f8 14             	sar    eax,0x14
c0027d0d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027d10:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027d13:	89 c3                	mov    ebx,eax
c0027d15:	c1 e3 0b             	shl    ebx,0xb
c0027d18:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027d1b:	c1 e6 0b             	shl    esi,0xb
c0027d1e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027d24:	c1 e8 15             	shr    eax,0x15
c0027d27:	09 c6                	or     esi,eax
c0027d29:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d2c:	25 ff 07 00 00       	and    eax,0x7ff
c0027d31:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027d34:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d37:	25 ff 07 00 00       	and    eax,0x7ff
c0027d3c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027d3f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027d42:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027d45:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027d4c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d4f:	40                   	inc    eax
c0027d50:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d55:	0f 85 8d 00 00 00    	jne    c0027de8 <__muldf3+0x120>
c0027d5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d5e:	09 c8                	or     eax,ecx
c0027d60:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027d64:	74 44                	je     c0027daa <__muldf3+0xe2>
c0027d66:	85 c0                	test   eax,eax
c0027d68:	0f 85 31 02 00 00    	jne    c0027f9f <__muldf3+0x2d7>
c0027d6e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d71:	40                   	inc    eax
c0027d72:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d77:	75 13                	jne    c0027d8c <__muldf3+0xc4>
c0027d79:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d7c:	09 f1                	or     ecx,esi
c0027d7e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d82:	74 22                	je     c0027da6 <__muldf3+0xde>
c0027d84:	85 c9                	test   ecx,ecx
c0027d86:	0f 85 0d 02 00 00    	jne    c0027f99 <__muldf3+0x2d1>
c0027d8c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027d90:	0f 89 09 02 00 00    	jns    c0027f9f <__muldf3+0x2d7>
c0027d96:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d99:	05 00 00 00 80       	add    eax,0x80000000
c0027d9e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027da1:	e9 f9 01 00 00       	jmp    c0027f9f <__muldf3+0x2d7>
c0027da6:	85 c9                	test   ecx,ecx
c0027da8:	eb 2e                	jmp    c0027dd8 <__muldf3+0x110>
c0027daa:	85 c0                	test   eax,eax
c0027dac:	74 20                	je     c0027dce <__muldf3+0x106>
c0027dae:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027db1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027db4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027db7:	c1 ef 1f             	shr    edi,0x1f
c0027dba:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027dbd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027dc0:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027dc3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027dc6:	09 f9                	or     ecx,edi
c0027dc8:	78 1e                	js     c0027de8 <__muldf3+0x120>
c0027dca:	89 c3                	mov    ebx,eax
c0027dcc:	eb e0                	jmp    c0027dae <__muldf3+0xe6>
c0027dce:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027dd1:	f7 d0                	not    eax
c0027dd3:	a9 ff 07 00 00       	test   eax,0x7ff
c0027dd8:	75 b2                	jne    c0027d8c <__muldf3+0xc4>
c0027dda:	31 ff                	xor    edi,edi
c0027ddc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027de3:	e9 b7 01 00 00       	jmp    c0027f9f <__muldf3+0x2d7>
c0027de8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027deb:	40                   	inc    eax
c0027dec:	a9 fe 07 00 00       	test   eax,0x7fe
c0027df1:	75 57                	jne    c0027e4a <__muldf3+0x182>
c0027df3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027df6:	09 f0                	or     eax,esi
c0027df8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027dfc:	74 23                	je     c0027e21 <__muldf3+0x159>
c0027dfe:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027e02:	0f 89 91 01 00 00    	jns    c0027f99 <__muldf3+0x2d1>
c0027e08:	85 c0                	test   eax,eax
c0027e0a:	0f 85 89 01 00 00    	jne    c0027f99 <__muldf3+0x2d1>
c0027e10:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e13:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027e19:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e1c:	e9 7e 01 00 00       	jmp    c0027f9f <__muldf3+0x2d7>
c0027e21:	85 c0                	test   eax,eax
c0027e23:	75 0c                	jne    c0027e31 <__muldf3+0x169>
c0027e25:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027e29:	0f 89 6a 01 00 00    	jns    c0027f99 <__muldf3+0x2d1>
c0027e2f:	eb df                	jmp    c0027e10 <__muldf3+0x148>
c0027e31:	01 f6                	add    esi,esi
c0027e33:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027e36:	c1 ea 1f             	shr    edx,0x1f
c0027e39:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e3c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027e3f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027e42:	09 d6                	or     esi,edx
c0027e44:	78 04                	js     c0027e4a <__muldf3+0x182>
c0027e46:	89 c3                	mov    ebx,eax
c0027e48:	eb e7                	jmp    c0027e31 <__muldf3+0x169>
c0027e4a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027e50:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e56:	89 c8                	mov    eax,ecx
c0027e58:	f7 e6                	mul    esi
c0027e5a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027e5d:	89 c7                	mov    edi,eax
c0027e5f:	89 c8                	mov    eax,ecx
c0027e61:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e64:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027e67:	89 c1                	mov    ecx,eax
c0027e69:	89 f0                	mov    eax,esi
c0027e6b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027e6e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027e71:	89 c6                	mov    esi,eax
c0027e73:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e76:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e79:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e7c:	31 c0                	xor    eax,eax
c0027e7e:	01 f1                	add    ecx,esi
c0027e80:	0f 92 c0             	setb   al
c0027e83:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027e86:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e89:	83 d6 00             	adc    esi,0x0
c0027e8c:	01 c7                	add    edi,eax
c0027e8e:	83 d6 00             	adc    esi,0x0
c0027e91:	01 ca                	add    edx,ecx
c0027e93:	0f 92 c1             	setb   cl
c0027e96:	0f b6 c9             	movzx  ecx,cl
c0027e99:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027e9c:	83 d6 00             	adc    esi,0x0
c0027e9f:	01 cf                	add    edi,ecx
c0027ea1:	83 d6 00             	adc    esi,0x0
c0027ea4:	31 c9                	xor    ecx,ecx
c0027ea6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027ea9:	0f 95 c1             	setne  cl
c0027eac:	09 cf                	or     edi,ecx
c0027eae:	85 f6                	test   esi,esi
c0027eb0:	78 0c                	js     c0027ebe <__muldf3+0x1f6>
c0027eb2:	01 f6                	add    esi,esi
c0027eb4:	89 f8                	mov    eax,edi
c0027eb6:	c1 e8 1f             	shr    eax,0x1f
c0027eb9:	09 c6                	or     esi,eax
c0027ebb:	01 ff                	add    edi,edi
c0027ebd:	4b                   	dec    ebx
c0027ebe:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027ec4:	0f 8f 85 00 00 00    	jg     c0027f4f <__muldf3+0x287>
c0027eca:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027ed0:	85 db                	test   ebx,ebx
c0027ed2:	0f 8f 84 00 00 00    	jg     c0027f5c <__muldf3+0x294>
c0027ed8:	83 fb cc             	cmp    ebx,0xffffffcc
c0027edb:	7c 79                	jl     c0027f56 <__muldf3+0x28e>
c0027edd:	ba 01 00 00 00       	mov    edx,0x1
c0027ee2:	29 da                	sub    edx,ebx
c0027ee4:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027eea:	83 fa 1f             	cmp    edx,0x1f
c0027eed:	7e 30                	jle    c0027f1f <__muldf3+0x257>
c0027eef:	83 fa 20             	cmp    edx,0x20
c0027ef2:	75 0b                	jne    c0027eff <__muldf3+0x237>
c0027ef4:	31 c0                	xor    eax,eax
c0027ef6:	85 ff                	test   edi,edi
c0027ef8:	0f 95 c0             	setne  al
c0027efb:	89 c7                	mov    edi,eax
c0027efd:	eb 1a                	jmp    c0027f19 <__muldf3+0x251>
c0027eff:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027f02:	89 f0                	mov    eax,esi
c0027f04:	d3 e0                	shl    eax,cl
c0027f06:	09 f8                	or     eax,edi
c0027f08:	0f 95 c0             	setne  al
c0027f0b:	0f b6 c0             	movzx  eax,al
c0027f0e:	89 c7                	mov    edi,eax
c0027f10:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027f15:	29 d9                	sub    ecx,ebx
c0027f17:	d3 ee                	shr    esi,cl
c0027f19:	09 f7                	or     edi,esi
c0027f1b:	31 db                	xor    ebx,ebx
c0027f1d:	eb 3b                	jmp    c0027f5a <__muldf3+0x292>
c0027f1f:	83 c3 1f             	add    ebx,0x1f
c0027f22:	89 f0                	mov    eax,esi
c0027f24:	88 d9                	mov    cl,bl
c0027f26:	d3 e0                	shl    eax,cl
c0027f28:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f2b:	89 f8                	mov    eax,edi
c0027f2d:	88 d1                	mov    cl,dl
c0027f2f:	d3 e8                	shr    eax,cl
c0027f31:	89 c1                	mov    ecx,eax
c0027f33:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027f36:	09 c8                	or     eax,ecx
c0027f38:	88 d9                	mov    cl,bl
c0027f3a:	d3 e7                	shl    edi,cl
c0027f3c:	31 db                	xor    ebx,ebx
c0027f3e:	85 ff                	test   edi,edi
c0027f40:	0f 95 c3             	setne  bl
c0027f43:	89 df                	mov    edi,ebx
c0027f45:	09 c7                	or     edi,eax
c0027f47:	88 d1                	mov    cl,dl
c0027f49:	d3 ee                	shr    esi,cl
c0027f4b:	31 db                	xor    ebx,ebx
c0027f4d:	eb 0d                	jmp    c0027f5c <__muldf3+0x294>
c0027f4f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027f54:	eb 02                	jmp    c0027f58 <__muldf3+0x290>
c0027f56:	31 db                	xor    ebx,ebx
c0027f58:	31 ff                	xor    edi,edi
c0027f5a:	31 f6                	xor    esi,esi
c0027f5c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f5f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027f62:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027f67:	09 c3                	or     ebx,eax
c0027f69:	c1 e3 14             	shl    ebx,0x14
c0027f6c:	89 f0                	mov    eax,esi
c0027f6e:	c1 e8 0b             	shr    eax,0xb
c0027f71:	09 c3                	or     ebx,eax
c0027f73:	89 f8                	mov    eax,edi
c0027f75:	c1 e8 0b             	shr    eax,0xb
c0027f78:	c1 e6 15             	shl    esi,0x15
c0027f7b:	09 c6                	or     esi,eax
c0027f7d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027f83:	0f 95 c1             	setne  cl
c0027f86:	09 c8                	or     eax,ecx
c0027f88:	83 e0 01             	and    eax,0x1
c0027f8b:	c1 ef 0a             	shr    edi,0xa
c0027f8e:	21 c7                	and    edi,eax
c0027f90:	01 f7                	add    edi,esi
c0027f92:	83 d3 00             	adc    ebx,0x0
c0027f95:	89 da                	mov    edx,ebx
c0027f97:	eb 03                	jmp    c0027f9c <__muldf3+0x2d4>
c0027f99:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f9c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027f9f:	89 f8                	mov    eax,edi
c0027fa1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027fa4:	83 c4 24             	add    esp,0x24
c0027fa7:	5b                   	pop    ebx
c0027fa8:	5e                   	pop    esi
c0027fa9:	5f                   	pop    edi
c0027faa:	5d                   	pop    ebp
c0027fab:	c3                   	ret    

c0027fac <__divdf3>:
c0027fac:	55                   	push   ebp
c0027fad:	89 e5                	mov    ebp,esp
c0027faf:	57                   	push   edi
c0027fb0:	56                   	push   esi
c0027fb1:	53                   	push   ebx
c0027fb2:	83 ec 2c             	sub    esp,0x2c
c0027fb5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027fb8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027fbb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027fbe:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027fc1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027fc4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027fc7:	89 ce                	mov    esi,ecx
c0027fc9:	89 c8                	mov    eax,ecx
c0027fcb:	c1 f8 14             	sar    eax,0x14
c0027fce:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027fd1:	89 f8                	mov    eax,edi
c0027fd3:	89 fb                	mov    ebx,edi
c0027fd5:	c1 e3 0b             	shl    ebx,0xb
c0027fd8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027fdb:	c1 e6 0b             	shl    esi,0xb
c0027fde:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027fe4:	c1 e8 15             	shr    eax,0x15
c0027fe7:	09 c6                	or     esi,eax
c0027fe9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027fec:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027fef:	89 c2                	mov    edx,eax
c0027ff1:	c1 fa 14             	sar    edx,0x14
c0027ff4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027ff7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ffa:	89 de                	mov    esi,ebx
c0027ffc:	c1 e6 0b             	shl    esi,0xb
c0027fff:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028002:	c1 e0 0b             	shl    eax,0xb
c0028005:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002800a:	c1 eb 15             	shr    ebx,0x15
c002800d:	09 d8                	or     eax,ebx
c002800f:	89 c2                	mov    edx,eax
c0028011:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028014:	25 ff 07 00 00       	and    eax,0x7ff
c0028019:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002801c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002801f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028025:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028028:	29 d8                	sub    eax,ebx
c002802a:	05 ff 03 00 00       	add    eax,0x3ff
c002802f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028032:	46                   	inc    esi
c0028033:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028039:	0f 85 a5 00 00 00    	jne    c00280e4 <__divdf3+0x138>
c002803f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028042:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028045:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028049:	74 2a                	je     c0028075 <__divdf3+0xc9>
c002804b:	85 f6                	test   esi,esi
c002804d:	0f 85 cc 02 00 00    	jne    c002831f <__divdf3+0x373>
c0028053:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028056:	40                   	inc    eax
c0028057:	a9 fe 07 00 00       	test   eax,0x7fe
c002805c:	75 26                	jne    c0028084 <__divdf3+0xd8>
c002805e:	85 db                	test   ebx,ebx
c0028060:	74 22                	je     c0028084 <__divdf3+0xd8>
c0028062:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028065:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028068:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002806b:	09 d0                	or     eax,edx
c002806d:	0f 85 ac 02 00 00    	jne    c002831f <__divdf3+0x373>
c0028073:	eb 63                	jmp    c00280d8 <__divdf3+0x12c>
c0028075:	85 f6                	test   esi,esi
c0028077:	75 22                	jne    c002809b <__divdf3+0xef>
c0028079:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002807c:	40                   	inc    eax
c002807d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028082:	74 36                	je     c00280ba <__divdf3+0x10e>
c0028084:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028088:	0f 89 91 02 00 00    	jns    c002831f <__divdf3+0x373>
c002808e:	89 f8                	mov    eax,edi
c0028090:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028096:	e9 80 02 00 00       	jmp    c002831b <__divdf3+0x36f>
c002809b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002809e:	01 f6                	add    esi,esi
c00280a0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00280a3:	c1 ef 1f             	shr    edi,0x1f
c00280a6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00280a9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00280ac:	8d 48 ff             	lea    ecx,[eax-0x1]
c00280af:	09 f7                	or     edi,esi
c00280b1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00280b4:	78 2e                	js     c00280e4 <__divdf3+0x138>
c00280b6:	89 c8                	mov    eax,ecx
c00280b8:	eb e1                	jmp    c002809b <__divdf3+0xef>
c00280ba:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00280bd:	09 d0                	or     eax,edx
c00280bf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00280c3:	74 0f                	je     c00280d4 <__divdf3+0x128>
c00280c5:	85 c0                	test   eax,eax
c00280c7:	74 bb                	je     c0028084 <__divdf3+0xd8>
c00280c9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280cc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280cf:	e9 4b 02 00 00       	jmp    c002831f <__divdf3+0x373>
c00280d4:	85 c0                	test   eax,eax
c00280d6:	75 ac                	jne    c0028084 <__divdf3+0xd8>
c00280d8:	31 ff                	xor    edi,edi
c00280da:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00280df:	e9 3b 02 00 00       	jmp    c002831f <__divdf3+0x373>
c00280e4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280e7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00280ea:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00280f0:	75 6b                	jne    c002815d <__divdf3+0x1b1>
c00280f2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280f5:	09 d6                	or     esi,edx
c00280f7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00280fb:	74 28                	je     c0028125 <__divdf3+0x179>
c00280fd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028100:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028103:	85 f6                	test   esi,esi
c0028105:	0f 85 14 02 00 00    	jne    c002831f <__divdf3+0x373>
c002810b:	31 ff                	xor    edi,edi
c002810d:	31 c9                	xor    ecx,ecx
c002810f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028112:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028115:	0f 89 04 02 00 00    	jns    c002831f <__divdf3+0x373>
c002811b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028120:	e9 fa 01 00 00       	jmp    c002831f <__divdf3+0x373>
c0028125:	85 f6                	test   esi,esi
c0028127:	75 1b                	jne    c0028144 <__divdf3+0x198>
c0028129:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002812c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002812f:	25 00 00 00 80       	and    eax,0x80000000
c0028134:	31 c9                	xor    ecx,ecx
c0028136:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002813b:	89 cf                	mov    edi,ecx
c002813d:	89 c1                	mov    ecx,eax
c002813f:	e9 db 01 00 00       	jmp    c002831f <__divdf3+0x373>
c0028144:	01 d2                	add    edx,edx
c0028146:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028149:	c1 eb 1f             	shr    ebx,0x1f
c002814c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002814f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028152:	8d 48 01             	lea    ecx,[eax+0x1]
c0028155:	09 da                	or     edx,ebx
c0028157:	78 04                	js     c002815d <__divdf3+0x1b1>
c0028159:	89 c8                	mov    eax,ecx
c002815b:	eb e7                	jmp    c0028144 <__divdf3+0x198>
c002815d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028160:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028166:	81 ca 00 00 00 80    	or     edx,0x80000000
c002816c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002816f:	39 d6                	cmp    esi,edx
c0028171:	77 0d                	ja     c0028180 <__divdf3+0x1d4>
c0028173:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028176:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028179:	72 1b                	jb     c0028196 <__divdf3+0x1ea>
c002817b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002817e:	75 16                	jne    c0028196 <__divdf3+0x1ea>
c0028180:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028183:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028186:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028189:	83 de 00             	sbb    esi,0x0
c002818c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002818f:	ba 01 00 00 00       	mov    edx,0x1
c0028194:	eb 02                	jmp    c0028198 <__divdf3+0x1ec>
c0028196:	31 d2                	xor    edx,edx
c0028198:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002819f:	31 ff                	xor    edi,edi
c00281a1:	01 ff                	add    edi,edi
c00281a3:	89 d1                	mov    ecx,edx
c00281a5:	c1 e9 1f             	shr    ecx,0x1f
c00281a8:	09 cf                	or     edi,ecx
c00281aa:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00281ad:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00281b0:	89 da                	mov    edx,ebx
c00281b2:	89 f3                	mov    ebx,esi
c00281b4:	8d 34 36             	lea    esi,[esi+esi*1]
c00281b7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281ba:	c1 e9 1f             	shr    ecx,0x1f
c00281bd:	09 ce                	or     esi,ecx
c00281bf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281c2:	01 c9                	add    ecx,ecx
c00281c4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00281c7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00281ca:	85 db                	test   ebx,ebx
c00281cc:	78 29                	js     c00281f7 <__divdf3+0x24b>
c00281ce:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00281d1:	72 07                	jb     c00281da <__divdf3+0x22e>
c00281d3:	75 3c                	jne    c0028211 <__divdf3+0x265>
c00281d5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281d8:	77 37                	ja     c0028211 <__divdf3+0x265>
c00281da:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281dd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00281e0:	31 d2                	xor    edx,edx
c00281e2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00281e5:	0f 97 c2             	seta   dl
c00281e8:	29 d6                	sub    esi,edx
c00281ea:	89 d9                	mov    ecx,ebx
c00281ec:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00281ef:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00281f2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00281f5:	eb 17                	jmp    c002820e <__divdf3+0x262>
c00281f7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281fa:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281fd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028200:	0f 97 c1             	seta   cl
c0028203:	0f b6 c9             	movzx  ecx,cl
c0028206:	29 ce                	sub    esi,ecx
c0028208:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002820b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002820e:	83 ca 01             	or     edx,0x1
c0028211:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028214:	75 8b                	jne    c00281a1 <__divdf3+0x1f5>
c0028216:	c1 e7 09             	shl    edi,0x9
c0028219:	89 d1                	mov    ecx,edx
c002821b:	c1 e9 17             	shr    ecx,0x17
c002821e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028221:	09 f3                	or     ebx,esi
c0028223:	0f 95 c3             	setne  bl
c0028226:	0f b6 db             	movzx  ebx,bl
c0028229:	c1 e2 09             	shl    edx,0x9
c002822c:	09 d3                	or     ebx,edx
c002822e:	89 ca                	mov    edx,ecx
c0028230:	09 fa                	or     edx,edi
c0028232:	78 0c                	js     c0028240 <__divdf3+0x294>
c0028234:	01 d2                	add    edx,edx
c0028236:	89 d9                	mov    ecx,ebx
c0028238:	c1 e9 1f             	shr    ecx,0x1f
c002823b:	09 ca                	or     edx,ecx
c002823d:	01 db                	add    ebx,ebx
c002823f:	48                   	dec    eax
c0028240:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028245:	0f 8f 83 00 00 00    	jg     c00282ce <__divdf3+0x322>
c002824b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028251:	85 c0                	test   eax,eax
c0028253:	0f 8f 82 00 00 00    	jg     c00282db <__divdf3+0x32f>
c0028259:	83 f8 cc             	cmp    eax,0xffffffcc
c002825c:	7c 77                	jl     c00282d5 <__divdf3+0x329>
c002825e:	be 01 00 00 00       	mov    esi,0x1
c0028263:	29 c6                	sub    esi,eax
c0028265:	81 ca 00 00 00 80    	or     edx,0x80000000
c002826b:	83 fe 1f             	cmp    esi,0x1f
c002826e:	7e 2f                	jle    c002829f <__divdf3+0x2f3>
c0028270:	83 fe 20             	cmp    esi,0x20
c0028273:	75 0a                	jne    c002827f <__divdf3+0x2d3>
c0028275:	85 db                	test   ebx,ebx
c0028277:	0f 95 c3             	setne  bl
c002827a:	0f b6 db             	movzx  ebx,bl
c002827d:	eb 1a                	jmp    c0028299 <__divdf3+0x2ed>
c002827f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028282:	89 d7                	mov    edi,edx
c0028284:	d3 e7                	shl    edi,cl
c0028286:	89 f9                	mov    ecx,edi
c0028288:	09 d9                	or     ecx,ebx
c002828a:	0f 95 c3             	setne  bl
c002828d:	0f b6 db             	movzx  ebx,bl
c0028290:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028295:	29 c1                	sub    ecx,eax
c0028297:	d3 ea                	shr    edx,cl
c0028299:	09 d3                	or     ebx,edx
c002829b:	31 c0                	xor    eax,eax
c002829d:	eb 3a                	jmp    c00282d9 <__divdf3+0x32d>
c002829f:	83 c0 1f             	add    eax,0x1f
c00282a2:	89 d7                	mov    edi,edx
c00282a4:	88 c1                	mov    cl,al
c00282a6:	d3 e7                	shl    edi,cl
c00282a8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00282ab:	89 df                	mov    edi,ebx
c00282ad:	89 f1                	mov    ecx,esi
c00282af:	d3 ef                	shr    edi,cl
c00282b1:	89 f9                	mov    ecx,edi
c00282b3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00282b6:	09 cf                	or     edi,ecx
c00282b8:	88 c1                	mov    cl,al
c00282ba:	d3 e3                	shl    ebx,cl
c00282bc:	85 db                	test   ebx,ebx
c00282be:	0f 95 c3             	setne  bl
c00282c1:	0f b6 db             	movzx  ebx,bl
c00282c4:	09 fb                	or     ebx,edi
c00282c6:	89 f1                	mov    ecx,esi
c00282c8:	d3 ea                	shr    edx,cl
c00282ca:	31 c0                	xor    eax,eax
c00282cc:	eb 0d                	jmp    c00282db <__divdf3+0x32f>
c00282ce:	b8 ff 07 00 00       	mov    eax,0x7ff
c00282d3:	eb 02                	jmp    c00282d7 <__divdf3+0x32b>
c00282d5:	31 c0                	xor    eax,eax
c00282d7:	31 db                	xor    ebx,ebx
c00282d9:	31 d2                	xor    edx,edx
c00282db:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00282de:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00282e1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00282e7:	09 c8                	or     eax,ecx
c00282e9:	c1 e0 14             	shl    eax,0x14
c00282ec:	89 d1                	mov    ecx,edx
c00282ee:	c1 e9 0b             	shr    ecx,0xb
c00282f1:	09 c8                	or     eax,ecx
c00282f3:	89 c6                	mov    esi,eax
c00282f5:	89 d9                	mov    ecx,ebx
c00282f7:	c1 e9 0b             	shr    ecx,0xb
c00282fa:	c1 e2 15             	shl    edx,0x15
c00282fd:	09 ca                	or     edx,ecx
c00282ff:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028305:	0f 95 c0             	setne  al
c0028308:	09 c1                	or     ecx,eax
c002830a:	83 e1 01             	and    ecx,0x1
c002830d:	c1 eb 0a             	shr    ebx,0xa
c0028310:	21 cb                	and    ebx,ecx
c0028312:	01 d3                	add    ebx,edx
c0028314:	89 d8                	mov    eax,ebx
c0028316:	83 d6 00             	adc    esi,0x0
c0028319:	89 f2                	mov    edx,esi
c002831b:	89 c7                	mov    edi,eax
c002831d:	89 d1                	mov    ecx,edx
c002831f:	89 f8                	mov    eax,edi
c0028321:	89 ca                	mov    edx,ecx
c0028323:	83 c4 2c             	add    esp,0x2c
c0028326:	5b                   	pop    ebx
c0028327:	5e                   	pop    esi
c0028328:	5f                   	pop    edi
c0028329:	5d                   	pop    ebp
c002832a:	c3                   	ret    

c002832b <__floatsidf>:
c002832b:	55                   	push   ebp
c002832c:	89 e5                	mov    ebp,esp
c002832e:	56                   	push   esi
c002832f:	53                   	push   ebx
c0028330:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028333:	85 db                	test   ebx,ebx
c0028335:	7e 15                	jle    c002834c <__floatsidf+0x21>
c0028337:	0f bd cb             	bsr    ecx,ebx
c002833a:	83 f1 1f             	xor    ecx,0x1f
c002833d:	d3 e3                	shl    ebx,cl
c002833f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028345:	b8 1e 04 00 00       	mov    eax,0x41e
c002834a:	eb 21                	jmp    c002836d <__floatsidf+0x42>
c002834c:	b8 00 00 00 00       	mov    eax,0x0
c0028351:	ba 00 00 00 00       	mov    edx,0x0
c0028356:	74 2a                	je     c0028382 <__floatsidf+0x57>
c0028358:	f7 db                	neg    ebx
c002835a:	0f bd cb             	bsr    ecx,ebx
c002835d:	83 f1 1f             	xor    ecx,0x1f
c0028360:	d3 e3                	shl    ebx,cl
c0028362:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028368:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002836d:	29 c8                	sub    eax,ecx
c002836f:	c1 e0 14             	shl    eax,0x14
c0028372:	89 c1                	mov    ecx,eax
c0028374:	89 de                	mov    esi,ebx
c0028376:	c1 ee 0b             	shr    esi,0xb
c0028379:	09 f1                	or     ecx,esi
c002837b:	89 ca                	mov    edx,ecx
c002837d:	c1 e3 15             	shl    ebx,0x15
c0028380:	89 d8                	mov    eax,ebx
c0028382:	5b                   	pop    ebx
c0028383:	5e                   	pop    esi
c0028384:	5d                   	pop    ebp
c0028385:	c3                   	ret    

c0028386 <__floatunsidf>:
c0028386:	55                   	push   ebp
c0028387:	89 e5                	mov    ebp,esp
c0028389:	56                   	push   esi
c002838a:	53                   	push   ebx
c002838b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002838e:	85 db                	test   ebx,ebx
c0028390:	74 2a                	je     c00283bc <__floatunsidf+0x36>
c0028392:	0f bd cb             	bsr    ecx,ebx
c0028395:	83 f1 1f             	xor    ecx,0x1f
c0028398:	d3 e3                	shl    ebx,cl
c002839a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00283a0:	b8 1e 04 00 00       	mov    eax,0x41e
c00283a5:	29 c8                	sub    eax,ecx
c00283a7:	c1 e0 14             	shl    eax,0x14
c00283aa:	89 c1                	mov    ecx,eax
c00283ac:	89 de                	mov    esi,ebx
c00283ae:	c1 ee 0b             	shr    esi,0xb
c00283b1:	09 f1                	or     ecx,esi
c00283b3:	89 ca                	mov    edx,ecx
c00283b5:	c1 e3 15             	shl    ebx,0x15
c00283b8:	89 d8                	mov    eax,ebx
c00283ba:	eb 04                	jmp    c00283c0 <__floatunsidf+0x3a>
c00283bc:	31 c0                	xor    eax,eax
c00283be:	31 d2                	xor    edx,edx
c00283c0:	5b                   	pop    ebx
c00283c1:	5e                   	pop    esi
c00283c2:	5d                   	pop    ebp
c00283c3:	c3                   	ret    

c00283c4 <__fixdfsi>:
c00283c4:	55                   	push   ebp
c00283c5:	89 e5                	mov    ebp,esp
c00283c7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283ca:	89 d1                	mov    ecx,edx
c00283cc:	c1 e1 0b             	shl    ecx,0xb
c00283cf:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00283d8:	c1 e8 15             	shr    eax,0x15
c00283db:	09 c1                	or     ecx,eax
c00283dd:	c1 fa 14             	sar    edx,0x14
c00283e0:	78 1f                	js     c0028401 <__fixdfsi+0x3d>
c00283e2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00283e8:	31 c0                	xor    eax,eax
c00283ea:	83 fa 1e             	cmp    edx,0x1e
c00283ed:	77 40                	ja     c002842f <__fixdfsi+0x6b>
c00283ef:	89 c8                	mov    eax,ecx
c00283f1:	0d 00 00 00 80       	or     eax,0x80000000
c00283f6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283fb:	29 d1                	sub    ecx,edx
c00283fd:	d3 e8                	shr    eax,cl
c00283ff:	eb 2e                	jmp    c002842f <__fixdfsi+0x6b>
c0028401:	31 c0                	xor    eax,eax
c0028403:	81 c2 01 04 00 00    	add    edx,0x401
c0028409:	78 24                	js     c002842f <__fixdfsi+0x6b>
c002840b:	83 fa 1e             	cmp    edx,0x1e
c002840e:	7e 09                	jle    c0028419 <__fixdfsi+0x55>
c0028410:	83 fa 1f             	cmp    edx,0x1f
c0028413:	75 18                	jne    c002842d <__fixdfsi+0x69>
c0028415:	85 c9                	test   ecx,ecx
c0028417:	75 14                	jne    c002842d <__fixdfsi+0x69>
c0028419:	89 c8                	mov    eax,ecx
c002841b:	0d 00 00 00 80       	or     eax,0x80000000
c0028420:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028425:	29 d1                	sub    ecx,edx
c0028427:	d3 e8                	shr    eax,cl
c0028429:	f7 d8                	neg    eax
c002842b:	eb 02                	jmp    c002842f <__fixdfsi+0x6b>
c002842d:	31 c0                	xor    eax,eax
c002842f:	5d                   	pop    ebp
c0028430:	c3                   	ret    

c0028431 <__fixunsdfsi>:
c0028431:	55                   	push   ebp
c0028432:	89 e5                	mov    ebp,esp
c0028434:	53                   	push   ebx
c0028435:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028438:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002843b:	89 d3                	mov    ebx,edx
c002843d:	c1 fb 14             	sar    ebx,0x14
c0028440:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028446:	31 c0                	xor    eax,eax
c0028448:	83 fb 1f             	cmp    ebx,0x1f
c002844b:	77 1d                	ja     c002846a <__fixunsdfsi+0x39>
c002844d:	89 d0                	mov    eax,edx
c002844f:	c1 e0 0b             	shl    eax,0xb
c0028452:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028457:	c1 e9 15             	shr    ecx,0x15
c002845a:	09 c8                	or     eax,ecx
c002845c:	0d 00 00 00 80       	or     eax,0x80000000
c0028461:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028466:	29 d9                	sub    ecx,ebx
c0028468:	d3 e8                	shr    eax,cl
c002846a:	5b                   	pop    ebx
c002846b:	5d                   	pop    ebp
c002846c:	c3                   	ret    

c002846d <__cmpdf2>:
c002846d:	55                   	push   ebp
c002846e:	89 e5                	mov    ebp,esp
c0028470:	57                   	push   edi
c0028471:	56                   	push   esi
c0028472:	53                   	push   ebx
c0028473:	83 ec 0c             	sub    esp,0xc
c0028476:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028479:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002847c:	89 ca                	mov    edx,ecx
c002847e:	c1 ea 14             	shr    edx,0x14
c0028481:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028487:	89 cb                	mov    ebx,ecx
c0028489:	c1 fb 1f             	sar    ebx,0x1f
c002848c:	31 da                	xor    edx,ebx
c002848e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028491:	89 df                	mov    edi,ebx
c0028493:	c1 e7 0b             	shl    edi,0xb
c0028496:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028499:	c1 e1 0b             	shl    ecx,0xb
c002849c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00284a2:	c1 eb 15             	shr    ebx,0x15
c00284a5:	09 d9                	or     ecx,ebx
c00284a7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00284aa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00284ad:	89 ce                	mov    esi,ecx
c00284af:	c1 ee 14             	shr    esi,0x14
c00284b2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00284b8:	89 cb                	mov    ebx,ecx
c00284ba:	c1 fb 1f             	sar    ebx,0x1f
c00284bd:	31 de                	xor    esi,ebx
c00284bf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00284c2:	89 df                	mov    edi,ebx
c00284c4:	c1 e7 0b             	shl    edi,0xb
c00284c7:	c1 e1 0b             	shl    ecx,0xb
c00284ca:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00284d0:	c1 eb 15             	shr    ebx,0x15
c00284d3:	09 d9                	or     ecx,ebx
c00284d5:	89 d3                	mov    ebx,edx
c00284d7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00284dd:	43                   	inc    ebx
c00284de:	83 fb 01             	cmp    ebx,0x1
c00284e1:	77 08                	ja     c00284eb <__cmpdf2+0x7e>
c00284e3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00284e6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00284e9:	75 68                	jne    c0028553 <__cmpdf2+0xe6>
c00284eb:	89 f3                	mov    ebx,esi
c00284ed:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00284f3:	43                   	inc    ebx
c00284f4:	83 fb 01             	cmp    ebx,0x1
c00284f7:	77 06                	ja     c00284ff <__cmpdf2+0x92>
c00284f9:	89 fb                	mov    ebx,edi
c00284fb:	09 cb                	or     ebx,ecx
c00284fd:	75 54                	jne    c0028553 <__cmpdf2+0xe6>
c00284ff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028502:	09 f8                	or     eax,edi
c0028504:	09 c8                	or     eax,ecx
c0028506:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028509:	75 12                	jne    c002851d <__cmpdf2+0xb0>
c002850b:	8d 42 01             	lea    eax,[edx+0x1]
c002850e:	83 f8 01             	cmp    eax,0x1
c0028511:	77 0a                	ja     c002851d <__cmpdf2+0xb0>
c0028513:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028516:	31 c0                	xor    eax,eax
c0028518:	83 fb 01             	cmp    ebx,0x1
c002851b:	76 36                	jbe    c0028553 <__cmpdf2+0xe6>
c002851d:	b8 01 00 00 00       	mov    eax,0x1
c0028522:	39 f2                	cmp    edx,esi
c0028524:	7f 2d                	jg     c0028553 <__cmpdf2+0xe6>
c0028526:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002852b:	7c 26                	jl     c0028553 <__cmpdf2+0xe6>
c002852d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028530:	77 07                	ja     c0028539 <__cmpdf2+0xcc>
c0028532:	72 16                	jb     c002854a <__cmpdf2+0xdd>
c0028534:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028537:	76 0a                	jbe    c0028543 <__cmpdf2+0xd6>
c0028539:	89 d0                	mov    eax,edx
c002853b:	c1 f8 1f             	sar    eax,0x1f
c002853e:	83 c8 01             	or     eax,0x1
c0028541:	eb 10                	jmp    c0028553 <__cmpdf2+0xe6>
c0028543:	b8 00 00 00 00       	mov    eax,0x0
c0028548:	73 09                	jae    c0028553 <__cmpdf2+0xe6>
c002854a:	89 d0                	mov    eax,edx
c002854c:	c1 f8 1f             	sar    eax,0x1f
c002854f:	83 e0 02             	and    eax,0x2
c0028552:	48                   	dec    eax
c0028553:	83 c4 0c             	add    esp,0xc
c0028556:	5b                   	pop    ebx
c0028557:	5e                   	pop    esi
c0028558:	5f                   	pop    edi
c0028559:	5d                   	pop    ebp
c002855a:	c3                   	ret    

c002855b <__eqdf2>:
c002855b:	55                   	push   ebp
c002855c:	89 e5                	mov    ebp,esp
c002855e:	50                   	push   eax
c002855f:	6a 01                	push   0x1
c0028561:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028564:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028567:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002856a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002856d:	e8 fb fe ff ff       	call   c002846d <__cmpdf2>
c0028572:	83 c4 18             	add    esp,0x18
c0028575:	c9                   	leave  
c0028576:	c3                   	ret    

c0028577 <__nedf2>:
c0028577:	eb e2                	jmp    c002855b <__eqdf2>

c0028579 <__gtdf2>:
c0028579:	55                   	push   ebp
c002857a:	89 e5                	mov    ebp,esp
c002857c:	50                   	push   eax
c002857d:	6a ff                	push   0xffffffff
c002857f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028582:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028585:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028588:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002858b:	e8 dd fe ff ff       	call   c002846d <__cmpdf2>
c0028590:	83 c4 18             	add    esp,0x18
c0028593:	c9                   	leave  
c0028594:	c3                   	ret    

c0028595 <__gedf2>:
c0028595:	eb e2                	jmp    c0028579 <__gtdf2>

c0028597 <__ltdf2>:
c0028597:	eb c2                	jmp    c002855b <__eqdf2>

c0028599 <__ledf2>:
c0028599:	eb c0                	jmp    c002855b <__eqdf2>

c002859b <__truncdfsf2>:
c002859b:	55                   	push   ebp
c002859c:	89 e5                	mov    ebp,esp
c002859e:	57                   	push   edi
c002859f:	56                   	push   esi
c00285a0:	53                   	push   ebx
c00285a1:	83 ec 0c             	sub    esp,0xc
c00285a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00285a7:	89 d1                	mov    ecx,edx
c00285a9:	c1 f9 14             	sar    ecx,0x14
c00285ac:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00285af:	89 df                	mov    edi,ebx
c00285b1:	c1 e7 0b             	shl    edi,0xb
c00285b4:	89 d0                	mov    eax,edx
c00285b6:	c1 e0 0b             	shl    eax,0xb
c00285b9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00285be:	c1 eb 15             	shr    ebx,0x15
c00285c1:	09 d8                	or     eax,ebx
c00285c3:	89 cb                	mov    ebx,ecx
c00285c5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00285cb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00285d1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00285d7:	0f 86 9e 00 00 00    	jbe    c002867b <__truncdfsf2+0xe0>
c00285dd:	85 db                	test   ebx,ebx
c00285df:	75 0a                	jne    c00285eb <__truncdfsf2+0x50>
c00285e1:	c1 fa 17             	sar    edx,0x17
c00285e4:	30 d2                	xor    dl,dl
c00285e6:	e9 84 00 00 00       	jmp    c002866f <__truncdfsf2+0xd4>
c00285eb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00285f1:	83 fe 83             	cmp    esi,0xffffff83
c00285f4:	7d 4b                	jge    c0028641 <__truncdfsf2+0xa6>
c00285f6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00285fb:	29 f1                	sub    ecx,esi
c00285fd:	83 f9 1f             	cmp    ecx,0x1f
c0028600:	7f 6b                	jg     c002866d <__truncdfsf2+0xd2>
c0028602:	0d 00 00 00 80       	or     eax,0x80000000
c0028607:	89 c3                	mov    ebx,eax
c0028609:	d3 eb                	shr    ebx,cl
c002860b:	be 01 00 00 00       	mov    esi,0x1
c0028610:	d3 e6                	shl    esi,cl
c0028612:	4e                   	dec    esi
c0028613:	21 f0                	and    eax,esi
c0028615:	09 f8                	or     eax,edi
c0028617:	0f 95 c0             	setne  al
c002861a:	0f b6 c0             	movzx  eax,al
c002861d:	09 c3                	or     ebx,eax
c002861f:	89 d9                	mov    ecx,ebx
c0028621:	c1 e9 08             	shr    ecx,0x8
c0028624:	f6 c3 7f             	test   bl,0x7f
c0028627:	0f 95 c0             	setne  al
c002862a:	09 c8                	or     eax,ecx
c002862c:	83 e0 01             	and    eax,0x1
c002862f:	c1 eb 07             	shr    ebx,0x7
c0028632:	21 c3                	and    ebx,eax
c0028634:	81 e2 00 00 00 80    	and    edx,0x80000000
c002863a:	09 d1                	or     ecx,edx
c002863c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002863f:	eb 76                	jmp    c00286b7 <__truncdfsf2+0x11c>
c0028641:	83 c6 80             	add    esi,0xffffff80
c0028644:	7e 1d                	jle    c0028663 <__truncdfsf2+0xc8>
c0028646:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002864c:	75 0b                	jne    c0028659 <__truncdfsf2+0xbe>
c002864e:	09 f8                	or     eax,edi
c0028650:	74 09                	je     c002865b <__truncdfsf2+0xc0>
c0028652:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028657:	eb 02                	jmp    c002865b <__truncdfsf2+0xc0>
c0028659:	31 c0                	xor    eax,eax
c002865b:	c1 fa 17             	sar    edx,0x17
c002865e:	80 ca ff             	or     dl,0xff
c0028661:	eb 0e                	jmp    c0028671 <__truncdfsf2+0xd6>
c0028663:	c1 fa 1f             	sar    edx,0x1f
c0028666:	c1 e2 08             	shl    edx,0x8
c0028669:	09 ca                	or     edx,ecx
c002866b:	eb 04                	jmp    c0028671 <__truncdfsf2+0xd6>
c002866d:	31 d2                	xor    edx,edx
c002866f:	31 c0                	xor    eax,eax
c0028671:	c1 e2 17             	shl    edx,0x17
c0028674:	c1 e8 08             	shr    eax,0x8
c0028677:	09 d0                	or     eax,edx
c0028679:	eb 3c                	jmp    c00286b7 <__truncdfsf2+0x11c>
c002867b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028681:	89 ca                	mov    edx,ecx
c0028683:	c1 fa 0b             	sar    edx,0xb
c0028686:	c1 e2 08             	shl    edx,0x8
c0028689:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002868c:	31 db                	xor    ebx,ebx
c002868e:	85 ff                	test   edi,edi
c0028690:	0f 95 c3             	setne  bl
c0028693:	09 d8                	or     eax,ebx
c0028695:	89 c3                	mov    ebx,eax
c0028697:	c1 eb 08             	shr    ebx,0x8
c002869a:	a8 7f                	test   al,0x7f
c002869c:	0f 95 c2             	setne  dl
c002869f:	89 d6                	mov    esi,edx
c00286a1:	09 de                	or     esi,ebx
c00286a3:	83 e6 01             	and    esi,0x1
c00286a6:	c1 e8 07             	shr    eax,0x7
c00286a9:	21 f0                	and    eax,esi
c00286ab:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00286ae:	09 ca                	or     edx,ecx
c00286b0:	c1 e2 17             	shl    edx,0x17
c00286b3:	09 da                	or     edx,ebx
c00286b5:	01 d0                	add    eax,edx
c00286b7:	83 c4 0c             	add    esp,0xc
c00286ba:	5b                   	pop    ebx
c00286bb:	5e                   	pop    esi
c00286bc:	5f                   	pop    edi
c00286bd:	5d                   	pop    ebp
c00286be:	c3                   	ret    

c00286bf <__extendsfdf2>:
c00286bf:	55                   	push   ebp
c00286c0:	89 e5                	mov    ebp,esp
c00286c2:	57                   	push   edi
c00286c3:	56                   	push   esi
c00286c4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00286c7:	89 d1                	mov    ecx,edx
c00286c9:	c1 f9 17             	sar    ecx,0x17
c00286cc:	c1 e2 08             	shl    edx,0x8
c00286cf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00286d5:	89 c8                	mov    eax,ecx
c00286d7:	80 e4 f8             	and    ah,0xf8
c00286da:	8d 71 01             	lea    esi,[ecx+0x1]
c00286dd:	81 e6 fe 00 00 00    	and    esi,0xfe
c00286e3:	75 27                	jne    c002870c <__extendsfdf2+0x4d>
c00286e5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00286eb:	75 18                	jne    c0028705 <__extendsfdf2+0x46>
c00286ed:	85 d2                	test   edx,edx
c00286ef:	74 20                	je     c0028711 <__extendsfdf2+0x52>
c00286f1:	41                   	inc    ecx
c00286f2:	01 d2                	add    edx,edx
c00286f4:	79 fb                	jns    c00286f1 <__extendsfdf2+0x32>
c00286f6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00286fc:	29 c8                	sub    eax,ecx
c00286fe:	05 81 03 00 00       	add    eax,0x381
c0028703:	eb 0c                	jmp    c0028711 <__extendsfdf2+0x52>
c0028705:	05 00 07 00 00       	add    eax,0x700
c002870a:	eb 05                	jmp    c0028711 <__extendsfdf2+0x52>
c002870c:	05 80 03 00 00       	add    eax,0x380
c0028711:	c1 e0 14             	shl    eax,0x14
c0028714:	89 c1                	mov    ecx,eax
c0028716:	89 d0                	mov    eax,edx
c0028718:	c1 e8 0b             	shr    eax,0xb
c002871b:	09 c1                	or     ecx,eax
c002871d:	c1 e2 15             	shl    edx,0x15
c0028720:	89 d0                	mov    eax,edx
c0028722:	89 ca                	mov    edx,ecx
c0028724:	5e                   	pop    esi
c0028725:	5f                   	pop    edi
c0028726:	5d                   	pop    ebp
c0028727:	c3                   	ret    
c0028728:	66 90                	xchg   ax,ax
c002872a:	66 90                	xchg   ax,ax
c002872c:	66 90                	xchg   ax,ax
c002872e:	66 90                	xchg   ax,ax

c0028730 <fabs>:
c0028730:	83 ec 0c             	sub    esp,0xc
c0028733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028737:	89 04 24             	mov    DWORD PTR [esp],eax
c002873a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002873e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028743:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028747:	dd 04 24             	fld    QWORD PTR [esp]
c002874a:	83 c4 0c             	add    esp,0xc
c002874d:	c3                   	ret    
c002874e:	66 90                	xchg   ax,ax

c0028750 <lrint>:
c0028750:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028754:	83 ec 04             	sub    esp,0x4
c0028757:	db 1c 24             	fistp  DWORD PTR [esp]
c002875a:	58                   	pop    eax
c002875b:	c3                   	ret    

c002875c <lrintf>:
c002875c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028760:	83 ec 04             	sub    esp,0x4
c0028763:	db 1c 24             	fistp  DWORD PTR [esp]
c0028766:	58                   	pop    eax
c0028767:	c3                   	ret    

Disassembly of section .init:

c0028768 <_init>:
c0028768:	55                   	push   ebp
c0028769:	89 e5                	mov    ebp,esp
c002876b:	e8 a8 79 fd ff       	call   c0000118 <frame_dummy>
c0028770:	e8 5b e0 ff ff       	call   c00267d0 <__do_global_ctors_aux>
c0028775:	5d                   	pop    ebp
c0028776:	c3                   	ret    

Disassembly of section .fini:

c0028777 <_fini>:
c0028777:	55                   	push   ebp
c0028778:	89 e5                	mov    ebp,esp
c002877a:	e8 29 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002877f:	5d                   	pop    ebp
c0028780:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028782 <Computer::~Computer()>:
c0028782:	83 ec 0c             	sub    esp,0xc
c0028785:	ba fc a2 02 c0       	mov    edx,0xc002a2fc
c002878a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878e:	89 10                	mov    DWORD PTR [eax],edx
c0028790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028794:	83 ec 0c             	sub    esp,0xc
c0028797:	50                   	push   eax
c0028798:	e8 91 b3 fe ff       	call   c0013b2e <Device::~Device()>
c002879d:	83 c4 10             	add    esp,0x10
c00287a0:	90                   	nop
c00287a1:	83 c4 0c             	add    esp,0xc
c00287a4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00287a6 <Computer::~Computer()>:
c00287a6:	83 ec 0c             	sub    esp,0xc
c00287a9:	83 ec 0c             	sub    esp,0xc
c00287ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287b0:	e8 cd ff ff ff       	call   c0028782 <Computer::~Computer()>
c00287b5:	83 c4 10             	add    esp,0x10
c00287b8:	83 ec 08             	sub    esp,0x8
c00287bb:	68 ec 01 00 00       	push   0x1ec
c00287c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287c4:	e8 86 9f fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c00287c9:	83 c4 10             	add    esp,0x10
c00287cc:	83 c4 0c             	add    esp,0xc
c00287cf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00287d0 <idleCommon()>:
c00287d0:	83 ec 0c             	sub    esp,0xc
c00287d3:	fa                   	cli    
c00287d4:	ff 05 28 f4 02 c0    	inc    DWORD PTR ds:0xc002f428
c00287da:	e8 c6 53 ff ff       	call   c001dba5 <schedule()>
c00287df:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c00287e4:	48                   	dec    eax
c00287e5:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c00287ea:	75 01                	jne    c00287ed <idleCommon()+0x1d>
c00287ec:	fb                   	sti    
c00287ed:	83 c4 0c             	add    esp,0xc
c00287f0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00287f2 <LinkedList<UnixFile>::~LinkedList()>:
c00287f2:	90                   	nop
c00287f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00287f4 <LinkedList<UnixFile>::LinkedList()>:
c00287f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028802:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028809:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002880d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028818:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002881e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028822:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028829:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002882d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028834:	90                   	nop
c0028835:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028836 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028836:	83 ec 0c             	sub    esp,0xc
c0028839:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002883e:	75 10                	jne    c0028850 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028840:	83 ec 0c             	sub    esp,0xc
c0028843:	68 b4 a5 02 c0       	push   0xc002a5b4
c0028848:	e8 c6 17 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c002884d:	83 c4 10             	add    esp,0x10
c0028850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028854:	8b 00                	mov    eax,DWORD PTR [eax]
c0028856:	85 c0                	test   eax,eax
c0028858:	74 34                	je     c002888e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002885a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028861:	85 c0                	test   eax,eax
c0028863:	74 29                	je     c002888e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028869:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002886c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028870:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028877:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002887b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002887e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028882:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028885:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002888c:	eb 65                	jmp    c00288f3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002888e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028892:	8b 00                	mov    eax,DWORD PTR [eax]
c0028894:	85 c0                	test   eax,eax
c0028896:	75 4b                	jne    c00288e3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002889f:	85 c0                	test   eax,eax
c00288a1:	75 40                	jne    c00288e3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00288a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288ab:	89 10                	mov    DWORD PTR [eax],edx
c00288ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288cd:	85 c0                	test   eax,eax
c00288cf:	74 22                	je     c00288f3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288d1:	83 ec 0c             	sub    esp,0xc
c00288d4:	68 d6 a5 02 c0       	push   0xc002a5d6
c00288d9:	e8 35 17 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c00288de:	83 c4 10             	add    esp,0x10
c00288e1:	eb 10                	jmp    c00288f3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288e3:	83 ec 0c             	sub    esp,0xc
c00288e6:	68 e0 a5 02 c0       	push   0xc002a5e0
c00288eb:	e8 23 17 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c00288f0:	83 c4 10             	add    esp,0x10
c00288f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288fa:	8d 50 01             	lea    edx,[eax+0x1]
c00288fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028901:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028904:	90                   	nop
c0028905:	83 c4 0c             	add    esp,0xc
c0028908:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002890a <LinkedList<UnixFile>::getFirstElement()>:
c002890a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002890e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028910:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028912 <LinkedList<UnixFile>::removeFirst()>:
c0028912:	83 ec 0c             	sub    esp,0xc
c0028915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028919:	8b 00                	mov    eax,DWORD PTR [eax]
c002891b:	85 c0                	test   eax,eax
c002891d:	75 12                	jne    c0028931 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002891f:	83 ec 0c             	sub    esp,0xc
c0028922:	68 ec a5 02 c0       	push   0xc002a5ec
c0028927:	e8 e7 16 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c002892c:	83 c4 10             	add    esp,0x10
c002892f:	eb 7e                	jmp    c00289af <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028935:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028938:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002893b:	85 c0                	test   eax,eax
c002893d:	74 10                	je     c002894f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002893f:	83 ec 0c             	sub    esp,0xc
c0028942:	68 37 a6 02 c0       	push   0xc002a637
c0028947:	e8 c7 16 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c002894c:	83 c4 10             	add    esp,0x10
c002894f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028953:	8b 00                	mov    eax,DWORD PTR [eax]
c0028955:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028958:	85 c0                	test   eax,eax
c002895a:	75 33                	jne    c002898f <LinkedList<UnixFile>::removeFirst()+0x7d>
c002895c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028960:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028975:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028978:	83 f8 01             	cmp    eax,0x1
c002897b:	74 21                	je     c002899e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002897d:	83 ec 0c             	sub    esp,0xc
c0028980:	68 10 a6 02 c0       	push   0xc002a610
c0028985:	e8 89 16 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c002898a:	83 c4 10             	add    esp,0x10
c002898d:	eb 0f                	jmp    c002899e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002898f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028993:	8b 00                	mov    eax,DWORD PTR [eax]
c0028995:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899c:	89 10                	mov    DWORD PTR [eax],edx
c002899e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289a5:	8d 50 ff             	lea    edx,[eax-0x1]
c00289a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ac:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289af:	83 c4 0c             	add    esp,0xc
c00289b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00289b4 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00289b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00289b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289bb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00289bc <DriverlessDevice::~DriverlessDevice()>:
c00289bc:	ba dc ae 02 c0       	mov    edx,0xc002aedc
c00289c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289c5:	89 10                	mov    DWORD PTR [eax],edx
c00289c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289cb:	50                   	push   eax
c00289cc:	e8 5d b1 fe ff       	call   c0013b2e <Device::~Device()>
c00289d1:	83 c4 04             	add    esp,0x4
c00289d4:	90                   	nop
c00289d5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00289d6 <DriverlessDevice::~DriverlessDevice()>:
c00289d6:	83 ec 0c             	sub    esp,0xc
c00289d9:	83 ec 0c             	sub    esp,0xc
c00289dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289e0:	e8 d7 ff ff ff       	call   c00289bc <DriverlessDevice::~DriverlessDevice()>
c00289e5:	83 c4 10             	add    esp,0x10
c00289e8:	83 ec 08             	sub    esp,0x8
c00289eb:	68 58 01 00 00       	push   0x158
c00289f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289f4:	e8 56 9d fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c00289f9:	83 c4 10             	add    esp,0x10
c00289fc:	83 c4 0c             	add    esp,0xc
c00289ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028a00 <LinkedList<Device>::addElement(Device*)>:
c0028a00:	83 ec 0c             	sub    esp,0xc
c0028a03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028a08:	75 10                	jne    c0028a1a <LinkedList<Device>::addElement(Device*)+0x1a>
c0028a0a:	83 ec 0c             	sub    esp,0xc
c0028a0d:	68 b4 a5 02 c0       	push   0xc002a5b4
c0028a12:	e8 fc 15 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0028a17:	83 c4 10             	add    esp,0x10
c0028a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a20:	85 c0                	test   eax,eax
c0028a22:	74 3a                	je     c0028a5e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a2b:	85 c0                	test   eax,eax
c0028a2d:	74 2f                	je     c0028a5e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a3a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a52:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a5c:	eb 68                	jmp    c0028ac6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a64:	85 c0                	test   eax,eax
c0028a66:	75 4e                	jne    c0028ab6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a6f:	85 c0                	test   eax,eax
c0028a71:	75 43                	jne    c0028ab6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a77:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a7b:	89 10                	mov    DWORD PTR [eax],edx
c0028a7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a8f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028aa0:	85 c0                	test   eax,eax
c0028aa2:	74 22                	je     c0028ac6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028aa4:	83 ec 0c             	sub    esp,0xc
c0028aa7:	68 d6 a5 02 c0       	push   0xc002a5d6
c0028aac:	e8 62 15 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0028ab1:	83 c4 10             	add    esp,0x10
c0028ab4:	eb 10                	jmp    c0028ac6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028ab6:	83 ec 0c             	sub    esp,0xc
c0028ab9:	68 e0 a5 02 c0       	push   0xc002a5e0
c0028abe:	e8 50 15 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0028ac3:	83 c4 10             	add    esp,0x10
c0028ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028acd:	8d 50 01             	lea    edx,[eax+0x1]
c0028ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ad7:	90                   	nop
c0028ad8:	83 c4 0c             	add    esp,0xc
c0028adb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028adc <LinkedList<Device>::LinkedList()>:
c0028adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028af1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028afc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b0a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b15:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b1c:	90                   	nop
c0028b1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028b1e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b22:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b24:	85 c0                	test   eax,eax
c0028b26:	75 0e                	jne    c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b2f:	85 c0                	test   eax,eax
c0028b31:	75 03                	jne    c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b33:	b0 01                	mov    al,0x1
c0028b35:	c3                   	ret    
c0028b36:	b0 00                	mov    al,0x0
c0028b38:	90                   	nop
c0028b39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028b3a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028b3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b40:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028b42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028b42:	83 ec 0c             	sub    esp,0xc
c0028b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b49:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b4b:	85 c0                	test   eax,eax
c0028b4d:	75 15                	jne    c0028b64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028b4f:	83 ec 0c             	sub    esp,0xc
c0028b52:	68 ec a5 02 c0       	push   0xc002a5ec
c0028b57:	e8 b7 14 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0028b5c:	83 c4 10             	add    esp,0x10
c0028b5f:	e9 88 00 00 00       	jmp    c0028bec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b6b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b6e:	85 c0                	test   eax,eax
c0028b70:	0f 95 c0             	setne  al
c0028b73:	84 c0                	test   al,al
c0028b75:	74 10                	je     c0028b87 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028b77:	83 ec 0c             	sub    esp,0xc
c0028b7a:	68 37 a6 02 c0       	push   0xc002a637
c0028b7f:	e8 8f 14 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0028b84:	83 c4 10             	add    esp,0x10
c0028b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b8d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b90:	85 c0                	test   eax,eax
c0028b92:	0f 94 c0             	sete   al
c0028b95:	84 c0                	test   al,al
c0028b97:	74 33                	je     c0028bcc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028b99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bb5:	83 f8 01             	cmp    eax,0x1
c0028bb8:	74 21                	je     c0028bdb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028bba:	83 ec 0c             	sub    esp,0xc
c0028bbd:	68 10 a6 02 c0       	push   0xc002a610
c0028bc2:	e8 4c 14 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0028bc7:	83 c4 10             	add    esp,0x10
c0028bca:	eb 0f                	jmp    c0028bdb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bd2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd9:	89 10                	mov    DWORD PTR [eax],edx
c0028bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bdf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028be2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bec:	83 c4 0c             	add    esp,0xc
c0028bef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028bf0:	83 ec 0c             	sub    esp,0xc
c0028bf3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028bf8:	75 10                	jne    c0028c0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028bfa:	83 ec 0c             	sub    esp,0xc
c0028bfd:	68 b4 a5 02 c0       	push   0xc002a5b4
c0028c02:	e8 0c 14 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0028c07:	83 c4 10             	add    esp,0x10
c0028c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c10:	85 c0                	test   eax,eax
c0028c12:	74 34                	je     c0028c48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c1b:	85 c0                	test   eax,eax
c0028c1d:	74 29                	je     c0028c48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c2a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c35:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c3f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c46:	eb 65                	jmp    c0028cad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c4e:	85 c0                	test   eax,eax
c0028c50:	75 4b                	jne    c0028c9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c59:	85 c0                	test   eax,eax
c0028c5b:	75 40                	jne    c0028c9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c65:	89 10                	mov    DWORD PTR [eax],edx
c0028c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c87:	85 c0                	test   eax,eax
c0028c89:	74 22                	je     c0028cad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c8b:	83 ec 0c             	sub    esp,0xc
c0028c8e:	68 d6 a5 02 c0       	push   0xc002a5d6
c0028c93:	e8 7b 13 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0028c98:	83 c4 10             	add    esp,0x10
c0028c9b:	eb 10                	jmp    c0028cad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c9d:	83 ec 0c             	sub    esp,0xc
c0028ca0:	68 e0 a5 02 c0       	push   0xc002a5e0
c0028ca5:	e8 69 13 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0028caa:	83 c4 10             	add    esp,0x10
c0028cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028cb4:	8d 50 01             	lea    edx,[eax+0x1]
c0028cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cbb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028cbe:	90                   	nop
c0028cbf:	83 c4 0c             	add    esp,0xc
c0028cc2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028cc4 <ACPI::~ACPI()>:
c0028cc4:	83 ec 0c             	sub    esp,0xc
c0028cc7:	ba 74 b8 02 c0       	mov    edx,0xc002b874
c0028ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd0:	89 10                	mov    DWORD PTR [eax],edx
c0028cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd6:	83 ec 0c             	sub    esp,0xc
c0028cd9:	50                   	push   eax
c0028cda:	e8 4f ae fe ff       	call   c0013b2e <Device::~Device()>
c0028cdf:	83 c4 10             	add    esp,0x10
c0028ce2:	90                   	nop
c0028ce3:	83 c4 0c             	add    esp,0xc
c0028ce6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028ce8 <ACPI::~ACPI()>:
c0028ce8:	83 ec 0c             	sub    esp,0xc
c0028ceb:	83 ec 0c             	sub    esp,0xc
c0028cee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf2:	e8 cd ff ff ff       	call   c0028cc4 <ACPI::~ACPI()>
c0028cf7:	83 c4 10             	add    esp,0x10
c0028cfa:	83 ec 08             	sub    esp,0x8
c0028cfd:	68 64 12 00 00       	push   0x1264
c0028d02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d06:	e8 44 9a fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c0028d0b:	83 c4 10             	add    esp,0x10
c0028d0e:	83 c4 0c             	add    esp,0xc
c0028d11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028d12 <LinkedList<Device>::~LinkedList()>:
c0028d12:	90                   	nop
c0028d13:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028d14 <LinkedList<Device>::isEmpty()>:
c0028d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d18:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d1a:	85 c0                	test   eax,eax
c0028d1c:	75 0e                	jne    c0028d2c <LinkedList<Device>::isEmpty()+0x18>
c0028d1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d25:	85 c0                	test   eax,eax
c0028d27:	75 03                	jne    c0028d2c <LinkedList<Device>::isEmpty()+0x18>
c0028d29:	b0 01                	mov    al,0x1
c0028d2b:	c3                   	ret    
c0028d2c:	b0 00                	mov    al,0x0
c0028d2e:	90                   	nop
c0028d2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028d30 <LinkedList<Device>::getFirstElement()>:
c0028d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d34:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d36:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028d38 <LinkedList<Device>::removeFirst()>:
c0028d38:	83 ec 0c             	sub    esp,0xc
c0028d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d41:	85 c0                	test   eax,eax
c0028d43:	75 15                	jne    c0028d5a <LinkedList<Device>::removeFirst()+0x22>
c0028d45:	83 ec 0c             	sub    esp,0xc
c0028d48:	68 ec a5 02 c0       	push   0xc002a5ec
c0028d4d:	e8 c1 12 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0028d52:	83 c4 10             	add    esp,0x10
c0028d55:	e9 87 00 00 00       	jmp    c0028de1 <LinkedList<Device>::removeFirst()+0xa9>
c0028d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d61:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028d67:	85 c0                	test   eax,eax
c0028d69:	74 10                	je     c0028d7b <LinkedList<Device>::removeFirst()+0x43>
c0028d6b:	83 ec 0c             	sub    esp,0xc
c0028d6e:	68 37 a6 02 c0       	push   0xc002a637
c0028d73:	e8 9b 12 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0028d78:	83 c4 10             	add    esp,0x10
c0028d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d81:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028d87:	85 c0                	test   eax,eax
c0028d89:	75 33                	jne    c0028dbe <LinkedList<Device>::removeFirst()+0x86>
c0028d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028da7:	83 f8 01             	cmp    eax,0x1
c0028daa:	74 24                	je     c0028dd0 <LinkedList<Device>::removeFirst()+0x98>
c0028dac:	83 ec 0c             	sub    esp,0xc
c0028daf:	68 10 a6 02 c0       	push   0xc002a610
c0028db4:	e8 5a 12 ff ff       	call   c001a013 <Krnl::panic(char const*)>
c0028db9:	83 c4 10             	add    esp,0x10
c0028dbc:	eb 12                	jmp    c0028dd0 <LinkedList<Device>::removeFirst()+0x98>
c0028dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028dc4:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dce:	89 10                	mov    DWORD PTR [eax],edx
c0028dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028dd7:	8d 50 ff             	lea    edx,[eax-0x1]
c0028dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dde:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028de1:	83 c4 0c             	add    esp,0xc
c0028de4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028de6 <CPU::~CPU()>:
c0028de6:	83 ec 0c             	sub    esp,0xc
c0028de9:	ba c4 ba 02 c0       	mov    edx,0xc002bac4
c0028dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df2:	89 10                	mov    DWORD PTR [eax],edx
c0028df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df8:	83 ec 0c             	sub    esp,0xc
c0028dfb:	50                   	push   eax
c0028dfc:	e8 2d ad fe ff       	call   c0013b2e <Device::~Device()>
c0028e01:	83 c4 10             	add    esp,0x10
c0028e04:	90                   	nop
c0028e05:	83 c4 0c             	add    esp,0xc
c0028e08:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028e0a <CPU::~CPU()>:
c0028e0a:	83 ec 0c             	sub    esp,0xc
c0028e0d:	83 ec 0c             	sub    esp,0xc
c0028e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e14:	e8 cd ff ff ff       	call   c0028de6 <CPU::~CPU()>
c0028e19:	83 c4 10             	add    esp,0x10
c0028e1c:	83 ec 08             	sub    esp,0x8
c0028e1f:	68 98 11 00 00       	push   0x1198
c0028e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e28:	e8 22 99 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c0028e2d:	83 c4 10             	add    esp,0x10
c0028e30:	83 c4 0c             	add    esp,0xc
c0028e33:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028e34 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028e34:	90                   	nop
c0028e35:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028e36 <ThreadControlBlock::ThreadControlBlock()>:
c0028e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e3a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028e41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e45:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028e4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e50:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e5b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028e62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e66:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028e6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e71:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028e75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e79:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028e7d:	90                   	nop
c0028e7e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028e80 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028e80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e84:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e8e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e99:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ea4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028eaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028eae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028eb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028eb9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ec0:	90                   	nop
c0028ec1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028ec2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028ec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ec6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ec9:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028eca <Vm::_FPUState::_FPUState()>:
c0028eca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ece:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028ed5:	90                   	nop
c0028ed6:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028ed8 <PCI::~PCI()>:
c0028ed8:	83 ec 0c             	sub    esp,0xc
c0028edb:	ba 10 c6 02 c0       	mov    edx,0xc002c610
c0028ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee4:	89 10                	mov    DWORD PTR [eax],edx
c0028ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eea:	83 ec 0c             	sub    esp,0xc
c0028eed:	50                   	push   eax
c0028eee:	e8 0b a6 fe ff       	call   c00134fe <Bus::~Bus()>
c0028ef3:	83 c4 10             	add    esp,0x10
c0028ef6:	90                   	nop
c0028ef7:	83 c4 0c             	add    esp,0xc
c0028efa:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028efc <PCI::~PCI()>:
c0028efc:	83 ec 0c             	sub    esp,0xc
c0028eff:	83 ec 0c             	sub    esp,0xc
c0028f02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f06:	e8 cd ff ff ff       	call   c0028ed8 <PCI::~PCI()>
c0028f0b:	83 c4 10             	add    esp,0x10
c0028f0e:	83 ec 08             	sub    esp,0x8
c0028f11:	68 5c 01 00 00       	push   0x15c
c0028f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f1a:	e8 30 98 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c0028f1f:	83 c4 10             	add    esp,0x10
c0028f22:	83 c4 0c             	add    esp,0xc
c0028f25:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028f26 <IDE::~IDE()>:
c0028f26:	83 ec 0c             	sub    esp,0xc
c0028f29:	ba c4 c6 02 c0       	mov    edx,0xc002c6c4
c0028f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f32:	89 10                	mov    DWORD PTR [eax],edx
c0028f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f38:	83 ec 0c             	sub    esp,0xc
c0028f3b:	50                   	push   eax
c0028f3c:	e8 03 b1 fe ff       	call   c0014044 <HardDiskController::~HardDiskController()>
c0028f41:	83 c4 10             	add    esp,0x10
c0028f44:	90                   	nop
c0028f45:	83 c4 0c             	add    esp,0xc
c0028f48:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028f4a <IDE::~IDE()>:
c0028f4a:	83 ec 0c             	sub    esp,0xc
c0028f4d:	83 ec 0c             	sub    esp,0xc
c0028f50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f54:	e8 cd ff ff ff       	call   c0028f26 <IDE::~IDE()>
c0028f59:	83 c4 10             	add    esp,0x10
c0028f5c:	83 ec 08             	sub    esp,0x8
c0028f5f:	68 70 02 00 00       	push   0x270
c0028f64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f68:	e8 e2 97 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c0028f6d:	83 c4 10             	add    esp,0x10
c0028f70:	83 c4 0c             	add    esp,0xc
c0028f73:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028f74 <SATABus::~SATABus()>:
c0028f74:	83 ec 0c             	sub    esp,0xc
c0028f77:	ba 3c c7 02 c0       	mov    edx,0xc002c73c
c0028f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f80:	89 10                	mov    DWORD PTR [eax],edx
c0028f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f86:	83 ec 0c             	sub    esp,0xc
c0028f89:	50                   	push   eax
c0028f8a:	e8 b5 b0 fe ff       	call   c0014044 <HardDiskController::~HardDiskController()>
c0028f8f:	83 c4 10             	add    esp,0x10
c0028f92:	90                   	nop
c0028f93:	83 c4 0c             	add    esp,0xc
c0028f96:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028f98 <SATABus::~SATABus()>:
c0028f98:	83 ec 0c             	sub    esp,0xc
c0028f9b:	83 ec 0c             	sub    esp,0xc
c0028f9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fa2:	e8 cd ff ff ff       	call   c0028f74 <SATABus::~SATABus()>
c0028fa7:	83 c4 10             	add    esp,0x10
c0028faa:	83 ec 08             	sub    esp,0x8
c0028fad:	68 64 01 00 00       	push   0x164
c0028fb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb6:	e8 94 97 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c0028fbb:	83 c4 10             	add    esp,0x10
c0028fbe:	83 c4 0c             	add    esp,0xc
c0028fc1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028fc2 <ATA::~ATA()>:
c0028fc2:	83 ec 0c             	sub    esp,0xc
c0028fc5:	ba b4 c7 02 c0       	mov    edx,0xc002c7b4
c0028fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fce:	89 10                	mov    DWORD PTR [eax],edx
c0028fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd4:	83 ec 0c             	sub    esp,0xc
c0028fd7:	50                   	push   eax
c0028fd8:	e8 49 b1 fe ff       	call   c0014126 <PhysicalDisk::~PhysicalDisk()>
c0028fdd:	83 c4 10             	add    esp,0x10
c0028fe0:	90                   	nop
c0028fe1:	83 c4 0c             	add    esp,0xc
c0028fe4:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028fe6 <ATA::~ATA()>:
c0028fe6:	83 ec 0c             	sub    esp,0xc
c0028fe9:	83 ec 0c             	sub    esp,0xc
c0028fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff0:	e8 cd ff ff ff       	call   c0028fc2 <ATA::~ATA()>
c0028ff5:	83 c4 10             	add    esp,0x10
c0028ff8:	83 ec 08             	sub    esp,0x8
c0028ffb:	68 7c 01 00 00       	push   0x17c
c0029000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029004:	e8 46 97 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c0029009:	83 c4 10             	add    esp,0x10
c002900c:	83 c4 0c             	add    esp,0xc
c002900f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029010 <ATAPI::~ATAPI()>:
c0029010:	83 ec 0c             	sub    esp,0xc
c0029013:	ba ec c7 02 c0       	mov    edx,0xc002c7ec
c0029018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901c:	89 10                	mov    DWORD PTR [eax],edx
c002901e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029022:	83 ec 0c             	sub    esp,0xc
c0029025:	50                   	push   eax
c0029026:	e8 fb b0 fe ff       	call   c0014126 <PhysicalDisk::~PhysicalDisk()>
c002902b:	83 c4 10             	add    esp,0x10
c002902e:	90                   	nop
c002902f:	83 c4 0c             	add    esp,0xc
c0029032:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029034 <ATAPI::~ATAPI()>:
c0029034:	83 ec 0c             	sub    esp,0xc
c0029037:	83 ec 0c             	sub    esp,0xc
c002903a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002903e:	e8 cd ff ff ff       	call   c0029010 <ATAPI::~ATAPI()>
c0029043:	83 c4 10             	add    esp,0x10
c0029046:	83 ec 08             	sub    esp,0x8
c0029049:	68 80 01 00 00       	push   0x180
c002904e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029052:	e8 f8 96 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c0029057:	83 c4 10             	add    esp,0x10
c002905a:	83 c4 0c             	add    esp,0xc
c002905d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002905e <SATA::~SATA()>:
c002905e:	83 ec 0c             	sub    esp,0xc
c0029061:	ba a0 c8 02 c0       	mov    edx,0xc002c8a0
c0029066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906a:	89 10                	mov    DWORD PTR [eax],edx
c002906c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029070:	83 ec 0c             	sub    esp,0xc
c0029073:	50                   	push   eax
c0029074:	e8 ad b0 fe ff       	call   c0014126 <PhysicalDisk::~PhysicalDisk()>
c0029079:	83 c4 10             	add    esp,0x10
c002907c:	90                   	nop
c002907d:	83 c4 0c             	add    esp,0xc
c0029080:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029082 <SATA::~SATA()>:
c0029082:	83 ec 0c             	sub    esp,0xc
c0029085:	83 ec 0c             	sub    esp,0xc
c0029088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002908c:	e8 cd ff ff ff       	call   c002905e <SATA::~SATA()>
c0029091:	83 c4 10             	add    esp,0x10
c0029094:	83 ec 08             	sub    esp,0x8
c0029097:	68 7c 01 00 00       	push   0x17c
c002909c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a0:	e8 aa 96 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c00290a5:	83 c4 10             	add    esp,0x10
c00290a8:	83 c4 0c             	add    esp,0xc
c00290ab:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00290ac <SATAPI::~SATAPI()>:
c00290ac:	83 ec 0c             	sub    esp,0xc
c00290af:	ba 7c c9 02 c0       	mov    edx,0xc002c97c
c00290b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b8:	89 10                	mov    DWORD PTR [eax],edx
c00290ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290be:	83 ec 0c             	sub    esp,0xc
c00290c1:	50                   	push   eax
c00290c2:	e8 5f b0 fe ff       	call   c0014126 <PhysicalDisk::~PhysicalDisk()>
c00290c7:	83 c4 10             	add    esp,0x10
c00290ca:	90                   	nop
c00290cb:	83 c4 0c             	add    esp,0xc
c00290ce:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00290d0 <SATAPI::~SATAPI()>:
c00290d0:	83 ec 0c             	sub    esp,0xc
c00290d3:	83 ec 0c             	sub    esp,0xc
c00290d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290da:	e8 cd ff ff ff       	call   c00290ac <SATAPI::~SATAPI()>
c00290df:	83 c4 10             	add    esp,0x10
c00290e2:	83 ec 08             	sub    esp,0x8
c00290e5:	68 80 01 00 00       	push   0x180
c00290ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ee:	e8 5c 96 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c00290f3:	83 c4 10             	add    esp,0x10
c00290f6:	83 c4 0c             	add    esp,0xc
c00290f9:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00290fa <AVX::~AVX()>:
c00290fa:	83 ec 0c             	sub    esp,0xc
c00290fd:	ba bc c9 02 c0       	mov    edx,0xc002c9bc
c0029102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029106:	89 10                	mov    DWORD PTR [eax],edx
c0029108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002910c:	83 ec 0c             	sub    esp,0xc
c002910f:	50                   	push   eax
c0029110:	e8 95 b0 fe ff       	call   c00141aa <FPU::~FPU()>
c0029115:	83 c4 10             	add    esp,0x10
c0029118:	90                   	nop
c0029119:	83 c4 0c             	add    esp,0xc
c002911c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c002911e <AVX::~AVX()>:
c002911e:	83 ec 0c             	sub    esp,0xc
c0029121:	83 ec 0c             	sub    esp,0xc
c0029124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029128:	e8 cd ff ff ff       	call   c00290fa <AVX::~AVX()>
c002912d:	83 c4 10             	add    esp,0x10
c0029130:	83 ec 08             	sub    esp,0x8
c0029133:	68 58 01 00 00       	push   0x158
c0029138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002913c:	e8 0e 96 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c0029141:	83 c4 10             	add    esp,0x10
c0029144:	83 c4 0c             	add    esp,0xc
c0029147:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029148 <MMX::~MMX()>:
c0029148:	83 ec 0c             	sub    esp,0xc
c002914b:	ba fc c9 02 c0       	mov    edx,0xc002c9fc
c0029150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029154:	89 10                	mov    DWORD PTR [eax],edx
c0029156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915a:	83 ec 0c             	sub    esp,0xc
c002915d:	50                   	push   eax
c002915e:	e8 47 b0 fe ff       	call   c00141aa <FPU::~FPU()>
c0029163:	83 c4 10             	add    esp,0x10
c0029166:	90                   	nop
c0029167:	83 c4 0c             	add    esp,0xc
c002916a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002916c <MMX::~MMX()>:
c002916c:	83 ec 0c             	sub    esp,0xc
c002916f:	83 ec 0c             	sub    esp,0xc
c0029172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029176:	e8 cd ff ff ff       	call   c0029148 <MMX::~MMX()>
c002917b:	83 c4 10             	add    esp,0x10
c002917e:	83 ec 08             	sub    esp,0x8
c0029181:	68 58 01 00 00       	push   0x158
c0029186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002918a:	e8 c0 95 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c002918f:	83 c4 10             	add    esp,0x10
c0029192:	83 c4 0c             	add    esp,0xc
c0029195:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029196 <SSE::~SSE()>:
c0029196:	83 ec 0c             	sub    esp,0xc
c0029199:	ba 3c ca 02 c0       	mov    edx,0xc002ca3c
c002919e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a2:	89 10                	mov    DWORD PTR [eax],edx
c00291a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a8:	83 ec 0c             	sub    esp,0xc
c00291ab:	50                   	push   eax
c00291ac:	e8 f9 af fe ff       	call   c00141aa <FPU::~FPU()>
c00291b1:	83 c4 10             	add    esp,0x10
c00291b4:	90                   	nop
c00291b5:	83 c4 0c             	add    esp,0xc
c00291b8:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00291ba <SSE::~SSE()>:
c00291ba:	83 ec 0c             	sub    esp,0xc
c00291bd:	83 ec 0c             	sub    esp,0xc
c00291c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c4:	e8 cd ff ff ff       	call   c0029196 <SSE::~SSE()>
c00291c9:	83 c4 10             	add    esp,0x10
c00291cc:	83 ec 08             	sub    esp,0x8
c00291cf:	68 58 01 00 00       	push   0x158
c00291d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291d8:	e8 72 95 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c00291dd:	83 c4 10             	add    esp,0x10
c00291e0:	83 c4 0c             	add    esp,0xc
c00291e3:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00291e4 <x87::~x87()>:
c00291e4:	83 ec 0c             	sub    esp,0xc
c00291e7:	ba 7c ca 02 c0       	mov    edx,0xc002ca7c
c00291ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f0:	89 10                	mov    DWORD PTR [eax],edx
c00291f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f6:	83 ec 0c             	sub    esp,0xc
c00291f9:	50                   	push   eax
c00291fa:	e8 ab af fe ff       	call   c00141aa <FPU::~FPU()>
c00291ff:	83 c4 10             	add    esp,0x10
c0029202:	90                   	nop
c0029203:	83 c4 0c             	add    esp,0xc
c0029206:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029208 <x87::~x87()>:
c0029208:	83 ec 0c             	sub    esp,0xc
c002920b:	83 ec 0c             	sub    esp,0xc
c002920e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029212:	e8 cd ff ff ff       	call   c00291e4 <x87::~x87()>
c0029217:	83 c4 10             	add    esp,0x10
c002921a:	83 ec 08             	sub    esp,0x8
c002921d:	68 58 01 00 00       	push   0x158
c0029222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029226:	e8 24 95 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c002922b:	83 c4 10             	add    esp,0x10
c002922e:	83 c4 0c             	add    esp,0xc
c0029231:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029232 <IOAPIC::~IOAPIC()>:
c0029232:	83 ec 0c             	sub    esp,0xc
c0029235:	ba d4 cb 02 c0       	mov    edx,0xc002cbd4
c002923a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002923e:	89 10                	mov    DWORD PTR [eax],edx
c0029240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029244:	83 ec 0c             	sub    esp,0xc
c0029247:	50                   	push   eax
c0029248:	e8 e1 a8 fe ff       	call   c0013b2e <Device::~Device()>
c002924d:	83 c4 10             	add    esp,0x10
c0029250:	90                   	nop
c0029251:	83 c4 0c             	add    esp,0xc
c0029254:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029256 <IOAPIC::~IOAPIC()>:
c0029256:	83 ec 0c             	sub    esp,0xc
c0029259:	83 ec 0c             	sub    esp,0xc
c002925c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029260:	e8 cd ff ff ff       	call   c0029232 <IOAPIC::~IOAPIC()>
c0029265:	83 c4 10             	add    esp,0x10
c0029268:	83 ec 08             	sub    esp,0x8
c002926b:	68 68 01 00 00       	push   0x168
c0029270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029274:	e8 d6 94 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c0029279:	83 c4 10             	add    esp,0x10
c002927c:	83 c4 0c             	add    esp,0xc
c002927f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029280 <APIC::~APIC()>:
c0029280:	83 ec 0c             	sub    esp,0xc
c0029283:	ba 8c cb 02 c0       	mov    edx,0xc002cb8c
c0029288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002928c:	89 10                	mov    DWORD PTR [eax],edx
c002928e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029292:	83 ec 0c             	sub    esp,0xc
c0029295:	50                   	push   eax
c0029296:	e8 d9 b3 fe ff       	call   c0014674 <InterruptController::~InterruptController()>
c002929b:	83 c4 10             	add    esp,0x10
c002929e:	90                   	nop
c002929f:	83 c4 0c             	add    esp,0xc
c00292a2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00292a4 <APIC::~APIC()>:
c00292a4:	83 ec 0c             	sub    esp,0xc
c00292a7:	83 ec 0c             	sub    esp,0xc
c00292aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292ae:	e8 cd ff ff ff       	call   c0029280 <APIC::~APIC()>
c00292b3:	83 c4 10             	add    esp,0x10
c00292b6:	83 ec 08             	sub    esp,0x8
c00292b9:	68 58 21 00 00       	push   0x2158
c00292be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292c2:	e8 88 94 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c00292c7:	83 c4 10             	add    esp,0x10
c00292ca:	83 c4 0c             	add    esp,0xc
c00292cd:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00292ce <PIC::~PIC()>:
c00292ce:	83 ec 0c             	sub    esp,0xc
c00292d1:	ba 24 cc 02 c0       	mov    edx,0xc002cc24
c00292d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292da:	89 10                	mov    DWORD PTR [eax],edx
c00292dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e0:	83 ec 0c             	sub    esp,0xc
c00292e3:	50                   	push   eax
c00292e4:	e8 8b b3 fe ff       	call   c0014674 <InterruptController::~InterruptController()>
c00292e9:	83 c4 10             	add    esp,0x10
c00292ec:	90                   	nop
c00292ed:	83 c4 0c             	add    esp,0xc
c00292f0:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00292f2 <PIC::~PIC()>:
c00292f2:	83 ec 0c             	sub    esp,0xc
c00292f5:	83 ec 0c             	sub    esp,0xc
c00292f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292fc:	e8 cd ff ff ff       	call   c00292ce <PIC::~PIC()>
c0029301:	83 c4 10             	add    esp,0x10
c0029304:	83 ec 08             	sub    esp,0x8
c0029307:	68 58 21 00 00       	push   0x2158
c002930c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029310:	e8 3a 94 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c0029315:	83 c4 10             	add    esp,0x10
c0029318:	83 c4 0c             	add    esp,0xc
c002931b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002931c <APICTimer::~APICTimer()>:
c002931c:	83 ec 0c             	sub    esp,0xc
c002931f:	ba 78 cc 02 c0       	mov    edx,0xc002cc78
c0029324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029328:	89 10                	mov    DWORD PTR [eax],edx
c002932a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002932e:	83 ec 0c             	sub    esp,0xc
c0029331:	50                   	push   eax
c0029332:	e8 9b d3 fe ff       	call   c00166d2 <Timer::~Timer()>
c0029337:	83 c4 10             	add    esp,0x10
c002933a:	90                   	nop
c002933b:	83 c4 0c             	add    esp,0xc
c002933e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029340 <APICTimer::~APICTimer()>:
c0029340:	83 ec 0c             	sub    esp,0xc
c0029343:	83 ec 0c             	sub    esp,0xc
c0029346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002934a:	e8 cd ff ff ff       	call   c002931c <APICTimer::~APICTimer()>
c002934f:	83 c4 10             	add    esp,0x10
c0029352:	83 ec 08             	sub    esp,0x8
c0029355:	68 60 01 00 00       	push   0x160
c002935a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002935e:	e8 ec 93 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c0029363:	83 c4 10             	add    esp,0x10
c0029366:	83 c4 0c             	add    esp,0xc
c0029369:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002936a <PIT::~PIT()>:
c002936a:	83 ec 0c             	sub    esp,0xc
c002936d:	ba c8 cc 02 c0       	mov    edx,0xc002ccc8
c0029372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029376:	89 10                	mov    DWORD PTR [eax],edx
c0029378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002937c:	83 ec 0c             	sub    esp,0xc
c002937f:	50                   	push   eax
c0029380:	e8 4d d3 fe ff       	call   c00166d2 <Timer::~Timer()>
c0029385:	83 c4 10             	add    esp,0x10
c0029388:	90                   	nop
c0029389:	83 c4 0c             	add    esp,0xc
c002938c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002938e <PIT::~PIT()>:
c002938e:	83 ec 0c             	sub    esp,0xc
c0029391:	83 ec 0c             	sub    esp,0xc
c0029394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029398:	e8 cd ff ff ff       	call   c002936a <PIT::~PIT()>
c002939d:	83 c4 10             	add    esp,0x10
c00293a0:	83 ec 08             	sub    esp,0x8
c00293a3:	68 5c 01 00 00       	push   0x15c
c00293a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293ac:	e8 9e 93 fe ff       	call   c001274f <operator delete(void*, unsigned long)>
c00293b1:	83 c4 10             	add    esp,0x10
c00293b4:	83 c4 0c             	add    esp,0xc
c00293b7:	c3                   	ret    
