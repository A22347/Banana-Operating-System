
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 13 86 02 00       	call   c0028638 <_init>
c0000025:	c3                   	ret    
c0000026:	bb e2 91 02 c0       	mov    ebx,0xc00291e2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb f0 91 02 c0    	cmp    ebx,0xc00291f0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 d9 02 c0       	mov    eax,0xc002d918
c0000049:	3d 18 d9 02 c0       	cmp    eax,0xc002d918
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 d9 02 c0       	push   0xc002d918
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 d9 02 c0       	mov    eax,0xc002d918
c0000075:	2d 18 d9 02 c0       	sub    eax,0xc002d918
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 d9 02 c0       	push   0xc002d918
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 df 02 c0 00 	cmp    BYTE PTR ds:0xc002df48,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f8 91 02 c0       	mov    ebx,0xc00291f8
c00000bb:	81 eb f4 91 02 c0    	sub    ebx,0xc00291f4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f4 91 02 c0       	mov    esi,0xc00291f4
c00000ca:	a1 4c df 02 c0       	mov    eax,ds:0xc002df4c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c df 02 c0       	mov    ds:0xc002df4c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c df 02 c0       	mov    eax,ds:0xc002df4c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 d9 02 c0       	push   0xc002d918
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 df 02 c0 01 	mov    BYTE PTR ds:0xc002df48,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 df 02 c0       	push   0xc002df50
c000012c:	68 18 d9 02 c0       	push   0xc002d918
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 ed d5 01 00       	call   c001d988 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 71 29 01 00       	call   c0012d24 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 cb d5 01 00       	call   c001d988 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 19 da 01 00       	call   c001ddf5 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 c7 df 01 00       	call   c001e3ac <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 90 e3 02 c0 	lgdtd  ds:0xc002e390
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 4e 46 01 00       	call   c0014c27 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 68 df 02 c0       	mov    ds:0xc002df68,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 68 df 02 c0    	mov    DWORD PTR ds:0xc002df68,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 68 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df68
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 00 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6e00],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 00 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e00],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 00 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6e00],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 00 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6e00],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 00 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e00],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 80 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df80
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 80 df 02 c0    	mov    DWORD PTR ds:0xc002df80,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 84 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd207c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 84 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd207c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 80 df 02 c0    	mov    DWORD PTR ds:0xc002df80,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d bc df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfbc
c0000e60:	c7 42 0c b4 df 02 c0 	mov    DWORD PTR [edx+0xc],0xc002dfb4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 80 df 02 c0 02 	test   BYTE PTR ds:0xc002df80,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 80 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df80
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 84 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd207c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 84 df 02 c0 	mov    DWORD PTR [edx*4-0x3ffd207c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 b4 df 02 c0 	lea    edx,[eax*8-0x3ffd204c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 80 df 02 c0       	mov    eax,0xc002df80
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d c0 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002dfc0
c00011e2:	81 fb b4 df 02 c0    	cmp    ebx,0xc002dfb4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d b4 df 02 c0       	cmp    eax,0xc002dfb4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d b0 df 02 c0    	cmp    DWORD PTR ds:0xc002dfb0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 bc df 02 c0       	mov    ds:0xc002dfbc,eax
c000121e:	a3 c0 df 02 c0       	mov    ds:0xc002dfc0,eax
c0001223:	a3 b0 df 02 c0       	mov    ds:0xc002dfb0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 b4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dfb4
c0001231:	c7 40 0c b4 df 02 c0 	mov    DWORD PTR [eax+0xc],0xc002dfb4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 c0 df 02 c0       	mov    ds:0xc002dfc0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 b4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dfb4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 78 df 02 c0 	lea    ebp,[edx*4-0x3ffd2088]
c0001282:	8b 14 95 80 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2080]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 80 df 02 c0 	lea    ecx,[edx*4-0x3ffd2080]
c000129d:	8b 14 95 80 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2080]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd b4 e2 02 c0 	or     DWORD PTR [edi*4-0x3ffd1d4c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 b4 df 02 c0 	lea    eax,[eax*8-0x3ffd204c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,ecx
c0001357:	89 0d c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,ecx
c000135d:	c7 41 08 b4 df 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002dfb4
c0001364:	c7 41 0c b4 df 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002dfb4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ac df 02 c0 	lea    edx,[ecx*8-0x3ffd2054]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d b4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d4c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d b4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d4c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ac df 02 c0 	lea    edx,[eax*4-0x3ffd2054]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d b4 e2 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1d4c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,edi
c000142a:	89 3d c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,edi
c0001430:	c7 47 08 b4 df 02 c0 	mov    DWORD PTR [edi+0x8],0xc002dfb4
c0001437:	c7 47 0c b4 df 02 c0 	mov    DWORD PTR [edi+0xc],0xc002dfb4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d b0 df 02 c0    	mov    DWORD PTR ds:0xc002dfb0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 80 df 02 c0       	mov    edx,0xc002df80
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 80 df 02 c0       	mov    eax,0xc002df80
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d d4 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2d4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 d4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2d4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d d4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2d4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 dc e2 02 c0    	push   DWORD PTR ds:0xc002e2dc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 dc e2 02 c0       	mov    eax,ds:0xc002e2dc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ac df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfac,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 84 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd207c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 b4 df 02 c0       	mov    eax,0xc002dfb4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ac e2 02 c0       	cmp    eax,0xc002e2ac
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 d0 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2d0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 e4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2e4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 f4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2f4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 04 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6cfc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 80 df 02 c0       	mov    ds:0xc002df80,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d c4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d c8 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d cc e2 02 c0    	mov    DWORD PTR ds:0xc002e2cc,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 d4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2d4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 80 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce580]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 78 f1 01 00       	jmp    c0020da4 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 80 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce580]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 a9 f1 01 00       	jmp    c0020deb <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 80 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce580]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 d1 f1 01 00       	jmp    c0020e32 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 58 4a 02 00       	call   c002699c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 20 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6be0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 20 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6be0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 20 93 02 c0       	mov    edx,0xc0029320
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 40 94 02 c0       	mov    edx,0xc0029440
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 8c c7 02 c0       	mov    edx,0xc002c78c
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 4c 94 02 c0       	mov    edx,0xc002944c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 30 94 02 c0       	mov    edx,0xc0029430
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 20 e3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1ce0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 00 e3 02 c0    	mov    ax,ds:0xc002e300
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 00 e3 02 c0    	mov    ds:0xc002e300,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 55 38 02 00       	call   c002699c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 52 94 02 c0       	mov    eax,0xc0029452
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad a0 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c60]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 5b 94 02 c0       	mov    eax,0xc002945b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 20 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6be0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 20 22 02 00       	call   c002699c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 30 94 02 c0       	mov    edx,0xc0029430
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 20 93 02 c0       	mov    edx,0xc0029320
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 30 93 02 c0       	mov    edx,0xc0029330
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 20 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ce0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 20 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ce0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 e7 0b 02 00       	call   c002699c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 cd 0b 02 00       	call   c002699c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 77 93 02 c0       	mov    eax,0xc0029377
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 70 93 02 c0       	mov    eax,0xc0029370
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 20 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ce0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 60 93 02 c0       	mov    esi,0xc0029360
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 10 f3 01 00       	call   c002699c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 40 94 02 c0       	mov    edx,0xc0029440
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 40 93 02 c0       	mov    edx,0xc0029340
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 50 93 02 c0       	mov    edx,0xc0029350
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 62 94 02 c0       	mov    edx,0xc0029462
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 6e 94 02 c0       	mov    edx,0xc002946e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 82 94 02 c0       	mov    edx,0xc0029482
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c a0 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc00297a0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 a0 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc00297a0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 a0 95 02 c0       	mov    eax,0xc00295a0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 e0 94 02 c0       	mov    eax,0xc00294e0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 a0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b60]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 64 fc 01 00       	call   c002846f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 27 fc 01 00       	call   c0028451 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 fb fb 01 00       	call   c002846f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 ae f2 01 00       	call   c0027b74 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 28 fd 01 00       	call   c0028600 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 75 fb 01 00       	call   c002846f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 b7 fa 01 00       	call   c002846f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 84 fa 01 00       	call   c0028451 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 71 f9 01 00       	call   c002846f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 39 f9 01 00       	call   c0028451 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 a0 98 02 c0       	mov    eax,0xc00298a0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 45 f7 01 00       	call   c002846f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 0a f7 01 00       	call   c0028451 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 00 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6300]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 1a f4 01 00       	call   c0028203 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 98 ed 01 00       	call   c0027ba0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 54 f6 01 00       	call   c0028473 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 42 f7 01 00       	call   c0028597 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 2c ed 01 00       	call   c0027ba0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 d7 f5 01 00       	call   c002846d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 b8 f5 01 00       	call   c0028471 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 46 f7 01 00       	call   c0028620 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 f8 f2 01 00       	call   c0028203 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 76 ec 01 00       	call   c0027ba0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 32 f5 01 00       	call   c0028473 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 20 f6 01 00       	call   c0028597 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 0a ec 01 00       	call   c0027ba0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 b5 f4 01 00       	call   c002846d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 95 f4 01 00       	call   c0028471 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 22 f6 01 00       	call   c0028620 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 d0 f3 01 00       	call   c002846f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 8e f3 01 00       	call   c0028451 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 76 f3 01 00       	call   c002846f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 e8 f0 01 00       	call   c0028203 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ea e3 01 00       	call   c0027523 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 4d ea 01 00       	call   c0027ba0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 9f f0 01 00       	call   c0028203 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 a5 e3 01 00       	call   c0027523 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 74 f0 01 00       	call   c0028203 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 c4 f2 01 00       	call   c002846d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 a1 e9 01 00       	call   c0027b74 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 1b f4 01 00       	call   c0028600 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 4a f2 01 00       	call   c0028451 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 45 e9 01 00       	call   c0027b74 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 c3 ef 01 00       	call   c0028203 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 46 e9 01 00       	call   c0027ba0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 98 ef 01 00       	call   c0028203 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 ff eb 01 00       	call   c0027e84 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 7e e2 01 00       	call   c0027523 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 de db 01 00       	call   c0026eb8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 b5 f2 01 00       	call   c0028597 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 9e e8 01 00       	call   c0027ba0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 85 f2 01 00       	call   c0028597 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 f7 e1 01 00       	call   c0027523 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 30 f1 01 00       	call   c0028473 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 18 eb 01 00       	call   c0027e84 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 9e e1 01 00       	call   c0027523 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 84 f2 01 00       	call   c0028620 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 5e ee 01 00       	call   c0028203 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 b5 e7 01 00       	call   c0027b74 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 94 f0 01 00       	call   c002846f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 2d e1 01 00       	call   c0027523 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 59 e7 01 00       	call   c0027b74 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 f3 f1 01 00       	call   c0028620 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 ac ed 01 00       	call   c0028203 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 29 e7 01 00       	call   c0027ba0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 7c ed 01 00       	call   c0028203 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 82 e0 01 00       	call   c0027523 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 52 ed 01 00       	call   c0028203 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 a4 ef 01 00       	call   c002846f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 7b e6 01 00       	call   c0027b74 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 f5 f0 01 00       	call   c0028600 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 24 ef 01 00       	call   c0028451 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 1e e6 01 00       	call   c0027b74 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 9c ec 01 00       	call   c0028203 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 1f e6 01 00       	call   c0027ba0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 71 ec 01 00       	call   c0028203 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 d8 e8 01 00       	call   c0027e84 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 57 df 01 00       	call   c0027523 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 a7 d8 01 00       	call   c0026eb8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 7e ef 01 00       	call   c0028597 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 67 e5 01 00       	call   c0027ba0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 4e ef 01 00       	call   c0028597 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 c0 de 01 00       	call   c0027523 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 f9 ed 01 00       	call   c0028473 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 e0 e7 01 00       	call   c0027e84 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 5f de 01 00       	call   c0027523 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 45 ef 01 00       	call   c0028620 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 1f eb 01 00       	call   c0028203 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 76 e4 01 00       	call   c0027b74 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 55 ed 01 00       	call   c002846f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ee dd 01 00       	call   c0027523 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 1a e4 01 00       	call   c0027b74 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 8f ea 01 00       	call   c0028203 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 95 dd 01 00       	call   c0027523 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 60 9d 02 c0       	mov    eax,0xc0029d60
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 0a e9 01 00       	call   c0028203 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 88 e2 01 00       	call   c0027ba0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 1a d5 01 00       	call   c0026eb8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 f1 eb 01 00       	call   c0028597 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 da e1 01 00       	call   c0027ba0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 bd eb 01 00       	call   c0028597 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 2f db 01 00       	call   c0027523 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 8f eb 01 00       	call   c0028597 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 7e e1 01 00       	call   c0027ba0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 e7 da 01 00       	call   c0027523 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 08 d4 01 00       	call   c0026eb8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 df ea 01 00       	call   c0028597 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 c8 e0 01 00       	call   c0027ba0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 ab ea 01 00       	call   c0028597 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 1d da 01 00       	call   c0027523 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 7d ea 01 00       	call   c0028597 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 6c e0 01 00       	call   c0027ba0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 d5 d9 01 00       	call   c0027523 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 b3 d9 01 00       	call   c0027523 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 8f d2 01 00       	call   c0026eb8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 66 e9 01 00       	call   c0028597 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 4f df 01 00       	call   c0027ba0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 32 e9 01 00       	call   c0028597 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 a4 d8 01 00       	call   c0027523 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 04 e9 01 00       	call   c0028597 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 ed de 01 00       	call   c0027ba0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 56 d8 01 00       	call   c0027523 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 b6 e8 01 00       	call   c0028597 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 9f de 01 00       	call   c0027ba0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 08 d8 01 00       	call   c0027523 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 1d d1 01 00       	call   c0026eb8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 f4 e7 01 00       	call   c0028597 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 dd dd 01 00       	call   c0027ba0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 c4 e7 01 00       	call   c0028597 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 36 d7 01 00       	call   c0027523 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 96 e7 01 00       	call   c0028597 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 7f dd 01 00       	call   c0027ba0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 e8 d6 01 00       	call   c0027523 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 48 e7 01 00       	call   c0028597 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 31 dd 01 00       	call   c0027ba0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 9a d6 01 00       	call   c0027523 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 6e d6 01 00       	call   c0027523 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 cb dc 01 00       	call   c0027ba0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 87 e5 01 00       	call   c0028473 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 16 d6 01 00       	call   c0027523 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 73 dc 01 00       	call   c0027ba0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 2f e5 01 00       	call   c0028473 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 a9 ce 01 00       	call   c0026eb8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 80 e5 01 00       	call   c0028597 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 69 db 01 00       	call   c0027ba0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 4c e5 01 00       	call   c0028597 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 be d4 01 00       	call   c0027523 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 1e e5 01 00       	call   c0028597 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 07 db 01 00       	call   c0027ba0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 70 d4 01 00       	call   c0027523 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 d0 e4 01 00       	call   c0028597 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 b9 da 01 00       	call   c0027ba0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 22 d4 01 00       	call   c0027523 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 82 e4 01 00       	call   c0028597 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 6b da 01 00       	call   c0027ba0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 d4 d3 01 00       	call   c0027523 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 34 e4 01 00       	call   c0028597 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 1d da 01 00       	call   c0027ba0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 86 d3 01 00       	call   c0027523 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 88 cc 01 00       	call   c0026eb8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 5f e3 01 00       	call   c0028597 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 48 d9 01 00       	call   c0027ba0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 2f e3 01 00       	call   c0028597 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 a1 d2 01 00       	call   c0027523 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 01 e3 01 00       	call   c0028597 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ea d8 01 00       	call   c0027ba0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 53 d2 01 00       	call   c0027523 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 b3 e2 01 00       	call   c0028597 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 9c d8 01 00       	call   c0027ba0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 05 d2 01 00       	call   c0027523 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 65 e2 01 00       	call   c0028597 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 4e d8 01 00       	call   c0027ba0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 b7 d1 01 00       	call   c0027523 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 17 e2 01 00       	call   c0028597 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 00 d8 01 00       	call   c0027ba0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 69 d1 01 00       	call   c0027523 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 3d d1 01 00       	call   c0027523 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 9a d7 01 00       	call   c0027ba0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 56 e0 01 00       	call   c0028473 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 e5 d0 01 00       	call   c0027523 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 42 d7 01 00       	call   c0027ba0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 fe df 01 00       	call   c0028473 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 8c d0 01 00       	call   c0027523 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 e9 d6 01 00       	call   c0027ba0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 a5 df 01 00       	call   c0028473 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 33 d0 01 00       	call   c0027523 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 90 d6 01 00       	call   c0027ba0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 4c df 01 00       	call   c0028473 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 aa c8 01 00       	call   c0026eb8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 81 df 01 00       	call   c0028597 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 6a d5 01 00       	call   c0027ba0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 4d df 01 00       	call   c0028597 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 bf ce 01 00       	call   c0027523 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 1f df 01 00       	call   c0028597 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 08 d5 01 00       	call   c0027ba0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 71 ce 01 00       	call   c0027523 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 d1 de 01 00       	call   c0028597 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 ba d4 01 00       	call   c0027ba0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 23 ce 01 00       	call   c0027523 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 83 de 01 00       	call   c0028597 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 6c d4 01 00       	call   c0027ba0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 d5 cd 01 00       	call   c0027523 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 35 de 01 00       	call   c0028597 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 1e d4 01 00       	call   c0027ba0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 87 cd 01 00       	call   c0027523 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 e7 dd 01 00       	call   c0028597 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 d0 d3 01 00       	call   c0027ba0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 36 cd 01 00       	call   c0027523 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 96 dd 01 00       	call   c0028597 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 7f d3 01 00       	call   c0027ba0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 e8 cc 01 00       	call   c0027523 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 e2 c5 01 00       	call   c0026eb8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 b9 dc 01 00       	call   c0028597 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 a2 d2 01 00       	call   c0027ba0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 82 dc 01 00       	call   c0028597 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 f4 cb 01 00       	call   c0027523 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 54 dc 01 00       	call   c0028597 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 3d d2 01 00       	call   c0027ba0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 a6 cb 01 00       	call   c0027523 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 06 dc 01 00       	call   c0028597 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 ef d1 01 00       	call   c0027ba0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 58 cb 01 00       	call   c0027523 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 b8 db 01 00       	call   c0028597 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 a1 d1 01 00       	call   c0027ba0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 0a cb 01 00       	call   c0027523 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 6a db 01 00       	call   c0028597 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 53 d1 01 00       	call   c0027ba0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 bc ca 01 00       	call   c0027523 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 1c db 01 00       	call   c0028597 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 05 d1 01 00       	call   c0027ba0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 6b ca 01 00       	call   c0027523 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 cb da 01 00       	call   c0028597 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 b4 d0 01 00       	call   c0027ba0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 23 ca 01 00       	call   c0027523 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 fc c9 01 00       	call   c0027523 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 5a d0 01 00       	call   c0027ba0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 16 d9 01 00       	call   c0028473 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 a5 c9 01 00       	call   c0027523 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 03 d0 01 00       	call   c0027ba0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 bf d8 01 00       	call   c0028473 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 4d c9 01 00       	call   c0027523 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 ab cf 01 00       	call   c0027ba0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 67 d8 01 00       	call   c0028473 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 f5 c8 01 00       	call   c0027523 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 53 cf 01 00       	call   c0027ba0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 0f d8 01 00       	call   c0028473 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 9d c8 01 00       	call   c0027523 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 fb ce 01 00       	call   c0027ba0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 b7 d7 01 00       	call   c0028473 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 4b c8 01 00       	call   c0027523 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 a9 ce 01 00       	call   c0027ba0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 65 d7 01 00       	call   c0028473 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 79 c0 01 00       	call   c0026eb8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 50 d7 01 00       	call   c0028597 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 39 cd 01 00       	call   c0027ba0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 20 d7 01 00       	call   c0028597 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 92 c6 01 00       	call   c0027523 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 a4 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd625c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 c6 d6 01 00       	call   c0028597 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 af cc 01 00       	call   c0027ba0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 1a c6 01 00       	call   c0027523 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 67 d6 01 00       	call   c0028597 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 50 cc 01 00       	call   c0027ba0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 bb c5 01 00       	call   c0027523 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 08 d6 01 00       	call   c0028597 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 f1 cb 01 00       	call   c0027ba0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 5c c5 01 00       	call   c0027523 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 a9 d5 01 00       	call   c0028597 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 92 cb 01 00       	call   c0027ba0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 fd c4 01 00       	call   c0027523 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 4a d5 01 00       	call   c0028597 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 33 cb 01 00       	call   c0027ba0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 9e c4 01 00       	call   c0027523 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 eb d4 01 00       	call   c0028597 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 d4 ca 01 00       	call   c0027ba0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 3f c4 01 00       	call   c0027523 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 8c d4 01 00       	call   c0028597 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 75 ca 01 00       	call   c0027ba0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 e0 c3 01 00       	call   c0027523 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 2d d4 01 00       	call   c0028597 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 16 ca 01 00       	call   c0027ba0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 81 c3 01 00       	call   c0027523 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 8b bc 01 00       	call   c0026eb8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 62 d3 01 00       	call   c0028597 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 4b c9 01 00       	call   c0027ba0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 32 d3 01 00       	call   c0028597 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 a4 c2 01 00       	call   c0027523 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 c0 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6240]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 d7 d2 01 00       	call   c0028597 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 c0 c8 01 00       	call   c0027ba0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 2b c2 01 00       	call   c0027523 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 77 d2 01 00       	call   c0028597 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 60 c8 01 00       	call   c0027ba0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 cb c1 01 00       	call   c0027523 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 17 d2 01 00       	call   c0028597 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 00 c8 01 00       	call   c0027ba0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 6b c1 01 00       	call   c0027523 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 b7 d1 01 00       	call   c0028597 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 a0 c7 01 00       	call   c0027ba0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 0b c1 01 00       	call   c0027523 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 57 d1 01 00       	call   c0028597 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 40 c7 01 00       	call   c0027ba0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 ab c0 01 00       	call   c0027523 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 f7 d0 01 00       	call   c0028597 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 e0 c6 01 00       	call   c0027ba0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 4b c0 01 00       	call   c0027523 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 97 d0 01 00       	call   c0028597 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 80 c6 01 00       	call   c0027ba0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 eb bf 01 00       	call   c0027523 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 37 d0 01 00       	call   c0028597 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 20 c6 01 00       	call   c0027ba0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 8b bf 01 00       	call   c0027523 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 dc 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6224]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 30 bf 01 00       	call   c0027523 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 8d c5 01 00       	call   c0027ba0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 49 ce 01 00       	call   c0028473 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 d3 be 01 00       	call   c0027523 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 30 c5 01 00       	call   c0027ba0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 ec cd 01 00       	call   c0028473 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 76 be 01 00       	call   c0027523 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 d3 c4 01 00       	call   c0027ba0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 8f cd 01 00       	call   c0028473 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 19 be 01 00       	call   c0027523 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 76 c4 01 00       	call   c0027ba0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 32 cd 01 00       	call   c0028473 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 bc bd 01 00       	call   c0027523 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 19 c4 01 00       	call   c0027ba0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 d5 cc 01 00       	call   c0028473 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 5f bd 01 00       	call   c0027523 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 bc c3 01 00       	call   c0027ba0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 78 cc 01 00       	call   c0028473 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 02 bd 01 00       	call   c0027523 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 5f c3 01 00       	call   c0027ba0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 1b cc 01 00       	call   c0028473 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 a5 bc 01 00       	call   c0027523 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 02 c3 01 00       	call   c0027ba0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 be cb 01 00       	call   c0028473 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 ba c2 01 00       	call   c0027ba0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 2a cd 01 00       	jmp    c0028620 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 9c c9 01 00       	call   c002846f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 5a c9 01 00       	call   c0028451 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 f1 c6 01 00       	call   c0028203 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 f2 b9 01 00       	call   c0027523 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 c1 c6 01 00       	call   c0028203 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 28 c3 01 00       	call   c0027e84 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 c7 c8 01 00       	call   c0028451 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 ca c8 01 00       	call   c002846f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 9d c8 01 00       	call   c002846f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 96 c2 01 00       	call   c0027e84 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 18 ca 01 00       	call   c0028620 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 f3 c9 01 00       	call   c0028620 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 cd c5 01 00       	call   c0028203 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 24 bf 01 00       	call   c0027b74 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 03 c8 01 00       	call   c002846f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 9c b8 01 00       	call   c0027523 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 c0 be 01 00       	call   c0027b74 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 5a c9 01 00       	call   c0028620 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 9a c1 01 00       	call   c0027e84 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 17 b8 01 00       	call   c0027523 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 43 c4 01 00       	call   c0028203 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 43 b7 01 00       	call   c0027523 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 23 b7 01 00       	call   c0027523 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 f3 c3 01 00       	call   c0028203 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 43 c6 01 00       	call   c002846d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 22 bd 01 00       	call   c0027b74 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 9c c7 01 00       	call   c0028600 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 cb c5 01 00       	call   c0028451 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 c9 bc 01 00       	call   c0027b74 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 47 c3 01 00       	call   c0028203 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 ca bc 01 00       	call   c0027ba0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 1c c3 01 00       	call   c0028203 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 83 bf 01 00       	call   c0027e84 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 02 b6 01 00       	call   c0027523 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 cc c2 01 00       	call   c0028203 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 18 c5 01 00       	call   c002846f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 0d bc 01 00       	call   c0027ba0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 df bb 01 00       	call   c0027ba0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 18 c2 01 00       	call   c0028203 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 7c be 01 00       	call   c0027e84 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 44 be 01 00       	call   c0027e84 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 c3 b4 01 00       	call   c0027523 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 a8 c5 01 00       	call   c0028620 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 82 c1 01 00       	call   c0028203 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 d9 ba 01 00       	call   c0027b74 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 b8 c3 01 00       	call   c002846f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 50 b4 01 00       	call   c0027523 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 74 ba 01 00       	call   c0027b74 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 0e c5 01 00       	call   c0028620 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 d7 c2 01 00       	call   c002846f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 95 c2 01 00       	call   c0028451 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 2c c0 01 00       	call   c0028203 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 2d b3 01 00       	call   c0027523 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 fc bf 01 00       	call   c0028203 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 63 bc 01 00       	call   c0027e84 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 02 c2 01 00       	call   c0028451 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 05 c2 01 00       	call   c002846f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 d8 c1 01 00       	call   c002846f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 d1 bb 01 00       	call   c0027e84 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 53 c3 01 00       	call   c0028620 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 2e c3 01 00       	call   c0028620 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 08 bf 01 00       	call   c0028203 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 5f b8 01 00       	call   c0027b74 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 3e c1 01 00       	call   c002846f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 d7 b1 01 00       	call   c0027523 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 fb b7 01 00       	call   c0027b74 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 95 c2 01 00       	call   c0028620 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 d5 ba 01 00       	call   c0027e84 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 52 b1 01 00       	call   c0027523 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 7d bd 01 00       	call   c0028203 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 7d b0 01 00       	call   c0027523 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 5d b0 01 00       	call   c0027523 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 2d bd 01 00       	call   c0028203 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 7d bf 01 00       	call   c002846d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 5b b6 01 00       	call   c0027b74 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 d5 c0 01 00       	call   c0028600 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 04 bf 01 00       	call   c0028451 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 01 b6 01 00       	call   c0027b74 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 7f bc 01 00       	call   c0028203 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 02 b6 01 00       	call   c0027ba0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 54 bc 01 00       	call   c0028203 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 bb b8 01 00       	call   c0027e84 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 3a af 01 00       	call   c0027523 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 04 bc 01 00       	call   c0028203 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 50 be 01 00       	call   c002846f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 45 b5 01 00       	call   c0027ba0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 17 b5 01 00       	call   c0027ba0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 4e bb 01 00       	call   c0028203 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 b2 b7 01 00       	call   c0027e84 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 7f b7 01 00       	call   c0027e84 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 fe ad 01 00       	call   c0027523 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 e3 be 01 00       	call   c0028620 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 bd ba 01 00       	call   c0028203 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 14 b4 01 00       	call   c0027b74 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 f3 bc 01 00       	call   c002846f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 8b ad 01 00       	call   c0027523 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 af b3 01 00       	call   c0027b74 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 49 be 01 00       	call   c0028620 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 12 bc 01 00       	call   c002846f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 d0 bb 01 00       	call   c0028451 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 67 b9 01 00       	call   c0028203 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 68 ac 01 00       	call   c0027523 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 37 b9 01 00       	call   c0028203 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 9e b5 01 00       	call   c0027e84 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 3d bb 01 00       	call   c0028451 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 40 bb 01 00       	call   c002846f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 13 bb 01 00       	call   c002846f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 0c b5 01 00       	call   c0027e84 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 8e bc 01 00       	call   c0028620 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 69 bc 01 00       	call   c0028620 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 43 b8 01 00       	call   c0028203 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 9a b1 01 00       	call   c0027b74 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 79 ba 01 00       	call   c002846f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 12 ab 01 00       	call   c0027523 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 36 b1 01 00       	call   c0027b74 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 d0 bb 01 00       	call   c0028620 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 10 b4 01 00       	call   c0027e84 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 8d aa 01 00       	call   c0027523 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 b8 b6 01 00       	call   c0028203 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 b8 a9 01 00       	call   c0027523 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 98 a9 01 00       	call   c0027523 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 68 b6 01 00       	call   c0028203 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 b8 b8 01 00       	call   c002846d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 96 af 01 00       	call   c0027b74 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 10 ba 01 00       	call   c0028600 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 3f b8 01 00       	call   c0028451 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 3c af 01 00       	call   c0027b74 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 ba b5 01 00       	call   c0028203 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 3d af 01 00       	call   c0027ba0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 8f b5 01 00       	call   c0028203 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 f6 b1 01 00       	call   c0027e84 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 75 a8 01 00       	call   c0027523 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 3f b5 01 00       	call   c0028203 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 8b b7 01 00       	call   c002846f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 80 ae 01 00       	call   c0027ba0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 52 ae 01 00       	call   c0027ba0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 89 b4 01 00       	call   c0028203 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 ed b0 01 00       	call   c0027e84 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 ba b0 01 00       	call   c0027e84 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 39 a7 01 00       	call   c0027523 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 1e b8 01 00       	call   c0028620 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 f8 b3 01 00       	call   c0028203 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 4f ad 01 00       	call   c0027b74 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 2e b6 01 00       	call   c002846f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 c6 a6 01 00       	call   c0027523 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ea ac 01 00       	call   c0027b74 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 84 b7 01 00       	call   c0028620 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 4d b5 01 00       	call   c002846f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 0b b5 01 00       	call   c0028451 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 a2 b2 01 00       	call   c0028203 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 a3 a5 01 00       	call   c0027523 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 72 b2 01 00       	call   c0028203 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 d9 ae 01 00       	call   c0027e84 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 78 b4 01 00       	call   c0028451 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 7b b4 01 00       	call   c002846f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 4e b4 01 00       	call   c002846f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 47 ae 01 00       	call   c0027e84 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 c9 b5 01 00       	call   c0028620 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 a4 b5 01 00       	call   c0028620 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 7e b1 01 00       	call   c0028203 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 d5 aa 01 00       	call   c0027b74 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 b4 b3 01 00       	call   c002846f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 4d a4 01 00       	call   c0027523 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 71 aa 01 00       	call   c0027b74 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 0b b5 01 00       	call   c0028620 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 4b ad 01 00       	call   c0027e84 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 c8 a3 01 00       	call   c0027523 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 f3 af 01 00       	call   c0028203 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 f3 a2 01 00       	call   c0027523 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 d3 a2 01 00       	call   c0027523 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 a3 af 01 00       	call   c0028203 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 f3 b1 01 00       	call   c002846d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 d1 a8 01 00       	call   c0027b74 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 4b b3 01 00       	call   c0028600 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 7a b1 01 00       	call   c0028451 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 77 a8 01 00       	call   c0027b74 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 f5 ae 01 00       	call   c0028203 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 78 a8 01 00       	call   c0027ba0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 ca ae 01 00       	call   c0028203 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 31 ab 01 00       	call   c0027e84 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 b0 a1 01 00       	call   c0027523 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 7a ae 01 00       	call   c0028203 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 c6 b0 01 00       	call   c002846f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 bb a7 01 00       	call   c0027ba0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 8d a7 01 00       	call   c0027ba0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 c4 ad 01 00       	call   c0028203 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 28 aa 01 00       	call   c0027e84 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 f5 a9 01 00       	call   c0027e84 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 74 a0 01 00       	call   c0027523 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 59 b1 01 00       	call   c0028620 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 33 ad 01 00       	call   c0028203 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 8a a6 01 00       	call   c0027b74 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 69 af 01 00       	call   c002846f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 01 a0 01 00       	call   c0027523 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 25 a6 01 00       	call   c0027b74 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 bf b0 01 00       	call   c0028620 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 85 ae 01 00       	call   c002846f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 43 ae 01 00       	call   c0028451 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 da ab 01 00       	call   c0028203 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 db 9e 01 00       	call   c0027523 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 aa ab 01 00       	call   c0028203 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 11 a8 01 00       	call   c0027e84 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 b0 ad 01 00       	call   c0028451 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 b3 ad 01 00       	call   c002846f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 86 ad 01 00       	call   c002846f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 7f a7 01 00       	call   c0027e84 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 01 af 01 00       	call   c0028620 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 d8 ae 01 00       	call   c0028620 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 b2 aa 01 00       	call   c0028203 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 09 a4 01 00       	call   c0027b74 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 e8 ac 01 00       	call   c002846f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 81 9d 01 00       	call   c0027523 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 a9 a3 01 00       	call   c0027b74 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 43 ae 01 00       	call   c0028620 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 84 a6 01 00       	call   c0027e84 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 01 9d 01 00       	call   c0027523 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 2d a9 01 00       	call   c0028203 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 2d 9c 01 00       	call   c0027523 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 0d 9c 01 00       	call   c0027523 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 dd a8 01 00       	call   c0028203 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 11 ab 01 00       	call   c0028451 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 08 a2 01 00       	call   c0027b74 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 82 ac 01 00       	call   c0028600 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 b1 aa 01 00       	call   c0028451 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 ab a1 01 00       	call   c0027b74 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 29 a8 01 00       	call   c0028203 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 ac a1 01 00       	call   c0027ba0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 fe a7 01 00       	call   c0028203 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 65 a4 01 00       	call   c0027e84 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 e4 9a 01 00       	call   c0027523 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 ae a7 01 00       	call   c0028203 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 fa a9 01 00       	call   c002846f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 ef a0 01 00       	call   c0027ba0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 c1 a0 01 00       	call   c0027ba0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 05 a7 01 00       	call   c0028203 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 6c a3 01 00       	call   c0027e84 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 55 a0 01 00       	call   c0027ba0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 11 a9 01 00       	call   c0028473 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 04 a3 01 00       	call   c0027e84 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 83 99 01 00       	call   c0027523 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 68 aa 01 00       	call   c0028620 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 42 a6 01 00       	call   c0028203 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 99 9f 01 00       	call   c0027b74 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 78 a8 01 00       	call   c002846f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 10 99 01 00       	call   c0027523 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 38 9f 01 00       	call   c0027b74 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 d2 a9 01 00       	call   c0028620 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 04 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61fc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 f8 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6208]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 8d a6 01 00       	call   c002846f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 4b a6 01 00       	call   c0028451 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 37 a6 01 00       	call   c002846f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 a9 a3 01 00       	call   c0028203 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 27 9d 01 00       	call   c0027ba0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 79 a3 01 00       	call   c0028203 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 7f 96 01 00       	call   c0027523 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 4e a3 01 00       	call   c0028203 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 9e a5 01 00       	call   c002846d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 7f 9c 01 00       	call   c0027b74 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 f9 a6 01 00       	call   c0028600 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 28 a5 01 00       	call   c0028451 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 27 9c 01 00       	call   c0027b74 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 a5 a2 01 00       	call   c0028203 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 28 9c 01 00       	call   c0027ba0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 7a a2 01 00       	call   c0028203 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 e1 9e 01 00       	call   c0027e84 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 60 95 01 00       	call   c0027523 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 88 9e 01 00       	call   c0027e84 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 0e 95 01 00       	call   c0027523 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 f4 a5 01 00       	call   c0028620 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ce a1 01 00       	call   c0028203 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 25 9b 01 00       	call   c0027b74 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 04 a4 01 00       	call   c002846f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 9d 94 01 00       	call   c0027523 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 c9 9a 01 00       	call   c0027b74 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 63 a5 01 00       	call   c0028620 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 18 a1 01 00       	call   c0028203 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 95 9a 01 00       	call   c0027ba0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 e6 a0 01 00       	call   c0028203 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 ec 93 01 00       	call   c0027523 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 bc a0 01 00       	call   c0028203 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 10 a3 01 00       	call   c0028471 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 e9 99 01 00       	call   c0027b74 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 63 a4 01 00       	call   c0028600 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 92 a2 01 00       	call   c0028451 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 90 99 01 00       	call   c0027b74 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 0e a0 01 00       	call   c0028203 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 91 99 01 00       	call   c0027ba0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 e3 9f 01 00       	call   c0028203 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 4a 9c 01 00       	call   c0027e84 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 c9 92 01 00       	call   c0027523 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 e5 9b 01 00       	call   c0027e84 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 64 92 01 00       	call   c0027523 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 4a a3 01 00       	call   c0028620 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 24 9f 01 00       	call   c0028203 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 7b 98 01 00       	call   c0027b74 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 5a a1 01 00       	call   c002846f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 f3 91 01 00       	call   c0027523 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 1f 98 01 00       	call   c0027b74 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 90 9e 01 00       	call   c0028203 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 96 91 01 00       	call   c0027523 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 1e 9f 02 c0       	mov    eax,0xc0029f1e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 2f 9f 02 c0       	mov    eax,0xc0029f2f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 66 9f 02 c0       	push   0xc0029f66
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 88 e3 02 c0       	mov    eax,0xc002e388
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 6f 9f 02 c0       	push   0xc0029f6f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 9c 69 02 c0       	mov    eax,0xc002699c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 79 9f 02 c0       	push   0xc0029f79
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 d0 66 02 c0       	mov    eax,0xc00266d0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 82 9f 02 c0       	push   0xc0029f82
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 9c 6a 02 c0       	mov    eax,0xc0026a9c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 8c 9f 02 c0       	push   0xc0029f8c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 1c 68 02 c0       	mov    eax,0xc002681c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 95 9f 02 c0       	push   0xc0029f95
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 8c e3 02 c0       	mov    eax,0xc002e38c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 a2 9f 02 c0       	push   0xc0029fa2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 8d e3 02 c0       	mov    eax,0xc002e38d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 bf 5e 00 00       	call   c00144e2 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 14 19 03 c0    	push   DWORD PTR ds:0xc0031914
c000e668:	68 af 9f 02 c0       	push   0xc0029faf
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 81 f5 00 00       	call   c001dbf6 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 6a f8 00 00       	call   c001def4 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 52 e7 01 c0       	push   0xc001e752
c000e693:	ff 35 14 19 03 c0    	push   DWORD PTR ds:0xc0031914
c000e699:	e8 56 f8 00 00       	call   c001def4 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 c8 18 03 c0       	mov    ds:0xc00318c8,eax
c000e6a6:	c6 05 8d e3 02 c0 01 	mov    BYTE PTR ds:0xc002e38d,0x1
c000e6ad:	e8 21 04 01 00       	call   c001ead3 <Vm::initialise8086()>
c000e6b2:	e8 13 4c 00 00       	call   c00132ca <Fs::initVFS()>
c000e6b7:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 b3 de 00 00       	call   c001c586 <Sys::loadSyscalls()>
c000e6d3:	e8 d6 bd 00 00       	call   c001a4ae <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 bc 9f 02 c0       	push   0xc0029fbc
c000e6e2:	68 c5 9f 02 c0       	push   0xc0029fc5
c000e6e7:	e8 e8 ca 00 00       	call   c001b1d4 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 be 56 00 00       	call   c0013db2 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 b1 5d 00 00       	call   c00144b6 <Device::loadDriversForAll()>
c000e705:	e8 ea b8 00 00       	call   c0019ff4 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 cd 9f 02 c0       	push   0xc0029fcd
c000e719:	e8 fc ef 00 00       	call   c001d71a <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 27 f2 00 00       	call   c001d94e <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 24 fb 00 00       	call   c001e258 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 e9 9f 02 c0       	push   0xc0029fe9
c000e749:	50                   	push   eax
c000e74a:	e8 0d 5e 00 00       	call   c001455c <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 88 a1 02 c0       	mov    edx,0xc002a188
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 a1 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3a1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 83 7d 01 00       	call   c0026666 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 e8 a3 00 00       	call   c0018d06 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 c1 a3 00 00       	call   c0018d06 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 9f a3 00 00       	call   c0018d06 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 7d a3 00 00       	call   c0018d06 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 a0 e3 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e3a0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 8b a2 00 00       	call   c0018c82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 66 a2 00 00       	call   c0018c82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 ed 7b 01 00       	call   c0026620 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 aa 7b 01 00       	call   c0026600 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 82 a2 00 00       	call   c0018d06 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 f9 9f 02 c0       	push   0xc0029ff9
c000eaaf:	e8 92 44 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 0c a0 02 c0       	push   0xc002a00c
c000ead2:	e8 6f 44 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 1d a0 02 c0       	push   0xc002a01d
c000eaf5:	e8 4c 44 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 2e a0 02 c0       	push   0xc002a02e
c000eb18:	e8 29 44 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 3f a0 02 c0       	push   0xc002a03f
c000eb3b:	e8 06 44 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 50 a0 02 c0       	push   0xc002a050
c000eb5e:	e8 e3 43 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 61 a0 02 c0       	push   0xc002a061
c000eb81:	e8 c0 43 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 72 a0 02 c0       	push   0xc002a072
c000eba4:	e8 9d 43 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 83 a0 02 c0       	push   0xc002a083
c000ebc7:	e8 7a 43 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 94 a0 02 c0       	push   0xc002a094
c000ebea:	e8 57 43 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 a5 a0 02 c0       	push   0xc002a0a5
c000ec0d:	e8 34 43 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 b6 a0 02 c0       	push   0xc002a0b6
c000ec30:	e8 11 43 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 c7 a0 02 c0       	push   0xc002a0c7
c000ec53:	e8 ee 42 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 d8 a0 02 c0       	push   0xc002a0d8
c000ec76:	e8 cb 42 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 e9 a0 02 c0       	push   0xc002a0e9
c000ec99:	e8 a8 42 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 fa a0 02 c0       	push   0xc002a0fa
c000ecbc:	e8 85 42 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 0b a1 02 c0       	push   0xc002a10b
c000ecdf:	e8 62 42 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 1c a1 02 c0       	push   0xc002a11c
c000ed02:	e8 3f 42 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 2d a1 02 c0       	push   0xc002a12d
c000ed21:	e8 20 42 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 70 ba 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ba70
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 0f 42 00 00       	jmp    c0012f46 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 3e a1 02 c0       	push   0xc002a13e
c000ee0a:	e8 d8 b7 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 44 a1 02 c0       	push   0xc002a144
c000ee42:	e8 a0 b7 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 a0 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3a0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 c4 d2 02 c0 	sete   BYTE PTR ds:0xc002d2c4
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 21 93 00 00       	call   c00181d6 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 a8 54 00 00       	call   c001436c <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 ca 9e 00 00       	call   c0018dbe <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 69 54 00 00       	call   c001436c <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 d3 59 00 00       	call   c00148f2 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 39 54 00 00       	call   c001436c <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 9f f0 00 00       	call   c001dff4 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 4a a1 02 c0       	push   0xc002a14a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 a3 3f 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 5b a1 02 c0       	push   0xc002a15b
c000efc0:	e8 22 b6 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 68 a1 02 c0       	push   0xc002a168
c000efd5:	e8 0d b6 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 72 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a172
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 f6 b5 00 00       	jmp    c001a5e7 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 ac a1 02 c0       	push   0xc002a1ac
c000f086:	e8 bb 3e 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 92 e3 02 c0       	mov    ds:0xc002e392,eax
c000f0c7:	66 89 15 90 e3 02 c0 	mov    WORD PTR ds:0xc002e390,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 e6 eb 00 00       	call   c001ddc4 <unlockScheduler()>
c000f1de:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 74 94 01 00       	call   c00286a0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 6b 94 01 00       	call   c00286a0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 98 e3 02 c0 ff 07 	mov    WORD PTR ds:0xc002e398,0x7ff
c000f323:	a3 9a e3 02 c0       	mov    ds:0xc002e39a,eax
c000f328:	0f 01 1d 98 e3 02 c0 	lidtd  ds:0xc002e398
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 25 28 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 56 2e 00 00       	call   c0012476 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 92 1e 00 00       	call   c00114d0 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 c3 1e 00 00       	call   c0011510 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d a0 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d2a0
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 a0 d2 02 c0       	mov    eax,ds:0xc002d2a0
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 c8 a1 02 c0       	push   0xc002a1c8
c000f6f4:	e8 4d 38 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 a0 d2 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d2a0,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 1b 27 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d a0 d2 02 c0    	mov    ebp,DWORD PTR ds:0xc002d2a0
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 3d 2c 00 00       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d a0 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d2a0
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 f8 a1 02 c0       	push   0xc002a1f8
c000f7ad:	e8 35 ae 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 fd a1 02 c0       	push   0xc002a1fd
c000f7c3:	e8 1f ae 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 e9 e5 00 00       	call   c001ddc2 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 da e5 00 00       	call   c001ddc4 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 3f 26 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 6c 2c 00 00       	call   c0012476 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 24 26 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 0f 29 00 00       	call   c0012132 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 c0 d2 02 c0       	mov    eax,ds:0xc002d2c0
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 c0 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2c0
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 c0 d2 02 c0       	mov    eax,ds:0xc002d2c0
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 b2 0c 00 00       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 74 0c 00 00       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 0b 0d 00 00       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 c0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2c0
c000fb46:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d c0 d2 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d2c0,0x8000
c000fba0:	c6 05 20 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e420,0x1
c000fba7:	c7 05 58 e4 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e458,0xc000fa13
c000fbb1:	c7 05 44 e4 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e444,0xc000f89a
c000fbbb:	c7 05 40 e4 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e440,0xc000f8e5
c000fbc5:	c7 05 4c e4 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e44c,0xc000fa59
c000fbcf:	c7 05 54 e4 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e454,0xc000f963
c000fbd9:	c7 05 48 e4 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e448,0xc000f9c1
c000fbe3:	c7 05 50 e4 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e450,0xc000f9c2
c000fbed:	c7 05 5c e4 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e45c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 f2 09 00 00       	call   c00105fc <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 04 a2 02 c0       	push   0xc002a204
c000fc4a:	e8 f7 32 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 51 04 00 00       	call   c00100b7 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 f3 20 00 00       	call   c0011d5e <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 71 ba 02 c0       	push   0xc002ba71
c000fc92:	e8 50 a9 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d a0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a0,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 c3 22 00 00       	call   c0011f70 <VAS::VAS()>
c000fcad:	89 1d 0c e5 02 c0    	mov    DWORD PTR ds:0xc002e50c,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 1b a2 02 c0 	mov    DWORD PTR [esp],0xc002a21b
c000fcbf:	e8 82 32 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 14 21 00 00       	call   c0011ddd <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 88 e3 02 c0    	mov    DWORD PTR ds:0xc002e388,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 38 a2 02 c0       	push   0xc002a238
c000fced:	e8 54 32 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 fe 24 00 00       	call   c001220a <VAS::~VAS()>
c000fd0c:	c7 04 24 4b a2 02 c0 	mov    DWORD PTR [esp],0xc002a24b
c000fd13:	e8 cf a8 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba e0 e3 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1c20],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be e0 e3 02 c0       	mov    esi,0xc002e3e0
c000fd89:	8d 90 e0 e3 02 c0    	lea    edx,[eax-0x3ffd1c20]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 e0 e3 02 c0    	lea    eax,[edx-0x3ffd1c20]
c000fdef:	8d 94 11 e0 e3 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1c20]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 a4 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2a4
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 a4 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d2a4
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 a4 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2a4
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 d0 e3 02 c0       	mov    ds:0xc002e3d0,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d d4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3d4
c000fe91:	39 05 cc e3 02 c0    	cmp    DWORD PTR ds:0xc002e3cc,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 cc e3 02 c0       	mov    ds:0xc002e3cc,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 d6 0a 00 00       	call   c0010990 <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 66 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a266
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 05 a7 00 00       	jmp    c001a5e7 <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	56                   	push   esi
c000fee3:	53                   	push   ebx
c000fee4:	83 ec 14             	sub    esp,0x14
c000fee7:	8b 35 c4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3c4
c000feed:	89 f3                	mov    ebx,esi
c000feef:	eb 0a                	jmp    c000fefb <Phys::allocatePage()+0x19>
c000fef1:	89 1d c4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c4,ebx
c000fef7:	39 de                	cmp    esi,ebx
c000fef9:	74 24                	je     c000ff1f <Phys::allocatePage()+0x3d>
c000fefb:	53                   	push   ebx
c000fefc:	e8 3b ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff01:	5a                   	pop    edx
c000ff02:	84 c0                	test   al,al
c000ff04:	74 5e                	je     c000ff64 <Phys::allocatePage()+0x82>
c000ff06:	43                   	inc    ebx
c000ff07:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0d:	75 e2                	jne    c000fef1 <Phys::allocatePage()+0xf>
c000ff0f:	31 db                	xor    ebx,ebx
c000ff11:	c7 05 c4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3c4,0x0
c000ff1b:	39 de                	cmp    esi,ebx
c000ff1d:	75 dc                	jne    c000fefb <Phys::allocatePage()+0x19>
c000ff1f:	83 ec 0c             	sub    esp,0xc
c000ff22:	68 7c a2 02 c0       	push   0xc002a27c
c000ff27:	e8 1a 30 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c000ff2c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff33:	e8 e7 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	0f 85 a9 00 00 00    	jne    c000ffec <Phys::allocatePage()+0x10a>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	68 8d a2 02 c0       	push   0xc002a28d
c000ff4b:	e8 97 a6 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	8b 1d c4 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c4
c000ff59:	53                   	push   ebx
c000ff5a:	e8 dd fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff5f:	5a                   	pop    edx
c000ff60:	84 c0                	test   al,al
c000ff62:	75 a2                	jne    c000ff06 <Phys::allocatePage()+0x24>
c000ff64:	6a 01                	push   0x1
c000ff66:	53                   	push   ebx
c000ff67:	e8 9e fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6c:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c000ff71:	59                   	pop    ecx
c000ff72:	40                   	inc    eax
c000ff73:	5b                   	pop    ebx
c000ff74:	a3 d0 e3 02 c0       	mov    ds:0xc002e3d0,eax
c000ff79:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7f:	c1 e0 02             	shl    eax,0x2
c000ff82:	99                   	cdq    
c000ff83:	f7 3d d4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3d4
c000ff89:	39 05 cc e3 02 c0    	cmp    DWORD PTR ds:0xc002e3cc,eax
c000ff8f:	75 61                	jne    c000fff2 <Phys::allocatePage()+0x110>
c000ff91:	83 f8 32             	cmp    eax,0x32
c000ff94:	7e 4e                	jle    c000ffe4 <Phys::allocatePage()+0x102>
c000ff96:	80 3d c0 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3c0,0x0
c000ff9d:	75 45                	jne    c000ffe4 <Phys::allocatePage()+0x102>
c000ff9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa4:	85 c0                	test   eax,eax
c000ffa6:	74 1f                	je     c000ffc7 <Phys::allocatePage()+0xe5>
c000ffa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffab:	85 c0                	test   eax,eax
c000ffad:	74 18                	je     c000ffc7 <Phys::allocatePage()+0xe5>
c000ffaf:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb5:	85 c0                	test   eax,eax
c000ffb7:	74 0e                	je     c000ffc7 <Phys::allocatePage()+0xe5>
c000ffb9:	52                   	push   edx
c000ffba:	6a 10                	push   0x10
c000ffbc:	6a 04                	push   0x4
c000ffbe:	50                   	push   eax
c000ffbf:	e8 6e 2b 00 00       	call   c0012b32 <VAS::scanForEviction(int, int)>
c000ffc4:	83 c4 10             	add    esp,0x10
c000ffc7:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c000ffcc:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffcf:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd2:	c1 e0 02             	shl    eax,0x2
c000ffd5:	99                   	cdq    
c000ffd6:	f7 3d d4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3d4
c000ffdc:	39 05 cc e3 02 c0    	cmp    DWORD PTR ds:0xc002e3cc,eax
c000ffe2:	75 2e                	jne    c0010012 <Phys::allocatePage()+0x130>
c000ffe4:	a1 c4 e3 02 c0       	mov    eax,ds:0xc002e3c4
c000ffe9:	c1 e0 0c             	shl    eax,0xc
c000ffec:	83 c4 14             	add    esp,0x14
c000ffef:	5b                   	pop    ebx
c000fff0:	5e                   	pop    esi
c000fff1:	c3                   	ret    
c000fff2:	83 ec 0c             	sub    esp,0xc
c000fff5:	a3 cc e3 02 c0       	mov    ds:0xc002e3cc,eax
c000fffa:	50                   	push   eax
c000fffb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ffff:	e8 8c 09 00 00       	call   c0010990 <VgaText::updateRAMUsageDisplay(int)>
c0010004:	83 c4 10             	add    esp,0x10
c0010007:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000b:	83 f8 32             	cmp    eax,0x32
c001000e:	7e d4                	jle    c000ffe4 <Phys::allocatePage()+0x102>
c0010010:	eb 84                	jmp    c000ff96 <Phys::allocatePage()+0xb4>
c0010012:	83 ec 0c             	sub    esp,0xc
c0010015:	a3 cc e3 02 c0       	mov    ds:0xc002e3cc,eax
c001001a:	50                   	push   eax
c001001b:	e8 70 09 00 00       	call   c0010990 <VgaText::updateRAMUsageDisplay(int)>
c0010020:	83 c4 10             	add    esp,0x10
c0010023:	eb bf                	jmp    c000ffe4 <Phys::allocatePage()+0x102>

c0010025 <Phys::allocateContiguousPages(int)>:
c0010025:	57                   	push   edi
c0010026:	56                   	push   esi
c0010027:	53                   	push   ebx
c0010028:	31 db                	xor    ebx,ebx
c001002a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001002e:	e8 8f dd 00 00       	call   c001ddc2 <lockScheduler()>
c0010033:	85 db                	test   ebx,ebx
c0010035:	75 11                	jne    c0010048 <Phys::allocateContiguousPages(int)+0x23>
c0010037:	e8 a6 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c001003c:	83 ff 01             	cmp    edi,0x1
c001003f:	89 c6                	mov    esi,eax
c0010041:	74 21                	je     c0010064 <Phys::allocateContiguousPages(int)+0x3f>
c0010043:	bb 01 00 00 00       	mov    ebx,0x1
c0010048:	e8 95 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c001004d:	89 da                	mov    edx,ebx
c001004f:	c1 e2 0c             	shl    edx,0xc
c0010052:	01 f2                	add    edx,esi
c0010054:	39 c2                	cmp    edx,eax
c0010056:	74 17                	je     c001006f <Phys::allocateContiguousPages(int)+0x4a>
c0010058:	bb 01 00 00 00       	mov    ebx,0x1
c001005d:	89 c6                	mov    esi,eax
c001005f:	83 ff 01             	cmp    edi,0x1
c0010062:	75 e4                	jne    c0010048 <Phys::allocateContiguousPages(int)+0x23>
c0010064:	e8 5b dd 00 00       	call   c001ddc4 <unlockScheduler()>
c0010069:	89 f0                	mov    eax,esi
c001006b:	5b                   	pop    ebx
c001006c:	5e                   	pop    esi
c001006d:	5f                   	pop    edi
c001006e:	c3                   	ret    
c001006f:	43                   	inc    ebx
c0010070:	39 fb                	cmp    ebx,edi
c0010072:	75 bf                	jne    c0010033 <Phys::allocateContiguousPages(int)+0xe>
c0010074:	e8 4b dd 00 00       	call   c001ddc4 <unlockScheduler()>
c0010079:	89 f0                	mov    eax,esi
c001007b:	5b                   	pop    ebx
c001007c:	5e                   	pop    esi
c001007d:	5f                   	pop    edi
c001007e:	c3                   	ret    

c001007f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001007f:	56                   	push   esi
c0010080:	53                   	push   ebx
c0010081:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010085:	39 1d c8 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3c8,ebx
c001008b:	73 06                	jae    c0010093 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001008d:	89 1d c8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c8,ebx
c0010093:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010097:	c1 eb 0c             	shr    ebx,0xc
c001009a:	c1 e8 0c             	shr    eax,0xc
c001009d:	39 d8                	cmp    eax,ebx
c001009f:	73 13                	jae    c00100b4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100a1:	6a 00                	push   0x0
c00100a3:	8d 70 01             	lea    esi,[eax+0x1]
c00100a6:	50                   	push   eax
c00100a7:	e8 5e fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100ac:	5a                   	pop    edx
c00100ad:	89 f0                	mov    eax,esi
c00100af:	59                   	pop    ecx
c00100b0:	39 f3                	cmp    ebx,esi
c00100b2:	75 ed                	jne    c00100a1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100b4:	5b                   	pop    ebx
c00100b5:	5e                   	pop    esi
c00100b6:	c3                   	ret    

c00100b7 <Phys::physicalMemorySetup(unsigned int)>:
c00100b7:	55                   	push   ebp
c00100b8:	57                   	push   edi
c00100b9:	56                   	push   esi
c00100ba:	53                   	push   ebx
c00100bb:	31 db                	xor    ebx,ebx
c00100bd:	83 ec 40             	sub    esp,0x40
c00100c0:	6a 30                	push   0x30
c00100c2:	6a 00                	push   0x0
c00100c4:	68 e0 e3 02 c0       	push   0xc002e3e0
c00100c9:	e8 aa 06 ff ff       	call   c0000778 <memset>
c00100ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100d7:	05 00 10 00 00       	add    eax,0x1000
c00100dc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100e0:	83 c4 10             	add    esp,0x10
c00100e3:	83 ec 08             	sub    esp,0x8
c00100e6:	6a 01                	push   0x1
c00100e8:	53                   	push   ebx
c00100e9:	43                   	inc    ebx
c00100ea:	e8 1b fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100ef:	83 c4 10             	add    esp,0x10
c00100f2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100f8:	75 e9                	jne    c00100e3 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100fa:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010101:	66 85 c0             	test   ax,ax
c0010104:	0f 84 8e 01 00 00    	je     c0010298 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001010a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001010e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010116:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001011a:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001011f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010123:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001012b:	eb 15                	jmp    c0010142 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001012d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010131:	83 c3 18             	add    ebx,0x18
c0010134:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010138:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001013c:	0f 84 66 01 00 00    	je     c00102a8 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010142:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010145:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010148:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001014b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001014f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010153:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010155:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010158:	01 f0                	add    eax,esi
c001015a:	55                   	push   ebp
c001015b:	11 fa                	adc    edx,edi
c001015d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010161:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010165:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010169:	56                   	push   esi
c001016a:	68 c8 a2 02 c0       	push   0xc002a2c8
c001016f:	e8 d2 2d 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0010174:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010178:	83 c4 10             	add    esp,0x10
c001017b:	09 f8                	or     eax,edi
c001017d:	0f 85 25 01 00 00    	jne    c00102a8 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010183:	4d                   	dec    ebp
c0010184:	75 a7                	jne    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010186:	ba 00 00 08 00       	mov    edx,0x80000
c001018b:	89 c1                	mov    ecx,eax
c001018d:	39 f2                	cmp    edx,esi
c001018f:	19 f9                	sbb    ecx,edi
c0010191:	0f 82 a7 00 00 00    	jb     c001023e <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010197:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001019b:	89 c1                	mov    ecx,eax
c001019d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101a1:	0f 83 97 00 00 00    	jae    c001023e <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101a7:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101b0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101b4:	39 fa                	cmp    edx,edi
c00101b6:	19 e8                	sbb    eax,ebp
c00101b8:	0f 82 14 01 00 00    	jb     c00102d2 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101be:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101c2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101c6:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101cc:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d1:	83 d5 ff             	adc    ebp,0xffffffff
c00101d4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101d8:	31 c0                	xor    eax,eax
c00101da:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101de:	39 fa                	cmp    edx,edi
c00101e0:	89 c1                	mov    ecx,eax
c00101e2:	19 e9                	sbb    ecx,ebp
c00101e4:	0f 83 43 ff ff ff    	jae    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101ea:	be 00 00 08 00       	mov    esi,0x80000
c00101ef:	50                   	push   eax
c00101f0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101f4:	57                   	push   edi
c00101f5:	56                   	push   esi
c00101f6:	68 ec a2 02 c0       	push   0xc002a2ec
c00101fb:	e8 46 2d 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0010200:	5a                   	pop    edx
c0010201:	59                   	pop    ecx
c0010202:	57                   	push   edi
c0010203:	56                   	push   esi
c0010204:	e8 76 fe ff ff       	call   c001007f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010209:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001020d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010211:	83 c4 0c             	add    esp,0xc
c0010214:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010218:	03 05 d4 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e3d4
c001021e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010225:	a3 d4 e3 02 c0       	mov    ds:0xc002e3d4,eax
c001022a:	52                   	push   edx
c001022b:	50                   	push   eax
c001022c:	68 a9 a2 02 c0       	push   0xc002a2a9
c0010231:	e8 10 2d 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0010236:	83 c4 10             	add    esp,0x10
c0010239:	e9 ef fe ff ff       	jmp    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c001023e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010242:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001024a:	39 ea                	cmp    edx,ebp
c001024c:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010250:	0f 82 d7 fe ff ff    	jb     c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010256:	ba ff 1f 00 00       	mov    edx,0x1fff
c001025b:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001025f:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010263:	0f 83 c4 fe ff ff    	jae    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010269:	39 ee                	cmp    esi,ebp
c001026b:	89 f8                	mov    eax,edi
c001026d:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010271:	0f 83 78 ff ff ff    	jae    c00101ef <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010277:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001027b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001027f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010283:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010287:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001028b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001028f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010293:	e9 57 ff ff ff       	jmp    c00101ef <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010298:	83 ec 0c             	sub    esp,0xc
c001029b:	68 9b a2 02 c0       	push   0xc002a29b
c00102a0:	e8 42 a3 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	bb 40 01 00 00       	mov    ebx,0x140
c00102ad:	83 ec 08             	sub    esp,0x8
c00102b0:	6a 00                	push   0x0
c00102b2:	53                   	push   ebx
c00102b3:	43                   	inc    ebx
c00102b4:	e8 51 fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102b9:	ff 05 d4 e3 02 c0    	inc    DWORD PTR ds:0xc002e3d4
c00102bf:	83 c4 10             	add    esp,0x10
c00102c2:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102c8:	75 e3                	jne    c00102ad <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102ca:	83 c4 3c             	add    esp,0x3c
c00102cd:	5b                   	pop    ebx
c00102ce:	5e                   	pop    esi
c00102cf:	5f                   	pop    edi
c00102d0:	5d                   	pop    ebp
c00102d1:	c3                   	ret    
c00102d2:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102e2:	e9 d7 fe ff ff       	jmp    c00101be <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102e7:	90                   	nop

c00102e8 <Pipe::isAtty()>:
c00102e8:	31 c0                	xor    eax,eax
c00102ea:	c3                   	ret    
c00102eb:	90                   	nop

c00102ec <Pipe::~Pipe()>:
c00102ec:	83 ec 0c             	sub    esp,0xc
c00102ef:	ba 58 a3 02 c0       	mov    edx,0xc002a358
c00102f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102f8:	89 10                	mov    DWORD PTR [eax],edx
c00102fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102fe:	83 ec 0c             	sub    esp,0xc
c0010301:	50                   	push   eax
c0010302:	e8 37 16 00 00       	call   c001193e <UnixFile::~UnixFile()>
c0010307:	83 c4 10             	add    esp,0x10
c001030a:	90                   	nop
c001030b:	83 c4 0c             	add    esp,0xc
c001030e:	c3                   	ret    
c001030f:	90                   	nop

c0010310 <Pipe::~Pipe()>:
c0010310:	83 ec 0c             	sub    esp,0xc
c0010313:	83 ec 0c             	sub    esp,0xc
c0010316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031a:	e8 cd ff ff ff       	call   c00102ec <Pipe::~Pipe()>
c001031f:	83 c4 10             	add    esp,0x10
c0010322:	83 ec 08             	sub    esp,0x8
c0010325:	6a 20                	push   0x20
c0010327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001032b:	e8 36 2b 00 00       	call   c0012e66 <operator delete(void*, unsigned long)>
c0010330:	83 c4 10             	add    esp,0x10
c0010333:	83 c4 0c             	add    esp,0xc
c0010336:	c3                   	ret    
c0010337:	90                   	nop

c0010338 <Pipe::read(unsigned long long, void*, int*)>:
c0010338:	55                   	push   ebp
c0010339:	57                   	push   edi
c001033a:	56                   	push   esi
c001033b:	53                   	push   ebx
c001033c:	83 ec 1c             	sub    esp,0x1c
c001033f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010343:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010347:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001034b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001034e:	89 c8                	mov    eax,ecx
c0010350:	99                   	cdq    
c0010351:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010355:	74 19                	je     c0010370 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010357:	39 f9                	cmp    ecx,edi
c0010359:	89 d1                	mov    ecx,edx
c001035b:	19 f1                	sbb    ecx,esi
c001035d:	73 11                	jae    c0010370 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001035f:	e8 5e da 00 00       	call   c001ddc2 <lockScheduler()>
c0010364:	e8 95 dd 00 00       	call   c001e0fe <schedule()>
c0010369:	e8 56 da 00 00       	call   c001ddc4 <unlockScheduler()>
c001036e:	eb db                	jmp    c001034b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010370:	39 f8                	cmp    eax,edi
c0010372:	89 d1                	mov    ecx,edx
c0010374:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010378:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001037c:	19 f1                	sbb    ecx,esi
c001037e:	73 08                	jae    c0010388 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010380:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010384:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010388:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001038b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001038e:	29 c6                	sub    esi,eax
c0010390:	89 f1                	mov    ecx,esi
c0010392:	c1 f9 1f             	sar    ecx,0x1f
c0010395:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010399:	89 ca                	mov    edx,ecx
c001039b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001039f:	19 d1                	sbb    ecx,edx
c00103a1:	73 04                	jae    c00103a7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00103a3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103a7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103ab:	89 fd                	mov    ebp,edi
c00103ad:	29 f5                	sub    ebp,esi
c00103af:	85 f6                	test   esi,esi
c00103b1:	74 12                	je     c00103c5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103b3:	52                   	push   edx
c00103b4:	56                   	push   esi
c00103b5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103b8:	50                   	push   eax
c00103b9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103bd:	e8 82 03 ff ff       	call   c0000744 <memcpy>
c00103c2:	83 c4 10             	add    esp,0x10
c00103c5:	85 ed                	test   ebp,ebp
c00103c7:	74 12                	je     c00103db <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103c9:	50                   	push   eax
c00103ca:	55                   	push   ebp
c00103cb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103ce:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103d2:	56                   	push   esi
c00103d3:	e8 6c 03 ff ff       	call   c0000744 <memcpy>
c00103d8:	83 c4 10             	add    esp,0x10
c00103db:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103de:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103e1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103e4:	99                   	cdq    
c00103e5:	89 f7                	mov    edi,esi
c00103e7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103eb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103ef:	c1 ff 1f             	sar    edi,0x1f
c00103f2:	57                   	push   edi
c00103f3:	56                   	push   esi
c00103f4:	52                   	push   edx
c00103f5:	50                   	push   eax
c00103f6:	e8 a1 66 01 00       	call   c0026a9c <__umoddi3>
c00103fb:	83 c4 10             	add    esp,0x10
c00103fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010401:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010406:	75 10                	jne    c0010418 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010408:	83 ec 0c             	sub    esp,0xc
c001040b:	68 15 a3 02 c0       	push   0xc002a315
c0010410:	e8 d2 a1 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0010415:	83 c4 10             	add    esp,0x10
c0010418:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001041c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010420:	89 10                	mov    DWORD PTR [eax],edx
c0010422:	83 c4 1c             	add    esp,0x1c
c0010425:	31 c0                	xor    eax,eax
c0010427:	5b                   	pop    ebx
c0010428:	5e                   	pop    esi
c0010429:	5f                   	pop    edi
c001042a:	5d                   	pop    ebp
c001042b:	c3                   	ret    

c001042c <Pipe::write(unsigned long long, void*, int*)>:
c001042c:	55                   	push   ebp
c001042d:	57                   	push   edi
c001042e:	56                   	push   esi
c001042f:	53                   	push   ebx
c0010430:	83 ec 1c             	sub    esp,0x1c
c0010433:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010437:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001043b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001043f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010442:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010445:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010448:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001044c:	89 de                	mov    esi,ebx
c001044e:	89 df                	mov    edi,ebx
c0010450:	c1 ff 1f             	sar    edi,0x1f
c0010453:	01 c6                	add    esi,eax
c0010455:	89 c8                	mov    eax,ecx
c0010457:	11 d7                	adc    edi,edx
c0010459:	99                   	cdq    
c001045a:	39 f1                	cmp    ecx,esi
c001045c:	89 d0                	mov    eax,edx
c001045e:	19 f8                	sbb    eax,edi
c0010460:	b8 01 00 00 00       	mov    eax,0x1
c0010465:	0f 82 80 00 00 00    	jb     c00104eb <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001046b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001046e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010471:	01 d8                	add    eax,ebx
c0010473:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010477:	99                   	cdq    
c0010478:	f7 f9                	idiv   ecx
c001047a:	29 d1                	sub    ecx,edx
c001047c:	89 d7                	mov    edi,edx
c001047e:	89 c8                	mov    eax,ecx
c0010480:	99                   	cdq    
c0010481:	39 ce                	cmp    esi,ecx
c0010483:	19 d3                	sbb    ebx,edx
c0010485:	bb 00 00 00 00       	mov    ebx,0x0
c001048a:	72 04                	jb     c0010490 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001048c:	89 f3                	mov    ebx,esi
c001048e:	29 cb                	sub    ebx,ecx
c0010490:	89 f1                	mov    ecx,esi
c0010492:	29 d9                	sub    ecx,ebx
c0010494:	74 1a                	je     c00104b0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010496:	52                   	push   edx
c0010497:	51                   	push   ecx
c0010498:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001049c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104a0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104a3:	57                   	push   edi
c00104a4:	e8 9b 02 ff ff       	call   c0000744 <memcpy>
c00104a9:	83 c4 10             	add    esp,0x10
c00104ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104b0:	85 db                	test   ebx,ebx
c00104b2:	74 12                	je     c00104c6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104b4:	50                   	push   eax
c00104b5:	53                   	push   ebx
c00104b6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104ba:	51                   	push   ecx
c00104bb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104be:	e8 81 02 ff ff       	call   c0000744 <memcpy>
c00104c3:	83 c4 10             	add    esp,0x10
c00104c6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104c9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104ce:	75 10                	jne    c00104e0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104d0:	83 ec 0c             	sub    esp,0xc
c00104d3:	68 31 a3 02 c0       	push   0xc002a331
c00104d8:	e8 0a a1 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c00104dd:	83 c4 10             	add    esp,0x10
c00104e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104e4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104e7:	89 38                	mov    DWORD PTR [eax],edi
c00104e9:	31 c0                	xor    eax,eax
c00104eb:	83 c4 1c             	add    esp,0x1c
c00104ee:	5b                   	pop    ebx
c00104ef:	5e                   	pop    esi
c00104f0:	5f                   	pop    edi
c00104f1:	5d                   	pop    ebp
c00104f2:	c3                   	ret    
c00104f3:	90                   	nop

c00104f4 <Pipe::Pipe(int)>:
c00104f4:	83 ec 0c             	sub    esp,0xc
c00104f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fb:	83 ec 08             	sub    esp,0x8
c00104fe:	6a 00                	push   0x0
c0010500:	50                   	push   eax
c0010501:	e8 56 12 00 00       	call   c001175c <UnixFile::UnixFile(int)>
c0010506:	83 c4 10             	add    esp,0x10
c0010509:	ba 58 a3 02 c0       	mov    edx,0xc002a358
c001050e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010512:	89 10                	mov    DWORD PTR [eax],edx
c0010514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010518:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001051c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001051f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010523:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001052a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010539:	83 ec 0c             	sub    esp,0xc
c001053c:	50                   	push   eax
c001053d:	e8 fe f2 ff ff       	call   c000f840 <malloc>
c0010542:	83 c4 10             	add    esp,0x10
c0010545:	89 c2                	mov    edx,eax
c0010547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001054e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010552:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010556:	90                   	nop
c0010557:	83 c4 0c             	add    esp,0xc
c001055a:	c3                   	ret    
c001055b:	90                   	nop

c001055c <VgaText::isAtty()>:
c001055c:	b0 01                	mov    al,0x1
c001055e:	c3                   	ret    
c001055f:	90                   	nop

c0010560 <VgaText::~VgaText()>:
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	ba 14 a4 02 c0       	mov    edx,0xc002a414
c0010568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056c:	89 10                	mov    DWORD PTR [eax],edx
c001056e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010572:	83 ec 0c             	sub    esp,0xc
c0010575:	50                   	push   eax
c0010576:	e8 c3 13 00 00       	call   c001193e <UnixFile::~UnixFile()>
c001057b:	83 c4 10             	add    esp,0x10
c001057e:	90                   	nop
c001057f:	83 c4 0c             	add    esp,0xc
c0010582:	c3                   	ret    
c0010583:	90                   	nop

c0010584 <VgaText::~VgaText()>:
c0010584:	83 ec 0c             	sub    esp,0xc
c0010587:	83 ec 0c             	sub    esp,0xc
c001058a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001058e:	e8 cd ff ff ff       	call   c0010560 <VgaText::~VgaText()>
c0010593:	83 c4 10             	add    esp,0x10
c0010596:	83 ec 08             	sub    esp,0x8
c0010599:	68 60 12 00 00       	push   0x1260
c001059e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a2:	e8 bf 28 00 00       	call   c0012e66 <operator delete(void*, unsigned long)>
c00105a7:	83 c4 10             	add    esp,0x10
c00105aa:	83 c4 0c             	add    esp,0xc
c00105ad:	c3                   	ret    

c00105ae <VgaText::read(unsigned long long, void*, int*)>:
c00105ae:	83 ec 10             	sub    esp,0x10
c00105b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105bd:	e8 26 5d 00 00       	call   c00162e8 <readKeyboard(VgaText*, char*, unsigned long)>
c00105c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105c6:	89 02                	mov    DWORD PTR [edx],eax
c00105c8:	31 c0                	xor    eax,eax
c00105ca:	83 c4 1c             	add    esp,0x1c
c00105cd:	c3                   	ret    

c00105ce <setTerminalScrollLock(bool)>:
c00105ce:	c3                   	ret    

c00105cf <addToTerminalCycle(VgaText*)>:
c00105cf:	8b 15 60 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e460
c00105d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105d9:	85 d2                	test   edx,edx
c00105db:	75 0c                	jne    c00105e9 <addToTerminalCycle(VgaText*)+0x1a>
c00105dd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105e3:	a3 60 e4 02 c0       	mov    ds:0xc002e460,eax
c00105e8:	c3                   	ret    
c00105e9:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105ef:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105f5:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105fb:	c3                   	ret    

c00105fc <installVgaTextImplementation()>:
c00105fc:	83 ec 10             	sub    esp,0x10
c00105ff:	6a 20                	push   0x20
c0010601:	6a 00                	push   0x0
c0010603:	68 40 e4 02 c0       	push   0xc002e440
c0010608:	e8 6b 01 ff ff       	call   c0000778 <memset>
c001060d:	83 c4 1c             	add    esp,0x1c
c0010610:	c3                   	ret    

c0010611 <scrollTerminalScrollLock(int)>:
c0010611:	c3                   	ret    

c0010612 <VgaText::load()>:
c0010612:	53                   	push   ebx
c0010613:	31 c0                	xor    eax,eax
c0010615:	83 ec 58             	sub    esp,0x58
c0010618:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001061c:	89 e2                	mov    edx,esp
c001061e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010622:	40                   	inc    eax
c0010623:	83 f8 50             	cmp    eax,0x50
c0010626:	75 f6                	jne    c001061e <VgaText::load()+0xc>
c0010628:	31 c0                	xor    eax,eax
c001062a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010631:	84 c9                	test   cl,cl
c0010633:	74 06                	je     c001063b <VgaText::load()+0x29>
c0010635:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010638:	40                   	inc    eax
c0010639:	eb ef                	jmp    c001062a <VgaText::load()+0x18>
c001063b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010641:	85 c0                	test   eax,eax
c0010643:	74 09                	je     c001064e <VgaText::load()+0x3c>
c0010645:	51                   	push   ecx
c0010646:	51                   	push   ecx
c0010647:	52                   	push   edx
c0010648:	53                   	push   ebx
c0010649:	ff d0                	call   eax
c001064b:	83 c4 10             	add    esp,0x10
c001064e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010654:	85 c0                	test   eax,eax
c0010656:	74 09                	je     c0010661 <VgaText::load()+0x4f>
c0010658:	83 ec 0c             	sub    esp,0xc
c001065b:	53                   	push   ebx
c001065c:	ff d0                	call   eax
c001065e:	83 c4 10             	add    esp,0x10
c0010661:	83 c4 58             	add    esp,0x58
c0010664:	5b                   	pop    ebx
c0010665:	c3                   	ret    

c0010666 <VgaText::updateCursor()>:
c0010666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066a:	39 05 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,eax
c0010670:	75 0c                	jne    c001067e <VgaText::updateCursor()+0x18>
c0010672:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010678:	85 c0                	test   eax,eax
c001067a:	74 02                	je     c001067e <VgaText::updateCursor()+0x18>
c001067c:	ff e0                	jmp    eax
c001067e:	c3                   	ret    
c001067f:	90                   	nop

c0010680 <VgaText::showCursor(bool)>:
c0010680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010684:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010688:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001068e:	c3                   	ret    
c001068f:	90                   	nop

c0010690 <VgaText::disableBlink(bool)>:
c0010690:	56                   	push   esi
c0010691:	53                   	push   ebx
c0010692:	51                   	push   ecx
c0010693:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010697:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001069b:	39 1d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ebx
c00106a1:	75 18                	jne    c00106bb <VgaText::disableBlink(bool)+0x2b>
c00106a3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106a9:	85 c0                	test   eax,eax
c00106ab:	74 0e                	je     c00106bb <VgaText::disableBlink(bool)+0x2b>
c00106ad:	89 f1                	mov    ecx,esi
c00106af:	52                   	push   edx
c00106b0:	52                   	push   edx
c00106b1:	0f b6 d1             	movzx  edx,cl
c00106b4:	52                   	push   edx
c00106b5:	53                   	push   ebx
c00106b6:	ff d0                	call   eax
c00106b8:	83 c4 10             	add    esp,0x10
c00106bb:	89 f0                	mov    eax,esi
c00106bd:	83 f0 01             	xor    eax,0x1
c00106c0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106c6:	58                   	pop    eax
c00106c7:	5b                   	pop    ebx
c00106c8:	5e                   	pop    esi
c00106c9:	c3                   	ret    

c00106ca <VgaText::doANSI_SGR(int)>:
c00106ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d2:	85 d2                	test   edx,edx
c00106d4:	75 14                	jne    c00106ea <VgaText::doANSI_SGR(int)+0x20>
c00106d6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106dc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106e2:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106e8:	eb 65                	jmp    c001074f <VgaText::doANSI_SGR(int)+0x85>
c00106ea:	83 fa 07             	cmp    edx,0x7
c00106ed:	75 14                	jne    c0010703 <VgaText::doANSI_SGR(int)+0x39>
c00106ef:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106f5:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106fb:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010701:	eb 4c                	jmp    c001074f <VgaText::doANSI_SGR(int)+0x85>
c0010703:	83 fa 1b             	cmp    edx,0x1b
c0010706:	74 ce                	je     c00106d6 <VgaText::doANSI_SGR(int)+0xc>
c0010708:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001070b:	83 f9 07             	cmp    ecx,0x7
c001070e:	77 09                	ja     c0010719 <VgaText::doANSI_SGR(int)+0x4f>
c0010710:	8b 14 8d e0 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d20]
c0010717:	eb 20                	jmp    c0010739 <VgaText::doANSI_SGR(int)+0x6f>
c0010719:	8d 4a d8             	lea    ecx,[edx-0x28]
c001071c:	83 f9 07             	cmp    ecx,0x7
c001071f:	77 09                	ja     c001072a <VgaText::doANSI_SGR(int)+0x60>
c0010721:	8b 14 8d e0 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d20]
c0010728:	eb 25                	jmp    c001074f <VgaText::doANSI_SGR(int)+0x85>
c001072a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001072d:	83 f9 07             	cmp    ecx,0x7
c0010730:	77 0e                	ja     c0010740 <VgaText::doANSI_SGR(int)+0x76>
c0010732:	8b 14 95 98 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e68]
c0010739:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001073f:	c3                   	ret    
c0010740:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010743:	83 f9 07             	cmp    ecx,0x7
c0010746:	77 0d                	ja     c0010755 <VgaText::doANSI_SGR(int)+0x8b>
c0010748:	8b 14 95 70 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e90]
c001074f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010755:	c3                   	ret    

c0010756 <VgaText::setDefaultBgColour(VgaColour)>:
c0010756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001075a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001075e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010764:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001076a:	c3                   	ret    
c001076b:	90                   	nop

c001076c <VgaText::setDefaultFgColour(VgaColour)>:
c001076c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010770:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010774:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001077a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010780:	c3                   	ret    
c0010781:	90                   	nop

c0010782 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010782:	53                   	push   ebx
c0010783:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010787:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001078b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001078f:	51                   	push   ecx
c0010790:	e8 c1 ff ff ff       	call   c0010756 <VgaText::setDefaultBgColour(VgaColour)>
c0010795:	58                   	pop    eax
c0010796:	5a                   	pop    edx
c0010797:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001079b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001079f:	5b                   	pop    ebx
c00107a0:	eb ca                	jmp    c001076c <VgaText::setDefaultFgColour(VgaColour)>

c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107a2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107a6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107ab:	83 e0 0f             	and    eax,0xf
c00107ae:	c1 e2 04             	shl    edx,0x4
c00107b1:	09 d0                	or     eax,edx
c00107b3:	c3                   	ret    

c00107b4 <VgaText::scrollScreen()>:
c00107b4:	57                   	push   edi
c00107b5:	56                   	push   esi
c00107b6:	be 01 00 00 00       	mov    esi,0x1
c00107bb:	53                   	push   ebx
c00107bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107c0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107c6:	31 ff                	xor    edi,edi
c00107c8:	01 d9                	add    ecx,ebx
c00107ca:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107cd:	83 fe 17             	cmp    esi,0x17
c00107d0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107d6:	75 28                	jne    c0010800 <VgaText::scrollScreen()+0x4c>
c00107d8:	f7 c7 01 00 00 00    	test   edi,0x1
c00107de:	74 1c                	je     c00107fc <VgaText::scrollScreen()+0x48>
c00107e0:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107e7:	50                   	push   eax
c00107e8:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107ef:	50                   	push   eax
c00107f0:	e8 ad ff ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f5:	5a                   	pop    edx
c00107f6:	5a                   	pop    edx
c00107f7:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107fa:	eb 04                	jmp    c0010800 <VgaText::scrollScreen()+0x4c>
c00107fc:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010800:	47                   	inc    edi
c0010801:	41                   	inc    ecx
c0010802:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010808:	75 c0                	jne    c00107ca <VgaText::scrollScreen()+0x16>
c001080a:	46                   	inc    esi
c001080b:	83 fe 18             	cmp    esi,0x18
c001080e:	75 b0                	jne    c00107c0 <VgaText::scrollScreen()+0xc>
c0010810:	39 1d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ebx
c0010816:	75 24                	jne    c001083c <VgaText::scrollScreen()+0x88>
c0010818:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001081f:	74 08                	je     c0010829 <VgaText::scrollScreen()+0x75>
c0010821:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010827:	eb 13                	jmp    c001083c <VgaText::scrollScreen()+0x88>
c0010829:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001082f:	85 c0                	test   eax,eax
c0010831:	74 09                	je     c001083c <VgaText::scrollScreen()+0x88>
c0010833:	83 ec 0c             	sub    esp,0xc
c0010836:	53                   	push   ebx
c0010837:	ff d0                	call   eax
c0010839:	83 c4 10             	add    esp,0x10
c001083c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010840:	5b                   	pop    ebx
c0010841:	5e                   	pop    esi
c0010842:	5f                   	pop    edi
c0010843:	e9 1e fe ff ff       	jmp    c0010666 <VgaText::updateCursor()>

c0010848 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010848:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001084d:	c1 e0 08             	shl    eax,0x8
c0010850:	89 c2                	mov    edx,eax
c0010852:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010857:	09 d0                	or     eax,edx
c0010859:	c3                   	ret    

c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001085a:	53                   	push   ebx
c001085b:	83 ec 08             	sub    esp,0x8
c001085e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010862:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010867:	50                   	push   eax
c0010868:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001086d:	50                   	push   eax
c001086e:	e8 2f ff ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010873:	5a                   	pop    edx
c0010874:	0f b6 c0             	movzx  eax,al
c0010877:	5b                   	pop    ebx
c0010878:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001087d:	50                   	push   eax
c001087e:	53                   	push   ebx
c001087f:	e8 c4 ff ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010884:	5a                   	pop    edx
c0010885:	5a                   	pop    edx
c0010886:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001088c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010890:	0f b7 d2             	movzx  edx,dx
c0010893:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010898:	39 0d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ecx
c001089e:	75 14                	jne    c00108b4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108a0:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00108a6:	85 c0                	test   eax,eax
c00108a8:	74 0a                	je     c00108b4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108aa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108ae:	83 c4 08             	add    esp,0x8
c00108b1:	5b                   	pop    ebx
c00108b2:	ff e0                	jmp    eax
c00108b4:	83 c4 08             	add    esp,0x8
c00108b7:	5b                   	pop    ebx
c00108b8:	c3                   	ret    
c00108b9:	90                   	nop

c00108ba <VgaText::getCursorX()>:
c00108ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108be:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108c4:	c3                   	ret    
c00108c5:	90                   	nop

c00108c6 <VgaText::getCursorY()>:
c00108c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ca:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108d0:	c3                   	ret    
c00108d1:	90                   	nop

c00108d2 <VgaText::setCursor(int, int)>:
c00108d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108da:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108e4:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108ea:	e9 77 fd ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c00108ef:	90                   	nop

c00108f0 <VgaText::setCursorX(int)>:
c00108f0:	83 ec 10             	sub    esp,0x10
c00108f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108f7:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010901:	50                   	push   eax
c0010902:	e8 cb ff ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010907:	83 c4 1c             	add    esp,0x1c
c001090a:	c3                   	ret    
c001090b:	90                   	nop

c001090c <VgaText::setCursorY(int)>:
c001090c:	83 ec 10             	sub    esp,0x10
c001090f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010913:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010917:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001091d:	50                   	push   eax
c001091e:	e8 af ff ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010923:	83 c4 1c             	add    esp,0x1c
c0010926:	c3                   	ret    
c0010927:	90                   	nop

c0010928 <VgaText::incrementCursor(bool)>:
c0010928:	56                   	push   esi
c0010929:	53                   	push   ebx
c001092a:	51                   	push   ecx
c001092b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001092f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010933:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010939:	40                   	inc    eax
c001093a:	83 f8 50             	cmp    eax,0x50
c001093d:	74 08                	je     c0010947 <VgaText::incrementCursor(bool)+0x1f>
c001093f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010945:	eb 33                	jmp    c001097a <VgaText::incrementCursor(bool)+0x52>
c0010947:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001094d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010957:	8d 50 01             	lea    edx,[eax+0x1]
c001095a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010960:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010966:	75 12                	jne    c001097a <VgaText::incrementCursor(bool)+0x52>
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010971:	53                   	push   ebx
c0010972:	e8 3d fe ff ff       	call   c00107b4 <VgaText::scrollScreen()>
c0010977:	83 c4 10             	add    esp,0x10
c001097a:	89 f0                	mov    eax,esi
c001097c:	84 c0                	test   al,al
c001097e:	74 0c                	je     c001098c <VgaText::incrementCursor(bool)+0x64>
c0010980:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010984:	5a                   	pop    edx
c0010985:	5b                   	pop    ebx
c0010986:	5e                   	pop    esi
c0010987:	e9 da fc ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c001098c:	58                   	pop    eax
c001098d:	5b                   	pop    ebx
c001098e:	5e                   	pop    esi
c001098f:	c3                   	ret    

c0010990 <VgaText::updateRAMUsageDisplay(int)>:
c0010990:	56                   	push   esi
c0010991:	8b 35 c0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2c0
c0010997:	53                   	push   ebx
c0010998:	bb 0a 00 00 00       	mov    ebx,0xa
c001099d:	6a 0f                	push   0xf
c001099f:	6a 00                	push   0x0
c00109a1:	e8 fc fd ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c00109a6:	5a                   	pop    edx
c00109a7:	59                   	pop    ecx
c00109a8:	0f b6 c8             	movzx  ecx,al
c00109ab:	51                   	push   ecx
c00109ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b0:	99                   	cdq    
c00109b1:	f7 fb                	idiv   ebx
c00109b3:	89 d3                	mov    ebx,edx
c00109b5:	83 c0 30             	add    eax,0x30
c00109b8:	83 c3 30             	add    ebx,0x30
c00109bb:	0f be c0             	movsx  eax,al
c00109be:	0f b6 db             	movzx  ebx,bl
c00109c1:	50                   	push   eax
c00109c2:	e8 81 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c7:	5a                   	pop    edx
c00109c8:	5a                   	pop    edx
c00109c9:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109d0:	51                   	push   ecx
c00109d1:	53                   	push   ebx
c00109d2:	e8 71 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d7:	5b                   	pop    ebx
c00109d8:	5a                   	pop    edx
c00109d9:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109e0:	51                   	push   ecx
c00109e1:	6a 25                	push   0x25
c00109e3:	e8 60 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c00109e8:	59                   	pop    ecx
c00109e9:	5b                   	pop    ebx
c00109ea:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109f1:	5b                   	pop    ebx
c00109f2:	5e                   	pop    esi
c00109f3:	c3                   	ret    

c00109f4 <VgaText::updateDiskUsage()>:
c00109f4:	55                   	push   ebp
c00109f5:	bd 10 27 00 00       	mov    ebp,0x2710
c00109fa:	57                   	push   edi
c00109fb:	8b 3d c0 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d2c0
c0010a01:	56                   	push   esi
c0010a02:	53                   	push   ebx
c0010a03:	6a 0f                	push   0xf
c0010a05:	6a 00                	push   0x0
c0010a07:	e8 96 fd ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a0c:	5a                   	pop    edx
c0010a0d:	0f b6 d8             	movzx  ebx,al
c0010a10:	59                   	pop    ecx
c0010a11:	8b 35 08 27 03 c0    	mov    esi,DWORD PTR ds:0xc0032708
c0010a17:	53                   	push   ebx
c0010a18:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a1d:	89 f0                	mov    eax,esi
c0010a1f:	99                   	cdq    
c0010a20:	f7 fd                	idiv   ebp
c0010a22:	99                   	cdq    
c0010a23:	f7 f9                	idiv   ecx
c0010a25:	8d 42 30             	lea    eax,[edx+0x30]
c0010a28:	0f b6 c0             	movzx  eax,al
c0010a2b:	50                   	push   eax
c0010a2c:	e8 17 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a31:	5d                   	pop    ebp
c0010a32:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a37:	5a                   	pop    edx
c0010a38:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a3c:	53                   	push   ebx
c0010a3d:	89 f0                	mov    eax,esi
c0010a3f:	99                   	cdq    
c0010a40:	f7 fd                	idiv   ebp
c0010a42:	99                   	cdq    
c0010a43:	f7 f9                	idiv   ecx
c0010a45:	8d 42 30             	lea    eax,[edx+0x30]
c0010a48:	0f b6 c0             	movzx  eax,al
c0010a4b:	50                   	push   eax
c0010a4c:	e8 f7 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a51:	5d                   	pop    ebp
c0010a52:	bd 64 00 00 00       	mov    ebp,0x64
c0010a57:	5a                   	pop    edx
c0010a58:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a5f:	53                   	push   ebx
c0010a60:	89 f0                	mov    eax,esi
c0010a62:	99                   	cdq    
c0010a63:	f7 fd                	idiv   ebp
c0010a65:	99                   	cdq    
c0010a66:	f7 f9                	idiv   ecx
c0010a68:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6b:	0f b6 c0             	movzx  eax,al
c0010a6e:	50                   	push   eax
c0010a6f:	e8 d4 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a74:	5d                   	pop    ebp
c0010a75:	5a                   	pop    edx
c0010a76:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a7d:	53                   	push   ebx
c0010a7e:	89 f0                	mov    eax,esi
c0010a80:	99                   	cdq    
c0010a81:	f7 f9                	idiv   ecx
c0010a83:	89 d6                	mov    esi,edx
c0010a85:	99                   	cdq    
c0010a86:	f7 f9                	idiv   ecx
c0010a88:	8d 42 30             	lea    eax,[edx+0x30]
c0010a8b:	0f b6 c0             	movzx  eax,al
c0010a8e:	50                   	push   eax
c0010a8f:	e8 b4 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a94:	5d                   	pop    ebp
c0010a95:	5a                   	pop    edx
c0010a96:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a9d:	53                   	push   ebx
c0010a9e:	8d 46 30             	lea    eax,[esi+0x30]
c0010aa1:	0f b6 f0             	movzx  esi,al
c0010aa4:	56                   	push   esi
c0010aa5:	e8 9e fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aaa:	5e                   	pop    esi
c0010aab:	8b 35 04 27 03 c0    	mov    esi,DWORD PTR ds:0xc0032704
c0010ab1:	5d                   	pop    ebp
c0010ab2:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010ab9:	bd 10 27 00 00       	mov    ebp,0x2710
c0010abe:	53                   	push   ebx
c0010abf:	89 f0                	mov    eax,esi
c0010ac1:	99                   	cdq    
c0010ac2:	f7 fd                	idiv   ebp
c0010ac4:	99                   	cdq    
c0010ac5:	f7 f9                	idiv   ecx
c0010ac7:	8d 42 30             	lea    eax,[edx+0x30]
c0010aca:	0f b6 c0             	movzx  eax,al
c0010acd:	50                   	push   eax
c0010ace:	e8 75 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad3:	5a                   	pop    edx
c0010ad4:	5d                   	pop    ebp
c0010ad5:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010adc:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ae1:	53                   	push   ebx
c0010ae2:	89 f0                	mov    eax,esi
c0010ae4:	99                   	cdq    
c0010ae5:	f7 fd                	idiv   ebp
c0010ae7:	99                   	cdq    
c0010ae8:	f7 f9                	idiv   ecx
c0010aea:	8d 42 30             	lea    eax,[edx+0x30]
c0010aed:	0f b6 c0             	movzx  eax,al
c0010af0:	50                   	push   eax
c0010af1:	e8 52 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af6:	5a                   	pop    edx
c0010af7:	5d                   	pop    ebp
c0010af8:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aff:	bd 64 00 00 00       	mov    ebp,0x64
c0010b04:	53                   	push   ebx
c0010b05:	89 f0                	mov    eax,esi
c0010b07:	99                   	cdq    
c0010b08:	f7 fd                	idiv   ebp
c0010b0a:	99                   	cdq    
c0010b0b:	f7 f9                	idiv   ecx
c0010b0d:	83 c2 30             	add    edx,0x30
c0010b10:	0f b6 d2             	movzx  edx,dl
c0010b13:	52                   	push   edx
c0010b14:	e8 2f fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b19:	5a                   	pop    edx
c0010b1a:	5d                   	pop    ebp
c0010b1b:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b22:	53                   	push   ebx
c0010b23:	89 f0                	mov    eax,esi
c0010b25:	99                   	cdq    
c0010b26:	f7 f9                	idiv   ecx
c0010b28:	89 d6                	mov    esi,edx
c0010b2a:	99                   	cdq    
c0010b2b:	f7 f9                	idiv   ecx
c0010b2d:	8d 42 30             	lea    eax,[edx+0x30]
c0010b30:	0f b6 c0             	movzx  eax,al
c0010b33:	50                   	push   eax
c0010b34:	e8 0f fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b39:	5a                   	pop    edx
c0010b3a:	59                   	pop    ecx
c0010b3b:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b42:	53                   	push   ebx
c0010b43:	8d 46 30             	lea    eax,[esi+0x30]
c0010b46:	0f b6 f0             	movzx  esi,al
c0010b49:	56                   	push   esi
c0010b4a:	e8 f9 fc ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b4f:	5b                   	pop    ebx
c0010b50:	5e                   	pop    esi
c0010b51:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b58:	5b                   	pop    ebx
c0010b59:	5e                   	pop    esi
c0010b5a:	5f                   	pop    edi
c0010b5b:	5d                   	pop    ebp
c0010b5c:	c3                   	ret    
c0010b5d:	90                   	nop

c0010b5e <VgaText::updateTitle()>:
c0010b5e:	53                   	push   ebx
c0010b5f:	31 c0                	xor    eax,eax
c0010b61:	83 ec 58             	sub    esp,0x58
c0010b64:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b68:	89 e1                	mov    ecx,esp
c0010b6a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b6e:	40                   	inc    eax
c0010b6f:	83 f8 50             	cmp    eax,0x50
c0010b72:	75 f6                	jne    c0010b6a <VgaText::updateTitle()+0xc>
c0010b74:	31 c0                	xor    eax,eax
c0010b76:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b7d:	84 db                	test   bl,bl
c0010b7f:	74 06                	je     c0010b87 <VgaText::updateTitle()+0x29>
c0010b81:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b84:	40                   	inc    eax
c0010b85:	eb ef                	jmp    c0010b76 <VgaText::updateTitle()+0x18>
c0010b87:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b8d:	85 c0                	test   eax,eax
c0010b8f:	74 09                	je     c0010b9a <VgaText::updateTitle()+0x3c>
c0010b91:	53                   	push   ebx
c0010b92:	53                   	push   ebx
c0010b93:	51                   	push   ecx
c0010b94:	52                   	push   edx
c0010b95:	ff d0                	call   eax
c0010b97:	83 c4 10             	add    esp,0x10
c0010b9a:	e8 55 fe ff ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0010b9f:	83 c4 58             	add    esp,0x58
c0010ba2:	5b                   	pop    ebx
c0010ba3:	c3                   	ret    

c0010ba4 <VgaText::setTitleTextColour(VgaColour)>:
c0010ba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bac:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010bb2:	eb aa                	jmp    c0010b5e <VgaText::updateTitle()>

c0010bb4 <VgaText::setTitleColour(VgaColour)>:
c0010bb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bbc:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bc2:	eb 9a                	jmp    c0010b5e <VgaText::updateTitle()>

c0010bc4 <VgaText::setTitle(char*)>:
c0010bc4:	53                   	push   ebx
c0010bc5:	83 ec 10             	sub    esp,0x10
c0010bc8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bd6:	50                   	push   eax
c0010bd7:	e8 58 fc fe ff       	call   c0000834 <strcpy>
c0010bdc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010be0:	83 c4 18             	add    esp,0x18
c0010be3:	5b                   	pop    ebx
c0010be4:	e9 75 ff ff ff       	jmp    c0010b5e <VgaText::updateTitle()>
c0010be9:	90                   	nop

c0010bea <VgaText::decrementCursor(bool)>:
c0010bea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bf2:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bf8:	85 c0                	test   eax,eax
c0010bfa:	74 07                	je     c0010c03 <VgaText::decrementCursor(bool)+0x19>
c0010bfc:	48                   	dec    eax
c0010bfd:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c03:	84 c9                	test   cl,cl
c0010c05:	74 09                	je     c0010c10 <VgaText::decrementCursor(bool)+0x26>
c0010c07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c0b:	e9 56 fa ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c0010c10:	c3                   	ret    
c0010c11:	90                   	nop

c0010c12 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c12:	53                   	push   ebx
c0010c13:	83 ec 08             	sub    esp,0x8
c0010c16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c22:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c26:	3c 07                	cmp    al,0x7
c0010c28:	75 2a                	jne    c0010c54 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c2a:	a1 1c e5 02 c0       	mov    eax,ds:0xc002e51c
c0010c2f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c37:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c3f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c4b:	83 c4 08             	add    esp,0x8
c0010c4e:	5b                   	pop    ebx
c0010c4f:	e9 f0 30 00 00       	jmp    c0013d44 <Buzzer::beep(int, int, bool)>
c0010c54:	3c 0d                	cmp    al,0xd
c0010c56:	75 0c                	jne    c0010c64 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c58:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c62:	eb 3b                	jmp    c0010c9f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c64:	3c 0a                	cmp    al,0xa
c0010c66:	75 40                	jne    c0010ca8 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c68:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c6e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c78:	8d 50 01             	lea    edx,[eax+0x1]
c0010c7b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c81:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c87:	75 12                	jne    c0010c9b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c89:	83 ec 0c             	sub    esp,0xc
c0010c8c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c92:	53                   	push   ebx
c0010c93:	e8 1c fb ff ff       	call   c00107b4 <VgaText::scrollScreen()>
c0010c98:	83 c4 10             	add    esp,0x10
c0010c9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c9f:	83 c4 08             	add    esp,0x8
c0010ca2:	5b                   	pop    ebx
c0010ca3:	e9 be f9 ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c0010ca8:	3c 08                	cmp    al,0x8
c0010caa:	75 31                	jne    c0010cdd <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010cac:	50                   	push   eax
c0010cad:	50                   	push   eax
c0010cae:	6a 01                	push   0x1
c0010cb0:	53                   	push   ebx
c0010cb1:	e8 34 ff ff ff       	call   c0010bea <VgaText::decrementCursor(bool)>
c0010cb6:	5a                   	pop    edx
c0010cb7:	59                   	pop    ecx
c0010cb8:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cbe:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cc4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cca:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cd0:	6a 20                	push   0x20
c0010cd2:	53                   	push   ebx
c0010cd3:	e8 82 fb ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cd8:	83 c4 28             	add    esp,0x28
c0010cdb:	5b                   	pop    ebx
c0010cdc:	c3                   	ret    
c0010cdd:	83 ec 08             	sub    esp,0x8
c0010ce0:	0f be c0             	movsx  eax,al
c0010ce3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010ce9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cef:	51                   	push   ecx
c0010cf0:	52                   	push   edx
c0010cf1:	50                   	push   eax
c0010cf2:	53                   	push   ebx
c0010cf3:	e8 62 fb ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cf8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cfc:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d04:	83 c4 28             	add    esp,0x28
c0010d07:	5b                   	pop    ebx
c0010d08:	e9 1b fc ff ff       	jmp    c0010928 <VgaText::incrementCursor(bool)>
c0010d0d:	90                   	nop

c0010d0e <VgaText::isShowingCursor()>:
c0010d0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d12:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d18:	c3                   	ret    
c0010d19:	90                   	nop

c0010d1a <VgaText::isBlinkDisabled()>:
c0010d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d1e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d24:	83 f0 01             	xor    eax,0x1
c0010d27:	c3                   	ret    

c0010d28 <VgaText::setCursorHeight(int)>:
c0010d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d30:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d36:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d41:	e9 3a f9 ff ff       	jmp    c0010680 <VgaText::showCursor(bool)>

c0010d46 <VgaText::getCursorHeight()>:
c0010d46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d4a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d50:	c3                   	ret    

c0010d51 <setActiveTerminal(VgaText*)>:
c0010d51:	53                   	push   ebx
c0010d52:	83 ec 08             	sub    esp,0x8
c0010d55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d59:	85 db                	test   ebx,ebx
c0010d5b:	75 11                	jne    c0010d6e <setActiveTerminal(VgaText*)+0x1d>
c0010d5d:	c7 44 24 10 6c a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a36c
c0010d65:	83 c4 08             	add    esp,0x8
c0010d68:	5b                   	pop    ebx
c0010d69:	e9 79 98 00 00       	jmp    c001a5e7 <Krnl::panic(char const*)>
c0010d6e:	50                   	push   eax
c0010d6f:	50                   	push   eax
c0010d70:	53                   	push   ebx
c0010d71:	68 7a a3 02 c0       	push   0xc002a37a
c0010d76:	e8 cb 21 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0010d7b:	a1 64 e4 02 c0       	mov    eax,ds:0xc002e464
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	85 c0                	test   eax,eax
c0010d85:	74 0c                	je     c0010d93 <setActiveTerminal(VgaText*)+0x42>
c0010d87:	83 ec 0c             	sub    esp,0xc
c0010d8a:	50                   	push   eax
c0010d8b:	e8 d6 f8 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010d90:	83 c4 10             	add    esp,0x10
c0010d93:	89 1d 64 e4 02 c0    	mov    DWORD PTR ds:0xc002e464,ebx
c0010d99:	51                   	push   ecx
c0010d9a:	51                   	push   ecx
c0010d9b:	53                   	push   ebx
c0010d9c:	68 92 a3 02 c0       	push   0xc002a392
c0010da1:	e8 a0 21 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0010da6:	83 c4 0c             	add    esp,0xc
c0010da9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010daf:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010db5:	53                   	push   ebx
c0010db6:	e8 17 fb ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010dbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dbe:	e8 57 ff ff ff       	call   c0010d1a <VgaText::isBlinkDisabled()>
c0010dc3:	5a                   	pop    edx
c0010dc4:	0f b6 c0             	movzx  eax,al
c0010dc7:	59                   	pop    ecx
c0010dc8:	50                   	push   eax
c0010dc9:	53                   	push   ebx
c0010dca:	e8 c1 f8 ff ff       	call   c0010690 <VgaText::disableBlink(bool)>
c0010dcf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dd2:	e8 6f ff ff ff       	call   c0010d46 <VgaText::getCursorHeight()>
c0010dd7:	5a                   	pop    edx
c0010dd8:	59                   	pop    ecx
c0010dd9:	50                   	push   eax
c0010dda:	53                   	push   ebx
c0010ddb:	e8 48 ff ff ff       	call   c0010d28 <VgaText::setCursorHeight(int)>
c0010de0:	83 c4 10             	add    esp,0x10
c0010de3:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dea:	75 0a                	jne    c0010df6 <setActiveTerminal(VgaText*)+0xa5>
c0010dec:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010df6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010dfa:	83 c4 08             	add    esp,0x8
c0010dfd:	5b                   	pop    ebx
c0010dfe:	e9 0f f8 ff ff       	jmp    c0010612 <VgaText::load()>

c0010e03 <doTerminalCycle()>:
c0010e03:	83 ec 18             	sub    esp,0x18
c0010e06:	a1 60 e4 02 c0       	mov    eax,ds:0xc002e460
c0010e0b:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e11:	50                   	push   eax
c0010e12:	a3 60 e4 02 c0       	mov    ds:0xc002e460,eax
c0010e17:	e8 35 ff ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c0010e1c:	83 c4 1c             	add    esp,0x1c
c0010e1f:	c3                   	ret    

c0010e20 <VgaText::doUpdate()>:
c0010e20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e24:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e2a:	85 c0                	test   eax,eax
c0010e2c:	74 02                	je     c0010e30 <VgaText::doUpdate()+0x10>
c0010e2e:	ff e0                	jmp    eax
c0010e30:	c3                   	ret    
c0010e31:	90                   	nop

c0010e32 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e32:	55                   	push   ebp
c0010e33:	57                   	push   edi
c0010e34:	56                   	push   esi
c0010e35:	53                   	push   ebx
c0010e36:	83 ec 1c             	sub    esp,0x1c
c0010e39:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e3d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e42:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e49:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e4c:	50                   	push   eax
c0010e4d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e52:	50                   	push   eax
c0010e53:	e8 4a f9 ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e58:	59                   	pop    ecx
c0010e59:	0f b6 c0             	movzx  eax,al
c0010e5c:	5b                   	pop    ebx
c0010e5d:	31 c9                	xor    ecx,ecx
c0010e5f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e67:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e6b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e75:	0f b7 db             	movzx  ebx,bx
c0010e78:	01 db                	add    ebx,ebx
c0010e7a:	01 fb                	add    ebx,edi
c0010e7c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e7f:	84 c0                	test   al,al
c0010e81:	0f 84 38 01 00 00    	je     c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e87:	3c 0d                	cmp    al,0xd
c0010e89:	75 0f                	jne    c0010e9a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e8b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e95:	e9 1f 01 00 00       	jmp    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e9a:	3c 0a                	cmp    al,0xa
c0010e9c:	75 5b                	jne    c0010ef9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e9e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010ea4:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010eae:	8d 48 01             	lea    ecx,[eax+0x1]
c0010eb1:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010eb7:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ebd:	75 12                	jne    c0010ed1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010ebf:	83 ec 0c             	sub    esp,0xc
c0010ec2:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ec8:	55                   	push   ebp
c0010ec9:	e8 e6 f8 ff ff       	call   c00107b4 <VgaText::scrollScreen()>
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	83 ec 0c             	sub    esp,0xc
c0010ed4:	55                   	push   ebp
c0010ed5:	e8 8c f7 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010eda:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ee2:	83 c4 10             	add    esp,0x10
c0010ee5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eeb:	31 c9                	xor    ecx,ecx
c0010eed:	0f b7 db             	movzx  ebx,bx
c0010ef0:	01 db                	add    ebx,ebx
c0010ef2:	01 fb                	add    ebx,edi
c0010ef4:	e9 c0 00 00 00       	jmp    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ef9:	3c 08                	cmp    al,0x8
c0010efb:	75 4e                	jne    c0010f4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010efd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f01:	53                   	push   ebx
c0010f02:	53                   	push   ebx
c0010f03:	6a 01                	push   0x1
c0010f05:	55                   	push   ebp
c0010f06:	e8 df fc ff ff       	call   c0010bea <VgaText::decrementCursor(bool)>
c0010f0b:	58                   	pop    eax
c0010f0c:	5a                   	pop    edx
c0010f0d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f13:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f19:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f1f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f25:	6a 20                	push   0x20
c0010f27:	55                   	push   ebp
c0010f28:	e8 2d f9 ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f2d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f35:	83 c4 20             	add    esp,0x20
c0010f38:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f3e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f42:	0f b7 db             	movzx  ebx,bx
c0010f45:	01 db                	add    ebx,ebx
c0010f47:	01 fb                	add    ebx,edi
c0010f49:	eb 6e                	jmp    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f4b:	51                   	push   ecx
c0010f4c:	51                   	push   ecx
c0010f4d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f51:	50                   	push   eax
c0010f52:	e8 f1 f8 ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f57:	83 c4 10             	add    esp,0x10
c0010f5a:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f5d:	39 2d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ebp
c0010f63:	75 2a                	jne    c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f65:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f6b:	85 c0                	test   eax,eax
c0010f6d:	74 20                	je     c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f6f:	52                   	push   edx
c0010f70:	52                   	push   edx
c0010f71:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f77:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f81:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f85:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f88:	51                   	push   ecx
c0010f89:	55                   	push   ebp
c0010f8a:	ff d0                	call   eax
c0010f8c:	83 c4 20             	add    esp,0x20
c0010f8f:	83 c3 02             	add    ebx,0x2
c0010f92:	50                   	push   eax
c0010f93:	50                   	push   eax
c0010f94:	6a 00                	push   0x0
c0010f96:	55                   	push   ebp
c0010f97:	e8 8c f9 ff ff       	call   c0010928 <VgaText::incrementCursor(bool)>
c0010f9c:	83 c4 10             	add    esp,0x10
c0010f9f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010fa6:	75 0f                	jne    c0010fb7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010fa8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fb0:	0f b7 db             	movzx  ebx,bx
c0010fb3:	01 db                	add    ebx,ebx
c0010fb5:	01 fb                	add    ebx,edi
c0010fb7:	b1 01                	mov    cl,0x1
c0010fb9:	46                   	inc    esi
c0010fba:	e9 bd fe ff ff       	jmp    c0010e7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fbf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fc3:	83 ec 0c             	sub    esp,0xc
c0010fc6:	55                   	push   ebp
c0010fc7:	e8 9a f6 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010fcc:	83 c4 10             	add    esp,0x10
c0010fcf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fd3:	84 c9                	test   cl,cl
c0010fd5:	74 0c                	je     c0010fe3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fd7:	83 ec 0c             	sub    esp,0xc
c0010fda:	55                   	push   ebp
c0010fdb:	e8 40 fe ff ff       	call   c0010e20 <VgaText::doUpdate()>
c0010fe0:	83 c4 10             	add    esp,0x10
c0010fe3:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fea:	83 c4 1c             	add    esp,0x1c
c0010fed:	5b                   	pop    ebx
c0010fee:	5e                   	pop    esi
c0010fef:	5f                   	pop    edi
c0010ff0:	5d                   	pop    ebp
c0010ff1:	c3                   	ret    

c0010ff2 <VgaText::clearScreen()>:
c0010ff2:	57                   	push   edi
c0010ff3:	56                   	push   esi
c0010ff4:	31 f6                	xor    esi,esi
c0010ff6:	53                   	push   ebx
c0010ff7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ffb:	52                   	push   edx
c0010ffc:	6a 00                	push   0x0
c0010ffe:	6a 00                	push   0x0
c0011000:	53                   	push   ebx
c0011001:	e8 cc f8 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0011006:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001100d:	83 c4 10             	add    esp,0x10
c0011010:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0011016:	7e 26                	jle    c001103e <VgaText::clearScreen()+0x4c>
c0011018:	31 ff                	xor    edi,edi
c001101a:	50                   	push   eax
c001101b:	50                   	push   eax
c001101c:	56                   	push   esi
c001101d:	57                   	push   edi
c001101e:	47                   	inc    edi
c001101f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011025:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001102b:	6a 20                	push   0x20
c001102d:	53                   	push   ebx
c001102e:	e8 27 f8 ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011033:	83 c4 20             	add    esp,0x20
c0011036:	83 ff 50             	cmp    edi,0x50
c0011039:	75 df                	jne    c001101a <VgaText::clearScreen()+0x28>
c001103b:	46                   	inc    esi
c001103c:	eb d2                	jmp    c0011010 <VgaText::clearScreen()+0x1e>
c001103e:	83 ec 0c             	sub    esp,0xc
c0011041:	53                   	push   ebx
c0011042:	e8 d9 fd ff ff       	call   c0010e20 <VgaText::doUpdate()>
c0011047:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001104e:	83 c4 10             	add    esp,0x10
c0011051:	5b                   	pop    ebx
c0011052:	5e                   	pop    esi
c0011053:	5f                   	pop    edi
c0011054:	c3                   	ret    
c0011055:	90                   	nop

c0011056 <VgaText::putchar(char)>:
c0011056:	56                   	push   esi
c0011057:	53                   	push   ebx
c0011058:	83 ec 14             	sub    esp,0x14
c001105b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001105f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011063:	3c 5b                	cmp    al,0x5b
c0011065:	75 21                	jne    c0011088 <VgaText::putchar(char)+0x32>
c0011067:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001106e:	74 28                	je     c0011098 <VgaText::putchar(char)+0x42>
c0011070:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011079:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011083:	e9 e2 00 00 00       	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011088:	3c 1b                	cmp    al,0x1b
c001108a:	75 0c                	jne    c0011098 <VgaText::putchar(char)+0x42>
c001108c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011093:	e9 d2 00 00 00       	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011098:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001109e:	84 c9                	test   cl,cl
c00110a0:	0f 84 ab 00 00 00    	je     c0011151 <VgaText::putchar(char)+0xfb>
c00110a6:	8d 50 c0             	lea    edx,[eax-0x40]
c00110a9:	80 fa 3e             	cmp    dl,0x3e
c00110ac:	0f 87 82 00 00 00    	ja     c0011134 <VgaText::putchar(char)+0xde>
c00110b2:	3c 6d                	cmp    al,0x6d
c00110b4:	75 4d                	jne    c0011103 <VgaText::putchar(char)+0xad>
c00110b6:	31 f6                	xor    esi,esi
c00110b8:	31 d2                	xor    edx,edx
c00110ba:	31 c0                	xor    eax,eax
c00110bc:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110c2:	7e 30                	jle    c00110f4 <VgaText::putchar(char)+0x9e>
c00110c4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110cc:	80 fa 3b             	cmp    dl,0x3b
c00110cf:	75 17                	jne    c00110e8 <VgaText::putchar(char)+0x92>
c00110d1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110d5:	50                   	push   eax
c00110d6:	53                   	push   ebx
c00110d7:	e8 ee f5 ff ff       	call   c00106ca <VgaText::doANSI_SGR(int)>
c00110dc:	59                   	pop    ecx
c00110dd:	31 d2                	xor    edx,edx
c00110df:	58                   	pop    eax
c00110e0:	31 c0                	xor    eax,eax
c00110e2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110e6:	eb 09                	jmp    c00110f1 <VgaText::putchar(char)+0x9b>
c00110e8:	6b c0 0a             	imul   eax,eax,0xa
c00110eb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110ef:	88 ca                	mov    dl,cl
c00110f1:	46                   	inc    esi
c00110f2:	eb c8                	jmp    c00110bc <VgaText::putchar(char)+0x66>
c00110f4:	84 d2                	test   dl,dl
c00110f6:	74 31                	je     c0011129 <VgaText::putchar(char)+0xd3>
c00110f8:	50                   	push   eax
c00110f9:	53                   	push   ebx
c00110fa:	e8 cb f5 ff ff       	call   c00106ca <VgaText::doANSI_SGR(int)>
c00110ff:	58                   	pop    eax
c0011100:	5a                   	pop    edx
c0011101:	eb 26                	jmp    c0011129 <VgaText::putchar(char)+0xd3>
c0011103:	3c 4a                	cmp    al,0x4a
c0011105:	75 22                	jne    c0011129 <VgaText::putchar(char)+0xd3>
c0011107:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c001110e:	75 19                	jne    c0011129 <VgaText::putchar(char)+0xd3>
c0011110:	83 ec 0c             	sub    esp,0xc
c0011113:	53                   	push   ebx
c0011114:	e8 d9 fe ff ff       	call   c0010ff2 <VgaText::clearScreen()>
c0011119:	83 c4 0c             	add    esp,0xc
c001111c:	6a 00                	push   0x0
c001111e:	6a 00                	push   0x0
c0011120:	53                   	push   ebx
c0011121:	e8 ac f7 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0011126:	83 c4 10             	add    esp,0x10
c0011129:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011132:	eb 36                	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011134:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001113a:	83 fa 0e             	cmp    edx,0xe
c001113d:	7f 2b                	jg     c001116a <VgaText::putchar(char)+0x114>
c001113f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011142:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011148:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001114f:	eb 19                	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011151:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011157:	0f be c0             	movsx  eax,al
c001115a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011160:	50                   	push   eax
c0011161:	53                   	push   ebx
c0011162:	e8 ab fa ff ff       	call   c0010c12 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011167:	83 c4 10             	add    esp,0x10
c001116a:	83 c4 14             	add    esp,0x14
c001116d:	5b                   	pop    ebx
c001116e:	5e                   	pop    esi
c001116f:	c3                   	ret    

c0011170 <VgaText::puts(char const*)>:
c0011170:	53                   	push   ebx
c0011171:	83 ec 08             	sub    esp,0x8
c0011174:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011178:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001117b:	84 c0                	test   al,al
c001117d:	74 12                	je     c0011191 <VgaText::puts(char const*)+0x21>
c001117f:	43                   	inc    ebx
c0011180:	51                   	push   ecx
c0011181:	51                   	push   ecx
c0011182:	50                   	push   eax
c0011183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011187:	e8 ca fe ff ff       	call   c0011056 <VgaText::putchar(char)>
c001118c:	83 c4 10             	add    esp,0x10
c001118f:	eb e7                	jmp    c0011178 <VgaText::puts(char const*)+0x8>
c0011191:	83 c4 08             	add    esp,0x8
c0011194:	5b                   	pop    ebx
c0011195:	c3                   	ret    

c0011196 <VgaText::putx(unsigned int)>:
c0011196:	57                   	push   edi
c0011197:	b9 11 00 00 00       	mov    ecx,0x11
c001119c:	56                   	push   esi
c001119d:	be ae a3 02 c0       	mov    esi,0xc002a3ae
c00111a2:	53                   	push   ebx
c00111a3:	83 ec 20             	sub    esp,0x20
c00111a6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111aa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111ae:	fc                   	cld    
c00111af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111b1:	be 08 00 00 00       	mov    esi,0x8
c00111b6:	50                   	push   eax
c00111b7:	50                   	push   eax
c00111b8:	89 d8                	mov    eax,ebx
c00111ba:	c1 e3 04             	shl    ebx,0x4
c00111bd:	c1 e8 1c             	shr    eax,0x1c
c00111c0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111c5:	50                   	push   eax
c00111c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111ca:	e8 87 fe ff ff       	call   c0011056 <VgaText::putchar(char)>
c00111cf:	83 c4 10             	add    esp,0x10
c00111d2:	4e                   	dec    esi
c00111d3:	75 e1                	jne    c00111b6 <VgaText::putx(unsigned int)+0x20>
c00111d5:	83 c4 20             	add    esp,0x20
c00111d8:	5b                   	pop    ebx
c00111d9:	5e                   	pop    esi
c00111da:	5f                   	pop    edi
c00111db:	c3                   	ret    

c00111dc <VgaText::VgaText(char const*)>:
c00111dc:	57                   	push   edi
c00111dd:	56                   	push   esi
c00111de:	53                   	push   ebx
c00111df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e3:	83 ec 08             	sub    esp,0x8
c00111e6:	6a 00                	push   0x0
c00111e8:	50                   	push   eax
c00111e9:	e8 6e 05 00 00       	call   c001175c <UnixFile::UnixFile(int)>
c00111ee:	83 c4 10             	add    esp,0x10
c00111f1:	ba 14 a4 02 c0       	mov    edx,0xc002a414
c00111f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fa:	89 10                	mov    DWORD PTR [eax],edx
c00111fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011200:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001120a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001120e:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011227:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001122e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011232:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001123c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011240:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001124a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001124e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011259:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011264:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001126a:	bb 40 e4 02 c0       	mov    ebx,0xc002e440
c001126f:	b8 08 00 00 00       	mov    eax,0x8
c0011274:	fc                   	cld    
c0011275:	89 d7                	mov    edi,edx
c0011277:	89 de                	mov    esi,ebx
c0011279:	89 c1                	mov    ecx,eax
c001127b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001127d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011281:	05 1e 10 00 00       	add    eax,0x101e
c0011286:	83 ec 08             	sub    esp,0x8
c0011289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001128d:	50                   	push   eax
c001128e:	e8 a1 f5 fe ff       	call   c0000834 <strcpy>
c0011293:	83 c4 10             	add    esp,0x10
c0011296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001129a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00112a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a8:	83 c0 0c             	add    eax,0xc
c00112ab:	83 ec 04             	sub    esp,0x4
c00112ae:	68 00 0f 00 00       	push   0xf00
c00112b3:	6a 00                	push   0x0
c00112b5:	50                   	push   eax
c00112b6:	e8 bd f4 fe ff       	call   c0000778 <memset>
c00112bb:	83 c4 10             	add    esp,0x10
c00112be:	83 ec 04             	sub    esp,0x4
c00112c1:	6a 00                	push   0x0
c00112c3:	6a 07                	push   0x7
c00112c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c9:	e8 b4 f4 ff ff       	call   c0010782 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112ce:	83 c4 10             	add    esp,0x10
c00112d1:	83 ec 08             	sub    esp,0x8
c00112d4:	6a 02                	push   0x2
c00112d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112da:	e8 49 fa ff ff       	call   c0010d28 <VgaText::setCursorHeight(int)>
c00112df:	83 c4 10             	add    esp,0x10
c00112e2:	83 ec 04             	sub    esp,0x4
c00112e5:	6a 00                	push   0x0
c00112e7:	6a 00                	push   0x0
c00112e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ed:	e8 e0 f5 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c00112f2:	83 c4 10             	add    esp,0x10
c00112f5:	83 ec 08             	sub    esp,0x8
c00112f8:	6a 01                	push   0x1
c00112fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112fe:	e8 7d f3 ff ff       	call   c0010680 <VgaText::showCursor(bool)>
c0011303:	83 c4 10             	add    esp,0x10
c0011306:	83 ec 08             	sub    esp,0x8
c0011309:	6a 01                	push   0x1
c001130b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130f:	e8 7c f3 ff ff       	call   c0010690 <VgaText::disableBlink(bool)>
c0011314:	83 c4 10             	add    esp,0x10
c0011317:	83 ec 0c             	sub    esp,0xc
c001131a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001131e:	e8 cf fc ff ff       	call   c0010ff2 <VgaText::clearScreen()>
c0011323:	83 c4 10             	add    esp,0x10
c0011326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132a:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011335:	05 9e 10 00 00       	add    eax,0x109e
c001133a:	83 ec 04             	sub    esp,0x4
c001133d:	68 96 00 00 00       	push   0x96
c0011342:	6a 00                	push   0x0
c0011344:	50                   	push   eax
c0011345:	e8 2e f4 fe ff       	call   c0000778 <memset>
c001134a:	83 c4 10             	add    esp,0x10
c001134d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011351:	05 34 11 00 00       	add    eax,0x1134
c0011356:	83 ec 04             	sub    esp,0x4
c0011359:	68 2c 01 00 00       	push   0x12c
c001135e:	6a 00                	push   0x0
c0011360:	50                   	push   eax
c0011361:	e8 12 f4 fe ff       	call   c0000778 <memset>
c0011366:	83 c4 10             	add    esp,0x10
c0011369:	90                   	nop
c001136a:	5b                   	pop    ebx
c001136b:	5e                   	pop    esi
c001136c:	5f                   	pop    edi
c001136d:	c3                   	ret    

c001136e <VgaText::receiveKey(unsigned char)>:
c001136e:	55                   	push   ebp
c001136f:	57                   	push   edi
c0011370:	56                   	push   esi
c0011371:	53                   	push   ebx
c0011372:	83 ec 1c             	sub    esp,0x1c
c0011375:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011379:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001137d:	84 db                	test   bl,bl
c001137f:	0f 84 c9 00 00 00    	je     c001144e <VgaText::receiveKey(unsigned char)+0xe0>
c0011385:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001138b:	80 fb 08             	cmp    bl,0x8
c001138e:	75 2c                	jne    c00113bc <VgaText::receiveKey(unsigned char)+0x4e>
c0011390:	83 ec 0c             	sub    esp,0xc
c0011393:	57                   	push   edi
c0011394:	e8 fb f3 fe ff       	call   c0000794 <strlen>
c0011399:	83 c4 10             	add    esp,0x10
c001139c:	85 c0                	test   eax,eax
c001139e:	74 41                	je     c00113e1 <VgaText::receiveKey(unsigned char)+0x73>
c00113a0:	50                   	push   eax
c00113a1:	50                   	push   eax
c00113a2:	6a 08                	push   0x8
c00113a4:	56                   	push   esi
c00113a5:	e8 ac fc ff ff       	call   c0011056 <VgaText::putchar(char)>
c00113aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113ad:	e8 e2 f3 fe ff       	call   c0000794 <strlen>
c00113b2:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113ba:	eb 22                	jmp    c00113de <VgaText::receiveKey(unsigned char)+0x70>
c00113bc:	0f be c3             	movsx  eax,bl
c00113bf:	52                   	push   edx
c00113c0:	52                   	push   edx
c00113c1:	50                   	push   eax
c00113c2:	56                   	push   esi
c00113c3:	e8 8e fc ff ff       	call   c0011056 <VgaText::putchar(char)>
c00113c8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113cc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113d1:	59                   	pop    ecx
c00113d2:	5d                   	pop    ebp
c00113d3:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113d7:	50                   	push   eax
c00113d8:	57                   	push   edi
c00113d9:	e8 96 f5 fe ff       	call   c0000974 <strcat>
c00113de:	83 c4 10             	add    esp,0x10
c00113e1:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113e8:	75 05                	jne    c00113ef <VgaText::receiveKey(unsigned char)+0x81>
c00113ea:	80 fb 0a             	cmp    bl,0xa
c00113ed:	75 53                	jne    c0011442 <VgaText::receiveKey(unsigned char)+0xd4>
c00113ef:	83 ec 0c             	sub    esp,0xc
c00113f2:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113f8:	53                   	push   ebx
c00113f9:	e8 96 f3 fe ff       	call   c0000794 <strlen>
c00113fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011401:	89 c5                	mov    ebp,eax
c0011403:	e8 8c f3 fe ff       	call   c0000794 <strlen>
c0011408:	83 c4 10             	add    esp,0x10
c001140b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001140f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011414:	76 10                	jbe    c0011426 <VgaText::receiveKey(unsigned char)+0xb8>
c0011416:	83 ec 0c             	sub    esp,0xc
c0011419:	68 bf a3 02 c0       	push   0xc002a3bf
c001141e:	e8 c4 91 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0011423:	83 c4 10             	add    esp,0x10
c0011426:	50                   	push   eax
c0011427:	50                   	push   eax
c0011428:	57                   	push   edi
c0011429:	53                   	push   ebx
c001142a:	e8 45 f5 fe ff       	call   c0000974 <strcat>
c001142f:	83 c4 0c             	add    esp,0xc
c0011432:	68 96 00 00 00       	push   0x96
c0011437:	6a 00                	push   0x0
c0011439:	57                   	push   edi
c001143a:	e8 39 f3 fe ff       	call   c0000778 <memset>
c001143f:	83 c4 10             	add    esp,0x10
c0011442:	83 ec 0c             	sub    esp,0xc
c0011445:	56                   	push   esi
c0011446:	e8 d5 f9 ff ff       	call   c0010e20 <VgaText::doUpdate()>
c001144b:	83 c4 10             	add    esp,0x10
c001144e:	83 c4 1c             	add    esp,0x1c
c0011451:	5b                   	pop    ebx
c0011452:	5e                   	pop    esi
c0011453:	5f                   	pop    edi
c0011454:	5d                   	pop    ebp
c0011455:	c3                   	ret    

c0011456 <VgaText::write(unsigned long long, void*, int*)>:
c0011456:	55                   	push   ebp
c0011457:	57                   	push   edi
c0011458:	56                   	push   esi
c0011459:	53                   	push   ebx
c001145a:	83 ec 0c             	sub    esp,0xc
c001145d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011461:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011465:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011469:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011470:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011473:	39 eb                	cmp    ebx,ebp
c0011475:	74 13                	je     c001148a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011477:	43                   	inc    ebx
c0011478:	50                   	push   eax
c0011479:	50                   	push   eax
c001147a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001147e:	50                   	push   eax
c001147f:	56                   	push   esi
c0011480:	e8 d1 fb ff ff       	call   c0011056 <VgaText::putchar(char)>
c0011485:	83 c4 10             	add    esp,0x10
c0011488:	eb e9                	jmp    c0011473 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001148a:	83 ec 0c             	sub    esp,0xc
c001148d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011494:	56                   	push   esi
c0011495:	e8 86 f9 ff ff       	call   c0010e20 <VgaText::doUpdate()>
c001149a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001149e:	89 38                	mov    DWORD PTR [eax],edi
c00114a0:	83 c4 1c             	add    esp,0x1c
c00114a3:	31 c0                	xor    eax,eax
c00114a5:	5b                   	pop    ebx
c00114a6:	5e                   	pop    esi
c00114a7:	5f                   	pop    edi
c00114a8:	5d                   	pop    ebp
c00114a9:	c3                   	ret    

c00114aa <newTerminal(char*)>:
c00114aa:	83 ec 28             	sub    esp,0x28
c00114ad:	68 60 12 00 00       	push   0x1260
c00114b2:	e8 89 e3 ff ff       	call   c000f840 <malloc>
c00114b7:	5a                   	pop    edx
c00114b8:	59                   	pop    ecx
c00114b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114bd:	50                   	push   eax
c00114be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114c2:	e8 15 fd ff ff       	call   c00111dc <VgaText::VgaText(char const*)>
c00114c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114cb:	83 c4 2c             	add    esp,0x2c
c00114ce:	c3                   	ret    
c00114cf:	90                   	nop

c00114d0 <TSS::TSS()>:
c00114d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114db:	90                   	nop
c00114dc:	c3                   	ret    
c00114dd:	90                   	nop

c00114de <TSS::setESP(unsigned long)>:
c00114de:	55                   	push   ebp
c00114df:	89 e5                	mov    ebp,esp
c00114e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114ed:	90                   	nop
c00114ee:	5d                   	pop    ebp
c00114ef:	c3                   	ret    

c00114f0 <TSS::flush()>:
c00114f0:	55                   	push   ebp
c00114f1:	89 e5                	mov    ebp,esp
c00114f3:	83 ec 10             	sub    esp,0x10
c00114f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114fb:	83 c8 03             	or     eax,0x3
c00114fe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011502:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011506:	66 89 d0             	mov    ax,dx
c0011509:	0f 00 d8             	ltr    ax
c001150c:	90                   	nop
c001150d:	c9                   	leave  
c001150e:	c3                   	ret    
c001150f:	90                   	nop

c0011510 <TSS::setup(unsigned long, unsigned long)>:
c0011510:	55                   	push   ebp
c0011511:	89 e5                	mov    ebp,esp
c0011513:	83 ec 18             	sub    esp,0x18
c0011516:	83 ec 0c             	sub    esp,0xc
c0011519:	6a 68                	push   0x68
c001151b:	e8 20 e3 ff ff       	call   c000f840 <malloc>
c0011520:	83 c4 10             	add    esp,0x10
c0011523:	89 c2                	mov    edx,eax
c0011525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011528:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001152b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011531:	83 ec 04             	sub    esp,0x4
c0011534:	6a 68                	push   0x68
c0011536:	6a 00                	push   0x0
c0011538:	50                   	push   eax
c0011539:	e8 3a f2 fe ff       	call   c0000778 <memset>
c001153e:	83 c4 10             	add    esp,0x10
c0011541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001154d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011553:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011562:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011577:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001157d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011580:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011583:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011598:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00115a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115b6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115cb:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d8:	0f 20 da             	mov    edx,cr3
c00115db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115e1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ea:	83 ec 08             	sub    esp,0x8
c00115ed:	50                   	push   eax
c00115ee:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115f1:	50                   	push   eax
c00115f2:	e8 27 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115f7:	83 c4 10             	add    esp,0x10
c00115fa:	83 ec 08             	sub    esp,0x8
c00115fd:	6a 68                	push   0x68
c00115ff:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011602:	50                   	push   eax
c0011603:	e8 32 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c0011608:	83 c4 10             	add    esp,0x10
c001160b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001160f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011612:	83 e0 0f             	and    eax,0xf
c0011615:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011618:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001161b:	83 c8 40             	or     eax,0x40
c001161e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011621:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0011626:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001162c:	05 78 01 00 00       	add    eax,0x178
c0011631:	83 ec 04             	sub    esp,0x4
c0011634:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011637:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001163a:	50                   	push   eax
c001163b:	e8 2e da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011640:	83 c4 10             	add    esp,0x10
c0011643:	89 c2                	mov    edx,eax
c0011645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011648:	89 10                	mov    DWORD PTR [eax],edx
c001164a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001164f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011655:	05 78 01 00 00       	add    eax,0x178
c001165a:	83 ec 0c             	sub    esp,0xc
c001165d:	50                   	push   eax
c001165e:	e8 4f da ff ff       	call   c000f0b2 <GDT::flush()>
c0011663:	83 c4 10             	add    esp,0x10
c0011666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011669:	8b 00                	mov    eax,DWORD PTR [eax]
c001166b:	83 ec 08             	sub    esp,0x8
c001166e:	50                   	push   eax
c001166f:	68 28 a4 02 c0       	push   0xc002a428
c0011674:	e8 cd 18 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0011679:	83 c4 10             	add    esp,0x10
c001167c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001167f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011681:	c9                   	leave  
c0011682:	c3                   	ret    
c0011683:	90                   	nop

c0011684 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011688:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001168c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001168f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011694:	75 08                	jne    c001169e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011696:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001169c:	eb 38                	jmp    c00116d6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001169e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116a3:	75 17                	jne    c00116bc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00116a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116ad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00116b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116b9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116bc:	89 c1                	mov    ecx,eax
c00116be:	83 e1 fd             	and    ecx,0xfffffffd
c00116c1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116c7:	74 cd                	je     c0011696 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116c9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ce:	83 e0 ef             	and    eax,0xffffffef
c00116d1:	83 f8 08             	cmp    eax,0x8
c00116d4:	76 c0                	jbe    c0011696 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116d6:	31 c0                	xor    eax,eax
c00116d8:	c3                   	ret    
c00116d9:	90                   	nop

c00116da <ReservedFilename::isAtty()>:
c00116da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116e1:	31 c0                	xor    eax,eax
c00116e3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116e9:	74 09                	je     c00116f4 <ReservedFilename::isAtty()+0x1a>
c00116eb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116f1:	0f 94 c0             	sete   al
c00116f4:	c3                   	ret    
c00116f5:	90                   	nop

c00116f6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011701:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011705:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001170a:	75 08                	jne    c0011714 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001170c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011712:	eb 3d                	jmp    c0011751 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011714:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011719:	75 17                	jne    c0011732 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001171b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011720:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011723:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011729:	8b 10                	mov    edx,DWORD PTR [eax]
c001172b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001172f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011732:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011737:	75 04                	jne    c001173d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011739:	89 0a                	mov    DWORD PTR [edx],ecx
c001173b:	eb 14                	jmp    c0011751 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001173d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011742:	74 c8                	je     c001170c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011744:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011749:	83 e0 ef             	and    eax,0xffffffef
c001174c:	83 f8 08             	cmp    eax,0x8
c001174f:	76 bb                	jbe    c001170c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011751:	31 c0                	xor    eax,eax
c0011753:	c3                   	ret    

c0011754 <UnixFile::getFileDescriptor()>:
c0011754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001175b:	c3                   	ret    

c001175c <UnixFile::UnixFile(int)>:
c001175c:	53                   	push   ebx
c001175d:	83 ec 28             	sub    esp,0x28
c0011760:	ba 14 a5 02 c0       	mov    edx,0xc002a514
c0011765:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011769:	89 10                	mov    DWORD PTR [eax],edx
c001176b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011773:	0f 8f 8c 01 00 00    	jg     c0011905 <UnixFile::UnixFile(int)+0x1a9>
c0011779:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001177e:	8d 50 01             	lea    edx,[eax+0x1]
c0011781:	89 15 20 d3 02 c0    	mov    DWORD PTR ds:0xc002d320,edx
c0011787:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001178b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001178e:	83 ec 08             	sub    esp,0x8
c0011791:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011795:	68 f8 e4 02 c0       	push   0xc002e4f8
c001179a:	e8 71 6f 01 00       	call   c0028710 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001179f:	83 c4 10             	add    esp,0x10
c00117a2:	a0 f4 e4 02 c0       	mov    al,ds:0xc002e4f4
c00117a7:	83 f0 01             	xor    eax,0x1
c00117aa:	84 c0                	test   al,al
c00117ac:	0f 84 54 01 00 00    	je     c0011906 <UnixFile::UnixFile(int)+0x1aa>
c00117b2:	c6 05 f4 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4f4,0x1
c00117b9:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117c1:	83 ec 0c             	sub    esp,0xc
c00117c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117c8:	e8 73 e0 ff ff       	call   c000f840 <malloc>
c00117cd:	83 c4 10             	add    esp,0x10
c00117d0:	89 c3                	mov    ebx,eax
c00117d2:	83 ec 08             	sub    esp,0x8
c00117d5:	68 03 ff ff 0f       	push   0xfffff03
c00117da:	53                   	push   ebx
c00117db:	e8 2c 01 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c00117e0:	83 c4 10             	add    esp,0x10
c00117e3:	89 1d ec e4 02 c0    	mov    DWORD PTR ds:0xc002e4ec,ebx
c00117e9:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117f1:	83 ec 0c             	sub    esp,0xc
c00117f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117f8:	e8 43 e0 ff ff       	call   c000f840 <malloc>
c00117fd:	83 c4 10             	add    esp,0x10
c0011800:	89 c3                	mov    ebx,eax
c0011802:	83 ec 08             	sub    esp,0x8
c0011805:	68 01 ff ff 0f       	push   0xfffff01
c001180a:	53                   	push   ebx
c001180b:	e8 fc 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c0011810:	83 c4 10             	add    esp,0x10
c0011813:	89 1d f0 e4 02 c0    	mov    DWORD PTR ds:0xc002e4f0,ebx
c0011819:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011821:	83 ec 0c             	sub    esp,0xc
c0011824:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011828:	e8 13 e0 ff ff       	call   c000f840 <malloc>
c001182d:	83 c4 10             	add    esp,0x10
c0011830:	89 c3                	mov    ebx,eax
c0011832:	83 ec 08             	sub    esp,0x8
c0011835:	68 00 ff ff 0f       	push   0xfffff00
c001183a:	53                   	push   ebx
c001183b:	e8 cc 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c0011840:	83 c4 10             	add    esp,0x10
c0011843:	89 1d e4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e4,ebx
c0011849:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011851:	83 ec 0c             	sub    esp,0xc
c0011854:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011858:	e8 e3 df ff ff       	call   c000f840 <malloc>
c001185d:	83 c4 10             	add    esp,0x10
c0011860:	89 c3                	mov    ebx,eax
c0011862:	83 ec 08             	sub    esp,0x8
c0011865:	68 02 ff ff 0f       	push   0xfffff02
c001186a:	53                   	push   ebx
c001186b:	e8 9c 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c0011870:	83 c4 10             	add    esp,0x10
c0011873:	89 1d e8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e8,ebx
c0011879:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011881:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011886:	7f 7e                	jg     c0011906 <UnixFile::UnixFile(int)+0x1aa>
c0011888:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011890:	83 ec 0c             	sub    esp,0xc
c0011893:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011897:	e8 a4 df ff ff       	call   c000f840 <malloc>
c001189c:	83 c4 10             	add    esp,0x10
c001189f:	89 c3                	mov    ebx,eax
c00118a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a5:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118aa:	83 ec 08             	sub    esp,0x8
c00118ad:	50                   	push   eax
c00118ae:	53                   	push   ebx
c00118af:	e8 58 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c00118b4:	83 c4 10             	add    esp,0x10
c00118b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118bb:	89 1c 85 c0 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b40],ebx
c00118c2:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118ca:	83 ec 0c             	sub    esp,0xc
c00118cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118d1:	e8 6a df ff ff       	call   c000f840 <malloc>
c00118d6:	83 c4 10             	add    esp,0x10
c00118d9:	89 c3                	mov    ebx,eax
c00118db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118df:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118e4:	83 ec 08             	sub    esp,0x8
c00118e7:	50                   	push   eax
c00118e8:	53                   	push   ebx
c00118e9:	e8 1e 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c00118ee:	83 c4 10             	add    esp,0x10
c00118f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118f5:	89 1c 85 80 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b80],ebx
c00118fc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011900:	e9 7c ff ff ff       	jmp    c0011881 <UnixFile::UnixFile(int)+0x125>
c0011905:	90                   	nop
c0011906:	83 c4 28             	add    esp,0x28
c0011909:	5b                   	pop    ebx
c001190a:	c3                   	ret    
c001190b:	90                   	nop

c001190c <ReservedFilename::ReservedFilename(int)>:
c001190c:	83 ec 0c             	sub    esp,0xc
c001190f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011913:	83 ec 08             	sub    esp,0x8
c0011916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001191a:	50                   	push   eax
c001191b:	e8 3c fe ff ff       	call   c001175c <UnixFile::UnixFile(int)>
c0011920:	83 c4 10             	add    esp,0x10
c0011923:	ba 30 a5 02 c0       	mov    edx,0xc002a530
c0011928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001192c:	89 10                	mov    DWORD PTR [eax],edx
c001192e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011932:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011936:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011939:	90                   	nop
c001193a:	83 c4 0c             	add    esp,0xc
c001193d:	c3                   	ret    

c001193e <UnixFile::~UnixFile()>:
c001193e:	83 ec 1c             	sub    esp,0x1c
c0011941:	ba 14 a5 02 c0       	mov    edx,0xc002a514
c0011946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001194a:	89 10                	mov    DWORD PTR [eax],edx
c001194c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011950:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011953:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011958:	7f 73                	jg     c00119cd <UnixFile::~UnixFile()+0x8f>
c001195a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011962:	83 ec 0c             	sub    esp,0xc
c0011965:	68 f8 e4 02 c0       	push   0xc002e4f8
c001196a:	e8 75 6e 01 00       	call   c00287e4 <LinkedList<UnixFile>::getFirstElement()>
c001196f:	83 c4 10             	add    esp,0x10
c0011972:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011976:	83 ec 0c             	sub    esp,0xc
c0011979:	68 f8 e4 02 c0       	push   0xc002e4f8
c001197e:	e8 69 6e 01 00       	call   c00287ec <LinkedList<UnixFile>::removeFirst()>
c0011983:	83 c4 10             	add    esp,0x10
c0011986:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001198a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001198e:	74 40                	je     c00119d0 <UnixFile::~UnixFile()+0x92>
c0011990:	83 ec 08             	sub    esp,0x8
c0011993:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011997:	68 f8 e4 02 c0       	push   0xc002e4f8
c001199c:	e8 6f 6d 01 00       	call   c0028710 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119a8:	8d 50 01             	lea    edx,[eax+0x1]
c00119ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119af:	3d 88 13 00 00       	cmp    eax,0x1388
c00119b4:	0f 94 c0             	sete   al
c00119b7:	84 c0                	test   al,al
c00119b9:	74 a7                	je     c0011962 <UnixFile::~UnixFile()+0x24>
c00119bb:	83 ec 0c             	sub    esp,0xc
c00119be:	68 ec a4 02 c0       	push   0xc002a4ec
c00119c3:	e8 1f 8c 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c00119c8:	83 c4 10             	add    esp,0x10
c00119cb:	eb 95                	jmp    c0011962 <UnixFile::~UnixFile()+0x24>
c00119cd:	90                   	nop
c00119ce:	eb 01                	jmp    c00119d1 <UnixFile::~UnixFile()+0x93>
c00119d0:	90                   	nop
c00119d1:	90                   	nop
c00119d2:	83 c4 1c             	add    esp,0x1c
c00119d5:	c3                   	ret    

c00119d6 <UnixFile::~UnixFile()>:
c00119d6:	83 ec 0c             	sub    esp,0xc
c00119d9:	83 ec 0c             	sub    esp,0xc
c00119dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e0:	e8 59 ff ff ff       	call   c001193e <UnixFile::~UnixFile()>
c00119e5:	83 c4 10             	add    esp,0x10
c00119e8:	83 ec 08             	sub    esp,0x8
c00119eb:	6a 0c                	push   0xc
c00119ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f1:	e8 70 14 00 00       	call   c0012e66 <operator delete(void*, unsigned long)>
c00119f6:	83 c4 10             	add    esp,0x10
c00119f9:	83 c4 0c             	add    esp,0xc
c00119fc:	c3                   	ret    
c00119fd:	90                   	nop

c00119fe <ReservedFilename::~ReservedFilename()>:
c00119fe:	83 ec 0c             	sub    esp,0xc
c0011a01:	ba 30 a5 02 c0       	mov    edx,0xc002a530
c0011a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a0a:	89 10                	mov    DWORD PTR [eax],edx
c0011a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a10:	83 ec 0c             	sub    esp,0xc
c0011a13:	50                   	push   eax
c0011a14:	e8 25 ff ff ff       	call   c001193e <UnixFile::~UnixFile()>
c0011a19:	83 c4 10             	add    esp,0x10
c0011a1c:	90                   	nop
c0011a1d:	83 c4 0c             	add    esp,0xc
c0011a20:	c3                   	ret    
c0011a21:	90                   	nop

c0011a22 <ReservedFilename::~ReservedFilename()>:
c0011a22:	83 ec 0c             	sub    esp,0xc
c0011a25:	83 ec 0c             	sub    esp,0xc
c0011a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a2c:	e8 cd ff ff ff       	call   c00119fe <ReservedFilename::~ReservedFilename()>
c0011a31:	83 c4 10             	add    esp,0x10
c0011a34:	83 ec 08             	sub    esp,0x8
c0011a37:	6a 0c                	push   0xc
c0011a39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a3d:	e8 24 14 00 00       	call   c0012e66 <operator delete(void*, unsigned long)>
c0011a42:	83 c4 10             	add    esp,0x10
c0011a45:	83 c4 0c             	add    esp,0xc
c0011a48:	c3                   	ret    

c0011a49 <getFromFileDescriptor(int)>:
c0011a49:	53                   	push   ebx
c0011a4a:	83 ec 08             	sub    esp,0x8
c0011a4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a51:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a57:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a5d:	7f 2c                	jg     c0011a8b <getFromFileDescriptor(int)+0x42>
c0011a5f:	83 ec 0c             	sub    esp,0xc
c0011a62:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011a67:	e8 78 6d 01 00       	call   c00287e4 <LinkedList<UnixFile>::getFirstElement()>
c0011a6c:	83 c4 10             	add    esp,0x10
c0011a6f:	85 c0                	test   eax,eax
c0011a71:	75 04                	jne    c0011a77 <getFromFileDescriptor(int)+0x2e>
c0011a73:	31 c0                	xor    eax,eax
c0011a75:	eb 6e                	jmp    c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011a77:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a7a:	74 69                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011a7c:	52                   	push   edx
c0011a7d:	52                   	push   edx
c0011a7e:	50                   	push   eax
c0011a7f:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011a84:	e8 05 6e 01 00       	call   c002888e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a89:	eb e1                	jmp    c0011a6c <getFromFileDescriptor(int)+0x23>
c0011a8b:	a1 ec e4 02 c0       	mov    eax,ds:0xc002e4ec
c0011a90:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a96:	74 4d                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011a98:	a1 f0 e4 02 c0       	mov    eax,ds:0xc002e4f0
c0011a9d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011aa3:	74 40                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011aa5:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0011aaa:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011ab0:	74 33                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011ab2:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0011ab7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011abd:	74 26                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011abf:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011ac5:	83 f8 08             	cmp    eax,0x8
c0011ac8:	77 09                	ja     c0011ad3 <getFromFileDescriptor(int)+0x8a>
c0011aca:	8b 04 85 c0 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b40]
c0011ad1:	eb 12                	jmp    c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011ad3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ad9:	83 fb 08             	cmp    ebx,0x8
c0011adc:	77 95                	ja     c0011a73 <getFromFileDescriptor(int)+0x2a>
c0011ade:	8b 04 9d 80 e4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1b80]
c0011ae5:	83 c4 08             	add    esp,0x8
c0011ae8:	5b                   	pop    ebx
c0011ae9:	c3                   	ret    

c0011aea <__static_initialization_and_destruction_0(int, int)>:
c0011aea:	83 ec 0c             	sub    esp,0xc
c0011aed:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011af2:	75 34                	jne    c0011b28 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011af4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011afc:	75 2a                	jne    c0011b28 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011afe:	83 ec 0c             	sub    esp,0xc
c0011b01:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011b06:	e8 ad 6b 01 00       	call   c00286b8 <LinkedList<UnixFile>::LinkedList()>
c0011b0b:	83 c4 10             	add    esp,0x10
c0011b0e:	83 ec 04             	sub    esp,0x4
c0011b11:	68 9c d2 02 c0       	push   0xc002d29c
c0011b16:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011b1b:	68 b6 86 02 c0       	push   0xc00286b6
c0011b20:	e8 bb 12 00 00       	call   c0012de0 <__cxa_atexit>
c0011b25:	83 c4 10             	add    esp,0x10
c0011b28:	90                   	nop
c0011b29:	83 c4 0c             	add    esp,0xc
c0011b2c:	c3                   	ret    

c0011b2d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b2d:	83 ec 0c             	sub    esp,0xc
c0011b30:	83 ec 08             	sub    esp,0x8
c0011b33:	68 ff ff 00 00       	push   0xffff
c0011b38:	6a 01                	push   0x1
c0011b3a:	e8 ab ff ff ff       	call   c0011aea <__static_initialization_and_destruction_0(int, int)>
c0011b3f:	83 c4 10             	add    esp,0x10
c0011b42:	83 c4 0c             	add    esp,0xc
c0011b45:	c3                   	ret    

c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b46:	53                   	push   ebx
c0011b47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b4f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b55:	89 c8                	mov    eax,ecx
c0011b57:	d1 e8                	shr    eax,1
c0011b59:	03 05 28 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d328
c0011b5f:	83 e1 01             	and    ecx,0x1
c0011b62:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b64:	75 09                	jne    c0011b6f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b66:	83 e2 f0             	and    edx,0xfffffff0
c0011b69:	09 da                	or     edx,ebx
c0011b6b:	88 10                	mov    BYTE PTR [eax],dl
c0011b6d:	5b                   	pop    ebx
c0011b6e:	c3                   	ret    
c0011b6f:	c1 e3 04             	shl    ebx,0x4
c0011b72:	83 e2 0f             	and    edx,0xf
c0011b75:	09 da                	or     edx,ebx
c0011b77:	88 10                	mov    BYTE PTR [eax],dl
c0011b79:	5b                   	pop    ebx
c0011b7a:	c3                   	ret    

c0011b7b <Virt::getPageState(unsigned long)>:
c0011b7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b7f:	8b 0d 28 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d328
c0011b85:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b8b:	89 d0                	mov    eax,edx
c0011b8d:	d1 e8                	shr    eax,1
c0011b8f:	83 e2 01             	and    edx,0x1
c0011b92:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b95:	75 04                	jne    c0011b9b <Virt::getPageState(unsigned long)+0x20>
c0011b97:	83 e0 0f             	and    eax,0xf
c0011b9a:	c3                   	ret    
c0011b9b:	c0 e8 04             	shr    al,0x4
c0011b9e:	c3                   	ret    

c0011b9f <Virt::allocateKernelVirtualPages(int)>:
c0011b9f:	55                   	push   ebp
c0011ba0:	31 ed                	xor    ebp,ebp
c0011ba2:	57                   	push   edi
c0011ba3:	56                   	push   esi
c0011ba4:	53                   	push   ebx
c0011ba5:	31 db                	xor    ebx,ebx
c0011ba7:	83 ec 1c             	sub    esp,0x1c
c0011baa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011bae:	8b 3d 24 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d324
c0011bb4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bb9:	57                   	push   edi
c0011bba:	e8 bc ff ff ff       	call   c0011b7b <Virt::getPageState(unsigned long)>
c0011bbf:	5a                   	pop    edx
c0011bc0:	84 c0                	test   al,al
c0011bc2:	75 3a                	jne    c0011bfe <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bc4:	85 db                	test   ebx,ebx
c0011bc6:	75 02                	jne    c0011bca <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bc8:	89 fd                	mov    ebp,edi
c0011bca:	43                   	inc    ebx
c0011bcb:	39 f3                	cmp    ebx,esi
c0011bcd:	74 5a                	je     c0011c29 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bcf:	47                   	inc    edi
c0011bd0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bd6:	76 31                	jbe    c0011c09 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bd8:	c7 05 24 d3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d324,0xc8000
c0011be2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011be7:	75 28                	jne    c0011c11 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011be9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bee:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bf3:	57                   	push   edi
c0011bf4:	e8 82 ff ff ff       	call   c0011b7b <Virt::getPageState(unsigned long)>
c0011bf9:	5a                   	pop    edx
c0011bfa:	84 c0                	test   al,al
c0011bfc:	74 c6                	je     c0011bc4 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bfe:	31 db                	xor    ebx,ebx
c0011c00:	47                   	inc    edi
c0011c01:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c07:	77 cf                	ja     c0011bd8 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c09:	89 3d 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,edi
c0011c0f:	eb a8                	jmp    c0011bb9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c11:	83 ec 0c             	sub    esp,0xc
c0011c14:	68 44 a5 02 c0       	push   0xc002a544
c0011c19:	e8 c9 89 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0011c1e:	8b 3d 24 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d324
c0011c24:	83 c4 10             	add    esp,0x10
c0011c27:	eb 90                	jmp    c0011bb9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c29:	89 2d 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,ebp
c0011c2f:	4b                   	dec    ebx
c0011c30:	74 5f                	je     c0011c91 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c32:	85 f6                	test   esi,esi
c0011c34:	74 3d                	je     c0011c73 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c36:	89 e8                	mov    eax,ebp
c0011c38:	31 db                	xor    ebx,ebx
c0011c3a:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c3d:	eb 14                	jmp    c0011c53 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c3f:	6a 01                	push   0x1
c0011c41:	43                   	inc    ebx
c0011c42:	50                   	push   eax
c0011c43:	e8 fe fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c48:	58                   	pop    eax
c0011c49:	39 f3                	cmp    ebx,esi
c0011c4b:	5a                   	pop    edx
c0011c4c:	74 25                	je     c0011c73 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c4e:	a1 24 d3 02 c0       	mov    eax,ds:0xc002d324
c0011c53:	8d 50 01             	lea    edx,[eax+0x1]
c0011c56:	85 db                	test   ebx,ebx
c0011c58:	89 15 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,edx
c0011c5e:	74 20                	je     c0011c80 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c60:	39 df                	cmp    edi,ebx
c0011c62:	75 db                	jne    c0011c3f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c64:	6a 03                	push   0x3
c0011c66:	43                   	inc    ebx
c0011c67:	50                   	push   eax
c0011c68:	e8 d9 fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c6d:	59                   	pop    ecx
c0011c6e:	39 f3                	cmp    ebx,esi
c0011c70:	58                   	pop    eax
c0011c71:	75 db                	jne    c0011c4e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c73:	83 c4 1c             	add    esp,0x1c
c0011c76:	89 e8                	mov    eax,ebp
c0011c78:	5b                   	pop    ebx
c0011c79:	c1 e0 0c             	shl    eax,0xc
c0011c7c:	5e                   	pop    esi
c0011c7d:	5f                   	pop    edi
c0011c7e:	5d                   	pop    ebp
c0011c7f:	c3                   	ret    
c0011c80:	6a 02                	push   0x2
c0011c82:	bb 01 00 00 00       	mov    ebx,0x1
c0011c87:	50                   	push   eax
c0011c88:	e8 b9 fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c8d:	58                   	pop    eax
c0011c8e:	5a                   	pop    edx
c0011c8f:	eb bd                	jmp    c0011c4e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c91:	6a 04                	push   0x4
c0011c93:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c96:	55                   	push   ebp
c0011c97:	a3 24 d3 02 c0       	mov    ds:0xc002d324,eax
c0011c9c:	e8 a5 fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca1:	59                   	pop    ecx
c0011ca2:	89 e8                	mov    eax,ebp
c0011ca4:	5b                   	pop    ebx
c0011ca5:	c1 e0 0c             	shl    eax,0xc
c0011ca8:	83 c4 1c             	add    esp,0x1c
c0011cab:	5b                   	pop    ebx
c0011cac:	5e                   	pop    esi
c0011cad:	5f                   	pop    edi
c0011cae:	5d                   	pop    ebp
c0011caf:	c3                   	ret    

c0011cb0 <Virt::freeSwapfilePage(unsigned long)>:
c0011cb0:	53                   	push   ebx
c0011cb1:	8b 15 08 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e508
c0011cb7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cbb:	b8 01 00 00 00       	mov    eax,0x1
c0011cc0:	89 cb                	mov    ebx,ecx
c0011cc2:	d3 e0                	shl    eax,cl
c0011cc4:	c1 eb 05             	shr    ebx,0x5
c0011cc7:	f7 d0                	not    eax
c0011cc9:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011ccc:	5b                   	pop    ebx
c0011ccd:	c3                   	ret    

c0011cce <Virt::swapIDToSector(unsigned long)>:
c0011cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd2:	0f af 05 2c d3 02 c0 	imul   eax,DWORD PTR ds:0xc002d32c
c0011cd9:	03 05 34 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d334
c0011cdf:	c3                   	ret    

c0011ce0 <Virt::allocateSwapfilePage()>:
c0011ce0:	55                   	push   ebp
c0011ce1:	31 d2                	xor    edx,edx
c0011ce3:	57                   	push   edi
c0011ce4:	56                   	push   esi
c0011ce5:	53                   	push   ebx
c0011ce6:	83 ec 0c             	sub    esp,0xc
c0011ce9:	8b 0d 2c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d32c
c0011cef:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011cf4:	f7 f1                	div    ecx
c0011cf6:	39 0d 30 d3 02 c0    	cmp    DWORD PTR ds:0xc002d330,ecx
c0011cfc:	72 2d                	jb     c0011d2b <Virt::allocateSwapfilePage()+0x4b>
c0011cfe:	8b 35 08 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e508
c0011d04:	8b 16                	mov    edx,DWORD PTR [esi]
c0011d06:	f6 c2 01             	test   dl,0x1
c0011d09:	74 3c                	je     c0011d47 <Virt::allocateSwapfilePage()+0x67>
c0011d0b:	31 c9                	xor    ecx,ecx
c0011d0d:	bf 01 00 00 00       	mov    edi,0x1
c0011d12:	eb 12                	jmp    c0011d26 <Virt::allocateSwapfilePage()+0x46>
c0011d14:	89 fd                	mov    ebp,edi
c0011d16:	89 ca                	mov    edx,ecx
c0011d18:	d3 e5                	shl    ebp,cl
c0011d1a:	c1 ea 05             	shr    edx,0x5
c0011d1d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d20:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d22:	85 ea                	test   edx,ebp
c0011d24:	74 2a                	je     c0011d50 <Virt::allocateSwapfilePage()+0x70>
c0011d26:	41                   	inc    ecx
c0011d27:	39 c8                	cmp    eax,ecx
c0011d29:	77 e9                	ja     c0011d14 <Virt::allocateSwapfilePage()+0x34>
c0011d2b:	83 ec 0c             	sub    esp,0xc
c0011d2e:	68 cb a6 02 c0       	push   0xc002a6cb
c0011d33:	e8 af 88 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0011d38:	83 c4 10             	add    esp,0x10
c0011d3b:	31 c9                	xor    ecx,ecx
c0011d3d:	83 c4 0c             	add    esp,0xc
c0011d40:	89 c8                	mov    eax,ecx
c0011d42:	5b                   	pop    ebx
c0011d43:	5e                   	pop    esi
c0011d44:	5f                   	pop    edi
c0011d45:	5d                   	pop    ebp
c0011d46:	c3                   	ret    
c0011d47:	89 f3                	mov    ebx,esi
c0011d49:	bd 01 00 00 00       	mov    ebp,0x1
c0011d4e:	31 c9                	xor    ecx,ecx
c0011d50:	09 ea                	or     edx,ebp
c0011d52:	89 c8                	mov    eax,ecx
c0011d54:	89 13                	mov    DWORD PTR [ebx],edx
c0011d56:	83 c4 0c             	add    esp,0xc
c0011d59:	5b                   	pop    ebx
c0011d5a:	5e                   	pop    esi
c0011d5b:	5f                   	pop    edi
c0011d5c:	5d                   	pop    ebp
c0011d5d:	c3                   	ret    

c0011d5e <Virt::virtualMemorySetup()>:
c0011d5e:	53                   	push   ebx
c0011d5f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d64:	83 ec 08             	sub    esp,0x8
c0011d67:	6a 0f                	push   0xf
c0011d69:	53                   	push   ebx
c0011d6a:	43                   	inc    ebx
c0011d6b:	e8 d6 fd ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d70:	59                   	pop    ecx
c0011d71:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d77:	58                   	pop    eax
c0011d78:	75 ed                	jne    c0011d67 <Virt::virtualMemorySetup()+0x9>
c0011d7a:	83 ec 08             	sub    esp,0x8
c0011d7d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d82:	68 00 00 00 c8       	push   0xc8000000
c0011d87:	68 e2 a6 02 c0       	push   0xc002a6e2
c0011d8c:	e8 b5 11 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0011d91:	58                   	pop    eax
c0011d92:	5a                   	pop    edx
c0011d93:	68 00 f0 ff ef       	push   0xeffff000
c0011d98:	68 f6 a6 02 c0       	push   0xc002a6f6
c0011d9d:	e8 a4 11 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0011da2:	83 c4 10             	add    esp,0x10
c0011da5:	83 ec 08             	sub    esp,0x8
c0011da8:	6a 00                	push   0x0
c0011daa:	53                   	push   ebx
c0011dab:	43                   	inc    ebx
c0011dac:	e8 95 fd ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db1:	83 c4 10             	add    esp,0x10
c0011db4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dba:	75 e9                	jne    c0011da5 <Virt::virtualMemorySetup()+0x47>
c0011dbc:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dc1:	83 ec 08             	sub    esp,0x8
c0011dc4:	6a 0f                	push   0xf
c0011dc6:	53                   	push   ebx
c0011dc7:	43                   	inc    ebx
c0011dc8:	e8 79 fd ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dcd:	83 c4 10             	add    esp,0x10
c0011dd0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dd6:	75 e9                	jne    c0011dc1 <Virt::virtualMemorySetup()+0x63>
c0011dd8:	83 c4 08             	add    esp,0x8
c0011ddb:	5b                   	pop    ebx
c0011ddc:	c3                   	ret    

c0011ddd <Virt::swappingSetup()>:
c0011ddd:	83 ec 14             	sub    esp,0x14
c0011de0:	31 d2                	xor    edx,edx
c0011de2:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011de7:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011ded:	c1 e8 05             	shr    eax,0x5
c0011df0:	50                   	push   eax
c0011df1:	68 0a a7 02 c0       	push   0xc002a70a
c0011df6:	e8 4b 11 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0011dfb:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011e00:	31 d2                	xor    edx,edx
c0011e02:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011e08:	c1 e8 05             	shr    eax,0x5
c0011e0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e0e:	e8 2d da ff ff       	call   c000f840 <malloc>
c0011e13:	83 c4 0c             	add    esp,0xc
c0011e16:	89 c1                	mov    ecx,eax
c0011e18:	a3 08 e5 02 c0       	mov    ds:0xc002e508,eax
c0011e1d:	31 d2                	xor    edx,edx
c0011e1f:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011e24:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011e2a:	c1 e8 05             	shr    eax,0x5
c0011e2d:	50                   	push   eax
c0011e2e:	6a 00                	push   0x0
c0011e30:	51                   	push   ecx
c0011e31:	e8 42 e9 fe ff       	call   c0000778 <memset>
c0011e36:	83 c4 1c             	add    esp,0x1c
c0011e39:	c3                   	ret    

c0011e3a <Virt::getAKernelVAS()>:
c0011e3a:	a1 0c e5 02 c0       	mov    eax,ds:0xc002e50c
c0011e3f:	c3                   	ret    

c0011e40 <Virt::setupPageSwapping(int)>:
c0011e40:	57                   	push   edi
c0011e41:	56                   	push   esi
c0011e42:	53                   	push   ebx
c0011e43:	83 ec 1c             	sub    esp,0x1c
c0011e46:	68 14 01 00 00       	push   0x114
c0011e4b:	e8 f0 d9 ff ff       	call   c000f840 <malloc>
c0011e50:	83 c4 0c             	add    esp,0xc
c0011e53:	89 c6                	mov    esi,eax
c0011e55:	ff 35 14 19 03 c0    	push   DWORD PTR ds:0xc0031914
c0011e5b:	68 25 a7 02 c0       	push   0xc002a725
c0011e60:	50                   	push   eax
c0011e61:	e8 38 16 00 00       	call   c001349e <File::File(char const*, Process*)>
c0011e66:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e69:	e8 0c 18 00 00       	call   c001367a <File::unlink()>
c0011e6e:	58                   	pop    eax
c0011e6f:	5a                   	pop    edx
c0011e70:	6a 12                	push   0x12
c0011e72:	56                   	push   esi
c0011e73:	e8 8a 16 00 00       	call   c0013502 <File::open(FileOpenMode)>
c0011e78:	83 c4 10             	add    esp,0x10
c0011e7b:	85 c0                	test   eax,eax
c0011e7d:	0f 85 ca 00 00 00    	jne    c0011f4d <Virt::setupPageSwapping(int)+0x10d>
c0011e83:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e8f:	c1 e3 08             	shl    ebx,0x8
c0011e92:	83 ec 0c             	sub    esp,0xc
c0011e95:	68 00 00 01 00       	push   0x10000
c0011e9a:	e8 a1 d9 ff ff       	call   c000f840 <malloc>
c0011e9f:	83 c4 0c             	add    esp,0xc
c0011ea2:	89 c7                	mov    edi,eax
c0011ea4:	68 00 00 01 00       	push   0x10000
c0011ea9:	6a 00                	push   0x0
c0011eab:	50                   	push   eax
c0011eac:	e8 c7 e8 fe ff       	call   c0000778 <memset>
c0011eb1:	83 c4 10             	add    esp,0x10
c0011eb4:	85 db                	test   ebx,ebx
c0011eb6:	79 03                	jns    c0011ebb <Virt::setupPageSwapping(int)+0x7b>
c0011eb8:	83 c3 0f             	add    ebx,0xf
c0011ebb:	c1 fb 04             	sar    ebx,0x4
c0011ebe:	4b                   	dec    ebx
c0011ebf:	83 fb ff             	cmp    ebx,0xffffffff
c0011ec2:	74 4b                	je     c0011f0f <Virt::setupPageSwapping(int)+0xcf>
c0011ec4:	83 ec 0c             	sub    esp,0xc
c0011ec7:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ec9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ecd:	52                   	push   edx
c0011ece:	57                   	push   edi
c0011ecf:	6a 00                	push   0x0
c0011ed1:	68 00 00 01 00       	push   0x10000
c0011ed6:	56                   	push   esi
c0011ed7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011eda:	83 c4 20             	add    esp,0x20
c0011edd:	85 c0                	test   eax,eax
c0011edf:	75 59                	jne    c0011f3a <Virt::setupPageSwapping(int)+0xfa>
c0011ee1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee5:	3d 00 00 01 00       	cmp    eax,0x10000
c0011eea:	74 d2                	je     c0011ebe <Virt::setupPageSwapping(int)+0x7e>
c0011eec:	83 ec 08             	sub    esp,0x8
c0011eef:	4b                   	dec    ebx
c0011ef0:	50                   	push   eax
c0011ef1:	68 78 a7 02 c0       	push   0xc002a778
c0011ef6:	e8 4b 10 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0011efb:	c7 04 24 81 a7 02 c0 	mov    DWORD PTR [esp],0xc002a781
c0011f02:	e8 e0 86 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0011f07:	83 c4 10             	add    esp,0x10
c0011f0a:	83 fb ff             	cmp    ebx,0xffffffff
c0011f0d:	75 b5                	jne    c0011ec4 <Virt::setupPageSwapping(int)+0x84>
c0011f0f:	83 ec 0c             	sub    esp,0xc
c0011f12:	56                   	push   esi
c0011f13:	e8 48 16 00 00       	call   c0013560 <File::close()>
c0011f18:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f1b:	e8 40 d9 ff ff       	call   c000f860 <rfree>
c0011f20:	83 c4 10             	add    esp,0x10
c0011f23:	85 f6                	test   esi,esi
c0011f25:	74 0c                	je     c0011f33 <Virt::setupPageSwapping(int)+0xf3>
c0011f27:	83 ec 0c             	sub    esp,0xc
c0011f2a:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f2c:	56                   	push   esi
c0011f2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f30:	83 c4 10             	add    esp,0x10
c0011f33:	83 c4 10             	add    esp,0x10
c0011f36:	5b                   	pop    ebx
c0011f37:	5e                   	pop    esi
c0011f38:	5f                   	pop    edi
c0011f39:	c3                   	ret    
c0011f3a:	83 ec 08             	sub    esp,0x8
c0011f3d:	50                   	push   eax
c0011f3e:	68 60 a7 02 c0       	push   0xc002a760
c0011f43:	e8 fe 0f 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0011f48:	83 c4 10             	add    esp,0x10
c0011f4b:	eb 94                	jmp    c0011ee1 <Virt::setupPageSwapping(int)+0xa1>
c0011f4d:	83 ec 08             	sub    esp,0x8
c0011f50:	50                   	push   eax
c0011f51:	68 3c a7 02 c0       	push   0xc002a73c
c0011f56:	e8 eb 0f 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0011f5b:	c7 04 24 45 a7 02 c0 	mov    DWORD PTR [esp],0xc002a745
c0011f62:	e8 80 86 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0011f67:	83 c4 10             	add    esp,0x10
c0011f6a:	e9 14 ff ff ff       	jmp    c0011e83 <Virt::setupPageSwapping(int)+0x43>
c0011f6f:	90                   	nop

c0011f70 <VAS::VAS()>:
c0011f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7f:	a3 0c e5 02 c0       	mov    ds:0xc002e50c,eax
c0011f84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f88:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f90:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f97:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f9e:	90                   	nop
c0011f9f:	c3                   	ret    

c0011fa0 <VAS::VAS(VAS*)>:
c0011fa0:	83 ec 0c             	sub    esp,0xc
c0011fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fa7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fae:	83 ec 0c             	sub    esp,0xc
c0011fb1:	68 64 a5 02 c0       	push   0xc002a564
c0011fb6:	e8 2c 86 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0011fbb:	83 c4 10             	add    esp,0x10
c0011fbe:	90                   	nop
c0011fbf:	83 c4 0c             	add    esp,0xc
c0011fc2:	c3                   	ret    
c0011fc3:	90                   	nop

c0011fc4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fc8:	89 c2                	mov    edx,eax
c0011fca:	c1 e8 0a             	shr    eax,0xa
c0011fcd:	c1 ea 16             	shr    edx,0x16
c0011fd0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fd5:	19 c9                	sbb    ecx,ecx
c0011fd7:	c1 e2 0c             	shl    edx,0xc
c0011fda:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fe0:	25 fc 0f 00 00       	and    eax,0xffc
c0011fe5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fec:	01 d0                	add    eax,edx
c0011fee:	c3                   	ret    
c0011fef:	90                   	nop

c0011ff0 <VAS::getPageTableEntry(unsigned long)>:
c0011ff0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ff4:	89 ca                	mov    edx,ecx
c0011ff6:	c1 e9 0a             	shr    ecx,0xa
c0011ff9:	c1 ea 16             	shr    edx,0x16
c0011ffc:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012002:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012008:	c1 e0 0c             	shl    eax,0xc
c001200b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001200e:	c3                   	ret    

c001200f <Virt::freeKernelVirtualPages(unsigned long)>:
c001200f:	57                   	push   edi
c0012010:	56                   	push   esi
c0012011:	be 01 00 00 00       	mov    esi,0x1
c0012016:	53                   	push   ebx
c0012017:	83 ec 10             	sub    esp,0x10
c001201a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001201e:	c1 eb 0c             	shr    ebx,0xc
c0012021:	eb 3f                	jmp    c0012062 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012023:	e8 12 fe ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0012028:	83 ec 08             	sub    esp,0x8
c001202b:	57                   	push   edi
c001202c:	50                   	push   eax
c001202d:	e8 be ff ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012032:	83 c4 10             	add    esp,0x10
c0012035:	8b 00                	mov    eax,DWORD PTR [eax]
c0012037:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001203b:	f6 c4 04             	test   ah,0x4
c001203e:	75 5f                	jne    c001209f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012040:	80 fa 04             	cmp    dl,0x4
c0012043:	74 78                	je     c00120bd <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012045:	80 fa 02             	cmp    dl,0x2
c0012048:	0f 84 88 00 00 00    	je     c00120d6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001204e:	80 fa 03             	cmp    dl,0x3
c0012051:	0f 84 ad 00 00 00    	je     c0012104 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012057:	fe ca                	dec    dl
c0012059:	0f 84 92 00 00 00    	je     c00120f1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001205f:	43                   	inc    ebx
c0012060:	31 f6                	xor    esi,esi
c0012062:	53                   	push   ebx
c0012063:	e8 13 fb ff ff       	call   c0011b7b <Virt::getPageState(unsigned long)>
c0012068:	5f                   	pop    edi
c0012069:	89 df                	mov    edi,ebx
c001206b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001206f:	c1 e7 0c             	shl    edi,0xc
c0012072:	84 c0                	test   al,al
c0012074:	75 ad                	jne    c0012023 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012076:	83 ec 0c             	sub    esp,0xc
c0012079:	68 87 a7 02 c0       	push   0xc002a787
c001207e:	e8 64 85 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0012083:	e8 b2 fd ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0012088:	5a                   	pop    edx
c0012089:	59                   	pop    ecx
c001208a:	57                   	push   edi
c001208b:	50                   	push   eax
c001208c:	e8 5f ff ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012091:	83 c4 10             	add    esp,0x10
c0012094:	8b 00                	mov    eax,DWORD PTR [eax]
c0012096:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001209a:	f6 c4 04             	test   ah,0x4
c001209d:	74 c0                	je     c001205f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001209f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00120a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a8:	83 ec 0c             	sub    esp,0xc
c00120ab:	50                   	push   eax
c00120ac:	e8 a7 dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00120b1:	83 c4 10             	add    esp,0x10
c00120b4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120b8:	80 fa 04             	cmp    dl,0x4
c00120bb:	75 88                	jne    c0012045 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120bd:	89 f0                	mov    eax,esi
c00120bf:	84 c0                	test   al,al
c00120c1:	75 47                	jne    c001210a <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120c3:	c7 44 24 20 88 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a588
c00120cb:	83 c4 10             	add    esp,0x10
c00120ce:	5b                   	pop    ebx
c00120cf:	5e                   	pop    esi
c00120d0:	5f                   	pop    edi
c00120d1:	e9 11 85 00 00       	jmp    c001a5e7 <Krnl::panic(char const*)>
c00120d6:	89 f0                	mov    eax,esi
c00120d8:	84 c0                	test   al,al
c00120da:	75 15                	jne    c00120f1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120dc:	83 ec 0c             	sub    esp,0xc
c00120df:	68 a3 a7 02 c0       	push   0xc002a7a3
c00120e4:	e8 fe 84 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c00120e9:	83 c4 10             	add    esp,0x10
c00120ec:	e9 6e ff ff ff       	jmp    c001205f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f1:	83 ec 08             	sub    esp,0x8
c00120f4:	6a 00                	push   0x0
c00120f6:	53                   	push   ebx
c00120f7:	e8 4a fa ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120fc:	83 c4 10             	add    esp,0x10
c00120ff:	e9 5b ff ff ff       	jmp    c001205f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012104:	89 f0                	mov    eax,esi
c0012106:	84 c0                	test   al,al
c0012108:	75 15                	jne    c001211f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001210a:	83 ec 08             	sub    esp,0x8
c001210d:	6a 00                	push   0x0
c001210f:	53                   	push   ebx
c0012110:	e8 31 fa ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012115:	83 c4 10             	add    esp,0x10
c0012118:	83 c4 10             	add    esp,0x10
c001211b:	5b                   	pop    ebx
c001211c:	5e                   	pop    esi
c001211d:	5f                   	pop    edi
c001211e:	c3                   	ret    
c001211f:	c7 44 24 20 bf a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a7bf
c0012127:	83 c4 10             	add    esp,0x10
c001212a:	5b                   	pop    ebx
c001212b:	5e                   	pop    esi
c001212c:	5f                   	pop    edi
c001212d:	e9 b5 84 00 00       	jmp    c001a5e7 <Krnl::panic(char const*)>

c0012132 <VAS::freeAllocatedPages(unsigned long)>:
c0012132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012136:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001213a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001213e:	74 09                	je     c0012149 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012140:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012144:	e9 c6 fe ff ff       	jmp    c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0012149:	c7 44 24 04 ac a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a5ac
c0012151:	e9 f0 0d 00 00       	jmp    c0012f46 <Dbg::kprintf(char const*, ...)>

c0012156 <VAS::virtualToPhysical(unsigned long)>:
c0012156:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001215a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001215e:	e8 8d fe ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012163:	5a                   	pop    edx
c0012164:	8b 00                	mov    eax,DWORD PTR [eax]
c0012166:	59                   	pop    ecx
c0012167:	25 00 f0 ff ff       	and    eax,0xfffff000
c001216c:	c3                   	ret    
c001216d:	90                   	nop

c001216e <VAS::reflagRange(unsigned long, int, int, int)>:
c001216e:	55                   	push   ebp
c001216f:	57                   	push   edi
c0012170:	56                   	push   esi
c0012171:	53                   	push   ebx
c0012172:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012176:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001217a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001217e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012182:	85 db                	test   ebx,ebx
c0012184:	7e 22                	jle    c00121a8 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012186:	c1 e3 0c             	shl    ebx,0xc
c0012189:	01 f3                	add    ebx,esi
c001218b:	56                   	push   esi
c001218c:	81 c6 00 10 00 00    	add    esi,0x1000
c0012192:	55                   	push   ebp
c0012193:	e8 58 fe ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012198:	5a                   	pop    edx
c0012199:	59                   	pop    ecx
c001219a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001219c:	21 f9                	and    ecx,edi
c001219e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00121a2:	39 f3                	cmp    ebx,esi
c00121a4:	89 08                	mov    DWORD PTR [eax],ecx
c00121a6:	75 e3                	jne    c001218b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121a8:	5b                   	pop    ebx
c00121a9:	5e                   	pop    esi
c00121aa:	5f                   	pop    edi
c00121ab:	5d                   	pop    ebp
c00121ac:	c3                   	ret    
c00121ad:	90                   	nop

c00121ae <VAS::setToWriteCombining(unsigned long, int)>:
c00121ae:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00121b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121b9:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121c0:	75 01                	jne    c00121c3 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121c2:	c3                   	ret    
c00121c3:	68 80 00 00 00       	push   0x80
c00121c8:	6a ff                	push   0xffffffff
c00121ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d6:	e8 93 ff ff ff       	call   c001216e <VAS::reflagRange(unsigned long, int, int, int)>
c00121db:	83 c4 14             	add    esp,0x14
c00121de:	c3                   	ret    
c00121df:	90                   	nop

c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121e0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121e9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f0:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121f3:	19 c0                	sbb    eax,eax
c00121f5:	83 ca 03             	or     edx,0x3
c00121f8:	83 e0 fc             	and    eax,0xfffffffc
c00121fb:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012202:	0f 20 d8             	mov    eax,cr3
c0012205:	0f 22 d8             	mov    cr3,eax
c0012208:	c3                   	ret    
c0012209:	90                   	nop

c001220a <VAS::~VAS()>:
c001220a:	83 ec 2c             	sub    esp,0x2c
c001220d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012215:	e8 a8 bb 00 00       	call   c001ddc2 <lockScheduler()>
c001221a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001221f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012221:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012224:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001222a:	83 ec 04             	sub    esp,0x4
c001222d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012231:	6a 01                	push   0x1
c0012233:	50                   	push   eax
c0012234:	e8 a7 ff ff ff       	call   c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>
c0012239:	83 c4 10             	add    esp,0x10
c001223c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012244:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001224c:	0f 8f d7 00 00 00    	jg     c0012329 <VAS::~VAS()+0x11f>
c0012252:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012256:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012259:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001225d:	c1 e2 02             	shl    edx,0x2
c0012260:	01 d0                	add    eax,edx
c0012262:	8b 00                	mov    eax,DWORD PTR [eax]
c0012264:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001226c:	83 e0 01             	and    eax,0x1
c001226f:	0f 84 ab 00 00 00    	je     c0012320 <VAS::~VAS()+0x116>
c0012275:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001227d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012285:	7f 75                	jg     c00122fc <VAS::~VAS()+0xf2>
c0012287:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001228b:	c1 e0 0a             	shl    eax,0xa
c001228e:	89 c2                	mov    edx,eax
c0012290:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012294:	01 d0                	add    eax,edx
c0012296:	c1 e0 0c             	shl    eax,0xc
c0012299:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001229d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00122a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122a7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122ad:	83 ec 04             	sub    esp,0x4
c00122b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122b4:	6a 01                	push   0x1
c00122b6:	50                   	push   eax
c00122b7:	e8 08 fd ff ff       	call   c0011fc4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122bc:	83 c4 10             	add    esp,0x10
c00122bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00122c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d1:	25 01 04 00 00       	and    eax,0x401
c00122d6:	3d 01 04 00 00       	cmp    eax,0x401
c00122db:	75 19                	jne    c00122f6 <VAS::~VAS()+0xec>
c00122dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122e6:	83 ec 0c             	sub    esp,0xc
c00122e9:	50                   	push   eax
c00122ea:	e8 69 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00122ef:	83 c4 10             	add    esp,0x10
c00122f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122f6:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122fa:	eb 81                	jmp    c001227d <VAS::~VAS()+0x73>
c00122fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012300:	25 00 04 00 00       	and    eax,0x400
c0012305:	74 19                	je     c0012320 <VAS::~VAS()+0x116>
c0012307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001230b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012310:	83 ec 0c             	sub    esp,0xc
c0012313:	50                   	push   eax
c0012314:	e8 3f db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012319:	83 c4 10             	add    esp,0x10
c001231c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012320:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012324:	e9 1b ff ff ff       	jmp    c0012244 <VAS::~VAS()+0x3a>
c0012329:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012330:	83 ec 0c             	sub    esp,0xc
c0012333:	50                   	push   eax
c0012334:	e8 d6 fc ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0012339:	83 c4 10             	add    esp,0x10
c001233c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012340:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012343:	83 ec 0c             	sub    esp,0xc
c0012346:	50                   	push   eax
c0012347:	e8 0c db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001234c:	83 c4 10             	add    esp,0x10
c001234f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012357:	c1 e0 02             	shl    eax,0x2
c001235a:	83 ec 08             	sub    esp,0x8
c001235d:	50                   	push   eax
c001235e:	68 d0 a5 02 c0       	push   0xc002a5d0
c0012363:	e8 de 0b 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0012368:	83 c4 10             	add    esp,0x10
c001236b:	e8 54 ba 00 00       	call   c001ddc4 <unlockScheduler()>
c0012370:	90                   	nop
c0012371:	83 c4 2c             	add    esp,0x2c
c0012374:	c3                   	ret    
c0012375:	90                   	nop

c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012376:	55                   	push   ebp
c0012377:	57                   	push   edi
c0012378:	56                   	push   esi
c0012379:	53                   	push   ebx
c001237a:	83 ec 1c             	sub    esp,0x1c
c001237d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012381:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012385:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001238b:	77 08                	ja     c0012395 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001238d:	0f 20 d8             	mov    eax,cr3
c0012390:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012393:	75 47                	jne    c00123dc <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012395:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012399:	09 d8                	or     eax,ebx
c001239b:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a0:	75 57                	jne    c00123f9 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00123a2:	89 de                	mov    esi,ebx
c00123a4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123a7:	c1 ee 16             	shr    esi,0x16
c00123aa:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123b1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123b5:	74 54                	je     c001240b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123bb:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123c1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123c5:	c1 e6 0c             	shl    esi,0xc
c00123c8:	c1 eb 0a             	shr    ebx,0xa
c00123cb:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123d1:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123d4:	83 c4 1c             	add    esp,0x1c
c00123d7:	5b                   	pop    ebx
c00123d8:	5e                   	pop    esi
c00123d9:	5f                   	pop    edi
c00123da:	5d                   	pop    ebp
c00123db:	c3                   	ret    
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	68 f0 a5 02 c0       	push   0xc002a5f0
c00123e4:	e8 5d 0b 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00123e9:	83 c4 10             	add    esp,0x10
c00123ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123f0:	09 d8                	or     eax,ebx
c00123f2:	a9 ff 0f 00 00       	test   eax,0xfff
c00123f7:	74 a9                	je     c00123a2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123f9:	83 ec 0c             	sub    esp,0xc
c00123fc:	68 58 a6 02 c0       	push   0xc002a658
c0012401:	e8 e1 81 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0012406:	83 c4 10             	add    esp,0x10
c0012409:	eb 97                	jmp    c00123a2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001240b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001240f:	e8 ce da ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012414:	89 c5                	mov    ebp,eax
c0012416:	e8 1f fa ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c001241b:	83 ec 0c             	sub    esp,0xc
c001241e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012422:	6a 01                	push   0x1
c0012424:	e8 76 f7 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0012429:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012430:	6a 01                	push   0x1
c0012432:	50                   	push   eax
c0012433:	55                   	push   ebp
c0012434:	81 cd 07 04 00 00    	or     ebp,0x407
c001243a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001243e:	51                   	push   ecx
c001243f:	e8 26 02 00 00       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012444:	83 c4 1c             	add    esp,0x1c
c0012447:	68 00 10 00 00       	push   0x1000
c001244c:	6a 00                	push   0x0
c001244e:	50                   	push   eax
c001244f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012453:	e8 20 e3 fe ff       	call   c0000778 <memset>
c0012458:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001245c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001245f:	e8 ab fb ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0012464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012468:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001246b:	83 c4 10             	add    esp,0x10
c001246e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012471:	e9 41 ff ff ff       	jmp    c00123b7 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012476 <VAS::allocatePages(int, int)>:
c0012476:	55                   	push   ebp
c0012477:	57                   	push   edi
c0012478:	56                   	push   esi
c0012479:	53                   	push   ebx
c001247a:	83 ec 1c             	sub    esp,0x1c
c001247d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012481:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012486:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001248c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012492:	83 e0 01             	and    eax,0x1
c0012495:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012499:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001249d:	0f 85 cc 00 00 00    	jne    c001256f <VAS::allocatePages(int, int)+0xf9>
c00124a3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124aa:	85 c0                	test   eax,eax
c00124ac:	0f 84 a1 00 00 00    	je     c0012553 <VAS::allocatePages(int, int)+0xdd>
c00124b2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124ba:	c1 e6 0c             	shl    esi,0xc
c00124bd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124c1:	85 c0                	test   eax,eax
c00124c3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124c6:	7e 33                	jle    c00124fb <VAS::allocatePages(int, int)+0x85>
c00124c8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124cc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d0:	81 cd 00 04 00 00    	or     ebp,0x400
c00124d6:	e8 07 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124db:	55                   	push   ebp
c00124dc:	53                   	push   ebx
c00124dd:	50                   	push   eax
c00124de:	57                   	push   edi
c00124df:	e8 92 fe ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124e4:	83 c4 10             	add    esp,0x10
c00124e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ec:	74 03                	je     c00124f1 <VAS::allocatePages(int, int)+0x7b>
c00124ee:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124f1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124f7:	39 de                	cmp    esi,ebx
c00124f9:	75 db                	jne    c00124d6 <VAS::allocatePages(int, int)+0x60>
c00124fb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012500:	75 12                	jne    c0012514 <VAS::allocatePages(int, int)+0x9e>
c0012502:	0f 20 d8             	mov    eax,cr3
c0012505:	0f 22 d8             	mov    cr3,eax
c0012508:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001250c:	83 c4 1c             	add    esp,0x1c
c001250f:	5b                   	pop    ebx
c0012510:	5e                   	pop    esi
c0012511:	5f                   	pop    edi
c0012512:	5d                   	pop    ebp
c0012513:	c3                   	ret    
c0012514:	c1 ee 0a             	shr    esi,0xa
c0012517:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001251b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012521:	c1 eb 0a             	shr    ebx,0xa
c0012524:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001252a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012530:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012536:	39 c3                	cmp    ebx,eax
c0012538:	77 ce                	ja     c0012508 <VAS::allocatePages(int, int)+0x92>
c001253a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001253d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012543:	39 d8                	cmp    eax,ebx
c0012545:	73 f3                	jae    c001253a <VAS::allocatePages(int, int)+0xc4>
c0012547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001254b:	83 c4 1c             	add    esp,0x1c
c001254e:	5b                   	pop    ebx
c001254f:	5e                   	pop    esi
c0012550:	5f                   	pop    edi
c0012551:	5d                   	pop    ebp
c0012552:	c3                   	ret    
c0012553:	83 ec 0c             	sub    esp,0xc
c0012556:	68 7c a6 02 c0       	push   0xc002a67c
c001255b:	e8 87 80 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0012560:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012563:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012567:	83 c4 10             	add    esp,0x10
c001256a:	e9 43 ff ff ff       	jmp    c00124b2 <VAS::allocatePages(int, int)+0x3c>
c001256f:	83 ec 0c             	sub    esp,0xc
c0012572:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012576:	e8 24 f6 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c001257b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001257f:	83 c4 10             	add    esp,0x10
c0012582:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012587:	0f 87 9b 00 00 00    	ja     c0012628 <VAS::allocatePages(int, int)+0x1b2>
c001258d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012591:	85 d2                	test   edx,edx
c0012593:	7e 3c                	jle    c00125d1 <VAS::allocatePages(int, int)+0x15b>
c0012595:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012599:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001259d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125a1:	c1 e5 0c             	shl    ebp,0xc
c00125a4:	81 ce 00 04 00 00    	or     esi,0x400
c00125aa:	01 dd                	add    ebp,ebx
c00125ac:	e8 31 d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00125b1:	56                   	push   esi
c00125b2:	53                   	push   ebx
c00125b3:	50                   	push   eax
c00125b4:	57                   	push   edi
c00125b5:	e8 bc fd ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125ba:	83 c4 10             	add    esp,0x10
c00125bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c2:	74 03                	je     c00125c7 <VAS::allocatePages(int, int)+0x151>
c00125c4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125cd:	39 dd                	cmp    ebp,ebx
c00125cf:	75 db                	jne    c00125ac <VAS::allocatePages(int, int)+0x136>
c00125d1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125d6:	0f 84 26 ff ff ff    	je     c0012502 <VAS::allocatePages(int, int)+0x8c>
c00125dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125e4:	89 d3                	mov    ebx,edx
c00125e6:	c1 e0 0c             	shl    eax,0xc
c00125e9:	c1 eb 0a             	shr    ebx,0xa
c00125ec:	01 d0                	add    eax,edx
c00125ee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125f4:	c1 e8 0a             	shr    eax,0xa
c00125f7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012602:	2d 00 00 40 00       	sub    eax,0x400000
c0012607:	39 c3                	cmp    ebx,eax
c0012609:	0f 87 f9 fe ff ff    	ja     c0012508 <VAS::allocatePages(int, int)+0x92>
c001260f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012612:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012618:	39 d8                	cmp    eax,ebx
c001261a:	73 f3                	jae    c001260f <VAS::allocatePages(int, int)+0x199>
c001261c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012620:	83 c4 1c             	add    esp,0x1c
c0012623:	5b                   	pop    ebx
c0012624:	5e                   	pop    esi
c0012625:	5f                   	pop    edi
c0012626:	5d                   	pop    ebp
c0012627:	c3                   	ret    
c0012628:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001262d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012633:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001263a:	0f 84 4d ff ff ff    	je     c001258d <VAS::allocatePages(int, int)+0x117>
c0012640:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012648:	e9 40 ff ff ff       	jmp    c001258d <VAS::allocatePages(int, int)+0x117>
c001264d:	90                   	nop

c001264e <VAS::setCPUSpecific(unsigned long)>:
c001264e:	83 ec 0c             	sub    esp,0xc
c0012651:	6a 05                	push   0x5
c0012653:	68 00 00 40 c2       	push   0xc2400000
c0012658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001265c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012660:	e8 11 fd ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012665:	83 c4 1c             	add    esp,0x1c
c0012668:	c3                   	ret    
c0012669:	90                   	nop

c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001266a:	55                   	push   ebp
c001266b:	57                   	push   edi
c001266c:	56                   	push   esi
c001266d:	53                   	push   ebx
c001266e:	83 ec 1c             	sub    esp,0x1c
c0012671:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012676:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001267a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012680:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012684:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001268a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001268e:	83 e0 01             	and    eax,0x1
c0012691:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012695:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012699:	85 c0                	test   eax,eax
c001269b:	7e 39                	jle    c00126d6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001269d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126a1:	89 f3                	mov    ebx,esi
c00126a3:	c1 e0 0c             	shl    eax,0xc
c00126a6:	01 f0                	add    eax,esi
c00126a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126ac:	55                   	push   ebp
c00126ad:	53                   	push   ebx
c00126ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b2:	29 f0                	sub    eax,esi
c00126b4:	01 d8                	add    eax,ebx
c00126b6:	50                   	push   eax
c00126b7:	57                   	push   edi
c00126b8:	e8 b9 fc ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126bd:	83 c4 10             	add    esp,0x10
c00126c0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c5:	74 03                	je     c00126ca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126c7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126ca:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126d0:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126d4:	75 d6                	jne    c00126ac <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126d6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126db:	75 10                	jne    c00126ed <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126dd:	0f 20 d8             	mov    eax,cr3
c00126e0:	0f 22 d8             	mov    cr3,eax
c00126e3:	83 c4 1c             	add    esp,0x1c
c00126e6:	89 f0                	mov    eax,esi
c00126e8:	5b                   	pop    ebx
c00126e9:	5e                   	pop    esi
c00126ea:	5f                   	pop    edi
c00126eb:	5d                   	pop    ebp
c00126ec:	c3                   	ret    
c00126ed:	89 f3                	mov    ebx,esi
c00126ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126f3:	c1 eb 0a             	shr    ebx,0xa
c00126f6:	c1 e0 0c             	shl    eax,0xc
c00126f9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126ff:	01 f0                	add    eax,esi
c0012701:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012707:	c1 e8 0a             	shr    eax,0xa
c001270a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001270f:	2d 00 00 40 00       	sub    eax,0x400000
c0012714:	39 c3                	cmp    ebx,eax
c0012716:	77 cb                	ja     c00126e3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012718:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001271b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012721:	39 d8                	cmp    eax,ebx
c0012723:	73 f3                	jae    c0012718 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012725:	83 c4 1c             	add    esp,0x1c
c0012728:	89 f0                	mov    eax,esi
c001272a:	5b                   	pop    ebx
c001272b:	5e                   	pop    esi
c001272c:	5f                   	pop    edi
c001272d:	5d                   	pop    ebp
c001272e:	c3                   	ret    
c001272f:	90                   	nop

c0012730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012730:	55                   	push   ebp
c0012731:	57                   	push   edi
c0012732:	56                   	push   esi
c0012733:	53                   	push   ebx
c0012734:	83 ec 1c             	sub    esp,0x1c
c0012737:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001273b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001273f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012743:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012747:	a9 ff 0f 00 00       	test   eax,0xfff
c001274c:	75 4a                	jne    c0012798 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001274e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012752:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012755:	c1 eb 16             	shr    ebx,0x16
c0012758:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001275f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012763:	74 4d                	je     c00127b2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012765:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012769:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001276d:	c1 e8 0a             	shr    eax,0xa
c0012770:	80 fa 01             	cmp    dl,0x1
c0012773:	19 d2                	sbb    edx,edx
c0012775:	c1 e3 0c             	shl    ebx,0xc
c0012778:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001277c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012782:	25 fc 0f 00 00       	and    eax,0xffc
c0012787:	01 d8                	add    eax,ebx
c0012789:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012790:	83 c4 1c             	add    esp,0x1c
c0012793:	5b                   	pop    ebx
c0012794:	5e                   	pop    esi
c0012795:	5f                   	pop    edi
c0012796:	5d                   	pop    ebp
c0012797:	c3                   	ret    
c0012798:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001279c:	83 ec 0c             	sub    esp,0xc
c001279f:	68 a8 a6 02 c0       	push   0xc002a6a8
c00127a4:	e8 3e 7e 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c00127a9:	83 c4 10             	add    esp,0x10
c00127ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127b0:	eb 9c                	jmp    c001274e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127b6:	e8 27 d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127bb:	89 c5                	mov    ebp,eax
c00127bd:	e8 78 f6 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c00127c2:	83 ec 0c             	sub    esp,0xc
c00127c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127c9:	6a 01                	push   0x1
c00127cb:	e8 cf f3 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c00127d0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127d7:	6a 01                	push   0x1
c00127d9:	50                   	push   eax
c00127da:	55                   	push   ebp
c00127db:	81 cd 07 04 00 00    	or     ebp,0x407
c00127e1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127e5:	51                   	push   ecx
c00127e6:	e8 7f fe ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127eb:	83 c4 1c             	add    esp,0x1c
c00127ee:	68 00 10 00 00       	push   0x1000
c00127f3:	6a 00                	push   0x0
c00127f5:	50                   	push   eax
c00127f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127fa:	e8 79 df fe ff       	call   c0000778 <memset>
c00127ff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012803:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012806:	e8 04 f8 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c001280b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001280e:	83 c4 10             	add    esp,0x10
c0012811:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012814:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012818:	e9 48 ff ff ff       	jmp    c0012765 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001281d:	90                   	nop

c001281e <VAS::VAS(bool)>:
c001281e:	53                   	push   ebx
c001281f:	83 ec 28             	sub    esp,0x28
c0012822:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012826:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001282a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012835:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012839:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001283d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012840:	e8 9d d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012845:	89 c2                	mov    edx,eax
c0012847:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001284b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001284e:	e8 e7 f5 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0012853:	89 c3                	mov    ebx,eax
c0012855:	83 ec 0c             	sub    esp,0xc
c0012858:	6a 01                	push   0x1
c001285a:	e8 40 f3 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c001285f:	83 c4 10             	add    esp,0x10
c0012862:	89 c2                	mov    edx,eax
c0012864:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012868:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001286b:	83 ec 0c             	sub    esp,0xc
c001286e:	6a 03                	push   0x3
c0012870:	6a 01                	push   0x1
c0012872:	52                   	push   edx
c0012873:	50                   	push   eax
c0012874:	53                   	push   ebx
c0012875:	e8 f0 fd ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001287a:	83 c4 20             	add    esp,0x20
c001287d:	89 c2                	mov    edx,eax
c001287f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012883:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012886:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001288e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012896:	7f 1c                	jg     c00128b4 <VAS::VAS(bool)+0x96>
c0012898:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001289c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001289f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128a3:	c1 e2 02             	shl    edx,0x2
c00128a6:	01 d0                	add    eax,edx
c00128a8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128ae:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128b2:	eb da                	jmp    c001288e <VAS::VAS(bool)+0x70>
c00128b4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128bc:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128c4:	7f 7a                	jg     c0012940 <VAS::VAS(bool)+0x122>
c00128c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128ca:	2d 00 02 00 00       	sub    eax,0x200
c00128cf:	c1 e0 0c             	shl    eax,0xc
c00128d2:	83 c8 03             	or     eax,0x3
c00128d5:	89 c2                	mov    edx,eax
c00128d7:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00128dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128e8:	83 e0 10             	and    eax,0x10
c00128eb:	84 c0                	test   al,al
c00128ed:	74 07                	je     c00128f6 <VAS::VAS(bool)+0xd8>
c00128ef:	b8 00 01 00 00       	mov    eax,0x100
c00128f4:	eb 05                	jmp    c00128fb <VAS::VAS(bool)+0xdd>
c00128f6:	b8 00 00 00 00       	mov    eax,0x0
c00128fb:	09 d0                	or     eax,edx
c00128fd:	89 c1                	mov    ecx,eax
c00128ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012903:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012906:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001290a:	c1 e2 02             	shl    edx,0x2
c001290d:	01 d0                	add    eax,edx
c001290f:	89 ca                	mov    edx,ecx
c0012911:	89 10                	mov    DWORD PTR [eax],edx
c0012913:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012917:	2d 40 03 00 00       	sub    eax,0x340
c001291c:	83 f8 7f             	cmp    eax,0x7f
c001291f:	77 16                	ja     c0012937 <VAS::VAS(bool)+0x119>
c0012921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012925:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012928:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001292c:	c1 e2 02             	shl    edx,0x2
c001292f:	01 d0                	add    eax,edx
c0012931:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012937:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001293b:	e9 7c ff ff ff       	jmp    c00128bc <VAS::VAS(bool)+0x9e>
c0012940:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012945:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012951:	83 e0 10             	and    eax,0x10
c0012954:	84 c0                	test   al,al
c0012956:	74 07                	je     c001295f <VAS::VAS(bool)+0x141>
c0012958:	b8 03 41 00 00       	mov    eax,0x4103
c001295d:	eb 05                	jmp    c0012964 <VAS::VAS(bool)+0x146>
c001295f:	b8 03 40 00 00       	mov    eax,0x4003
c0012964:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012968:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001296b:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012971:	89 02                	mov    DWORD PTR [edx],eax
c0012973:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012978:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001297e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012984:	83 ec 08             	sub    esp,0x8
c0012987:	50                   	push   eax
c0012988:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001298c:	e8 bd fc ff ff       	call   c001264e <VAS::setCPUSpecific(unsigned long)>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012998:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001299b:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00129a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129a6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129ac:	83 e0 10             	and    eax,0x10
c00129af:	84 c0                	test   al,al
c00129b1:	74 07                	je     c00129ba <VAS::VAS(bool)+0x19c>
c00129b3:	b8 00 01 00 00       	mov    eax,0x100
c00129b8:	eb 05                	jmp    c00129bf <VAS::VAS(bool)+0x1a1>
c00129ba:	b8 00 00 00 00       	mov    eax,0x0
c00129bf:	09 c2                	or     edx,eax
c00129c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129c8:	05 fc 0f 00 00       	add    eax,0xffc
c00129cd:	83 ca 03             	or     edx,0x3
c00129d0:	89 10                	mov    DWORD PTR [eax],edx
c00129d2:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00129d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129dd:	83 ec 0c             	sub    esp,0xc
c00129e0:	50                   	push   eax
c00129e1:	e8 72 1c 00 00       	call   c0014658 <Device::getName()>
c00129e6:	83 c4 10             	add    esp,0x10
c00129e9:	83 ec 08             	sub    esp,0x8
c00129ec:	68 d9 a7 02 c0       	push   0xc002a7d9
c00129f1:	50                   	push   eax
c00129f2:	e8 c9 de fe ff       	call   c00008c0 <strcmp>
c00129f7:	83 c4 10             	add    esp,0x10
c00129fa:	85 c0                	test   eax,eax
c00129fc:	0f 94 c0             	sete   al
c00129ff:	84 c0                	test   al,al
c0012a01:	74 70                	je     c0012a73 <VAS::VAS(bool)+0x255>
c0012a03:	e8 9d b3 00 00       	call   c001dda5 <disableIRQs()>
c0012a08:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012a0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a13:	05 7c 09 00 00       	add    eax,0x97c
c0012a18:	83 ec 0c             	sub    esp,0xc
c0012a1b:	50                   	push   eax
c0012a1c:	e8 9b c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a21:	83 c4 10             	add    esp,0x10
c0012a24:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a29:	89 c3                	mov    ebx,eax
c0012a2b:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012a30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a36:	05 7c 09 00 00       	add    eax,0x97c
c0012a3b:	83 ec 0c             	sub    esp,0xc
c0012a3e:	50                   	push   eax
c0012a3f:	e8 78 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a44:	83 c4 10             	add    esp,0x10
c0012a47:	83 ec 08             	sub    esp,0x8
c0012a4a:	50                   	push   eax
c0012a4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a4f:	e8 9c f5 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012a54:	83 c4 10             	add    esp,0x10
c0012a57:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a59:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a5e:	6a 11                	push   0x11
c0012a60:	53                   	push   ebx
c0012a61:	50                   	push   eax
c0012a62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a66:	e8 0b f9 ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a6b:	83 c4 10             	add    esp,0x10
c0012a6e:	e8 40 b3 00 00       	call   c001ddb3 <enableIRQs()>
c0012a73:	90                   	nop
c0012a74:	83 c4 28             	add    esp,0x28
c0012a77:	5b                   	pop    ebx
c0012a78:	c3                   	ret    
c0012a79:	90                   	nop

c0012a7a <VAS::evict(unsigned long)>:
c0012a7a:	55                   	push   ebp
c0012a7b:	57                   	push   edi
c0012a7c:	56                   	push   esi
c0012a7d:	53                   	push   ebx
c0012a7e:	83 ec 1c             	sub    esp,0x1c
c0012a81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a85:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a8d:	e8 30 b3 00 00       	call   c001ddc2 <lockScheduler()>
c0012a92:	e8 49 f2 ff ff       	call   c0011ce0 <Virt::allocateSwapfilePage()>
c0012a97:	8b 0d 2c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d32c
c0012a9d:	89 c7                	mov    edi,eax
c0012a9f:	85 c9                	test   ecx,ecx
c0012aa1:	7e 3d                	jle    c0012ae0 <VAS::evict(unsigned long)+0x66>
c0012aa3:	89 ee                	mov    esi,ebp
c0012aa5:	31 db                	xor    ebx,ebx
c0012aa7:	83 ec 0c             	sub    esp,0xc
c0012aaa:	57                   	push   edi
c0012aab:	e8 1e f2 ff ff       	call   c0011cce <Virt::swapIDToSector(unsigned long)>
c0012ab0:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ab3:	01 d8                	add    eax,ebx
c0012ab5:	6a 01                	push   0x1
c0012ab7:	31 d2                	xor    edx,edx
c0012ab9:	43                   	inc    ebx
c0012aba:	52                   	push   edx
c0012abb:	81 c6 00 02 00 00    	add    esi,0x200
c0012ac1:	50                   	push   eax
c0012ac2:	0f be 05 38 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d338
c0012ac9:	ff 34 85 bc e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1744]
c0012ad0:	e8 ed 3c 00 00       	call   c00167c2 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ad5:	83 c4 20             	add    esp,0x20
c0012ad8:	39 1d 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,ebx
c0012ade:	7f c7                	jg     c0012aa7 <VAS::evict(unsigned long)+0x2d>
c0012ae0:	83 ec 08             	sub    esp,0x8
c0012ae3:	c1 e7 0b             	shl    edi,0xb
c0012ae6:	55                   	push   ebp
c0012ae7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012aeb:	e8 00 f5 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012af0:	89 c3                	mov    ebx,eax
c0012af2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012af4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012af9:	89 04 24             	mov    DWORD PTR [esp],eax
c0012afc:	e8 57 d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012b01:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b03:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b09:	09 d7                	or     edi,edx
c0012b0b:	89 3b                	mov    DWORD PTR [ebx],edi
c0012b0d:	ff 05 04 e5 02 c0    	inc    DWORD PTR ds:0xc002e504
c0012b13:	0f 20 d8             	mov    eax,cr3
c0012b16:	0f 22 d8             	mov    cr3,eax
c0012b19:	58                   	pop    eax
c0012b1a:	5a                   	pop    edx
c0012b1b:	55                   	push   ebp
c0012b1c:	68 e7 a7 02 c0       	push   0xc002a7e7
c0012b21:	e8 20 04 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0012b26:	83 c4 2c             	add    esp,0x2c
c0012b29:	5b                   	pop    ebx
c0012b2a:	5e                   	pop    esi
c0012b2b:	5f                   	pop    edi
c0012b2c:	5d                   	pop    ebp
c0012b2d:	e9 92 b2 00 00       	jmp    c001ddc4 <unlockScheduler()>

c0012b32 <VAS::scanForEviction(int, int)>:
c0012b32:	55                   	push   ebp
c0012b33:	57                   	push   edi
c0012b34:	31 ff                	xor    edi,edi
c0012b36:	56                   	push   esi
c0012b37:	be 00 00 40 00       	mov    esi,0x400000
c0012b3c:	53                   	push   ebx
c0012b3d:	83 ec 1c             	sub    esp,0x1c
c0012b40:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0012b44:	ff 05 10 e5 02 c0    	inc    DWORD PTR ds:0xc002e510
c0012b4a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b52:	eb 13                	jmp    c0012b67 <VAS::scanForEviction(int, int)+0x35>
c0012b54:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012b59:	81 c6 00 00 40 00    	add    esi,0x400000
c0012b5f:	81 fe 00 00 40 c0    	cmp    esi,0xc0400000
c0012b65:	74 65                	je     c0012bcc <VAS::scanForEviction(int, int)+0x9a>
c0012b67:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012b6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b6e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012b72:	74 e0                	je     c0012b54 <VAS::scanForEviction(int, int)+0x22>
c0012b74:	8d ae 00 00 c0 ff    	lea    ebp,[esi-0x400000]
c0012b7a:	eb 0a                	jmp    c0012b86 <VAS::scanForEviction(int, int)+0x54>
c0012b7c:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012b82:	39 ee                	cmp    esi,ebp
c0012b84:	74 ce                	je     c0012b54 <VAS::scanForEviction(int, int)+0x22>
c0012b86:	55                   	push   ebp
c0012b87:	53                   	push   ebx
c0012b88:	e8 63 f4 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012b8d:	5a                   	pop    edx
c0012b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b90:	59                   	pop    ecx
c0012b91:	89 c1                	mov    ecx,eax
c0012b93:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012b99:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012b9f:	75 db                	jne    c0012b7c <VAS::scanForEviction(int, int)+0x4a>
c0012ba1:	a8 01                	test   al,0x1
c0012ba3:	74 d7                	je     c0012b7c <VAS::scanForEviction(int, int)+0x4a>
c0012ba5:	83 ec 08             	sub    esp,0x8
c0012ba8:	47                   	inc    edi
c0012ba9:	55                   	push   ebp
c0012baa:	53                   	push   ebx
c0012bab:	e8 ca fe ff ff       	call   c0012a7a <VAS::evict(unsigned long)>
c0012bb0:	83 c4 10             	add    esp,0x10
c0012bb3:	3b 7c 24 38          	cmp    edi,DWORD PTR [esp+0x38]
c0012bb7:	74 13                	je     c0012bcc <VAS::scanForEviction(int, int)+0x9a>
c0012bb9:	83 ec 08             	sub    esp,0x8
c0012bbc:	57                   	push   edi
c0012bbd:	68 f8 a7 02 c0       	push   0xc002a7f8
c0012bc2:	e8 7f 03 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0012bc7:	83 c4 10             	add    esp,0x10
c0012bca:	eb b0                	jmp    c0012b7c <VAS::scanForEviction(int, int)+0x4a>
c0012bcc:	83 c4 1c             	add    esp,0x1c
c0012bcf:	5b                   	pop    ebx
c0012bd0:	5e                   	pop    esi
c0012bd1:	5f                   	pop    edi
c0012bd2:	5d                   	pop    ebp
c0012bd3:	c3                   	ret    

c0012bd4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012bd4:	55                   	push   ebp
c0012bd5:	57                   	push   edi
c0012bd6:	56                   	push   esi
c0012bd7:	53                   	push   ebx
c0012bd8:	83 ec 0c             	sub    esp,0xc
c0012bdb:	e8 e2 b1 00 00       	call   c001ddc2 <lockScheduler()>
c0012be0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012be4:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012bea:	74 33                	je     c0012c1f <VAS::tryLoadBackOffDisk(unsigned long)+0x4b>
c0012bec:	83 ec 08             	sub    esp,0x8
c0012bef:	56                   	push   esi
c0012bf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012bf4:	e8 f7 f3 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012bf9:	83 c4 10             	add    esp,0x10
c0012bfc:	89 c3                	mov    ebx,eax
c0012bfe:	85 c0                	test   eax,eax
c0012c00:	74 0e                	je     c0012c10 <VAS::tryLoadBackOffDisk(unsigned long)+0x3c>
c0012c02:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c04:	25 01 04 00 00       	and    eax,0x401
c0012c09:	3d 00 04 00 00       	cmp    eax,0x400
c0012c0e:	74 19                	je     c0012c29 <VAS::tryLoadBackOffDisk(unsigned long)+0x55>
c0012c10:	e8 af b1 00 00       	call   c001ddc4 <unlockScheduler()>
c0012c15:	31 c0                	xor    eax,eax
c0012c17:	83 c4 0c             	add    esp,0xc
c0012c1a:	5b                   	pop    ebx
c0012c1b:	5e                   	pop    esi
c0012c1c:	5f                   	pop    edi
c0012c1d:	5d                   	pop    ebp
c0012c1e:	c3                   	ret    
c0012c1f:	83 c4 0c             	add    esp,0xc
c0012c22:	31 c0                	xor    eax,eax
c0012c24:	5b                   	pop    ebx
c0012c25:	5e                   	pop    esi
c0012c26:	5f                   	pop    edi
c0012c27:	5d                   	pop    ebp
c0012c28:	c3                   	ret    
c0012c29:	83 ec 08             	sub    esp,0x8
c0012c2c:	56                   	push   esi
c0012c2d:	68 02 a8 02 c0       	push   0xc002a802
c0012c32:	e8 0f 03 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0012c37:	c6 05 c0 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3c0,0x1
c0012c3e:	8b 2b                	mov    ebp,DWORD PTR [ebx]
c0012c40:	e8 9d d2 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012c45:	c1 ed 0b             	shr    ebp,0xb
c0012c48:	c6 05 c0 e3 02 c0 00 	mov    BYTE PTR ds:0xc002e3c0,0x0
c0012c4f:	83 c4 10             	add    esp,0x10
c0012c52:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012c54:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012c5a:	09 c2                	or     edx,eax
c0012c5c:	81 ca 01 08 00 00    	or     edx,0x801
c0012c62:	89 13                	mov    DWORD PTR [ebx],edx
c0012c64:	8b 15 2c d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d32c
c0012c6a:	85 d2                	test   edx,edx
c0012c6c:	7e 3d                	jle    c0012cab <VAS::tryLoadBackOffDisk(unsigned long)+0xd7>
c0012c6e:	89 f7                	mov    edi,esi
c0012c70:	31 db                	xor    ebx,ebx
c0012c72:	83 ec 0c             	sub    esp,0xc
c0012c75:	55                   	push   ebp
c0012c76:	e8 53 f0 ff ff       	call   c0011cce <Virt::swapIDToSector(unsigned long)>
c0012c7b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c7e:	01 d8                	add    eax,ebx
c0012c80:	6a 01                	push   0x1
c0012c82:	31 d2                	xor    edx,edx
c0012c84:	43                   	inc    ebx
c0012c85:	52                   	push   edx
c0012c86:	81 c7 00 02 00 00    	add    edi,0x200
c0012c8c:	50                   	push   eax
c0012c8d:	0f be 05 38 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d338
c0012c94:	ff 34 85 bc e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1744]
c0012c9b:	e8 b6 3a 00 00       	call   c0016756 <LogicalDisk::read(unsigned long long, int, void*)>
c0012ca0:	83 c4 20             	add    esp,0x20
c0012ca3:	39 1d 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,ebx
c0012ca9:	7f c7                	jg     c0012c72 <VAS::tryLoadBackOffDisk(unsigned long)+0x9e>
c0012cab:	83 ec 0c             	sub    esp,0xc
c0012cae:	ff 0d 04 e5 02 c0    	dec    DWORD PTR ds:0xc002e504
c0012cb4:	55                   	push   ebp
c0012cb5:	e8 f6 ef ff ff       	call   c0011cb0 <Virt::freeSwapfilePage(unsigned long)>
c0012cba:	e8 05 b1 00 00       	call   c001ddc4 <unlockScheduler()>
c0012cbf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012cc3:	83 c4 10             	add    esp,0x10
c0012cc6:	25 ff 0f 00 00       	and    eax,0xfff
c0012ccb:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012cd0:	77 1d                	ja     c0012cef <VAS::tryLoadBackOffDisk(unsigned long)+0x11b>
c0012cd2:	a1 14 e5 02 c0       	mov    eax,ds:0xc002e514
c0012cd7:	40                   	inc    eax
c0012cd8:	a3 14 e5 02 c0       	mov    ds:0xc002e514,eax
c0012cdd:	83 f8 02             	cmp    eax,0x2
c0012ce0:	74 25                	je     c0012d07 <VAS::tryLoadBackOffDisk(unsigned long)+0x133>
c0012ce2:	0f 20 d8             	mov    eax,cr3
c0012ce5:	0f 22 d8             	mov    cr3,eax
c0012ce8:	b0 01                	mov    al,0x1
c0012cea:	e9 28 ff ff ff       	jmp    c0012c17 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0012cef:	83 ec 08             	sub    esp,0x8
c0012cf2:	81 c6 00 10 00 00    	add    esi,0x1000
c0012cf8:	56                   	push   esi
c0012cf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012cfd:	e8 d2 fe ff ff       	call   c0012bd4 <VAS::tryLoadBackOffDisk(unsigned long)>
c0012d02:	83 c4 10             	add    esp,0x10
c0012d05:	eb cb                	jmp    c0012cd2 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c0012d07:	50                   	push   eax
c0012d08:	6a 01                	push   0x1
c0012d0a:	6a 01                	push   0x1
c0012d0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012d10:	e8 1d fe ff ff       	call   c0012b32 <VAS::scanForEviction(int, int)>
c0012d15:	c7 05 14 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e514,0x0
c0012d1f:	83 c4 10             	add    esp,0x10
c0012d22:	eb be                	jmp    c0012ce2 <VAS::tryLoadBackOffDisk(unsigned long)+0x10e>

c0012d24 <mapVASFirstTime>:
c0012d24:	55                   	push   ebp
c0012d25:	57                   	push   edi
c0012d26:	56                   	push   esi
c0012d27:	53                   	push   ebx
c0012d28:	83 ec 0c             	sub    esp,0xc
c0012d2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d30:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012d33:	4a                   	dec    edx
c0012d34:	0f 84 8e 00 00 00    	je     c0012dc8 <mapVASFirstTime+0xa4>
c0012d3a:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d3d:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d40:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d45:	c1 e5 15             	shl    ebp,0x15
c0012d48:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d4d:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d53:	29 eb                	sub    ebx,ebp
c0012d55:	29 ee                	sub    esi,ebp
c0012d57:	e8 86 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	68 03 04 00 00       	push   0x403
c0012d64:	6a 01                	push   0x1
c0012d66:	53                   	push   ebx
c0012d67:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d6d:	50                   	push   eax
c0012d6e:	57                   	push   edi
c0012d6f:	e8 f6 f8 ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d74:	83 c4 20             	add    esp,0x20
c0012d77:	39 f3                	cmp    ebx,esi
c0012d79:	75 dc                	jne    c0012d57 <mapVASFirstTime+0x33>
c0012d7b:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d80:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d85:	29 ee                	sub    esi,ebp
c0012d87:	29 e8                	sub    eax,ebp
c0012d89:	89 c5                	mov    ebp,eax
c0012d8b:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d8f:	19 db                	sbb    ebx,ebx
c0012d91:	e8 4c d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d96:	83 e3 04             	and    ebx,0x4
c0012d99:	83 ec 0c             	sub    esp,0xc
c0012d9c:	81 c3 03 04 00 00    	add    ebx,0x403
c0012da2:	53                   	push   ebx
c0012da3:	6a 01                	push   0x1
c0012da5:	56                   	push   esi
c0012da6:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012dac:	50                   	push   eax
c0012dad:	57                   	push   edi
c0012dae:	e8 b7 f8 ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012db3:	83 c4 20             	add    esp,0x20
c0012db6:	39 f5                	cmp    ebp,esi
c0012db8:	75 d1                	jne    c0012d8b <mapVASFirstTime+0x67>
c0012dba:	0f 20 d8             	mov    eax,cr3
c0012dbd:	0f 22 d8             	mov    cr3,eax
c0012dc0:	83 c4 0c             	add    esp,0xc
c0012dc3:	5b                   	pop    ebx
c0012dc4:	5e                   	pop    esi
c0012dc5:	5f                   	pop    edi
c0012dc6:	5d                   	pop    ebp
c0012dc7:	c3                   	ret    
c0012dc8:	83 ec 0c             	sub    esp,0xc
c0012dcb:	68 13 a8 02 c0       	push   0xc002a813
c0012dd0:	e8 71 01 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0012dd5:	83 c4 10             	add    esp,0x10
c0012dd8:	83 c4 0c             	add    esp,0xc
c0012ddb:	5b                   	pop    ebx
c0012ddc:	5e                   	pop    esi
c0012ddd:	5f                   	pop    edi
c0012dde:	5d                   	pop    ebp
c0012ddf:	c3                   	ret    

c0012de0 <__cxa_atexit>:
c0012de0:	31 c0                	xor    eax,eax
c0012de2:	c3                   	ret    

c0012de3 <__cxa_finalize>:
c0012de3:	c3                   	ret    

c0012de4 <__stack_chk_fail>:
c0012de4:	55                   	push   ebp
c0012de5:	89 e5                	mov    ebp,esp
c0012de7:	83 ec 14             	sub    esp,0x14
c0012dea:	68 2c a8 02 c0       	push   0xc002a82c
c0012def:	e8 52 01 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0012df4:	58                   	pop    eax
c0012df5:	5a                   	pop    edx
c0012df6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012df9:	68 7c a8 02 c0       	push   0xc002a87c
c0012dfe:	e8 43 01 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0012e03:	59                   	pop    ecx
c0012e04:	58                   	pop    eax
c0012e05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e08:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e0b:	68 7c a8 02 c0       	push   0xc002a87c
c0012e10:	e8 31 01 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0012e15:	5a                   	pop    edx
c0012e16:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e19:	59                   	pop    ecx
c0012e1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e1c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e1f:	68 7c a8 02 c0       	push   0xc002a87c
c0012e24:	e8 1d 01 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0012e29:	5a                   	pop    edx
c0012e2a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e2d:	59                   	pop    ecx
c0012e2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e30:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e32:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e35:	68 7c a8 02 c0       	push   0xc002a87c
c0012e3a:	e8 07 01 00 00       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0012e3f:	c7 04 24 84 a8 02 c0 	mov    DWORD PTR [esp],0xc002a884
c0012e46:	e8 9c 77 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0012e4b:	83 c4 10             	add    esp,0x10
c0012e4e:	c9                   	leave  
c0012e4f:	c3                   	ret    

c0012e50 <__cxa_pure_virtual>:
c0012e50:	83 ec 18             	sub    esp,0x18
c0012e53:	68 9c a8 02 c0       	push   0xc002a89c
c0012e58:	e8 8a 77 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0012e5d:	83 c4 1c             	add    esp,0x1c
c0012e60:	c3                   	ret    

c0012e61 <operator new[](unsigned long)>:
c0012e61:	e9 da c9 ff ff       	jmp    c000f840 <malloc>

c0012e66 <operator delete(void*, unsigned long)>:
c0012e66:	e9 f5 c9 ff ff       	jmp    c000f860 <rfree>

c0012e6b <operator delete[](void*)>:
c0012e6b:	e9 f0 c9 ff ff       	jmp    c000f860 <rfree>

c0012e70 <operator delete[](void*, unsigned long)>:
c0012e70:	e9 eb c9 ff ff       	jmp    c000f860 <rfree>

c0012e75 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e75:	57                   	push   edi
c0012e76:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e7b:	56                   	push   esi
c0012e7c:	be b0 a8 02 c0       	mov    esi,0xc002a8b0
c0012e81:	53                   	push   ebx
c0012e82:	83 ec 40             	sub    esp,0x40
c0012e85:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e89:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e8d:	fc                   	cld    
c0012e8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e90:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e94:	83 f9 3e             	cmp    ecx,0x3e
c0012e97:	7e 05                	jle    c0012e9e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e99:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e9e:	89 df                	mov    edi,ebx
c0012ea0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012ea4:	eb 02                	jmp    c0012ea8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012ea6:	89 c7                	mov    edi,eax
c0012ea8:	31 d2                	xor    edx,edx
c0012eaa:	46                   	inc    esi
c0012eab:	89 f8                	mov    eax,edi
c0012ead:	f7 f1                	div    ecx
c0012eaf:	39 cf                	cmp    edi,ecx
c0012eb1:	73 f3                	jae    c0012ea6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012eb3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012eb6:	eb 02                	jmp    c0012eba <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012eb8:	89 c3                	mov    ebx,eax
c0012eba:	31 d2                	xor    edx,edx
c0012ebc:	4e                   	dec    esi
c0012ebd:	89 d8                	mov    eax,ebx
c0012ebf:	f7 f1                	div    ecx
c0012ec1:	39 cb                	cmp    ebx,ecx
c0012ec3:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012ec7:	88 16                	mov    BYTE PTR [esi],dl
c0012ec9:	73 ed                	jae    c0012eb8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012ecb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ecf:	83 c4 40             	add    esp,0x40
c0012ed2:	5b                   	pop    ebx
c0012ed3:	5e                   	pop    esi
c0012ed4:	5f                   	pop    edi
c0012ed5:	c3                   	ret    

c0012ed6 <Dbg::logc(char)>:
c0012ed6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012eda:	ba fd 03 00 00       	mov    edx,0x3fd
c0012edf:	ec                   	in     al,dx
c0012ee0:	a8 20                	test   al,0x20
c0012ee2:	74 fb                	je     c0012edf <Dbg::logc(char)+0x9>
c0012ee4:	ba f8 03 00 00       	mov    edx,0x3f8
c0012ee9:	88 c8                	mov    al,cl
c0012eeb:	ee                   	out    dx,al
c0012eec:	c3                   	ret    

c0012eed <Dbg::logs(char*)>:
c0012eed:	53                   	push   ebx
c0012eee:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012ef2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ef5:	84 c0                	test   al,al
c0012ef7:	74 0f                	je     c0012f08 <Dbg::logs(char*)+0x1b>
c0012ef9:	50                   	push   eax
c0012efa:	43                   	inc    ebx
c0012efb:	e8 d6 ff ff ff       	call   c0012ed6 <Dbg::logc(char)>
c0012f00:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f03:	5a                   	pop    edx
c0012f04:	84 c0                	test   al,al
c0012f06:	75 f1                	jne    c0012ef9 <Dbg::logs(char*)+0xc>
c0012f08:	5b                   	pop    ebx
c0012f09:	c3                   	ret    

c0012f0a <Dbg::logWriteInt(unsigned int)>:
c0012f0a:	83 ec 10             	sub    esp,0x10
c0012f0d:	6a 0a                	push   0xa
c0012f0f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f13:	50                   	push   eax
c0012f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f18:	e8 58 ff ff ff       	call   c0012e75 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f1d:	50                   	push   eax
c0012f1e:	e8 ca ff ff ff       	call   c0012eed <Dbg::logs(char*)>
c0012f23:	83 c4 20             	add    esp,0x20
c0012f26:	c3                   	ret    

c0012f27 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012f27:	83 ec 10             	sub    esp,0x10
c0012f2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f2e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f32:	50                   	push   eax
c0012f33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f37:	e8 39 ff ff ff       	call   c0012e75 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f3c:	50                   	push   eax
c0012f3d:	e8 ab ff ff ff       	call   c0012eed <Dbg::logs(char*)>
c0012f42:	83 c4 20             	add    esp,0x20
c0012f45:	c3                   	ret    

c0012f46 <Dbg::kprintf(char const*, ...)>:
c0012f46:	55                   	push   ebp
c0012f47:	57                   	push   edi
c0012f48:	56                   	push   esi
c0012f49:	53                   	push   ebx
c0012f4a:	83 ec 0c             	sub    esp,0xc
c0012f4d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f51:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f5c:	84 c0                	test   al,al
c0012f5e:	74 4a                	je     c0012faa <Dbg::kprintf(char const*, ...)+0x64>
c0012f60:	31 db                	xor    ebx,ebx
c0012f62:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f65:	3c 25                	cmp    al,0x25
c0012f67:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f6a:	0f 85 e4 00 00 00    	jne    c0013054 <Dbg::kprintf(char const*, ...)+0x10e>
c0012f70:	83 c3 02             	add    ebx,0x2
c0012f73:	8a 07                	mov    al,BYTE PTR [edi]
c0012f75:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f78:	83 e8 25             	sub    eax,0x25
c0012f7b:	3c 53                	cmp    al,0x53
c0012f7d:	0f 87 ba 00 00 00    	ja     c001303d <Dbg::kprintf(char const*, ...)+0xf7>
c0012f83:	0f b6 c0             	movzx  eax,al
c0012f86:	ff 24 85 f0 a8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5710]
c0012f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f91:	89 c8                	mov    eax,ecx
c0012f93:	83 c1 04             	add    ecx,0x4
c0012f96:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f9a:	ff 30                	push   DWORD PTR [eax]
c0012f9c:	e8 4c ff ff ff       	call   c0012eed <Dbg::logs(char*)>
c0012fa1:	58                   	pop    eax
c0012fa2:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012fa6:	84 c0                	test   al,al
c0012fa8:	75 b8                	jne    c0012f62 <Dbg::kprintf(char const*, ...)+0x1c>
c0012faa:	83 c4 0c             	add    esp,0xc
c0012fad:	5b                   	pop    ebx
c0012fae:	5e                   	pop    esi
c0012faf:	5f                   	pop    edi
c0012fb0:	5d                   	pop    ebp
c0012fb1:	c3                   	ret    
c0012fb2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fb6:	89 d0                	mov    eax,edx
c0012fb8:	83 c2 04             	add    edx,0x4
c0012fbb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fbf:	ff 30                	push   DWORD PTR [eax]
c0012fc1:	e8 44 ff ff ff       	call   c0012f0a <Dbg::logWriteInt(unsigned int)>
c0012fc6:	58                   	pop    eax
c0012fc7:	eb d9                	jmp    c0012fa2 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fc9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fcd:	89 d0                	mov    eax,edx
c0012fcf:	83 c2 04             	add    edx,0x4
c0012fd2:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012fd5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fd9:	50                   	push   eax
c0012fda:	e8 f7 fe ff ff       	call   c0012ed6 <Dbg::logc(char)>
c0012fdf:	58                   	pop    eax
c0012fe0:	eb c0                	jmp    c0012fa2 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fe2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fe6:	89 c8                	mov    eax,ecx
c0012fe8:	83 c1 04             	add    ecx,0x4
c0012feb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fef:	ff 30                	push   DWORD PTR [eax]
c0012ff1:	e8 14 ff ff ff       	call   c0012f0a <Dbg::logWriteInt(unsigned int)>
c0012ff6:	5f                   	pop    edi
c0012ff7:	eb a9                	jmp    c0012fa2 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ff9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ffd:	89 c8                	mov    eax,ecx
c0012fff:	83 c1 04             	add    ecx,0x4
c0013002:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013006:	6a 10                	push   0x10
c0013008:	ff 30                	push   DWORD PTR [eax]
c001300a:	e8 18 ff ff ff       	call   c0012f27 <Dbg::logWriteIntBase(unsigned int, int)>
c001300f:	59                   	pop    ecx
c0013010:	5f                   	pop    edi
c0013011:	eb 8f                	jmp    c0012fa2 <Dbg::kprintf(char const*, ...)+0x5c>
c0013013:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013017:	89 d0                	mov    eax,edx
c0013019:	83 c2 08             	add    edx,0x8
c001301c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013020:	6a 10                	push   0x10
c0013022:	ff 30                	push   DWORD PTR [eax]
c0013024:	e8 fe fe ff ff       	call   c0012f27 <Dbg::logWriteIntBase(unsigned int, int)>
c0013029:	58                   	pop    eax
c001302a:	5a                   	pop    edx
c001302b:	e9 72 ff ff ff       	jmp    c0012fa2 <Dbg::kprintf(char const*, ...)+0x5c>
c0013030:	6a 25                	push   0x25
c0013032:	e8 9f fe ff ff       	call   c0012ed6 <Dbg::logc(char)>
c0013037:	58                   	pop    eax
c0013038:	e9 65 ff ff ff       	jmp    c0012fa2 <Dbg::kprintf(char const*, ...)+0x5c>
c001303d:	6a 25                	push   0x25
c001303f:	e8 92 fe ff ff       	call   c0012ed6 <Dbg::logc(char)>
c0013044:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0013047:	50                   	push   eax
c0013048:	e8 89 fe ff ff       	call   c0012ed6 <Dbg::logc(char)>
c001304d:	5a                   	pop    edx
c001304e:	59                   	pop    ecx
c001304f:	e9 4e ff ff ff       	jmp    c0012fa2 <Dbg::kprintf(char const*, ...)+0x5c>
c0013054:	50                   	push   eax
c0013055:	89 eb                	mov    ebx,ebp
c0013057:	e8 7a fe ff ff       	call   c0012ed6 <Dbg::logc(char)>
c001305c:	89 fd                	mov    ebp,edi
c001305e:	58                   	pop    eax
c001305f:	e9 3e ff ff ff       	jmp    c0012fa2 <Dbg::kprintf(char const*, ...)+0x5c>

c0013064 <File::read(unsigned long long, void*, int*)>:
c0013064:	53                   	push   ebx
c0013065:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013069:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001306d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013074:	3c 19                	cmp    al,0x19
c0013076:	77 35                	ja     c00130ad <File::read(unsigned long long, void*, int*)+0x49>
c0013078:	8b 04 85 c0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1640]
c001307f:	85 c0                	test   eax,eax
c0013081:	74 2a                	je     c00130ad <File::read(unsigned long long, void*, int*)+0x49>
c0013083:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013089:	85 c0                	test   eax,eax
c001308b:	74 20                	je     c00130ad <File::read(unsigned long long, void*, int*)+0x49>
c001308d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013091:	74 21                	je     c00130b4 <File::read(unsigned long long, void*, int*)+0x50>
c0013093:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013095:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013099:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001309f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130a7:	5b                   	pop    ebx
c00130a8:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00130ab:	ff e0                	jmp    eax
c00130ad:	b8 0b 00 00 00       	mov    eax,0xb
c00130b2:	eb 05                	jmp    c00130b9 <File::read(unsigned long long, void*, int*)+0x55>
c00130b4:	b8 05 00 00 00       	mov    eax,0x5
c00130b9:	5b                   	pop    ebx
c00130ba:	c3                   	ret    
c00130bb:	90                   	nop

c00130bc <File::write(unsigned long long, void*, int*)>:
c00130bc:	53                   	push   ebx
c00130bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130c5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130cc:	3c 19                	cmp    al,0x19
c00130ce:	77 35                	ja     c0013105 <File::write(unsigned long long, void*, int*)+0x49>
c00130d0:	8b 04 85 c0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1640]
c00130d7:	85 c0                	test   eax,eax
c00130d9:	74 2a                	je     c0013105 <File::write(unsigned long long, void*, int*)+0x49>
c00130db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130e1:	85 c0                	test   eax,eax
c00130e3:	74 20                	je     c0013105 <File::write(unsigned long long, void*, int*)+0x49>
c00130e5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130e9:	74 21                	je     c001310c <File::write(unsigned long long, void*, int*)+0x50>
c00130eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130f1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130ff:	5b                   	pop    ebx
c0013100:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013103:	ff e0                	jmp    eax
c0013105:	b8 0b 00 00 00       	mov    eax,0xb
c001310a:	eb 05                	jmp    c0013111 <File::write(unsigned long long, void*, int*)+0x55>
c001310c:	b8 05 00 00 00       	mov    eax,0x5
c0013111:	5b                   	pop    ebx
c0013112:	c3                   	ret    
c0013113:	90                   	nop

c0013114 <Directory::read(unsigned long long, void*, int*)>:
c0013114:	53                   	push   ebx
c0013115:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013119:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001311d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013124:	3c 19                	cmp    al,0x19
c0013126:	77 35                	ja     c001315d <Directory::read(unsigned long long, void*, int*)+0x49>
c0013128:	8b 04 85 c0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1640]
c001312f:	85 c0                	test   eax,eax
c0013131:	74 2a                	je     c001315d <Directory::read(unsigned long long, void*, int*)+0x49>
c0013133:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013139:	85 c0                	test   eax,eax
c001313b:	74 20                	je     c001315d <Directory::read(unsigned long long, void*, int*)+0x49>
c001313d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013141:	74 21                	je     c0013164 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013143:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013145:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013149:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001314f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013153:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013157:	5b                   	pop    ebx
c0013158:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001315b:	ff e0                	jmp    eax
c001315d:	b8 0b 00 00 00       	mov    eax,0xb
c0013162:	eb 05                	jmp    c0013169 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013164:	b8 05 00 00 00       	mov    eax,0x5
c0013169:	5b                   	pop    ebx
c001316a:	c3                   	ret    
c001316b:	90                   	nop

c001316c <Directory::write(unsigned long long, void*, int*)>:
c001316c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013170:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013177:	b8 0b 00 00 00       	mov    eax,0xb
c001317c:	80 fa 19             	cmp    dl,0x19
c001317f:	77 18                	ja     c0013199 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013181:	8b 14 95 c0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1640]
c0013188:	85 d2                	test   edx,edx
c001318a:	74 0d                	je     c0013199 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001318c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013193:	19 c0                	sbb    eax,eax
c0013195:	83 e0 0a             	and    eax,0xa
c0013198:	40                   	inc    eax
c0013199:	c3                   	ret    

c001319a <File::isAtty()>:
c001319a:	31 c0                	xor    eax,eax
c001319c:	c3                   	ret    
c001319d:	90                   	nop

c001319e <Directory::isAtty()>:
c001319e:	31 c0                	xor    eax,eax
c00131a0:	c3                   	ret    
c00131a1:	90                   	nop

c00131a2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00131a2:	b8 0a 00 00 00       	mov    eax,0xa
c00131a7:	c3                   	ret    

c00131a8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00131a8:	b8 0a 00 00 00       	mov    eax,0xa
c00131ad:	c3                   	ret    

c00131ae <File::~File()>:
c00131ae:	83 ec 0c             	sub    esp,0xc
c00131b1:	ba ac aa 02 c0       	mov    edx,0xc002aaac
c00131b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ba:	89 10                	mov    DWORD PTR [eax],edx
c00131bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c0:	83 ec 0c             	sub    esp,0xc
c00131c3:	50                   	push   eax
c00131c4:	e8 75 e7 ff ff       	call   c001193e <UnixFile::~UnixFile()>
c00131c9:	83 c4 10             	add    esp,0x10
c00131cc:	90                   	nop
c00131cd:	83 c4 0c             	add    esp,0xc
c00131d0:	c3                   	ret    
c00131d1:	90                   	nop

c00131d2 <File::~File()>:
c00131d2:	83 ec 0c             	sub    esp,0xc
c00131d5:	83 ec 0c             	sub    esp,0xc
c00131d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131dc:	e8 cd ff ff ff       	call   c00131ae <File::~File()>
c00131e1:	83 c4 10             	add    esp,0x10
c00131e4:	83 ec 08             	sub    esp,0x8
c00131e7:	68 14 01 00 00       	push   0x114
c00131ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131f0:	e8 71 fc ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c00131f5:	83 c4 10             	add    esp,0x10
c00131f8:	83 c4 0c             	add    esp,0xc
c00131fb:	c3                   	ret    

c00131fc <Directory::~Directory()>:
c00131fc:	83 ec 0c             	sub    esp,0xc
c00131ff:	ba c8 aa 02 c0       	mov    edx,0xc002aac8
c0013204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013208:	89 10                	mov    DWORD PTR [eax],edx
c001320a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001320e:	83 ec 0c             	sub    esp,0xc
c0013211:	50                   	push   eax
c0013212:	e8 27 e7 ff ff       	call   c001193e <UnixFile::~UnixFile()>
c0013217:	83 c4 10             	add    esp,0x10
c001321a:	90                   	nop
c001321b:	83 c4 0c             	add    esp,0xc
c001321e:	c3                   	ret    
c001321f:	90                   	nop

c0013220 <Directory::~Directory()>:
c0013220:	83 ec 0c             	sub    esp,0xc
c0013223:	83 ec 0c             	sub    esp,0xc
c0013226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001322a:	e8 cd ff ff ff       	call   c00131fc <Directory::~Directory()>
c001322f:	83 c4 10             	add    esp,0x10
c0013232:	83 ec 08             	sub    esp,0x8
c0013235:	68 14 01 00 00       	push   0x114
c001323a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001323e:	e8 23 fc ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0013243:	83 c4 10             	add    esp,0x10
c0013246:	83 c4 0c             	add    esp,0xc
c0013249:	c3                   	ret    

c001324a <Filesystem::Filesystem()>:
c001324a:	ba 48 aa 02 c0       	mov    edx,0xc002aa48
c001324f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013253:	89 10                	mov    DWORD PTR [eax],edx
c0013255:	8b 15 18 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e518
c001325b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001325f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013266:	a3 18 e5 02 c0       	mov    ds:0xc002e518,eax
c001326b:	90                   	nop
c001326c:	c3                   	ret    
c001326d:	90                   	nop

c001326e <Filesystem::~Filesystem()>:
c001326e:	ba 48 aa 02 c0       	mov    edx,0xc002aa48
c0013273:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013277:	89 10                	mov    DWORD PTR [eax],edx
c0013279:	90                   	nop
c001327a:	c3                   	ret    
c001327b:	90                   	nop

c001327c <Filesystem::~Filesystem()>:
c001327c:	83 ec 0c             	sub    esp,0xc
c001327f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013283:	e8 e6 ff ff ff       	call   c001326e <Filesystem::~Filesystem()>
c0013288:	83 c4 04             	add    esp,0x4
c001328b:	83 ec 08             	sub    esp,0x8
c001328e:	6a 08                	push   0x8
c0013290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013294:	e8 cd fb ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0013299:	83 c4 10             	add    esp,0x10
c001329c:	83 c4 0c             	add    esp,0xc
c001329f:	c3                   	ret    

c00132a0 <Fs::getcwd(Process*, char*, int)>:
c00132a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00132a4:	31 c0                	xor    eax,eax
c00132a6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00132a9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00132ad:	7d 15                	jge    c00132c4 <Fs::getcwd(Process*, char*, int)+0x24>
c00132af:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00132b3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00132ba:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00132bd:	84 c9                	test   cl,cl
c00132bf:	74 06                	je     c00132c7 <Fs::getcwd(Process*, char*, int)+0x27>
c00132c1:	40                   	inc    eax
c00132c2:	eb e2                	jmp    c00132a6 <Fs::getcwd(Process*, char*, int)+0x6>
c00132c4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00132c7:	31 c0                	xor    eax,eax
c00132c9:	c3                   	ret    

c00132ca <Fs::initVFS()>:
c00132ca:	83 ec 18             	sub    esp,0x18
c00132cd:	6a 08                	push   0x8
c00132cf:	e8 6c c5 ff ff       	call   c000f840 <malloc>
c00132d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00132d7:	e8 5a dc 00 00       	call   c0020f36 <FAT::FAT()>
c00132dc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00132e3:	e8 58 c5 ff ff       	call   c000f840 <malloc>
c00132e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00132eb:	e8 9e ee 00 00       	call   c002218e <ISO9660::ISO9660()>
c00132f0:	83 c4 1c             	add    esp,0x1c
c00132f3:	c3                   	ret    

c00132f4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00132f4:	55                   	push   ebp
c00132f5:	57                   	push   edi
c00132f6:	56                   	push   esi
c00132f7:	53                   	push   ebx
c00132f8:	81 ec 10 04 00 00    	sub    esp,0x410
c00132fe:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013305:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001330c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013313:	68 00 04 00 00       	push   0x400
c0013318:	6a 00                	push   0x0
c001331a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001331e:	56                   	push   esi
c001331f:	e8 54 d4 fe ff       	call   c0000778 <memset>
c0013324:	83 c4 10             	add    esp,0x10
c0013327:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001332b:	75 0b                	jne    c0013338 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001332d:	50                   	push   eax
c001332e:	50                   	push   eax
c001332f:	57                   	push   edi
c0013330:	56                   	push   esi
c0013331:	e8 fe d4 fe ff       	call   c0000834 <strcpy>
c0013336:	eb 41                	jmp    c0013379 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013338:	8a 07                	mov    al,BYTE PTR [edi]
c001333a:	3c 5c                	cmp    al,0x5c
c001333c:	74 04                	je     c0013342 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001333e:	3c 2f                	cmp    al,0x2f
c0013340:	75 18                	jne    c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013342:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013345:	3c 60                	cmp    al,0x60
c0013347:	7e 03                	jle    c001334c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013349:	83 e8 20             	sub    eax,0x20
c001334c:	88 04 24             	mov    BYTE PTR [esp],al
c001334f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013356:	50                   	push   eax
c0013357:	50                   	push   eax
c0013358:	eb 18                	jmp    c0013372 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001335a:	50                   	push   eax
c001335b:	50                   	push   eax
c001335c:	55                   	push   ebp
c001335d:	56                   	push   esi
c001335e:	e8 d1 d4 fe ff       	call   c0000834 <strcpy>
c0013363:	5a                   	pop    edx
c0013364:	59                   	pop    ecx
c0013365:	68 61 c1 02 c0       	push   0xc002c161
c001336a:	56                   	push   esi
c001336b:	e8 04 d6 fe ff       	call   c0000974 <strcat>
c0013370:	5d                   	pop    ebp
c0013371:	58                   	pop    eax
c0013372:	57                   	push   edi
c0013373:	56                   	push   esi
c0013374:	e8 fb d5 fe ff       	call   c0000974 <strcat>
c0013379:	83 c4 10             	add    esp,0x10
c001337c:	8a 04 24             	mov    al,BYTE PTR [esp]
c001337f:	3c 60                	cmp    al,0x60
c0013381:	7e 03                	jle    c0013386 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013383:	83 e8 20             	sub    eax,0x20
c0013386:	88 04 24             	mov    BYTE PTR [esp],al
c0013389:	88 03                	mov    BYTE PTR [ebx],al
c001338b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013392:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013398:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001339c:	bf 03 00 00 00       	mov    edi,0x3
c00133a1:	b8 03 00 00 00       	mov    eax,0x3
c00133a6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00133a9:	84 d2                	test   dl,dl
c00133ab:	0f 84 91 00 00 00    	je     c0013442 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00133b1:	8d 4f 01             	lea    ecx,[edi+0x1]
c00133b4:	80 fa 5c             	cmp    dl,0x5c
c00133b7:	74 05                	je     c00133be <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00133b9:	80 fa 2f             	cmp    dl,0x2f
c00133bc:	75 12                	jne    c00133d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133be:	89 c5                	mov    ebp,eax
c00133c0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133c5:	74 09                	je     c00133d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133c7:	40                   	inc    eax
c00133c8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00133cc:	89 cf                	mov    edi,ecx
c00133ce:	eb d6                	jmp    c00133a6 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00133d0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00133d5:	75 5b                	jne    c0013432 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133d7:	80 fa 2e             	cmp    dl,0x2e
c00133da:	75 56                	jne    c0013432 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133dc:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00133e0:	74 19                	je     c00133fb <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00133e2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133e7:	74 53                	je     c001343c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133e9:	89 f9                	mov    ecx,edi
c00133eb:	41                   	inc    ecx
c00133ec:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133ef:	80 fa 2f             	cmp    dl,0x2f
c00133f2:	74 f7                	je     c00133eb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133f4:	80 fa 5c             	cmp    dl,0x5c
c00133f7:	74 f2                	je     c00133eb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133f9:	eb d1                	jmp    c00133cc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133fb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013400:	74 3a                	je     c001343c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013402:	83 f8 03             	cmp    eax,0x3
c0013405:	74 c5                	je     c00133cc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013407:	41                   	inc    ecx
c0013408:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001340b:	80 fa 2f             	cmp    dl,0x2f
c001340e:	74 f7                	je     c0013407 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013410:	80 fa 5c             	cmp    dl,0x5c
c0013413:	74 f2                	je     c0013407 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013415:	48                   	dec    eax
c0013416:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001341a:	75 06                	jne    c0013422 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001341c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013420:	eb f3                	jmp    c0013415 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013422:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013426:	74 07                	je     c001342f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013428:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001342c:	48                   	dec    eax
c001342d:	eb f3                	jmp    c0013422 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001342f:	40                   	inc    eax
c0013430:	eb 9a                	jmp    c00133cc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013432:	80 fa 2f             	cmp    dl,0x2f
c0013435:	74 95                	je     c00133cc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013437:	80 fa 5c             	cmp    dl,0x5c
c001343a:	74 90                	je     c00133cc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001343c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001343f:	40                   	inc    eax
c0013440:	eb 8a                	jmp    c00133cc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013442:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013446:	83 ec 0c             	sub    esp,0xc
c0013449:	53                   	push   ebx
c001344a:	e8 45 d3 fe ff       	call   c0000794 <strlen>
c001344f:	83 c4 10             	add    esp,0x10
c0013452:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013457:	75 26                	jne    c001347f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013459:	83 ec 0c             	sub    esp,0xc
c001345c:	53                   	push   ebx
c001345d:	e8 32 d3 fe ff       	call   c0000794 <strlen>
c0013462:	83 c4 10             	add    esp,0x10
c0013465:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001346a:	74 26                	je     c0013492 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001346c:	83 ec 0c             	sub    esp,0xc
c001346f:	53                   	push   ebx
c0013470:	e8 1f d3 fe ff       	call   c0000794 <strlen>
c0013475:	83 c4 10             	add    esp,0x10
c0013478:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001347d:	eb c7                	jmp    c0013446 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001347f:	83 ec 0c             	sub    esp,0xc
c0013482:	53                   	push   ebx
c0013483:	e8 0c d3 fe ff       	call   c0000794 <strlen>
c0013488:	83 c4 10             	add    esp,0x10
c001348b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013490:	74 c7                	je     c0013459 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013492:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013498:	5b                   	pop    ebx
c0013499:	5e                   	pop    esi
c001349a:	5f                   	pop    edi
c001349b:	5d                   	pop    ebp
c001349c:	c3                   	ret    
c001349d:	90                   	nop

c001349e <File::File(char const*, Process*)>:
c001349e:	83 ec 0c             	sub    esp,0xc
c00134a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a5:	83 ec 08             	sub    esp,0x8
c00134a8:	6a 00                	push   0x0
c00134aa:	50                   	push   eax
c00134ab:	e8 ac e2 ff ff       	call   c001175c <UnixFile::UnixFile(int)>
c00134b0:	83 c4 10             	add    esp,0x10
c00134b3:	ba ac aa 02 c0       	mov    edx,0xc002aaac
c00134b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134bc:	89 10                	mov    DWORD PTR [eax],edx
c00134be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134c2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134cc:	83 c0 0d             	add    eax,0xd
c00134cf:	83 ec 04             	sub    esp,0x4
c00134d2:	52                   	push   edx
c00134d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134d7:	50                   	push   eax
c00134d8:	e8 17 fe ff ff       	call   c00132f4 <Fs::standardiseFiles(char*, char const*, char const*)>
c00134dd:	83 c4 10             	add    esp,0x10
c00134e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00134e7:	8d 50 bf             	lea    edx,[eax-0x41]
c00134ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ee:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00134f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00134fc:	90                   	nop
c00134fd:	83 c4 0c             	add    esp,0xc
c0013500:	c3                   	ret    
c0013501:	90                   	nop

c0013502 <File::open(FileOpenMode)>:
c0013502:	53                   	push   ebx
c0013503:	b8 0b 00 00 00       	mov    eax,0xb
c0013508:	83 ec 08             	sub    esp,0x8
c001350b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001350f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013516:	80 fa 19             	cmp    dl,0x19
c0013519:	77 40                	ja     c001355b <File::open(FileOpenMode)+0x59>
c001351b:	8b 14 95 c0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1640]
c0013522:	85 d2                	test   edx,edx
c0013524:	74 35                	je     c001355b <File::open(FileOpenMode)+0x59>
c0013526:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001352c:	85 d2                	test   edx,edx
c001352e:	74 2b                	je     c001355b <File::open(FileOpenMode)+0x59>
c0013530:	b8 06 00 00 00       	mov    eax,0x6
c0013535:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013539:	75 20                	jne    c001355b <File::open(FileOpenMode)+0x59>
c001353b:	8b 02                	mov    eax,DWORD PTR [edx]
c001353d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013543:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013547:	51                   	push   ecx
c0013548:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001354b:	51                   	push   ecx
c001354c:	52                   	push   edx
c001354d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013550:	83 c4 10             	add    esp,0x10
c0013553:	85 c0                	test   eax,eax
c0013555:	75 04                	jne    c001355b <File::open(FileOpenMode)+0x59>
c0013557:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001355b:	83 c4 08             	add    esp,0x8
c001355e:	5b                   	pop    ebx
c001355f:	c3                   	ret    

c0013560 <File::close()>:
c0013560:	53                   	push   ebx
c0013561:	b8 0b 00 00 00       	mov    eax,0xb
c0013566:	83 ec 08             	sub    esp,0x8
c0013569:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001356d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013574:	80 fa 19             	cmp    dl,0x19
c0013577:	77 41                	ja     c00135ba <File::close()+0x5a>
c0013579:	8b 1c 95 c0 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1640]
c0013580:	85 db                	test   ebx,ebx
c0013582:	74 36                	je     c00135ba <File::close()+0x5a>
c0013584:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001358b:	74 2d                	je     c00135ba <File::close()+0x5a>
c001358d:	b8 05 00 00 00       	mov    eax,0x5
c0013592:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013596:	74 22                	je     c00135ba <File::close()+0x5a>
c0013598:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001359c:	8b 04 95 c0 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1640]
c00135a3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00135a9:	53                   	push   ebx
c00135aa:	53                   	push   ebx
c00135ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00135ad:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135b3:	50                   	push   eax
c00135b4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00135b7:	83 c4 10             	add    esp,0x10
c00135ba:	83 c4 08             	add    esp,0x8
c00135bd:	5b                   	pop    ebx
c00135be:	c3                   	ret    
c00135bf:	90                   	nop

c00135c0 <File::seek(unsigned long long)>:
c00135c0:	56                   	push   esi
c00135c1:	53                   	push   ebx
c00135c2:	b8 0b 00 00 00       	mov    eax,0xb
c00135c7:	51                   	push   ecx
c00135c8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00135d0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00135d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135db:	80 fa 19             	cmp    dl,0x19
c00135de:	77 31                	ja     c0013611 <File::seek(unsigned long long)+0x51>
c00135e0:	8b 14 95 c0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1640]
c00135e7:	85 d2                	test   edx,edx
c00135e9:	74 26                	je     c0013611 <File::seek(unsigned long long)+0x51>
c00135eb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135f1:	85 d2                	test   edx,edx
c00135f3:	74 1c                	je     c0013611 <File::seek(unsigned long long)+0x51>
c00135f5:	b8 05 00 00 00       	mov    eax,0x5
c00135fa:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00135fe:	74 11                	je     c0013611 <File::seek(unsigned long long)+0x51>
c0013600:	8b 02                	mov    eax,DWORD PTR [edx]
c0013602:	53                   	push   ebx
c0013603:	51                   	push   ecx
c0013604:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001360a:	52                   	push   edx
c001360b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001360e:	83 c4 10             	add    esp,0x10
c0013611:	5a                   	pop    edx
c0013612:	5b                   	pop    ebx
c0013613:	5e                   	pop    esi
c0013614:	c3                   	ret    
c0013615:	90                   	nop

c0013616 <File::tell(unsigned long long*)>:
c0013616:	83 ec 0c             	sub    esp,0xc
c0013619:	b8 0b 00 00 00       	mov    eax,0xb
c001361e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013622:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013629:	80 fa 19             	cmp    dl,0x19
c001362c:	77 34                	ja     c0013662 <File::tell(unsigned long long*)+0x4c>
c001362e:	8b 14 95 c0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1640]
c0013635:	85 d2                	test   edx,edx
c0013637:	74 29                	je     c0013662 <File::tell(unsigned long long*)+0x4c>
c0013639:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001363f:	85 d2                	test   edx,edx
c0013641:	74 1f                	je     c0013662 <File::tell(unsigned long long*)+0x4c>
c0013643:	b8 05 00 00 00       	mov    eax,0x5
c0013648:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001364c:	74 14                	je     c0013662 <File::tell(unsigned long long*)+0x4c>
c001364e:	50                   	push   eax
c001364f:	8b 02                	mov    eax,DWORD PTR [edx]
c0013651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013655:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001365b:	52                   	push   edx
c001365c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001365f:	83 c4 10             	add    esp,0x10
c0013662:	83 c4 0c             	add    esp,0xc
c0013665:	c3                   	ret    

c0013666 <File::rewind()>:
c0013666:	83 ec 10             	sub    esp,0x10
c0013669:	6a 00                	push   0x0
c001366b:	6a 00                	push   0x0
c001366d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013671:	e8 4a ff ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c0013676:	83 c4 1c             	add    esp,0x1c
c0013679:	c3                   	ret    

c001367a <File::unlink()>:
c001367a:	83 ec 0c             	sub    esp,0xc
c001367d:	b8 0b 00 00 00       	mov    eax,0xb
c0013682:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013686:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001368d:	80 f9 19             	cmp    cl,0x19
c0013690:	77 2f                	ja     c00136c1 <File::unlink()+0x47>
c0013692:	8b 0c 8d c0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1640]
c0013699:	85 c9                	test   ecx,ecx
c001369b:	74 24                	je     c00136c1 <File::unlink()+0x47>
c001369d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136a3:	85 c9                	test   ecx,ecx
c00136a5:	74 1a                	je     c00136c1 <File::unlink()+0x47>
c00136a7:	b8 06 00 00 00       	mov    eax,0x6
c00136ac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136b0:	75 0f                	jne    c00136c1 <File::unlink()+0x47>
c00136b2:	83 c2 0d             	add    edx,0xd
c00136b5:	50                   	push   eax
c00136b6:	50                   	push   eax
c00136b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136b9:	52                   	push   edx
c00136ba:	51                   	push   ecx
c00136bb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00136be:	83 c4 10             	add    esp,0x10
c00136c1:	83 c4 0c             	add    esp,0xc
c00136c4:	c3                   	ret    
c00136c5:	90                   	nop

c00136c6 <File::rename(char const*)>:
c00136c6:	83 ec 0c             	sub    esp,0xc
c00136c9:	b8 0b 00 00 00       	mov    eax,0xb
c00136ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136d9:	80 f9 19             	cmp    cl,0x19
c00136dc:	77 32                	ja     c0013710 <File::rename(char const*)+0x4a>
c00136de:	8b 0c 8d c0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1640]
c00136e5:	85 c9                	test   ecx,ecx
c00136e7:	74 27                	je     c0013710 <File::rename(char const*)+0x4a>
c00136e9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136ef:	85 c9                	test   ecx,ecx
c00136f1:	74 1d                	je     c0013710 <File::rename(char const*)+0x4a>
c00136f3:	b8 06 00 00 00       	mov    eax,0x6
c00136f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136fc:	75 12                	jne    c0013710 <File::rename(char const*)+0x4a>
c00136fe:	83 c2 0d             	add    edx,0xd
c0013701:	50                   	push   eax
c0013702:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013704:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013708:	52                   	push   edx
c0013709:	51                   	push   ecx
c001370a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001370d:	83 c4 10             	add    esp,0x10
c0013710:	83 c4 0c             	add    esp,0xc
c0013713:	c3                   	ret    

c0013714 <File::chfatattr(unsigned char, unsigned char)>:
c0013714:	57                   	push   edi
c0013715:	b8 0b 00 00 00       	mov    eax,0xb
c001371a:	56                   	push   esi
c001371b:	53                   	push   ebx
c001371c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013720:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013724:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001372b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001372f:	80 f9 19             	cmp    cl,0x19
c0013732:	77 37                	ja     c001376b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013734:	8b 0c 8d c0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1640]
c001373b:	85 c9                	test   ecx,ecx
c001373d:	74 2c                	je     c001376b <File::chfatattr(unsigned char, unsigned char)+0x57>
c001373f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013745:	85 c9                	test   ecx,ecx
c0013747:	74 22                	je     c001376b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013749:	b8 06 00 00 00       	mov    eax,0x6
c001374e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013752:	75 17                	jne    c001376b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013754:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013756:	89 f0                	mov    eax,esi
c0013758:	83 c2 0d             	add    edx,0xd
c001375b:	0f b6 f0             	movzx  esi,al
c001375e:	0f b6 db             	movzx  ebx,bl
c0013761:	56                   	push   esi
c0013762:	53                   	push   ebx
c0013763:	52                   	push   edx
c0013764:	51                   	push   ecx
c0013765:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013768:	83 c4 10             	add    esp,0x10
c001376b:	5b                   	pop    ebx
c001376c:	5e                   	pop    esi
c001376d:	5f                   	pop    edi
c001376e:	c3                   	ret    
c001376f:	90                   	nop

c0013770 <File::exists()>:
c0013770:	83 ec 0c             	sub    esp,0xc
c0013773:	31 c0                	xor    eax,eax
c0013775:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013779:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013780:	80 f9 19             	cmp    cl,0x19
c0013783:	77 24                	ja     c00137a9 <File::exists()+0x39>
c0013785:	8b 0c 8d c0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1640]
c001378c:	85 c9                	test   ecx,ecx
c001378e:	74 19                	je     c00137a9 <File::exists()+0x39>
c0013790:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013796:	85 c9                	test   ecx,ecx
c0013798:	74 0f                	je     c00137a9 <File::exists()+0x39>
c001379a:	83 c2 0d             	add    edx,0xd
c001379d:	50                   	push   eax
c001379e:	50                   	push   eax
c001379f:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137a1:	52                   	push   edx
c00137a2:	51                   	push   ecx
c00137a3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00137a6:	83 c4 10             	add    esp,0x10
c00137a9:	83 c4 0c             	add    esp,0xc
c00137ac:	c3                   	ret    
c00137ad:	90                   	nop

c00137ae <File::stat(unsigned long long*, bool*)>:
c00137ae:	56                   	push   esi
c00137af:	53                   	push   ebx
c00137b0:	50                   	push   eax
c00137b1:	b8 0b 00 00 00       	mov    eax,0xb
c00137b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137ba:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137be:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137c5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137c9:	80 f9 19             	cmp    cl,0x19
c00137cc:	77 3d                	ja     c001380b <File::stat(unsigned long long*, bool*)+0x5d>
c00137ce:	8b 0c 8d c0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1640]
c00137d5:	85 c9                	test   ecx,ecx
c00137d7:	74 32                	je     c001380b <File::stat(unsigned long long*, bool*)+0x5d>
c00137d9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137df:	85 c9                	test   ecx,ecx
c00137e1:	74 28                	je     c001380b <File::stat(unsigned long long*, bool*)+0x5d>
c00137e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137e5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137e9:	74 13                	je     c00137fe <File::stat(unsigned long long*, bool*)+0x50>
c00137eb:	83 ec 04             	sub    esp,0x4
c00137ee:	56                   	push   esi
c00137ef:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00137f5:	51                   	push   ecx
c00137f6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00137f9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00137fc:	eb 0a                	jmp    c0013808 <File::stat(unsigned long long*, bool*)+0x5a>
c00137fe:	53                   	push   ebx
c00137ff:	83 c2 0d             	add    edx,0xd
c0013802:	56                   	push   esi
c0013803:	52                   	push   edx
c0013804:	51                   	push   ecx
c0013805:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013808:	83 c4 10             	add    esp,0x10
c001380b:	5a                   	pop    edx
c001380c:	5b                   	pop    ebx
c001380d:	5e                   	pop    esi
c001380e:	c3                   	ret    

c001380f <Fs::setcwd(Process*, char*)>:
c001380f:	55                   	push   ebp
c0013810:	57                   	push   edi
c0013811:	56                   	push   esi
c0013812:	53                   	push   ebx
c0013813:	81 ec 20 02 00 00    	sub    esp,0x220
c0013819:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013820:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013826:	57                   	push   edi
c0013827:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001382e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013832:	56                   	push   esi
c0013833:	e8 bc fa ff ff       	call   c00132f4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013838:	89 34 24             	mov    DWORD PTR [esp],esi
c001383b:	e8 54 cf fe ff       	call   c0000794 <strlen>
c0013840:	83 c4 10             	add    esp,0x10
c0013843:	83 f8 02             	cmp    eax,0x2
c0013846:	77 17                	ja     c001385f <Fs::setcwd(Process*, char*)+0x50>
c0013848:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001384d:	83 e8 41             	sub    eax,0x41
c0013850:	83 f8 19             	cmp    eax,0x19
c0013853:	76 24                	jbe    c0013879 <Fs::setcwd(Process*, char*)+0x6a>
c0013855:	b8 03 00 00 00       	mov    eax,0x3
c001385a:	e9 e0 00 00 00       	jmp    c001393f <Fs::setcwd(Process*, char*)+0x130>
c001385f:	83 ec 0c             	sub    esp,0xc
c0013862:	56                   	push   esi
c0013863:	e8 2c cf fe ff       	call   c0000794 <strlen>
c0013868:	83 c4 10             	add    esp,0x10
c001386b:	83 f8 03             	cmp    eax,0x3
c001386e:	75 34                	jne    c00138a4 <Fs::setcwd(Process*, char*)+0x95>
c0013870:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013875:	75 2d                	jne    c00138a4 <Fs::setcwd(Process*, char*)+0x95>
c0013877:	eb cf                	jmp    c0013848 <Fs::setcwd(Process*, char*)+0x39>
c0013879:	8b 14 85 c0 e9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1640]
c0013880:	b8 05 00 00 00       	mov    eax,0x5
c0013885:	85 d2                	test   edx,edx
c0013887:	0f 84 b2 00 00 00    	je     c001393f <Fs::setcwd(Process*, char*)+0x130>
c001388d:	b8 06 00 00 00       	mov    eax,0x6
c0013892:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013899:	0f 85 92 00 00 00    	jne    c0013931 <Fs::setcwd(Process*, char*)+0x122>
c001389f:	e9 9b 00 00 00       	jmp    c001393f <Fs::setcwd(Process*, char*)+0x130>
c00138a4:	83 ec 0c             	sub    esp,0xc
c00138a7:	68 14 01 00 00       	push   0x114
c00138ac:	e8 8f bf ff ff       	call   c000f840 <malloc>
c00138b1:	83 c4 0c             	add    esp,0xc
c00138b4:	89 c3                	mov    ebx,eax
c00138b6:	55                   	push   ebp
c00138b7:	56                   	push   esi
c00138b8:	50                   	push   eax
c00138b9:	e8 e0 fb ff ff       	call   c001349e <File::File(char const*, Process*)>
c00138be:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00138c3:	83 c4 0c             	add    esp,0xc
c00138c6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00138ca:	50                   	push   eax
c00138cb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138cf:	50                   	push   eax
c00138d0:	53                   	push   ebx
c00138d1:	e8 d8 fe ff ff       	call   c00137ae <File::stat(unsigned long long*, bool*)>
c00138d6:	83 c4 10             	add    esp,0x10
c00138d9:	83 f8 02             	cmp    eax,0x2
c00138dc:	74 04                	je     c00138e2 <Fs::setcwd(Process*, char*)+0xd3>
c00138de:	85 c0                	test   eax,eax
c00138e0:	74 1c                	je     c00138fe <Fs::setcwd(Process*, char*)+0xef>
c00138e2:	b8 01 00 00 00       	mov    eax,0x1
c00138e7:	85 db                	test   ebx,ebx
c00138e9:	74 54                	je     c001393f <Fs::setcwd(Process*, char*)+0x130>
c00138eb:	83 ec 0c             	sub    esp,0xc
c00138ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138f0:	53                   	push   ebx
c00138f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138f4:	83 c4 10             	add    esp,0x10
c00138f7:	b8 01 00 00 00       	mov    eax,0x1
c00138fc:	eb 41                	jmp    c001393f <Fs::setcwd(Process*, char*)+0x130>
c00138fe:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013903:	75 1c                	jne    c0013921 <Fs::setcwd(Process*, char*)+0x112>
c0013905:	b8 02 00 00 00       	mov    eax,0x2
c001390a:	85 db                	test   ebx,ebx
c001390c:	74 31                	je     c001393f <Fs::setcwd(Process*, char*)+0x130>
c001390e:	83 ec 0c             	sub    esp,0xc
c0013911:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013913:	53                   	push   ebx
c0013914:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013917:	83 c4 10             	add    esp,0x10
c001391a:	b8 02 00 00 00       	mov    eax,0x2
c001391f:	eb 1e                	jmp    c001393f <Fs::setcwd(Process*, char*)+0x130>
c0013921:	85 db                	test   ebx,ebx
c0013923:	74 0c                	je     c0013931 <Fs::setcwd(Process*, char*)+0x122>
c0013925:	83 ec 0c             	sub    esp,0xc
c0013928:	8b 03                	mov    eax,DWORD PTR [ebx]
c001392a:	53                   	push   ebx
c001392b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001392e:	83 c4 10             	add    esp,0x10
c0013931:	50                   	push   eax
c0013932:	50                   	push   eax
c0013933:	56                   	push   esi
c0013934:	57                   	push   edi
c0013935:	e8 fa ce fe ff       	call   c0000834 <strcpy>
c001393a:	83 c4 10             	add    esp,0x10
c001393d:	31 c0                	xor    eax,eax
c001393f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013945:	5b                   	pop    ebx
c0013946:	5e                   	pop    esi
c0013947:	5f                   	pop    edi
c0013948:	5d                   	pop    ebp
c0013949:	c3                   	ret    

c001394a <Directory::Directory(char const*, Process*)>:
c001394a:	83 ec 0c             	sub    esp,0xc
c001394d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013951:	83 ec 08             	sub    esp,0x8
c0013954:	6a 00                	push   0x0
c0013956:	50                   	push   eax
c0013957:	e8 00 de ff ff       	call   c001175c <UnixFile::UnixFile(int)>
c001395c:	83 c4 10             	add    esp,0x10
c001395f:	ba c8 aa 02 c0       	mov    edx,0xc002aac8
c0013964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013968:	89 10                	mov    DWORD PTR [eax],edx
c001396a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001396e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013978:	83 c0 0d             	add    eax,0xd
c001397b:	83 ec 04             	sub    esp,0x4
c001397e:	52                   	push   edx
c001397f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013983:	50                   	push   eax
c0013984:	e8 6b f9 ff ff       	call   c00132f4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013989:	83 c4 10             	add    esp,0x10
c001398c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013990:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013993:	8d 50 bf             	lea    edx,[eax-0x41]
c0013996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001399a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00139a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00139a8:	90                   	nop
c00139a9:	83 c4 0c             	add    esp,0xc
c00139ac:	c3                   	ret    
c00139ad:	90                   	nop

c00139ae <Directory::open()>:
c00139ae:	53                   	push   ebx
c00139af:	b8 0b 00 00 00       	mov    eax,0xb
c00139b4:	83 ec 08             	sub    esp,0x8
c00139b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139bb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00139c2:	80 fa 19             	cmp    dl,0x19
c00139c5:	77 3d                	ja     c0013a04 <Directory::open()+0x56>
c00139c7:	8b 14 95 c0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1640]
c00139ce:	85 d2                	test   edx,edx
c00139d0:	74 32                	je     c0013a04 <Directory::open()+0x56>
c00139d2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00139d8:	85 d2                	test   edx,edx
c00139da:	74 28                	je     c0013a04 <Directory::open()+0x56>
c00139dc:	b8 06 00 00 00       	mov    eax,0x6
c00139e1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00139e5:	75 1d                	jne    c0013a04 <Directory::open()+0x56>
c00139e7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00139ed:	50                   	push   eax
c00139ee:	8b 02                	mov    eax,DWORD PTR [edx]
c00139f0:	51                   	push   ecx
c00139f1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00139f4:	51                   	push   ecx
c00139f5:	52                   	push   edx
c00139f6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00139f9:	83 c4 10             	add    esp,0x10
c00139fc:	85 c0                	test   eax,eax
c00139fe:	75 04                	jne    c0013a04 <Directory::open()+0x56>
c0013a00:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013a04:	83 c4 08             	add    esp,0x8
c0013a07:	5b                   	pop    ebx
c0013a08:	c3                   	ret    
c0013a09:	90                   	nop

c0013a0a <Directory::close()>:
c0013a0a:	53                   	push   ebx
c0013a0b:	b8 0b 00 00 00       	mov    eax,0xb
c0013a10:	83 ec 08             	sub    esp,0x8
c0013a13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a17:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a1e:	80 fa 19             	cmp    dl,0x19
c0013a21:	77 41                	ja     c0013a64 <Directory::close()+0x5a>
c0013a23:	8b 1c 95 c0 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1640]
c0013a2a:	85 db                	test   ebx,ebx
c0013a2c:	74 36                	je     c0013a64 <Directory::close()+0x5a>
c0013a2e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a35:	74 2d                	je     c0013a64 <Directory::close()+0x5a>
c0013a37:	b8 05 00 00 00       	mov    eax,0x5
c0013a3c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a40:	74 22                	je     c0013a64 <Directory::close()+0x5a>
c0013a42:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a46:	8b 04 95 c0 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1640]
c0013a4d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a53:	53                   	push   ebx
c0013a54:	53                   	push   ebx
c0013a55:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a57:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a5d:	50                   	push   eax
c0013a5e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a61:	83 c4 10             	add    esp,0x10
c0013a64:	83 c4 08             	add    esp,0x8
c0013a67:	5b                   	pop    ebx
c0013a68:	c3                   	ret    
c0013a69:	90                   	nop

c0013a6a <Directory::unlink()>:
c0013a6a:	83 ec 0c             	sub    esp,0xc
c0013a6d:	b8 0b 00 00 00       	mov    eax,0xb
c0013a72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a76:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a7d:	80 f9 19             	cmp    cl,0x19
c0013a80:	77 2f                	ja     c0013ab1 <Directory::unlink()+0x47>
c0013a82:	8b 0c 8d c0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1640]
c0013a89:	85 c9                	test   ecx,ecx
c0013a8b:	74 24                	je     c0013ab1 <Directory::unlink()+0x47>
c0013a8d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a93:	85 c9                	test   ecx,ecx
c0013a95:	74 1a                	je     c0013ab1 <Directory::unlink()+0x47>
c0013a97:	b8 06 00 00 00       	mov    eax,0x6
c0013a9c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013aa0:	75 0f                	jne    c0013ab1 <Directory::unlink()+0x47>
c0013aa2:	83 c2 0d             	add    edx,0xd
c0013aa5:	50                   	push   eax
c0013aa6:	50                   	push   eax
c0013aa7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aa9:	52                   	push   edx
c0013aaa:	51                   	push   ecx
c0013aab:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013aae:	83 c4 10             	add    esp,0x10
c0013ab1:	83 c4 0c             	add    esp,0xc
c0013ab4:	c3                   	ret    
c0013ab5:	90                   	nop

c0013ab6 <Directory::rename(char const*)>:
c0013ab6:	83 ec 0c             	sub    esp,0xc
c0013ab9:	b8 0b 00 00 00       	mov    eax,0xb
c0013abe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ac2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ac9:	80 f9 19             	cmp    cl,0x19
c0013acc:	77 32                	ja     c0013b00 <Directory::rename(char const*)+0x4a>
c0013ace:	8b 0c 8d c0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1640]
c0013ad5:	85 c9                	test   ecx,ecx
c0013ad7:	74 27                	je     c0013b00 <Directory::rename(char const*)+0x4a>
c0013ad9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013adf:	85 c9                	test   ecx,ecx
c0013ae1:	74 1d                	je     c0013b00 <Directory::rename(char const*)+0x4a>
c0013ae3:	b8 06 00 00 00       	mov    eax,0x6
c0013ae8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013aec:	75 12                	jne    c0013b00 <Directory::rename(char const*)+0x4a>
c0013aee:	83 c2 0d             	add    edx,0xd
c0013af1:	50                   	push   eax
c0013af2:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013af4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013af8:	52                   	push   edx
c0013af9:	51                   	push   ecx
c0013afa:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013afd:	83 c4 10             	add    esp,0x10
c0013b00:	83 c4 0c             	add    esp,0xc
c0013b03:	c3                   	ret    

c0013b04 <Directory::exists()>:
c0013b04:	83 ec 0c             	sub    esp,0xc
c0013b07:	31 c0                	xor    eax,eax
c0013b09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b0d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b14:	80 f9 19             	cmp    cl,0x19
c0013b17:	77 24                	ja     c0013b3d <Directory::exists()+0x39>
c0013b19:	8b 0c 8d c0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1640]
c0013b20:	85 c9                	test   ecx,ecx
c0013b22:	74 19                	je     c0013b3d <Directory::exists()+0x39>
c0013b24:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b2a:	85 c9                	test   ecx,ecx
c0013b2c:	74 0f                	je     c0013b3d <Directory::exists()+0x39>
c0013b2e:	83 c2 0d             	add    edx,0xd
c0013b31:	50                   	push   eax
c0013b32:	50                   	push   eax
c0013b33:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b35:	52                   	push   edx
c0013b36:	51                   	push   ecx
c0013b37:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b3a:	83 c4 10             	add    esp,0x10
c0013b3d:	83 c4 0c             	add    esp,0xc
c0013b40:	c3                   	ret    
c0013b41:	90                   	nop

c0013b42 <Directory::read(dirent*)>:
c0013b42:	83 ec 1c             	sub    esp,0x1c
c0013b45:	b8 0b 00 00 00       	mov    eax,0xb
c0013b4a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b4e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b55:	80 fa 19             	cmp    dl,0x19
c0013b58:	77 30                	ja     c0013b8a <Directory::read(dirent*)+0x48>
c0013b5a:	8b 14 95 c0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1640]
c0013b61:	85 d2                	test   edx,edx
c0013b63:	74 25                	je     c0013b8a <Directory::read(dirent*)+0x48>
c0013b65:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b6c:	74 1c                	je     c0013b8a <Directory::read(dirent*)+0x48>
c0013b6e:	83 ec 0c             	sub    esp,0xc
c0013b71:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b73:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b77:	52                   	push   edx
c0013b78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b7c:	6a 00                	push   0x0
c0013b7e:	68 10 01 00 00       	push   0x110
c0013b83:	51                   	push   ecx
c0013b84:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b87:	83 c4 20             	add    esp,0x20
c0013b8a:	83 c4 1c             	add    esp,0x1c
c0013b8d:	c3                   	ret    

c0013b8e <Directory::create()>:
c0013b8e:	83 ec 0c             	sub    esp,0xc
c0013b91:	b8 0b 00 00 00       	mov    eax,0xb
c0013b96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b9a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ba1:	80 f9 19             	cmp    cl,0x19
c0013ba4:	77 2f                	ja     c0013bd5 <Directory::create()+0x47>
c0013ba6:	8b 0c 8d c0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1640]
c0013bad:	85 c9                	test   ecx,ecx
c0013baf:	74 24                	je     c0013bd5 <Directory::create()+0x47>
c0013bb1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bb7:	85 c9                	test   ecx,ecx
c0013bb9:	74 1a                	je     c0013bd5 <Directory::create()+0x47>
c0013bbb:	b8 06 00 00 00       	mov    eax,0x6
c0013bc0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bc4:	75 0f                	jne    c0013bd5 <Directory::create()+0x47>
c0013bc6:	83 c2 0d             	add    edx,0xd
c0013bc9:	50                   	push   eax
c0013bca:	50                   	push   eax
c0013bcb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bcd:	52                   	push   edx
c0013bce:	51                   	push   ecx
c0013bcf:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013bd2:	83 c4 10             	add    esp,0x10
c0013bd5:	83 c4 0c             	add    esp,0xc
c0013bd8:	c3                   	ret    
c0013bd9:	90                   	nop

c0013bda <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013bda:	b8 0a 00 00 00       	mov    eax,0xa
c0013bdf:	c3                   	ret    

c0013be0 <Bus::Bus(char const*)>:
c0013be0:	83 ec 0c             	sub    esp,0xc
c0013be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013be7:	83 ec 08             	sub    esp,0x8
c0013bea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bee:	50                   	push   eax
c0013bef:	e8 68 09 00 00       	call   c001455c <Device::Device(char const*)>
c0013bf4:	83 c4 10             	add    esp,0x10
c0013bf7:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c0013bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c00:	89 10                	mov    DWORD PTR [eax],edx
c0013c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c06:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013c10:	90                   	nop
c0013c11:	83 c4 0c             	add    esp,0xc
c0013c14:	c3                   	ret    
c0013c15:	90                   	nop

c0013c16 <Bus::~Bus()>:
c0013c16:	83 ec 0c             	sub    esp,0xc
c0013c19:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c0013c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c22:	89 10                	mov    DWORD PTR [eax],edx
c0013c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c28:	83 ec 0c             	sub    esp,0xc
c0013c2b:	50                   	push   eax
c0013c2c:	e8 0d 06 00 00       	call   c001423e <Device::~Device()>
c0013c31:	83 c4 10             	add    esp,0x10
c0013c34:	90                   	nop
c0013c35:	83 c4 0c             	add    esp,0xc
c0013c38:	c3                   	ret    
c0013c39:	90                   	nop

c0013c3a <Bus::~Bus()>:
c0013c3a:	83 ec 0c             	sub    esp,0xc
c0013c3d:	83 ec 0c             	sub    esp,0xc
c0013c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c44:	e8 cd ff ff ff       	call   c0013c16 <Bus::~Bus()>
c0013c49:	83 c4 10             	add    esp,0x10
c0013c4c:	83 ec 08             	sub    esp,0x8
c0013c4f:	68 58 01 00 00       	push   0x158
c0013c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c58:	e8 09 f2 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0013c5d:	83 c4 10             	add    esp,0x10
c0013c60:	83 c4 0c             	add    esp,0xc
c0013c63:	c3                   	ret    

c0013c64 <Buzzer::Buzzer(char const*)>:
c0013c64:	83 ec 0c             	sub    esp,0xc
c0013c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c6b:	83 ec 08             	sub    esp,0x8
c0013c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c72:	50                   	push   eax
c0013c73:	e8 e4 08 00 00       	call   c001455c <Device::Device(char const*)>
c0013c78:	83 c4 10             	add    esp,0x10
c0013c7b:	ba 10 ab 02 c0       	mov    edx,0xc002ab10
c0013c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c84:	89 10                	mov    DWORD PTR [eax],edx
c0013c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c98:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013ca2:	90                   	nop
c0013ca3:	83 c4 0c             	add    esp,0xc
c0013ca6:	c3                   	ret    
c0013ca7:	90                   	nop

c0013ca8 <Buzzer::~Buzzer()>:
c0013ca8:	83 ec 0c             	sub    esp,0xc
c0013cab:	ba 10 ab 02 c0       	mov    edx,0xc002ab10
c0013cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb4:	89 10                	mov    DWORD PTR [eax],edx
c0013cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cba:	83 ec 0c             	sub    esp,0xc
c0013cbd:	50                   	push   eax
c0013cbe:	e8 7b 05 00 00       	call   c001423e <Device::~Device()>
c0013cc3:	83 c4 10             	add    esp,0x10
c0013cc6:	90                   	nop
c0013cc7:	83 c4 0c             	add    esp,0xc
c0013cca:	c3                   	ret    
c0013ccb:	90                   	nop

c0013ccc <Buzzer::~Buzzer()>:
c0013ccc:	83 ec 0c             	sub    esp,0xc
c0013ccf:	83 ec 0c             	sub    esp,0xc
c0013cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cd6:	e8 cd ff ff ff       	call   c0013ca8 <Buzzer::~Buzzer()>
c0013cdb:	83 c4 10             	add    esp,0x10
c0013cde:	83 ec 08             	sub    esp,0x8
c0013ce1:	68 5c 01 00 00       	push   0x15c
c0013ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cea:	e8 77 f1 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0013cef:	83 c4 10             	add    esp,0x10
c0013cf2:	83 c4 0c             	add    esp,0xc
c0013cf5:	c3                   	ret    

c0013cf6 <Buzzer::stop()>:
c0013cf6:	83 ec 14             	sub    esp,0x14
c0013cf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cfd:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cff:	6a 00                	push   0x0
c0013d01:	50                   	push   eax
c0013d02:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d05:	83 c4 1c             	add    esp,0x1c
c0013d08:	c3                   	ret    

c0013d09 <beepThread(void*)>:
c0013d09:	53                   	push   ebx
c0013d0a:	83 ec 08             	sub    esp,0x8
c0013d0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d11:	e8 ae a0 00 00       	call   c001ddc4 <unlockScheduler()>
c0013d16:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d1b:	52                   	push   edx
c0013d1c:	52                   	push   edx
c0013d1d:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d23:	52                   	push   edx
c0013d24:	50                   	push   eax
c0013d25:	e8 e8 a5 00 00       	call   c001e312 <nanoSleep(unsigned long long)>
c0013d2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d2d:	e8 c4 ff ff ff       	call   c0013cf6 <Buzzer::stop()>
c0013d32:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d3a:	83 c4 18             	add    esp,0x18
c0013d3d:	5b                   	pop    ebx
c0013d3e:	e9 15 a5 00 00       	jmp    c001e258 <blockTask(TaskState)>
c0013d43:	90                   	nop

c0013d44 <Buzzer::beep(int, int, bool)>:
c0013d44:	57                   	push   edi
c0013d45:	56                   	push   esi
c0013d46:	53                   	push   ebx
c0013d47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d4b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d53:	52                   	push   edx
c0013d54:	52                   	push   edx
c0013d55:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d5b:	56                   	push   esi
c0013d5c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d5f:	83 c4 10             	add    esp,0x10
c0013d62:	89 f8                	mov    eax,edi
c0013d64:	84 c0                	test   al,al
c0013d66:	74 1f                	je     c0013d87 <Buzzer::beep(int, int, bool)+0x43>
c0013d68:	50                   	push   eax
c0013d69:	50                   	push   eax
c0013d6a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d70:	99                   	cdq    
c0013d71:	52                   	push   edx
c0013d72:	50                   	push   eax
c0013d73:	e8 9a a5 00 00       	call   c001e312 <nanoSleep(unsigned long long)>
c0013d78:	83 c4 10             	add    esp,0x10
c0013d7b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d7f:	5b                   	pop    ebx
c0013d80:	5e                   	pop    esi
c0013d81:	5f                   	pop    edi
c0013d82:	e9 6f ff ff ff       	jmp    c0013cf6 <Buzzer::stop()>
c0013d87:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d8d:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0013d92:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d9a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d9e:	c7 44 24 14 09 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013d09
c0013da6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013daa:	5b                   	pop    ebx
c0013dab:	5e                   	pop    esi
c0013dac:	5f                   	pop    edi
c0013dad:	e9 42 a1 00 00       	jmp    c001def4 <Process::createThread(void (*)(void*), void*, int)>

c0013db2 <User::loadClockSettings(int)>:
c0013db2:	53                   	push   ebx
c0013db3:	83 ec 14             	sub    esp,0x14
c0013db6:	68 14 01 00 00       	push   0x114
c0013dbb:	e8 80 ba ff ff       	call   c000f840 <malloc>
c0013dc0:	83 c4 0c             	add    esp,0xc
c0013dc3:	89 c3                	mov    ebx,eax
c0013dc5:	ff 35 14 19 03 c0    	push   DWORD PTR ds:0xc0031914
c0013dcb:	68 38 ab 02 c0       	push   0xc002ab38
c0013dd0:	50                   	push   eax
c0013dd1:	e8 c8 f6 ff ff       	call   c001349e <File::File(char const*, Process*)>
c0013dd6:	58                   	pop    eax
c0013dd7:	5a                   	pop    edx
c0013dd8:	6a 01                	push   0x1
c0013dda:	53                   	push   ebx
c0013ddb:	e8 22 f7 ff ff       	call   c0013502 <File::open(FileOpenMode)>
c0013de0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013de3:	e8 78 f7 ff ff       	call   c0013560 <File::close()>
c0013de8:	83 c4 10             	add    esp,0x10
c0013deb:	85 db                	test   ebx,ebx
c0013ded:	74 0f                	je     c0013dfe <User::loadClockSettings(int)+0x4c>
c0013def:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013df1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013df5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013df8:	83 c4 08             	add    esp,0x8
c0013dfb:	5b                   	pop    ebx
c0013dfc:	ff e0                	jmp    eax
c0013dfe:	83 c4 08             	add    esp,0x8
c0013e01:	5b                   	pop    ebx
c0013e02:	c3                   	ret    
c0013e03:	90                   	nop

c0013e04 <Clock::Clock(char const*)>:
c0013e04:	83 ec 0c             	sub    esp,0xc
c0013e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e0b:	83 ec 08             	sub    esp,0x8
c0013e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e12:	50                   	push   eax
c0013e13:	e8 44 07 00 00       	call   c001455c <Device::Device(char const*)>
c0013e18:	83 c4 10             	add    esp,0x10
c0013e1b:	ba 60 ab 02 c0       	mov    edx,0xc002ab60
c0013e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e24:	89 10                	mov    DWORD PTR [eax],edx
c0013e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2a:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e34:	90                   	nop
c0013e35:	83 c4 0c             	add    esp,0xc
c0013e38:	c3                   	ret    
c0013e39:	90                   	nop

c0013e3a <Clock::~Clock()>:
c0013e3a:	83 ec 0c             	sub    esp,0xc
c0013e3d:	ba 60 ab 02 c0       	mov    edx,0xc002ab60
c0013e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e46:	89 10                	mov    DWORD PTR [eax],edx
c0013e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4c:	83 ec 0c             	sub    esp,0xc
c0013e4f:	50                   	push   eax
c0013e50:	e8 e9 03 00 00       	call   c001423e <Device::~Device()>
c0013e55:	83 c4 10             	add    esp,0x10
c0013e58:	90                   	nop
c0013e59:	83 c4 0c             	add    esp,0xc
c0013e5c:	c3                   	ret    
c0013e5d:	90                   	nop

c0013e5e <Clock::~Clock()>:
c0013e5e:	83 ec 0c             	sub    esp,0xc
c0013e61:	83 ec 0c             	sub    esp,0xc
c0013e64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e68:	e8 cd ff ff ff       	call   c0013e3a <Clock::~Clock()>
c0013e6d:	83 c4 10             	add    esp,0x10
c0013e70:	83 ec 08             	sub    esp,0x8
c0013e73:	68 58 01 00 00       	push   0x158
c0013e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e7c:	e8 e5 ef ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0013e81:	83 c4 10             	add    esp,0x10
c0013e84:	83 c4 0c             	add    esp,0xc
c0013e87:	c3                   	ret    

c0013e88 <Clock::timeInSecondsLocal()>:
c0013e88:	53                   	push   ebx
c0013e89:	83 ec 14             	sub    esp,0x14
c0013e8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e90:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e92:	50                   	push   eax
c0013e93:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e96:	0f b6 0d 20 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e520
c0013e9d:	03 0d 24 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e524
c0013ea3:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ea9:	89 cb                	mov    ebx,ecx
c0013eab:	c1 fb 1f             	sar    ebx,0x1f
c0013eae:	01 c8                	add    eax,ecx
c0013eb0:	11 da                	adc    edx,ebx
c0013eb2:	83 c4 10             	add    esp,0x10
c0013eb5:	31 c9                	xor    ecx,ecx
c0013eb7:	80 3d 21 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e521,0x0
c0013ebe:	74 05                	je     c0013ec5 <Clock::timeInSecondsLocal()+0x3d>
c0013ec0:	b9 08 07 00 00       	mov    ecx,0x708
c0013ec5:	31 db                	xor    ebx,ebx
c0013ec7:	01 c8                	add    eax,ecx
c0013ec9:	11 da                	adc    edx,ebx
c0013ecb:	83 c4 08             	add    esp,0x8
c0013ece:	5b                   	pop    ebx
c0013ecf:	c3                   	ret    

c0013ed0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013ed0:	57                   	push   edi
c0013ed1:	56                   	push   esi
c0013ed2:	53                   	push   ebx
c0013ed3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ed7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013edb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013edd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ee1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013ee4:	0f b6 05 20 e5 02 c0 	movzx  eax,BYTE PTR ds:0xc002e520
c0013eeb:	03 05 24 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e524
c0013ef1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013ef7:	99                   	cdq    
c0013ef8:	29 c6                	sub    esi,eax
c0013efa:	19 d7                	sbb    edi,edx
c0013efc:	89 f0                	mov    eax,esi
c0013efe:	89 fa                	mov    edx,edi
c0013f00:	31 f6                	xor    esi,esi
c0013f02:	80 3d 21 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e521,0x0
c0013f09:	74 05                	je     c0013f10 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013f0b:	be 08 07 00 00       	mov    esi,0x708
c0013f10:	31 ff                	xor    edi,edi
c0013f12:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f16:	29 f0                	sub    eax,esi
c0013f18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f1c:	19 fa                	sbb    edx,edi
c0013f1e:	89 d8                	mov    eax,ebx
c0013f20:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f24:	5b                   	pop    ebx
c0013f25:	5e                   	pop    esi
c0013f26:	5f                   	pop    edi
c0013f27:	ff e0                	jmp    eax

c0013f29 <datetimeToSeconds(datetime_t)>:
c0013f29:	55                   	push   ebp
c0013f2a:	57                   	push   edi
c0013f2b:	56                   	push   esi
c0013f2c:	53                   	push   ebx
c0013f2d:	83 ec 14             	sub    esp,0x14
c0013f30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f34:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f38:	89 d3                	mov    ebx,edx
c0013f3a:	0f b6 c6             	movzx  eax,dh
c0013f3d:	c1 eb 10             	shr    ebx,0x10
c0013f40:	48                   	dec    eax
c0013f41:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f46:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f4a:	0f b6 f5             	movzx  esi,ch
c0013f4d:	89 cf                	mov    edi,ecx
c0013f4f:	6b f6 3c             	imul   esi,esi,0x3c
c0013f52:	c1 ef 10             	shr    edi,0x10
c0013f55:	0f b6 c9             	movzx  ecx,cl
c0013f58:	89 f8                	mov    eax,edi
c0013f5a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f60:	0f b6 f8             	movzx  edi,al
c0013f63:	0f b6 d2             	movzx  edx,dl
c0013f66:	01 fe                	add    esi,edi
c0013f68:	01 f1                	add    ecx,esi
c0013f6a:	0f b7 f3             	movzx  esi,bx
c0013f6d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f71:	c1 f9 1f             	sar    ecx,0x1f
c0013f74:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f79:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f7d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f82:	8b 0c 8d a0 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5460]
c0013f89:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f8d:	76 29                	jbe    c0013fb8 <datetimeToSeconds(datetime_t)+0x8f>
c0013f8f:	f6 c3 03             	test   bl,0x3
c0013f92:	75 24                	jne    c0013fb8 <datetimeToSeconds(datetime_t)+0x8f>
c0013f94:	31 d2                	xor    edx,edx
c0013f96:	bf 64 00 00 00       	mov    edi,0x64
c0013f9b:	89 d8                	mov    eax,ebx
c0013f9d:	66 f7 f7             	div    di
c0013fa0:	66 85 d2             	test   dx,dx
c0013fa3:	75 12                	jne    c0013fb7 <datetimeToSeconds(datetime_t)+0x8e>
c0013fa5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013fab:	bf 90 01 00 00       	mov    edi,0x190
c0013fb0:	99                   	cdq    
c0013fb1:	f7 ff                	idiv   edi
c0013fb3:	85 d2                	test   edx,edx
c0013fb5:	75 01                	jne    c0013fb8 <datetimeToSeconds(datetime_t)+0x8f>
c0013fb7:	41                   	inc    ecx
c0013fb8:	66 83 fb 46          	cmp    bx,0x46
c0013fbc:	76 45                	jbe    c0014003 <datetimeToSeconds(datetime_t)+0xda>
c0013fbe:	bb 46 00 00 00       	mov    ebx,0x46
c0013fc3:	bf 64 00 00 00       	mov    edi,0x64
c0013fc8:	bd 90 01 00 00       	mov    ebp,0x190
c0013fcd:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fd2:	f6 c3 03             	test   bl,0x3
c0013fd5:	75 23                	jne    c0013ffa <datetimeToSeconds(datetime_t)+0xd1>
c0013fd7:	89 d8                	mov    eax,ebx
c0013fd9:	99                   	cdq    
c0013fda:	f7 ff                	idiv   edi
c0013fdc:	b8 6e 01 00 00       	mov    eax,0x16e
c0013fe1:	85 d2                	test   edx,edx
c0013fe3:	75 15                	jne    c0013ffa <datetimeToSeconds(datetime_t)+0xd1>
c0013fe5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013feb:	99                   	cdq    
c0013fec:	f7 fd                	idiv   ebp
c0013fee:	83 fa 01             	cmp    edx,0x1
c0013ff1:	19 c0                	sbb    eax,eax
c0013ff3:	f7 d0                	not    eax
c0013ff5:	05 6e 01 00 00       	add    eax,0x16e
c0013ffa:	01 c1                	add    ecx,eax
c0013ffc:	43                   	inc    ebx
c0013ffd:	39 f3                	cmp    ebx,esi
c0013fff:	7c cc                	jl     c0013fcd <datetimeToSeconds(datetime_t)+0xa4>
c0014001:	eb 35                	jmp    c0014038 <datetimeToSeconds(datetime_t)+0x10f>
c0014003:	74 33                	je     c0014038 <datetimeToSeconds(datetime_t)+0x10f>
c0014005:	b8 45 00 00 00       	mov    eax,0x45
c001400a:	89 c2                	mov    edx,eax
c001400c:	83 e2 03             	and    edx,0x3
c001400f:	39 f0                	cmp    eax,esi
c0014011:	7e 0f                	jle    c0014022 <datetimeToSeconds(datetime_t)+0xf9>
c0014013:	83 fa 01             	cmp    edx,0x1
c0014016:	19 d2                	sbb    edx,edx
c0014018:	48                   	dec    eax
c0014019:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0014020:	eb e8                	jmp    c001400a <datetimeToSeconds(datetime_t)+0xe1>
c0014022:	b8 6d 01 00 00       	mov    eax,0x16d
c0014027:	85 d2                	test   edx,edx
c0014029:	75 0b                	jne    c0014036 <datetimeToSeconds(datetime_t)+0x10d>
c001402b:	66 83 fb 01          	cmp    bx,0x1
c001402f:	19 c0                	sbb    eax,eax
c0014031:	05 6e 01 00 00       	add    eax,0x16e
c0014036:	29 c1                	sub    ecx,eax
c0014038:	b8 80 51 01 00       	mov    eax,0x15180
c001403d:	f7 e9                	imul   ecx
c001403f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0014043:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0014047:	83 c4 14             	add    esp,0x14
c001404a:	5b                   	pop    ebx
c001404b:	5e                   	pop    esi
c001404c:	5f                   	pop    edi
c001404d:	5d                   	pop    ebp
c001404e:	c3                   	ret    
c001404f:	90                   	nop

c0014050 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0014050:	57                   	push   edi
c0014051:	56                   	push   esi
c0014052:	53                   	push   ebx
c0014053:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014057:	8b 06                	mov    eax,DWORD PTR [esi]
c0014059:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001405c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014060:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014064:	e8 c0 fe ff ff       	call   c0013f29 <datetimeToSeconds(datetime_t)>
c0014069:	59                   	pop    ecx
c001406a:	0f b6 0d 20 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e520
c0014071:	5b                   	pop    ebx
c0014072:	03 0d 24 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e524
c0014078:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001407e:	89 cb                	mov    ebx,ecx
c0014080:	c1 fb 1f             	sar    ebx,0x1f
c0014083:	29 c8                	sub    eax,ecx
c0014085:	19 da                	sbb    edx,ebx
c0014087:	31 c9                	xor    ecx,ecx
c0014089:	80 3d 21 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e521,0x0
c0014090:	74 05                	je     c0014097 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014092:	b9 08 07 00 00       	mov    ecx,0x708
c0014097:	31 db                	xor    ebx,ebx
c0014099:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001409d:	29 c8                	sub    eax,ecx
c001409f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140a3:	19 da                	sbb    edx,ebx
c00140a5:	89 f8                	mov    eax,edi
c00140a7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00140ab:	5b                   	pop    ebx
c00140ac:	5e                   	pop    esi
c00140ad:	5f                   	pop    edi
c00140ae:	ff e0                	jmp    eax

c00140b0 <secondsToDatetime(unsigned long long)>:
c00140b0:	55                   	push   ebp
c00140b1:	57                   	push   edi
c00140b2:	56                   	push   esi
c00140b3:	53                   	push   ebx
c00140b4:	83 ec 1c             	sub    esp,0x1c
c00140b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00140bb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00140bf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00140c3:	6a 00                	push   0x0
c00140c5:	68 80 51 01 00       	push   0x15180
c00140ca:	55                   	push   ebp
c00140cb:	57                   	push   edi
c00140cc:	e8 cb 28 01 00       	call   c002699c <__udivdi3>
c00140d1:	83 c4 10             	add    esp,0x10
c00140d4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00140da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140de:	6a 00                	push   0x0
c00140e0:	68 80 51 01 00       	push   0x15180
c00140e5:	55                   	push   ebp
c00140e6:	57                   	push   edi
c00140e7:	bf 10 0e 00 00       	mov    edi,0xe10
c00140ec:	e8 ab 29 01 00       	call   c0026a9c <__umoddi3>
c00140f1:	83 c4 10             	add    esp,0x10
c00140f4:	99                   	cdq    
c00140f5:	f7 ff                	idiv   edi
c00140f7:	bf 3c 00 00 00       	mov    edi,0x3c
c00140fc:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00140ff:	89 d0                	mov    eax,edx
c0014101:	99                   	cdq    
c0014102:	f7 ff                	idiv   edi
c0014104:	85 db                	test   ebx,ebx
c0014106:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014109:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001410c:	79 11                	jns    c001411f <secondsToDatetime(unsigned long long)+0x6f>
c001410e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014112:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014118:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001411d:	eb 07                	jmp    c0014126 <secondsToDatetime(unsigned long long)+0x76>
c001411f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014124:	89 d8                	mov    eax,ebx
c0014126:	bf b4 05 00 00       	mov    edi,0x5b4
c001412b:	99                   	cdq    
c001412c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014131:	f7 f9                	idiv   ecx
c0014133:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014138:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001413c:	31 d2                	xor    edx,edx
c001413e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014146:	01 c3                	add    ebx,eax
c0014148:	89 d8                	mov    eax,ebx
c001414a:	f7 f1                	div    ecx
c001414c:	31 d2                	xor    edx,edx
c001414e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014151:	89 d8                	mov    eax,ebx
c0014153:	f7 f7                	div    edi
c0014155:	31 d2                	xor    edx,edx
c0014157:	29 c1                	sub    ecx,eax
c0014159:	89 d8                	mov    eax,ebx
c001415b:	f7 f5                	div    ebp
c001415d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014162:	29 c1                	sub    ecx,eax
c0014164:	31 d2                	xor    edx,edx
c0014166:	89 c8                	mov    eax,ecx
c0014168:	f7 f5                	div    ebp
c001416a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001416f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014173:	31 d2                	xor    edx,edx
c0014175:	89 c8                	mov    eax,ecx
c0014177:	f7 f5                	div    ebp
c0014179:	31 d2                	xor    edx,edx
c001417b:	01 c3                	add    ebx,eax
c001417d:	89 c8                	mov    eax,ecx
c001417f:	f7 f7                	div    edi
c0014181:	bf 99 00 00 00       	mov    edi,0x99
c0014186:	29 c3                	sub    ebx,eax
c0014188:	31 d2                	xor    edx,edx
c001418a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014192:	29 c3                	sub    ebx,eax
c0014194:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014197:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001419a:	bb 05 00 00 00       	mov    ebx,0x5
c001419f:	83 c1 02             	add    ecx,0x2
c00141a2:	89 c8                	mov    eax,ecx
c00141a4:	f7 f7                	div    edi
c00141a6:	31 d2                	xor    edx,edx
c00141a8:	89 c7                	mov    edi,eax
c00141aa:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00141b0:	83 c0 02             	add    eax,0x2
c00141b3:	f7 f3                	div    ebx
c00141b5:	89 eb                	mov    ebx,ebp
c00141b7:	29 c3                	sub    ebx,eax
c00141b9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00141bf:	88 1e                	mov    BYTE PTR [esi],bl
c00141c1:	19 c0                	sbb    eax,eax
c00141c3:	31 d2                	xor    edx,edx
c00141c5:	83 e0 0c             	and    eax,0xc
c00141c8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00141cc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00141d4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00141d8:	83 f9 01             	cmp    ecx,0x1
c00141db:	0f 96 c2             	setbe  dl
c00141de:	41                   	inc    ecx
c00141df:	01 d0                	add    eax,edx
c00141e1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00141e4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00141e8:	83 c4 1c             	add    esp,0x1c
c00141eb:	89 f0                	mov    eax,esi
c00141ed:	5b                   	pop    ebx
c00141ee:	5e                   	pop    esi
c00141ef:	5f                   	pop    edi
c00141f0:	5d                   	pop    ebp
c00141f1:	c2 04 00             	ret    0x4

c00141f4 <Clock::timeInDatetimeLocal()>:
c00141f4:	53                   	push   ebx
c00141f5:	83 ec 14             	sub    esp,0x14
c00141f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014200:	e8 83 fc ff ff       	call   c0013e88 <Clock::timeInSecondsLocal()>
c0014205:	83 c4 0c             	add    esp,0xc
c0014208:	52                   	push   edx
c0014209:	50                   	push   eax
c001420a:	53                   	push   ebx
c001420b:	e8 a0 fe ff ff       	call   c00140b0 <secondsToDatetime(unsigned long long)>
c0014210:	89 d8                	mov    eax,ebx
c0014212:	83 c4 14             	add    esp,0x14
c0014215:	5b                   	pop    ebx
c0014216:	c2 04 00             	ret    0x4
c0014219:	90                   	nop

c001421a <Device::hibernate()>:
c001421a:	c3                   	ret    
c001421b:	90                   	nop

c001421c <Device::wake()>:
c001421c:	c3                   	ret    
c001421d:	90                   	nop

c001421e <Device::detect()>:
c001421e:	c3                   	ret    
c001421f:	90                   	nop

c0014220 <Device::disableLegacy()>:
c0014220:	c3                   	ret    
c0014221:	90                   	nop

c0014222 <Device::powerSaving(PowerSavingLevel)>:
c0014222:	c3                   	ret    
c0014223:	90                   	nop

c0014224 <DriverlessDevice::close(int, int, void*)>:
c0014224:	31 c0                	xor    eax,eax
c0014226:	c3                   	ret    
c0014227:	90                   	nop

c0014228 <DriverlessDevice::detect()>:
c0014228:	c3                   	ret    
c0014229:	90                   	nop

c001422a <DriverlessDevice::open(int, int, void*)>:
c001422a:	83 ec 18             	sub    esp,0x18
c001422d:	68 d0 ab 02 c0       	push   0xc002abd0
c0014232:	e8 b0 63 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0014237:	83 c8 ff             	or     eax,0xffffffff
c001423a:	83 c4 1c             	add    esp,0x1c
c001423d:	c3                   	ret    

c001423e <Device::~Device()>:
c001423e:	ba f8 ab 02 c0       	mov    edx,0xc002abf8
c0014243:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014247:	89 10                	mov    DWORD PTR [eax],edx
c0014249:	90                   	nop
c001424a:	c3                   	ret    
c001424b:	90                   	nop

c001424c <Device::~Device()>:
c001424c:	83 ec 0c             	sub    esp,0xc
c001424f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014253:	e8 e6 ff ff ff       	call   c001423e <Device::~Device()>
c0014258:	83 c4 04             	add    esp,0x4
c001425b:	83 ec 08             	sub    esp,0x8
c001425e:	68 58 01 00 00       	push   0x158
c0014263:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014267:	e8 fa eb ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c001426c:	83 c4 10             	add    esp,0x10
c001426f:	83 c4 0c             	add    esp,0xc
c0014272:	c3                   	ret    
c0014273:	90                   	nop

c0014274 <Device::findAndLoadDriver()>:
c0014274:	c3                   	ret    
c0014275:	90                   	nop

c0014276 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014276:	57                   	push   edi
c0014277:	b9 09 00 00 00       	mov    ecx,0x9
c001427c:	56                   	push   esi
c001427d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014281:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014285:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001428f:	81 c7 18 01 00 00    	add    edi,0x118
c0014295:	fc                   	cld    
c0014296:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014298:	5e                   	pop    esi
c0014299:	5f                   	pop    edi
c001429a:	c3                   	ret    
c001429b:	90                   	nop

c001429c <Device::preOpenACPI(void*, char*, char*)>:
c001429c:	56                   	push   esi
c001429d:	53                   	push   ebx
c001429e:	83 ec 08             	sub    esp,0x8
c00142a1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142a5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142a9:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00142b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142b7:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00142bd:	6a 1e                	push   0x1e
c00142bf:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00142c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142c9:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00142cf:	50                   	push   eax
c00142d0:	e8 6f c4 fe ff       	call   c0000744 <memcpy>
c00142d5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00142d9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00142dd:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00142e5:	83 c4 14             	add    esp,0x14
c00142e8:	5b                   	pop    ebx
c00142e9:	5e                   	pop    esi
c00142ea:	e9 55 c4 fe ff       	jmp    c0000744 <memcpy>
c00142ef:	90                   	nop

c00142f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142f4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142f9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014300:	75 0b                	jne    c001430d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014302:	8b 00                	mov    eax,DWORD PTR [eax]
c0014304:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014308:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001430b:	eb 1e                	jmp    c001432b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001430d:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014312:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014318:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001431e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014320:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014324:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014328:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001432b:	ff e0                	jmp    eax
c001432d:	90                   	nop

c001432e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001432e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014332:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014337:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001433e:	75 0b                	jne    c001434b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014340:	8b 00                	mov    eax,DWORD PTR [eax]
c0014342:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014346:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014349:	eb 1e                	jmp    c0014369 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001434b:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014350:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014356:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001435c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001435e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014362:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014366:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014369:	ff e0                	jmp    eax
c001436b:	90                   	nop

c001436c <Device::addChild(Device*)>:
c001436c:	53                   	push   ebx
c001436d:	83 ec 08             	sub    esp,0x8
c0014370:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014374:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014378:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001437e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014384:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014386:	85 d2                	test   edx,edx
c0014388:	74 04                	je     c001438e <Device::addChild(Device*)+0x22>
c001438a:	89 d3                	mov    ebx,edx
c001438c:	eb f6                	jmp    c0014384 <Device::addChild(Device*)+0x18>
c001438e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014391:	83 ec 0c             	sub    esp,0xc
c0014394:	6a 08                	push   0x8
c0014396:	e8 a5 b4 ff ff       	call   c000f840 <malloc>
c001439b:	89 03                	mov    DWORD PTR [ebx],eax
c001439d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143aa:	83 c4 18             	add    esp,0x18
c00143ad:	5b                   	pop    ebx
c00143ae:	c3                   	ret    
c00143af:	90                   	nop

c00143b0 <Device::removeAllChildren()>:
c00143b0:	56                   	push   esi
c00143b1:	53                   	push   ebx
c00143b2:	52                   	push   edx
c00143b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143b7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00143bd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143c0:	74 17                	je     c00143d9 <Device::removeAllChildren()+0x29>
c00143c2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00143c5:	85 c0                	test   eax,eax
c00143c7:	74 0c                	je     c00143d5 <Device::removeAllChildren()+0x25>
c00143c9:	83 ec 0c             	sub    esp,0xc
c00143cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00143ce:	50                   	push   eax
c00143cf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00143d2:	83 c4 10             	add    esp,0x10
c00143d5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143d7:	eb e4                	jmp    c00143bd <Device::removeAllChildren()+0xd>
c00143d9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143e5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143eb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143f2:	58                   	pop    eax
c00143f3:	5b                   	pop    ebx
c00143f4:	5e                   	pop    esi
c00143f5:	c3                   	ret    

c00143f6 <Device::hibernateAll()>:
c00143f6:	53                   	push   ebx
c00143f7:	83 ec 14             	sub    esp,0x14
c00143fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014400:	53                   	push   ebx
c0014401:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014404:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001440a:	83 c4 10             	add    esp,0x10
c001440d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014410:	74 0f                	je     c0014421 <Device::hibernateAll()+0x2b>
c0014412:	83 ec 0c             	sub    esp,0xc
c0014415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014418:	e8 d9 ff ff ff       	call   c00143f6 <Device::hibernateAll()>
c001441d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001441f:	eb e9                	jmp    c001440a <Device::hibernateAll()+0x14>
c0014421:	83 c4 08             	add    esp,0x8
c0014424:	5b                   	pop    ebx
c0014425:	c3                   	ret    

c0014426 <Device::wakeAll()>:
c0014426:	53                   	push   ebx
c0014427:	83 ec 14             	sub    esp,0x14
c001442a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001442e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014430:	53                   	push   ebx
c0014431:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014434:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001443a:	83 c4 10             	add    esp,0x10
c001443d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014440:	74 0f                	je     c0014451 <Device::wakeAll()+0x2b>
c0014442:	83 ec 0c             	sub    esp,0xc
c0014445:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014448:	e8 d9 ff ff ff       	call   c0014426 <Device::wakeAll()>
c001444d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001444f:	eb e9                	jmp    c001443a <Device::wakeAll()+0x14>
c0014451:	83 c4 08             	add    esp,0x8
c0014454:	5b                   	pop    ebx
c0014455:	c3                   	ret    

c0014456 <Device::detectAll()>:
c0014456:	53                   	push   ebx
c0014457:	83 ec 14             	sub    esp,0x14
c001445a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001445e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014460:	53                   	push   ebx
c0014461:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014464:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001446a:	83 c4 10             	add    esp,0x10
c001446d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014470:	74 0f                	je     c0014481 <Device::detectAll()+0x2b>
c0014472:	83 ec 0c             	sub    esp,0xc
c0014475:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014478:	e8 d9 ff ff ff       	call   c0014456 <Device::detectAll()>
c001447d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001447f:	eb e9                	jmp    c001446a <Device::detectAll()+0x14>
c0014481:	83 c4 08             	add    esp,0x8
c0014484:	5b                   	pop    ebx
c0014485:	c3                   	ret    

c0014486 <Device::disableLegacyAll()>:
c0014486:	53                   	push   ebx
c0014487:	83 ec 14             	sub    esp,0x14
c001448a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001448e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014490:	53                   	push   ebx
c0014491:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014494:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001449a:	83 c4 10             	add    esp,0x10
c001449d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144a0:	74 0f                	je     c00144b1 <Device::disableLegacyAll()+0x2b>
c00144a2:	83 ec 0c             	sub    esp,0xc
c00144a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144a8:	e8 d9 ff ff ff       	call   c0014486 <Device::disableLegacyAll()>
c00144ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144af:	eb e9                	jmp    c001449a <Device::disableLegacyAll()+0x14>
c00144b1:	83 c4 08             	add    esp,0x8
c00144b4:	5b                   	pop    ebx
c00144b5:	c3                   	ret    

c00144b6 <Device::loadDriversForAll()>:
c00144b6:	53                   	push   ebx
c00144b7:	83 ec 08             	sub    esp,0x8
c00144ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144be:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144c4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00144c6:	85 db                	test   ebx,ebx
c00144c8:	74 12                	je     c00144dc <Device::loadDriversForAll()+0x26>
c00144ca:	83 ec 0c             	sub    esp,0xc
c00144cd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144d0:	e8 e1 ff ff ff       	call   c00144b6 <Device::loadDriversForAll()>
c00144d5:	83 c4 10             	add    esp,0x10
c00144d8:	89 d8                	mov    eax,ebx
c00144da:	eb e8                	jmp    c00144c4 <Device::loadDriversForAll()+0xe>
c00144dc:	83 c4 08             	add    esp,0x8
c00144df:	5b                   	pop    ebx
c00144e0:	c3                   	ret    
c00144e1:	90                   	nop

c00144e2 <Device::closeAll()>:
c00144e2:	53                   	push   ebx
c00144e3:	83 ec 08             	sub    esp,0x8
c00144e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144ec:	6a 00                	push   0x0
c00144ee:	6a 00                	push   0x0
c00144f0:	6a 00                	push   0x0
c00144f2:	53                   	push   ebx
c00144f3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144f6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144fc:	83 c4 10             	add    esp,0x10
c00144ff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014502:	74 0f                	je     c0014513 <Device::closeAll()+0x31>
c0014504:	83 ec 0c             	sub    esp,0xc
c0014507:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001450a:	e8 d3 ff ff ff       	call   c00144e2 <Device::closeAll()>
c001450f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014511:	eb e9                	jmp    c00144fc <Device::closeAll()+0x1a>
c0014513:	83 c4 08             	add    esp,0x8
c0014516:	5b                   	pop    ebx
c0014517:	c3                   	ret    

c0014518 <Device::powerSavingAll(PowerSavingLevel)>:
c0014518:	56                   	push   esi
c0014519:	53                   	push   ebx
c001451a:	83 ec 0c             	sub    esp,0xc
c001451d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014521:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014525:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014527:	56                   	push   esi
c0014528:	53                   	push   ebx
c0014529:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001452c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014532:	83 c4 10             	add    esp,0x10
c0014535:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014538:	74 0f                	je     c0014549 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001453a:	52                   	push   edx
c001453b:	52                   	push   edx
c001453c:	56                   	push   esi
c001453d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014540:	e8 d3 ff ff ff       	call   c0014518 <Device::powerSavingAll(PowerSavingLevel)>
c0014545:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014547:	eb e9                	jmp    c0014532 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014549:	58                   	pop    eax
c001454a:	5b                   	pop    ebx
c001454b:	5e                   	pop    esi
c001454c:	c3                   	ret    
c001454d:	90                   	nop

c001454e <Device::setName(char const*)>:
c001454e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014556:	e9 d9 c2 fe ff       	jmp    c0000834 <strcpy>
c001455b:	90                   	nop

c001455c <Device::Device(char const*)>:
c001455c:	83 ec 1c             	sub    esp,0x1c
c001455f:	ba f8 ab 02 c0       	mov    edx,0xc002abf8
c0014564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014568:	89 10                	mov    DWORD PTR [eax],edx
c001456a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001457c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014586:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001458a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014598:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145a2:	83 ec 08             	sub    esp,0x8
c00145a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145ad:	e8 9c ff ff ff       	call   c001454e <Device::setName(char const*)>
c00145b2:	83 c4 10             	add    esp,0x10
c00145b5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00145bd:	83 ec 0c             	sub    esp,0xc
c00145c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145c4:	e8 77 b2 ff ff       	call   c000f840 <malloc>
c00145c9:	83 c4 10             	add    esp,0x10
c00145cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145dd:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00145e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014608:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001460f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014613:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001461a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001461e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001462c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001463a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014648:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014652:	90                   	nop
c0014653:	83 c4 1c             	add    esp,0x1c
c0014656:	c3                   	ret    
c0014657:	90                   	nop

c0014658 <Device::getName()>:
c0014658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001465c:	05 d0 00 00 00       	add    eax,0xd0
c0014661:	c3                   	ret    

c0014662 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014662:	83 ec 0c             	sub    esp,0xc
c0014665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014669:	83 ec 08             	sub    esp,0x8
c001466c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014670:	50                   	push   eax
c0014671:	e8 e6 fe ff ff       	call   c001455c <Device::Device(char const*)>
c0014676:	83 c4 10             	add    esp,0x10
c0014679:	ba 24 ac 02 c0       	mov    edx,0xc002ac24
c001467e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014682:	89 10                	mov    DWORD PTR [eax],edx
c0014684:	90                   	nop
c0014685:	83 c4 0c             	add    esp,0xc
c0014688:	c3                   	ret    
c0014689:	90                   	nop

c001468a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001468a:	57                   	push   edi
c001468b:	56                   	push   esi
c001468c:	53                   	push   ebx
c001468d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014691:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014695:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014699:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001469f:	75 0c                	jne    c00146ad <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00146a1:	52                   	push   edx
c00146a2:	52                   	push   edx
c00146a3:	53                   	push   ebx
c00146a4:	56                   	push   esi
c00146a5:	e8 30 42 01 00       	call   c00288da <LinkedList<Device>::addElement(Device*)>
c00146aa:	83 c4 10             	add    esp,0x10
c00146ad:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00146b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00146b6:	74 12                	je     c00146ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00146b8:	50                   	push   eax
c00146b9:	57                   	push   edi
c00146ba:	56                   	push   esi
c00146bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00146be:	e8 c7 ff ff ff       	call   c001468a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00146c5:	83 c4 10             	add    esp,0x10
c00146c8:	eb e9                	jmp    c00146b3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00146ca:	5b                   	pop    ebx
c00146cb:	5e                   	pop    esi
c00146cc:	5f                   	pop    edi
c00146cd:	c3                   	ret    

c00146ce <getDevicesOfType(DeviceType)>:
c00146ce:	53                   	push   ebx
c00146cf:	83 ec 14             	sub    esp,0x14
c00146d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146d6:	53                   	push   ebx
c00146d7:	e8 da 42 01 00       	call   c00289b6 <LinkedList<Device>::LinkedList()>
c00146dc:	83 c4 0c             	add    esp,0xc
c00146df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146e3:	53                   	push   ebx
c00146e4:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c00146ea:	e8 9b ff ff ff       	call   c001468a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146ef:	89 d8                	mov    eax,ebx
c00146f1:	83 c4 18             	add    esp,0x18
c00146f4:	5b                   	pop    ebx
c00146f5:	c2 04 00             	ret    0x4

c00146f8 <HardDiskController::HardDiskController(char const*)>:
c00146f8:	83 ec 0c             	sub    esp,0xc
c00146fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ff:	83 ec 08             	sub    esp,0x8
c0014702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014706:	50                   	push   eax
c0014707:	e8 50 fe ff ff       	call   c001455c <Device::Device(char const*)>
c001470c:	83 c4 10             	add    esp,0x10
c001470f:	ba 50 ac 02 c0       	mov    edx,0xc002ac50
c0014714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014718:	89 10                	mov    DWORD PTR [eax],edx
c001471a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001471e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014728:	90                   	nop
c0014729:	83 c4 0c             	add    esp,0xc
c001472c:	c3                   	ret    
c001472d:	90                   	nop

c001472e <HardDiskController::~HardDiskController()>:
c001472e:	83 ec 0c             	sub    esp,0xc
c0014731:	ba 50 ac 02 c0       	mov    edx,0xc002ac50
c0014736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001473a:	89 10                	mov    DWORD PTR [eax],edx
c001473c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014740:	83 ec 0c             	sub    esp,0xc
c0014743:	50                   	push   eax
c0014744:	e8 f5 fa ff ff       	call   c001423e <Device::~Device()>
c0014749:	83 c4 10             	add    esp,0x10
c001474c:	90                   	nop
c001474d:	83 c4 0c             	add    esp,0xc
c0014750:	c3                   	ret    
c0014751:	90                   	nop

c0014752 <HardDiskController::~HardDiskController()>:
c0014752:	83 ec 0c             	sub    esp,0xc
c0014755:	83 ec 0c             	sub    esp,0xc
c0014758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001475c:	e8 cd ff ff ff       	call   c001472e <HardDiskController::~HardDiskController()>
c0014761:	83 c4 10             	add    esp,0x10
c0014764:	83 ec 08             	sub    esp,0x8
c0014767:	68 58 01 00 00       	push   0x158
c001476c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014770:	e8 f1 e6 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0014775:	83 c4 10             	add    esp,0x10
c0014778:	83 c4 0c             	add    esp,0xc
c001477b:	c3                   	ret    

c001477c <PhysicalDisk::eject()>:
c001477c:	83 ec 18             	sub    esp,0x18
c001477f:	68 74 ac 02 c0       	push   0xc002ac74
c0014784:	e8 bd e7 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0014789:	83 c8 ff             	or     eax,0xffffffff
c001478c:	83 c4 1c             	add    esp,0x1c
c001478f:	c3                   	ret    

c0014790 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014790:	83 ec 0c             	sub    esp,0xc
c0014793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014797:	83 ec 08             	sub    esp,0x8
c001479a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001479e:	50                   	push   eax
c001479f:	e8 b8 fd ff ff       	call   c001455c <Device::Device(char const*)>
c00147a4:	83 c4 10             	add    esp,0x10
c00147a7:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c00147ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b0:	89 10                	mov    DWORD PTR [eax],edx
c00147b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00147bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c1:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00147c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147cc:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00147d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147de:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00147e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147f2:	90                   	nop
c00147f3:	83 c4 0c             	add    esp,0xc
c00147f6:	c3                   	ret    
c00147f7:	90                   	nop

c00147f8 <PhysicalDisk::startCache()>:
c00147f8:	56                   	push   esi
c00147f9:	53                   	push   ebx
c00147fa:	83 ec 10             	sub    esp,0x10
c00147fd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014801:	6a 44                	push   0x44
c0014803:	e8 38 b0 ff ff       	call   c000f840 <malloc>
c0014808:	89 c6                	mov    esi,eax
c001480a:	58                   	pop    eax
c001480b:	5a                   	pop    edx
c001480c:	53                   	push   ebx
c001480d:	56                   	push   esi
c001480e:	e8 29 27 00 00       	call   c0016f3c <VCache::VCache(PhysicalDisk*)>
c0014813:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014819:	83 c4 14             	add    esp,0x14
c001481c:	5b                   	pop    ebx
c001481d:	5e                   	pop    esi
c001481e:	c3                   	ret    
c001481f:	90                   	nop

c0014820 <PhysicalDisk::~PhysicalDisk()>:
c0014820:	83 ec 0c             	sub    esp,0xc
c0014823:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c0014828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001482c:	89 10                	mov    DWORD PTR [eax],edx
c001482e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014832:	83 ec 0c             	sub    esp,0xc
c0014835:	50                   	push   eax
c0014836:	e8 03 fa ff ff       	call   c001423e <Device::~Device()>
c001483b:	83 c4 10             	add    esp,0x10
c001483e:	90                   	nop
c001483f:	83 c4 0c             	add    esp,0xc
c0014842:	c3                   	ret    
c0014843:	90                   	nop

c0014844 <PhysicalDisk::~PhysicalDisk()>:
c0014844:	83 ec 0c             	sub    esp,0xc
c0014847:	83 ec 0c             	sub    esp,0xc
c001484a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001484e:	e8 cd ff ff ff       	call   c0014820 <PhysicalDisk::~PhysicalDisk()>
c0014853:	83 c4 10             	add    esp,0x10
c0014856:	83 ec 08             	sub    esp,0x8
c0014859:	68 6c 01 00 00       	push   0x16c
c001485e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014862:	e8 ff e5 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0014867:	83 c4 10             	add    esp,0x10
c001486a:	83 c4 0c             	add    esp,0xc
c001486d:	c3                   	ret    

c001486e <FPU::FPU(char const*)>:
c001486e:	83 ec 0c             	sub    esp,0xc
c0014871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014875:	83 ec 08             	sub    esp,0x8
c0014878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001487c:	50                   	push   eax
c001487d:	e8 da fc ff ff       	call   c001455c <Device::Device(char const*)>
c0014882:	83 c4 10             	add    esp,0x10
c0014885:	ba e8 ac 02 c0       	mov    edx,0xc002ace8
c001488a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001488e:	89 10                	mov    DWORD PTR [eax],edx
c0014890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014894:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001489e:	90                   	nop
c001489f:	83 c4 0c             	add    esp,0xc
c00148a2:	c3                   	ret    
c00148a3:	90                   	nop

c00148a4 <FPU::~FPU()>:
c00148a4:	83 ec 0c             	sub    esp,0xc
c00148a7:	ba e8 ac 02 c0       	mov    edx,0xc002ace8
c00148ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148b0:	89 10                	mov    DWORD PTR [eax],edx
c00148b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148b6:	83 ec 0c             	sub    esp,0xc
c00148b9:	50                   	push   eax
c00148ba:	e8 7f f9 ff ff       	call   c001423e <Device::~Device()>
c00148bf:	83 c4 10             	add    esp,0x10
c00148c2:	90                   	nop
c00148c3:	83 c4 0c             	add    esp,0xc
c00148c6:	c3                   	ret    
c00148c7:	90                   	nop

c00148c8 <FPU::~FPU()>:
c00148c8:	83 ec 0c             	sub    esp,0xc
c00148cb:	83 ec 0c             	sub    esp,0xc
c00148ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148d2:	e8 cd ff ff ff       	call   c00148a4 <FPU::~FPU()>
c00148d7:	83 c4 10             	add    esp,0x10
c00148da:	83 ec 08             	sub    esp,0x8
c00148dd:	68 58 01 00 00       	push   0x158
c00148e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148e6:	e8 7b e5 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c00148eb:	83 c4 10             	add    esp,0x10
c00148ee:	83 c4 0c             	add    esp,0xc
c00148f1:	c3                   	ret    

c00148f2 <setupFPU()>:
c00148f2:	53                   	push   ebx
c00148f3:	83 ec 08             	sub    esp,0x8
c00148f6:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c00148fc:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014903:	74 19                	je     c001491e <setupFPU()+0x2c>
c0014905:	83 ec 0c             	sub    esp,0xc
c0014908:	68 58 01 00 00       	push   0x158
c001490d:	e8 2e af ff ff       	call   c000f840 <malloc>
c0014912:	89 c3                	mov    ebx,eax
c0014914:	89 04 24             	mov    DWORD PTR [esp],eax
c0014917:	e8 0c 0c 01 00       	call   c0025528 <AVX::AVX()>
c001491c:	eb 5b                	jmp    c0014979 <setupFPU()+0x87>
c001491e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014924:	84 c0                	test   al,al
c0014926:	79 19                	jns    c0014941 <setupFPU()+0x4f>
c0014928:	83 ec 0c             	sub    esp,0xc
c001492b:	68 58 01 00 00       	push   0x158
c0014930:	e8 0b af ff ff       	call   c000f840 <malloc>
c0014935:	89 c3                	mov    ebx,eax
c0014937:	89 04 24             	mov    DWORD PTR [esp],eax
c001493a:	e8 0f 0d 01 00       	call   c002564e <SSE::SSE()>
c001493f:	eb 38                	jmp    c0014979 <setupFPU()+0x87>
c0014941:	a8 20                	test   al,0x20
c0014943:	74 19                	je     c001495e <setupFPU()+0x6c>
c0014945:	83 ec 0c             	sub    esp,0xc
c0014948:	68 58 01 00 00       	push   0x158
c001494d:	e8 ee ae ff ff       	call   c000f840 <malloc>
c0014952:	89 c3                	mov    ebx,eax
c0014954:	89 04 24             	mov    DWORD PTR [esp],eax
c0014957:	e8 5c 0c 01 00       	call   c00255b8 <MMX::MMX()>
c001495c:	eb 1b                	jmp    c0014979 <setupFPU()+0x87>
c001495e:	a8 10                	test   al,0x10
c0014960:	74 1c                	je     c001497e <setupFPU()+0x8c>
c0014962:	83 ec 0c             	sub    esp,0xc
c0014965:	68 58 01 00 00       	push   0x158
c001496a:	e8 d1 ae ff ff       	call   c000f840 <malloc>
c001496f:	89 c3                	mov    ebx,eax
c0014971:	89 04 24             	mov    DWORD PTR [esp],eax
c0014974:	e8 63 0d 01 00       	call   c00256dc <x87::x87()>
c0014979:	83 c4 10             	add    esp,0x10
c001497c:	eb 24                	jmp    c00149a2 <setupFPU()+0xb0>
c001497e:	83 e0 ef             	and    eax,0xffffffef
c0014981:	83 ec 0c             	sub    esp,0xc
c0014984:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001498a:	68 d4 ac 02 c0       	push   0xc002acd4
c001498f:	e8 b2 e5 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0014994:	0f 20 c0             	mov    eax,cr0
c0014997:	83 c8 04             	or     eax,0x4
c001499a:	0f 22 c0             	mov    cr0,eax
c001499d:	31 db                	xor    ebx,ebx
c001499f:	83 c4 10             	add    esp,0x10
c00149a2:	89 d8                	mov    eax,ebx
c00149a4:	83 c4 08             	add    esp,0x8
c00149a7:	5b                   	pop    ebx
c00149a8:	c3                   	ret    
c00149a9:	90                   	nop

c00149aa <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00149aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00149ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00149b2:	c1 e0 04             	shl    eax,0x4
c00149b5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00149b9:	8d 50 10             	lea    edx,[eax+0x10]
c00149bc:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00149c2:	74 08                	je     c00149cc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00149c4:	83 c0 04             	add    eax,0x4
c00149c7:	39 d0                	cmp    eax,edx
c00149c9:	75 f1                	jne    c00149bc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00149cb:	c3                   	ret    
c00149cc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00149d6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00149e0:	eb e2                	jmp    c00149c4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00149e2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00149e2:	57                   	push   edi
c00149e3:	31 c0                	xor    eax,eax
c00149e5:	56                   	push   esi
c00149e6:	53                   	push   ebx
c00149e7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149ef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00149f3:	89 da                	mov    edx,ebx
c00149f5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00149f9:	c1 e2 04             	shl    edx,0x4
c00149fc:	01 ca                	add    edx,ecx
c00149fe:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014a06:	74 16                	je     c0014a1e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014a08:	40                   	inc    eax
c0014a09:	83 f8 04             	cmp    eax,0x4
c0014a0c:	75 f0                	jne    c00149fe <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014a0e:	c7 44 24 10 18 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad18
c0014a16:	5b                   	pop    ebx
c0014a17:	5e                   	pop    esi
c0014a18:	5f                   	pop    edi
c0014a19:	e9 c9 5b 00 00       	jmp    c001a5e7 <Krnl::panic(char const*)>
c0014a1e:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a21:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014a24:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a2a:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014a30:	5b                   	pop    ebx
c0014a31:	5e                   	pop    esi
c0014a32:	5f                   	pop    edi
c0014a33:	c3                   	ret    

c0014a34 <doubleFault(regs*, void*)>:
c0014a34:	55                   	push   ebp
c0014a35:	89 e5                	mov    ebp,esp
c0014a37:	83 ec 08             	sub    esp,0x8
c0014a3a:	83 ec 0c             	sub    esp,0xc
c0014a3d:	68 53 ad 02 c0       	push   0xc002ad53
c0014a42:	e8 a0 5b 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0014a47:	83 c4 10             	add    esp,0x10
c0014a4a:	90                   	nop
c0014a4b:	c9                   	leave  
c0014a4c:	c3                   	ret    
c0014a4d:	90                   	nop

c0014a4e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a4e:	56                   	push   esi
c0014a4f:	53                   	push   ebx
c0014a50:	50                   	push   eax
c0014a51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a55:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a59:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a5e:	75 35                	jne    c0014a95 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a60:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a63:	31 d2                	xor    edx,edx
c0014a65:	89 c1                	mov    ecx,eax
c0014a67:	c1 e1 04             	shl    ecx,0x4
c0014a6a:	01 f1                	add    ecx,esi
c0014a6c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a74:	74 3e                	je     c0014ab4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a76:	42                   	inc    edx
c0014a77:	83 fa 04             	cmp    edx,0x4
c0014a7a:	75 f0                	jne    c0014a6c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a7c:	83 ec 0c             	sub    esp,0xc
c0014a7f:	68 98 ad 02 c0       	push   0xc002ad98
c0014a84:	e8 5e 5b 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0014a89:	83 c4 10             	add    esp,0x10
c0014a8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a91:	5a                   	pop    edx
c0014a92:	5b                   	pop    ebx
c0014a93:	5e                   	pop    esi
c0014a94:	c3                   	ret    
c0014a95:	83 ec 0c             	sub    esp,0xc
c0014a98:	56                   	push   esi
c0014a99:	e8 ba fb ff ff       	call   c0014658 <Device::getName()>
c0014a9e:	83 c4 10             	add    esp,0x10
c0014aa1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014aa4:	75 ba                	jne    c0014a60 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014aa6:	83 fb 0f             	cmp    ebx,0xf
c0014aa9:	7f 29                	jg     c0014ad4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014aab:	0f b6 9b e0 d5 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2a20]
c0014ab2:	eb ac                	jmp    c0014a60 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ab4:	8d 04 82             	lea    eax,[edx+eax*4]
c0014ab7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014abb:	8d 04 86             	lea    eax,[esi+eax*4]
c0014abe:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014ac4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ac8:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014ace:	89 d8                	mov    eax,ebx
c0014ad0:	5a                   	pop    edx
c0014ad1:	5b                   	pop    ebx
c0014ad2:	5e                   	pop    esi
c0014ad3:	c3                   	ret    
c0014ad4:	83 ec 0c             	sub    esp,0xc
c0014ad7:	68 60 ad 02 c0       	push   0xc002ad60
c0014adc:	e8 06 5b 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0014ae1:	83 c4 10             	add    esp,0x10
c0014ae4:	e9 77 ff ff ff       	jmp    c0014a60 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ae9:	90                   	nop

c0014aea <InterruptController::clearAllHandlers(int, bool)>:
c0014aea:	56                   	push   esi
c0014aeb:	53                   	push   ebx
c0014aec:	52                   	push   edx
c0014aed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014af1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014af5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014afa:	75 61                	jne    c0014b5d <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014afc:	8d 46 20             	lea    eax,[esi+0x20]
c0014aff:	c1 e6 04             	shl    esi,0x4
c0014b02:	c1 e0 04             	shl    eax,0x4
c0014b05:	01 de                	add    esi,ebx
c0014b07:	01 d8                	add    eax,ebx
c0014b09:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014b13:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b1d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014b27:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014b31:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b3b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b45:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b4f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b59:	58                   	pop    eax
c0014b5a:	5b                   	pop    ebx
c0014b5b:	5e                   	pop    esi
c0014b5c:	c3                   	ret    
c0014b5d:	83 ec 0c             	sub    esp,0xc
c0014b60:	53                   	push   ebx
c0014b61:	e8 f2 fa ff ff       	call   c0014658 <Device::getName()>
c0014b66:	83 c4 10             	add    esp,0x10
c0014b69:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b6c:	75 8e                	jne    c0014afc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b6e:	83 fe 0f             	cmp    esi,0xf
c0014b71:	7f 09                	jg     c0014b7c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b73:	0f b6 b6 e0 d5 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2a20]
c0014b7a:	eb 80                	jmp    c0014afc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b7c:	83 ec 0c             	sub    esp,0xc
c0014b7f:	68 d4 ad 02 c0       	push   0xc002add4
c0014b84:	e8 5e 5a 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0014b89:	83 c4 10             	add    esp,0x10
c0014b8c:	e9 6b ff ff ff       	jmp    c0014afc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b91:	90                   	nop

c0014b92 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b92:	56                   	push   esi
c0014b93:	53                   	push   ebx
c0014b94:	52                   	push   edx
c0014b95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b9d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ba2:	75 3a                	jne    c0014bde <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014ba4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ba8:	8d 50 20             	lea    edx,[eax+0x20]
c0014bab:	c1 e2 04             	shl    edx,0x4
c0014bae:	8d 04 16             	lea    eax,[esi+edx*1]
c0014bb1:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014bb5:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014bbb:	74 0b                	je     c0014bc8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014bbd:	83 c0 04             	add    eax,0x4
c0014bc0:	39 d0                	cmp    eax,edx
c0014bc2:	75 f1                	jne    c0014bb5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014bc4:	58                   	pop    eax
c0014bc5:	5b                   	pop    ebx
c0014bc6:	5e                   	pop    esi
c0014bc7:	c3                   	ret    
c0014bc8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014bd2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014bdc:	eb df                	jmp    c0014bbd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014bde:	83 ec 0c             	sub    esp,0xc
c0014be1:	56                   	push   esi
c0014be2:	e8 71 fa ff ff       	call   c0014658 <Device::getName()>
c0014be7:	83 c4 10             	add    esp,0x10
c0014bea:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014bed:	75 b5                	jne    c0014ba4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bef:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014bf4:	7f 11                	jg     c0014c07 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014bf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bfa:	0f b6 80 e0 d5 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2a20]
c0014c01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c05:	eb 9d                	jmp    c0014ba4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c07:	83 ec 0c             	sub    esp,0xc
c0014c0a:	68 d4 ad 02 c0       	push   0xc002add4
c0014c0f:	e8 d3 59 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0014c14:	83 c4 10             	add    esp,0x10
c0014c17:	eb 8b                	jmp    c0014ba4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014c19 <nmiHandler(regs*, void*)>:
c0014c19:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c22:	e9 65 a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014c27 <int_handler>:
c0014c27:	55                   	push   ebp
c0014c28:	57                   	push   edi
c0014c29:	56                   	push   esi
c0014c2a:	53                   	push   ebx
c0014c2b:	83 ec 0c             	sub    esp,0xc
c0014c2e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014c32:	80 3d 04 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f04,0x0
c0014c39:	74 0b                	je     c0014c46 <int_handler+0x1f>
c0014c3b:	fa                   	cli    
c0014c3c:	f4                   	hlt    
c0014c3d:	80 3d 04 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f04,0x0
c0014c44:	75 f5                	jne    c0014c3b <int_handler+0x14>
c0014c46:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014c4b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c54:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c5a:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c5d:	83 f8 17             	cmp    eax,0x17
c0014c60:	77 13                	ja     c0014c75 <int_handler+0x4e>
c0014c62:	83 ec 08             	sub    esp,0x8
c0014c65:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c67:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c6a:	0f b6 c0             	movzx  eax,al
c0014c6d:	50                   	push   eax
c0014c6e:	57                   	push   edi
c0014c6f:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c72:	83 c4 10             	add    esp,0x10
c0014c75:	83 c3 15             	add    ebx,0x15
c0014c78:	c1 e3 04             	shl    ebx,0x4
c0014c7b:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c7f:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c86:	31 db                	xor    ebx,ebx
c0014c88:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c8c:	85 c0                	test   eax,eax
c0014c8e:	74 13                	je     c0014ca3 <int_handler+0x7c>
c0014c90:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c93:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c97:	74 1c                	je     c0014cb5 <int_handler+0x8e>
c0014c99:	83 ec 08             	sub    esp,0x8
c0014c9c:	52                   	push   edx
c0014c9d:	56                   	push   esi
c0014c9e:	ff d0                	call   eax
c0014ca0:	83 c4 10             	add    esp,0x10
c0014ca3:	43                   	inc    ebx
c0014ca4:	83 fb 04             	cmp    ebx,0x4
c0014ca7:	75 df                	jne    c0014c88 <int_handler+0x61>
c0014ca9:	83 c4 0c             	add    esp,0xc
c0014cac:	31 c0                	xor    eax,eax
c0014cae:	5b                   	pop    ebx
c0014caf:	31 d2                	xor    edx,edx
c0014cb1:	5e                   	pop    esi
c0014cb2:	5f                   	pop    edi
c0014cb3:	5d                   	pop    ebp
c0014cb4:	c3                   	ret    
c0014cb5:	83 ec 08             	sub    esp,0x8
c0014cb8:	52                   	push   edx
c0014cb9:	56                   	push   esi
c0014cba:	ff d0                	call   eax
c0014cbc:	83 c4 10             	add    esp,0x10
c0014cbf:	83 c4 0c             	add    esp,0xc
c0014cc2:	5b                   	pop    ebx
c0014cc3:	5e                   	pop    esi
c0014cc4:	5f                   	pop    edi
c0014cc5:	5d                   	pop    ebp
c0014cc6:	c3                   	ret    
c0014cc7:	90                   	nop

c0014cc8 <InterruptController::InterruptController(char const*)>:
c0014cc8:	83 ec 1c             	sub    esp,0x1c
c0014ccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ccf:	83 ec 08             	sub    esp,0x8
c0014cd2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014cd6:	50                   	push   eax
c0014cd7:	e8 80 f8 ff ff       	call   c001455c <Device::Device(char const*)>
c0014cdc:	83 c4 10             	add    esp,0x10
c0014cdf:	ba 70 b0 02 c0       	mov    edx,0xc002b070
c0014ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ce8:	89 10                	mov    DWORD PTR [eax],edx
c0014cea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cee:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014cf8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d00:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014d08:	7f 5e                	jg     c0014d68 <InterruptController::InterruptController(char const*)+0xa0>
c0014d0a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d12:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d17:	7f 49                	jg     c0014d62 <InterruptController::InterruptController(char const*)+0x9a>
c0014d19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d21:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d2c:	01 ca                	add    edx,ecx
c0014d2e:	83 c2 54             	add    edx,0x54
c0014d31:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d41:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d4c:	01 ca                	add    edx,ecx
c0014d4e:	81 c2 54 04 00 00    	add    edx,0x454
c0014d54:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d5c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d60:	eb b0                	jmp    c0014d12 <InterruptController::InterruptController(char const*)+0x4a>
c0014d62:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d66:	eb 98                	jmp    c0014d00 <InterruptController::InterruptController(char const*)+0x38>
c0014d68:	90                   	nop
c0014d69:	83 c4 1c             	add    esp,0x1c
c0014d6c:	c3                   	ret    
c0014d6d:	90                   	nop

c0014d6e <InterruptController::~InterruptController()>:
c0014d6e:	83 ec 0c             	sub    esp,0xc
c0014d71:	ba 70 b0 02 c0       	mov    edx,0xc002b070
c0014d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d7a:	89 10                	mov    DWORD PTR [eax],edx
c0014d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d80:	83 ec 0c             	sub    esp,0xc
c0014d83:	50                   	push   eax
c0014d84:	e8 b5 f4 ff ff       	call   c001423e <Device::~Device()>
c0014d89:	83 c4 10             	add    esp,0x10
c0014d8c:	90                   	nop
c0014d8d:	83 c4 0c             	add    esp,0xc
c0014d90:	c3                   	ret    
c0014d91:	90                   	nop

c0014d92 <InterruptController::~InterruptController()>:
c0014d92:	83 ec 0c             	sub    esp,0xc
c0014d95:	83 ec 0c             	sub    esp,0xc
c0014d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d9c:	e8 cd ff ff ff       	call   c0014d6e <InterruptController::~InterruptController()>
c0014da1:	83 c4 10             	add    esp,0x10
c0014da4:	83 ec 08             	sub    esp,0x8
c0014da7:	68 58 21 00 00       	push   0x2158
c0014dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014db0:	e8 b1 e0 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0014db5:	83 c4 10             	add    esp,0x10
c0014db8:	83 c4 0c             	add    esp,0xc
c0014dbb:	c3                   	ret    

c0014dbc <displayDebugInfo(regs*)>:
c0014dbc:	55                   	push   ebp
c0014dbd:	57                   	push   edi
c0014dbe:	56                   	push   esi
c0014dbf:	53                   	push   ebx
c0014dc0:	83 ec 24             	sub    esp,0x24
c0014dc3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014dc7:	0f 20 c2             	mov    edx,cr0
c0014dca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014dce:	0f 20 d7             	mov    edi,cr2
c0014dd1:	0f 20 de             	mov    esi,cr3
c0014dd4:	0f 20 e5             	mov    ebp,cr4
c0014dd7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014dda:	68 0e ae 02 c0       	push   0xc002ae0e
c0014ddf:	e8 62 e1 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0014de4:	59                   	pop    ecx
c0014de5:	58                   	pop    eax
c0014de6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014de9:	68 19 ae 02 c0       	push   0xc002ae19
c0014dee:	e8 53 e1 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0014df3:	58                   	pop    eax
c0014df4:	5a                   	pop    edx
c0014df5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014df8:	68 24 ae 02 c0       	push   0xc002ae24
c0014dfd:	e8 44 e1 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0014e02:	59                   	pop    ecx
c0014e03:	58                   	pop    eax
c0014e04:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e07:	68 2f ae 02 c0       	push   0xc002ae2f
c0014e0c:	e8 35 e1 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0014e11:	58                   	pop    eax
c0014e12:	5a                   	pop    edx
c0014e13:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e16:	68 3a ae 02 c0       	push   0xc002ae3a
c0014e1b:	e8 26 e1 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0014e20:	59                   	pop    ecx
c0014e21:	58                   	pop    eax
c0014e22:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014e25:	68 45 ae 02 c0       	push   0xc002ae45
c0014e2a:	e8 17 e1 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0014e2f:	58                   	pop    eax
c0014e30:	5a                   	pop    edx
c0014e31:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e34:	68 50 ae 02 c0       	push   0xc002ae50
c0014e39:	e8 08 e1 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0014e3e:	59                   	pop    ecx
c0014e3f:	58                   	pop    eax
c0014e40:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e43:	68 5b ae 02 c0       	push   0xc002ae5b
c0014e48:	e8 f9 e0 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0014e4d:	58                   	pop    eax
c0014e4e:	5a                   	pop    edx
c0014e4f:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e52:	68 66 ae 02 c0       	push   0xc002ae66
c0014e57:	e8 ea e0 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0014e5c:	59                   	pop    ecx
c0014e5d:	58                   	pop    eax
c0014e5e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e61:	68 75 ae 02 c0       	push   0xc002ae75
c0014e66:	e8 db e0 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0014e6b:	58                   	pop    eax
c0014e6c:	5a                   	pop    edx
c0014e6d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e70:	68 80 ae 02 c0       	push   0xc002ae80
c0014e75:	e8 cc e0 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0014e7a:	59                   	pop    ecx
c0014e7b:	58                   	pop    eax
c0014e7c:	57                   	push   edi
c0014e7d:	68 8b ae 02 c0       	push   0xc002ae8b
c0014e82:	e8 bf e0 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0014e87:	58                   	pop    eax
c0014e88:	5a                   	pop    edx
c0014e89:	56                   	push   esi
c0014e8a:	68 96 ae 02 c0       	push   0xc002ae96
c0014e8f:	e8 b2 e0 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0014e94:	59                   	pop    ecx
c0014e95:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014e9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea0:	e8 ac be ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c0014ea5:	58                   	pop    eax
c0014ea6:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ea9:	5a                   	pop    edx
c0014eaa:	c1 e0 05             	shl    eax,0x5
c0014ead:	05 40 d3 02 c0       	add    eax,0xc002d340
c0014eb2:	50                   	push   eax
c0014eb3:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014eb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ebe:	e8 ad c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014ec3:	59                   	pop    ecx
c0014ec4:	58                   	pop    eax
c0014ec5:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014eca:	68 a1 ae 02 c0       	push   0xc002aea1
c0014ecf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed5:	e8 96 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014eda:	58                   	pop    eax
c0014edb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ee0:	5a                   	pop    edx
c0014ee1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ee4:	83 c0 0c             	add    eax,0xc
c0014ee7:	50                   	push   eax
c0014ee8:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014eed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef3:	e8 78 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014ef8:	59                   	pop    ecx
c0014ef9:	58                   	pop    eax
c0014efa:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014eff:	68 aa ae 02 c0       	push   0xc002aeaa
c0014f04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f0a:	e8 61 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f0f:	58                   	pop    eax
c0014f10:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014f15:	5a                   	pop    edx
c0014f16:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f1f:	e8 72 c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014f24:	59                   	pop    ecx
c0014f25:	58                   	pop    eax
c0014f26:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014f2b:	68 b2 ae 02 c0       	push   0xc002aeb2
c0014f30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f36:	e8 35 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f3b:	58                   	pop    eax
c0014f3c:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014f41:	5a                   	pop    edx
c0014f42:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4b:	e8 46 c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014f50:	59                   	pop    ecx
c0014f51:	58                   	pop    eax
c0014f52:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014f57:	68 ba ae 02 c0       	push   0xc002aeba
c0014f5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f62:	e8 09 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f67:	58                   	pop    eax
c0014f68:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014f6d:	5a                   	pop    edx
c0014f6e:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f77:	e8 1a c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014f7c:	59                   	pop    ecx
c0014f7d:	58                   	pop    eax
c0014f7e:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014f83:	68 c2 ae 02 c0       	push   0xc002aec2
c0014f88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f8e:	e8 dd c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f93:	58                   	pop    eax
c0014f94:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014f99:	5a                   	pop    edx
c0014f9a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa3:	e8 ee c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014fa8:	59                   	pop    ecx
c0014fa9:	58                   	pop    eax
c0014faa:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014faf:	68 ca ae 02 c0       	push   0xc002aeca
c0014fb4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fba:	e8 b1 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014fbf:	58                   	pop    eax
c0014fc0:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014fc5:	5a                   	pop    edx
c0014fc6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014fc9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fcf:	e8 c2 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014fd4:	59                   	pop    ecx
c0014fd5:	58                   	pop    eax
c0014fd6:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014fdb:	68 d2 ae 02 c0       	push   0xc002aed2
c0014fe0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe6:	e8 85 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014feb:	58                   	pop    eax
c0014fec:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0014ff1:	5a                   	pop    edx
c0014ff2:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014ff5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ffb:	e8 96 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015000:	59                   	pop    ecx
c0015001:	58                   	pop    eax
c0015002:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0015007:	68 da ae 02 c0       	push   0xc002aeda
c001500c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015012:	e8 59 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015017:	58                   	pop    eax
c0015018:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001501d:	5a                   	pop    edx
c001501e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015022:	52                   	push   edx
c0015023:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015029:	e8 68 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001502e:	59                   	pop    ecx
c001502f:	58                   	pop    eax
c0015030:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0015035:	68 e3 ae 02 c0       	push   0xc002aee3
c001503a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015040:	e8 2b c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015045:	58                   	pop    eax
c0015046:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001504b:	5a                   	pop    edx
c001504c:	57                   	push   edi
c001504d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015053:	e8 3e c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015058:	59                   	pop    ecx
c0015059:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001505e:	5f                   	pop    edi
c001505f:	68 eb ae 02 c0       	push   0xc002aeeb
c0015064:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506a:	e8 01 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001506f:	58                   	pop    eax
c0015070:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0015075:	5a                   	pop    edx
c0015076:	56                   	push   esi
c0015077:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507d:	e8 14 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015082:	59                   	pop    ecx
c0015083:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0015088:	5e                   	pop    esi
c0015089:	68 f3 ae 02 c0       	push   0xc002aef3
c001508e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015094:	e8 d7 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015099:	5f                   	pop    edi
c001509a:	58                   	pop    eax
c001509b:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c00150a0:	55                   	push   ebp
c00150a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a7:	e8 ea c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00150ac:	58                   	pop    eax
c00150ad:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c00150b2:	5a                   	pop    edx
c00150b3:	68 fb ae 02 c0       	push   0xc002aefb
c00150b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150be:	e8 ad c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00150c3:	0f 21 c0             	mov    eax,db0
c00150c6:	59                   	pop    ecx
c00150c7:	5e                   	pop    esi
c00150c8:	50                   	push   eax
c00150c9:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c00150ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d4:	e8 bd c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00150d9:	5f                   	pop    edi
c00150da:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c00150df:	5d                   	pop    ebp
c00150e0:	68 04 af 02 c0       	push   0xc002af04
c00150e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150eb:	e8 80 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00150f0:	0f 21 c8             	mov    eax,db1
c00150f3:	5a                   	pop    edx
c00150f4:	59                   	pop    ecx
c00150f5:	50                   	push   eax
c00150f6:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c00150fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015101:	e8 90 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015106:	5e                   	pop    esi
c0015107:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001510c:	5f                   	pop    edi
c001510d:	68 0c af 02 c0       	push   0xc002af0c
c0015112:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015118:	e8 53 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001511d:	0f 21 d0             	mov    eax,db2
c0015120:	5d                   	pop    ebp
c0015121:	5a                   	pop    edx
c0015122:	50                   	push   eax
c0015123:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0015128:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001512e:	e8 63 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015133:	59                   	pop    ecx
c0015134:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0015139:	5e                   	pop    esi
c001513a:	68 14 af 02 c0       	push   0xc002af14
c001513f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015145:	e8 26 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001514a:	0f 21 d8             	mov    eax,db3
c001514d:	5f                   	pop    edi
c001514e:	5d                   	pop    ebp
c001514f:	50                   	push   eax
c0015150:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0015155:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515b:	e8 36 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015160:	58                   	pop    eax
c0015161:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0015166:	5a                   	pop    edx
c0015167:	68 1c af 02 c0       	push   0xc002af1c
c001516c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015172:	e8 f9 bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015177:	0f 21 f0             	mov    eax,db6
c001517a:	59                   	pop    ecx
c001517b:	5e                   	pop    esi
c001517c:	50                   	push   eax
c001517d:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0015182:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015188:	e8 09 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001518d:	5f                   	pop    edi
c001518e:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0015193:	5d                   	pop    ebp
c0015194:	68 24 af 02 c0       	push   0xc002af24
c0015199:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001519f:	e8 cc bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00151a4:	0f 21 f8             	mov    eax,db7
c00151a7:	5a                   	pop    edx
c00151a8:	59                   	pop    ecx
c00151a9:	50                   	push   eax
c00151aa:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c00151af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b5:	e8 dc bf ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00151ba:	5e                   	pop    esi
c00151bb:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151be:	e8 06 85 00 00       	call   c001d6c9 <Thr::getDriverNameFromAddress(unsigned long)>
c00151c3:	83 c4 10             	add    esp,0x10
c00151c6:	85 c0                	test   eax,eax
c00151c8:	74 7d                	je     c0015247 <displayDebugInfo(regs*)+0x48b>
c00151ca:	89 c6                	mov    esi,eax
c00151cc:	50                   	push   eax
c00151cd:	50                   	push   eax
c00151ce:	56                   	push   esi
c00151cf:	68 2c af 02 c0       	push   0xc002af2c
c00151d4:	e8 6d dd ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00151d9:	5a                   	pop    edx
c00151da:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c00151df:	59                   	pop    ecx
c00151e0:	68 3a af 02 c0       	push   0xc002af3a
c00151e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151eb:	e8 80 bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00151f0:	5f                   	pop    edi
c00151f1:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c00151f6:	5d                   	pop    ebp
c00151f7:	56                   	push   esi
c00151f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151fe:	e8 6d bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015203:	58                   	pop    eax
c0015204:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0015209:	5a                   	pop    edx
c001520a:	68 46 af 02 c0       	push   0xc002af46
c001520f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015215:	e8 56 bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001521a:	59                   	pop    ecx
c001521b:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0015220:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015226:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015229:	e8 d2 84 00 00       	call   c001d700 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001522e:	5b                   	pop    ebx
c001522f:	5d                   	pop    ebp
c0015230:	50                   	push   eax
c0015231:	57                   	push   edi
c0015232:	e8 5f bf ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015237:	58                   	pop    eax
c0015238:	5a                   	pop    edx
c0015239:	56                   	push   esi
c001523a:	68 52 af 02 c0       	push   0xc002af52
c001523f:	e8 02 dd ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0015244:	83 c4 10             	add    esp,0x10
c0015247:	fa                   	cli    
c0015248:	f4                   	hlt    
c0015249:	eb fe                	jmp    c0015249 <displayDebugInfo(regs*)+0x48d>

c001524b <x87EmulHandler(regs*, void*)>:
c001524b:	53                   	push   ebx
c001524c:	83 ec 14             	sub    esp,0x14
c001524f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015253:	53                   	push   ebx
c0015254:	e8 fd a7 00 00       	call   c001fa56 <Vm::x87Handler(regs*)>
c0015259:	83 c4 10             	add    esp,0x10
c001525c:	84 c0                	test   al,al
c001525e:	74 05                	je     c0015265 <x87EmulHandler(regs*, void*)+0x1a>
c0015260:	83 c4 08             	add    esp,0x8
c0015263:	5b                   	pop    ebx
c0015264:	c3                   	ret    
c0015265:	83 ec 0c             	sub    esp,0xc
c0015268:	68 62 af 02 c0       	push   0xc002af62
c001526d:	e8 d4 dc ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0015272:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015275:	e8 42 fb ff ff       	call   c0014dbc <displayDebugInfo(regs*)>

c001527a <gpFault(regs*, void*)>:
c001527a:	53                   	push   ebx
c001527b:	83 ec 14             	sub    esp,0x14
c001527e:	c7 05 40 e5 02 c0 d3 ed 01 c0 	mov    DWORD PTR ds:0xc002e540,0xc001edd3
c0015288:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001528c:	53                   	push   ebx
c001528d:	e8 41 9b 00 00       	call   c001edd3 <Vm::faultHandler(regs*)>
c0015292:	83 c4 10             	add    esp,0x10
c0015295:	84 c0                	test   al,al
c0015297:	74 05                	je     c001529e <gpFault(regs*, void*)+0x24>
c0015299:	83 c4 08             	add    esp,0x8
c001529c:	5b                   	pop    ebx
c001529d:	c3                   	ret    
c001529e:	83 ec 0c             	sub    esp,0xc
c00152a1:	68 78 af 02 c0       	push   0xc002af78
c00152a6:	e8 9b dc ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00152ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152ae:	e8 09 fb ff ff       	call   c0014dbc <displayDebugInfo(regs*)>

c00152b3 <pgFault(regs*, void*)>:
c00152b3:	83 ec 14             	sub    esp,0x14
c00152b6:	0f 20 d0             	mov    eax,cr2
c00152b9:	50                   	push   eax
c00152ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152c2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152c8:	e8 07 d9 ff ff       	call   c0012bd4 <VAS::tryLoadBackOffDisk(unsigned long)>
c00152cd:	83 c4 10             	add    esp,0x10
c00152d0:	84 c0                	test   al,al
c00152d2:	74 04                	je     c00152d8 <pgFault(regs*, void*)+0x25>
c00152d4:	83 c4 0c             	add    esp,0xc
c00152d7:	c3                   	ret    
c00152d8:	83 ec 0c             	sub    esp,0xc
c00152db:	68 93 af 02 c0       	push   0xc002af93
c00152e0:	e8 61 dc ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00152e5:	58                   	pop    eax
c00152e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152ea:	e8 cd fa ff ff       	call   c0014dbc <displayDebugInfo(regs*)>

c00152ef <otherISRHandler(regs*, void*)>:
c00152ef:	53                   	push   ebx
c00152f0:	83 ec 0c             	sub    esp,0xc
c00152f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00152f7:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00152fa:	50                   	push   eax
c00152fb:	50                   	push   eax
c00152fc:	68 a0 af 02 c0       	push   0xc002afa0
c0015301:	e8 40 dc ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0015306:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015309:	e8 ae fa ff ff       	call   c0014dbc <displayDebugInfo(regs*)>

c001530e <opcodeFault(regs*, void*)>:
c001530e:	55                   	push   ebp
c001530f:	89 e5                	mov    ebp,esp
c0015311:	56                   	push   esi
c0015312:	53                   	push   ebx
c0015313:	83 ec 40             	sub    esp,0x40
c0015316:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001531b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015321:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015327:	84 c0                	test   al,al
c0015329:	74 24                	je     c001534f <opcodeFault(regs*, void*)+0x41>
c001532b:	83 ec 0c             	sub    esp,0xc
c001532e:	68 c0 af 02 c0       	push   0xc002afc0
c0015333:	e8 0e dc ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0015338:	83 c4 10             	add    esp,0x10
c001533b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001533e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015341:	8d 50 19             	lea    edx,[eax+0x19]
c0015344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015347:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001534a:	e9 be 05 00 00       	jmp    c001590d <opcodeFault(regs*, void*)+0x5ff>
c001534f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015352:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015355:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015358:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001535c:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015360:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015363:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015366:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015369:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536c:	8a 00                	mov    al,BYTE PTR [eax]
c001536e:	3c f0                	cmp    al,0xf0
c0015370:	75 17                	jne    c0015389 <opcodeFault(regs*, void*)+0x7b>
c0015372:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015378:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001537b:	8d 50 01             	lea    edx,[eax+0x1]
c001537e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015381:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015384:	e9 da 00 00 00       	jmp    c0015463 <opcodeFault(regs*, void*)+0x155>
c0015389:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538c:	8a 00                	mov    al,BYTE PTR [eax]
c001538e:	3c f2                	cmp    al,0xf2
c0015390:	74 09                	je     c001539b <opcodeFault(regs*, void*)+0x8d>
c0015392:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015395:	8a 00                	mov    al,BYTE PTR [eax]
c0015397:	3c f3                	cmp    al,0xf3
c0015399:	75 1b                	jne    c00153b6 <opcodeFault(regs*, void*)+0xa8>
c001539b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001539f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a8:	8d 50 01             	lea    edx,[eax+0x1]
c00153ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153b1:	e9 ad 00 00 00       	jmp    c0015463 <opcodeFault(regs*, void*)+0x155>
c00153b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b9:	8a 00                	mov    al,BYTE PTR [eax]
c00153bb:	3c 66                	cmp    al,0x66
c00153bd:	75 1f                	jne    c00153de <opcodeFault(regs*, void*)+0xd0>
c00153bf:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153c3:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153c7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153d0:	8d 50 01             	lea    edx,[eax+0x1]
c00153d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153d9:	e9 85 00 00 00       	jmp    c0015463 <opcodeFault(regs*, void*)+0x155>
c00153de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e1:	8a 00                	mov    al,BYTE PTR [eax]
c00153e3:	3c 67                	cmp    al,0x67
c00153e5:	75 18                	jne    c00153ff <opcodeFault(regs*, void*)+0xf1>
c00153e7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153eb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f4:	8d 50 01             	lea    edx,[eax+0x1]
c00153f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153fd:	eb 64                	jmp    c0015463 <opcodeFault(regs*, void*)+0x155>
c00153ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015402:	8a 00                	mov    al,BYTE PTR [eax]
c0015404:	3c 2e                	cmp    al,0x2e
c0015406:	74 09                	je     c0015411 <opcodeFault(regs*, void*)+0x103>
c0015408:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540b:	8a 00                	mov    al,BYTE PTR [eax]
c001540d:	3c 3e                	cmp    al,0x3e
c001540f:	75 18                	jne    c0015429 <opcodeFault(regs*, void*)+0x11b>
c0015411:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015415:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001541e:	8d 50 01             	lea    edx,[eax+0x1]
c0015421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015424:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015427:	eb 3a                	jmp    c0015463 <opcodeFault(regs*, void*)+0x155>
c0015429:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542c:	8a 00                	mov    al,BYTE PTR [eax]
c001542e:	3c 36                	cmp    al,0x36
c0015430:	74 1b                	je     c001544d <opcodeFault(regs*, void*)+0x13f>
c0015432:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015435:	8a 00                	mov    al,BYTE PTR [eax]
c0015437:	3c 26                	cmp    al,0x26
c0015439:	74 12                	je     c001544d <opcodeFault(regs*, void*)+0x13f>
c001543b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543e:	8a 00                	mov    al,BYTE PTR [eax]
c0015440:	3c 64                	cmp    al,0x64
c0015442:	74 09                	je     c001544d <opcodeFault(regs*, void*)+0x13f>
c0015444:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015447:	8a 00                	mov    al,BYTE PTR [eax]
c0015449:	3c 65                	cmp    al,0x65
c001544b:	75 16                	jne    c0015463 <opcodeFault(regs*, void*)+0x155>
c001544d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015451:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015454:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015457:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001545a:	8d 50 01             	lea    edx,[eax+0x1]
c001545d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015460:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015463:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015466:	8a 00                	mov    al,BYTE PTR [eax]
c0015468:	3c 0f                	cmp    al,0xf
c001546a:	0f 85 ad 00 00 00    	jne    c001551d <opcodeFault(regs*, void*)+0x20f>
c0015470:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015473:	40                   	inc    eax
c0015474:	8a 00                	mov    al,BYTE PTR [eax]
c0015476:	3c c2                	cmp    al,0xc2
c0015478:	74 0e                	je     c0015488 <opcodeFault(regs*, void*)+0x17a>
c001547a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547d:	40                   	inc    eax
c001547e:	8a 00                	mov    al,BYTE PTR [eax]
c0015480:	3c c3                	cmp    al,0xc3
c0015482:	0f 85 95 00 00 00    	jne    c001551d <opcodeFault(regs*, void*)+0x20f>
c0015488:	83 ec 0c             	sub    esp,0xc
c001548b:	68 e3 af 02 c0       	push   0xc002afe3
c0015490:	e8 b1 da ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0015495:	83 c4 10             	add    esp,0x10
c0015498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001549e:	8d 50 01             	lea    edx,[eax+0x1]
c00154a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154a7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ad:	8a 00                	mov    al,BYTE PTR [eax]
c00154af:	8d 50 fe             	lea    edx,[eax-0x2]
c00154b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b5:	88 10                	mov    BYTE PTR [eax],dl
c00154b7:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154ba:	50                   	push   eax
c00154bb:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154be:	50                   	push   eax
c00154bf:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154c2:	50                   	push   eax
c00154c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154c6:	e8 e3 47 00 00       	call   c0019cae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154cb:	83 c4 10             	add    esp,0x10
c00154ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154d4:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154d7:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154da:	01 d0                	add    eax,edx
c00154dc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154e5:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154e8:	48                   	dec    eax
c00154e9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ef:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00154f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f8:	83 ec 04             	sub    esp,0x4
c00154fb:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00154fe:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015501:	50                   	push   eax
c0015502:	e8 ad ac fe ff       	call   c00001b4 <voodooXADD>
c0015507:	83 c4 10             	add    esp,0x10
c001550a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001550d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015510:	01 c2                	add    edx,eax
c0015512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015515:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015518:	e9 f0 03 00 00       	jmp    c001590d <opcodeFault(regs*, void*)+0x5ff>
c001551d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015520:	8a 00                	mov    al,BYTE PTR [eax]
c0015522:	3c 0f                	cmp    al,0xf
c0015524:	0f 85 8b 01 00 00    	jne    c00156b5 <opcodeFault(regs*, void*)+0x3a7>
c001552a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552d:	40                   	inc    eax
c001552e:	8a 00                	mov    al,BYTE PTR [eax]
c0015530:	3c c7                	cmp    al,0xc7
c0015532:	0f 86 7d 01 00 00    	jbe    c00156b5 <opcodeFault(regs*, void*)+0x3a7>
c0015538:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553b:	40                   	inc    eax
c001553c:	8a 00                	mov    al,BYTE PTR [eax]
c001553e:	3c cf                	cmp    al,0xcf
c0015540:	0f 87 6f 01 00 00    	ja     c00156b5 <opcodeFault(regs*, void*)+0x3a7>
c0015546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015549:	40                   	inc    eax
c001554a:	8a 00                	mov    al,BYTE PTR [eax]
c001554c:	83 c0 38             	add    eax,0x38
c001554f:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015552:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015556:	75 0b                	jne    c0015563 <opcodeFault(regs*, void*)+0x255>
c0015558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001555e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015561:	eb 75                	jmp    c00155d8 <opcodeFault(regs*, void*)+0x2ca>
c0015563:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015567:	75 0b                	jne    c0015574 <opcodeFault(regs*, void*)+0x266>
c0015569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001556f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015572:	eb 64                	jmp    c00155d8 <opcodeFault(regs*, void*)+0x2ca>
c0015574:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015578:	75 0b                	jne    c0015585 <opcodeFault(regs*, void*)+0x277>
c001557a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015580:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015583:	eb 53                	jmp    c00155d8 <opcodeFault(regs*, void*)+0x2ca>
c0015585:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015589:	75 0b                	jne    c0015596 <opcodeFault(regs*, void*)+0x288>
c001558b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015591:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015594:	eb 42                	jmp    c00155d8 <opcodeFault(regs*, void*)+0x2ca>
c0015596:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001559a:	75 0b                	jne    c00155a7 <opcodeFault(regs*, void*)+0x299>
c001559c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00155a2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155a5:	eb 31                	jmp    c00155d8 <opcodeFault(regs*, void*)+0x2ca>
c00155a7:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155ab:	75 0b                	jne    c00155b8 <opcodeFault(regs*, void*)+0x2aa>
c00155ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155b6:	eb 20                	jmp    c00155d8 <opcodeFault(regs*, void*)+0x2ca>
c00155b8:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155bc:	75 0b                	jne    c00155c9 <opcodeFault(regs*, void*)+0x2bb>
c00155be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155c4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155c7:	eb 0f                	jmp    c00155d8 <opcodeFault(regs*, void*)+0x2ca>
c00155c9:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155cd:	75 09                	jne    c00155d8 <opcodeFault(regs*, void*)+0x2ca>
c00155cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155d5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155d8:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155dc:	74 10                	je     c00155ee <opcodeFault(regs*, void*)+0x2e0>
c00155de:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155e5:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155ec:	eb 2d                	jmp    c001561b <opcodeFault(regs*, void*)+0x30d>
c00155ee:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155f1:	c1 e0 18             	shl    eax,0x18
c00155f4:	89 c2                	mov    edx,eax
c00155f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155f9:	c1 e0 08             	shl    eax,0x8
c00155fc:	25 00 00 ff 00       	and    eax,0xff0000
c0015601:	09 c2                	or     edx,eax
c0015603:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015606:	c1 e8 08             	shr    eax,0x8
c0015609:	25 00 ff 00 00       	and    eax,0xff00
c001560e:	09 c2                	or     edx,eax
c0015610:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015613:	c1 e8 18             	shr    eax,0x18
c0015616:	09 d0                	or     eax,edx
c0015618:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001561b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001561f:	75 0b                	jne    c001562c <opcodeFault(regs*, void*)+0x31e>
c0015621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015624:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015627:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001562a:	eb 75                	jmp    c00156a1 <opcodeFault(regs*, void*)+0x393>
c001562c:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015630:	75 0b                	jne    c001563d <opcodeFault(regs*, void*)+0x32f>
c0015632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015635:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015638:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001563b:	eb 64                	jmp    c00156a1 <opcodeFault(regs*, void*)+0x393>
c001563d:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015641:	75 0b                	jne    c001564e <opcodeFault(regs*, void*)+0x340>
c0015643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015646:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015649:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001564c:	eb 53                	jmp    c00156a1 <opcodeFault(regs*, void*)+0x393>
c001564e:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015652:	75 0b                	jne    c001565f <opcodeFault(regs*, void*)+0x351>
c0015654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015657:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001565a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001565d:	eb 42                	jmp    c00156a1 <opcodeFault(regs*, void*)+0x393>
c001565f:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015663:	75 0b                	jne    c0015670 <opcodeFault(regs*, void*)+0x362>
c0015665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015668:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001566b:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001566e:	eb 31                	jmp    c00156a1 <opcodeFault(regs*, void*)+0x393>
c0015670:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015674:	75 0b                	jne    c0015681 <opcodeFault(regs*, void*)+0x373>
c0015676:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015679:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001567c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001567f:	eb 20                	jmp    c00156a1 <opcodeFault(regs*, void*)+0x393>
c0015681:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015685:	75 0b                	jne    c0015692 <opcodeFault(regs*, void*)+0x384>
c0015687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001568d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015690:	eb 0f                	jmp    c00156a1 <opcodeFault(regs*, void*)+0x393>
c0015692:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015696:	75 09                	jne    c00156a1 <opcodeFault(regs*, void*)+0x393>
c0015698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001569e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00156a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156a7:	8d 50 02             	lea    edx,[eax+0x2]
c00156aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156b0:	e9 58 02 00 00       	jmp    c001590d <opcodeFault(regs*, void*)+0x5ff>
c00156b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156b8:	8a 00                	mov    al,BYTE PTR [eax]
c00156ba:	3c 0f                	cmp    al,0xf
c00156bc:	0f 85 76 01 00 00    	jne    c0015838 <opcodeFault(regs*, void*)+0x52a>
c00156c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c5:	40                   	inc    eax
c00156c6:	8a 00                	mov    al,BYTE PTR [eax]
c00156c8:	3c c7                	cmp    al,0xc7
c00156ca:	0f 85 68 01 00 00    	jne    c0015838 <opcodeFault(regs*, void*)+0x52a>
c00156d0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156d9:	8d 50 01             	lea    edx,[eax+0x1]
c00156dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156df:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156e2:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156e5:	50                   	push   eax
c00156e6:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156e9:	50                   	push   eax
c00156ea:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156ed:	50                   	push   eax
c00156ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156f1:	e8 b8 45 00 00       	call   c0019cae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00156f6:	83 c4 10             	add    esp,0x10
c00156f9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00156fc:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00156ff:	83 f0 01             	xor    eax,0x1
c0015702:	84 c0                	test   al,al
c0015704:	0f 84 2e 01 00 00    	je     c0015838 <opcodeFault(regs*, void*)+0x52a>
c001570a:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001570d:	3c 01                	cmp    al,0x1
c001570f:	0f 85 23 01 00 00    	jne    c0015838 <opcodeFault(regs*, void*)+0x52a>
c0015715:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015718:	83 f0 01             	xor    eax,0x1
c001571b:	84 c0                	test   al,al
c001571d:	0f 84 15 01 00 00    	je     c0015838 <opcodeFault(regs*, void*)+0x52a>
c0015723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015726:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015729:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001572c:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015733:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015736:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015739:	89 c2                	mov    edx,eax
c001573b:	b8 00 00 00 00       	mov    eax,0x0
c0015740:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015743:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015749:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001574c:	ba 00 00 00 00       	mov    edx,0x0
c0015751:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015754:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015757:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001575d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015760:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015767:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001576a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001576d:	89 c2                	mov    edx,eax
c001576f:	b8 00 00 00 00       	mov    eax,0x0
c0015774:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015777:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001577a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015780:	ba 00 00 00 00       	mov    edx,0x0
c0015785:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015788:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001578b:	e8 32 86 00 00       	call   c001ddc2 <lockScheduler()>
c0015790:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015793:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015796:	8b 00                	mov    eax,DWORD PTR [eax]
c0015798:	89 c1                	mov    ecx,eax
c001579a:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001579d:	89 cb                	mov    ebx,ecx
c001579f:	89 d0                	mov    eax,edx
c00157a1:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157a4:	89 c6                	mov    esi,eax
c00157a6:	89 f0                	mov    eax,esi
c00157a8:	09 d8                	or     eax,ebx
c00157aa:	85 c0                	test   eax,eax
c00157ac:	75 21                	jne    c00157cf <opcodeFault(regs*, void*)+0x4c1>
c00157ae:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157b1:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157b4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157b7:	89 01                	mov    DWORD PTR [ecx],eax
c00157b9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157c2:	83 c8 40             	or     eax,0x40
c00157c5:	89 c2                	mov    edx,eax
c00157c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ca:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157cd:	eb 3e                	jmp    c001580d <opcodeFault(regs*, void*)+0x4ff>
c00157cf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157d2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157da:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157dd:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157e6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157e9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157ec:	89 d0                	mov    eax,edx
c00157ee:	31 d2                	xor    edx,edx
c00157f0:	89 c3                	mov    ebx,eax
c00157f2:	89 d6                	mov    esi,edx
c00157f4:	89 da                	mov    edx,ebx
c00157f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f9:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00157fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015802:	83 e0 bf             	and    eax,0xffffffbf
c0015805:	89 c2                	mov    edx,eax
c0015807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580a:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001580d:	e8 b2 85 00 00       	call   c001ddc4 <unlockScheduler()>
c0015812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015815:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015818:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001581b:	01 c2                	add    edx,eax
c001581d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015820:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015823:	83 ec 0c             	sub    esp,0xc
c0015826:	68 f2 af 02 c0       	push   0xc002aff2
c001582b:	e8 16 d7 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0015830:	83 c4 10             	add    esp,0x10
c0015833:	e9 d5 00 00 00       	jmp    c001590d <opcodeFault(regs*, void*)+0x5ff>
c0015838:	83 ec 0c             	sub    esp,0xc
c001583b:	68 05 b0 02 c0       	push   0xc002b005
c0015840:	e8 01 d7 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0015845:	83 c4 10             	add    esp,0x10
c0015848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001584e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015851:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015854:	c1 e0 04             	shl    eax,0x4
c0015857:	01 d0                	add    eax,edx
c0015859:	83 c0 03             	add    eax,0x3
c001585c:	8a 00                	mov    al,BYTE PTR [eax]
c001585e:	0f b6 d8             	movzx  ebx,al
c0015861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015864:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015867:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001586d:	c1 e0 04             	shl    eax,0x4
c0015870:	01 d0                	add    eax,edx
c0015872:	83 c0 02             	add    eax,0x2
c0015875:	8a 00                	mov    al,BYTE PTR [eax]
c0015877:	0f b6 c8             	movzx  ecx,al
c001587a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015883:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015886:	c1 e0 04             	shl    eax,0x4
c0015889:	01 d0                	add    eax,edx
c001588b:	40                   	inc    eax
c001588c:	8a 00                	mov    al,BYTE PTR [eax]
c001588e:	0f b6 d0             	movzx  edx,al
c0015891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015894:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001589d:	c1 e0 04             	shl    eax,0x4
c00158a0:	01 f0                	add    eax,esi
c00158a2:	8a 00                	mov    al,BYTE PTR [eax]
c00158a4:	0f b6 c0             	movzx  eax,al
c00158a7:	83 ec 0c             	sub    esp,0xc
c00158aa:	53                   	push   ebx
c00158ab:	51                   	push   ecx
c00158ac:	52                   	push   edx
c00158ad:	50                   	push   eax
c00158ae:	68 18 b0 02 c0       	push   0xc002b018
c00158b3:	e8 8e d6 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00158b8:	83 c4 20             	add    esp,0x20
c00158bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158be:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158c1:	83 c0 03             	add    eax,0x3
c00158c4:	8a 00                	mov    al,BYTE PTR [eax]
c00158c6:	0f b6 d8             	movzx  ebx,al
c00158c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158cf:	83 c0 02             	add    eax,0x2
c00158d2:	8a 00                	mov    al,BYTE PTR [eax]
c00158d4:	0f b6 c8             	movzx  ecx,al
c00158d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158da:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158dd:	40                   	inc    eax
c00158de:	8a 00                	mov    al,BYTE PTR [eax]
c00158e0:	0f b6 d0             	movzx  edx,al
c00158e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158e9:	8a 00                	mov    al,BYTE PTR [eax]
c00158eb:	0f b6 c0             	movzx  eax,al
c00158ee:	83 ec 0c             	sub    esp,0xc
c00158f1:	53                   	push   ebx
c00158f2:	51                   	push   ecx
c00158f3:	52                   	push   edx
c00158f4:	50                   	push   eax
c00158f5:	68 40 b0 02 c0       	push   0xc002b040
c00158fa:	e8 47 d6 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00158ff:	83 c4 20             	add    esp,0x20
c0015902:	83 ec 0c             	sub    esp,0xc
c0015905:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015908:	e8 af f4 ff ff       	call   c0014dbc <displayDebugInfo(regs*)>
c001590d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015910:	5b                   	pop    ebx
c0015911:	5e                   	pop    esi
c0015912:	5d                   	pop    ebp
c0015913:	c3                   	ret    

c0015914 <displayProgramFault(char const*)>:
c0015914:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015919:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001591c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015922:	85 c0                	test   eax,eax
c0015924:	74 15                	je     c001593b <displayProgramFault(char const*)+0x27>
c0015926:	83 ec 0c             	sub    esp,0xc
c0015929:	6a 04                	push   0x4
c001592b:	6a 0f                	push   0xf
c001592d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015931:	50                   	push   eax
c0015932:	e8 fb b4 ff ff       	call   c0010e32 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015937:	83 c4 1c             	add    esp,0x1c
c001593a:	c3                   	ret    
c001593b:	c3                   	ret    

c001593c <setupInterruptController()>:
c001593c:	55                   	push   ebp
c001593d:	89 e5                	mov    ebp,esp
c001593f:	53                   	push   ebx
c0015940:	83 ec 24             	sub    esp,0x24
c0015943:	b8 00 00 00 00       	mov    eax,0x0
c0015948:	85 c0                	test   eax,eax
c001594a:	0f 95 c0             	setne  al
c001594d:	84 c0                	test   al,al
c001594f:	74 5b                	je     c00159ac <setupInterruptController()+0x70>
c0015951:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015958:	83 ec 0c             	sub    esp,0xc
c001595b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001595e:	e8 dd 9e ff ff       	call   c000f840 <malloc>
c0015963:	83 c4 10             	add    esp,0x10
c0015966:	89 c3                	mov    ebx,eax
c0015968:	83 ec 0c             	sub    esp,0xc
c001596b:	53                   	push   ebx
c001596c:	e8 a9 ff 00 00       	call   c002591a <APIC::APIC()>
c0015971:	83 c4 10             	add    esp,0x10
c0015974:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015977:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001597a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001597d:	8b 00                	mov    eax,DWORD PTR [eax]
c001597f:	83 c0 08             	add    eax,0x8
c0015982:	8b 00                	mov    eax,DWORD PTR [eax]
c0015984:	6a 00                	push   0x0
c0015986:	6a 00                	push   0x0
c0015988:	6a 00                	push   0x0
c001598a:	52                   	push   edx
c001598b:	ff d0                	call   eax
c001598d:	83 c4 10             	add    esp,0x10
c0015990:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0015995:	83 ec 08             	sub    esp,0x8
c0015998:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001599b:	50                   	push   eax
c001599c:	e8 cb e9 ff ff       	call   c001436c <Device::addChild(Device*)>
c00159a1:	83 c4 10             	add    esp,0x10
c00159a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159a7:	e9 52 03 00 00       	jmp    c0015cfe <setupInterruptController()+0x3c2>
c00159ac:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00159b1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159b7:	83 e0 01             	and    eax,0x1
c00159ba:	84 c0                	test   al,al
c00159bc:	0f 95 c0             	setne  al
c00159bf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159c2:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159c9:	83 ec 0c             	sub    esp,0xc
c00159cc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159cf:	e8 6c 9e ff ff       	call   c000f840 <malloc>
c00159d4:	83 c4 10             	add    esp,0x10
c00159d7:	89 c3                	mov    ebx,eax
c00159d9:	83 ec 0c             	sub    esp,0xc
c00159dc:	53                   	push   ebx
c00159dd:	e8 90 04 01 00       	call   c0025e72 <PIC::PIC()>
c00159e2:	83 c4 10             	add    esp,0x10
c00159e5:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159e8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f0:	83 c0 08             	add    eax,0x8
c00159f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f5:	6a 00                	push   0x0
c00159f7:	6a 00                	push   0x0
c00159f9:	6a 00                	push   0x0
c00159fb:	52                   	push   edx
c00159fc:	ff d0                	call   eax
c00159fe:	83 c4 10             	add    esp,0x10
c0015a01:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a05:	74 73                	je     c0015a7a <setupInterruptController()+0x13e>
c0015a07:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0f:	83 c0 0c             	add    eax,0xc
c0015a12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a14:	6a 00                	push   0x0
c0015a16:	6a 00                	push   0x0
c0015a18:	6a 00                	push   0x0
c0015a1a:	52                   	push   edx
c0015a1b:	ff d0                	call   eax
c0015a1d:	83 c4 10             	add    esp,0x10
c0015a20:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a24:	74 15                	je     c0015a3b <setupInterruptController()+0xff>
c0015a26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a29:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2b:	83 c0 04             	add    eax,0x4
c0015a2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a30:	83 ec 0c             	sub    esp,0xc
c0015a33:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a36:	ff d0                	call   eax
c0015a38:	83 c4 10             	add    esp,0x10
c0015a3b:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a42:	83 ec 0c             	sub    esp,0xc
c0015a45:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a48:	e8 f3 9d ff ff       	call   c000f840 <malloc>
c0015a4d:	83 c4 10             	add    esp,0x10
c0015a50:	89 c3                	mov    ebx,eax
c0015a52:	83 ec 0c             	sub    esp,0xc
c0015a55:	53                   	push   ebx
c0015a56:	e8 bf fe 00 00       	call   c002591a <APIC::APIC()>
c0015a5b:	83 c4 10             	add    esp,0x10
c0015a5e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a61:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a69:	83 c0 08             	add    eax,0x8
c0015a6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6e:	6a 00                	push   0x0
c0015a70:	6a 00                	push   0x0
c0015a72:	6a 00                	push   0x0
c0015a74:	52                   	push   edx
c0015a75:	ff d0                	call   eax
c0015a77:	83 c4 10             	add    esp,0x10
c0015a7a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0015a7f:	83 ec 08             	sub    esp,0x8
c0015a82:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a85:	50                   	push   eax
c0015a86:	e8 e1 e8 ff ff       	call   c001436c <Device::addChild(Device*)>
c0015a8b:	83 c4 10             	add    esp,0x10
c0015a8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a93:	83 c0 24             	add    eax,0x24
c0015a96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a98:	6a 00                	push   0x0
c0015a9a:	68 ef 52 01 c0       	push   0xc00152ef
c0015a9f:	6a 00                	push   0x0
c0015aa1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa4:	ff d0                	call   eax
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aae:	83 c0 24             	add    eax,0x24
c0015ab1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab3:	6a 00                	push   0x0
c0015ab5:	68 ef 52 01 c0       	push   0xc00152ef
c0015aba:	6a 01                	push   0x1
c0015abc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015abf:	ff d0                	call   eax
c0015ac1:	83 c4 10             	add    esp,0x10
c0015ac4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac9:	83 c0 24             	add    eax,0x24
c0015acc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ace:	6a 00                	push   0x0
c0015ad0:	68 19 4c 01 c0       	push   0xc0014c19
c0015ad5:	6a 02                	push   0x2
c0015ad7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ada:	ff d0                	call   eax
c0015adc:	83 c4 10             	add    esp,0x10
c0015adf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae4:	83 c0 24             	add    eax,0x24
c0015ae7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae9:	6a 00                	push   0x0
c0015aeb:	68 ef 52 01 c0       	push   0xc00152ef
c0015af0:	6a 03                	push   0x3
c0015af2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af5:	ff d0                	call   eax
c0015af7:	83 c4 10             	add    esp,0x10
c0015afa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015afd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aff:	83 c0 24             	add    eax,0x24
c0015b02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b04:	6a 00                	push   0x0
c0015b06:	68 ef 52 01 c0       	push   0xc00152ef
c0015b0b:	6a 04                	push   0x4
c0015b0d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b10:	ff d0                	call   eax
c0015b12:	83 c4 10             	add    esp,0x10
c0015b15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b18:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1a:	83 c0 24             	add    eax,0x24
c0015b1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1f:	6a 00                	push   0x0
c0015b21:	68 ef 52 01 c0       	push   0xc00152ef
c0015b26:	6a 05                	push   0x5
c0015b28:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b2b:	ff d0                	call   eax
c0015b2d:	83 c4 10             	add    esp,0x10
c0015b30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b33:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b35:	83 c0 24             	add    eax,0x24
c0015b38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3a:	6a 00                	push   0x0
c0015b3c:	68 0e 53 01 c0       	push   0xc001530e
c0015b41:	6a 06                	push   0x6
c0015b43:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b46:	ff d0                	call   eax
c0015b48:	83 c4 10             	add    esp,0x10
c0015b4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b50:	83 c0 24             	add    eax,0x24
c0015b53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b55:	6a 00                	push   0x0
c0015b57:	68 4b 52 01 c0       	push   0xc001524b
c0015b5c:	6a 07                	push   0x7
c0015b5e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b61:	ff d0                	call   eax
c0015b63:	83 c4 10             	add    esp,0x10
c0015b66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b69:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6b:	83 c0 24             	add    eax,0x24
c0015b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b70:	6a 00                	push   0x0
c0015b72:	68 34 4a 01 c0       	push   0xc0014a34
c0015b77:	6a 08                	push   0x8
c0015b79:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b7c:	ff d0                	call   eax
c0015b7e:	83 c4 10             	add    esp,0x10
c0015b81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b84:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b86:	83 c0 24             	add    eax,0x24
c0015b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8b:	6a 00                	push   0x0
c0015b8d:	68 ef 52 01 c0       	push   0xc00152ef
c0015b92:	6a 09                	push   0x9
c0015b94:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b97:	ff d0                	call   eax
c0015b99:	83 c4 10             	add    esp,0x10
c0015b9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba1:	83 c0 24             	add    eax,0x24
c0015ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba6:	6a 00                	push   0x0
c0015ba8:	68 ef 52 01 c0       	push   0xc00152ef
c0015bad:	6a 0a                	push   0xa
c0015baf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb2:	ff d0                	call   eax
c0015bb4:	83 c4 10             	add    esp,0x10
c0015bb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bba:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbc:	83 c0 24             	add    eax,0x24
c0015bbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc1:	6a 00                	push   0x0
c0015bc3:	68 ef 52 01 c0       	push   0xc00152ef
c0015bc8:	6a 0b                	push   0xb
c0015bca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bcd:	ff d0                	call   eax
c0015bcf:	83 c4 10             	add    esp,0x10
c0015bd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd7:	83 c0 24             	add    eax,0x24
c0015bda:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bdc:	6a 00                	push   0x0
c0015bde:	68 ef 52 01 c0       	push   0xc00152ef
c0015be3:	6a 0c                	push   0xc
c0015be5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be8:	ff d0                	call   eax
c0015bea:	83 c4 10             	add    esp,0x10
c0015bed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf2:	83 c0 24             	add    eax,0x24
c0015bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf7:	6a 00                	push   0x0
c0015bf9:	68 7a 52 01 c0       	push   0xc001527a
c0015bfe:	6a 0d                	push   0xd
c0015c00:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c03:	ff d0                	call   eax
c0015c05:	83 c4 10             	add    esp,0x10
c0015c08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0d:	83 c0 24             	add    eax,0x24
c0015c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c12:	6a 00                	push   0x0
c0015c14:	68 b3 52 01 c0       	push   0xc00152b3
c0015c19:	6a 0e                	push   0xe
c0015c1b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c1e:	ff d0                	call   eax
c0015c20:	83 c4 10             	add    esp,0x10
c0015c23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c26:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c28:	83 c0 24             	add    eax,0x24
c0015c2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2d:	6a 00                	push   0x0
c0015c2f:	68 ef 52 01 c0       	push   0xc00152ef
c0015c34:	6a 0f                	push   0xf
c0015c36:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c39:	ff d0                	call   eax
c0015c3b:	83 c4 10             	add    esp,0x10
c0015c3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c41:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c43:	83 c0 24             	add    eax,0x24
c0015c46:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c48:	6a 00                	push   0x0
c0015c4a:	68 ef 52 01 c0       	push   0xc00152ef
c0015c4f:	6a 10                	push   0x10
c0015c51:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c54:	ff d0                	call   eax
c0015c56:	83 c4 10             	add    esp,0x10
c0015c59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5e:	83 c0 24             	add    eax,0x24
c0015c61:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c63:	6a 00                	push   0x0
c0015c65:	68 ef 52 01 c0       	push   0xc00152ef
c0015c6a:	6a 11                	push   0x11
c0015c6c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c6f:	ff d0                	call   eax
c0015c71:	83 c4 10             	add    esp,0x10
c0015c74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c77:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c79:	83 c0 24             	add    eax,0x24
c0015c7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7e:	6a 00                	push   0x0
c0015c80:	68 ef 52 01 c0       	push   0xc00152ef
c0015c85:	6a 12                	push   0x12
c0015c87:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c8a:	ff d0                	call   eax
c0015c8c:	83 c4 10             	add    esp,0x10
c0015c8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c92:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c94:	83 c0 24             	add    eax,0x24
c0015c97:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c99:	6a 00                	push   0x0
c0015c9b:	68 ef 52 01 c0       	push   0xc00152ef
c0015ca0:	6a 13                	push   0x13
c0015ca2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ca5:	ff d0                	call   eax
c0015ca7:	83 c4 10             	add    esp,0x10
c0015caa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cad:	8b 00                	mov    eax,DWORD PTR [eax]
c0015caf:	83 c0 24             	add    eax,0x24
c0015cb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb4:	6a 00                	push   0x0
c0015cb6:	68 ef 52 01 c0       	push   0xc00152ef
c0015cbb:	6a 14                	push   0x14
c0015cbd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cc0:	ff d0                	call   eax
c0015cc2:	83 c4 10             	add    esp,0x10
c0015cc5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cca:	83 c0 24             	add    eax,0x24
c0015ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ccf:	6a 00                	push   0x0
c0015cd1:	68 ef 52 01 c0       	push   0xc00152ef
c0015cd6:	6a 1e                	push   0x1e
c0015cd8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cdb:	ff d0                	call   eax
c0015cdd:	83 c4 10             	add    esp,0x10
c0015ce0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce5:	83 c0 24             	add    eax,0x24
c0015ce8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cea:	6a 00                	push   0x0
c0015cec:	68 71 c7 01 c0       	push   0xc001c771
c0015cf1:	6a 60                	push   0x60
c0015cf3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cf6:	ff d0                	call   eax
c0015cf8:	83 c4 10             	add    esp,0x10
c0015cfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cfe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d01:	c9                   	leave  
c0015d02:	c3                   	ret    
c0015d03:	90                   	nop

c0015d04 <InterruptController::convertLegacyIRQNumber(int)>:
c0015d04:	55                   	push   ebp
c0015d05:	89 e5                	mov    ebp,esp
c0015d07:	83 ec 08             	sub    esp,0x8
c0015d0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d0d:	83 ec 0c             	sub    esp,0xc
c0015d10:	50                   	push   eax
c0015d11:	e8 42 e9 ff ff       	call   c0014658 <Device::getName()>
c0015d16:	83 c4 10             	add    esp,0x10
c0015d19:	8a 00                	mov    al,BYTE PTR [eax]
c0015d1b:	3c 41                	cmp    al,0x41
c0015d1d:	0f 94 c0             	sete   al
c0015d20:	84 c0                	test   al,al
c0015d22:	74 28                	je     c0015d4c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d24:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d28:	7f 12                	jg     c0015d3c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d2d:	05 e0 d5 02 c0       	add    eax,0xc002d5e0
c0015d32:	8a 00                	mov    al,BYTE PTR [eax]
c0015d34:	0f b6 c0             	movzx  eax,al
c0015d37:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d3a:	eb 10                	jmp    c0015d4c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d3c:	83 ec 0c             	sub    esp,0xc
c0015d3f:	68 60 ad 02 c0       	push   0xc002ad60
c0015d44:	e8 9e 48 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0015d49:	83 c4 10             	add    esp,0x10
c0015d4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d4f:	c9                   	leave  
c0015d50:	c3                   	ret    
c0015d51:	90                   	nop

c0015d52 <startGUI(void*)>:
c0015d52:	55                   	push   ebp
c0015d53:	89 e5                	mov    ebp,esp
c0015d55:	53                   	push   ebx
c0015d56:	83 ec 04             	sub    esp,0x4
c0015d59:	e8 66 80 00 00       	call   c001ddc4 <unlockScheduler()>
c0015d5e:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015d64:	83 ec 08             	sub    esp,0x8
c0015d67:	6a 01                	push   0x1
c0015d69:	68 b0 b0 02 c0       	push   0xc002b0b0
c0015d6e:	e8 a7 79 00 00       	call   c001d71a <Thr::loadDLL(char const*, bool)>
c0015d73:	83 c4 10             	add    esp,0x10
c0015d76:	83 ec 08             	sub    esp,0x8
c0015d79:	53                   	push   ebx
c0015d7a:	50                   	push   eax
c0015d7b:	e8 ce 7b 00 00       	call   c001d94e <Thr::executeDLL(unsigned long, void*)>
c0015d80:	83 c4 10             	add    esp,0x10
c0015d83:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015d89:	83 ec 08             	sub    esp,0x8
c0015d8c:	6a 01                	push   0x1
c0015d8e:	68 ca b0 02 c0       	push   0xc002b0ca
c0015d93:	e8 82 79 00 00       	call   c001d71a <Thr::loadDLL(char const*, bool)>
c0015d98:	83 c4 10             	add    esp,0x10
c0015d9b:	83 ec 08             	sub    esp,0x8
c0015d9e:	53                   	push   ebx
c0015d9f:	50                   	push   eax
c0015da0:	e8 a9 7b 00 00       	call   c001d94e <Thr::executeDLL(unsigned long, void*)>
c0015da5:	83 c4 10             	add    esp,0x10
c0015da8:	90                   	nop
c0015da9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dac:	c9                   	leave  
c0015dad:	c3                   	ret    

c0015dae <startGUIVESA(void*)>:
c0015dae:	55                   	push   ebp
c0015daf:	89 e5                	mov    ebp,esp
c0015db1:	53                   	push   ebx
c0015db2:	83 ec 04             	sub    esp,0x4
c0015db5:	e8 0a 80 00 00       	call   c001ddc4 <unlockScheduler()>
c0015dba:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015dc0:	83 ec 08             	sub    esp,0x8
c0015dc3:	6a 01                	push   0x1
c0015dc5:	68 e4 b0 02 c0       	push   0xc002b0e4
c0015dca:	e8 4b 79 00 00       	call   c001d71a <Thr::loadDLL(char const*, bool)>
c0015dcf:	83 c4 10             	add    esp,0x10
c0015dd2:	83 ec 08             	sub    esp,0x8
c0015dd5:	53                   	push   ebx
c0015dd6:	50                   	push   eax
c0015dd7:	e8 72 7b 00 00       	call   c001d94e <Thr::executeDLL(unsigned long, void*)>
c0015ddc:	83 c4 10             	add    esp,0x10
c0015ddf:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015de5:	83 ec 08             	sub    esp,0x8
c0015de8:	6a 01                	push   0x1
c0015dea:	68 ca b0 02 c0       	push   0xc002b0ca
c0015def:	e8 26 79 00 00       	call   c001d71a <Thr::loadDLL(char const*, bool)>
c0015df4:	83 c4 10             	add    esp,0x10
c0015df7:	83 ec 08             	sub    esp,0x8
c0015dfa:	53                   	push   ebx
c0015dfb:	50                   	push   eax
c0015dfc:	e8 4d 7b 00 00       	call   c001d94e <Thr::executeDLL(unsigned long, void*)>
c0015e01:	83 c4 10             	add    esp,0x10
c0015e04:	90                   	nop
c0015e05:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e08:	c9                   	leave  
c0015e09:	c3                   	ret    

c0015e0a <sendKeyToTerminal(unsigned char)>:
c0015e0a:	55                   	push   ebp
c0015e0b:	89 e5                	mov    ebp,esp
c0015e0d:	83 ec 28             	sub    esp,0x28
c0015e10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e13:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e16:	a1 64 e4 02 c0       	mov    eax,ds:0xc002e464
c0015e1b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e1f:	83 ec 08             	sub    esp,0x8
c0015e22:	52                   	push   edx
c0015e23:	50                   	push   eax
c0015e24:	e8 45 b5 ff ff       	call   c001136e <VgaText::receiveKey(unsigned char)>
c0015e29:	83 c4 10             	add    esp,0x10
c0015e2c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e30:	75 41                	jne    c0015e73 <sendKeyToTerminal(unsigned char)+0x69>
c0015e32:	e8 b2 7f 00 00       	call   c001dde9 <lockStuff()>
c0015e37:	a1 60 e5 02 c0       	mov    eax,ds:0xc002e560
c0015e3c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e3f:	c7 05 60 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e560,0x0
c0015e49:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e4d:	74 1f                	je     c0015e6e <sendKeyToTerminal(unsigned char)+0x64>
c0015e4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e52:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e58:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e5b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e5e:	83 ec 0c             	sub    esp,0xc
c0015e61:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e64:	e8 71 85 00 00       	call   c001e3da <unblockTask(ThreadControlBlock*)>
c0015e69:	83 c4 10             	add    esp,0x10
c0015e6c:	eb db                	jmp    c0015e49 <sendKeyToTerminal(unsigned char)+0x3f>
c0015e6e:	e8 10 83 00 00       	call   c001e183 <unlockStuff()>
c0015e73:	90                   	nop
c0015e74:	c9                   	leave  
c0015e75:	c3                   	ret    

c0015e76 <sendKeyboardToken(KeyboardToken)>:
c0015e76:	55                   	push   ebp
c0015e77:	89 e5                	mov    ebp,esp
c0015e79:	83 ec 18             	sub    esp,0x18
c0015e7c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e82:	0f b7 c0             	movzx  eax,ax
c0015e85:	83 f2 01             	xor    edx,0x1
c0015e88:	88 90 80 e5 02 c0    	mov    BYTE PTR [eax-0x3ffd1a80],dl
c0015e8e:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0015e93:	85 c0                	test   eax,eax
c0015e95:	74 24                	je     c0015ebb <sendKeyboardToken(KeyboardToken)+0x45>
c0015e97:	8b 0d 68 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e568
c0015e9d:	83 ec 04             	sub    esp,0x4
c0015ea0:	68 80 e5 02 c0       	push   0xc002e580
c0015ea5:	83 ec 08             	sub    esp,0x8
c0015ea8:	89 e2                	mov    edx,esp
c0015eaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ead:	89 02                	mov    DWORD PTR [edx],eax
c0015eaf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015eb2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015eb6:	ff d1                	call   ecx
c0015eb8:	83 c4 10             	add    esp,0x10
c0015ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ebe:	66 3d 03 02          	cmp    ax,0x203
c0015ec2:	75 07                	jne    c0015ecb <sendKeyboardToken(KeyboardToken)+0x55>
c0015ec4:	a0 80 e6 02 c0       	mov    al,ds:0xc002e680
c0015ec9:	84 c0                	test   al,al
c0015ecb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ecf:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ed2:	a0 88 e9 02 c0       	mov    al,ds:0xc002e988
c0015ed7:	38 c2                	cmp    dl,al
c0015ed9:	74 1c                	je     c0015ef7 <sendKeyboardToken(KeyboardToken)+0x81>
c0015edb:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ede:	a2 88 e9 02 c0       	mov    ds:0xc002e988,al
c0015ee3:	a0 88 e9 02 c0       	mov    al,ds:0xc002e988
c0015ee8:	0f b6 c0             	movzx  eax,al
c0015eeb:	83 ec 0c             	sub    esp,0xc
c0015eee:	50                   	push   eax
c0015eef:	e8 da a6 ff ff       	call   c00105ce <setTerminalScrollLock(bool)>
c0015ef4:	83 c4 10             	add    esp,0x10
c0015ef7:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015efa:	84 c0                	test   al,al
c0015efc:	0f 84 ae 00 00 00    	je     c0015fb0 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f05:	66 3d 10 03          	cmp    ax,0x310
c0015f09:	75 06                	jne    c0015f11 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f0b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f14:	66 3d 11 03          	cmp    ax,0x311
c0015f18:	75 06                	jne    c0015f20 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f1a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f23:	66 3d 12 03          	cmp    ax,0x312
c0015f27:	75 06                	jne    c0015f2f <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f29:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f32:	66 3d 13 03          	cmp    ax,0x313
c0015f36:	75 06                	jne    c0015f3e <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f38:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f41:	66 3d 14 03          	cmp    ax,0x314
c0015f45:	75 06                	jne    c0015f4d <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f47:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f50:	66 3d 15 03          	cmp    ax,0x315
c0015f54:	75 06                	jne    c0015f5c <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f56:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5f:	66 3d 16 03          	cmp    ax,0x316
c0015f63:	75 06                	jne    c0015f6b <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f65:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6e:	66 3d 17 03          	cmp    ax,0x317
c0015f72:	75 06                	jne    c0015f7a <sendKeyboardToken(KeyboardToken)+0x104>
c0015f74:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7d:	66 3d 18 03          	cmp    ax,0x318
c0015f81:	75 06                	jne    c0015f89 <sendKeyboardToken(KeyboardToken)+0x113>
c0015f83:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8c:	66 3d 19 03          	cmp    ax,0x319
c0015f90:	75 06                	jne    c0015f98 <sendKeyboardToken(KeyboardToken)+0x122>
c0015f92:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015f98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9b:	66 3d 1a 03          	cmp    ax,0x31a
c0015f9f:	0f 85 c9 00 00 00    	jne    c001606e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fa5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fab:	e9 be 00 00 00       	jmp    c001606e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb3:	66 3d 10 03          	cmp    ax,0x310
c0015fb7:	75 0a                	jne    c0015fc3 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fb9:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fbf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc6:	66 3d 11 03          	cmp    ax,0x311
c0015fca:	75 0a                	jne    c0015fd6 <sendKeyboardToken(KeyboardToken)+0x160>
c0015fcc:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015fd2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd9:	66 3d 12 03          	cmp    ax,0x312
c0015fdd:	75 0a                	jne    c0015fe9 <sendKeyboardToken(KeyboardToken)+0x173>
c0015fdf:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015fe5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fec:	66 3d 13 03          	cmp    ax,0x313
c0015ff0:	75 0a                	jne    c0015ffc <sendKeyboardToken(KeyboardToken)+0x186>
c0015ff2:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015ff8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ffc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fff:	66 3d 14 03          	cmp    ax,0x314
c0016003:	75 0a                	jne    c001600f <sendKeyboardToken(KeyboardToken)+0x199>
c0016005:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001600b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001600f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016012:	66 3d 15 03          	cmp    ax,0x315
c0016016:	75 0a                	jne    c0016022 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016018:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001601e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016022:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016025:	66 3d 16 03          	cmp    ax,0x316
c0016029:	75 0a                	jne    c0016035 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001602b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016031:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016038:	66 3d 17 03          	cmp    ax,0x317
c001603c:	75 0a                	jne    c0016048 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001603e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016044:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604b:	66 3d 18 03          	cmp    ax,0x318
c001604f:	75 0a                	jne    c001605b <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016051:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016057:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001605b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605e:	66 3d 19 03          	cmp    ax,0x319
c0016062:	75 0a                	jne    c001606e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016064:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001606a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001606e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016071:	66 3d 00 02          	cmp    ax,0x200
c0016075:	75 2c                	jne    c00160a3 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016077:	a0 80 e9 02 c0       	mov    al,ds:0xc002e980
c001607c:	83 f0 01             	xor    eax,0x1
c001607f:	84 c0                	test   al,al
c0016081:	74 20                	je     c00160a3 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016083:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c0016088:	6a 01                	push   0x1
c001608a:	6a 00                	push   0x0
c001608c:	68 52 5d 01 c0       	push   0xc0015d52
c0016091:	50                   	push   eax
c0016092:	e8 5d 7e 00 00       	call   c001def4 <Process::createThread(void (*)(void*), void*, int)>
c0016097:	83 c4 10             	add    esp,0x10
c001609a:	c6 05 80 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e980,0x1
c00160a1:	eb 33                	jmp    c00160d6 <sendKeyboardToken(KeyboardToken)+0x260>
c00160a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a6:	66 3d 01 02          	cmp    ax,0x201
c00160aa:	75 2a                	jne    c00160d6 <sendKeyboardToken(KeyboardToken)+0x260>
c00160ac:	a0 80 e9 02 c0       	mov    al,ds:0xc002e980
c00160b1:	83 f0 01             	xor    eax,0x1
c00160b4:	84 c0                	test   al,al
c00160b6:	74 1e                	je     c00160d6 <sendKeyboardToken(KeyboardToken)+0x260>
c00160b8:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c00160bd:	6a 01                	push   0x1
c00160bf:	6a 00                	push   0x0
c00160c1:	68 ae 5d 01 c0       	push   0xc0015dae
c00160c6:	50                   	push   eax
c00160c7:	e8 28 7e 00 00       	call   c001def4 <Process::createThread(void (*)(void*), void*, int)>
c00160cc:	83 c4 10             	add    esp,0x10
c00160cf:	c6 05 80 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e980,0x1
c00160d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d9:	66 3d 1d 03          	cmp    ax,0x31d
c00160dd:	75 06                	jne    c00160e5 <sendKeyboardToken(KeyboardToken)+0x26f>
c00160df:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e8:	66 3d 1c 03          	cmp    ax,0x31c
c00160ec:	75 06                	jne    c00160f4 <sendKeyboardToken(KeyboardToken)+0x27e>
c00160ee:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00160f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f7:	66 3d 1b 03          	cmp    ax,0x31b
c00160fb:	75 06                	jne    c0016103 <sendKeyboardToken(KeyboardToken)+0x28d>
c00160fd:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016106:	66 3d 1e 03          	cmp    ax,0x31e
c001610a:	75 06                	jne    c0016112 <sendKeyboardToken(KeyboardToken)+0x29c>
c001610c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016115:	66 3d 1f 03          	cmp    ax,0x31f
c0016119:	75 06                	jne    c0016121 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001611b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016124:	66 3d 1a 03          	cmp    ax,0x31a
c0016128:	75 06                	jne    c0016130 <sendKeyboardToken(KeyboardToken)+0x2ba>
c001612a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016130:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016134:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016137:	83 f0 01             	xor    eax,0x1
c001613a:	84 c0                	test   al,al
c001613c:	74 77                	je     c00161b5 <sendKeyboardToken(KeyboardToken)+0x33f>
c001613e:	a0 81 e6 02 c0       	mov    al,ds:0xc002e681
c0016143:	84 c0                	test   al,al
c0016145:	74 41                	je     c0016188 <sendKeyboardToken(KeyboardToken)+0x312>
c0016147:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001614b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001614f:	74 2b                	je     c001617c <sendKeyboardToken(KeyboardToken)+0x306>
c0016151:	8b 15 84 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e984
c0016157:	89 d0                	mov    eax,edx
c0016159:	c1 e0 02             	shl    eax,0x2
c001615c:	01 d0                	add    eax,edx
c001615e:	01 c0                	add    eax,eax
c0016160:	a3 84 e9 02 c0       	mov    ds:0xc002e984,eax
c0016165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016168:	0f b7 c0             	movzx  eax,ax
c001616b:	8d 50 d0             	lea    edx,[eax-0x30]
c001616e:	a1 84 e9 02 c0       	mov    eax,ds:0xc002e984
c0016173:	01 d0                	add    eax,edx
c0016175:	a3 84 e9 02 c0       	mov    ds:0xc002e984,eax
c001617a:	eb 6d                	jmp    c00161e9 <sendKeyboardToken(KeyboardToken)+0x373>
c001617c:	c7 05 84 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e984,0x0
c0016186:	eb 61                	jmp    c00161e9 <sendKeyboardToken(KeyboardToken)+0x373>
c0016188:	a1 84 e9 02 c0       	mov    eax,ds:0xc002e984
c001618d:	85 c0                	test   eax,eax
c001618f:	74 18                	je     c00161a9 <sendKeyboardToken(KeyboardToken)+0x333>
c0016191:	a1 84 e9 02 c0       	mov    eax,ds:0xc002e984
c0016196:	0f b6 c0             	movzx  eax,al
c0016199:	83 ec 0c             	sub    esp,0xc
c001619c:	50                   	push   eax
c001619d:	e8 68 fc ff ff       	call   c0015e0a <sendKeyToTerminal(unsigned char)>
c00161a2:	83 c4 10             	add    esp,0x10
c00161a5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161a9:	c7 05 84 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e984,0x0
c00161b3:	eb 34                	jmp    c00161e9 <sendKeyboardToken(KeyboardToken)+0x373>
c00161b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b8:	66 3d 01 01          	cmp    ax,0x101
c00161bc:	75 2b                	jne    c00161e9 <sendKeyboardToken(KeyboardToken)+0x373>
c00161be:	a1 84 e9 02 c0       	mov    eax,ds:0xc002e984
c00161c3:	85 c0                	test   eax,eax
c00161c5:	74 18                	je     c00161df <sendKeyboardToken(KeyboardToken)+0x369>
c00161c7:	a1 84 e9 02 c0       	mov    eax,ds:0xc002e984
c00161cc:	0f b6 c0             	movzx  eax,al
c00161cf:	83 ec 0c             	sub    esp,0xc
c00161d2:	50                   	push   eax
c00161d3:	e8 32 fc ff ff       	call   c0015e0a <sendKeyToTerminal(unsigned char)>
c00161d8:	83 c4 10             	add    esp,0x10
c00161db:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161df:	c7 05 84 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e984,0x0
c00161e9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161ec:	83 f0 01             	xor    eax,0x1
c00161ef:	84 c0                	test   al,al
c00161f1:	74 4c                	je     c001623f <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161f3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161f6:	83 f0 01             	xor    eax,0x1
c00161f9:	84 c0                	test   al,al
c00161fb:	74 42                	je     c001623f <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161fd:	a0 80 e6 02 c0       	mov    al,ds:0xc002e680
c0016202:	83 f0 01             	xor    eax,0x1
c0016205:	84 c0                	test   al,al
c0016207:	74 36                	je     c001623f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001620c:	66 83 f8 1f          	cmp    ax,0x1f
c0016210:	76 09                	jbe    c001621b <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016215:	66 83 f8 7e          	cmp    ax,0x7e
c0016219:	76 12                	jbe    c001622d <sendKeyboardToken(KeyboardToken)+0x3b7>
c001621b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621e:	66 83 f8 0a          	cmp    ax,0xa
c0016222:	74 09                	je     c001622d <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016224:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016227:	66 83 f8 08          	cmp    ax,0x8
c001622b:	75 12                	jne    c001623f <sendKeyboardToken(KeyboardToken)+0x3c9>
c001622d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016230:	0f b6 c0             	movzx  eax,al
c0016233:	83 ec 0c             	sub    esp,0xc
c0016236:	50                   	push   eax
c0016237:	e8 ce fb ff ff       	call   c0015e0a <sendKeyToTerminal(unsigned char)>
c001623c:	83 c4 10             	add    esp,0x10
c001623f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016242:	83 f0 01             	xor    eax,0x1
c0016245:	84 c0                	test   al,al
c0016247:	74 4f                	je     c0016298 <sendKeyboardToken(KeyboardToken)+0x422>
c0016249:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001624c:	83 f0 01             	xor    eax,0x1
c001624f:	84 c0                	test   al,al
c0016251:	74 45                	je     c0016298 <sendKeyboardToken(KeyboardToken)+0x422>
c0016253:	a0 80 e6 02 c0       	mov    al,ds:0xc002e680
c0016258:	84 c0                	test   al,al
c001625a:	74 3c                	je     c0016298 <sendKeyboardToken(KeyboardToken)+0x422>
c001625c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001625f:	66 83 f8 3f          	cmp    ax,0x3f
c0016263:	76 33                	jbe    c0016298 <sendKeyboardToken(KeyboardToken)+0x422>
c0016265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016268:	66 83 f8 7f          	cmp    ax,0x7f
c001626c:	77 2a                	ja     c0016298 <sendKeyboardToken(KeyboardToken)+0x422>
c001626e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016271:	88 c2                	mov    dl,al
c0016273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016276:	66 83 f8 5f          	cmp    ax,0x5f
c001627a:	76 04                	jbe    c0016280 <sendKeyboardToken(KeyboardToken)+0x40a>
c001627c:	b0 20                	mov    al,0x20
c001627e:	eb 02                	jmp    c0016282 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016280:	b0 00                	mov    al,0x0
c0016282:	29 c2                	sub    edx,eax
c0016284:	88 d0                	mov    al,dl
c0016286:	83 e8 40             	sub    eax,0x40
c0016289:	0f b6 c0             	movzx  eax,al
c001628c:	83 ec 0c             	sub    esp,0xc
c001628f:	50                   	push   eax
c0016290:	e8 75 fb ff ff       	call   c0015e0a <sendKeyToTerminal(unsigned char)>
c0016295:	83 c4 10             	add    esp,0x10
c0016298:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001629b:	66 3d 00 03          	cmp    ax,0x300
c001629f:	75 0f                	jne    c00162b0 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162a1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162a4:	83 f0 01             	xor    eax,0x1
c00162a7:	84 c0                	test   al,al
c00162a9:	74 05                	je     c00162b0 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162ab:	e8 53 ab ff ff       	call   c0010e03 <doTerminalCycle()>
c00162b0:	90                   	nop
c00162b1:	c9                   	leave  
c00162b2:	c3                   	ret    

c00162b3 <clearInternalKeybuffer(VgaText*)>:
c00162b3:	55                   	push   ebp
c00162b4:	89 e5                	mov    ebp,esp
c00162b6:	83 ec 08             	sub    esp,0x8
c00162b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162bc:	05 34 11 00 00       	add    eax,0x1134
c00162c1:	83 ec 0c             	sub    esp,0xc
c00162c4:	50                   	push   eax
c00162c5:	e8 ca a4 fe ff       	call   c0000794 <strlen>
c00162ca:	83 c4 10             	add    esp,0x10
c00162cd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162d0:	81 c2 34 11 00 00    	add    edx,0x1134
c00162d6:	83 ec 04             	sub    esp,0x4
c00162d9:	50                   	push   eax
c00162da:	6a 00                	push   0x0
c00162dc:	52                   	push   edx
c00162dd:	e8 96 a4 fe ff       	call   c0000778 <memset>
c00162e2:	83 c4 10             	add    esp,0x10
c00162e5:	90                   	nop
c00162e6:	c9                   	leave  
c00162e7:	c3                   	ret    

c00162e8 <readKeyboard(VgaText*, char*, unsigned long)>:
c00162e8:	55                   	push   ebp
c00162e9:	89 e5                	mov    ebp,esp
c00162eb:	83 ec 18             	sub    esp,0x18
c00162ee:	fb                   	sti    
c00162ef:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00162f6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00162fa:	0f 84 8a 00 00 00    	je     c001638a <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016303:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016309:	84 c0                	test   al,al
c001630b:	75 11                	jne    c001631e <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001630d:	e8 b0 7a 00 00       	call   c001ddc2 <lockScheduler()>
c0016312:	e8 e7 7d 00 00       	call   c001e0fe <schedule()>
c0016317:	e8 a8 7a 00 00       	call   c001ddc4 <unlockScheduler()>
c001631c:	eb e2                	jmp    c0016300 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001631e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016321:	8d 50 01             	lea    edx,[eax+0x1]
c0016324:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016327:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001632a:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016330:	88 10                	mov    BYTE PTR [eax],dl
c0016332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016335:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001633b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001633e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016341:	05 34 11 00 00       	add    eax,0x1134
c0016346:	83 ec 0c             	sub    esp,0xc
c0016349:	50                   	push   eax
c001634a:	e8 45 a4 fe ff       	call   c0000794 <strlen>
c001634f:	83 c4 10             	add    esp,0x10
c0016352:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016355:	81 c2 34 11 00 00    	add    edx,0x1134
c001635b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001635e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016361:	81 c2 34 11 00 00    	add    edx,0x1134
c0016367:	83 ec 04             	sub    esp,0x4
c001636a:	50                   	push   eax
c001636b:	51                   	push   ecx
c001636c:	52                   	push   edx
c001636d:	e8 0a a3 fe ff       	call   c000067c <memmove>
c0016372:	83 c4 10             	add    esp,0x10
c0016375:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016378:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001637b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001637f:	0f 85 71 ff ff ff    	jne    c00162f6 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016385:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016388:	eb 03                	jmp    c001638d <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001638a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001638d:	c9                   	leave  
c001638e:	c3                   	ret    
c001638f:	90                   	nop

c0016390 <Keyboard::Keyboard(char const*)>:
c0016390:	83 ec 0c             	sub    esp,0xc
c0016393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016397:	83 ec 08             	sub    esp,0x8
c001639a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001639e:	50                   	push   eax
c001639f:	e8 b8 e1 ff ff       	call   c001455c <Device::Device(char const*)>
c00163a4:	83 c4 10             	add    esp,0x10
c00163a7:	ba 08 b1 02 c0       	mov    edx,0xc002b108
c00163ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b0:	89 10                	mov    DWORD PTR [eax],edx
c00163b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00163c0:	c6 05 64 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e564,0x1
c00163c7:	90                   	nop
c00163c8:	83 c4 0c             	add    esp,0xc
c00163cb:	c3                   	ret    

c00163cc <Keyboard::~Keyboard()>:
c00163cc:	83 ec 0c             	sub    esp,0xc
c00163cf:	ba 08 b1 02 c0       	mov    edx,0xc002b108
c00163d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d8:	89 10                	mov    DWORD PTR [eax],edx
c00163da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163de:	83 ec 0c             	sub    esp,0xc
c00163e1:	50                   	push   eax
c00163e2:	e8 57 de ff ff       	call   c001423e <Device::~Device()>
c00163e7:	83 c4 10             	add    esp,0x10
c00163ea:	90                   	nop
c00163eb:	83 c4 0c             	add    esp,0xc
c00163ee:	c3                   	ret    
c00163ef:	90                   	nop

c00163f0 <Keyboard::~Keyboard()>:
c00163f0:	83 ec 0c             	sub    esp,0xc
c00163f3:	83 ec 0c             	sub    esp,0xc
c00163f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163fa:	e8 cd ff ff ff       	call   c00163cc <Keyboard::~Keyboard()>
c00163ff:	83 c4 10             	add    esp,0x10
c0016402:	83 ec 08             	sub    esp,0x8
c0016405:	68 5c 01 00 00       	push   0x15c
c001640a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001640e:	e8 53 ca ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0016413:	83 c4 10             	add    esp,0x10
c0016416:	83 c4 0c             	add    esp,0xc
c0016419:	c3                   	ret    

c001641a <LogicalDisk::close(int, int, void*)>:
c001641a:	83 c8 ff             	or     eax,0xffffffff
c001641d:	c3                   	ret    

c001641e <LogicalDisk::~LogicalDisk()>:
c001641e:	83 ec 0c             	sub    esp,0xc
c0016421:	ba b8 b1 02 c0       	mov    edx,0xc002b1b8
c0016426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001642a:	89 10                	mov    DWORD PTR [eax],edx
c001642c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016430:	83 ec 0c             	sub    esp,0xc
c0016433:	50                   	push   eax
c0016434:	e8 05 de ff ff       	call   c001423e <Device::~Device()>
c0016439:	83 c4 10             	add    esp,0x10
c001643c:	90                   	nop
c001643d:	83 c4 0c             	add    esp,0xc
c0016440:	c3                   	ret    
c0016441:	90                   	nop

c0016442 <LogicalDisk::~LogicalDisk()>:
c0016442:	83 ec 0c             	sub    esp,0xc
c0016445:	83 ec 0c             	sub    esp,0xc
c0016448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001644c:	e8 cd ff ff ff       	call   c001641e <LogicalDisk::~LogicalDisk()>
c0016451:	83 c4 10             	add    esp,0x10
c0016454:	83 ec 08             	sub    esp,0x8
c0016457:	68 74 01 00 00       	push   0x174
c001645c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016460:	e8 01 ca ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0016465:	83 c4 10             	add    esp,0x10
c0016468:	83 c4 0c             	add    esp,0xc
c001646b:	c3                   	ret    

c001646c <LogicalDisk::open(int, int, void*)>:
c001646c:	83 ec 18             	sub    esp,0x18
c001646f:	68 34 b1 02 c0       	push   0xc002b134
c0016474:	e8 6e 41 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c0016479:	83 c8 ff             	or     eax,0xffffffff
c001647c:	83 c4 1c             	add    esp,0x1c
c001647f:	c3                   	ret    

c0016480 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016480:	53                   	push   ebx
c0016481:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016485:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016489:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001648d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016493:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016499:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001649f:	77 10                	ja     c00164b1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00164a1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164a7:	89 d3                	mov    ebx,edx
c00164a9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00164af:	72 05                	jb     c00164b6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00164b1:	83 c8 ff             	or     eax,0xffffffff
c00164b4:	89 c2                	mov    edx,eax
c00164b6:	5b                   	pop    ebx
c00164b7:	c3                   	ret    

c00164b8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00164b8:	56                   	push   esi
c00164b9:	83 c8 ff             	or     eax,0xffffffff
c00164bc:	53                   	push   ebx
c00164bd:	89 c2                	mov    edx,eax
c00164bf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00164c3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00164c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00164cb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00164d1:	77 27                	ja     c00164fa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164d3:	89 d8                	mov    eax,ebx
c00164d5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00164db:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00164e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164e6:	89 c2                	mov    edx,eax
c00164e8:	73 10                	jae    c00164fa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164ea:	89 c8                	mov    eax,ecx
c00164ec:	89 da                	mov    edx,ebx
c00164ee:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00164f4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00164fa:	5b                   	pop    ebx
c00164fb:	5e                   	pop    esi
c00164fc:	c3                   	ret    
c00164fd:	90                   	nop

c00164fe <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00164fe:	83 ec 1c             	sub    esp,0x1c
c0016501:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016505:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016509:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001650d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016511:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016515:	89 04 24             	mov    DWORD PTR [esp],eax
c0016518:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001651c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016524:	83 ec 08             	sub    esp,0x8
c0016527:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001652b:	50                   	push   eax
c001652c:	e8 2b e0 ff ff       	call   c001455c <Device::Device(char const*)>
c0016531:	83 c4 10             	add    esp,0x10
c0016534:	ba b8 b1 02 c0       	mov    edx,0xc002b1b8
c0016539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001653d:	89 10                	mov    DWORD PTR [eax],edx
c001653f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016543:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001654a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001654e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016555:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016559:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016563:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016567:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001656b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001656f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016575:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001657b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001657f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016582:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016586:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001658c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016596:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001659a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00165a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165ae:	90                   	nop
c00165af:	83 c4 1c             	add    esp,0x1c
c00165b2:	c3                   	ret    
c00165b3:	90                   	nop

c00165b4 <LogicalDisk::assignDriveLetter()>:
c00165b4:	55                   	push   ebp
c00165b5:	57                   	push   edi
c00165b6:	56                   	push   esi
c00165b7:	53                   	push   ebx
c00165b8:	83 ec 14             	sub    esp,0x14
c00165bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165bf:	8b 3d a0 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e9a0
c00165c5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00165cb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00165cf:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00165d5:	8b 3d a4 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e9a4
c00165db:	3c 01                	cmp    al,0x1
c00165dd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00165e1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00165e5:	19 c0                	sbb    eax,eax
c00165e7:	83 e0 02             	and    eax,0x2
c00165ea:	83 c0 41             	add    eax,0x41
c00165ed:	0f be e8             	movsx  ebp,al
c00165f0:	3c 43                	cmp    al,0x43
c00165f2:	75 10                	jne    c0016604 <LogicalDisk::assignDriveLetter()+0x50>
c00165f4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00165fb:	75 5d                	jne    c001665a <LogicalDisk::assignDriveLetter()+0xa6>
c00165fd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016602:	75 56                	jne    c001665a <LogicalDisk::assignDriveLetter()+0xa6>
c0016604:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016607:	ba 01 00 00 00       	mov    edx,0x1
c001660c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016610:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016614:	d3 e2                	shl    edx,cl
c0016616:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001661a:	89 d7                	mov    edi,edx
c001661c:	89 d6                	mov    esi,edx
c001661e:	c1 ff 1f             	sar    edi,0x1f
c0016621:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016625:	21 f9                	and    ecx,edi
c0016627:	09 d1                	or     ecx,edx
c0016629:	75 2f                	jne    c001665a <LogicalDisk::assignDriveLetter()+0xa6>
c001662b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001662f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016633:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016639:	09 f2                	or     edx,esi
c001663b:	89 15 a0 e9 02 c0    	mov    DWORD PTR ds:0xc002e9a0,edx
c0016641:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016645:	09 fa                	or     edx,edi
c0016647:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001664b:	89 15 a4 e9 02 c0    	mov    DWORD PTR ds:0xc002e9a4,edx
c0016651:	89 1c bd c0 e9 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1640],ebx
c0016658:	eb 08                	jmp    c0016662 <LogicalDisk::assignDriveLetter()+0xae>
c001665a:	45                   	inc    ebp
c001665b:	40                   	inc    eax
c001665c:	3c 5b                	cmp    al,0x5b
c001665e:	75 90                	jne    c00165f0 <LogicalDisk::assignDriveLetter()+0x3c>
c0016660:	31 c0                	xor    eax,eax
c0016662:	83 c4 14             	add    esp,0x14
c0016665:	5b                   	pop    ebx
c0016666:	5e                   	pop    esi
c0016667:	5f                   	pop    edi
c0016668:	5d                   	pop    ebp
c0016669:	c3                   	ret    

c001666a <LogicalDisk::mount()>:
c001666a:	56                   	push   esi
c001666b:	53                   	push   ebx
c001666c:	51                   	push   ecx
c001666d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016671:	8b 1d 18 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e518
c0016677:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016681:	85 db                	test   ebx,ebx
c0016683:	74 50                	je     c00166d5 <LogicalDisk::mount()+0x6b>
c0016685:	e8 23 77 00 00       	call   c001ddad <getIRQNestingLevel()>
c001668a:	52                   	push   edx
c001668b:	52                   	push   edx
c001668c:	50                   	push   eax
c001668d:	68 58 b1 02 c0       	push   0xc002b158
c0016692:	e8 af c8 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0016697:	83 c4 0c             	add    esp,0xc
c001669a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00166a1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166a3:	83 e8 41             	sub    eax,0x41
c00166a6:	50                   	push   eax
c00166a7:	56                   	push   esi
c00166a8:	53                   	push   ebx
c00166a9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00166ac:	83 c4 10             	add    esp,0x10
c00166af:	84 c0                	test   al,al
c00166b1:	74 08                	je     c00166bb <LogicalDisk::mount()+0x51>
c00166b3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00166b9:	eb 1c                	jmp    c00166d7 <LogicalDisk::mount()+0x6d>
c00166bb:	e8 ed 76 00 00       	call   c001ddad <getIRQNestingLevel()>
c00166c0:	51                   	push   ecx
c00166c1:	51                   	push   ecx
c00166c2:	50                   	push   eax
c00166c3:	68 73 b1 02 c0       	push   0xc002b173
c00166c8:	e8 79 c8 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00166cd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00166d0:	83 c4 10             	add    esp,0x10
c00166d3:	eb ac                	jmp    c0016681 <LogicalDisk::mount()+0x17>
c00166d5:	31 c0                	xor    eax,eax
c00166d7:	5a                   	pop    edx
c00166d8:	5b                   	pop    ebx
c00166d9:	5e                   	pop    esi
c00166da:	c3                   	ret    
c00166db:	90                   	nop

c00166dc <LogicalDisk::unmount()>:
c00166dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166e0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166ea:	c3                   	ret    
c00166eb:	90                   	nop

c00166ec <LogicalDisk::eject()>:
c00166ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166f0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00166f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00166f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166fc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00166ff:	90                   	nop

c0016700 <LogicalDisk::unassignDriveLetter()>:
c0016700:	57                   	push   edi
c0016701:	56                   	push   esi
c0016702:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016706:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001670d:	84 c9                	test   cl,cl
c001670f:	75 0f                	jne    c0016720 <LogicalDisk::unassignDriveLetter()+0x20>
c0016711:	c7 44 24 0c 8e b1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b18e
c0016719:	5e                   	pop    esi
c001671a:	5f                   	pop    edi
c001671b:	e9 c7 3e 00 00       	jmp    c001a5e7 <Krnl::panic(char const*)>
c0016720:	83 e9 41             	sub    ecx,0x41
c0016723:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001672a:	b8 01 00 00 00       	mov    eax,0x1
c001672f:	c7 04 8d c0 e9 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1640],0x0
c001673a:	d3 e0                	shl    eax,cl
c001673c:	89 c7                	mov    edi,eax
c001673e:	f7 d0                	not    eax
c0016740:	c1 ff 1f             	sar    edi,0x1f
c0016743:	21 05 a0 e9 02 c0    	and    DWORD PTR ds:0xc002e9a0,eax
c0016749:	89 fe                	mov    esi,edi
c001674b:	f7 d6                	not    esi
c001674d:	21 35 a4 e9 02 c0    	and    DWORD PTR ds:0xc002e9a4,esi
c0016753:	5e                   	pop    esi
c0016754:	5f                   	pop    edi
c0016755:	c3                   	ret    

c0016756 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016756:	57                   	push   edi
c0016757:	56                   	push   esi
c0016758:	53                   	push   ebx
c0016759:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001675d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016761:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016765:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016769:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001676f:	77 41                	ja     c00167b2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016771:	99                   	cdq    
c0016772:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016778:	01 c8                	add    eax,ecx
c001677a:	11 da                	adc    edx,ebx
c001677c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016782:	19 d7                	sbb    edi,edx
c0016784:	72 33                	jb     c00167b9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016786:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001678c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016792:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016796:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001679a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167a0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167aa:	5b                   	pop    ebx
c00167ab:	5e                   	pop    esi
c00167ac:	5f                   	pop    edi
c00167ad:	e9 b0 0a 00 00       	jmp    c0017262 <VCache::read(unsigned long long, int, void*)>
c00167b2:	b8 05 00 00 00       	mov    eax,0x5
c00167b7:	eb 05                	jmp    c00167be <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00167b9:	b8 07 00 00 00       	mov    eax,0x7
c00167be:	5b                   	pop    ebx
c00167bf:	5e                   	pop    esi
c00167c0:	5f                   	pop    edi
c00167c1:	c3                   	ret    

c00167c2 <LogicalDisk::write(unsigned long long, int, void*)>:
c00167c2:	57                   	push   edi
c00167c3:	56                   	push   esi
c00167c4:	53                   	push   ebx
c00167c5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167d5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167db:	77 41                	ja     c001681e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00167dd:	99                   	cdq    
c00167de:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167e4:	01 c8                	add    eax,ecx
c00167e6:	11 da                	adc    edx,ebx
c00167e8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167ee:	19 d7                	sbb    edi,edx
c00167f0:	72 33                	jb     c0016825 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00167f2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167f8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016802:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016806:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001680c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016812:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016816:	5b                   	pop    ebx
c0016817:	5e                   	pop    esi
c0016818:	5f                   	pop    edi
c0016819:	e9 4e 09 00 00       	jmp    c001716c <VCache::write(unsigned long long, int, void*)>
c001681e:	b8 05 00 00 00       	mov    eax,0x5
c0016823:	eb 05                	jmp    c001682a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016825:	b8 07 00 00 00       	mov    eax,0x7
c001682a:	5b                   	pop    ebx
c001682b:	5e                   	pop    esi
c001682c:	5f                   	pop    edi
c001682d:	c3                   	ret    

c001682e <Mouse::Mouse(char const*)>:
c001682e:	83 ec 0c             	sub    esp,0xc
c0016831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016835:	83 ec 08             	sub    esp,0x8
c0016838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001683c:	50                   	push   eax
c001683d:	e8 1a dd ff ff       	call   c001455c <Device::Device(char const*)>
c0016842:	83 c4 10             	add    esp,0x10
c0016845:	ba e4 b1 02 c0       	mov    edx,0xc002b1e4
c001684a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001684e:	89 10                	mov    DWORD PTR [eax],edx
c0016850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016854:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001685e:	90                   	nop
c001685f:	83 c4 0c             	add    esp,0xc
c0016862:	c3                   	ret    
c0016863:	90                   	nop

c0016864 <Mouse::~Mouse()>:
c0016864:	83 ec 0c             	sub    esp,0xc
c0016867:	ba e4 b1 02 c0       	mov    edx,0xc002b1e4
c001686c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016870:	89 10                	mov    DWORD PTR [eax],edx
c0016872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016876:	83 ec 0c             	sub    esp,0xc
c0016879:	50                   	push   eax
c001687a:	e8 bf d9 ff ff       	call   c001423e <Device::~Device()>
c001687f:	83 c4 10             	add    esp,0x10
c0016882:	90                   	nop
c0016883:	83 c4 0c             	add    esp,0xc
c0016886:	c3                   	ret    
c0016887:	90                   	nop

c0016888 <Mouse::~Mouse()>:
c0016888:	83 ec 0c             	sub    esp,0xc
c001688b:	83 ec 0c             	sub    esp,0xc
c001688e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016892:	e8 cd ff ff ff       	call   c0016864 <Mouse::~Mouse()>
c0016897:	83 c4 10             	add    esp,0x10
c001689a:	83 ec 08             	sub    esp,0x8
c001689d:	68 58 01 00 00       	push   0x158
c00168a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168a6:	e8 bb c5 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c00168ab:	83 c4 10             	add    esp,0x10
c00168ae:	83 c4 0c             	add    esp,0xc
c00168b1:	c3                   	ret    

c00168b2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168b2:	55                   	push   ebp
c00168b3:	57                   	push   edi
c00168b4:	56                   	push   esi
c00168b5:	53                   	push   ebx
c00168b6:	81 ec 28 01 00 00    	sub    esp,0x128
c00168bc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00168c3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00168ca:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00168d1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00168d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168dc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00168e0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168e7:	e8 6c dd ff ff       	call   c0014658 <Device::getName()>
c00168ec:	5a                   	pop    edx
c00168ed:	59                   	pop    ecx
c00168ee:	50                   	push   eax
c00168ef:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00168f3:	55                   	push   ebp
c00168f4:	e8 3b 9f fe ff       	call   c0000834 <strcpy>
c00168f9:	5b                   	pop    ebx
c00168fa:	58                   	pop    eax
c00168fb:	68 08 b2 02 c0       	push   0xc002b208
c0016900:	55                   	push   ebp
c0016901:	e8 6e a0 fe ff       	call   c0000974 <strcat>
c0016906:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001690d:	e8 2e 8f ff ff       	call   c000f840 <malloc>
c0016912:	83 c4 0c             	add    esp,0xc
c0016915:	89 c3                	mov    ebx,eax
c0016917:	57                   	push   edi
c0016918:	56                   	push   esi
c0016919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001691d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016921:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016928:	55                   	push   ebp
c0016929:	50                   	push   eax
c001692a:	e8 cf fb ff ff       	call   c00164fe <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001692f:	83 c4 14             	add    esp,0x14
c0016932:	53                   	push   ebx
c0016933:	e8 7c fc ff ff       	call   c00165b4 <LogicalDisk::assignDriveLetter()>
c0016938:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001693b:	89 c6                	mov    esi,eax
c001693d:	e8 28 fd ff ff       	call   c001666a <LogicalDisk::mount()>
c0016942:	58                   	pop    eax
c0016943:	5a                   	pop    edx
c0016944:	53                   	push   ebx
c0016945:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001694c:	e8 1b da ff ff       	call   c001436c <Device::addChild(Device*)>
c0016951:	59                   	pop    ecx
c0016952:	89 f0                	mov    eax,esi
c0016954:	5b                   	pop    ebx
c0016955:	0f be f0             	movsx  esi,al
c0016958:	56                   	push   esi
c0016959:	68 13 b2 02 c0       	push   0xc002b213
c001695e:	e8 e3 c5 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0016963:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016969:	5b                   	pop    ebx
c001696a:	5e                   	pop    esi
c001696b:	5f                   	pop    edi
c001696c:	5d                   	pop    ebp
c001696d:	c3                   	ret    

c001696e <createPartitionsForDisk(PhysicalDisk*)>:
c001696e:	55                   	push   ebp
c001696f:	57                   	push   edi
c0016970:	56                   	push   esi
c0016971:	53                   	push   ebx
c0016972:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016978:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001697f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016985:	3d 00 02 00 00       	cmp    eax,0x200
c001698a:	74 27                	je     c00169b3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001698c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016992:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016998:	83 ec 10             	sub    esp,0x10
c001699b:	0f a4 f7 0a          	shld   edi,esi,0xa
c001699f:	99                   	cdq    
c00169a0:	c1 e6 0a             	shl    esi,0xa
c00169a3:	52                   	push   edx
c00169a4:	89 fd                	mov    ebp,edi
c00169a6:	50                   	push   eax
c00169a7:	55                   	push   ebp
c00169a8:	56                   	push   esi
c00169a9:	e8 ee ff 00 00       	call   c002699c <__udivdi3>
c00169ae:	e9 b1 00 00 00       	jmp    c0016a64 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169b3:	83 ec 0c             	sub    esp,0xc
c00169b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169b8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00169bc:	56                   	push   esi
c00169bd:	6a 01                	push   0x1
c00169bf:	6a 00                	push   0x0
c00169c1:	6a 00                	push   0x0
c00169c3:	53                   	push   ebx
c00169c4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00169c7:	83 c4 20             	add    esp,0x20
c00169ca:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00169d2:	75 0a                	jne    c00169de <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00169d4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00169dc:	74 2c                	je     c0016a0a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00169de:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169e4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169ea:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169f0:	83 ec 10             	sub    esp,0x10
c00169f3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169f7:	89 f7                	mov    edi,esi
c00169f9:	c1 e0 0a             	shl    eax,0xa
c00169fc:	c1 ff 1f             	sar    edi,0x1f
c00169ff:	57                   	push   edi
c0016a00:	56                   	push   esi
c0016a01:	52                   	push   edx
c0016a02:	50                   	push   eax
c0016a03:	e8 94 ff 00 00       	call   c002699c <__udivdi3>
c0016a08:	eb 5a                	jmp    c0016a64 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a0a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a11:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a18:	83 e1 7f             	and    ecx,0x7f
c0016a1b:	83 e0 7f             	and    eax,0x7f
c0016a1e:	01 c1                	add    ecx,eax
c0016a20:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a27:	83 e0 7f             	and    eax,0x7f
c0016a2a:	01 c1                	add    ecx,eax
c0016a2c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a33:	83 e0 7f             	and    eax,0x7f
c0016a36:	00 c1                	add    cl,al
c0016a38:	74 41                	je     c0016a7b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a3a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a40:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a46:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a4c:	83 ec 10             	sub    esp,0x10
c0016a4f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a53:	89 f7                	mov    edi,esi
c0016a55:	c1 e0 0a             	shl    eax,0xa
c0016a58:	c1 ff 1f             	sar    edi,0x1f
c0016a5b:	57                   	push   edi
c0016a5c:	56                   	push   esi
c0016a5d:	52                   	push   edx
c0016a5e:	50                   	push   eax
c0016a5f:	e8 38 ff 00 00       	call   c002699c <__udivdi3>
c0016a64:	83 c4 14             	add    esp,0x14
c0016a67:	52                   	push   edx
c0016a68:	50                   	push   eax
c0016a69:	6a 00                	push   0x0
c0016a6b:	6a 00                	push   0x0
c0016a6d:	53                   	push   ebx
c0016a6e:	e8 3f fe ff ff       	call   c00168b2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a73:	83 c4 20             	add    esp,0x20
c0016a76:	e9 79 01 00 00       	jmp    c0016bf4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a7b:	89 f0                	mov    eax,esi
c0016a7d:	31 f6                	xor    esi,esi
c0016a7f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a86:	75 02                	jne    c0016a8a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a88:	89 f1                	mov    ecx,esi
c0016a8a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016a91:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016a98:	c1 e2 08             	shl    edx,0x8
c0016a9b:	c1 e7 10             	shl    edi,0x10
c0016a9e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016aa6:	09 fa                	or     edx,edi
c0016aa8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016ab0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016ab7:	83 c0 10             	add    eax,0x10
c0016aba:	09 fa                	or     edx,edi
c0016abc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016ac3:	c1 e7 18             	shl    edi,0x18
c0016ac6:	09 fa                	or     edx,edi
c0016ac8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016acf:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016ad3:	c1 e7 10             	shl    edi,0x10
c0016ad6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016add:	c1 e2 08             	shl    edx,0x8
c0016ae0:	09 fa                	or     edx,edi
c0016ae2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016ae9:	09 fa                	or     edx,edi
c0016aeb:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016af2:	c1 e7 18             	shl    edi,0x18
c0016af5:	09 fa                	or     edx,edi
c0016af7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016afb:	46                   	inc    esi
c0016afc:	83 fe 04             	cmp    esi,0x4
c0016aff:	0f 85 7a ff ff ff    	jne    c0016a7f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b09:	83 f0 01             	xor    eax,0x1
c0016b0c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b10:	75 57                	jne    c0016b69 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b16:	83 f0 01             	xor    eax,0x1
c0016b19:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b1d:	75 4a                	jne    c0016b69 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b1f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b23:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b2b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b33:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b39:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b3f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b45:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b49:	89 f7                	mov    edi,esi
c0016b4b:	c1 e0 0a             	shl    eax,0xa
c0016b4e:	c1 ff 1f             	sar    edi,0x1f
c0016b51:	57                   	push   edi
c0016b52:	56                   	push   esi
c0016b53:	52                   	push   edx
c0016b54:	50                   	push   eax
c0016b55:	e8 42 fe 00 00       	call   c002699c <__udivdi3>
c0016b5a:	83 c4 10             	add    esp,0x10
c0016b5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b61:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b65:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016b69:	84 c9                	test   cl,cl
c0016b6b:	74 53                	je     c0016bc0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016b6d:	0f b6 c9             	movzx  ecx,cl
c0016b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b78:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b7c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b84:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b88:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016b8c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016b90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b94:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016b98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ba0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016ba4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016ba8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016bac:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016bb0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bb4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bb8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016bbc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016bc0:	31 ed                	xor    ebp,ebp
c0016bc2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016bc6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016bca:	89 f8                	mov    eax,edi
c0016bcc:	09 f0                	or     eax,esi
c0016bce:	74 1e                	je     c0016bee <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bd0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016bd4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016bd8:	89 d1                	mov    ecx,edx
c0016bda:	09 c1                	or     ecx,eax
c0016bdc:	74 10                	je     c0016bee <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bde:	83 ec 0c             	sub    esp,0xc
c0016be1:	57                   	push   edi
c0016be2:	56                   	push   esi
c0016be3:	52                   	push   edx
c0016be4:	50                   	push   eax
c0016be5:	53                   	push   ebx
c0016be6:	e8 c7 fc ff ff       	call   c00168b2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016beb:	83 c4 20             	add    esp,0x20
c0016bee:	45                   	inc    ebp
c0016bef:	83 fd 04             	cmp    ebp,0x4
c0016bf2:	75 ce                	jne    c0016bc2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016bf4:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016bfa:	5b                   	pop    ebx
c0016bfb:	5e                   	pop    esi
c0016bfc:	5f                   	pop    edi
c0016bfd:	5d                   	pop    ebp
c0016bfe:	c3                   	ret    
c0016bff:	90                   	nop

c0016c00 <Serial::Serial(char const*)>:
c0016c00:	83 ec 0c             	sub    esp,0xc
c0016c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c07:	83 ec 08             	sub    esp,0x8
c0016c0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c0e:	50                   	push   eax
c0016c0f:	e8 48 d9 ff ff       	call   c001455c <Device::Device(char const*)>
c0016c14:	83 c4 10             	add    esp,0x10
c0016c17:	ba 40 b2 02 c0       	mov    edx,0xc002b240
c0016c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c20:	89 10                	mov    DWORD PTR [eax],edx
c0016c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c26:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c30:	90                   	nop
c0016c31:	83 c4 0c             	add    esp,0xc
c0016c34:	c3                   	ret    
c0016c35:	90                   	nop

c0016c36 <Serial::~Serial()>:
c0016c36:	83 ec 0c             	sub    esp,0xc
c0016c39:	ba 40 b2 02 c0       	mov    edx,0xc002b240
c0016c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c42:	89 10                	mov    DWORD PTR [eax],edx
c0016c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c48:	83 ec 0c             	sub    esp,0xc
c0016c4b:	50                   	push   eax
c0016c4c:	e8 ed d5 ff ff       	call   c001423e <Device::~Device()>
c0016c51:	83 c4 10             	add    esp,0x10
c0016c54:	90                   	nop
c0016c55:	83 c4 0c             	add    esp,0xc
c0016c58:	c3                   	ret    
c0016c59:	90                   	nop

c0016c5a <Serial::~Serial()>:
c0016c5a:	83 ec 0c             	sub    esp,0xc
c0016c5d:	83 ec 0c             	sub    esp,0xc
c0016c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c64:	e8 cd ff ff ff       	call   c0016c36 <Serial::~Serial()>
c0016c69:	83 c4 10             	add    esp,0x10
c0016c6c:	83 ec 08             	sub    esp,0x8
c0016c6f:	68 58 01 00 00       	push   0x158
c0016c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c78:	e8 e9 c1 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0016c7d:	83 c4 10             	add    esp,0x10
c0016c80:	83 c4 0c             	add    esp,0xc
c0016c83:	c3                   	ret    

c0016c84 <Timer::Timer(char const*)>:
c0016c84:	83 ec 0c             	sub    esp,0xc
c0016c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8b:	83 ec 08             	sub    esp,0x8
c0016c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c92:	50                   	push   eax
c0016c93:	e8 c4 d8 ff ff       	call   c001455c <Device::Device(char const*)>
c0016c98:	83 c4 10             	add    esp,0x10
c0016c9b:	ba 84 b2 02 c0       	mov    edx,0xc002b284
c0016ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca4:	89 10                	mov    DWORD PTR [eax],edx
c0016ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016caa:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016cb4:	90                   	nop
c0016cb5:	83 c4 0c             	add    esp,0xc
c0016cb8:	c3                   	ret    
c0016cb9:	90                   	nop

c0016cba <Timer::~Timer()>:
c0016cba:	83 ec 0c             	sub    esp,0xc
c0016cbd:	ba 84 b2 02 c0       	mov    edx,0xc002b284
c0016cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc6:	89 10                	mov    DWORD PTR [eax],edx
c0016cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ccc:	83 ec 0c             	sub    esp,0xc
c0016ccf:	50                   	push   eax
c0016cd0:	e8 69 d5 ff ff       	call   c001423e <Device::~Device()>
c0016cd5:	83 c4 10             	add    esp,0x10
c0016cd8:	90                   	nop
c0016cd9:	83 c4 0c             	add    esp,0xc
c0016cdc:	c3                   	ret    
c0016cdd:	90                   	nop

c0016cde <Timer::~Timer()>:
c0016cde:	83 ec 0c             	sub    esp,0xc
c0016ce1:	83 ec 0c             	sub    esp,0xc
c0016ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ce8:	e8 cd ff ff ff       	call   c0016cba <Timer::~Timer()>
c0016ced:	83 c4 10             	add    esp,0x10
c0016cf0:	83 ec 08             	sub    esp,0x8
c0016cf3:	68 5c 01 00 00       	push   0x15c
c0016cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cfc:	e8 65 c1 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0016d01:	83 c4 10             	add    esp,0x10
c0016d04:	83 c4 0c             	add    esp,0xc
c0016d07:	c3                   	ret    

c0016d08 <Timer::read()>:
c0016d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d0c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d12:	c3                   	ret    

c0016d13 <timerHandler(unsigned long long)>:
c0016d13:	55                   	push   ebp
c0016d14:	57                   	push   edi
c0016d15:	56                   	push   esi
c0016d16:	53                   	push   ebx
c0016d17:	83 ec 0c             	sub    esp,0xc
c0016d1a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d1e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d22:	01 35 30 ea 02 c0    	add    DWORD PTR ds:0xc002ea30,esi
c0016d28:	11 3d 34 ea 02 c0    	adc    DWORD PTR ds:0xc002ea34,edi
c0016d2e:	80 3d 8d e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e38d,0x0
c0016d35:	0f 84 07 01 00 00    	je     c0016e42 <timerHandler(unsigned long long)+0x12f>
c0016d3b:	e8 a9 70 00 00       	call   c001dde9 <lockStuff()>
c0016d40:	83 ec 0c             	sub    esp,0xc
c0016d43:	68 fc 18 03 c0       	push   0xc00318fc
c0016d48:	e8 c1 1c 01 00       	call   c0028a0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d4d:	c7 04 24 fc 18 03 c0 	mov    DWORD PTR [esp],0xc00318fc
c0016d54:	89 c3                	mov    ebx,eax
c0016d56:	e8 bb 1c 01 00       	call   c0028a16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d5b:	83 c4 10             	add    esp,0x10
c0016d5e:	84 c0                	test   al,al
c0016d60:	74 60                	je     c0016dc2 <timerHandler(unsigned long long)+0xaf>
c0016d62:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d68:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016d6b:	85 c0                	test   eax,eax
c0016d6d:	0f 85 91 00 00 00    	jne    c0016e04 <timerHandler(unsigned long long)+0xf1>
c0016d73:	e9 be 00 00 00       	jmp    c0016e36 <timerHandler(unsigned long long)+0x123>
c0016d78:	83 ec 0c             	sub    esp,0xc
c0016d7b:	55                   	push   ebp
c0016d7c:	e8 59 76 00 00       	call   c001e3da <unblockTask(ThreadControlBlock*)>
c0016d81:	83 c4 10             	add    esp,0x10
c0016d84:	39 eb                	cmp    ebx,ebp
c0016d86:	75 12                	jne    c0016d9a <timerHandler(unsigned long long)+0x87>
c0016d88:	83 ec 0c             	sub    esp,0xc
c0016d8b:	68 fc 18 03 c0       	push   0xc00318fc
c0016d90:	e8 79 1c 01 00       	call   c0028a0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d95:	89 c3                	mov    ebx,eax
c0016d97:	83 c4 10             	add    esp,0x10
c0016d9a:	83 ec 0c             	sub    esp,0xc
c0016d9d:	68 fc 18 03 c0       	push   0xc00318fc
c0016da2:	e8 6f 1c 01 00       	call   c0028a16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016da7:	83 c4 10             	add    esp,0x10
c0016daa:	84 c0                	test   al,al
c0016dac:	75 b4                	jne    c0016d62 <timerHandler(unsigned long long)+0x4f>
c0016dae:	83 ec 0c             	sub    esp,0xc
c0016db1:	68 fc 18 03 c0       	push   0xc00318fc
c0016db6:	e8 53 1c 01 00       	call   c0028a0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dbb:	83 c4 10             	add    esp,0x10
c0016dbe:	39 d8                	cmp    eax,ebx
c0016dc0:	74 a0                	je     c0016d62 <timerHandler(unsigned long long)+0x4f>
c0016dc2:	83 ec 0c             	sub    esp,0xc
c0016dc5:	68 fc 18 03 c0       	push   0xc00318fc
c0016dca:	e8 3f 1c 01 00       	call   c0028a0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dcf:	c7 04 24 fc 18 03 c0 	mov    DWORD PTR [esp],0xc00318fc
c0016dd6:	89 c5                	mov    ebp,eax
c0016dd8:	e8 55 1c 01 00       	call   c0028a32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016ddd:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016de0:	83 c4 10             	add    esp,0x10
c0016de3:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016de6:	39 15 30 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea30,edx
c0016dec:	a1 34 ea 02 c0       	mov    eax,ds:0xc002ea34
c0016df1:	19 c8                	sbb    eax,ecx
c0016df3:	73 83                	jae    c0016d78 <timerHandler(unsigned long long)+0x65>
c0016df5:	50                   	push   eax
c0016df6:	50                   	push   eax
c0016df7:	55                   	push   ebp
c0016df8:	68 fc 18 03 c0       	push   0xc00318fc
c0016dfd:	e8 de 1c 01 00       	call   c0028ae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e02:	eb 93                	jmp    c0016d97 <timerHandler(unsigned long long)+0x84>
c0016e04:	80 3d 8c e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e38c,0x0
c0016e0b:	74 29                	je     c0016e36 <timerHandler(unsigned long long)+0x123>
c0016e0d:	39 c6                	cmp    esi,eax
c0016e0f:	bb 00 00 00 00       	mov    ebx,0x0
c0016e14:	19 df                	sbb    edi,ebx
c0016e16:	72 19                	jb     c0016e31 <timerHandler(unsigned long long)+0x11e>
c0016e18:	e8 a5 6f 00 00       	call   c001ddc2 <lockScheduler()>
c0016e1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e22:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e25:	e8 d4 72 00 00       	call   c001e0fe <schedule()>
c0016e2a:	e8 95 6f 00 00       	call   c001ddc4 <unlockScheduler()>
c0016e2f:	eb 05                	jmp    c0016e36 <timerHandler(unsigned long long)+0x123>
c0016e31:	29 f0                	sub    eax,esi
c0016e33:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e36:	83 c4 0c             	add    esp,0xc
c0016e39:	5b                   	pop    ebx
c0016e3a:	5e                   	pop    esi
c0016e3b:	5f                   	pop    edi
c0016e3c:	5d                   	pop    ebp
c0016e3d:	e9 41 73 00 00       	jmp    c001e183 <unlockStuff()>
c0016e42:	83 c4 0c             	add    esp,0xc
c0016e45:	5b                   	pop    ebx
c0016e46:	5e                   	pop    esi
c0016e47:	5f                   	pop    edi
c0016e48:	5d                   	pop    ebp
c0016e49:	c3                   	ret    

c0016e4a <setupTimer(int)>:
c0016e4a:	57                   	push   edi
c0016e4b:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016e50:	56                   	push   esi
c0016e51:	53                   	push   ebx
c0016e52:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e5c:	83 ec 0c             	sub    esp,0xc
c0016e5f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e65:	e8 ee d7 ff ff       	call   c0014658 <Device::getName()>
c0016e6a:	83 c4 10             	add    esp,0x10
c0016e6d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e70:	0f 85 8d 00 00 00    	jne    c0016f03 <setupTimer(int)+0xb9>
c0016e76:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016e7b:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e82:	74 7f                	je     c0016f03 <setupTimer(int)+0xb9>
c0016e84:	83 ec 0c             	sub    esp,0xc
c0016e87:	68 5c 01 00 00       	push   0x15c
c0016e8c:	e8 af 89 ff ff       	call   c000f840 <malloc>
c0016e91:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e94:	89 c3                	mov    ebx,eax
c0016e96:	e8 e1 f6 00 00       	call   c002657c <PIT::PIT()>
c0016e9b:	59                   	pop    ecx
c0016e9c:	5f                   	pop    edi
c0016e9d:	53                   	push   ebx
c0016e9e:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0016ea4:	e8 c3 d4 ff ff       	call   c001436c <Device::addChild(Device*)>
c0016ea9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016eab:	6a 00                	push   0x0
c0016ead:	6a 00                	push   0x0
c0016eaf:	56                   	push   esi
c0016eb0:	53                   	push   ebx
c0016eb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016eb4:	83 c4 14             	add    esp,0x14
c0016eb7:	68 60 01 00 00       	push   0x160
c0016ebc:	e8 7f 89 ff ff       	call   c000f840 <malloc>
c0016ec1:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ec4:	89 c7                	mov    edi,eax
c0016ec6:	e8 61 f5 00 00       	call   c002642c <APICTimer::APICTimer()>
c0016ecb:	6a 00                	push   0x0
c0016ecd:	6a 00                	push   0x0
c0016ecf:	56                   	push   esi
c0016ed0:	57                   	push   edi
c0016ed1:	e8 58 f4 00 00       	call   c002632e <APICTimer::open(int, int, void*)>
c0016ed6:	83 c4 20             	add    esp,0x20
c0016ed9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016edb:	6a 00                	push   0x0
c0016edd:	6a 00                	push   0x0
c0016edf:	6a 00                	push   0x0
c0016ee1:	53                   	push   ebx
c0016ee2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ee5:	58                   	pop    eax
c0016ee6:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016eeb:	5a                   	pop    edx
c0016eec:	57                   	push   edi
c0016eed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ef3:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ef9:	e8 6e d4 ff ff       	call   c001436c <Device::addChild(Device*)>
c0016efe:	83 c4 10             	add    esp,0x10
c0016f01:	eb 33                	jmp    c0016f36 <setupTimer(int)+0xec>
c0016f03:	83 ec 0c             	sub    esp,0xc
c0016f06:	68 5c 01 00 00       	push   0x15c
c0016f0b:	e8 30 89 ff ff       	call   c000f840 <malloc>
c0016f10:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f13:	89 c3                	mov    ebx,eax
c0016f15:	e8 62 f6 00 00       	call   c002657c <PIT::PIT()>
c0016f1a:	58                   	pop    eax
c0016f1b:	5a                   	pop    edx
c0016f1c:	53                   	push   ebx
c0016f1d:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0016f23:	e8 44 d4 ff ff       	call   c001436c <Device::addChild(Device*)>
c0016f28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f2a:	6a 00                	push   0x0
c0016f2c:	6a 00                	push   0x0
c0016f2e:	56                   	push   esi
c0016f2f:	53                   	push   ebx
c0016f30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f33:	83 c4 20             	add    esp,0x20
c0016f36:	89 d8                	mov    eax,ebx
c0016f38:	5b                   	pop    ebx
c0016f39:	5e                   	pop    esi
c0016f3a:	5f                   	pop    edi
c0016f3b:	c3                   	ret    

c0016f3c <VCache::VCache(PhysicalDisk*)>:
c0016f3c:	53                   	push   ebx
c0016f3d:	83 ec 18             	sub    esp,0x18
c0016f40:	ba b4 b2 02 c0       	mov    edx,0xc002b2b4
c0016f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f49:	89 10                	mov    DWORD PTR [eax],edx
c0016f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f4f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f5a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f65:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016f6c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f77:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f7e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f89:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016f90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f94:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016fa3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016faa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fae:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016fba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fbe:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016fc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016fcd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016fd5:	83 ec 0c             	sub    esp,0xc
c0016fd8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fdc:	e8 5f 88 ff ff       	call   c000f840 <malloc>
c0016fe1:	83 c4 10             	add    esp,0x10
c0016fe4:	89 c3                	mov    ebx,eax
c0016fe6:	83 ec 0c             	sub    esp,0xc
c0016fe9:	53                   	push   ebx
c0016fea:	e8 f3 6e 00 00       	call   c001dee2 <Mutex::Mutex()>
c0016fef:	83 c4 10             	add    esp,0x10
c0016ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016ff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ffd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017001:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017008:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001700f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017013:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017019:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017020:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017024:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001702a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017030:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017034:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017037:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001703a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017042:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017046:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001704c:	05 00 01 00 00       	add    eax,0x100
c0017051:	c1 e0 04             	shl    eax,0x4
c0017054:	83 ec 0c             	sub    esp,0xc
c0017057:	50                   	push   eax
c0017058:	e8 e3 87 ff ff       	call   c000f840 <malloc>
c001705d:	83 c4 10             	add    esp,0x10
c0017060:	89 c2                	mov    edx,eax
c0017062:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017066:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017078:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001707c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017080:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017086:	c1 e0 07             	shl    eax,0x7
c0017089:	83 ec 0c             	sub    esp,0xc
c001708c:	50                   	push   eax
c001708d:	e8 ae 87 ff ff       	call   c000f840 <malloc>
c0017092:	83 c4 10             	add    esp,0x10
c0017095:	89 c2                	mov    edx,eax
c0017097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001709e:	90                   	nop
c001709f:	83 c4 18             	add    esp,0x18
c00170a2:	5b                   	pop    ebx
c00170a3:	c3                   	ret    

c00170a4 <VCache::invalidateReadBuffer()>:
c00170a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170a8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00170ae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170b2:	c3                   	ret    
c00170b3:	90                   	nop

c00170b4 <VCache::writeWriteBuffer()>:
c00170b4:	53                   	push   ebx
c00170b5:	83 ec 14             	sub    esp,0x14
c00170b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00170bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00170c1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170c4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00170c7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00170ca:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00170cd:	50                   	push   eax
c00170ce:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170d1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00170d8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00170df:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00170e3:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00170ea:	83 c4 28             	add    esp,0x28
c00170ed:	5b                   	pop    ebx
c00170ee:	c3                   	ret    
c00170ef:	90                   	nop

c00170f0 <VCache::~VCache()>:
c00170f0:	83 ec 0c             	sub    esp,0xc
c00170f3:	ba b4 b2 02 c0       	mov    edx,0xc002b2b4
c00170f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170fc:	89 10                	mov    DWORD PTR [eax],edx
c00170fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017102:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017105:	84 c0                	test   al,al
c0017107:	74 0f                	je     c0017118 <VCache::~VCache()+0x28>
c0017109:	83 ec 0c             	sub    esp,0xc
c001710c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017110:	e8 9f ff ff ff       	call   c00170b4 <VCache::writeWriteBuffer()>
c0017115:	83 c4 10             	add    esp,0x10
c0017118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001711c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001711f:	83 ec 0c             	sub    esp,0xc
c0017122:	50                   	push   eax
c0017123:	e8 28 87 ff ff       	call   c000f850 <free>
c0017128:	83 c4 10             	add    esp,0x10
c001712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001712f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017132:	83 ec 0c             	sub    esp,0xc
c0017135:	50                   	push   eax
c0017136:	e8 15 87 ff ff       	call   c000f850 <free>
c001713b:	83 c4 10             	add    esp,0x10
c001713e:	90                   	nop
c001713f:	83 c4 0c             	add    esp,0xc
c0017142:	c3                   	ret    
c0017143:	90                   	nop

c0017144 <VCache::~VCache()>:
c0017144:	83 ec 0c             	sub    esp,0xc
c0017147:	83 ec 0c             	sub    esp,0xc
c001714a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001714e:	e8 9d ff ff ff       	call   c00170f0 <VCache::~VCache()>
c0017153:	83 c4 10             	add    esp,0x10
c0017156:	83 ec 08             	sub    esp,0x8
c0017159:	6a 44                	push   0x44
c001715b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001715f:	e8 02 bd ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0017164:	83 c4 10             	add    esp,0x10
c0017167:	83 c4 0c             	add    esp,0xc
c001716a:	c3                   	ret    
c001716b:	90                   	nop

c001716c <VCache::write(unsigned long long, int, void*)>:
c001716c:	55                   	push   ebp
c001716d:	57                   	push   edi
c001716e:	56                   	push   esi
c001716f:	53                   	push   ebx
c0017170:	83 ec 28             	sub    esp,0x28
c0017173:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017177:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001717b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001717f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017183:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017186:	e8 b9 71 00 00       	call   c001e344 <Semaphore::acquire()>
c001718b:	83 c4 10             	add    esp,0x10
c001718e:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017192:	74 0c                	je     c00171a0 <VCache::write(unsigned long long, int, void*)+0x34>
c0017194:	83 ec 0c             	sub    esp,0xc
c0017197:	53                   	push   ebx
c0017198:	e8 07 ff ff ff       	call   c00170a4 <VCache::invalidateReadBuffer()>
c001719d:	83 c4 10             	add    esp,0x10
c00171a0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171a4:	74 66                	je     c001720c <VCache::write(unsigned long long, int, void*)+0xa0>
c00171a6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171a9:	99                   	cdq    
c00171aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171ae:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00171b1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00171b4:	89 c1                	mov    ecx,eax
c00171b6:	89 d0                	mov    eax,edx
c00171b8:	31 f1                	xor    ecx,esi
c00171ba:	31 f8                	xor    eax,edi
c00171bc:	89 ca                	mov    edx,ecx
c00171be:	09 c2                	or     edx,eax
c00171c0:	75 3e                	jne    c0017200 <VCache::write(unsigned long long, int, void*)+0x94>
c00171c2:	83 fd 01             	cmp    ebp,0x1
c00171c5:	75 39                	jne    c0017200 <VCache::write(unsigned long long, int, void*)+0x94>
c00171c7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171ca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171d0:	51                   	push   ecx
c00171d1:	50                   	push   eax
c00171d2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171d6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00171da:	0f af c8             	imul   ecx,eax
c00171dd:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00171e0:	51                   	push   ecx
c00171e1:	e8 5e 95 fe ff       	call   c0000744 <memcpy>
c00171e6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171e9:	83 c4 10             	add    esp,0x10
c00171ec:	40                   	inc    eax
c00171ed:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00171f0:	83 c0 80             	add    eax,0xffffff80
c00171f3:	75 57                	jne    c001724c <VCache::write(unsigned long long, int, void*)+0xe0>
c00171f5:	83 ec 0c             	sub    esp,0xc
c00171f8:	53                   	push   ebx
c00171f9:	e8 b6 fe ff ff       	call   c00170b4 <VCache::writeWriteBuffer()>
c00171fe:	eb 34                	jmp    c0017234 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017200:	83 ec 0c             	sub    esp,0xc
c0017203:	53                   	push   ebx
c0017204:	e8 ab fe ff ff       	call   c00170b4 <VCache::writeWriteBuffer()>
c0017209:	83 c4 10             	add    esp,0x10
c001720c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001720f:	83 fd 7f             	cmp    ebp,0x7f
c0017212:	7f 25                	jg     c0017239 <VCache::write(unsigned long long, int, void*)+0xcd>
c0017214:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017217:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001721a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001721d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017221:	52                   	push   edx
c0017222:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017228:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001722c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001722f:	e8 10 95 fe ff       	call   c0000744 <memcpy>
c0017234:	83 c4 10             	add    esp,0x10
c0017237:	eb 13                	jmp    c001724c <VCache::write(unsigned long long, int, void*)+0xe0>
c0017239:	83 ec 0c             	sub    esp,0xc
c001723c:	8b 10                	mov    edx,DWORD PTR [eax]
c001723e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017242:	55                   	push   ebp
c0017243:	57                   	push   edi
c0017244:	56                   	push   esi
c0017245:	50                   	push   eax
c0017246:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017249:	83 c4 20             	add    esp,0x20
c001724c:	83 ec 0c             	sub    esp,0xc
c001724f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017252:	e8 9b 76 00 00       	call   c001e8f2 <Semaphore::release()>
c0017257:	83 c4 2c             	add    esp,0x2c
c001725a:	31 c0                	xor    eax,eax
c001725c:	5b                   	pop    ebx
c001725d:	5e                   	pop    esi
c001725e:	5f                   	pop    edi
c001725f:	5d                   	pop    ebp
c0017260:	c3                   	ret    
c0017261:	90                   	nop

c0017262 <VCache::read(unsigned long long, int, void*)>:
c0017262:	55                   	push   ebp
c0017263:	57                   	push   edi
c0017264:	56                   	push   esi
c0017265:	53                   	push   ebx
c0017266:	83 ec 28             	sub    esp,0x28
c0017269:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001726d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017271:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017275:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017279:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001727d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017281:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017285:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017288:	e8 b7 70 00 00       	call   c001e344 <Semaphore::acquire()>
c001728d:	83 c4 10             	add    esp,0x10
c0017290:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017294:	74 0c                	je     c00172a2 <VCache::read(unsigned long long, int, void*)+0x40>
c0017296:	83 ec 0c             	sub    esp,0xc
c0017299:	53                   	push   ebx
c001729a:	e8 15 fe ff ff       	call   c00170b4 <VCache::writeWriteBuffer()>
c001729f:	83 c4 10             	add    esp,0x10
c00172a2:	83 fe 01             	cmp    esi,0x1
c00172a5:	0f 85 80 00 00 00    	jne    c001732b <VCache::read(unsigned long long, int, void*)+0xc9>
c00172ab:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172ae:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172b5:	75 74                	jne    c001732b <VCache::read(unsigned long long, int, void*)+0xc9>
c00172b7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172ba:	89 d1                	mov    ecx,edx
c00172bc:	f7 d9                	neg    ecx
c00172be:	89 cf                	mov    edi,ecx
c00172c0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172c4:	c1 ff 1f             	sar    edi,0x1f
c00172c7:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00172ca:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00172ce:	89 ce                	mov    esi,ecx
c00172d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172d4:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00172d8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172dc:	89 cf                	mov    edi,ecx
c00172de:	74 0a                	je     c00172ea <VCache::read(unsigned long long, int, void*)+0x88>
c00172e0:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00172e3:	75 05                	jne    c00172ea <VCache::read(unsigned long long, int, void*)+0x88>
c00172e5:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00172e8:	74 1c                	je     c0017306 <VCache::read(unsigned long long, int, void*)+0xa4>
c00172ea:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00172ee:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00172f1:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00172f4:	83 ec 0c             	sub    esp,0xc
c00172f7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00172f9:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00172fc:	52                   	push   edx
c00172fd:	57                   	push   edi
c00172fe:	56                   	push   esi
c00172ff:	50                   	push   eax
c0017300:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017303:	83 c4 20             	add    esp,0x20
c0017306:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017309:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001730f:	50                   	push   eax
c0017310:	52                   	push   edx
c0017311:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017314:	48                   	dec    eax
c0017315:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017319:	0f af c2             	imul   eax,edx
c001731c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001731f:	50                   	push   eax
c0017320:	55                   	push   ebp
c0017321:	e8 1e 94 fe ff       	call   c0000744 <memcpy>
c0017326:	83 c4 10             	add    esp,0x10
c0017329:	eb 21                	jmp    c001734c <VCache::read(unsigned long long, int, void*)+0xea>
c001732b:	83 ec 0c             	sub    esp,0xc
c001732e:	53                   	push   ebx
c001732f:	e8 70 fd ff ff       	call   c00170a4 <VCache::invalidateReadBuffer()>
c0017334:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017337:	8b 10                	mov    edx,DWORD PTR [eax]
c0017339:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001733c:	56                   	push   esi
c001733d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017341:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017345:	50                   	push   eax
c0017346:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017349:	83 c4 20             	add    esp,0x20
c001734c:	83 ec 0c             	sub    esp,0xc
c001734f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017352:	e8 9b 75 00 00       	call   c001e8f2 <Semaphore::release()>
c0017357:	83 c4 2c             	add    esp,0x2c
c001735a:	31 c0                	xor    eax,eax
c001735c:	5b                   	pop    ebx
c001735d:	5e                   	pop    esi
c001735e:	5f                   	pop    edi
c001735f:	5d                   	pop    ebp
c0017360:	c3                   	ret    
c0017361:	90                   	nop

c0017362 <Video::putrect(int, int, int, int, unsigned int)>:
c0017362:	55                   	push   ebp
c0017363:	57                   	push   edi
c0017364:	56                   	push   esi
c0017365:	53                   	push   ebx
c0017366:	83 ec 1c             	sub    esp,0x1c
c0017369:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001736d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017371:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017375:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017379:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001737d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017381:	01 df                	add    edi,ebx
c0017383:	39 fb                	cmp    ebx,edi
c0017385:	7d 1f                	jge    c00173a6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017387:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001738b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001738f:	7d 12                	jge    c00173a3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017391:	8b 16                	mov    edx,DWORD PTR [esi]
c0017393:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017397:	53                   	push   ebx
c0017398:	55                   	push   ebp
c0017399:	45                   	inc    ebp
c001739a:	56                   	push   esi
c001739b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001739e:	83 c4 10             	add    esp,0x10
c00173a1:	eb e8                	jmp    c001738b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00173a3:	43                   	inc    ebx
c00173a4:	eb dd                	jmp    c0017383 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00173a6:	83 c4 1c             	add    esp,0x1c
c00173a9:	5b                   	pop    ebx
c00173aa:	5e                   	pop    esi
c00173ab:	5f                   	pop    edi
c00173ac:	5d                   	pop    ebp
c00173ad:	c3                   	ret    

c00173ae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00173ae:	55                   	push   ebp
c00173af:	57                   	push   edi
c00173b0:	31 ff                	xor    edi,edi
c00173b2:	56                   	push   esi
c00173b3:	53                   	push   ebx
c00173b4:	83 ec 1c             	sub    esp,0x1c
c00173b7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173bb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00173bf:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00173c6:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00173cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173cf:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00173d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173d7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00173da:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173de:	01 f9                	add    ecx,edi
c00173e0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00173e4:	7d 2f                	jge    c0017415 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00173e6:	31 f6                	xor    esi,esi
c00173e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173ec:	01 f2                	add    edx,esi
c00173ee:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00173f2:	7d 1a                	jge    c001740e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00173f4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00173f7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00173fa:	46                   	inc    esi
c00173fb:	51                   	push   ecx
c00173fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017400:	52                   	push   edx
c0017401:	55                   	push   ebp
c0017402:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017405:	83 c4 10             	add    esp,0x10
c0017408:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001740c:	eb da                	jmp    c00173e8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001740e:	47                   	inc    edi
c001740f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017413:	eb c5                	jmp    c00173da <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017415:	83 c4 1c             	add    esp,0x1c
c0017418:	5b                   	pop    ebx
c0017419:	5e                   	pop    esi
c001741a:	5f                   	pop    edi
c001741b:	5d                   	pop    ebp
c001741c:	c3                   	ret    
c001741d:	90                   	nop

c001741e <Video::blit(unsigned int*, int, int, int, int)>:
c001741e:	55                   	push   ebp
c001741f:	57                   	push   edi
c0017420:	56                   	push   esi
c0017421:	53                   	push   ebx
c0017422:	83 ec 1c             	sub    esp,0x1c
c0017425:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017429:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001742d:	85 c0                	test   eax,eax
c001742f:	79 02                	jns    c0017433 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017431:	31 c0                	xor    eax,eax
c0017433:	c1 e0 02             	shl    eax,0x2
c0017436:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001743a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001743e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017442:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017446:	39 d8                	cmp    eax,ebx
c0017448:	7e 49                	jle    c0017493 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001744a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017450:	7c 41                	jl     c0017493 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017452:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017456:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001745a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001745e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017462:	39 f9                	cmp    ecx,edi
c0017464:	7e 22                	jle    c0017488 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017466:	83 c5 04             	add    ebp,0x4
c0017469:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001746f:	7c 14                	jl     c0017485 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017471:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017473:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017476:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001747a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001747e:	56                   	push   esi
c001747f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017482:	83 c4 10             	add    esp,0x10
c0017485:	47                   	inc    edi
c0017486:	eb d2                	jmp    c001745a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017488:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001748c:	43                   	inc    ebx
c001748d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017491:	eb ab                	jmp    c001743e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017493:	83 c4 1c             	add    esp,0x1c
c0017496:	5b                   	pop    ebx
c0017497:	5e                   	pop    esi
c0017498:	5f                   	pop    edi
c0017499:	5d                   	pop    ebp
c001749a:	c3                   	ret    
c001749b:	90                   	nop

c001749c <Video::clearScreen(unsigned int)>:
c001749c:	57                   	push   edi
c001749d:	56                   	push   esi
c001749e:	53                   	push   ebx
c001749f:	31 db                	xor    ebx,ebx
c00174a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174a5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174ab:	7e 1f                	jle    c00174cc <Video::clearScreen(unsigned int)+0x30>
c00174ad:	31 ff                	xor    edi,edi
c00174af:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174b5:	7e 12                	jle    c00174c9 <Video::clearScreen(unsigned int)+0x2d>
c00174b7:	8b 06                	mov    eax,DWORD PTR [esi]
c00174b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174bd:	53                   	push   ebx
c00174be:	57                   	push   edi
c00174bf:	47                   	inc    edi
c00174c0:	56                   	push   esi
c00174c1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174c4:	83 c4 10             	add    esp,0x10
c00174c7:	eb e6                	jmp    c00174af <Video::clearScreen(unsigned int)+0x13>
c00174c9:	43                   	inc    ebx
c00174ca:	eb d9                	jmp    c00174a5 <Video::clearScreen(unsigned int)+0x9>
c00174cc:	5b                   	pop    ebx
c00174cd:	5e                   	pop    esi
c00174ce:	5f                   	pop    edi
c00174cf:	c3                   	ret    

c00174d0 <Video::putpixel(int, int, unsigned int)>:
c00174d0:	c7 44 24 04 bc b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b2bc
c00174d8:	e9 0a 31 00 00       	jmp    c001a5e7 <Krnl::panic(char const*)>
c00174dd:	90                   	nop

c00174de <Video::Video(char const*)>:
c00174de:	83 ec 0c             	sub    esp,0xc
c00174e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174e5:	83 ec 08             	sub    esp,0x8
c00174e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174ec:	50                   	push   eax
c00174ed:	e8 6a d0 ff ff       	call   c001455c <Device::Device(char const*)>
c00174f2:	83 c4 10             	add    esp,0x10
c00174f5:	ba 40 b3 02 c0       	mov    edx,0xc002b340
c00174fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174fe:	89 10                	mov    DWORD PTR [eax],edx
c0017500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017504:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001750e:	90                   	nop
c001750f:	83 c4 0c             	add    esp,0xc
c0017512:	c3                   	ret    
c0017513:	90                   	nop

c0017514 <Video::~Video()>:
c0017514:	83 ec 0c             	sub    esp,0xc
c0017517:	ba 40 b3 02 c0       	mov    edx,0xc002b340
c001751c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017520:	89 10                	mov    DWORD PTR [eax],edx
c0017522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017526:	83 ec 0c             	sub    esp,0xc
c0017529:	50                   	push   eax
c001752a:	e8 0f cd ff ff       	call   c001423e <Device::~Device()>
c001752f:	83 c4 10             	add    esp,0x10
c0017532:	90                   	nop
c0017533:	83 c4 0c             	add    esp,0xc
c0017536:	c3                   	ret    
c0017537:	90                   	nop

c0017538 <Video::~Video()>:
c0017538:	83 ec 0c             	sub    esp,0xc
c001753b:	83 ec 0c             	sub    esp,0xc
c001753e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017542:	e8 cd ff ff ff       	call   c0017514 <Video::~Video()>
c0017547:	83 c4 10             	add    esp,0x10
c001754a:	83 ec 08             	sub    esp,0x8
c001754d:	68 64 01 00 00       	push   0x164
c0017552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017556:	e8 0b b9 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c001755b:	83 c4 10             	add    esp,0x10
c001755e:	83 c4 0c             	add    esp,0xc
c0017561:	c3                   	ret    

c0017562 <Video::isMonochrome()>:
c0017562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017566:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001756c:	c3                   	ret    
c001756d:	90                   	nop

c001756e <Video::getWidth()>:
c001756e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017572:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017578:	c3                   	ret    
c0017579:	90                   	nop

c001757a <Video::getHeight()>:
c001757a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001757e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017584:	c3                   	ret    
c0017585:	90                   	nop

c0017586 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017586:	55                   	push   ebp
c0017587:	57                   	push   edi
c0017588:	56                   	push   esi
c0017589:	53                   	push   ebx
c001758a:	83 ec 2c             	sub    esp,0x2c
c001758d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017591:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017595:	83 f8 01             	cmp    eax,0x1
c0017598:	19 c9                	sbb    ecx,ecx
c001759a:	31 db                	xor    ebx,ebx
c001759c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00175a0:	89 cd                	mov    ebp,ecx
c00175a2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00175aa:	f7 d5                	not    ebp
c00175ac:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175b2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175b6:	01 d8                	add    eax,ebx
c00175b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175bc:	56                   	push   esi
c00175bd:	e8 b8 ff ff ff       	call   c001757a <Video::getHeight()>
c00175c2:	59                   	pop    ecx
c00175c3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00175c7:	7e 70                	jle    c0017639 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00175c9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175cd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00175d1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00175d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175d8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175dc:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00175e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175e7:	89 f8                	mov    eax,edi
c00175e9:	83 c0 20             	add    eax,0x20
c00175ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175f0:	56                   	push   esi
c00175f1:	e8 78 ff ff ff       	call   c001756e <Video::getWidth()>
c00175f6:	5a                   	pop    edx
c00175f7:	39 c7                	cmp    edi,eax
c00175f9:	7d 34                	jge    c001762f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00175fb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017600:	74 05                	je     c0017607 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017602:	8b 06                	mov    eax,DWORD PTR [esi]
c0017604:	55                   	push   ebp
c0017605:	eb 0d                	jmp    c0017614 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017607:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001760c:	74 12                	je     c0017620 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001760e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017610:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017614:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017618:	57                   	push   edi
c0017619:	56                   	push   esi
c001761a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001761d:	83 c4 10             	add    esp,0x10
c0017620:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017624:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017628:	47                   	inc    edi
c0017629:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001762d:	75 c1                	jne    c00175f0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001762f:	43                   	inc    ebx
c0017630:	83 fb 20             	cmp    ebx,0x20
c0017633:	0f 85 79 ff ff ff    	jne    c00175b2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017639:	83 c4 2c             	add    esp,0x2c
c001763c:	5b                   	pop    ebx
c001763d:	5e                   	pop    esi
c001763e:	5f                   	pop    edi
c001763f:	5d                   	pop    ebp
c0017640:	c3                   	ret    
c0017641:	90                   	nop

c0017642 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017642:	55                   	push   ebp
c0017643:	57                   	push   edi
c0017644:	56                   	push   esi
c0017645:	53                   	push   ebx
c0017646:	83 ec 28             	sub    esp,0x28
c0017649:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001764d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017651:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017655:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017659:	c1 e7 08             	shl    edi,0x8
c001765c:	01 c7                	add    edi,eax
c001765e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017662:	c1 e0 08             	shl    eax,0x8
c0017665:	01 d0                	add    eax,edx
c0017667:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001766b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001766f:	0f af c7             	imul   eax,edi
c0017672:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017679:	50                   	push   eax
c001767a:	e8 c1 81 ff ff       	call   c000f840 <malloc>
c001767f:	83 c4 10             	add    esp,0x10
c0017682:	89 c5                	mov    ebp,eax
c0017684:	85 c0                	test   eax,eax
c0017686:	75 15                	jne    c001769d <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017688:	83 ec 0c             	sub    esp,0xc
c001768b:	68 dd b2 02 c0       	push   0xc002b2dd
c0017690:	e8 b1 b8 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0017695:	83 c4 10             	add    esp,0x10
c0017698:	e9 1c 01 00 00       	jmp    c00177b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001769d:	be 12 00 00 00       	mov    esi,0x12
c00176a2:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176a6:	74 11                	je     c00176b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00176a8:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00176ac:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00176b0:	c1 fe 03             	sar    esi,0x3
c00176b3:	0f af f0             	imul   esi,eax
c00176b6:	83 c6 12             	add    esi,0x12
c00176b9:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00176bd:	74 04                	je     c00176c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00176bf:	85 ff                	test   edi,edi
c00176c1:	75 12                	jne    c00176d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00176c3:	83 ec 0c             	sub    esp,0xc
c00176c6:	68 f4 b2 02 c0       	push   0xc002b2f4
c00176cb:	e8 76 b8 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00176d0:	e9 ce 00 00 00       	jmp    c00177a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00176d5:	52                   	push   edx
c00176d6:	52                   	push   edx
c00176d7:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00176db:	50                   	push   eax
c00176dc:	68 09 b3 02 c0       	push   0xc002b309
c00176e1:	e8 60 b8 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00176e6:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00176ea:	83 c4 10             	add    esp,0x10
c00176ed:	80 fa 02             	cmp    dl,0x2
c00176f0:	0f 85 98 00 00 00    	jne    c001778e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00176f6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00176fb:	75 10                	jne    c001770d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00176fd:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017701:	75 0a                	jne    c001770d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017703:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017706:	83 e8 18             	sub    eax,0x18
c0017709:	a8 f7                	test   al,0xf7
c001770b:	74 0a                	je     c0017717 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001770d:	83 ec 0c             	sub    esp,0xc
c0017710:	68 16 b3 02 c0       	push   0xc002b316
c0017715:	eb 7f                	jmp    c0017796 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017717:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001771f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017727:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001772b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017733:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017737:	75 0c                	jne    c0017745 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017739:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001773e:	c1 e0 18             	shl    eax,0x18
c0017741:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017745:	41                   	inc    ecx
c0017746:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001774b:	c1 e2 10             	shl    edx,0x10
c001774e:	89 d0                	mov    eax,edx
c0017750:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017755:	c1 e2 08             	shl    edx,0x8
c0017758:	09 c2                	or     edx,eax
c001775a:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001775e:	09 c2                	or     edx,eax
c0017760:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017764:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017768:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001776c:	c1 f8 03             	sar    eax,0x3
c001776f:	01 c6                	add    esi,eax
c0017771:	89 c8                	mov    eax,ecx
c0017773:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017777:	39 c7                	cmp    edi,eax
c0017779:	7f b0                	jg     c001772b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001777b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001777f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017783:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017786:	7e 22                	jle    c00177aa <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017788:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001778c:	eb 99                	jmp    c0017727 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001778e:	50                   	push   eax
c001778f:	50                   	push   eax
c0017790:	52                   	push   edx
c0017791:	68 24 b3 02 c0       	push   0xc002b324
c0017796:	e8 ab b7 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001779b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001779e:	e8 ad 80 ff ff       	call   c000f850 <free>
c00177a3:	83 c4 10             	add    esp,0x10
c00177a6:	31 ed                	xor    ebp,ebp
c00177a8:	eb 0f                	jmp    c00177b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177aa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177ae:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00177b1:	89 38                	mov    DWORD PTR [eax],edi
c00177b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177b7:	89 08                	mov    DWORD PTR [eax],ecx
c00177b9:	83 c4 1c             	add    esp,0x1c
c00177bc:	89 e8                	mov    eax,ebp
c00177be:	5b                   	pop    ebx
c00177bf:	5e                   	pop    esi
c00177c0:	5f                   	pop    edi
c00177c1:	5d                   	pop    ebp
c00177c2:	c3                   	ret    
c00177c3:	90                   	nop

c00177c4 <Video::putTGA(int, int, unsigned char*, int)>:
c00177c4:	55                   	push   ebp
c00177c5:	57                   	push   edi
c00177c6:	56                   	push   esi
c00177c7:	53                   	push   ebx
c00177c8:	83 ec 28             	sub    esp,0x28
c00177cb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00177cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177d3:	50                   	push   eax
c00177d4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177d8:	50                   	push   eax
c00177d9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177dd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177e1:	56                   	push   esi
c00177e2:	e8 5b fe ff ff       	call   c0017642 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00177e7:	83 c4 20             	add    esp,0x20
c00177ea:	85 c0                	test   eax,eax
c00177ec:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00177f0:	74 35                	je     c0017827 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00177f2:	89 c7                	mov    edi,eax
c00177f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00177f8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00177fc:	39 d8                	cmp    eax,ebx
c00177fe:	7e 27                	jle    c0017827 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017800:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017804:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017808:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001780c:	39 e8                	cmp    eax,ebp
c001780e:	7e 14                	jle    c0017824 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017810:	8b 06                	mov    eax,DWORD PTR [esi]
c0017812:	83 c7 04             	add    edi,0x4
c0017815:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017818:	53                   	push   ebx
c0017819:	55                   	push   ebp
c001781a:	45                   	inc    ebp
c001781b:	56                   	push   esi
c001781c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001781f:	83 c4 10             	add    esp,0x10
c0017822:	eb e0                	jmp    c0017804 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017824:	43                   	inc    ebx
c0017825:	eb cd                	jmp    c00177f4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017827:	83 c4 1c             	add    esp,0x1c
c001782a:	5b                   	pop    ebx
c001782b:	5e                   	pop    esi
c001782c:	5f                   	pop    edi
c001782d:	5d                   	pop    ebp
c001782e:	c3                   	ret    
c001782f:	90                   	nop

c0017830 <ACPI::close(int, int, void*)>:
c0017830:	83 ec 1c             	sub    esp,0x1c
c0017833:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001783b:	74 0a                	je     c0017847 <ACPI::close(int, int, void*)+0x17>
c001783d:	b8 00 00 00 00       	mov    eax,0x0
c0017842:	e9 9a 00 00 00       	jmp    c00178e1 <ACPI::close(int, int, void*)+0xb1>
c0017847:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001784c:	75 37                	jne    c0017885 <ACPI::close(int, int, void*)+0x55>
c001784e:	83 ec 0c             	sub    esp,0xc
c0017851:	68 80 b3 02 c0       	push   0xc002b380
c0017856:	e8 eb b6 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001785b:	83 c4 10             	add    esp,0x10
c001785e:	a1 68 0a 03 c0       	mov    eax,ds:0xc0030a68
c0017863:	85 c0                	test   eax,eax
c0017865:	74 07                	je     c001786e <ACPI::close(int, int, void*)+0x3e>
c0017867:	a1 68 0a 03 c0       	mov    eax,ds:0xc0030a68
c001786c:	ff d0                	call   eax
c001786e:	83 ec 0c             	sub    esp,0xc
c0017871:	68 a4 b4 02 c0       	push   0xc002b4a4
c0017876:	e8 6c 2d 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c001787b:	83 c4 10             	add    esp,0x10
c001787e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017883:	eb 5c                	jmp    c00178e1 <ACPI::close(int, int, void*)+0xb1>
c0017885:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001788a:	75 50                	jne    c00178dc <ACPI::close(int, int, void*)+0xac>
c001788c:	a1 64 0a 03 c0       	mov    eax,ds:0xc0030a64
c0017891:	85 c0                	test   eax,eax
c0017893:	74 07                	je     c001789c <ACPI::close(int, int, void*)+0x6c>
c0017895:	a1 64 0a 03 c0       	mov    eax,ds:0xc0030a64
c001789a:	ff d0                	call   eax
c001789c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00178a1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178a6:	83 e0 02             	and    eax,0x2
c00178a9:	74 1c                	je     c00178c7 <ACPI::close(int, int, void*)+0x97>
c00178ab:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178b6:	89 c2                	mov    edx,eax
c00178b8:	ec                   	in     al,dx
c00178b9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00178bd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00178c1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178c5:	eb da                	jmp    c00178a1 <ACPI::close(int, int, void*)+0x71>
c00178c7:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00178ce:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00178d3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00178d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178db:	ee                   	out    dx,al
c00178dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178e1:	83 c4 1c             	add    esp,0x1c
c00178e4:	c3                   	ret    

c00178e5 <findRSDP()>:
c00178e5:	83 ec 1c             	sub    esp,0x1c
c00178e8:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00178ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178f3:	83 e0 04             	and    eax,0x4
c00178f6:	84 c0                	test   al,al
c00178f8:	75 07                	jne    c0017901 <findRSDP()+0x1c>
c00178fa:	b8 00 00 00 00       	mov    eax,0x0
c00178ff:	eb 6a                	jmp    c001796b <findRSDP()+0x86>
c0017901:	a1 d4 e3 02 c0       	mov    eax,ds:0xc002e3d4
c0017906:	3d ff 07 00 00       	cmp    eax,0x7ff
c001790b:	7f 1b                	jg     c0017928 <findRSDP()+0x43>
c001790d:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017912:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017918:	83 e2 fb             	and    edx,0xfffffffb
c001791b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017921:	b8 00 00 00 00       	mov    eax,0x0
c0017926:	eb 43                	jmp    c001796b <findRSDP()+0x86>
c0017928:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017930:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017938:	77 2c                	ja     c0017966 <findRSDP()+0x81>
c001793a:	83 ec 04             	sub    esp,0x4
c001793d:	6a 08                	push   0x8
c001793f:	68 8d b3 02 c0       	push   0xc002b38d
c0017944:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017948:	e8 f3 8c fe ff       	call   c0000640 <memcmp>
c001794d:	83 c4 10             	add    esp,0x10
c0017950:	85 c0                	test   eax,eax
c0017952:	0f 94 c0             	sete   al
c0017955:	84 c0                	test   al,al
c0017957:	74 06                	je     c001795f <findRSDP()+0x7a>
c0017959:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001795d:	eb 0c                	jmp    c001796b <findRSDP()+0x86>
c001795f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017964:	eb ca                	jmp    c0017930 <findRSDP()+0x4b>
c0017966:	b8 00 00 00 00       	mov    eax,0x0
c001796b:	83 c4 1c             	add    esp,0x1c
c001796e:	c3                   	ret    

c001796f <loadACPITables(unsigned char*)>:
c001796f:	56                   	push   esi
c0017970:	53                   	push   ebx
c0017971:	83 ec 44             	sub    esp,0x44
c0017974:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017979:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001797f:	83 e0 04             	and    eax,0x4
c0017982:	84 c0                	test   al,al
c0017984:	0f 84 05 02 00 00    	je     c0017b8f <loadACPITables(unsigned char*)+0x220>
c001798a:	a0 80 0c 03 c0       	mov    al,ds:0xc0030c80
c001798f:	84 c0                	test   al,al
c0017991:	74 75                	je     c0017a08 <loadACPITables(unsigned char*)+0x99>
c0017993:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017997:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001799b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001799f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179a2:	83 e8 24             	sub    eax,0x24
c00179a5:	c1 e8 03             	shr    eax,0x3
c00179a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179ac:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00179b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179b8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00179bc:	0f 8d b2 00 00 00    	jge    c0017a74 <loadACPITables(unsigned char*)+0x105>
c00179c2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179c6:	83 c0 24             	add    eax,0x24
c00179c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179d1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179d9:	c1 e0 03             	shl    eax,0x3
c00179dc:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00179e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00179e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00179e9:	89 c1                	mov    ecx,eax
c00179eb:	a1 6c 0a 03 c0       	mov    eax,ds:0xc0030a6c
c00179f0:	8d 50 01             	lea    edx,[eax+0x1]
c00179f3:	89 15 6c 0a 03 c0    	mov    DWORD PTR ds:0xc0030a6c,edx
c00179f9:	89 ca                	mov    edx,ecx
c00179fb:	89 14 c5 84 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf57c],edx
c0017a02:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a06:	eb ac                	jmp    c00179b4 <loadACPITables(unsigned char*)+0x45>
c0017a08:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a17:	83 e8 24             	sub    eax,0x24
c0017a1a:	c1 e8 02             	shr    eax,0x2
c0017a1d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a21:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a2d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a31:	7d 41                	jge    c0017a74 <loadACPITables(unsigned char*)+0x105>
c0017a33:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a37:	83 c0 24             	add    eax,0x24
c0017a3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a4a:	c1 e0 02             	shl    eax,0x2
c0017a4d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a55:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a57:	a1 6c 0a 03 c0       	mov    eax,ds:0xc0030a6c
c0017a5c:	8d 50 01             	lea    edx,[eax+0x1]
c0017a5f:	89 15 6c 0a 03 c0    	mov    DWORD PTR ds:0xc0030a6c,edx
c0017a65:	89 ca                	mov    edx,ecx
c0017a67:	89 14 c5 84 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf57c],edx
c0017a6e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a72:	eb b5                	jmp    c0017a29 <loadACPITables(unsigned char*)+0xba>
c0017a74:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a7c:	a1 6c 0a 03 c0       	mov    eax,ds:0xc0030a6c
c0017a81:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a85:	0f 8d 05 01 00 00    	jge    c0017b90 <loadACPITables(unsigned char*)+0x221>
c0017a8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a8f:	8b 04 c5 84 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf57c]
c0017a96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aa6:	25 ff 0f 00 00       	and    eax,0xfff
c0017aab:	89 c6                	mov    esi,eax
c0017aad:	e8 88 a3 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017ab2:	89 c3                	mov    ebx,eax
c0017ab4:	83 ec 0c             	sub    esp,0xc
c0017ab7:	6a 01                	push   0x1
c0017ab9:	e8 e1 a0 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017abe:	83 c4 10             	add    esp,0x10
c0017ac1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ac5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017acb:	83 ec 0c             	sub    esp,0xc
c0017ace:	6a 01                	push   0x1
c0017ad0:	6a 01                	push   0x1
c0017ad2:	50                   	push   eax
c0017ad3:	52                   	push   edx
c0017ad4:	53                   	push   ebx
c0017ad5:	e8 90 ab ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ada:	83 c4 20             	add    esp,0x20
c0017add:	09 f0                	or     eax,esi
c0017adf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ae3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ae7:	c1 e0 03             	shl    eax,0x3
c0017aea:	05 80 0a 03 c0       	add    eax,0xc0030a80
c0017aef:	83 ec 04             	sub    esp,0x4
c0017af2:	6a 04                	push   0x4
c0017af4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017af8:	50                   	push   eax
c0017af9:	e8 46 8c fe ff       	call   c0000744 <memcpy>
c0017afe:	83 c4 10             	add    esp,0x10
c0017b01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b10:	05 00 10 00 00       	add    eax,0x1000
c0017b15:	c1 e8 0c             	shr    eax,0xc
c0017b18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b20:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b27:	25 ff 0f 00 00       	and    eax,0xfff
c0017b2c:	89 c6                	mov    esi,eax
c0017b2e:	e8 07 a3 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017b33:	89 c3                	mov    ebx,eax
c0017b35:	83 ec 0c             	sub    esp,0xc
c0017b38:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b3c:	e8 5e a0 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017b41:	83 c4 10             	add    esp,0x10
c0017b44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b48:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b4e:	83 ec 0c             	sub    esp,0xc
c0017b51:	6a 01                	push   0x1
c0017b53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b57:	50                   	push   eax
c0017b58:	52                   	push   edx
c0017b59:	53                   	push   ebx
c0017b5a:	e8 0b ab ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b5f:	83 c4 20             	add    esp,0x20
c0017b62:	09 f0                	or     eax,esi
c0017b64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b6b:	83 ec 0c             	sub    esp,0xc
c0017b6e:	50                   	push   eax
c0017b6f:	e8 9b a4 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0017b74:	83 c4 10             	add    esp,0x10
c0017b77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b7f:	89 14 c5 84 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf57c],edx
c0017b86:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b8a:	e9 ed fe ff ff       	jmp    c0017a7c <loadACPITables(unsigned char*)+0x10d>
c0017b8f:	90                   	nop
c0017b90:	83 c4 44             	add    esp,0x44
c0017b93:	5b                   	pop    ebx
c0017b94:	5e                   	pop    esi
c0017b95:	c3                   	ret    

c0017b96 <findRSDT(unsigned char*)>:
c0017b96:	56                   	push   esi
c0017b97:	53                   	push   ebx
c0017b98:	83 ec 44             	sub    esp,0x44
c0017b9b:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017ba0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ba6:	83 e0 04             	and    eax,0x4
c0017ba9:	84 c0                	test   al,al
c0017bab:	75 0a                	jne    c0017bb7 <findRSDT(unsigned char*)+0x21>
c0017bad:	b8 00 00 00 00       	mov    eax,0x0
c0017bb2:	e9 f7 00 00 00       	jmp    c0017cae <findRSDT(unsigned char*)+0x118>
c0017bb7:	83 ec 04             	sub    esp,0x4
c0017bba:	6a 24                	push   0x24
c0017bbc:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017bc0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017bc4:	50                   	push   eax
c0017bc5:	e8 7a 8b fe ff       	call   c0000744 <memcpy>
c0017bca:	83 c4 10             	add    esp,0x10
c0017bcd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017bd1:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017bd5:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017bdd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017be1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017be5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017be9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017bf1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bf5:	25 ff 0f 00 00       	and    eax,0xfff
c0017bfa:	89 c6                	mov    esi,eax
c0017bfc:	e8 39 a2 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017c01:	89 c3                	mov    ebx,eax
c0017c03:	83 ec 0c             	sub    esp,0xc
c0017c06:	6a 02                	push   0x2
c0017c08:	e8 92 9f ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017c0d:	83 c4 10             	add    esp,0x10
c0017c10:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c14:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c1a:	83 ec 0c             	sub    esp,0xc
c0017c1d:	6a 01                	push   0x1
c0017c1f:	6a 02                	push   0x2
c0017c21:	50                   	push   eax
c0017c22:	52                   	push   edx
c0017c23:	53                   	push   ebx
c0017c24:	e8 41 aa ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c29:	83 c4 20             	add    esp,0x20
c0017c2c:	09 f0                	or     eax,esi
c0017c2e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c36:	25 ff 0f 00 00       	and    eax,0xfff
c0017c3b:	89 c6                	mov    esi,eax
c0017c3d:	e8 f8 a1 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017c42:	89 c3                	mov    ebx,eax
c0017c44:	83 ec 0c             	sub    esp,0xc
c0017c47:	6a 02                	push   0x2
c0017c49:	e8 51 9f ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017c4e:	83 c4 10             	add    esp,0x10
c0017c51:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c55:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c5b:	83 ec 0c             	sub    esp,0xc
c0017c5e:	6a 01                	push   0x1
c0017c60:	6a 02                	push   0x2
c0017c62:	50                   	push   eax
c0017c63:	52                   	push   edx
c0017c64:	53                   	push   ebx
c0017c65:	e8 00 aa ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c6a:	83 c4 20             	add    esp,0x20
c0017c6d:	09 f0                	or     eax,esi
c0017c6f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c73:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c78:	75 11                	jne    c0017c8b <findRSDT(unsigned char*)+0xf5>
c0017c7a:	c6 05 80 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030c80,0x0
c0017c81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c85:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c89:	eb 1f                	jmp    c0017caa <findRSDT(unsigned char*)+0x114>
c0017c8b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017c90:	75 11                	jne    c0017ca3 <findRSDT(unsigned char*)+0x10d>
c0017c92:	c6 05 80 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030c80,0x1
c0017c99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c9d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ca1:	eb 07                	jmp    c0017caa <findRSDT(unsigned char*)+0x114>
c0017ca3:	b8 00 00 00 00       	mov    eax,0x0
c0017ca8:	eb 04                	jmp    c0017cae <findRSDT(unsigned char*)+0x118>
c0017caa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cae:	83 c4 44             	add    esp,0x44
c0017cb1:	5b                   	pop    ebx
c0017cb2:	5e                   	pop    esi
c0017cb3:	c3                   	ret    

c0017cb4 <findDataTable(unsigned char*, char*)>:
c0017cb4:	83 ec 1c             	sub    esp,0x1c
c0017cb7:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017cbc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cc2:	83 e0 04             	and    eax,0x4
c0017cc5:	84 c0                	test   al,al
c0017cc7:	75 07                	jne    c0017cd0 <findDataTable(unsigned char*, char*)+0x1c>
c0017cc9:	b8 00 00 00 00       	mov    eax,0x0
c0017cce:	eb 7c                	jmp    c0017d4c <findDataTable(unsigned char*, char*)+0x98>
c0017cd0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017cd8:	a1 6c 0a 03 c0       	mov    eax,ds:0xc0030a6c
c0017cdd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017ce1:	7d 3a                	jge    c0017d1d <findDataTable(unsigned char*, char*)+0x69>
c0017ce3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ce7:	c1 e0 03             	shl    eax,0x3
c0017cea:	05 80 0a 03 c0       	add    eax,0xc0030a80
c0017cef:	83 ec 04             	sub    esp,0x4
c0017cf2:	6a 04                	push   0x4
c0017cf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cf8:	50                   	push   eax
c0017cf9:	e8 42 89 fe ff       	call   c0000640 <memcmp>
c0017cfe:	83 c4 10             	add    esp,0x10
c0017d01:	85 c0                	test   eax,eax
c0017d03:	0f 94 c0             	sete   al
c0017d06:	84 c0                	test   al,al
c0017d08:	74 0d                	je     c0017d17 <findDataTable(unsigned char*, char*)+0x63>
c0017d0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d0e:	8b 04 c5 84 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf57c]
c0017d15:	eb 35                	jmp    c0017d4c <findDataTable(unsigned char*, char*)+0x98>
c0017d17:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d1b:	eb bb                	jmp    c0017cd8 <findDataTable(unsigned char*, char*)+0x24>
c0017d1d:	a0 80 0c 03 c0       	mov    al,ds:0xc0030c80
c0017d22:	84 c0                	test   al,al
c0017d24:	74 07                	je     c0017d2d <findDataTable(unsigned char*, char*)+0x79>
c0017d26:	b8 58 00 00 00       	mov    eax,0x58
c0017d2b:	eb 05                	jmp    c0017d32 <findDataTable(unsigned char*, char*)+0x7e>
c0017d2d:	b8 52 00 00 00       	mov    eax,0x52
c0017d32:	83 ec 04             	sub    esp,0x4
c0017d35:	50                   	push   eax
c0017d36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d3a:	68 c8 b4 02 c0       	push   0xc002b4c8
c0017d3f:	e8 02 b2 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0017d44:	83 c4 10             	add    esp,0x10
c0017d47:	b8 00 00 00 00       	mov    eax,0x0
c0017d4c:	83 c4 1c             	add    esp,0x1c
c0017d4f:	c3                   	ret    

c0017d50 <scanMADT()>:
c0017d50:	53                   	push   ebx
c0017d51:	83 ec 38             	sub    esp,0x38
c0017d54:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017d59:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d5f:	83 e0 04             	and    eax,0x4
c0017d62:	84 c0                	test   al,al
c0017d64:	0f 84 63 04 00 00    	je     c00181cd <scanMADT()+0x47d>
c0017d6a:	e8 76 fb ff ff       	call   c00178e5 <findRSDP()>
c0017d6f:	a3 8c 0c 03 c0       	mov    ds:0xc0030c8c,eax
c0017d74:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c0017d79:	85 c0                	test   eax,eax
c0017d7b:	75 19                	jne    c0017d96 <scanMADT()+0x46>
c0017d7d:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017d82:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d88:	83 e2 fb             	and    edx,0xfffffffb
c0017d8b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d91:	e9 3b 04 00 00       	jmp    c00181d1 <scanMADT()+0x481>
c0017d96:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c0017d9b:	83 ec 0c             	sub    esp,0xc
c0017d9e:	50                   	push   eax
c0017d9f:	e8 f2 fd ff ff       	call   c0017b96 <findRSDT(unsigned char*)>
c0017da4:	83 c4 10             	add    esp,0x10
c0017da7:	a3 88 0c 03 c0       	mov    ds:0xc0030c88,eax
c0017dac:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c0017db1:	85 c0                	test   eax,eax
c0017db3:	75 19                	jne    c0017dce <scanMADT()+0x7e>
c0017db5:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017dba:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dc0:	83 e2 fb             	and    edx,0xfffffffb
c0017dc3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017dc9:	e9 03 04 00 00       	jmp    c00181d1 <scanMADT()+0x481>
c0017dce:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c0017dd3:	83 ec 0c             	sub    esp,0xc
c0017dd6:	50                   	push   eax
c0017dd7:	e8 93 fb ff ff       	call   c001796f <loadACPITables(unsigned char*)>
c0017ddc:	83 c4 10             	add    esp,0x10
c0017ddf:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c0017de4:	83 ec 08             	sub    esp,0x8
c0017de7:	68 96 b3 02 c0       	push   0xc002b396
c0017dec:	50                   	push   eax
c0017ded:	e8 c2 fe ff ff       	call   c0017cb4 <findDataTable(unsigned char*, char*)>
c0017df2:	83 c4 10             	add    esp,0x10
c0017df5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017df9:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017dfe:	75 19                	jne    c0017e19 <scanMADT()+0xc9>
c0017e00:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017e05:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e0b:	83 e2 fe             	and    edx,0xfffffffe
c0017e0e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e14:	e9 b8 03 00 00       	jmp    c00181d1 <scanMADT()+0x481>
c0017e19:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e28:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e2c:	0f 87 9f 03 00 00    	ja     c00181d1 <scanMADT()+0x481>
c0017e32:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e3a:	0f 87 91 03 00 00    	ja     c00181d1 <scanMADT()+0x481>
c0017e40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e44:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e48:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e4c:	8d 50 01             	lea    edx,[eax+0x1]
c0017e4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e53:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e57:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e5b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e63:	8d 50 01             	lea    edx,[eax+0x1]
c0017e66:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e6a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e6e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e72:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e76:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e7b:	0f 86 4f 03 00 00    	jbe    c00181d0 <scanMADT()+0x480>
c0017e81:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e86:	75 57                	jne    c0017edf <scanMADT()+0x18f>
c0017e88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e8c:	8d 50 01             	lea    edx,[eax+0x1]
c0017e8f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e93:	8a 15 80 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e80
c0017e99:	0f b6 d2             	movzx  edx,dl
c0017e9c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ea0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ea4:	88 82 c0 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf140],al
c0017eaa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eae:	8d 50 01             	lea    edx,[eax+0x1]
c0017eb1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eb5:	8a 15 80 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e80
c0017ebb:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ebe:	88 0d 80 0e 03 c0    	mov    BYTE PTR ds:0xc0030e80,cl
c0017ec4:	0f b6 d2             	movzx  edx,dl
c0017ec7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ecb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ecf:	88 82 a0 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf160],al
c0017ed5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017eda:	e9 da 02 00 00       	jmp    c00181b9 <scanMADT()+0x469>
c0017edf:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017ee4:	0f 85 14 01 00 00    	jne    c0017ffe <scanMADT()+0x2ae>
c0017eea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eee:	8d 50 01             	lea    edx,[eax+0x1]
c0017ef1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ef5:	8a 15 40 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d40
c0017efb:	0f b6 d2             	movzx  edx,dl
c0017efe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f02:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f06:	88 82 60 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf2a0],al
c0017f0c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f10:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f18:	01 d0                	add    eax,edx
c0017f1a:	83 c0 2c             	add    eax,0x2c
c0017f1d:	8a 00                	mov    al,BYTE PTR [eax]
c0017f1f:	0f b6 d0             	movzx  edx,al
c0017f22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f26:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f2d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f31:	0f b6 c0             	movzx  eax,al
c0017f34:	c1 e0 08             	shl    eax,0x8
c0017f37:	89 d1                	mov    ecx,edx
c0017f39:	09 c1                	or     ecx,eax
c0017f3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f3f:	8d 50 02             	lea    edx,[eax+0x2]
c0017f42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f46:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f4a:	0f b6 c0             	movzx  eax,al
c0017f4d:	c1 e0 10             	shl    eax,0x10
c0017f50:	09 c1                	or     ecx,eax
c0017f52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f56:	8d 50 03             	lea    edx,[eax+0x3]
c0017f59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f5d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f61:	0f b6 c0             	movzx  eax,al
c0017f64:	c1 e0 18             	shl    eax,0x18
c0017f67:	09 c1                	or     ecx,eax
c0017f69:	89 ca                	mov    edx,ecx
c0017f6b:	a0 40 0d 03 c0       	mov    al,ds:0xc0030d40
c0017f70:	0f b6 c0             	movzx  eax,al
c0017f73:	89 14 85 80 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf280],edx
c0017f7a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f7f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f87:	01 d0                	add    eax,edx
c0017f89:	83 c0 2c             	add    eax,0x2c
c0017f8c:	8a 00                	mov    al,BYTE PTR [eax]
c0017f8e:	0f b6 d0             	movzx  edx,al
c0017f91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f95:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f9c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fa0:	0f b6 c0             	movzx  eax,al
c0017fa3:	c1 e0 08             	shl    eax,0x8
c0017fa6:	89 d1                	mov    ecx,edx
c0017fa8:	09 c1                	or     ecx,eax
c0017faa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fae:	8d 50 02             	lea    edx,[eax+0x2]
c0017fb1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fb5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fb9:	0f b6 c0             	movzx  eax,al
c0017fbc:	c1 e0 10             	shl    eax,0x10
c0017fbf:	09 c1                	or     ecx,eax
c0017fc1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc5:	8d 50 03             	lea    edx,[eax+0x3]
c0017fc8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fcc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fd0:	0f b6 c0             	movzx  eax,al
c0017fd3:	c1 e0 18             	shl    eax,0x18
c0017fd6:	09 c1                	or     ecx,eax
c0017fd8:	89 ca                	mov    edx,ecx
c0017fda:	a0 40 0d 03 c0       	mov    al,ds:0xc0030d40
c0017fdf:	0f b6 c0             	movzx  eax,al
c0017fe2:	89 14 85 00 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf200],edx
c0017fe9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fee:	a0 40 0d 03 c0       	mov    al,ds:0xc0030d40
c0017ff3:	40                   	inc    eax
c0017ff4:	a2 40 0d 03 c0       	mov    ds:0xc0030d40,al
c0017ff9:	e9 bb 01 00 00       	jmp    c00181b9 <scanMADT()+0x469>
c0017ffe:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018003:	0f 85 e9 00 00 00    	jne    c00180f2 <scanMADT()+0x3a2>
c0018009:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800d:	8d 50 01             	lea    edx,[eax+0x1]
c0018010:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018014:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018018:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001801c:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018020:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018024:	8d 50 01             	lea    edx,[eax+0x1]
c0018027:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001802b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001802f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018033:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018037:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001803b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803f:	01 d0                	add    eax,edx
c0018041:	83 c0 2c             	add    eax,0x2c
c0018044:	8a 00                	mov    al,BYTE PTR [eax]
c0018046:	0f b6 d0             	movzx  edx,al
c0018049:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001804d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018050:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018054:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018058:	0f b6 c0             	movzx  eax,al
c001805b:	c1 e0 08             	shl    eax,0x8
c001805e:	89 d1                	mov    ecx,edx
c0018060:	09 c1                	or     ecx,eax
c0018062:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018066:	8d 50 02             	lea    edx,[eax+0x2]
c0018069:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001806d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018071:	0f b6 c0             	movzx  eax,al
c0018074:	c1 e0 10             	shl    eax,0x10
c0018077:	09 c1                	or     ecx,eax
c0018079:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001807d:	8d 50 03             	lea    edx,[eax+0x3]
c0018080:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018084:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018088:	0f b6 c0             	movzx  eax,al
c001808b:	c1 e0 18             	shl    eax,0x18
c001808e:	09 c8                	or     eax,ecx
c0018090:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018094:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018099:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001809d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a1:	01 d0                	add    eax,edx
c00180a3:	83 c0 2c             	add    eax,0x2c
c00180a6:	8a 00                	mov    al,BYTE PTR [eax]
c00180a8:	0f b6 c0             	movzx  eax,al
c00180ab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00180af:	8d 4a 01             	lea    ecx,[edx+0x1]
c00180b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180b6:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00180ba:	0f b6 d2             	movzx  edx,dl
c00180bd:	c1 e2 08             	shl    edx,0x8
c00180c0:	09 d0                	or     eax,edx
c00180c2:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00180c7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180cc:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00180d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180d5:	88 90 e0 d5 02 c0    	mov    BYTE PTR [eax-0x3ffd2a20],dl
c00180db:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00180e0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00180e5:	66 89 84 12 20 0d 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf2e0],ax
c00180ed:	e9 c7 00 00 00       	jmp    c00181b9 <scanMADT()+0x469>
c00180f2:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00180f7:	0f 85 b0 00 00 00    	jne    c00181ad <scanMADT()+0x45d>
c00180fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018101:	8d 50 01             	lea    edx,[eax+0x1]
c0018104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018108:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001810c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018110:	0f b6 c0             	movzx  eax,al
c0018113:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018117:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001811b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001811f:	01 d0                	add    eax,edx
c0018121:	83 c0 2c             	add    eax,0x2c
c0018124:	8a 00                	mov    al,BYTE PTR [eax]
c0018126:	0f b6 d0             	movzx  edx,al
c0018129:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001812d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018130:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018134:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018138:	0f b6 c0             	movzx  eax,al
c001813b:	c1 e0 08             	shl    eax,0x8
c001813e:	09 d0                	or     eax,edx
c0018140:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018144:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018149:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001814d:	8d 50 01             	lea    edx,[eax+0x1]
c0018150:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018154:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018158:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001815c:	0f b6 c0             	movzx  eax,al
c001815f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018167:	c1 e0 08             	shl    eax,0x8
c001816a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001816e:	89 c1                	mov    ecx,eax
c0018170:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018174:	c1 e0 18             	shl    eax,0x18
c0018177:	89 c3                	mov    ebx,eax
c0018179:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001817e:	8d 50 01             	lea    edx,[eax+0x1]
c0018181:	89 15 90 0c 03 c0    	mov    DWORD PTR ds:0xc0030c90,edx
c0018187:	09 d9                	or     ecx,ebx
c0018189:	89 ca                	mov    edx,ecx
c001818b:	89 14 85 a0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf360],edx
c0018192:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001819a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001819e:	68 f8 b4 02 c0       	push   0xc002b4f8
c00181a3:	e8 9e ad ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00181a8:	83 c4 10             	add    esp,0x10
c00181ab:	eb 0c                	jmp    c00181b9 <scanMADT()+0x469>
c00181ad:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00181b2:	75 05                	jne    c00181b9 <scanMADT()+0x469>
c00181b4:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00181b9:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00181be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181c2:	01 d0                	add    eax,edx
c00181c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00181c8:	e9 54 fc ff ff       	jmp    c0017e21 <scanMADT()+0xd1>
c00181cd:	90                   	nop
c00181ce:	eb 01                	jmp    c00181d1 <scanMADT()+0x481>
c00181d0:	90                   	nop
c00181d1:	83 c4 38             	add    esp,0x38
c00181d4:	5b                   	pop    ebx
c00181d5:	c3                   	ret    

c00181d6 <ACPI::ACPI()>:
c00181d6:	83 ec 0c             	sub    esp,0xc
c00181d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181dd:	83 ec 08             	sub    esp,0x8
c00181e0:	68 9b b3 02 c0       	push   0xc002b39b
c00181e5:	50                   	push   eax
c00181e6:	e8 71 c3 ff ff       	call   c001455c <Device::Device(char const*)>
c00181eb:	83 c4 10             	add    esp,0x10
c00181ee:	ba 6c b5 02 c0       	mov    edx,0xc002b56c
c00181f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f7:	89 10                	mov    DWORD PTR [eax],edx
c00181f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181fd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018208:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018216:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018224:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001822b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822f:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018236:	e8 15 fb ff ff       	call   c0017d50 <scanMADT()>
c001823b:	90                   	nop
c001823c:	83 c4 0c             	add    esp,0xc
c001823f:	c3                   	ret    

c0018240 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018240:	83 ec 2c             	sub    esp,0x2c
c0018243:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018247:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001824b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001824f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018253:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018258:	88 d0                	mov    al,dl
c001825a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001825e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018263:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001826b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001826f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018275:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018279:	0f 8d 97 00 00 00    	jge    c0018316 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001827f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018283:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018287:	83 c2 2a             	add    edx,0x2a
c001828a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001828e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018293:	75 78                	jne    c001830d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018295:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018299:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001829d:	83 c2 2a             	add    edx,0x2a
c00182a0:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00182a4:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00182a8:	75 63                	jne    c001830d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182aa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00182af:	74 3a                	je     c00182eb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00182b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182b9:	83 c2 2a             	add    edx,0x2a
c00182bc:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00182c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00182c7:	39 c2                	cmp    edx,eax
c00182c9:	74 10                	je     c00182db <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00182cb:	83 ec 0c             	sub    esp,0xc
c00182ce:	68 34 b5 02 c0       	push   0xc002b534
c00182d3:	e8 0f 23 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c00182d8:	83 c4 10             	add    esp,0x10
c00182db:	83 ec 0c             	sub    esp,0xc
c00182de:	68 a0 b3 02 c0       	push   0xc002b3a0
c00182e3:	e8 ff 22 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c00182e8:	83 c4 10             	add    esp,0x10
c00182eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00182ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182f7:	83 c2 2a             	add    edx,0x2a
c00182fa:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00182fe:	8b 02                	mov    eax,DWORD PTR [edx]
c0018300:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018303:	89 01                	mov    DWORD PTR [ecx],eax
c0018305:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018308:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001830d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018311:	e9 55 ff ff ff       	jmp    c001826b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018316:	90                   	nop
c0018317:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001831b:	83 c4 2c             	add    esp,0x2c
c001831e:	c2 04 00             	ret    0x4
c0018321:	90                   	nop

c0018322 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018322:	83 ec 1c             	sub    esp,0x1c
c0018325:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018329:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001832d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018331:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018336:	88 c8                	mov    al,cl
c0018338:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001833c:	88 d0                	mov    al,dl
c001833e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018346:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001834c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018350:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018353:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018357:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001835b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001835f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018365:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018369:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001836c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018370:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018375:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018379:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001837f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018383:	8d 48 01             	lea    ecx,[eax+0x1]
c0018386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001838a:	83 c2 2a             	add    edx,0x2a
c001838d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018391:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018395:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001839b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001839f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183a2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183a6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00183aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183ae:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183b4:	8d 50 01             	lea    edx,[eax+0x1]
c00183b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183bb:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00183c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183c5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183cb:	3d 00 02 00 00       	cmp    eax,0x200
c00183d0:	75 10                	jne    c00183e2 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00183d2:	83 ec 0c             	sub    esp,0xc
c00183d5:	68 af b3 02 c0       	push   0xc002b3af
c00183da:	e8 08 22 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c00183df:	83 c4 10             	add    esp,0x10
c00183e2:	90                   	nop
c00183e3:	83 c4 1c             	add    esp,0x1c
c00183e6:	c3                   	ret    
c00183e7:	90                   	nop

c00183e8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00183e8:	b8 00 00 00 00       	mov    eax,0x0
c00183ed:	c3                   	ret    

c00183ee <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00183ee:	83 ec 1c             	sub    esp,0x1c
c00183f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00183f5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00183f8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00183fc:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0018401:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018406:	83 ec 08             	sub    esp,0x8
c0018409:	52                   	push   edx
c001840a:	50                   	push   eax
c001840b:	e8 48 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018410:	83 c4 10             	add    esp,0x10
c0018413:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018417:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001841c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018421:	83 ec 04             	sub    esp,0x4
c0018424:	6a 01                	push   0x1
c0018426:	52                   	push   edx
c0018427:	50                   	push   eax
c0018428:	e8 41 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c001842d:	83 c4 10             	add    esp,0x10
c0018430:	90                   	nop
c0018431:	83 c4 1c             	add    esp,0x1c
c0018434:	c3                   	ret    
c0018435:	90                   	nop

c0018436 <ACPI::open(int, int, void*)>:
c0018436:	53                   	push   ebx
c0018437:	83 ec 28             	sub    esp,0x28
c001843a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001843e:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018445:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018449:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018450:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0018455:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001845b:	83 e0 04             	and    eax,0x4
c001845e:	84 c0                	test   al,al
c0018460:	74 47                	je     c00184a9 <ACPI::open(int, int, void*)+0x73>
c0018462:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c0018467:	83 ec 08             	sub    esp,0x8
c001846a:	68 cc b3 02 c0       	push   0xc002b3cc
c001846f:	50                   	push   eax
c0018470:	e8 3f f8 ff ff       	call   c0017cb4 <findDataTable(unsigned char*, char*)>
c0018475:	83 c4 10             	add    esp,0x10
c0018478:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001847c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018481:	74 26                	je     c00184a9 <ACPI::open(int, int, void*)+0x73>
c0018483:	83 ec 0c             	sub    esp,0xc
c0018486:	68 d1 b3 02 c0       	push   0xc002b3d1
c001848b:	e8 b6 aa ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018490:	83 c4 10             	add    esp,0x10
c0018493:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018497:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001849e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184a2:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184a9:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00184b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184b5:	8a 00                	mov    al,BYTE PTR [eax]
c00184b7:	3c 01                	cmp    al,0x1
c00184b9:	75 28                	jne    c00184e3 <ACPI::open(int, int, void*)+0xad>
c00184bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184bf:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ca:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184d1:	83 ec 0c             	sub    esp,0xc
c00184d4:	68 e2 b3 02 c0       	push   0xc002b3e2
c00184d9:	e8 68 aa ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00184de:	83 c4 10             	add    esp,0x10
c00184e1:	eb 25                	jmp    c0018508 <ACPI::open(int, int, void*)+0xd2>
c00184e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184e7:	8a 00                	mov    al,BYTE PTR [eax]
c00184e9:	3c 02                	cmp    al,0x2
c00184eb:	75 1b                	jne    c0018508 <ACPI::open(int, int, void*)+0xd2>
c00184ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184f1:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184f8:	83 ec 0c             	sub    esp,0xc
c00184fb:	68 ea b3 02 c0       	push   0xc002b3ea
c0018500:	e8 41 aa ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018505:	83 c4 10             	add    esp,0x10
c0018508:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001850c:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018512:	83 f0 01             	xor    eax,0x1
c0018515:	84 c0                	test   al,al
c0018517:	74 6a                	je     c0018583 <ACPI::open(int, int, void*)+0x14d>
c0018519:	83 ec 0c             	sub    esp,0xc
c001851c:	68 f2 b3 02 c0       	push   0xc002b3f2
c0018521:	e8 20 aa ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018526:	83 c4 10             	add    esp,0x10
c0018529:	e8 22 7c fe ff       	call   c0000150 <manualPCIProbe>
c001852e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018532:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018537:	75 28                	jne    c0018561 <ACPI::open(int, int, void*)+0x12b>
c0018539:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001853d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018544:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018548:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001854f:	83 ec 0c             	sub    esp,0xc
c0018552:	68 00 b4 02 c0       	push   0xc002b400
c0018557:	e8 ea a9 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001855c:	83 c4 10             	add    esp,0x10
c001855f:	eb 22                	jmp    c0018583 <ACPI::open(int, int, void*)+0x14d>
c0018561:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0018566:	75 1b                	jne    c0018583 <ACPI::open(int, int, void*)+0x14d>
c0018568:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001856c:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018573:	83 ec 0c             	sub    esp,0xc
c0018576:	68 0a b4 02 c0       	push   0xc002b40a
c001857b:	e8 c6 a9 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018580:	83 c4 10             	add    esp,0x10
c0018583:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018587:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001858d:	84 c0                	test   al,al
c001858f:	74 13                	je     c00185a4 <ACPI::open(int, int, void*)+0x16e>
c0018591:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018595:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001859b:	83 f0 01             	xor    eax,0x1
c001859e:	0f b6 c0             	movzx  eax,al
c00185a1:	40                   	inc    eax
c00185a2:	eb 05                	jmp    c00185a9 <ACPI::open(int, int, void*)+0x173>
c00185a4:	b8 00 00 00 00       	mov    eax,0x0
c00185a9:	83 ec 08             	sub    esp,0x8
c00185ac:	50                   	push   eax
c00185ad:	68 14 b4 02 c0       	push   0xc002b414
c00185b2:	e8 8f a9 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00185b7:	83 c4 10             	add    esp,0x10
c00185ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185be:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185c4:	84 c0                	test   al,al
c00185c6:	74 67                	je     c001862f <ACPI::open(int, int, void*)+0x1f9>
c00185c8:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00185d0:	83 ec 0c             	sub    esp,0xc
c00185d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185d7:	e8 64 72 ff ff       	call   c000f840 <malloc>
c00185dc:	83 c4 10             	add    esp,0x10
c00185df:	89 c3                	mov    ebx,eax
c00185e1:	83 ec 0c             	sub    esp,0xc
c00185e4:	53                   	push   ebx
c00185e5:	e8 dc a2 00 00       	call   c00228c6 <PCI::PCI()>
c00185ea:	83 c4 10             	add    esp,0x10
c00185ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00185f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185f5:	83 ec 08             	sub    esp,0x8
c00185f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00185fc:	50                   	push   eax
c00185fd:	e8 6a bd ff ff       	call   c001436c <Device::addChild(Device*)>
c0018602:	83 c4 10             	add    esp,0x10
c0018605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018609:	8b 00                	mov    eax,DWORD PTR [eax]
c001860b:	83 c0 08             	add    eax,0x8
c001860e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018610:	6a 00                	push   0x0
c0018612:	6a 00                	push   0x0
c0018614:	6a 00                	push   0x0
c0018616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001861a:	ff d0                	call   eax
c001861c:	83 c4 10             	add    esp,0x10
c001861f:	83 ec 0c             	sub    esp,0xc
c0018622:	68 1d b4 02 c0       	push   0xc002b41d
c0018627:	e8 1a a9 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001862c:	83 c4 10             	add    esp,0x10
c001862f:	83 ec 0c             	sub    esp,0xc
c0018632:	68 28 b4 02 c0       	push   0xc002b428
c0018637:	e8 81 46 00 00       	call   c001ccbd <Thr::loadKernelSymbolTable(char const*)>
c001863c:	83 c4 10             	add    esp,0x10
c001863f:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0018645:	83 ec 08             	sub    esp,0x8
c0018648:	6a 01                	push   0x1
c001864a:	68 46 b4 02 c0       	push   0xc002b446
c001864f:	e8 c6 50 00 00       	call   c001d71a <Thr::loadDLL(char const*, bool)>
c0018654:	83 c4 10             	add    esp,0x10
c0018657:	83 ec 08             	sub    esp,0x8
c001865a:	53                   	push   ebx
c001865b:	50                   	push   eax
c001865c:	e8 ed 52 00 00       	call   c001d94e <Thr::executeDLL(unsigned long, void*)>
c0018661:	83 c4 10             	add    esp,0x10
c0018664:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c001866a:	83 ec 08             	sub    esp,0x8
c001866d:	6a 01                	push   0x1
c001866f:	68 63 b4 02 c0       	push   0xc002b463
c0018674:	e8 a1 50 00 00       	call   c001d71a <Thr::loadDLL(char const*, bool)>
c0018679:	83 c4 10             	add    esp,0x10
c001867c:	83 ec 08             	sub    esp,0x8
c001867f:	53                   	push   ebx
c0018680:	50                   	push   eax
c0018681:	e8 c8 52 00 00       	call   c001d94e <Thr::executeDLL(unsigned long, void*)>
c0018686:	83 c4 10             	add    esp,0x10
c0018689:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001868e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018694:	83 e0 04             	and    eax,0x4
c0018697:	84 c0                	test   al,al
c0018699:	0f 84 d2 00 00 00    	je     c0018771 <ACPI::open(int, int, void*)+0x33b>
c001869f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00186a6:	83 ec 0c             	sub    esp,0xc
c00186a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00186ad:	e8 8e 71 ff ff       	call   c000f840 <malloc>
c00186b2:	83 c4 10             	add    esp,0x10
c00186b5:	89 c3                	mov    ebx,eax
c00186b7:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c00186bc:	83 ec 04             	sub    esp,0x4
c00186bf:	50                   	push   eax
c00186c0:	68 80 b4 02 c0       	push   0xc002b480
c00186c5:	53                   	push   ebx
c00186c6:	e8 d3 ad ff ff       	call   c001349e <File::File(char const*, Process*)>
c00186cb:	83 c4 10             	add    esp,0x10
c00186ce:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00186d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186d7:	74 17                	je     c00186f0 <ACPI::open(int, int, void*)+0x2ba>
c00186d9:	83 ec 0c             	sub    esp,0xc
c00186dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186e0:	e8 8b b0 ff ff       	call   c0013770 <File::exists()>
c00186e5:	83 c4 10             	add    esp,0x10
c00186e8:	84 c0                	test   al,al
c00186ea:	74 04                	je     c00186f0 <ACPI::open(int, int, void*)+0x2ba>
c00186ec:	b0 01                	mov    al,0x1
c00186ee:	eb 02                	jmp    c00186f2 <ACPI::open(int, int, void*)+0x2bc>
c00186f0:	b0 00                	mov    al,0x0
c00186f2:	84 c0                	test   al,al
c00186f4:	74 22                	je     c0018718 <ACPI::open(int, int, void*)+0x2e2>
c00186f6:	83 ec 08             	sub    esp,0x8
c00186f9:	6a 01                	push   0x1
c00186fb:	68 80 b4 02 c0       	push   0xc002b480
c0018700:	e8 15 50 00 00       	call   c001d71a <Thr::loadDLL(char const*, bool)>
c0018705:	83 c4 10             	add    esp,0x10
c0018708:	83 ec 08             	sub    esp,0x8
c001870b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001870f:	50                   	push   eax
c0018710:	e8 39 52 00 00       	call   c001d94e <Thr::executeDLL(unsigned long, void*)>
c0018715:	83 c4 10             	add    esp,0x10
c0018718:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001871d:	74 1e                	je     c001873d <ACPI::open(int, int, void*)+0x307>
c001871f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018724:	74 17                	je     c001873d <ACPI::open(int, int, void*)+0x307>
c0018726:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001872a:	8b 00                	mov    eax,DWORD PTR [eax]
c001872c:	83 c0 08             	add    eax,0x8
c001872f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018731:	83 ec 0c             	sub    esp,0xc
c0018734:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018738:	ff d0                	call   eax
c001873a:	83 c4 10             	add    esp,0x10
c001873d:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c0018742:	83 ec 08             	sub    esp,0x8
c0018745:	68 9d b4 02 c0       	push   0xc002b49d
c001874a:	50                   	push   eax
c001874b:	e8 64 f5 ff ff       	call   c0017cb4 <findDataTable(unsigned char*, char*)>
c0018750:	83 c4 10             	add    esp,0x10
c0018753:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018757:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001875c:	74 13                	je     c0018771 <ACPI::open(int, int, void*)+0x33b>
c001875e:	83 ec 08             	sub    esp,0x8
c0018761:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018765:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018769:	e8 80 fc ff ff       	call   c00183ee <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001876e:	83 c4 10             	add    esp,0x10
c0018771:	b8 00 00 00 00       	mov    eax,0x0
c0018776:	83 c4 28             	add    esp,0x28
c0018779:	5b                   	pop    ebx
c001877a:	c3                   	ret    
c001877b:	90                   	nop

c001877c <ACPI::sleep()>:
c001877c:	83 ec 0c             	sub    esp,0xc
c001877f:	a1 60 0a 03 c0       	mov    eax,ds:0xc0030a60
c0018784:	85 c0                	test   eax,eax
c0018786:	74 07                	je     c001878f <ACPI::sleep()+0x13>
c0018788:	a1 60 0a 03 c0       	mov    eax,ds:0xc0030a60
c001878d:	ff d0                	call   eax
c001878f:	90                   	nop
c0018790:	83 c4 0c             	add    esp,0xc
c0018793:	c3                   	ret    

c0018794 <CPU::close(int, int, void*)>:
c0018794:	31 c0                	xor    eax,eax
c0018796:	c3                   	ret    
c0018797:	90                   	nop

c0018798 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018798:	55                   	push   ebp
c0018799:	57                   	push   edi
c001879a:	56                   	push   esi
c001879b:	53                   	push   ebx
c001879c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00187a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187a4:	89 ce                	mov    esi,ecx
c00187a6:	89 d5                	mov    ebp,edx
c00187a8:	80 f9 04             	cmp    cl,0x4
c00187ab:	75 28                	jne    c00187d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00187ad:	8d 42 f9             	lea    eax,[edx-0x7]
c00187b0:	3c 03                	cmp    al,0x3
c00187b2:	0f 86 63 01 00 00    	jbe    c001891b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187b8:	80 fa 03             	cmp    dl,0x3
c00187bb:	0f 84 5a 01 00 00    	je     c001891b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187c1:	8d 7a f2             	lea    edi,[edx-0xe]
c00187c4:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c00187c9:	89 fb                	mov    ebx,edi
c00187cb:	80 fb 01             	cmp    bl,0x1
c00187ce:	77 4e                	ja     c001881e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00187d0:	e9 52 01 00 00       	jmp    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187d5:	80 f9 05             	cmp    cl,0x5
c00187d8:	75 4d                	jne    c0018827 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00187da:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c00187df:	80 fa 03             	cmp    dl,0x3
c00187e2:	0f 86 3f 01 00 00    	jbe    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187e8:	8d 7a fa             	lea    edi,[edx-0x6]
c00187eb:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c00187f0:	89 fb                	mov    ebx,edi
c00187f2:	80 fb 01             	cmp    bl,0x1
c00187f5:	0f 86 2c 01 00 00    	jbe    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187fb:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018800:	80 fa 08             	cmp    dl,0x8
c0018803:	0f 84 1e 01 00 00    	je     c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018809:	89 d7                	mov    edi,edx
c001880b:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018810:	83 e7 fb             	and    edi,0xfffffffb
c0018813:	89 fb                	mov    ebx,edi
c0018815:	80 fb 09             	cmp    bl,0x9
c0018818:	0f 84 09 01 00 00    	je     c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001881e:	31 c0                	xor    eax,eax
c0018820:	89 eb                	mov    ebx,ebp
c0018822:	0f b6 fb             	movzx  edi,bl
c0018825:	eb 30                	jmp    c0018857 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018827:	31 c0                	xor    eax,eax
c0018829:	80 f9 06             	cmp    cl,0x6
c001882c:	75 f2                	jne    c0018820 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001882e:	80 fa 0a             	cmp    dl,0xa
c0018831:	77 ed                	ja     c0018820 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018833:	bf de 05 00 00       	mov    edi,0x5de
c0018838:	0f a3 d7             	bt     edi,edx
c001883b:	73 e3                	jae    c0018820 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001883d:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018842:	e9 e0 00 00 00       	jmp    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018847:	39 c7                	cmp    edi,eax
c0018849:	0f 84 d3 00 00 00    	je     c0018922 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001884f:	40                   	inc    eax
c0018850:	3d d0 00 00 00       	cmp    eax,0xd0
c0018855:	74 09                	je     c0018860 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018857:	89 f3                	mov    ebx,esi
c0018859:	80 fb 0f             	cmp    bl,0xf
c001885c:	75 f1                	jne    c001884f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001885e:	eb e7                	jmp    c0018847 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018860:	80 f9 10             	cmp    cl,0x10
c0018863:	75 14                	jne    c0018879 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018865:	8d 42 fc             	lea    eax,[edx-0x4]
c0018868:	83 e0 fb             	and    eax,0xfffffffb
c001886b:	3c 02                	cmp    al,0x2
c001886d:	76 34                	jbe    c00188a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001886f:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018874:	80 fa 02             	cmp    dl,0x2
c0018877:	eb 24                	jmp    c001889d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018879:	80 f9 11             	cmp    cl,0x11
c001887c:	75 13                	jne    c0018891 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001887e:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018883:	80 fa 03             	cmp    dl,0x3
c0018886:	0f 85 9b 00 00 00    	jne    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001888c:	e9 91 00 00 00       	jmp    c0018922 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018891:	80 f9 12             	cmp    cl,0x12
c0018894:	75 14                	jne    c00188aa <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018896:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c001889b:	fe ca                	dec    dl
c001889d:	0f 85 84 00 00 00    	jne    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a3:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c00188a8:	eb 7d                	jmp    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188aa:	80 f9 14             	cmp    cl,0x14
c00188ad:	75 12                	jne    c00188c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00188af:	4a                   	dec    edx
c00188b0:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c00188b5:	80 fa 01             	cmp    dl,0x1
c00188b8:	77 6d                	ja     c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ba:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c00188bf:	eb 66                	jmp    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c1:	80 f9 15             	cmp    cl,0x15
c00188c4:	75 31                	jne    c00188f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00188c6:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c00188cb:	80 fa 01             	cmp    dl,0x1
c00188ce:	74 57                	je     c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d0:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c00188d5:	80 fa 13             	cmp    dl,0x13
c00188d8:	76 0c                	jbe    c00188e6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00188da:	80 fa 30             	cmp    dl,0x30
c00188dd:	75 48                	jne    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188df:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c00188e4:	eb 41                	jmp    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e6:	b9 04 00 09 00       	mov    ecx,0x90004
c00188eb:	0f a3 d1             	bt     ecx,edx
c00188ee:	73 37                	jae    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f0:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c00188f5:	eb 30                	jmp    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f7:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c00188fc:	80 f9 16             	cmp    cl,0x16
c00188ff:	75 26                	jne    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018901:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018906:	84 d2                	test   dl,dl
c0018908:	74 1d                	je     c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001890a:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c001890f:	80 fa 30             	cmp    dl,0x30
c0018912:	75 13                	jne    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018914:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018919:	eb 0c                	jmp    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891b:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018920:	eb 05                	jmp    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018922:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018927:	5b                   	pop    ebx
c0018928:	5e                   	pop    esi
c0018929:	5f                   	pop    edi
c001892a:	5d                   	pop    ebp
c001892b:	c3                   	ret    

c001892c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001892c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018930:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018934:	80 f9 04             	cmp    cl,0x4
c0018937:	75 6b                	jne    c00189a4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018939:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c001893e:	80 fa 01             	cmp    dl,0x1
c0018941:	0f 86 92 02 00 00    	jbe    c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018947:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c001894c:	80 fa 02             	cmp    dl,0x2
c001894f:	0f 84 84 02 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018955:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c001895a:	80 fa 03             	cmp    dl,0x3
c001895d:	0f 84 76 02 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018963:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c0018968:	80 fa 04             	cmp    dl,0x4
c001896b:	0f 84 68 02 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018971:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c0018976:	80 fa 05             	cmp    dl,0x5
c0018979:	0f 84 5a 02 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897f:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c0018984:	80 fa 07             	cmp    dl,0x7
c0018987:	0f 84 4c 02 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001898d:	83 ea 08             	sub    edx,0x8
c0018990:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018995:	80 fa 01             	cmp    dl,0x1
c0018998:	0f 87 3b 02 00 00    	ja     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001899e:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c00189a3:	c3                   	ret    
c00189a4:	80 f9 05             	cmp    cl,0x5
c00189a7:	75 45                	jne    c00189ee <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00189a9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00189ac:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c00189b1:	80 f9 02             	cmp    cl,0x2
c00189b4:	0f 86 1f 02 00 00    	jbe    c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ba:	80 fa 04             	cmp    dl,0x4
c00189bd:	0f 84 f3 01 00 00    	je     c0018bb6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189c3:	80 fa 07             	cmp    dl,0x7
c00189c6:	0f 84 0d 02 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189cc:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c00189d1:	80 fa 08             	cmp    dl,0x8
c00189d4:	0f 84 ff 01 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189da:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c00189df:	80 fa 09             	cmp    dl,0x9
c00189e2:	0f 85 f1 01 00 00    	jne    c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e8:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c00189ed:	c3                   	ret    
c00189ee:	80 f9 06             	cmp    cl,0x6
c00189f1:	0f 85 85 01 00 00    	jne    c0018b7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00189f7:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c00189fc:	80 fa 01             	cmp    dl,0x1
c00189ff:	0f 84 d4 01 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a05:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a08:	3c 01                	cmp    al,0x1
c0018a0a:	0f 86 ac 01 00 00    	jbe    c0018bbc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a10:	80 fa 03             	cmp    dl,0x3
c0018a13:	0f 84 a3 01 00 00    	je     c0018bbc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a19:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a1c:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c0018a21:	80 f9 01             	cmp    cl,0x1
c0018a24:	0f 86 af 01 00 00    	jbe    c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2a:	80 fa 09             	cmp    dl,0x9
c0018a2d:	0f 84 8f 01 00 00    	je     c0018bc2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a33:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a36:	80 f9 01             	cmp    cl,0x1
c0018a39:	0f 86 9a 01 00 00    	jbe    c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3f:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018a44:	80 fa 0d             	cmp    dl,0xd
c0018a47:	0f 84 8c 01 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4d:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c0018a52:	80 fa 0e             	cmp    dl,0xe
c0018a55:	0f 84 7e 01 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a5b:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018a60:	80 fa 0f             	cmp    dl,0xf
c0018a63:	0f 84 70 01 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a69:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018a6e:	80 fa 15             	cmp    dl,0x15
c0018a71:	0f 84 62 01 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a77:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a7a:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018a7f:	80 f9 01             	cmp    cl,0x1
c0018a82:	0f 86 51 01 00 00    	jbe    c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a88:	80 fa 1a             	cmp    dl,0x1a
c0018a8b:	0f 84 37 01 00 00    	je     c0018bc8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a91:	80 fa 1c             	cmp    dl,0x1c
c0018a94:	0f 84 34 01 00 00    	je     c0018bce <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a9a:	80 fa 1d             	cmp    dl,0x1d
c0018a9d:	0f 84 36 01 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa3:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018aa8:	80 fa 25             	cmp    dl,0x25
c0018aab:	0f 84 28 01 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab1:	8d 4a da             	lea    ecx,[edx-0x26]
c0018ab4:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018ab9:	80 f9 01             	cmp    cl,0x1
c0018abc:	0f 86 17 01 00 00    	jbe    c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac2:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018ac7:	80 fa 2a             	cmp    dl,0x2a
c0018aca:	0f 84 09 01 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad0:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018ad5:	80 fa 2c             	cmp    dl,0x2c
c0018ad8:	0f 84 fb 00 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ade:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018ae3:	80 fa 2d             	cmp    dl,0x2d
c0018ae6:	0f 84 ed 00 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aec:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018af1:	80 fa 2e             	cmp    dl,0x2e
c0018af4:	0f 84 df 00 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018afa:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018aff:	80 fa 2f             	cmp    dl,0x2f
c0018b02:	0f 84 d1 00 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b08:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b0b:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018b10:	80 f9 01             	cmp    cl,0x1
c0018b13:	0f 86 c0 00 00 00    	jbe    c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b19:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018b1e:	80 fa 37             	cmp    dl,0x37
c0018b21:	0f 84 b2 00 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b27:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018b2c:	80 fa 3a             	cmp    dl,0x3a
c0018b2f:	0f 84 a4 00 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b35:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018b3a:	80 fa 3c             	cmp    dl,0x3c
c0018b3d:	0f 84 96 00 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b43:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018b48:	80 fa 3d             	cmp    dl,0x3d
c0018b4b:	0f 84 88 00 00 00    	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b51:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018b56:	80 fa 3e             	cmp    dl,0x3e
c0018b59:	74 7e                	je     c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5b:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b5e:	3c 01                	cmp    al,0x1
c0018b60:	76 72                	jbe    c0018bd4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b62:	80 fa 3f             	cmp    dl,0x3f
c0018b65:	74 6d                	je     c0018bd4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b67:	80 fa 4a             	cmp    dl,0x4a
c0018b6a:	74 0a                	je     c0018b76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b6c:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018b71:	80 fa 4d             	cmp    dl,0x4d
c0018b74:	75 63                	jne    c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b76:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018b7b:	c3                   	ret    
c0018b7c:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018b81:	80 f9 0b             	cmp    cl,0xb
c0018b84:	75 0a                	jne    c0018b90 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b86:	fe ca                	dec    dl
c0018b88:	75 4f                	jne    c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b8a:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018b8f:	c3                   	ret    
c0018b90:	80 f9 0f             	cmp    cl,0xf
c0018b93:	75 44                	jne    c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b95:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018b9a:	80 fa 02             	cmp    dl,0x2
c0018b9d:	76 3a                	jbe    c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b9f:	8d 42 fd             	lea    eax,[edx-0x3]
c0018ba2:	3c 01                	cmp    al,0x1
c0018ba4:	76 0a                	jbe    c0018bb0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018ba6:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018bab:	80 fa 06             	cmp    dl,0x6
c0018bae:	75 29                	jne    c0018bd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb0:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018bb5:	c3                   	ret    
c0018bb6:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018bbb:	c3                   	ret    
c0018bbc:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018bc1:	c3                   	ret    
c0018bc2:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018bc7:	c3                   	ret    
c0018bc8:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018bcd:	c3                   	ret    
c0018bce:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018bd3:	c3                   	ret    
c0018bd4:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018bd9:	c3                   	ret    

c0018bda <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018bda:	60                   	pusha  
c0018bdb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018be3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018be7:	9c                   	pushf  
c0018be8:	fa                   	cli    
c0018be9:	0f 09                	wbinvd 
c0018beb:	0f 30                	wrmsr  
c0018bed:	9d                   	popf   
c0018bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018bf2:	89 02                	mov    DWORD PTR [edx],eax
c0018bf4:	61                   	popa   
c0018bf5:	c3                   	ret    

c0018bf6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018bf6:	60                   	pusha  
c0018bf7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bfb:	9c                   	pushf  
c0018bfc:	fa                   	cli    
c0018bfd:	0f 09                	wbinvd 
c0018bff:	31 c0                	xor    eax,eax
c0018c01:	31 d2                	xor    edx,edx
c0018c03:	0f 32                	rdmsr  
c0018c05:	9d                   	popf   
c0018c06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c0a:	89 02                	mov    DWORD PTR [edx],eax
c0018c0c:	61                   	popa   
c0018c0d:	c3                   	ret    

c0018c0e <CPU::AMD_K6_writeback(int, int, int)>:
c0018c0e:	56                   	push   esi
c0018c0f:	53                   	push   ebx
c0018c10:	83 ec 10             	sub    esp,0x10
c0018c13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c17:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c1c:	75 5d                	jne    c0018c7b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c1e:	83 f8 08             	cmp    eax,0x8
c0018c21:	75 09                	jne    c0018c2c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c23:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c28:	7e 13                	jle    c0018c3d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c2a:	eb 30                	jmp    c0018c5c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c2c:	83 f8 06             	cmp    eax,0x6
c0018c2f:	7c 4a                	jl     c0018c7b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c31:	83 f8 07             	cmp    eax,0x7
c0018c34:	7e 07                	jle    c0018c3d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c36:	83 f8 09             	cmp    eax,0x9
c0018c39:	74 21                	je     c0018c5c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c3b:	eb 3e                	jmp    c0018c7b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c3d:	89 e6                	mov    esi,esp
c0018c3f:	8b 1d c8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c8
c0018c45:	56                   	push   esi
c0018c46:	c1 eb 15             	shr    ebx,0x15
c0018c49:	68 82 00 00 c0       	push   0xc0000082
c0018c4e:	83 e3 7e             	and    ebx,0x7e
c0018c51:	e8 a0 ff ff ff       	call   c0018bf6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c56:	56                   	push   esi
c0018c57:	6a 00                	push   0x0
c0018c59:	53                   	push   ebx
c0018c5a:	eb 12                	jmp    c0018c6e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c5c:	89 e3                	mov    ebx,esp
c0018c5e:	53                   	push   ebx
c0018c5f:	68 82 00 00 c0       	push   0xc0000082
c0018c64:	e8 8d ff ff ff       	call   c0018bf6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c69:	53                   	push   ebx
c0018c6a:	6a 00                	push   0x0
c0018c6c:	6a 00                	push   0x0
c0018c6e:	68 82 00 00 c0       	push   0xc0000082
c0018c73:	e8 62 ff ff ff       	call   c0018bda <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c78:	83 c4 18             	add    esp,0x18
c0018c7b:	83 c4 10             	add    esp,0x10
c0018c7e:	5b                   	pop    ebx
c0018c7f:	5e                   	pop    esi
c0018c80:	c3                   	ret    
c0018c81:	90                   	nop

c0018c82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c82:	55                   	push   ebp
c0018c83:	57                   	push   edi
c0018c84:	56                   	push   esi
c0018c85:	53                   	push   ebx
c0018c86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c8a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c8e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c92:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c96:	39 05 a0 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8a0,eax
c0018c9c:	75 23                	jne    c0018cc1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c9e:	a1 ec 0e 03 c0       	mov    eax,ds:0xc0030eec
c0018ca3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018ca7:	89 06                	mov    DWORD PTR [esi],eax
c0018ca9:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0018cae:	89 07                	mov    DWORD PTR [edi],eax
c0018cb0:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c0018cb5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018cb8:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c0018cbd:	89 02                	mov    DWORD PTR [edx],eax
c0018cbf:	eb 3f                	jmp    c0018d00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018cc1:	31 c9                	xor    ecx,ecx
c0018cc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cc7:	0f a2                	cpuid  
c0018cc9:	89 06                	mov    DWORD PTR [esi],eax
c0018ccb:	89 1f                	mov    DWORD PTR [edi],ebx
c0018ccd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cd1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018cd4:	89 10                	mov    DWORD PTR [eax],edx
c0018cd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cda:	a3 a0 d8 02 c0       	mov    ds:0xc002d8a0,eax
c0018cdf:	8b 06                	mov    eax,DWORD PTR [esi]
c0018ce1:	a3 ec 0e 03 c0       	mov    ds:0xc0030eec,eax
c0018ce6:	8b 07                	mov    eax,DWORD PTR [edi]
c0018ce8:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0018ced:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cf0:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c0018cf5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cfb:	a3 e0 0e 03 c0       	mov    ds:0xc0030ee0,eax
c0018d00:	5b                   	pop    ebx
c0018d01:	5e                   	pop    esi
c0018d02:	5f                   	pop    edi
c0018d03:	5d                   	pop    ebp
c0018d04:	c3                   	ret    
c0018d05:	90                   	nop

c0018d06 <CPU::cpuidCheckEDX(unsigned int)>:
c0018d06:	83 ec 10             	sub    esp,0x10
c0018d09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d0d:	50                   	push   eax
c0018d0e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d12:	50                   	push   eax
c0018d13:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d17:	50                   	push   eax
c0018d18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d1c:	50                   	push   eax
c0018d1d:	6a 01                	push   0x1
c0018d1f:	e8 5e ff ff ff       	call   c0018c82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d28:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d2c:	0f 95 c0             	setne  al
c0018d2f:	83 c4 24             	add    esp,0x24
c0018d32:	c3                   	ret    
c0018d33:	90                   	nop

c0018d34 <CPU::cpuidCheckECX(unsigned int)>:
c0018d34:	83 ec 10             	sub    esp,0x10
c0018d37:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d3b:	50                   	push   eax
c0018d3c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d40:	50                   	push   eax
c0018d41:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d45:	50                   	push   eax
c0018d46:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d4a:	50                   	push   eax
c0018d4b:	6a 01                	push   0x1
c0018d4d:	e8 30 ff ff ff       	call   c0018c82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d56:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d5a:	0f 95 c0             	setne  al
c0018d5d:	83 c4 24             	add    esp,0x24
c0018d60:	c3                   	ret    
c0018d61:	90                   	nop

c0018d62 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d62:	83 ec 10             	sub    esp,0x10
c0018d65:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d69:	50                   	push   eax
c0018d6a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d6e:	50                   	push   eax
c0018d6f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d73:	50                   	push   eax
c0018d74:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d78:	50                   	push   eax
c0018d79:	6a 07                	push   0x7
c0018d7b:	e8 02 ff ff ff       	call   c0018c82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d84:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d88:	0f 95 c0             	setne  al
c0018d8b:	83 c4 24             	add    esp,0x24
c0018d8e:	c3                   	ret    
c0018d8f:	90                   	nop

c0018d90 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d90:	83 ec 10             	sub    esp,0x10
c0018d93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d97:	50                   	push   eax
c0018d98:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d9c:	50                   	push   eax
c0018d9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da1:	50                   	push   eax
c0018da2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da6:	50                   	push   eax
c0018da7:	6a 07                	push   0x7
c0018da9:	e8 d4 fe ff ff       	call   c0018c82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018db2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018db6:	0f 95 c0             	setne  al
c0018db9:	83 c4 24             	add    esp,0x24
c0018dbc:	c3                   	ret    
c0018dbd:	90                   	nop

c0018dbe <CPU::CPU()>:
c0018dbe:	83 ec 0c             	sub    esp,0xc
c0018dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dc5:	83 ec 08             	sub    esp,0x8
c0018dc8:	68 82 b8 02 c0       	push   0xc002b882
c0018dcd:	50                   	push   eax
c0018dce:	e8 89 b7 ff ff       	call   c001455c <Device::Device(char const*)>
c0018dd3:	83 c4 10             	add    esp,0x10
c0018dd6:	ba 5c b9 02 c0       	mov    edx,0xc002b95c
c0018ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ddf:	89 10                	mov    DWORD PTR [eax],edx
c0018de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018de5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df3:	05 78 01 00 00       	add    eax,0x178
c0018df8:	83 ec 0c             	sub    esp,0xc
c0018dfb:	50                   	push   eax
c0018dfc:	e8 57 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018e01:	83 c4 10             	add    esp,0x10
c0018e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e08:	05 7c 09 00 00       	add    eax,0x97c
c0018e0d:	83 ec 0c             	sub    esp,0xc
c0018e10:	50                   	push   eax
c0018e11:	e8 a4 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018e16:	83 c4 10             	add    esp,0x10
c0018e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e1d:	05 7c 11 00 00       	add    eax,0x117c
c0018e22:	83 ec 0c             	sub    esp,0xc
c0018e25:	50                   	push   eax
c0018e26:	e8 a5 86 ff ff       	call   c00114d0 <TSS::TSS()>
c0018e2b:	83 c4 10             	add    esp,0x10
c0018e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e32:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e3d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e47:	90                   	nop
c0018e48:	83 c4 0c             	add    esp,0xc
c0018e4b:	c3                   	ret    

c0018e4c <CPU::displayFeatures()>:
c0018e4c:	53                   	push   ebx
c0018e4d:	83 ec 10             	sub    esp,0x10
c0018e50:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e54:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e5a:	68 90 b5 02 c0       	push   0xc002b590
c0018e5f:	e8 e2 a0 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018e64:	59                   	pop    ecx
c0018e65:	58                   	pop    eax
c0018e66:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e6c:	50                   	push   eax
c0018e6d:	68 a1 b5 02 c0       	push   0xc002b5a1
c0018e72:	e8 cf a0 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018e77:	58                   	pop    eax
c0018e78:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e7e:	5a                   	pop    edx
c0018e7f:	c1 e8 0e             	shr    eax,0xe
c0018e82:	0f b6 c0             	movzx  eax,al
c0018e85:	50                   	push   eax
c0018e86:	68 b2 b5 02 c0       	push   0xc002b5b2
c0018e8b:	e8 b6 a0 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018e90:	59                   	pop    ecx
c0018e91:	58                   	pop    eax
c0018e92:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e98:	66 c1 e8 06          	shr    ax,0x6
c0018e9c:	0f b6 c0             	movzx  eax,al
c0018e9f:	50                   	push   eax
c0018ea0:	68 c3 b5 02 c0       	push   0xc002b5c3
c0018ea5:	e8 9c a0 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018eaa:	c7 04 24 70 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba70
c0018eb1:	e8 90 a0 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018eb6:	83 c4 10             	add    esp,0x10
c0018eb9:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c0018ebe:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018ec5:	74 05                	je     c0018ecc <CPU::displayFeatures()+0x80>
c0018ec7:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c0018ecc:	52                   	push   edx
c0018ecd:	52                   	push   edx
c0018ece:	50                   	push   eax
c0018ecf:	68 d4 b5 02 c0       	push   0xc002b5d4
c0018ed4:	e8 6d a0 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018ed9:	83 c4 10             	add    esp,0x10
c0018edc:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c0018ee1:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018ee8:	78 05                	js     c0018eef <CPU::displayFeatures()+0xa3>
c0018eea:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c0018eef:	51                   	push   ecx
c0018ef0:	51                   	push   ecx
c0018ef1:	50                   	push   eax
c0018ef2:	68 eb b5 02 c0       	push   0xc002b5eb
c0018ef7:	e8 4a a0 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018efc:	83 c4 10             	add    esp,0x10
c0018eff:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c0018f04:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f0b:	75 05                	jne    c0018f12 <CPU::displayFeatures()+0xc6>
c0018f0d:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c0018f12:	52                   	push   edx
c0018f13:	52                   	push   edx
c0018f14:	50                   	push   eax
c0018f15:	68 02 b6 02 c0       	push   0xc002b602
c0018f1a:	e8 27 a0 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018f1f:	83 c4 10             	add    esp,0x10
c0018f22:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c0018f27:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f2e:	75 05                	jne    c0018f35 <CPU::displayFeatures()+0xe9>
c0018f30:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c0018f35:	51                   	push   ecx
c0018f36:	51                   	push   ecx
c0018f37:	50                   	push   eax
c0018f38:	68 19 b6 02 c0       	push   0xc002b619
c0018f3d:	e8 04 a0 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018f42:	83 c4 10             	add    esp,0x10
c0018f45:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c0018f4a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f51:	75 05                	jne    c0018f58 <CPU::displayFeatures()+0x10c>
c0018f53:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c0018f58:	52                   	push   edx
c0018f59:	52                   	push   edx
c0018f5a:	50                   	push   eax
c0018f5b:	68 30 b6 02 c0       	push   0xc002b630
c0018f60:	e8 e1 9f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018f65:	83 c4 10             	add    esp,0x10
c0018f68:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c0018f6d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f74:	75 05                	jne    c0018f7b <CPU::displayFeatures()+0x12f>
c0018f76:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c0018f7b:	51                   	push   ecx
c0018f7c:	51                   	push   ecx
c0018f7d:	50                   	push   eax
c0018f7e:	68 47 b6 02 c0       	push   0xc002b647
c0018f83:	e8 be 9f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018f88:	83 c4 10             	add    esp,0x10
c0018f8b:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c0018f90:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018f97:	75 05                	jne    c0018f9e <CPU::displayFeatures()+0x152>
c0018f99:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c0018f9e:	52                   	push   edx
c0018f9f:	52                   	push   edx
c0018fa0:	50                   	push   eax
c0018fa1:	68 5e b6 02 c0       	push   0xc002b65e
c0018fa6:	e8 9b 9f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018fab:	83 c4 10             	add    esp,0x10
c0018fae:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c0018fb3:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018fba:	75 05                	jne    c0018fc1 <CPU::displayFeatures()+0x175>
c0018fbc:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c0018fc1:	51                   	push   ecx
c0018fc2:	51                   	push   ecx
c0018fc3:	50                   	push   eax
c0018fc4:	68 75 b6 02 c0       	push   0xc002b675
c0018fc9:	e8 78 9f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018fce:	83 c4 10             	add    esp,0x10
c0018fd1:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c0018fd6:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018fdd:	75 05                	jne    c0018fe4 <CPU::displayFeatures()+0x198>
c0018fdf:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c0018fe4:	52                   	push   edx
c0018fe5:	52                   	push   edx
c0018fe6:	50                   	push   eax
c0018fe7:	68 8c b6 02 c0       	push   0xc002b68c
c0018fec:	e8 55 9f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0018ff1:	83 c4 10             	add    esp,0x10
c0018ff4:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c0018ff9:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019000:	75 05                	jne    c0019007 <CPU::displayFeatures()+0x1bb>
c0019002:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c0019007:	51                   	push   ecx
c0019008:	51                   	push   ecx
c0019009:	50                   	push   eax
c001900a:	68 a3 b6 02 c0       	push   0xc002b6a3
c001900f:	e8 32 9f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0019014:	83 c4 10             	add    esp,0x10
c0019017:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c001901c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019023:	75 05                	jne    c001902a <CPU::displayFeatures()+0x1de>
c0019025:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c001902a:	52                   	push   edx
c001902b:	52                   	push   edx
c001902c:	50                   	push   eax
c001902d:	68 ba b6 02 c0       	push   0xc002b6ba
c0019032:	e8 0f 9f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0019037:	83 c4 10             	add    esp,0x10
c001903a:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c001903f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019046:	75 05                	jne    c001904d <CPU::displayFeatures()+0x201>
c0019048:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c001904d:	51                   	push   ecx
c001904e:	51                   	push   ecx
c001904f:	50                   	push   eax
c0019050:	68 d1 b6 02 c0       	push   0xc002b6d1
c0019055:	e8 ec 9e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001905a:	83 c4 10             	add    esp,0x10
c001905d:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c0019062:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019069:	75 05                	jne    c0019070 <CPU::displayFeatures()+0x224>
c001906b:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c0019070:	52                   	push   edx
c0019071:	52                   	push   edx
c0019072:	50                   	push   eax
c0019073:	68 e8 b6 02 c0       	push   0xc002b6e8
c0019078:	e8 c9 9e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001907d:	83 c4 10             	add    esp,0x10
c0019080:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c0019085:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001908c:	78 05                	js     c0019093 <CPU::displayFeatures()+0x247>
c001908e:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c0019093:	51                   	push   ecx
c0019094:	51                   	push   ecx
c0019095:	50                   	push   eax
c0019096:	68 ff b6 02 c0       	push   0xc002b6ff
c001909b:	e8 a6 9e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00190a0:	83 c4 10             	add    esp,0x10
c00190a3:	b8 f2 9f 02 c0       	mov    eax,0xc0029ff2
c00190a8:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00190af:	75 05                	jne    c00190b6 <CPU::displayFeatures()+0x26a>
c00190b1:	b8 f6 9f 02 c0       	mov    eax,0xc0029ff6
c00190b6:	52                   	push   edx
c00190b7:	52                   	push   edx
c00190b8:	50                   	push   eax
c00190b9:	68 16 b7 02 c0       	push   0xc002b716
c00190be:	e8 83 9e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00190c3:	83 c4 18             	add    esp,0x18
c00190c6:	5b                   	pop    ebx
c00190c7:	c3                   	ret    

c00190c8 <CPU::detectFeatures()>:
c00190c8:	55                   	push   ebp
c00190c9:	57                   	push   edi
c00190ca:	56                   	push   esi
c00190cb:	53                   	push   ebx
c00190cc:	83 ec 50             	sub    esp,0x50
c00190cf:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00190d3:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00190dd:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00190e4:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00190ea:	6a 0d                	push   0xd
c00190ec:	6a 00                	push   0x0
c00190ee:	57                   	push   edi
c00190ef:	e8 84 76 fe ff       	call   c0000778 <memset>
c00190f4:	83 c4 10             	add    esp,0x10
c00190f7:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00190fc:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019103:	0f 84 20 09 00 00    	je     c0019a29 <CPU::detectFeatures()+0x961>
c0019109:	83 ec 0c             	sub    esp,0xc
c001910c:	6a 10                	push   0x10
c001910e:	e8 f3 fb ff ff       	call   c0018d06 <CPU::cpuidCheckEDX(unsigned int)>
c0019113:	83 e0 01             	and    eax,0x1
c0019116:	8d 14 00             	lea    edx,[eax+eax*1]
c0019119:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001911f:	83 e0 fd             	and    eax,0xfffffffd
c0019122:	09 d0                	or     eax,edx
c0019124:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001912a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019131:	e8 d0 fb ff ff       	call   c0018d06 <CPU::cpuidCheckEDX(unsigned int)>
c0019136:	83 e0 01             	and    eax,0x1
c0019139:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019140:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019146:	83 e0 fb             	and    eax,0xfffffffb
c0019149:	09 d0                	or     eax,edx
c001914b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019151:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019158:	e8 a9 fb ff ff       	call   c0018d06 <CPU::cpuidCheckEDX(unsigned int)>
c001915d:	83 e0 01             	and    eax,0x1
c0019160:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019167:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001916d:	83 e0 f7             	and    eax,0xfffffff7
c0019170:	09 d0                	or     eax,edx
c0019172:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019178:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001917f:	e8 82 fb ff ff       	call   c0018d06 <CPU::cpuidCheckEDX(unsigned int)>
c0019184:	83 e0 01             	and    eax,0x1
c0019187:	c1 e0 04             	shl    eax,0x4
c001918a:	88 c2                	mov    dl,al
c001918c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019192:	83 e0 ef             	and    eax,0xffffffef
c0019195:	09 d0                	or     eax,edx
c0019197:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001919d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00191a4:	e8 5d fb ff ff       	call   c0018d06 <CPU::cpuidCheckEDX(unsigned int)>
c00191a9:	83 e0 01             	and    eax,0x1
c00191ac:	c1 e0 05             	shl    eax,0x5
c00191af:	88 c2                	mov    dl,al
c00191b1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191b7:	83 e0 df             	and    eax,0xffffffdf
c00191ba:	09 d0                	or     eax,edx
c00191bc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191c2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00191c9:	e8 38 fb ff ff       	call   c0018d06 <CPU::cpuidCheckEDX(unsigned int)>
c00191ce:	83 e0 01             	and    eax,0x1
c00191d1:	8d 14 00             	lea    edx,[eax+eax*1]
c00191d4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191da:	83 e0 fd             	and    eax,0xfffffffd
c00191dd:	09 d0                	or     eax,edx
c00191df:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191e5:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00191ec:	e8 15 fb ff ff       	call   c0018d06 <CPU::cpuidCheckEDX(unsigned int)>
c00191f1:	83 e0 01             	and    eax,0x1
c00191f4:	c1 e0 06             	shl    eax,0x6
c00191f7:	88 c2                	mov    dl,al
c00191f9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00191ff:	83 e0 bf             	and    eax,0xffffffbf
c0019202:	09 d0                	or     eax,edx
c0019204:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001920a:	58                   	pop    eax
c001920b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001920f:	56                   	push   esi
c0019210:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019214:	55                   	push   ebp
c0019215:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019219:	50                   	push   eax
c001921a:	8d 54 24 28          	lea    edx,[esp+0x28]
c001921e:	52                   	push   edx
c001921f:	6a 00                	push   0x0
c0019221:	e8 5c fa ff ff       	call   c0018c82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019226:	83 c4 1c             	add    esp,0x1c
c0019229:	6a 04                	push   0x4
c001922b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001922f:	50                   	push   eax
c0019230:	57                   	push   edi
c0019231:	e8 0e 75 fe ff       	call   c0000744 <memcpy>
c0019236:	83 c4 0c             	add    esp,0xc
c0019239:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001923f:	6a 04                	push   0x4
c0019241:	56                   	push   esi
c0019242:	50                   	push   eax
c0019243:	e8 fc 74 fe ff       	call   c0000744 <memcpy>
c0019248:	83 c4 0c             	add    esp,0xc
c001924b:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019251:	6a 04                	push   0x4
c0019253:	55                   	push   ebp
c0019254:	50                   	push   eax
c0019255:	e8 ea 74 fe ff       	call   c0000744 <memcpy>
c001925a:	58                   	pop    eax
c001925b:	5a                   	pop    edx
c001925c:	68 2d b7 02 c0       	push   0xc002b72d
c0019261:	57                   	push   edi
c0019262:	e8 59 76 fe ff       	call   c00008c0 <strcmp>
c0019267:	83 c4 10             	add    esp,0x10
c001926a:	85 c0                	test   eax,eax
c001926c:	75 0f                	jne    c001927d <CPU::detectFeatures()+0x1b5>
c001926e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019278:	e9 22 02 00 00       	jmp    c001949f <CPU::detectFeatures()+0x3d7>
c001927d:	50                   	push   eax
c001927e:	50                   	push   eax
c001927f:	68 3a b7 02 c0       	push   0xc002b73a
c0019284:	57                   	push   edi
c0019285:	e8 36 76 fe ff       	call   c00008c0 <strcmp>
c001928a:	83 c4 10             	add    esp,0x10
c001928d:	85 c0                	test   eax,eax
c001928f:	74 dd                	je     c001926e <CPU::detectFeatures()+0x1a6>
c0019291:	51                   	push   ecx
c0019292:	51                   	push   ecx
c0019293:	68 47 b7 02 c0       	push   0xc002b747
c0019298:	57                   	push   edi
c0019299:	e8 22 76 fe ff       	call   c00008c0 <strcmp>
c001929e:	83 c4 10             	add    esp,0x10
c00192a1:	85 c0                	test   eax,eax
c00192a3:	74 2a                	je     c00192cf <CPU::detectFeatures()+0x207>
c00192a5:	52                   	push   edx
c00192a6:	52                   	push   edx
c00192a7:	68 54 b7 02 c0       	push   0xc002b754
c00192ac:	57                   	push   edi
c00192ad:	e8 0e 76 fe ff       	call   c00008c0 <strcmp>
c00192b2:	83 c4 10             	add    esp,0x10
c00192b5:	85 c0                	test   eax,eax
c00192b7:	74 16                	je     c00192cf <CPU::detectFeatures()+0x207>
c00192b9:	50                   	push   eax
c00192ba:	50                   	push   eax
c00192bb:	68 61 b7 02 c0       	push   0xc002b761
c00192c0:	57                   	push   edi
c00192c1:	e8 fa 75 fe ff       	call   c00008c0 <strcmp>
c00192c6:	83 c4 10             	add    esp,0x10
c00192c9:	85 c0                	test   eax,eax
c00192cb:	74 48                	je     c0019315 <CPU::detectFeatures()+0x24d>
c00192cd:	eb 0f                	jmp    c00192de <CPU::detectFeatures()+0x216>
c00192cf:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00192d9:	e9 c1 01 00 00       	jmp    c001949f <CPU::detectFeatures()+0x3d7>
c00192de:	50                   	push   eax
c00192df:	50                   	push   eax
c00192e0:	68 6e b7 02 c0       	push   0xc002b76e
c00192e5:	57                   	push   edi
c00192e6:	e8 d5 75 fe ff       	call   c00008c0 <strcmp>
c00192eb:	83 c4 10             	add    esp,0x10
c00192ee:	85 c0                	test   eax,eax
c00192f0:	74 23                	je     c0019315 <CPU::detectFeatures()+0x24d>
c00192f2:	50                   	push   eax
c00192f3:	50                   	push   eax
c00192f4:	68 7b b7 02 c0       	push   0xc002b77b
c00192f9:	57                   	push   edi
c00192fa:	e8 c1 75 fe ff       	call   c00008c0 <strcmp>
c00192ff:	83 c4 10             	add    esp,0x10
c0019302:	85 c0                	test   eax,eax
c0019304:	75 1e                	jne    c0019324 <CPU::detectFeatures()+0x25c>
c0019306:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019310:	e9 8a 01 00 00       	jmp    c001949f <CPU::detectFeatures()+0x3d7>
c0019315:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001931f:	e9 7b 01 00 00       	jmp    c001949f <CPU::detectFeatures()+0x3d7>
c0019324:	50                   	push   eax
c0019325:	50                   	push   eax
c0019326:	68 88 b7 02 c0       	push   0xc002b788
c001932b:	57                   	push   edi
c001932c:	e8 8f 75 fe ff       	call   c00008c0 <strcmp>
c0019331:	83 c4 10             	add    esp,0x10
c0019334:	85 c0                	test   eax,eax
c0019336:	75 0f                	jne    c0019347 <CPU::detectFeatures()+0x27f>
c0019338:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019342:	e9 58 01 00 00       	jmp    c001949f <CPU::detectFeatures()+0x3d7>
c0019347:	50                   	push   eax
c0019348:	50                   	push   eax
c0019349:	68 47 b7 02 c0       	push   0xc002b747
c001934e:	57                   	push   edi
c001934f:	e8 6c 75 fe ff       	call   c00008c0 <strcmp>
c0019354:	83 c4 10             	add    esp,0x10
c0019357:	85 c0                	test   eax,eax
c0019359:	75 0f                	jne    c001936a <CPU::detectFeatures()+0x2a2>
c001935b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019365:	e9 35 01 00 00       	jmp    c001949f <CPU::detectFeatures()+0x3d7>
c001936a:	50                   	push   eax
c001936b:	50                   	push   eax
c001936c:	68 95 b7 02 c0       	push   0xc002b795
c0019371:	57                   	push   edi
c0019372:	e8 49 75 fe ff       	call   c00008c0 <strcmp>
c0019377:	83 c4 10             	add    esp,0x10
c001937a:	85 c0                	test   eax,eax
c001937c:	75 0f                	jne    c001938d <CPU::detectFeatures()+0x2c5>
c001937e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019388:	e9 12 01 00 00       	jmp    c001949f <CPU::detectFeatures()+0x3d7>
c001938d:	51                   	push   ecx
c001938e:	51                   	push   ecx
c001938f:	68 a2 b7 02 c0       	push   0xc002b7a2
c0019394:	57                   	push   edi
c0019395:	e8 26 75 fe ff       	call   c00008c0 <strcmp>
c001939a:	83 c4 10             	add    esp,0x10
c001939d:	85 c0                	test   eax,eax
c001939f:	75 0f                	jne    c00193b0 <CPU::detectFeatures()+0x2e8>
c00193a1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00193ab:	e9 ef 00 00 00       	jmp    c001949f <CPU::detectFeatures()+0x3d7>
c00193b0:	52                   	push   edx
c00193b1:	52                   	push   edx
c00193b2:	68 af b7 02 c0       	push   0xc002b7af
c00193b7:	57                   	push   edi
c00193b8:	e8 03 75 fe ff       	call   c00008c0 <strcmp>
c00193bd:	83 c4 10             	add    esp,0x10
c00193c0:	85 c0                	test   eax,eax
c00193c2:	75 0f                	jne    c00193d3 <CPU::detectFeatures()+0x30b>
c00193c4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00193ce:	e9 cc 00 00 00       	jmp    c001949f <CPU::detectFeatures()+0x3d7>
c00193d3:	50                   	push   eax
c00193d4:	50                   	push   eax
c00193d5:	68 bc b7 02 c0       	push   0xc002b7bc
c00193da:	57                   	push   edi
c00193db:	e8 e0 74 fe ff       	call   c00008c0 <strcmp>
c00193e0:	83 c4 10             	add    esp,0x10
c00193e3:	85 c0                	test   eax,eax
c00193e5:	75 0f                	jne    c00193f6 <CPU::detectFeatures()+0x32e>
c00193e7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00193f1:	e9 a9 00 00 00       	jmp    c001949f <CPU::detectFeatures()+0x3d7>
c00193f6:	50                   	push   eax
c00193f7:	50                   	push   eax
c00193f8:	68 c9 b7 02 c0       	push   0xc002b7c9
c00193fd:	57                   	push   edi
c00193fe:	e8 bd 74 fe ff       	call   c00008c0 <strcmp>
c0019403:	83 c4 10             	add    esp,0x10
c0019406:	85 c0                	test   eax,eax
c0019408:	75 0f                	jne    c0019419 <CPU::detectFeatures()+0x351>
c001940a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019414:	e9 86 00 00 00       	jmp    c001949f <CPU::detectFeatures()+0x3d7>
c0019419:	50                   	push   eax
c001941a:	50                   	push   eax
c001941b:	68 d6 b7 02 c0       	push   0xc002b7d6
c0019420:	57                   	push   edi
c0019421:	e8 9a 74 fe ff       	call   c00008c0 <strcmp>
c0019426:	83 c4 10             	add    esp,0x10
c0019429:	85 c0                	test   eax,eax
c001942b:	75 0c                	jne    c0019439 <CPU::detectFeatures()+0x371>
c001942d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019437:	eb 66                	jmp    c001949f <CPU::detectFeatures()+0x3d7>
c0019439:	50                   	push   eax
c001943a:	50                   	push   eax
c001943b:	68 e3 b7 02 c0       	push   0xc002b7e3
c0019440:	57                   	push   edi
c0019441:	e8 7a 74 fe ff       	call   c00008c0 <strcmp>
c0019446:	83 c4 10             	add    esp,0x10
c0019449:	85 c0                	test   eax,eax
c001944b:	75 0c                	jne    c0019459 <CPU::detectFeatures()+0x391>
c001944d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019457:	eb 46                	jmp    c001949f <CPU::detectFeatures()+0x3d7>
c0019459:	50                   	push   eax
c001945a:	50                   	push   eax
c001945b:	68 f0 b7 02 c0       	push   0xc002b7f0
c0019460:	57                   	push   edi
c0019461:	e8 5a 74 fe ff       	call   c00008c0 <strcmp>
c0019466:	83 c4 10             	add    esp,0x10
c0019469:	85 c0                	test   eax,eax
c001946b:	74 e0                	je     c001944d <CPU::detectFeatures()+0x385>
c001946d:	50                   	push   eax
c001946e:	50                   	push   eax
c001946f:	68 fd b7 02 c0       	push   0xc002b7fd
c0019474:	57                   	push   edi
c0019475:	e8 46 74 fe ff       	call   c00008c0 <strcmp>
c001947a:	83 c4 10             	add    esp,0x10
c001947d:	85 c0                	test   eax,eax
c001947f:	74 cc                	je     c001944d <CPU::detectFeatures()+0x385>
c0019481:	51                   	push   ecx
c0019482:	51                   	push   ecx
c0019483:	68 0a b8 02 c0       	push   0xc002b80a
c0019488:	57                   	push   edi
c0019489:	e8 32 74 fe ff       	call   c00008c0 <strcmp>
c001948e:	83 c4 10             	add    esp,0x10
c0019491:	85 c0                	test   eax,eax
c0019493:	74 b8                	je     c001944d <CPU::detectFeatures()+0x385>
c0019495:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001949f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00194a4:	0f 86 be 00 00 00    	jbe    c0019568 <CPU::detectFeatures()+0x4a0>
c00194aa:	83 ec 0c             	sub    esp,0xc
c00194ad:	68 80 00 00 00       	push   0x80
c00194b2:	e8 ab f8 ff ff       	call   c0018d62 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194b7:	83 e0 01             	and    eax,0x1
c00194ba:	c1 e0 06             	shl    eax,0x6
c00194bd:	88 c2                	mov    dl,al
c00194bf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194c5:	83 e0 bf             	and    eax,0xffffffbf
c00194c8:	09 d0                	or     eax,edx
c00194ca:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194d0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00194d7:	e8 86 f8 ff ff       	call   c0018d62 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194dc:	83 e0 01             	and    eax,0x1
c00194df:	c1 e0 04             	shl    eax,0x4
c00194e2:	88 c2                	mov    dl,al
c00194e4:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194ea:	83 e0 ef             	and    eax,0xffffffef
c00194ed:	09 d0                	or     eax,edx
c00194ef:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194f5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00194fc:	e8 61 f8 ff ff       	call   c0018d62 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019501:	c1 e0 07             	shl    eax,0x7
c0019504:	88 c2                	mov    dl,al
c0019506:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001950c:	83 e0 7f             	and    eax,0x7f
c001950f:	09 d0                	or     eax,edx
c0019511:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019517:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001951e:	e8 6d f8 ff ff       	call   c0018d90 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019523:	83 e0 01             	and    eax,0x1
c0019526:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001952d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019533:	83 e0 f7             	and    eax,0xfffffff7
c0019536:	09 d0                	or     eax,edx
c0019538:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001953e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019545:	e8 46 f8 ff ff       	call   c0018d90 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001954a:	83 c4 10             	add    esp,0x10
c001954d:	83 e0 01             	and    eax,0x1
c0019550:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019557:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001955d:	83 e0 fb             	and    eax,0xfffffffb
c0019560:	09 d0                	or     eax,edx
c0019562:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019568:	83 ec 0c             	sub    esp,0xc
c001956b:	56                   	push   esi
c001956c:	55                   	push   ebp
c001956d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019571:	57                   	push   edi
c0019572:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019576:	50                   	push   eax
c0019577:	6a 01                	push   0x1
c0019579:	e8 04 f7 ff ff       	call   c0018c82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001957e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019582:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019588:	88 ca                	mov    dl,cl
c001958a:	83 e0 f0             	and    eax,0xfffffff0
c001958d:	83 e2 0f             	and    edx,0xf
c0019590:	09 d0                	or     eax,edx
c0019592:	88 ca                	mov    dl,cl
c0019594:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001959a:	c0 ea 04             	shr    dl,0x4
c001959d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00195a1:	0f b6 c2             	movzx  eax,dl
c00195a4:	83 c4 20             	add    esp,0x20
c00195a7:	c1 e0 06             	shl    eax,0x6
c00195aa:	89 c5                	mov    ebp,eax
c00195ac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195b2:	66 25 3f c0          	and    ax,0xc03f
c00195b6:	09 e8                	or     eax,ebp
c00195b8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195bf:	89 c8                	mov    eax,ecx
c00195c1:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00195c7:	c1 e8 08             	shr    eax,0x8
c00195ca:	83 e2 3f             	and    edx,0x3f
c00195cd:	83 e0 0f             	and    eax,0xf
c00195d0:	89 c5                	mov    ebp,eax
c00195d2:	c1 e5 06             	shl    ebp,0x6
c00195d5:	09 d5                	or     ebp,edx
c00195d7:	89 ea                	mov    edx,ebp
c00195d9:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00195df:	88 c2                	mov    dl,al
c00195e1:	c0 ea 02             	shr    dl,0x2
c00195e4:	89 d5                	mov    ebp,edx
c00195e6:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00195ec:	83 e2 c0             	and    edx,0xffffffc0
c00195ef:	09 d5                	or     ebp,edx
c00195f1:	89 ea                	mov    edx,ebp
c00195f3:	89 cd                	mov    ebp,ecx
c00195f5:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00195fb:	c1 ed 0c             	shr    ebp,0xc
c00195fe:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019604:	83 e5 03             	and    ebp,0x3
c0019607:	83 e2 cf             	and    edx,0xffffffcf
c001960a:	c1 e5 04             	shl    ebp,0x4
c001960d:	09 d5                	or     ebp,edx
c001960f:	3c 06                	cmp    al,0x6
c0019611:	89 ea                	mov    edx,ebp
c0019613:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019619:	74 04                	je     c001961f <CPU::detectFeatures()+0x557>
c001961b:	3c 0f                	cmp    al,0xf
c001961d:	75 5c                	jne    c001967b <CPU::detectFeatures()+0x5b3>
c001961f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019623:	89 cd                	mov    ebp,ecx
c0019625:	c1 ed 10             	shr    ebp,0x10
c0019628:	c1 e5 04             	shl    ebp,0x4
c001962b:	09 ea                	or     edx,ebp
c001962d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019633:	0f b6 d2             	movzx  edx,dl
c0019636:	66 81 e5 3f c0       	and    bp,0xc03f
c001963b:	c1 e2 06             	shl    edx,0x6
c001963e:	09 ea                	or     edx,ebp
c0019640:	3c 0f                	cmp    al,0xf
c0019642:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019649:	75 30                	jne    c001967b <CPU::detectFeatures()+0x5b3>
c001964b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019651:	c1 e9 14             	shr    ecx,0x14
c0019654:	83 e0 3f             	and    eax,0x3f
c0019657:	83 c1 0f             	add    ecx,0xf
c001965a:	88 ca                	mov    dl,cl
c001965c:	c0 e9 02             	shr    cl,0x2
c001965f:	c1 e2 06             	shl    edx,0x6
c0019662:	09 d0                	or     eax,edx
c0019664:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001966a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019670:	83 e0 c0             	and    eax,0xffffffc0
c0019673:	09 c1                	or     ecx,eax
c0019675:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001967b:	83 ec 0c             	sub    esp,0xc
c001967e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019685:	56                   	push   esi
c0019686:	8d 44 24 28          	lea    eax,[esp+0x28]
c001968a:	50                   	push   eax
c001968b:	57                   	push   edi
c001968c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019690:	55                   	push   ebp
c0019691:	68 00 00 00 80       	push   0x80000000
c0019696:	e8 e7 f5 ff ff       	call   c0018c82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001969b:	83 c4 20             	add    esp,0x20
c001969e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00196a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196aa:	76 1e                	jbe    c00196ca <CPU::detectFeatures()+0x602>
c00196ac:	83 ec 0c             	sub    esp,0xc
c00196af:	56                   	push   esi
c00196b0:	50                   	push   eax
c00196b1:	57                   	push   edi
c00196b2:	55                   	push   ebp
c00196b3:	68 01 00 00 80       	push   0x80000001
c00196b8:	e8 c5 f5 ff ff       	call   c0018c82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196bd:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00196c7:	83 c4 20             	add    esp,0x20
c00196ca:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00196d0:	83 f8 01             	cmp    eax,0x1
c00196d3:	75 6f                	jne    c0019744 <CPU::detectFeatures()+0x67c>
c00196d5:	51                   	push   ecx
c00196d6:	51                   	push   ecx
c00196d7:	68 16 b8 02 c0       	push   0xc002b816
c00196dc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196e0:	56                   	push   esi
c00196e1:	e8 4e 71 fe ff       	call   c0000834 <strcpy>
c00196e6:	5f                   	pop    edi
c00196e7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196ed:	5d                   	pop    ebp
c00196ee:	66 c1 e8 06          	shr    ax,0x6
c00196f2:	0f b6 c0             	movzx  eax,al
c00196f5:	50                   	push   eax
c00196f6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196fc:	c1 e8 0e             	shr    eax,0xe
c00196ff:	0f b6 c0             	movzx  eax,al
c0019702:	50                   	push   eax
c0019703:	e8 24 f2 ff ff       	call   c001892c <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019708:	5a                   	pop    edx
c0019709:	59                   	pop    ecx
c001970a:	50                   	push   eax
c001970b:	56                   	push   esi
c001970c:	e8 63 72 fe ff       	call   c0000974 <strcat>
c0019711:	5f                   	pop    edi
c0019712:	5d                   	pop    ebp
c0019713:	56                   	push   esi
c0019714:	53                   	push   ebx
c0019715:	e8 34 ae ff ff       	call   c001454e <Device::setName(char const*)>
c001971a:	58                   	pop    eax
c001971b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019721:	5a                   	pop    edx
c0019722:	68 1d b8 02 c0       	push   0xc002b81d
c0019727:	50                   	push   eax
c0019728:	e8 93 71 fe ff       	call   c00008c0 <strcmp>
c001972d:	83 c4 10             	add    esp,0x10
c0019730:	85 c0                	test   eax,eax
c0019732:	0f 85 71 03 00 00    	jne    c0019aa9 <CPU::detectFeatures()+0x9e1>
c0019738:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001973f:	e9 65 03 00 00       	jmp    c0019aa9 <CPU::detectFeatures()+0x9e1>
c0019744:	83 f8 02             	cmp    eax,0x2
c0019747:	0f 85 b5 00 00 00    	jne    c0019802 <CPU::detectFeatures()+0x73a>
c001974d:	57                   	push   edi
c001974e:	57                   	push   edi
c001974f:	68 2f b8 02 c0       	push   0xc002b82f
c0019754:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019758:	56                   	push   esi
c0019759:	e8 d6 70 fe ff       	call   c0000834 <strcpy>
c001975e:	5d                   	pop    ebp
c001975f:	58                   	pop    eax
c0019760:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019766:	66 c1 e8 06          	shr    ax,0x6
c001976a:	0f b6 c0             	movzx  eax,al
c001976d:	50                   	push   eax
c001976e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019774:	c1 e8 0e             	shr    eax,0xe
c0019777:	0f b6 c0             	movzx  eax,al
c001977a:	50                   	push   eax
c001977b:	e8 18 f0 ff ff       	call   c0018798 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019780:	5a                   	pop    edx
c0019781:	59                   	pop    ecx
c0019782:	50                   	push   eax
c0019783:	56                   	push   esi
c0019784:	e8 eb 71 fe ff       	call   c0000974 <strcat>
c0019789:	5f                   	pop    edi
c001978a:	5d                   	pop    ebp
c001978b:	56                   	push   esi
c001978c:	53                   	push   ebx
c001978d:	e8 bc ad ff ff       	call   c001454e <Device::setName(char const*)>
c0019792:	58                   	pop    eax
c0019793:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019799:	5a                   	pop    edx
c001979a:	68 34 b8 02 c0       	push   0xc002b834
c001979f:	50                   	push   eax
c00197a0:	e8 1b 71 fe ff       	call   c00008c0 <strcmp>
c00197a5:	83 c4 10             	add    esp,0x10
c00197a8:	85 c0                	test   eax,eax
c00197aa:	75 20                	jne    c00197cc <CPU::detectFeatures()+0x704>
c00197ac:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c00197b2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00197b8:	a8 01                	test   al,0x1
c00197ba:	74 10                	je     c00197cc <CPU::detectFeatures()+0x704>
c00197bc:	83 e0 fe             	and    eax,0xfffffffe
c00197bf:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00197c5:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00197cc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197d2:	c1 e8 0e             	shr    eax,0xe
c00197d5:	3c 05                	cmp    al,0x5
c00197d7:	0f 85 cc 02 00 00    	jne    c0019aa9 <CPU::detectFeatures()+0x9e1>
c00197dd:	56                   	push   esi
c00197de:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00197e4:	83 e0 0f             	and    eax,0xf
c00197e7:	50                   	push   eax
c00197e8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197ee:	66 c1 e8 06          	shr    ax,0x6
c00197f2:	0f b6 c0             	movzx  eax,al
c00197f5:	50                   	push   eax
c00197f6:	6a 05                	push   0x5
c00197f8:	e8 11 f4 ff ff       	call   c0018c0e <CPU::AMD_K6_writeback(int, int, int)>
c00197fd:	e9 1f 02 00 00       	jmp    c0019a21 <CPU::detectFeatures()+0x959>
c0019802:	8d 50 fd             	lea    edx,[eax-0x3]
c0019805:	83 fa 01             	cmp    edx,0x1
c0019808:	76 09                	jbe    c0019813 <CPU::detectFeatures()+0x74b>
c001980a:	83 f8 06             	cmp    eax,0x6
c001980d:	0f 85 91 01 00 00    	jne    c00199a4 <CPU::detectFeatures()+0x8dc>
c0019813:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019819:	c1 ea 0e             	shr    edx,0xe
c001981c:	80 fa 05             	cmp    dl,0x5
c001981f:	75 7b                	jne    c001989c <CPU::detectFeatures()+0x7d4>
c0019821:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019827:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001982c:	66 81 fa 00 01       	cmp    dx,0x100
c0019831:	75 0c                	jne    c001983f <CPU::detectFeatures()+0x777>
c0019833:	51                   	push   ecx
c0019834:	51                   	push   ecx
c0019835:	68 3b b8 02 c0       	push   0xc002b83b
c001983a:	e9 dc 01 00 00       	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c001983f:	66 81 fa 00 02       	cmp    dx,0x200
c0019844:	75 0c                	jne    c0019852 <CPU::detectFeatures()+0x78a>
c0019846:	52                   	push   edx
c0019847:	52                   	push   edx
c0019848:	68 4e b8 02 c0       	push   0xc002b84e
c001984d:	e9 c9 01 00 00       	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c0019852:	66 81 fa 40 02       	cmp    dx,0x240
c0019857:	75 0c                	jne    c0019865 <CPU::detectFeatures()+0x79d>
c0019859:	50                   	push   eax
c001985a:	50                   	push   eax
c001985b:	68 60 b8 02 c0       	push   0xc002b860
c0019860:	e9 b6 01 00 00       	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c0019865:	83 f8 06             	cmp    eax,0x6
c0019868:	75 0c                	jne    c0019876 <CPU::detectFeatures()+0x7ae>
c001986a:	50                   	push   eax
c001986b:	50                   	push   eax
c001986c:	68 72 b8 02 c0       	push   0xc002b872
c0019871:	e9 a5 01 00 00       	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c0019876:	83 f8 04             	cmp    eax,0x4
c0019879:	75 0c                	jne    c0019887 <CPU::detectFeatures()+0x7bf>
c001987b:	50                   	push   eax
c001987c:	50                   	push   eax
c001987d:	68 7e b8 02 c0       	push   0xc002b87e
c0019882:	e9 94 01 00 00       	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c0019887:	83 f8 03             	cmp    eax,0x3
c001988a:	0f 85 19 02 00 00    	jne    c0019aa9 <CPU::detectFeatures()+0x9e1>
c0019890:	50                   	push   eax
c0019891:	50                   	push   eax
c0019892:	68 86 b8 02 c0       	push   0xc002b886
c0019897:	e9 7f 01 00 00       	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c001989c:	80 fa 06             	cmp    dl,0x6
c001989f:	0f 85 db 00 00 00    	jne    c0019980 <CPU::detectFeatures()+0x8b8>
c00198a5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198ab:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198b0:	66 81 fa 80 01       	cmp    dx,0x180
c00198b5:	75 0c                	jne    c00198c3 <CPU::detectFeatures()+0x7fb>
c00198b7:	50                   	push   eax
c00198b8:	50                   	push   eax
c00198b9:	68 91 b8 02 c0       	push   0xc002b891
c00198be:	e9 58 01 00 00       	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c00198c3:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00198c9:	66 f7 c1 80 ff       	test   cx,0xff80
c00198ce:	75 0c                	jne    c00198dc <CPU::detectFeatures()+0x814>
c00198d0:	50                   	push   eax
c00198d1:	50                   	push   eax
c00198d2:	68 a1 b8 02 c0       	push   0xc002b8a1
c00198d7:	e9 3f 01 00 00       	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c00198dc:	66 81 fa 40 02       	cmp    dx,0x240
c00198e1:	75 0c                	jne    c00198ef <CPU::detectFeatures()+0x827>
c00198e3:	55                   	push   ebp
c00198e4:	55                   	push   ebp
c00198e5:	68 a8 b8 02 c0       	push   0xc002b8a8
c00198ea:	e9 2c 01 00 00       	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c00198ef:	66 81 fa 80 02       	cmp    dx,0x280
c00198f4:	75 0c                	jne    c0019902 <CPU::detectFeatures()+0x83a>
c00198f6:	57                   	push   edi
c00198f7:	57                   	push   edi
c00198f8:	68 b1 b8 02 c0       	push   0xc002b8b1
c00198fd:	e9 19 01 00 00       	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c0019902:	66 81 fa 40 03       	cmp    dx,0x340
c0019907:	74 ed                	je     c00198f6 <CPU::detectFeatures()+0x82e>
c0019909:	66 81 fa c0 03       	cmp    dx,0x3c0
c001990e:	75 0c                	jne    c001991c <CPU::detectFeatures()+0x854>
c0019910:	56                   	push   esi
c0019911:	56                   	push   esi
c0019912:	68 b8 b8 02 c0       	push   0xc002b8b8
c0019917:	e9 ff 00 00 00       	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c001991c:	83 f8 06             	cmp    eax,0x6
c001991f:	0f 84 45 ff ff ff    	je     c001986a <CPU::detectFeatures()+0x7a2>
c0019925:	83 f8 04             	cmp    eax,0x4
c0019928:	0f 84 4d ff ff ff    	je     c001987b <CPU::detectFeatures()+0x7b3>
c001992e:	83 f8 03             	cmp    eax,0x3
c0019931:	0f 85 72 01 00 00    	jne    c0019aa9 <CPU::detectFeatures()+0x9e1>
c0019937:	51                   	push   ecx
c0019938:	51                   	push   ecx
c0019939:	68 c1 b8 02 c0       	push   0xc002b8c1
c001993e:	53                   	push   ebx
c001993f:	e8 0a ac ff ff       	call   c001454e <Device::setName(char const*)>
c0019944:	b1 c1                	mov    cl,0xc1
c0019946:	88 c8                	mov    al,cl
c0019948:	e6 22                	out    0x22,al
c001994a:	e4 23                	in     al,0x23
c001994c:	88 c2                	mov    dl,al
c001994e:	88 c8                	mov    al,cl
c0019950:	e6 22                	out    0x22,al
c0019952:	88 d0                	mov    al,dl
c0019954:	83 c8 10             	or     eax,0x10
c0019957:	e6 23                	out    0x23,al
c0019959:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019960:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019963:	89 d0                	mov    eax,edx
c0019965:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001996b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001996f:	40                   	inc    eax
c0019970:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019976:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001997b:	e9 a1 00 00 00       	jmp    c0019a21 <CPU::detectFeatures()+0x959>
c0019980:	83 f8 06             	cmp    eax,0x6
c0019983:	0f 84 e1 fe ff ff    	je     c001986a <CPU::detectFeatures()+0x7a2>
c0019989:	83 f8 04             	cmp    eax,0x4
c001998c:	0f 84 e9 fe ff ff    	je     c001987b <CPU::detectFeatures()+0x7b3>
c0019992:	83 f8 03             	cmp    eax,0x3
c0019995:	0f 85 0e 01 00 00    	jne    c0019aa9 <CPU::detectFeatures()+0x9e1>
c001999b:	52                   	push   edx
c001999c:	52                   	push   edx
c001999d:	68 cc b8 02 c0       	push   0xc002b8cc
c00199a2:	eb 77                	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c00199a4:	83 f8 07             	cmp    eax,0x7
c00199a7:	75 09                	jne    c00199b2 <CPU::detectFeatures()+0x8ea>
c00199a9:	50                   	push   eax
c00199aa:	50                   	push   eax
c00199ab:	68 d6 b8 02 c0       	push   0xc002b8d6
c00199b0:	eb 69                	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c00199b2:	83 f8 0a             	cmp    eax,0xa
c00199b5:	75 09                	jne    c00199c0 <CPU::detectFeatures()+0x8f8>
c00199b7:	50                   	push   eax
c00199b8:	50                   	push   eax
c00199b9:	68 e1 b8 02 c0       	push   0xc002b8e1
c00199be:	eb 5b                	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c00199c0:	83 f8 0b             	cmp    eax,0xb
c00199c3:	75 09                	jne    c00199ce <CPU::detectFeatures()+0x906>
c00199c5:	50                   	push   eax
c00199c6:	50                   	push   eax
c00199c7:	68 e9 b8 02 c0       	push   0xc002b8e9
c00199cc:	eb 4d                	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c00199ce:	83 f8 08             	cmp    eax,0x8
c00199d1:	75 09                	jne    c00199dc <CPU::detectFeatures()+0x914>
c00199d3:	50                   	push   eax
c00199d4:	50                   	push   eax
c00199d5:	68 f2 b8 02 c0       	push   0xc002b8f2
c00199da:	eb 3f                	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c00199dc:	83 f8 09             	cmp    eax,0x9
c00199df:	75 09                	jne    c00199ea <CPU::detectFeatures()+0x922>
c00199e1:	50                   	push   eax
c00199e2:	50                   	push   eax
c00199e3:	68 fa b8 02 c0       	push   0xc002b8fa
c00199e8:	eb 31                	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c00199ea:	83 f8 05             	cmp    eax,0x5
c00199ed:	75 09                	jne    c00199f8 <CPU::detectFeatures()+0x930>
c00199ef:	50                   	push   eax
c00199f0:	50                   	push   eax
c00199f1:	68 02 b9 02 c0       	push   0xc002b902
c00199f6:	eb 23                	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c00199f8:	83 f8 0c             	cmp    eax,0xc
c00199fb:	75 09                	jne    c0019a06 <CPU::detectFeatures()+0x93e>
c00199fd:	55                   	push   ebp
c00199fe:	55                   	push   ebp
c00199ff:	68 10 b9 02 c0       	push   0xc002b910
c0019a04:	eb 15                	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c0019a06:	83 f8 0d             	cmp    eax,0xd
c0019a09:	75 09                	jne    c0019a14 <CPU::detectFeatures()+0x94c>
c0019a0b:	57                   	push   edi
c0019a0c:	57                   	push   edi
c0019a0d:	68 1b b9 02 c0       	push   0xc002b91b
c0019a12:	eb 07                	jmp    c0019a1b <CPU::detectFeatures()+0x953>
c0019a14:	56                   	push   esi
c0019a15:	56                   	push   esi
c0019a16:	68 2f b9 02 c0       	push   0xc002b92f
c0019a1b:	53                   	push   ebx
c0019a1c:	e8 2d ab ff ff       	call   c001454e <Device::setName(char const*)>
c0019a21:	83 c4 10             	add    esp,0x10
c0019a24:	e9 80 00 00 00       	jmp    c0019aa9 <CPU::detectFeatures()+0x9e1>
c0019a29:	51                   	push   ecx
c0019a2a:	51                   	push   ecx
c0019a2b:	68 7b b7 02 c0       	push   0xc002b77b
c0019a30:	57                   	push   edi
c0019a31:	e8 fe 6d fe ff       	call   c0000834 <strcpy>
c0019a36:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a40:	e8 69 68 fe ff       	call   c00002ae <is486>
c0019a45:	83 c4 10             	add    esp,0x10
c0019a48:	85 c0                	test   eax,eax
c0019a4a:	74 2b                	je     c0019a77 <CPU::detectFeatures()+0x9af>
c0019a4c:	52                   	push   edx
c0019a4d:	52                   	push   edx
c0019a4e:	68 3b b9 02 c0       	push   0xc002b93b
c0019a53:	53                   	push   ebx
c0019a54:	e8 f5 aa ff ff       	call   c001454e <Device::setName(char const*)>
c0019a59:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a60:	0f 20 c0             	mov    eax,cr0
c0019a63:	83 e0 14             	and    eax,0x14
c0019a66:	83 c4 10             	add    esp,0x10
c0019a69:	83 f8 04             	cmp    eax,0x4
c0019a6c:	75 1f                	jne    c0019a8d <CPU::detectFeatures()+0x9c5>
c0019a6e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a75:	eb 32                	jmp    c0019aa9 <CPU::detectFeatures()+0x9e1>
c0019a77:	50                   	push   eax
c0019a78:	50                   	push   eax
c0019a79:	68 46 b9 02 c0       	push   0xc002b946
c0019a7e:	53                   	push   ebx
c0019a7f:	e8 ca aa ff ff       	call   c001454e <Device::setName(char const*)>
c0019a84:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a8b:	eb d3                	jmp    c0019a60 <CPU::detectFeatures()+0x998>
c0019a8d:	e8 f7 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019a92:	83 e0 01             	and    eax,0x1
c0019a95:	8d 14 00             	lea    edx,[eax+eax*1]
c0019a98:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019a9e:	83 e0 fd             	and    eax,0xfffffffd
c0019aa1:	09 d0                	or     eax,edx
c0019aa3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019aa9:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019ab0:	83 c4 4c             	add    esp,0x4c
c0019ab3:	5b                   	pop    ebx
c0019ab4:	5e                   	pop    esi
c0019ab5:	5f                   	pop    edi
c0019ab6:	5d                   	pop    ebp
c0019ab7:	c3                   	ret    

c0019ab8 <CPU::setupSMEP()>:
c0019ab8:	0f 20 e0             	mov    eax,cr4
c0019abb:	0d 00 00 10 00       	or     eax,0x100000
c0019ac0:	0f 22 e0             	mov    cr4,eax
c0019ac3:	c3                   	ret    

c0019ac4 <CPU::setupUMIP()>:
c0019ac4:	0f 20 e0             	mov    eax,cr4
c0019ac7:	80 cc 08             	or     ah,0x8
c0019aca:	0f 22 e0             	mov    cr4,eax
c0019acd:	c3                   	ret    

c0019ace <CPU::setupTSC()>:
c0019ace:	0f 20 e0             	mov    eax,cr4
c0019ad1:	83 c8 04             	or     eax,0x4
c0019ad4:	0f 22 e0             	mov    cr4,eax
c0019ad7:	c3                   	ret    

c0019ad8 <CPU::setupLargePages()>:
c0019ad8:	0f 20 e0             	mov    eax,cr4
c0019adb:	83 c8 10             	or     eax,0x10
c0019ade:	0f 22 e0             	mov    cr4,eax
c0019ae1:	c3                   	ret    

c0019ae2 <CPU::setupPAT()>:
c0019ae2:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019ae7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019aee:	74 2c                	je     c0019b1c <CPU::setupPAT()+0x3a>
c0019af0:	53                   	push   ebx
c0019af1:	83 ec 10             	sub    esp,0x10
c0019af4:	68 77 02 00 00       	push   0x277
c0019af9:	50                   	push   eax
c0019afa:	e8 e9 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019aff:	83 e2 f8             	and    edx,0xfffffff8
c0019b02:	83 ca 01             	or     edx,0x1
c0019b05:	52                   	push   edx
c0019b06:	50                   	push   eax
c0019b07:	68 77 02 00 00       	push   0x277
c0019b0c:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0019b12:	e8 fd 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b17:	83 c4 28             	add    esp,0x28
c0019b1a:	5b                   	pop    ebx
c0019b1b:	c3                   	ret    
c0019b1c:	c3                   	ret    
c0019b1d:	90                   	nop

c0019b1e <CPU::setupMTRR()>:
c0019b1e:	c3                   	ret    
c0019b1f:	90                   	nop

c0019b20 <CPU::setupGlobalPages()>:
c0019b20:	0f 20 e0             	mov    eax,cr4
c0019b23:	0c 80                	or     al,0x80
c0019b25:	0f 22 e0             	mov    cr4,eax
c0019b28:	c3                   	ret    
c0019b29:	90                   	nop

c0019b2a <CPU::allowUsermodeDataAccess()>:
c0019b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b2e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b35:	74 03                	je     c0019b3a <CPU::allowUsermodeDataAccess()+0x10>
c0019b37:	0f 01 cb             	stac   
c0019b3a:	c3                   	ret    
c0019b3b:	90                   	nop

c0019b3c <CPU::prohibitUsermodeDataAccess()>:
c0019b3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b40:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b47:	74 03                	je     c0019b4c <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b49:	0f 01 ca             	clac   
c0019b4c:	c3                   	ret    
c0019b4d:	90                   	nop

c0019b4e <CPU::setupSMAP()>:
c0019b4e:	0f 20 e0             	mov    eax,cr4
c0019b51:	0d 00 00 20 00       	or     eax,0x200000
c0019b56:	0f 22 e0             	mov    cr4,eax
c0019b59:	eb e1                	jmp    c0019b3c <CPU::prohibitUsermodeDataAccess()>
c0019b5b:	90                   	nop

c0019b5c <CPU::setupFeatures()>:
c0019b5c:	83 ec 0c             	sub    esp,0xc
c0019b5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b63:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b6a:	74 07                	je     c0019b73 <CPU::setupFeatures()+0x17>
c0019b6c:	52                   	push   edx
c0019b6d:	e8 46 ff ff ff       	call   c0019ab8 <CPU::setupSMEP()>
c0019b72:	58                   	pop    eax
c0019b73:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b7a:	74 07                	je     c0019b83 <CPU::setupFeatures()+0x27>
c0019b7c:	52                   	push   edx
c0019b7d:	e8 cc ff ff ff       	call   c0019b4e <CPU::setupSMAP()>
c0019b82:	58                   	pop    eax
c0019b83:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b8a:	74 07                	je     c0019b93 <CPU::setupFeatures()+0x37>
c0019b8c:	52                   	push   edx
c0019b8d:	e8 32 ff ff ff       	call   c0019ac4 <CPU::setupUMIP()>
c0019b92:	58                   	pop    eax
c0019b93:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019b9a:	74 07                	je     c0019ba3 <CPU::setupFeatures()+0x47>
c0019b9c:	52                   	push   edx
c0019b9d:	e8 2c ff ff ff       	call   c0019ace <CPU::setupTSC()>
c0019ba2:	58                   	pop    eax
c0019ba3:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019baa:	74 07                	je     c0019bb3 <CPU::setupFeatures()+0x57>
c0019bac:	52                   	push   edx
c0019bad:	e8 26 ff ff ff       	call   c0019ad8 <CPU::setupLargePages()>
c0019bb2:	59                   	pop    ecx
c0019bb3:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019bba:	74 07                	je     c0019bc3 <CPU::setupFeatures()+0x67>
c0019bbc:	52                   	push   edx
c0019bbd:	e8 5e ff ff ff       	call   c0019b20 <CPU::setupGlobalPages()>
c0019bc2:	58                   	pop    eax
c0019bc3:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019bca:	74 0c                	je     c0019bd8 <CPU::setupFeatures()+0x7c>
c0019bcc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019bd0:	83 c4 0c             	add    esp,0xc
c0019bd3:	e9 0a ff ff ff       	jmp    c0019ae2 <CPU::setupPAT()>
c0019bd8:	83 c4 0c             	add    esp,0xc
c0019bdb:	c3                   	ret    

c0019bdc <CPU::open(int, int, void*)>:
c0019bdc:	57                   	push   edi
c0019bdd:	56                   	push   esi
c0019bde:	53                   	push   ebx
c0019bdf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019be3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019be7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019bed:	83 ec 0c             	sub    esp,0xc
c0019bf0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019bf6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019bfc:	50                   	push   eax
c0019bfd:	e8 d2 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019c02:	83 c4 0c             	add    esp,0xc
c0019c05:	6a 00                	push   0x0
c0019c07:	68 ef be ad de       	push   0xdeadbeef
c0019c0c:	57                   	push   edi
c0019c0d:	e8 fe 78 ff ff       	call   c0011510 <TSS::setup(unsigned long, unsigned long)>
c0019c12:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c15:	e8 d6 78 ff ff       	call   c00114f0 <TSS::flush()>
c0019c1a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c20:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c23:	e8 08 57 ff ff       	call   c000f330 <IDT::setup()>
c0019c28:	b8 00 04 00 00       	mov    eax,0x400
c0019c2d:	0f 23 f8             	mov    db7,eax
c0019c30:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c3a:	e8 a3 62 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019c3f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c45:	89 30                	mov    DWORD PTR [eax],esi
c0019c47:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c4d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c50:	58                   	pop    eax
c0019c51:	5a                   	pop    edx
c0019c52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c58:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c5c:	e8 ed 89 ff ff       	call   c001264e <VAS::setCPUSpecific(unsigned long)>
c0019c61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c64:	e8 5f f4 ff ff       	call   c00190c8 <CPU::detectFeatures()>
c0019c69:	e8 ce bc ff ff       	call   c001593c <setupInterruptController()>
c0019c6e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c74:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c0019c79:	83 e0 10             	and    eax,0x10
c0019c7c:	83 f8 01             	cmp    eax,0x1
c0019c7f:	19 c0                	sbb    eax,eax
c0019c81:	83 e0 46             	and    eax,0x46
c0019c84:	83 c0 1e             	add    eax,0x1e
c0019c87:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c8a:	e8 bb d1 ff ff       	call   c0016e4a <setupTimer(int)>
c0019c8f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019c95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c98:	e8 bf fe ff ff       	call   c0019b5c <CPU::setupFeatures()>
c0019c9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ca0:	e8 a7 f1 ff ff       	call   c0018e4c <CPU::displayFeatures()>
c0019ca5:	83 c4 10             	add    esp,0x10
c0019ca8:	31 c0                	xor    eax,eax
c0019caa:	5b                   	pop    ebx
c0019cab:	5e                   	pop    esi
c0019cac:	5f                   	pop    edi
c0019cad:	c3                   	ret    

c0019cae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019cae:	57                   	push   edi
c0019caf:	56                   	push   esi
c0019cb0:	53                   	push   ebx
c0019cb1:	51                   	push   ecx
c0019cb2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019cb6:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019cb9:	0f 02 c0             	lar    eax,ax
c0019cbc:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019cbf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019cc3:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019cc6:	88 ca                	mov    dl,cl
c0019cc8:	c0 ea 06             	shr    dl,0x6
c0019ccb:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019ccf:	89 ca                	mov    edx,ecx
c0019cd1:	66 c1 ea 03          	shr    dx,0x3
c0019cd5:	83 e2 07             	and    edx,0x7
c0019cd8:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019cdd:	88 17                	mov    BYTE PTR [edi],dl
c0019cdf:	0f 84 a6 01 00 00    	je     c0019e8b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019ce5:	83 e1 07             	and    ecx,0x7
c0019ce8:	80 f9 04             	cmp    cl,0x4
c0019ceb:	0f 84 98 00 00 00    	je     c0019d89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019cf1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019cf6:	0f 95 c0             	setne  al
c0019cf9:	80 f9 05             	cmp    cl,0x5
c0019cfc:	0f 95 c2             	setne  dl
c0019cff:	08 c2                	or     dl,al
c0019d01:	74 79                	je     c0019d7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d03:	84 c9                	test   cl,cl
c0019d05:	75 05                	jne    c0019d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d07:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d0a:	eb 3c                	jmp    c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d0c:	80 f9 01             	cmp    cl,0x1
c0019d0f:	75 05                	jne    c0019d16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d11:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d14:	eb 32                	jmp    c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d16:	80 f9 02             	cmp    cl,0x2
c0019d19:	75 05                	jne    c0019d20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d1b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d1e:	eb 28                	jmp    c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d20:	31 c0                	xor    eax,eax
c0019d22:	80 f9 03             	cmp    cl,0x3
c0019d25:	75 05                	jne    c0019d2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d27:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d2a:	eb 1c                	jmp    c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d2c:	80 f9 05             	cmp    cl,0x5
c0019d2f:	75 05                	jne    c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d31:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d34:	eb 12                	jmp    c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d36:	80 f9 06             	cmp    cl,0x6
c0019d39:	75 05                	jne    c0019d40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d3b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d3e:	eb 08                	jmp    c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d40:	80 f9 07             	cmp    cl,0x7
c0019d43:	75 03                	jne    c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d45:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d48:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d4d:	75 10                	jne    c0019d5f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d4f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d53:	b9 03 00 00 00       	mov    ecx,0x3
c0019d58:	01 d0                	add    eax,edx
c0019d5a:	e9 37 01 00 00       	jmp    c0019e96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d5f:	b9 02 00 00 00       	mov    ecx,0x2
c0019d64:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d69:	0f 85 27 01 00 00    	jne    c0019e96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d6f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d72:	b9 06 00 00 00       	mov    ecx,0x6
c0019d77:	e9 1a 01 00 00       	jmp    c0019e96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d7c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d7f:	b9 06 00 00 00       	mov    ecx,0x6
c0019d84:	e9 0f 01 00 00       	jmp    c0019e98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d89:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019d8c:	88 ca                	mov    dl,cl
c0019d8e:	c0 ea 06             	shr    dl,0x6
c0019d91:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019d95:	89 ca                	mov    edx,ecx
c0019d97:	66 c1 ea 03          	shr    dx,0x3
c0019d9b:	83 e2 07             	and    edx,0x7
c0019d9e:	80 e1 07             	and    cl,0x7
c0019da1:	75 05                	jne    c0019da8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019da3:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019da6:	eb 4c                	jmp    c0019df4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019da8:	80 f9 01             	cmp    cl,0x1
c0019dab:	75 05                	jne    c0019db2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019dad:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019db0:	eb 42                	jmp    c0019df4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019db2:	80 f9 02             	cmp    cl,0x2
c0019db5:	75 05                	jne    c0019dbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019db7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019dba:	eb 38                	jmp    c0019df4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dbc:	80 f9 03             	cmp    cl,0x3
c0019dbf:	75 05                	jne    c0019dc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019dc1:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019dc4:	eb 2e                	jmp    c0019df4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dc6:	80 f9 04             	cmp    cl,0x4
c0019dc9:	75 12                	jne    c0019ddd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019dcb:	f6 c4 60             	test   ah,0x60
c0019dce:	75 08                	jne    c0019dd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019dd0:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019dd3:	8d 78 14             	lea    edi,[eax+0x14]
c0019dd6:	eb 1c                	jmp    c0019df4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dd8:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019ddb:	eb 17                	jmp    c0019df4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ddd:	80 f9 05             	cmp    cl,0x5
c0019de0:	75 05                	jne    c0019de7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019de2:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019de5:	eb 0d                	jmp    c0019df4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019de7:	80 f9 06             	cmp    cl,0x6
c0019dea:	75 05                	jne    c0019df1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019dec:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019def:	eb 03                	jmp    c0019df4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019df1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019df4:	84 d2                	test   dl,dl
c0019df6:	75 05                	jne    c0019dfd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019df8:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019dfb:	eb 3c                	jmp    c0019e39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dfd:	80 fa 01             	cmp    dl,0x1
c0019e00:	75 05                	jne    c0019e07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e02:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e05:	eb 32                	jmp    c0019e39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e07:	80 fa 02             	cmp    dl,0x2
c0019e0a:	75 05                	jne    c0019e11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e0c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e0f:	eb 28                	jmp    c0019e39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e11:	80 fa 03             	cmp    dl,0x3
c0019e14:	75 05                	jne    c0019e1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e16:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e19:	eb 1e                	jmp    c0019e39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e1b:	31 c0                	xor    eax,eax
c0019e1d:	80 fa 04             	cmp    dl,0x4
c0019e20:	74 17                	je     c0019e39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e22:	80 fa 05             	cmp    dl,0x5
c0019e25:	75 05                	jne    c0019e2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e27:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e2a:	eb 0d                	jmp    c0019e39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e2c:	80 fa 06             	cmp    dl,0x6
c0019e2f:	75 05                	jne    c0019e36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e31:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e34:	eb 03                	jmp    c0019e39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e36:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e39:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e3e:	0f 94 c2             	sete   dl
c0019e41:	80 f9 05             	cmp    cl,0x5
c0019e44:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e48:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e4d:	d3 e0                	shl    eax,cl
c0019e4f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e53:	74 0a                	je     c0019e5f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e55:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e58:	b9 07 00 00 00       	mov    ecx,0x7
c0019e5d:	eb 37                	jmp    c0019e96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e5f:	01 f8                	add    eax,edi
c0019e61:	b9 03 00 00 00       	mov    ecx,0x3
c0019e66:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e6b:	74 2b                	je     c0019e98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e6d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e72:	75 0d                	jne    c0019e81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e74:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e78:	01 c8                	add    eax,ecx
c0019e7a:	b9 04 00 00 00       	mov    ecx,0x4
c0019e7f:	eb 17                	jmp    c0019e98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e81:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e84:	b9 07 00 00 00       	mov    ecx,0x7
c0019e89:	eb 0d                	jmp    c0019e98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e8b:	b9 02 00 00 00       	mov    ecx,0x2
c0019e90:	b2 01                	mov    dl,0x1
c0019e92:	31 c0                	xor    eax,eax
c0019e94:	eb 02                	jmp    c0019e98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e96:	31 d2                	xor    edx,edx
c0019e98:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e9c:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019e9e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019ea2:	88 11                	mov    BYTE PTR [ecx],dl
c0019ea4:	5a                   	pop    edx
c0019ea5:	5b                   	pop    ebx
c0019ea6:	5e                   	pop    esi
c0019ea7:	5f                   	pop    edi
c0019ea8:	c3                   	ret    

c0019ea9 <Krnl::smpEntry()>:
c0019ea9:	eb fe                	jmp    c0019ea9 <Krnl::smpEntry()>

c0019eab <Krnl::startCPU(int)>:
c0019eab:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019eb0:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019eb7:	0f 84 36 01 00 00    	je     c0019ff3 <Krnl::startCPU(int)+0x148>
c0019ebd:	53                   	push   ebx
c0019ebe:	83 ec 08             	sub    esp,0x8
c0019ec1:	e8 fc 3e 00 00       	call   c001ddc2 <lockScheduler()>
c0019ec6:	52                   	push   edx
c0019ec7:	52                   	push   edx
c0019ec8:	6a 1b                	push   0x1b
c0019eca:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0019ed0:	e8 13 4f ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019ed5:	59                   	pop    ecx
c0019ed6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019edb:	89 c3                	mov    ebx,eax
c0019edd:	58                   	pop    eax
c0019ede:	53                   	push   ebx
c0019edf:	68 80 b9 02 c0       	push   0xc002b980
c0019ee4:	e8 5d 90 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0019ee9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ef7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f01:	c1 e0 18             	shl    eax,0x18
c0019f04:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f0a:	83 c4 10             	add    esp,0x10
c0019f0d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f13:	09 c2                	or     edx,eax
c0019f15:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f1b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f21:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f27:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f2d:	80 cd c5             	or     ch,0xc5
c0019f30:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f36:	f3 90                	pause  
c0019f38:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f3a:	0f ba e1 0c          	bt     ecx,0xc
c0019f3e:	72 f6                	jb     c0019f36 <Krnl::startCPU(int)+0x8b>
c0019f40:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f46:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f4c:	09 c1                	or     ecx,eax
c0019f4e:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f54:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f5a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f60:	80 cd 85             	or     ch,0x85
c0019f63:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f69:	f3 90                	pause  
c0019f6b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f6d:	0f ba e1 0c          	bt     ecx,0xc
c0019f71:	72 f6                	jb     c0019f69 <Krnl::startCPU(int)+0xbe>
c0019f73:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f7d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f83:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f89:	09 c1                	or     ecx,eax
c0019f8b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f91:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f97:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019f9d:	81 c9 02 06 00 00    	or     ecx,0x602
c0019fa3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fa9:	f3 90                	pause  
c0019fab:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fad:	0f ba e1 0c          	bt     ecx,0xc
c0019fb1:	72 f6                	jb     c0019fa9 <Krnl::startCPU(int)+0xfe>
c0019fb3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fbd:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fc3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fc9:	09 c8                	or     eax,ecx
c0019fcb:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019fd1:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019fd7:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019fdc:	0d 02 06 00 00       	or     eax,0x602
c0019fe1:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019fe7:	f3 90                	pause  
c0019fe9:	8b 02                	mov    eax,DWORD PTR [edx]
c0019feb:	0f ba e0 0c          	bt     eax,0xc
c0019fef:	72 f6                	jb     c0019fe7 <Krnl::startCPU(int)+0x13c>
c0019ff1:	eb fe                	jmp    c0019ff1 <Krnl::startCPU(int)+0x146>
c0019ff3:	c3                   	ret    

c0019ff4 <Krnl::startCPUs()>:
c0019ff4:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019ff9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019fff:	88 c2                	mov    dl,al
c001a001:	83 e2 0a             	and    edx,0xa
c001a004:	80 fa 0a             	cmp    dl,0xa
c001a007:	75 09                	jne    c001a012 <Krnl::startCPUs()+0x1e>
c001a009:	a8 01                	test   al,0x1
c001a00b:	74 05                	je     c001a012 <Krnl::startCPUs()+0x1e>
c001a00d:	e9 89 61 fe ff       	jmp    c000019b <prepareTramp>
c001a012:	c3                   	ret    
c001a013:	90                   	nop

c001a014 <EnvVarContainer::getEnv(char const*)>:
c001a014:	57                   	push   edi
c001a015:	56                   	push   esi
c001a016:	53                   	push   ebx
c001a017:	31 db                	xor    ebx,ebx
c001a019:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a01d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a01f:	7e 2b                	jle    c001a04c <EnvVarContainer::getEnv(char const*)+0x38>
c001a021:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a028:	50                   	push   eax
c001a029:	50                   	push   eax
c001a02a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a02d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a030:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a034:	e8 87 68 fe ff       	call   c00008c0 <strcmp>
c001a039:	83 c4 10             	add    esp,0x10
c001a03c:	85 c0                	test   eax,eax
c001a03e:	75 09                	jne    c001a049 <EnvVarContainer::getEnv(char const*)+0x35>
c001a040:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a043:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a047:	eb 05                	jmp    c001a04e <EnvVarContainer::getEnv(char const*)+0x3a>
c001a049:	43                   	inc    ebx
c001a04a:	eb d1                	jmp    c001a01d <EnvVarContainer::getEnv(char const*)+0x9>
c001a04c:	31 c0                	xor    eax,eax
c001a04e:	5b                   	pop    ebx
c001a04f:	5e                   	pop    esi
c001a050:	5f                   	pop    edi
c001a051:	c3                   	ret    

c001a052 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a052:	57                   	push   edi
c001a053:	56                   	push   esi
c001a054:	53                   	push   ebx
c001a055:	83 ec 1c             	sub    esp,0x1c
c001a058:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a05c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a060:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a064:	57                   	push   edi
c001a065:	e8 2a 67 fe ff       	call   c0000794 <strlen>
c001a06a:	40                   	inc    eax
c001a06b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a06e:	e8 cd 57 ff ff       	call   c000f840 <malloc>
c001a073:	89 34 24             	mov    DWORD PTR [esp],esi
c001a076:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a07a:	e8 15 67 fe ff       	call   c0000794 <strlen>
c001a07f:	40                   	inc    eax
c001a080:	89 04 24             	mov    DWORD PTR [esp],eax
c001a083:	e8 b8 57 ff ff       	call   c000f840 <malloc>
c001a088:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a08b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a08f:	e8 00 67 fe ff       	call   c0000794 <strlen>
c001a094:	83 c4 0c             	add    esp,0xc
c001a097:	40                   	inc    eax
c001a098:	50                   	push   eax
c001a099:	6a 00                	push   0x0
c001a09b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a09f:	e8 d4 66 fe ff       	call   c0000778 <memset>
c001a0a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0a7:	e8 e8 66 fe ff       	call   c0000794 <strlen>
c001a0ac:	83 c4 0c             	add    esp,0xc
c001a0af:	40                   	inc    eax
c001a0b0:	50                   	push   eax
c001a0b1:	57                   	push   edi
c001a0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0b6:	e8 89 66 fe ff       	call   c0000744 <memcpy>
c001a0bb:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0be:	e8 d1 66 fe ff       	call   c0000794 <strlen>
c001a0c3:	83 c4 0c             	add    esp,0xc
c001a0c6:	40                   	inc    eax
c001a0c7:	50                   	push   eax
c001a0c8:	6a 00                	push   0x0
c001a0ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0ce:	e8 a5 66 fe ff       	call   c0000778 <memset>
c001a0d3:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0d6:	e8 b9 66 fe ff       	call   c0000794 <strlen>
c001a0db:	83 c4 0c             	add    esp,0xc
c001a0de:	40                   	inc    eax
c001a0df:	50                   	push   eax
c001a0e0:	56                   	push   esi
c001a0e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0e5:	e8 5a 66 fe ff       	call   c0000744 <memcpy>
c001a0ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0ec:	40                   	inc    eax
c001a0ed:	89 03                	mov    DWORD PTR [ebx],eax
c001a0ef:	c1 e0 03             	shl    eax,0x3
c001a0f2:	5a                   	pop    edx
c001a0f3:	59                   	pop    ecx
c001a0f4:	50                   	push   eax
c001a0f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a0f8:	e8 2f 57 ff ff       	call   c000f82c <realloc>
c001a0fd:	83 c4 0c             	add    esp,0xc
c001a100:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a103:	6a 08                	push   0x8
c001a105:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a109:	52                   	push   edx
c001a10a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a10c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a110:	50                   	push   eax
c001a111:	e8 2e 66 fe ff       	call   c0000744 <memcpy>
c001a116:	83 c4 20             	add    esp,0x20
c001a119:	5b                   	pop    ebx
c001a11a:	5e                   	pop    esi
c001a11b:	5f                   	pop    edi
c001a11c:	c3                   	ret    
c001a11d:	90                   	nop

c001a11e <EnvVarContainer::deleteEnv(char const*)>:
c001a11e:	c3                   	ret    
c001a11f:	90                   	nop

c001a120 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a120:	55                   	push   ebp
c001a121:	57                   	push   edi
c001a122:	56                   	push   esi
c001a123:	53                   	push   ebx
c001a124:	81 ec 38 01 00 00    	sub    esp,0x138
c001a12a:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a131:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a138:	68 14 01 00 00       	push   0x114
c001a13d:	e8 fe 56 ff ff       	call   c000f840 <malloc>
c001a142:	83 c4 0c             	add    esp,0xc
c001a145:	89 c7                	mov    edi,eax
c001a147:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a14a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a151:	50                   	push   eax
c001a152:	e8 47 93 ff ff       	call   c001349e <File::File(char const*, Process*)>
c001a157:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a15a:	e8 11 96 ff ff       	call   c0013770 <File::exists()>
c001a15f:	83 c4 10             	add    esp,0x10
c001a162:	84 c0                	test   al,al
c001a164:	75 31                	jne    c001a197 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a166:	51                   	push   ecx
c001a167:	51                   	push   ecx
c001a168:	6a 12                	push   0x12
c001a16a:	57                   	push   edi
c001a16b:	e8 92 93 ff ff       	call   c0013502 <File::open(FileOpenMode)>
c001a170:	8b 07                	mov    eax,DWORD PTR [edi]
c001a172:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a175:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a178:	e8 17 66 fe ff       	call   c0000794 <strlen>
c001a17d:	5a                   	pop    edx
c001a17e:	31 d2                	xor    edx,edx
c001a180:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a184:	51                   	push   ecx
c001a185:	55                   	push   ebp
c001a186:	52                   	push   edx
c001a187:	50                   	push   eax
c001a188:	57                   	push   edi
c001a189:	ff d3                	call   ebx
c001a18b:	83 c4 14             	add    esp,0x14
c001a18e:	57                   	push   edi
c001a18f:	e8 cc 93 ff ff       	call   c0013560 <File::close()>
c001a194:	83 c4 10             	add    esp,0x10
c001a197:	31 db                	xor    ebx,ebx
c001a199:	50                   	push   eax
c001a19a:	31 ed                	xor    ebp,ebp
c001a19c:	68 00 01 00 00       	push   0x100
c001a1a1:	6a 00                	push   0x0
c001a1a3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a1a7:	50                   	push   eax
c001a1a8:	e8 cb 65 fe ff       	call   c0000778 <memset>
c001a1ad:	58                   	pop    eax
c001a1ae:	5a                   	pop    edx
c001a1af:	6a 01                	push   0x1
c001a1b1:	57                   	push   edi
c001a1b2:	e8 4b 93 ff ff       	call   c0013502 <File::open(FileOpenMode)>
c001a1b7:	83 c4 10             	add    esp,0x10
c001a1ba:	83 ec 0c             	sub    esp,0xc
c001a1bd:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1bf:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1c3:	51                   	push   ecx
c001a1c4:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a1c8:	52                   	push   edx
c001a1c9:	6a 00                	push   0x0
c001a1cb:	6a 01                	push   0x1
c001a1cd:	57                   	push   edi
c001a1ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1d1:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a1d5:	83 c4 20             	add    esp,0x20
c001a1d8:	3c 0d                	cmp    al,0xd
c001a1da:	0f 84 12 01 00 00    	je     c001a2f2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1e0:	85 db                	test   ebx,ebx
c001a1e2:	0f 84 fd 00 00 00    	je     c001a2e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1e8:	3c 0a                	cmp    al,0xa
c001a1ea:	74 13                	je     c001a1ff <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1ec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1f1:	74 0c                	je     c001a1ff <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1f3:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a1f9:	0f 8e e6 00 00 00    	jle    c001a2e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1ff:	83 ec 0c             	sub    esp,0xc
c001a202:	8d 53 01             	lea    edx,[ebx+0x1]
c001a205:	29 dd                	sub    ebp,ebx
c001a207:	52                   	push   edx
c001a208:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a20c:	e8 2f 56 ff ff       	call   c000f840 <malloc>
c001a211:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a214:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a218:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a21b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a21f:	e8 1c 56 ff ff       	call   c000f840 <malloc>
c001a224:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a228:	83 c4 0c             	add    esp,0xc
c001a22b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a22f:	52                   	push   edx
c001a230:	6a 00                	push   0x0
c001a232:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a236:	e8 3d 65 fe ff       	call   c0000778 <memset>
c001a23b:	83 c4 0c             	add    esp,0xc
c001a23e:	53                   	push   ebx
c001a23f:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a243:	55                   	push   ebp
c001a244:	01 eb                	add    ebx,ebp
c001a246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a24a:	e8 f5 64 fe ff       	call   c0000744 <memcpy>
c001a24f:	83 c4 0c             	add    esp,0xc
c001a252:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a256:	51                   	push   ecx
c001a257:	6a 00                	push   0x0
c001a259:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a25d:	e8 16 65 fe ff       	call   c0000778 <memset>
c001a262:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a265:	e8 2a 65 fe ff       	call   c0000794 <strlen>
c001a26a:	83 c4 0c             	add    esp,0xc
c001a26d:	50                   	push   eax
c001a26e:	53                   	push   ebx
c001a26f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a273:	e8 cc 64 fe ff       	call   c0000744 <memcpy>
c001a278:	5b                   	pop    ebx
c001a279:	58                   	pop    eax
c001a27a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a27e:	68 91 b9 02 c0       	push   0xc002b991
c001a283:	e8 be 8c ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001a288:	8b 06                	mov    eax,DWORD PTR [esi]
c001a28a:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a28d:	40                   	inc    eax
c001a28e:	83 c4 10             	add    esp,0x10
c001a291:	89 06                	mov    DWORD PTR [esi],eax
c001a293:	85 d2                	test   edx,edx
c001a295:	75 0c                	jne    c001a2a3 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a297:	83 ec 0c             	sub    esp,0xc
c001a29a:	6a 08                	push   0x8
c001a29c:	e8 9f 55 ff ff       	call   c000f840 <malloc>
c001a2a1:	eb 0c                	jmp    c001a2af <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a2a3:	c1 e0 03             	shl    eax,0x3
c001a2a6:	51                   	push   ecx
c001a2a7:	51                   	push   ecx
c001a2a8:	50                   	push   eax
c001a2a9:	52                   	push   edx
c001a2aa:	e8 7d 55 ff ff       	call   c000f82c <realloc>
c001a2af:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a2b2:	83 c4 10             	add    esp,0x10
c001a2b5:	31 db                	xor    ebx,ebx
c001a2b7:	52                   	push   edx
c001a2b8:	6a 08                	push   0x8
c001a2ba:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a2be:	50                   	push   eax
c001a2bf:	8b 16                	mov    edx,DWORD PTR [esi]
c001a2c1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2c4:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a2c8:	50                   	push   eax
c001a2c9:	e8 76 64 fe ff       	call   c0000744 <memcpy>
c001a2ce:	83 c4 0c             	add    esp,0xc
c001a2d1:	68 00 01 00 00       	push   0x100
c001a2d6:	6a 00                	push   0x0
c001a2d8:	55                   	push   ebp
c001a2d9:	31 ed                	xor    ebp,ebp
c001a2db:	e8 98 64 fe ff       	call   c0000778 <memset>
c001a2e0:	83 c4 10             	add    esp,0x10
c001a2e3:	eb 0d                	jmp    c001a2f2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2e5:	3c 3d                	cmp    al,0x3d
c001a2e7:	74 07                	je     c001a2f0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a2e9:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a2ed:	45                   	inc    ebp
c001a2ee:	eb 02                	jmp    c001a2f2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2f0:	89 eb                	mov    ebx,ebp
c001a2f2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2f7:	0f 85 bd fe ff ff    	jne    c001a1ba <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a2fd:	50                   	push   eax
c001a2fe:	50                   	push   eax
c001a2ff:	ff 36                	push   DWORD PTR [esi]
c001a301:	68 9f b9 02 c0       	push   0xc002b99f
c001a306:	e8 3b 8c ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001a30b:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a311:	5b                   	pop    ebx
c001a312:	5e                   	pop    esi
c001a313:	5f                   	pop    edi
c001a314:	5d                   	pop    ebp
c001a315:	c3                   	ret    

c001a316 <EnvVarContainer::__loadSystem()>:
c001a316:	83 ec 10             	sub    esp,0x10
c001a319:	68 c0 d8 02 c0       	push   0xc002d8c0
c001a31e:	68 ca b9 02 c0       	push   0xc002b9ca
c001a323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a327:	e8 f4 fd ff ff       	call   c001a120 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a32c:	83 c4 1c             	add    esp,0x1c
c001a32f:	c3                   	ret    

c001a330 <EnvVarContainer::__loadUser()>:
c001a330:	c3                   	ret    
c001a331:	90                   	nop

c001a332 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a336:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a33c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a344:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a347:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a34b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a352:	90                   	nop
c001a353:	c3                   	ret    

c001a354 <EnvVarContainer::~EnvVarContainer()>:
c001a354:	83 ec 0c             	sub    esp,0xc
c001a357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a35b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a35e:	85 c0                	test   eax,eax
c001a360:	74 1d                	je     c001a37f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a366:	8b 00                	mov    eax,DWORD PTR [eax]
c001a368:	85 c0                	test   eax,eax
c001a36a:	74 13                	je     c001a37f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a370:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a373:	83 ec 0c             	sub    esp,0xc
c001a376:	50                   	push   eax
c001a377:	e8 d4 54 ff ff       	call   c000f850 <free>
c001a37c:	83 c4 10             	add    esp,0x10
c001a37f:	90                   	nop
c001a380:	83 c4 0c             	add    esp,0xc
c001a383:	c3                   	ret    

c001a384 <Krnl::getEnv(Process*, char const*)>:
c001a384:	53                   	push   ebx
c001a385:	83 ec 08             	sub    esp,0x8
c001a388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a38c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a390:	39 05 14 19 03 c0    	cmp    DWORD PTR ds:0xc0031914,eax
c001a396:	74 04                	je     c001a39c <Krnl::getEnv(Process*, char const*)+0x18>
c001a398:	85 c0                	test   eax,eax
c001a39a:	75 0b                	jne    c001a3a7 <Krnl::getEnv(Process*, char const*)+0x23>
c001a39c:	a1 f4 0e 03 c0       	mov    eax,ds:0xc0030ef4
c001a3a1:	85 c0                	test   eax,eax
c001a3a3:	75 19                	jne    c001a3be <Krnl::getEnv(Process*, char const*)+0x3a>
c001a3a5:	eb 27                	jmp    c001a3ce <Krnl::getEnv(Process*, char const*)+0x4a>
c001a3a7:	52                   	push   edx
c001a3a8:	52                   	push   edx
c001a3a9:	53                   	push   ebx
c001a3aa:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a3b0:	e8 5f fc ff ff       	call   c001a014 <EnvVarContainer::getEnv(char const*)>
c001a3b5:	83 c4 10             	add    esp,0x10
c001a3b8:	85 c0                	test   eax,eax
c001a3ba:	75 28                	jne    c001a3e4 <Krnl::getEnv(Process*, char const*)+0x60>
c001a3bc:	eb de                	jmp    c001a39c <Krnl::getEnv(Process*, char const*)+0x18>
c001a3be:	52                   	push   edx
c001a3bf:	52                   	push   edx
c001a3c0:	53                   	push   ebx
c001a3c1:	50                   	push   eax
c001a3c2:	e8 4d fc ff ff       	call   c001a014 <EnvVarContainer::getEnv(char const*)>
c001a3c7:	83 c4 10             	add    esp,0x10
c001a3ca:	85 c0                	test   eax,eax
c001a3cc:	75 16                	jne    c001a3e4 <Krnl::getEnv(Process*, char const*)+0x60>
c001a3ce:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a3d2:	a1 f8 0e 03 c0       	mov    eax,ds:0xc0030ef8
c001a3d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3db:	83 c4 08             	add    esp,0x8
c001a3de:	5b                   	pop    ebx
c001a3df:	e9 30 fc ff ff       	jmp    c001a014 <EnvVarContainer::getEnv(char const*)>
c001a3e4:	83 c4 08             	add    esp,0x8
c001a3e7:	5b                   	pop    ebx
c001a3e8:	c3                   	ret    

c001a3e9 <Krnl::setEnvSystem(char const*, char const*)>:
c001a3e9:	83 ec 10             	sub    esp,0x10
c001a3ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3f4:	ff 35 f8 0e 03 c0    	push   DWORD PTR ds:0xc0030ef8
c001a3fa:	e8 53 fc ff ff       	call   c001a052 <EnvVarContainer::setEnv(char const*, char const*)>
c001a3ff:	83 c4 1c             	add    esp,0x1c
c001a402:	c3                   	ret    

c001a403 <Krnl::setEnvUser(char const*, char const*)>:
c001a403:	a1 f4 0e 03 c0       	mov    eax,ds:0xc0030ef4
c001a408:	85 c0                	test   eax,eax
c001a40a:	74 15                	je     c001a421 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a40c:	83 ec 10             	sub    esp,0x10
c001a40f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a413:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a417:	50                   	push   eax
c001a418:	e8 35 fc ff ff       	call   c001a052 <EnvVarContainer::setEnv(char const*, char const*)>
c001a41d:	83 c4 1c             	add    esp,0x1c
c001a420:	c3                   	ret    
c001a421:	c3                   	ret    

c001a422 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a426:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a42c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a430:	e9 1d fc ff ff       	jmp    c001a052 <EnvVarContainer::setEnv(char const*, char const*)>

c001a435 <Krnl::deleteEnvSystem(char const*)>:
c001a435:	c3                   	ret    

c001a436 <Krnl::deleteEnvUser(char const*)>:
c001a436:	c3                   	ret    

c001a437 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a437:	c3                   	ret    

c001a438 <Krnl::newProcessEnv(Process*)>:
c001a438:	83 ec 28             	sub    esp,0x28
c001a43b:	6a 0c                	push   0xc
c001a43d:	e8 fe 53 ff ff       	call   c000f840 <malloc>
c001a442:	5a                   	pop    edx
c001a443:	59                   	pop    ecx
c001a444:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a448:	50                   	push   eax
c001a449:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a44d:	e8 e0 fe ff ff       	call   c001a332 <EnvVarContainer::EnvVarContainer(Process*)>
c001a452:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a456:	83 c4 2c             	add    esp,0x2c
c001a459:	c3                   	ret    

c001a45a <Krnl::copyProcessEnv(Process*, Process*)>:
c001a45a:	56                   	push   esi
c001a45b:	53                   	push   ebx
c001a45c:	83 ec 10             	sub    esp,0x10
c001a45f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a463:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a469:	6a 0c                	push   0xc
c001a46b:	e8 d0 53 ff ff       	call   c000f840 <malloc>
c001a470:	89 c3                	mov    ebx,eax
c001a472:	58                   	pop    eax
c001a473:	5a                   	pop    edx
c001a474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a478:	53                   	push   ebx
c001a479:	e8 b4 fe ff ff       	call   c001a332 <EnvVarContainer::EnvVarContainer(Process*)>
c001a47e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a480:	89 03                	mov    DWORD PTR [ebx],eax
c001a482:	c1 e0 03             	shl    eax,0x3
c001a485:	89 04 24             	mov    DWORD PTR [esp],eax
c001a488:	e8 b3 53 ff ff       	call   c000f840 <malloc>
c001a48d:	83 c4 0c             	add    esp,0xc
c001a490:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a493:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a495:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a49c:	52                   	push   edx
c001a49d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4a0:	50                   	push   eax
c001a4a1:	e8 9e 62 fe ff       	call   c0000744 <memcpy>
c001a4a6:	89 d8                	mov    eax,ebx
c001a4a8:	83 c4 14             	add    esp,0x14
c001a4ab:	5b                   	pop    ebx
c001a4ac:	5e                   	pop    esi
c001a4ad:	c3                   	ret    

c001a4ae <Krnl::loadSystemEnv()>:
c001a4ae:	53                   	push   ebx
c001a4af:	83 ec 14             	sub    esp,0x14
c001a4b2:	6a 0c                	push   0xc
c001a4b4:	e8 87 53 ff ff       	call   c000f840 <malloc>
c001a4b9:	89 c3                	mov    ebx,eax
c001a4bb:	58                   	pop    eax
c001a4bc:	5a                   	pop    edx
c001a4bd:	ff 35 14 19 03 c0    	push   DWORD PTR ds:0xc0031914
c001a4c3:	53                   	push   ebx
c001a4c4:	e8 69 fe ff ff       	call   c001a332 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4cc:	89 1d f8 0e 03 c0    	mov    DWORD PTR ds:0xc0030ef8,ebx
c001a4d2:	e8 3f fe ff ff       	call   c001a316 <EnvVarContainer::__loadSystem()>
c001a4d7:	83 c4 18             	add    esp,0x18
c001a4da:	5b                   	pop    ebx
c001a4db:	c3                   	ret    

c001a4dc <Krnl::loadUserEnv()>:
c001a4dc:	53                   	push   ebx
c001a4dd:	83 ec 14             	sub    esp,0x14
c001a4e0:	6a 0c                	push   0xc
c001a4e2:	e8 59 53 ff ff       	call   c000f840 <malloc>
c001a4e7:	89 c3                	mov    ebx,eax
c001a4e9:	58                   	pop    eax
c001a4ea:	5a                   	pop    edx
c001a4eb:	ff 35 14 19 03 c0    	push   DWORD PTR ds:0xc0031914
c001a4f1:	53                   	push   ebx
c001a4f2:	e8 3b fe ff ff       	call   c001a332 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4f7:	89 1d f4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ef4,ebx
c001a4fd:	83 c4 18             	add    esp,0x18
c001a500:	5b                   	pop    ebx
c001a501:	c3                   	ret    

c001a502 <Krnl::flushEnv()>:
c001a502:	c3                   	ret    

c001a503 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a503:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a507:	8b 15 f4 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ef4
c001a50d:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a513:	a1 f8 0e 03 c0       	mov    eax,ds:0xc0030ef8
c001a518:	8b 00                	mov    eax,DWORD PTR [eax]
c001a51a:	03 01                	add    eax,DWORD PTR [ecx]
c001a51c:	85 d2                	test   edx,edx
c001a51e:	74 02                	je     c001a522 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a520:	03 02                	add    eax,DWORD PTR [edx]
c001a522:	c3                   	ret    

c001a523 <Krnl::getProcessEnvPair(Process*, int)>:
c001a523:	57                   	push   edi
c001a524:	8b 0d f4 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ef4
c001a52a:	56                   	push   esi
c001a52b:	85 c9                	test   ecx,ecx
c001a52d:	53                   	push   ebx
c001a52e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a532:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a536:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a53c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a540:	8b 02                	mov    eax,DWORD PTR [edx]
c001a542:	75 47                	jne    c001a58b <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a544:	39 c3                	cmp    ebx,eax
c001a546:	7c 47                	jl     c001a58f <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a548:	8b 15 f8 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ef8
c001a54e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a550:	01 c1                	add    ecx,eax
c001a552:	39 d9                	cmp    ecx,ebx
c001a554:	7e 6c                	jle    c001a5c2 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a556:	51                   	push   ecx
c001a557:	89 d9                	mov    ecx,ebx
c001a559:	29 c1                	sub    ecx,eax
c001a55b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a55e:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a562:	53                   	push   ebx
c001a563:	68 ec b9 02 c0       	push   0xc002b9ec
c001a568:	e8 d9 89 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001a56d:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a573:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a575:	a1 f8 0e 03 c0       	mov    eax,ds:0xc0030ef8
c001a57a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a57d:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a581:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a584:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a587:	89 06                	mov    DWORD PTR [esi],eax
c001a589:	eb 51                	jmp    c001a5dc <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a58b:	39 c3                	cmp    ebx,eax
c001a58d:	7d 05                	jge    c001a594 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a58f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a592:	eb 20                	jmp    c001a5b4 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a594:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a596:	8d 14 07             	lea    edx,[edi+eax*1]
c001a599:	39 da                	cmp    edx,ebx
c001a59b:	7e 04                	jle    c001a5a1 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a59d:	29 c3                	sub    ebx,eax
c001a59f:	eb 10                	jmp    c001a5b1 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a5a1:	8b 0d f8 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ef8
c001a5a7:	03 11                	add    edx,DWORD PTR [ecx]
c001a5a9:	39 da                	cmp    edx,ebx
c001a5ab:	7e 15                	jle    c001a5c2 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5ad:	29 c3                	sub    ebx,eax
c001a5af:	29 fb                	sub    ebx,edi
c001a5b1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a5b4:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5b8:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5bb:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5be:	89 06                	mov    DWORD PTR [esi],eax
c001a5c0:	eb 1d                	jmp    c001a5df <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a5c2:	83 ec 0c             	sub    esp,0xc
c001a5c5:	68 00 ba 02 c0       	push   0xc002ba00
c001a5ca:	e8 18 00 00 00       	call   c001a5e7 <Krnl::panic(char const*)>
c001a5cf:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a5d5:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a5dc:	83 c4 10             	add    esp,0x10
c001a5df:	89 f0                	mov    eax,esi
c001a5e1:	5b                   	pop    ebx
c001a5e2:	5e                   	pop    esi
c001a5e3:	5f                   	pop    edi
c001a5e4:	c2 04 00             	ret    0x4

c001a5e7 <Krnl::panic(char const*)>:
c001a5e7:	55                   	push   ebp
c001a5e8:	89 e5                	mov    ebp,esp
c001a5ea:	53                   	push   ebx
c001a5eb:	83 ec 0c             	sub    esp,0xc
c001a5ee:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a5f1:	fa                   	cli    
c001a5f2:	c6 05 04 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f04,0x1
c001a5f9:	53                   	push   ebx
c001a5fa:	c6 05 c4 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d2c4,0x0
c001a601:	68 1a ba 02 c0       	push   0xc002ba1a
c001a606:	e8 3b 89 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001a60b:	58                   	pop    eax
c001a60c:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a611:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a617:	e8 35 67 ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c001a61c:	83 c4 0c             	add    esp,0xc
c001a61f:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a624:	6a 01                	push   0x1
c001a626:	6a 0f                	push   0xf
c001a628:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a62e:	e8 4f 61 ff ff       	call   c0010782 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a633:	58                   	pop    eax
c001a634:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a639:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a63f:	e8 ae 69 ff ff       	call   c0010ff2 <VgaText::clearScreen()>
c001a644:	58                   	pop    eax
c001a645:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a64a:	5a                   	pop    edx
c001a64b:	68 33 ba 02 c0       	push   0xc002ba33
c001a650:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a656:	e8 15 6b ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a65b:	59                   	pop    ecx
c001a65c:	58                   	pop    eax
c001a65d:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a662:	68 d8 ba 02 c0       	push   0xc002bad8
c001a667:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a66d:	e8 fe 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a672:	58                   	pop    eax
c001a673:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a678:	5a                   	pop    edx
c001a679:	68 4f ba 02 c0       	push   0xc002ba4f
c001a67e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a684:	e8 e7 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a689:	59                   	pop    ecx
c001a68a:	58                   	pop    eax
c001a68b:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a690:	53                   	push   ebx
c001a691:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a697:	e8 d4 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a69c:	58                   	pop    eax
c001a69d:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a6a2:	5a                   	pop    edx
c001a6a3:	68 6f ba 02 c0       	push   0xc002ba6f
c001a6a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ae:	e8 bd 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6b3:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c001a6b8:	83 c4 10             	add    esp,0x10
c001a6bb:	85 c0                	test   eax,eax
c001a6bd:	74 02                	je     c001a6c1 <Krnl::panic(char const*)+0xda>
c001a6bf:	ff d0                	call   eax
c001a6c1:	83 ec 0c             	sub    esp,0xc
c001a6c4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a6c7:	e8 fd 2f 00 00       	call   c001d6c9 <Thr::getDriverNameFromAddress(unsigned long)>
c001a6cc:	83 c4 10             	add    esp,0x10
c001a6cf:	89 c3                	mov    ebx,eax
c001a6d1:	85 c0                	test   eax,eax
c001a6d3:	0f 84 50 02 00 00    	je     c001a929 <Krnl::panic(char const*)+0x342>
c001a6d9:	83 ec 08             	sub    esp,0x8
c001a6dc:	8b 15 14 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031914
c001a6e2:	68 14 bb 02 c0       	push   0xc002bb14
c001a6e7:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a6ed:	e8 7e 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6f2:	58                   	pop    eax
c001a6f3:	5a                   	pop    edx
c001a6f4:	8b 15 14 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031914
c001a6fa:	68 4f ba 02 c0       	push   0xc002ba4f
c001a6ff:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a705:	e8 66 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a70a:	59                   	pop    ecx
c001a70b:	58                   	pop    eax
c001a70c:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a711:	53                   	push   ebx
c001a712:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a718:	e8 53 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a71d:	83 c4 10             	add    esp,0x10
c001a720:	83 ec 08             	sub    esp,0x8
c001a723:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a728:	68 6e ba 02 c0       	push   0xc002ba6e
c001a72d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a733:	e8 38 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a738:	58                   	pop    eax
c001a739:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a73e:	5a                   	pop    edx
c001a73f:	68 6c bb 02 c0       	push   0xc002bb6c
c001a744:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a74a:	e8 21 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a74f:	59                   	pop    ecx
c001a750:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a755:	5b                   	pop    ebx
c001a756:	68 ac bb 02 c0       	push   0xc002bbac
c001a75b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a761:	e8 0a 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a766:	58                   	pop    eax
c001a767:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a76c:	5a                   	pop    edx
c001a76d:	68 5a ba 02 c0       	push   0xc002ba5a
c001a772:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a778:	e8 f3 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a77d:	59                   	pop    ecx
c001a77e:	5b                   	pop    ebx
c001a77f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a782:	68 72 ba 02 c0       	push   0xc002ba72
c001a787:	e8 ba 87 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001a78c:	58                   	pop    eax
c001a78d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a790:	5a                   	pop    edx
c001a791:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a794:	68 7b ba 02 c0       	push   0xc002ba7b
c001a799:	e8 a8 87 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001a79e:	59                   	pop    ecx
c001a79f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7a2:	5b                   	pop    ebx
c001a7a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7a5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7a8:	68 84 ba 02 c0       	push   0xc002ba84
c001a7ad:	e8 94 87 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001a7b2:	58                   	pop    eax
c001a7b3:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a7b8:	5a                   	pop    edx
c001a7b9:	68 f0 bb 02 c0       	push   0xc002bbf0
c001a7be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7c4:	e8 a7 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a7c9:	59                   	pop    ecx
c001a7ca:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a7cf:	5b                   	pop    ebx
c001a7d0:	68 8d ba 02 c0       	push   0xc002ba8d
c001a7d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7db:	e8 90 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a7e0:	0f 20 c0             	mov    eax,cr0
c001a7e3:	5a                   	pop    edx
c001a7e4:	59                   	pop    ecx
c001a7e5:	50                   	push   eax
c001a7e6:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a7eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7f1:	e8 a0 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a7f6:	5b                   	pop    ebx
c001a7f7:	58                   	pop    eax
c001a7f8:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a7fd:	68 97 ba 02 c0       	push   0xc002ba97
c001a802:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a808:	e8 63 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a80d:	0f 20 d0             	mov    eax,cr2
c001a810:	5a                   	pop    edx
c001a811:	59                   	pop    ecx
c001a812:	50                   	push   eax
c001a813:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a818:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a81e:	e8 73 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a823:	5b                   	pop    ebx
c001a824:	58                   	pop    eax
c001a825:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a82a:	68 a1 ba 02 c0       	push   0xc002baa1
c001a82f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a835:	e8 36 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a83a:	0f 20 d8             	mov    eax,cr3
c001a83d:	5a                   	pop    edx
c001a83e:	59                   	pop    ecx
c001a83f:	50                   	push   eax
c001a840:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a845:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a84b:	e8 46 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a850:	5b                   	pop    ebx
c001a851:	58                   	pop    eax
c001a852:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a857:	68 b4 ba 02 c0       	push   0xc002bab4
c001a85c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a862:	e8 09 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a867:	0f 20 e0             	mov    eax,cr4
c001a86a:	5a                   	pop    edx
c001a86b:	59                   	pop    ecx
c001a86c:	50                   	push   eax
c001a86d:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a872:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a878:	e8 19 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a87d:	5b                   	pop    ebx
c001a87e:	58                   	pop    eax
c001a87f:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a884:	68 be ba 02 c0       	push   0xc002babe
c001a889:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a88f:	e8 dc 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a894:	5a                   	pop    edx
c001a895:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a89a:	59                   	pop    ecx
c001a89b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8a1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8a4:	50                   	push   eax
c001a8a5:	e8 ec 68 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a8aa:	5b                   	pop    ebx
c001a8ab:	58                   	pop    eax
c001a8ac:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a8b1:	68 d5 ba 02 c0       	push   0xc002bad5
c001a8b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8bc:	e8 af 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a8c1:	5a                   	pop    edx
c001a8c2:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a8c7:	59                   	pop    ecx
c001a8c8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8ce:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8d1:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8d4:	50                   	push   eax
c001a8d5:	e8 bc 68 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a8da:	5b                   	pop    ebx
c001a8db:	58                   	pop    eax
c001a8dc:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a8e1:	68 d5 ba 02 c0       	push   0xc002bad5
c001a8e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ec:	e8 7f 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a8f1:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a8f6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8f9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8ff:	8b 12                	mov    edx,DWORD PTR [edx]
c001a901:	59                   	pop    ecx
c001a902:	5b                   	pop    ebx
c001a903:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a906:	50                   	push   eax
c001a907:	e8 8a 68 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a90c:	83 c4 10             	add    esp,0x10
c001a90f:	b2 fe                	mov    dl,0xfe
c001a911:	e4 60                	in     al,0x60
c001a913:	3c 1c                	cmp    al,0x1c
c001a915:	74 04                	je     c001a91b <Krnl::panic(char const*)+0x334>
c001a917:	3c 5a                	cmp    al,0x5a
c001a919:	75 f6                	jne    c001a911 <Krnl::panic(char const*)+0x32a>
c001a91b:	e4 64                	in     al,0x64
c001a91d:	a8 02                	test   al,0x2
c001a91f:	75 fa                	jne    c001a91b <Krnl::panic(char const*)+0x334>
c001a921:	88 d0                	mov    al,dl
c001a923:	e6 64                	out    0x64,al
c001a925:	fa                   	cli    
c001a926:	f4                   	hlt    
c001a927:	eb e8                	jmp    c001a911 <Krnl::panic(char const*)+0x32a>
c001a929:	50                   	push   eax
c001a92a:	50                   	push   eax
c001a92b:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a930:	68 40 bb 02 c0       	push   0xc002bb40
c001a935:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a93b:	e8 30 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a940:	58                   	pop    eax
c001a941:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a946:	5a                   	pop    edx
c001a947:	68 4f ba 02 c0       	push   0xc002ba4f
c001a94c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a952:	e8 19 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a957:	59                   	pop    ecx
c001a958:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a95d:	5b                   	pop    ebx
c001a95e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a961:	83 c0 0c             	add    eax,0xc
c001a964:	50                   	push   eax
c001a965:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a96a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a970:	e8 fb 67 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a975:	83 c4 10             	add    esp,0x10
c001a978:	e9 a3 fd ff ff       	jmp    c001a720 <Krnl::panic(char const*)+0x139>

c001a97d <Net::switchEndian16(unsigned short)>:
c001a97d:	83 ec 04             	sub    esp,0x4
c001a980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a984:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a988:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a98c:	c1 f8 08             	sar    eax,0x8
c001a98f:	89 c2                	mov    edx,eax
c001a991:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a995:	c1 e0 08             	shl    eax,0x8
c001a998:	09 d0                	or     eax,edx
c001a99a:	83 c4 04             	add    esp,0x4
c001a99d:	c3                   	ret    

c001a99e <Net::switchEndian32(unsigned int)>:
c001a99e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9a2:	c1 e8 18             	shr    eax,0x18
c001a9a5:	89 c2                	mov    edx,eax
c001a9a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ab:	c1 e0 08             	shl    eax,0x8
c001a9ae:	25 00 00 ff 00       	and    eax,0xff0000
c001a9b3:	09 c2                	or     edx,eax
c001a9b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9b9:	c1 e8 08             	shr    eax,0x8
c001a9bc:	25 00 ff 00 00       	and    eax,0xff00
c001a9c1:	09 c2                	or     edx,eax
c001a9c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c7:	c1 e0 18             	shl    eax,0x18
c001a9ca:	09 d0                	or     eax,edx
c001a9cc:	c3                   	ret    

c001a9cd <Net::crc32Calc(unsigned char*, int)>:
c001a9cd:	83 ec 10             	sub    esp,0x10
c001a9d0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a9d5:	75 07                	jne    c001a9de <Net::crc32Calc(unsigned char*, int)+0x11>
c001a9d7:	b8 00 00 00 00       	mov    eax,0x0
c001a9dc:	eb 7c                	jmp    c001aa5a <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9de:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a9e3:	7f 07                	jg     c001a9ec <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a9e5:	b8 00 00 00 00       	mov    eax,0x0
c001a9ea:	eb 6e                	jmp    c001aa5a <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9ec:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a9f4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a9fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa00:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa04:	7d 4e                	jge    c001aa54 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa0e:	01 d0                	add    eax,edx
c001aa10:	8a 00                	mov    al,BYTE PTR [eax]
c001aa12:	0f b6 c0             	movzx  eax,al
c001aa15:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa19:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa21:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa26:	7f 26                	jg     c001aa4e <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa2c:	83 e0 01             	and    eax,0x1
c001aa2f:	74 0d                	je     c001aa3e <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa35:	d1 e8                	shr    eax,1
c001aa37:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa3c:	eb 06                	jmp    c001aa44 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa42:	d1 e8                	shr    eax,1
c001aa44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa48:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa4c:	eb d3                	jmp    c001aa21 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa4e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa52:	eb a8                	jmp    c001a9fc <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa58:	f7 d0                	not    eax
c001aa5a:	83 c4 10             	add    esp,0x10
c001aa5d:	c3                   	ret    

c001aa5e <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa5e:	83 ec 1c             	sub    esp,0x1c
c001aa61:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa71:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa76:	7f 14                	jg     c001aa8c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa78:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa7c:	8d 50 01             	lea    edx,[eax+0x1]
c001aa7f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa83:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa86:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa8a:	eb e5                	jmp    c001aa71 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aa8c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa90:	8d 50 01             	lea    edx,[eax+0x1]
c001aa93:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa97:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aa9a:	83 ec 04             	sub    esp,0x4
c001aa9d:	6a 06                	push   0x6
c001aa9f:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aaa3:	50                   	push   eax
c001aaa4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aaa8:	e8 97 5c fe ff       	call   c0000744 <memcpy>
c001aaad:	83 c4 10             	add    esp,0x10
c001aab0:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aab5:	83 ec 04             	sub    esp,0x4
c001aab8:	6a 06                	push   0x6
c001aaba:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aabe:	50                   	push   eax
c001aabf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aac3:	e8 7c 5c fe ff       	call   c0000744 <memcpy>
c001aac8:	83 c4 10             	add    esp,0x10
c001aacb:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aad0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aad4:	0f b7 c0             	movzx  eax,ax
c001aad7:	c1 f8 08             	sar    eax,0x8
c001aada:	89 c1                	mov    ecx,eax
c001aadc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aae0:	8d 50 01             	lea    edx,[eax+0x1]
c001aae3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aae7:	88 ca                	mov    dl,cl
c001aae9:	88 10                	mov    BYTE PTR [eax],dl
c001aaeb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aaef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaf3:	8d 48 01             	lea    ecx,[eax+0x1]
c001aaf6:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aafa:	88 10                	mov    BYTE PTR [eax],dl
c001aafc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab04:	83 ec 04             	sub    esp,0x4
c001ab07:	52                   	push   edx
c001ab08:	50                   	push   eax
c001ab09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab0d:	e8 32 5c fe ff       	call   c0000744 <memcpy>
c001ab12:	83 c4 10             	add    esp,0x10
c001ab15:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab19:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab21:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab25:	83 ec 08             	sub    esp,0x8
c001ab28:	50                   	push   eax
c001ab29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab2d:	e8 9b fe ff ff       	call   c001a9cd <Net::crc32Calc(unsigned char*, int)>
c001ab32:	83 c4 10             	add    esp,0x10
c001ab35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab3d:	c1 e8 18             	shr    eax,0x18
c001ab40:	89 c1                	mov    ecx,eax
c001ab42:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab46:	8d 50 01             	lea    edx,[eax+0x1]
c001ab49:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab4d:	88 ca                	mov    dl,cl
c001ab4f:	88 10                	mov    BYTE PTR [eax],dl
c001ab51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab55:	c1 e8 10             	shr    eax,0x10
c001ab58:	89 c1                	mov    ecx,eax
c001ab5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab5e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab61:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab65:	88 ca                	mov    dl,cl
c001ab67:	88 10                	mov    BYTE PTR [eax],dl
c001ab69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab6d:	c1 e8 08             	shr    eax,0x8
c001ab70:	89 c1                	mov    ecx,eax
c001ab72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab76:	8d 50 01             	lea    edx,[eax+0x1]
c001ab79:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab7d:	88 ca                	mov    dl,cl
c001ab7f:	88 10                	mov    BYTE PTR [eax],dl
c001ab81:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab85:	8d 50 01             	lea    edx,[eax+0x1]
c001ab88:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab90:	88 10                	mov    BYTE PTR [eax],dl
c001ab92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab96:	83 c4 1c             	add    esp,0x1c
c001ab99:	c3                   	ret    

c001ab9a <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ab9a:	83 ec 2c             	sub    esp,0x2c
c001ab9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aba1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aba5:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001abaa:	83 ec 04             	sub    esp,0x4
c001abad:	6a 06                	push   0x6
c001abaf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abb7:	83 c0 0e             	add    eax,0xe
c001abba:	50                   	push   eax
c001abbb:	e8 84 5b fe ff       	call   c0000744 <memcpy>
c001abc0:	83 c4 10             	add    esp,0x10
c001abc3:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abc8:	83 ec 04             	sub    esp,0x4
c001abcb:	6a 06                	push   0x6
c001abcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abd1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abd5:	83 c0 08             	add    eax,0x8
c001abd8:	50                   	push   eax
c001abd9:	e8 66 5b fe ff       	call   c0000744 <memcpy>
c001abde:	83 c4 10             	add    esp,0x10
c001abe1:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abe6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abea:	8d 50 01             	lea    edx,[eax+0x1]
c001abed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abf1:	8a 00                	mov    al,BYTE PTR [eax]
c001abf3:	0f b6 c0             	movzx  eax,al
c001abf6:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001abfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abff:	8d 50 01             	lea    edx,[eax+0x1]
c001ac02:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac06:	8a 00                	mov    al,BYTE PTR [eax]
c001ac08:	0f b6 c0             	movzx  eax,al
c001ac0b:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac10:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac15:	c1 e0 08             	shl    eax,0x8
c001ac18:	89 c2                	mov    edx,eax
c001ac1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac1e:	09 d0                	or     eax,edx
c001ac20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac24:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac28:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac2d:	75 3a                	jne    c001ac69 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac33:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac36:	66 3d dc 05          	cmp    ax,0x5dc
c001ac3a:	77 10                	ja     c001ac4c <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac40:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac43:	0f b7 c0             	movzx  eax,ax
c001ac46:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac4a:	eb 1d                	jmp    c001ac69 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac4c:	83 ec 0c             	sub    esp,0xc
c001ac4f:	68 18 bc 02 c0       	push   0xc002bc18
c001ac54:	e8 ed 82 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001ac59:	83 c4 10             	add    esp,0x10
c001ac5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac60:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac64:	e9 c0 00 00 00       	jmp    c001ad29 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac69:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac71:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac73:	83 ec 04             	sub    esp,0x4
c001ac76:	52                   	push   edx
c001ac77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac7b:	50                   	push   eax
c001ac7c:	e8 c3 5a fe ff       	call   c0000744 <memcpy>
c001ac81:	83 c4 10             	add    esp,0x10
c001ac84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac88:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ac8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac90:	8d 50 01             	lea    edx,[eax+0x1]
c001ac93:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac97:	8a 00                	mov    al,BYTE PTR [eax]
c001ac99:	0f b6 c0             	movzx  eax,al
c001ac9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aca0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aca4:	8d 50 01             	lea    edx,[eax+0x1]
c001aca7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acab:	8a 00                	mov    al,BYTE PTR [eax]
c001acad:	0f b6 c0             	movzx  eax,al
c001acb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001acb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acb8:	8d 50 01             	lea    edx,[eax+0x1]
c001acbb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acbf:	8a 00                	mov    al,BYTE PTR [eax]
c001acc1:	0f b6 c0             	movzx  eax,al
c001acc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001accc:	8d 50 01             	lea    edx,[eax+0x1]
c001accf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acd3:	8a 00                	mov    al,BYTE PTR [eax]
c001acd5:	0f b6 c0             	movzx  eax,al
c001acd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acdc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ace0:	c1 e0 18             	shl    eax,0x18
c001ace3:	89 c2                	mov    edx,eax
c001ace5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ace9:	c1 e0 10             	shl    eax,0x10
c001acec:	09 c2                	or     edx,eax
c001acee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acf2:	c1 e0 08             	shl    eax,0x8
c001acf5:	09 d0                	or     eax,edx
c001acf7:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001acfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad03:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad07:	83 e8 04             	sub    eax,0x4
c001ad0a:	83 ec 08             	sub    esp,0x8
c001ad0d:	50                   	push   eax
c001ad0e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad12:	e8 b6 fc ff ff       	call   c001a9cd <Net::crc32Calc(unsigned char*, int)>
c001ad17:	83 c4 10             	add    esp,0x10
c001ad1a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad1e:	0f 94 c2             	sete   dl
c001ad21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad25:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad28:	90                   	nop
c001ad29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad2d:	83 c4 2c             	add    esp,0x2c
c001ad30:	c2 04 00             	ret    0x4

c001ad33 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad33:	55                   	push   ebp
c001ad34:	57                   	push   edi
c001ad35:	56                   	push   esi
c001ad36:	53                   	push   ebx
c001ad37:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad3d:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad44:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad46:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad49:	80 fb 40             	cmp    bl,0x40
c001ad4c:	75 1b                	jne    c001ad69 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad4e:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad50:	84 d2                	test   dl,dl
c001ad52:	0f 84 f1 00 00 00    	je     c001ae49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad58:	8d 46 01             	lea    eax,[esi+0x1]
c001ad5b:	80 fa 3a             	cmp    dl,0x3a
c001ad5e:	74 04                	je     c001ad64 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad60:	89 c6                	mov    esi,eax
c001ad62:	eb ea                	jmp    c001ad4e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad64:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad67:	89 c6                	mov    esi,eax
c001ad69:	50                   	push   eax
c001ad6a:	6a 40                	push   0x40
c001ad6c:	6a 00                	push   0x0
c001ad6e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad72:	50                   	push   eax
c001ad73:	e8 00 5a fe ff       	call   c0000778 <memset>
c001ad78:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad7f:	31 c0                	xor    eax,eax
c001ad81:	83 c4 10             	add    esp,0x10
c001ad84:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad86:	84 c9                	test   cl,cl
c001ad88:	0f 84 bb 00 00 00    	je     c001ae49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad8e:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad93:	0f 8f b0 00 00 00    	jg     c001ae49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad99:	80 f9 0a             	cmp    cl,0xa
c001ad9c:	0f 85 98 00 00 00    	jne    c001ae3a <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ada2:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ada7:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001adab:	a8 df                	test   al,0xdf
c001adad:	0f 94 c1             	sete   cl
c001adb0:	3c 23                	cmp    al,0x23
c001adb2:	0f 94 c2             	sete   dl
c001adb5:	08 d1                	or     cl,dl
c001adb7:	75 4a                	jne    c001ae03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adb9:	8d 50 f7             	lea    edx,[eax-0x9]
c001adbc:	80 fa 01             	cmp    dl,0x1
c001adbf:	76 42                	jbe    c001ae03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adc1:	3c 5b                	cmp    al,0x5b
c001adc3:	75 42                	jne    c001ae07 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001adc5:	80 fb 40             	cmp    bl,0x40
c001adc8:	75 39                	jne    c001ae03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adca:	83 ec 0c             	sub    esp,0xc
c001adcd:	8d 54 24 65          	lea    edx,[esp+0x65]
c001add1:	52                   	push   edx
c001add2:	e8 bd 59 fe ff       	call   c0000794 <strlen>
c001add7:	83 c4 10             	add    esp,0x10
c001adda:	83 f8 3f             	cmp    eax,0x3f
c001addd:	77 6a                	ja     c001ae49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001addf:	50                   	push   eax
c001ade0:	50                   	push   eax
c001ade1:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ade5:	52                   	push   edx
c001ade6:	8d 54 24 24          	lea    edx,[esp+0x24]
c001adea:	52                   	push   edx
c001adeb:	e8 44 5a fe ff       	call   c0000834 <strcpy>
c001adf0:	58                   	pop    eax
c001adf1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001adf5:	52                   	push   edx
c001adf6:	e8 99 59 fe ff       	call   c0000794 <strlen>
c001adfb:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae00:	83 c4 10             	add    esp,0x10
c001ae03:	31 d2                	xor    edx,edx
c001ae05:	eb 3a                	jmp    c001ae41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae07:	80 fb 40             	cmp    bl,0x40
c001ae0a:	74 06                	je     c001ae12 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae0c:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae10:	eb 20                	jmp    c001ae32 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae12:	50                   	push   eax
c001ae13:	50                   	push   eax
c001ae14:	55                   	push   ebp
c001ae15:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae19:	50                   	push   eax
c001ae1a:	e8 a1 5a fe ff       	call   c00008c0 <strcmp>
c001ae1f:	83 c4 10             	add    esp,0x10
c001ae22:	85 c0                	test   eax,eax
c001ae24:	75 dd                	jne    c001ae03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae26:	eb e4                	jmp    c001ae0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae28:	8d 50 01             	lea    edx,[eax+0x1]
c001ae2b:	80 f9 3d             	cmp    cl,0x3d
c001ae2e:	74 1d                	je     c001ae4d <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae30:	89 d0                	mov    eax,edx
c001ae32:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae34:	84 c9                	test   cl,cl
c001ae36:	75 f0                	jne    c001ae28 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae38:	eb 0f                	jmp    c001ae49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae3a:	8d 50 01             	lea    edx,[eax+0x1]
c001ae3d:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae41:	47                   	inc    edi
c001ae42:	89 d0                	mov    eax,edx
c001ae44:	e9 3b ff ff ff       	jmp    c001ad84 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae49:	31 c0                	xor    eax,eax
c001ae4b:	eb 33                	jmp    c001ae80 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae51:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae54:	50                   	push   eax
c001ae55:	50                   	push   eax
c001ae56:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae5a:	50                   	push   eax
c001ae5b:	56                   	push   esi
c001ae5c:	e8 5f 5a fe ff       	call   c00008c0 <strcmp>
c001ae61:	83 c4 10             	add    esp,0x10
c001ae64:	85 c0                	test   eax,eax
c001ae66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae6a:	75 97                	jne    c001ae03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae6c:	51                   	push   ecx
c001ae6d:	51                   	push   ecx
c001ae6e:	52                   	push   edx
c001ae6f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae76:	e8 b9 59 fe ff       	call   c0000834 <strcpy>
c001ae7b:	83 c4 10             	add    esp,0x10
c001ae7e:	b0 01                	mov    al,0x1
c001ae80:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae86:	5b                   	pop    ebx
c001ae87:	5e                   	pop    esi
c001ae88:	5f                   	pop    edi
c001ae89:	5d                   	pop    ebp
c001ae8a:	c3                   	ret    

c001ae8b <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae8b:	57                   	push   edi
c001ae8c:	56                   	push   esi
c001ae8d:	53                   	push   ebx
c001ae8e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae94:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae9b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aea2:	53                   	push   ebx
c001aea3:	e8 ec 58 fe ff       	call   c0000794 <strlen>
c001aea8:	89 34 24             	mov    DWORD PTR [esp],esi
c001aeab:	89 c7                	mov    edi,eax
c001aead:	e8 e2 58 fe ff       	call   c0000794 <strlen>
c001aeb2:	83 c4 10             	add    esp,0x10
c001aeb5:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aeb9:	3d ff 00 00 00       	cmp    eax,0xff
c001aebe:	0f 87 d3 00 00 00    	ja     c001af97 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aec4:	57                   	push   edi
c001aec5:	57                   	push   edi
c001aec6:	56                   	push   esi
c001aec7:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aecb:	56                   	push   esi
c001aecc:	e8 63 59 fe ff       	call   c0000834 <strcpy>
c001aed1:	58                   	pop    eax
c001aed2:	5a                   	pop    edx
c001aed3:	68 61 c1 02 c0       	push   0xc002c161
c001aed8:	56                   	push   esi
c001aed9:	e8 96 5a fe ff       	call   c0000974 <strcat>
c001aede:	59                   	pop    ecx
c001aedf:	5f                   	pop    edi
c001aee0:	53                   	push   ebx
c001aee1:	56                   	push   esi
c001aee2:	e8 8d 5a fe ff       	call   c0000974 <strcat>
c001aee7:	58                   	pop    eax
c001aee8:	5a                   	pop    edx
c001aee9:	68 64 bc 02 c0       	push   0xc002bc64
c001aeee:	56                   	push   esi
c001aeef:	e8 80 5a fe ff       	call   c0000974 <strcat>
c001aef4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aefb:	e8 40 49 ff ff       	call   c000f840 <malloc>
c001af00:	83 c4 0c             	add    esp,0xc
c001af03:	89 c3                	mov    ebx,eax
c001af05:	ff 35 14 19 03 c0    	push   DWORD PTR ds:0xc0031914
c001af0b:	56                   	push   esi
c001af0c:	50                   	push   eax
c001af0d:	e8 8c 85 ff ff       	call   c001349e <File::File(char const*, Process*)>
c001af12:	83 c4 10             	add    esp,0x10
c001af15:	85 db                	test   ebx,ebx
c001af17:	74 7e                	je     c001af97 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af19:	51                   	push   ecx
c001af1a:	51                   	push   ecx
c001af1b:	6a 01                	push   0x1
c001af1d:	53                   	push   ebx
c001af1e:	e8 df 85 ff ff       	call   c0013502 <File::open(FileOpenMode)>
c001af23:	83 c4 10             	add    esp,0x10
c001af26:	85 c0                	test   eax,eax
c001af28:	74 08                	je     c001af32 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af2a:	83 ec 0c             	sub    esp,0xc
c001af2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af2f:	53                   	push   ebx
c001af30:	eb 5f                	jmp    c001af91 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af32:	52                   	push   edx
c001af33:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af37:	50                   	push   eax
c001af38:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af3c:	50                   	push   eax
c001af3d:	53                   	push   ebx
c001af3e:	e8 6b 88 ff ff       	call   c00137ae <File::stat(unsigned long long*, bool*)>
c001af43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af47:	83 c4 10             	add    esp,0x10
c001af4a:	89 c1                	mov    ecx,eax
c001af4c:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af50:	74 31                	je     c001af83 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af52:	83 ec 0c             	sub    esp,0xc
c001af55:	50                   	push   eax
c001af56:	e8 e5 48 ff ff       	call   c000f840 <malloc>
c001af5b:	89 c6                	mov    esi,eax
c001af5d:	58                   	pop    eax
c001af5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af60:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af64:	52                   	push   edx
c001af65:	56                   	push   esi
c001af66:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af6a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af6e:	53                   	push   ebx
c001af6f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af72:	83 c4 20             	add    esp,0x20
c001af75:	85 c0                	test   eax,eax
c001af77:	75 0a                	jne    c001af83 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af7d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af81:	74 18                	je     c001af9b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af83:	83 ec 0c             	sub    esp,0xc
c001af86:	53                   	push   ebx
c001af87:	e8 d4 85 ff ff       	call   c0013560 <File::close()>
c001af8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af91:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af94:	83 c4 10             	add    esp,0x10
c001af97:	31 c0                	xor    eax,eax
c001af99:	eb 3b                	jmp    c001afd6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af9b:	83 ec 0c             	sub    esp,0xc
c001af9e:	53                   	push   ebx
c001af9f:	e8 bc 85 ff ff       	call   c0013560 <File::close()>
c001afa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afa6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afa9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afac:	83 c4 0c             	add    esp,0xc
c001afaf:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afb6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afbd:	56                   	push   esi
c001afbe:	e8 70 fd ff ff       	call   c001ad33 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001afc3:	89 34 24             	mov    DWORD PTR [esp],esi
c001afc6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001afca:	e8 81 48 ff ff       	call   c000f850 <free>
c001afcf:	83 c4 10             	add    esp,0x10
c001afd2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001afd6:	81 c4 20 01 00 00    	add    esp,0x120
c001afdc:	5b                   	pop    ebx
c001afdd:	5e                   	pop    esi
c001afde:	5f                   	pop    edi
c001afdf:	c3                   	ret    

c001afe0 <Reg::getLine(char*, char*, char*)>:
c001afe0:	57                   	push   edi
c001afe1:	56                   	push   esi
c001afe2:	53                   	push   ebx
c001afe3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afe7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001afeb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001afef:	57                   	push   edi
c001aff0:	56                   	push   esi
c001aff1:	53                   	push   ebx
c001aff2:	68 69 bc 02 c0       	push   0xc002bc69
c001aff7:	e8 8f fe ff ff       	call   c001ae8b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001affc:	83 c4 10             	add    esp,0x10
c001afff:	84 c0                	test   al,al
c001b001:	75 10                	jne    c001b013 <Reg::getLine(char*, char*, char*)+0x33>
c001b003:	57                   	push   edi
c001b004:	56                   	push   esi
c001b005:	53                   	push   ebx
c001b006:	68 8e bc 02 c0       	push   0xc002bc8e
c001b00b:	e8 7b fe ff ff       	call   c001ae8b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b010:	83 c4 10             	add    esp,0x10
c001b013:	5b                   	pop    ebx
c001b014:	5e                   	pop    esi
c001b015:	5f                   	pop    edi
c001b016:	c3                   	ret    

c001b017 <Reg::readInt(char*, char*, int*)>:
c001b017:	55                   	push   ebp
c001b018:	57                   	push   edi
c001b019:	56                   	push   esi
c001b01a:	53                   	push   ebx
c001b01b:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b021:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b025:	57                   	push   edi
c001b026:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b02d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b034:	e8 a7 ff ff ff       	call   c001afe0 <Reg::getLine(char*, char*, char*)>
c001b039:	83 c4 10             	add    esp,0x10
c001b03c:	84 c0                	test   al,al
c001b03e:	0f 84 b3 00 00 00    	je     c001b0f7 <Reg::readInt(char*, char*, int*)+0xe0>
c001b044:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b048:	80 fa 2b             	cmp    dl,0x2b
c001b04b:	74 0c                	je     c001b059 <Reg::readInt(char*, char*, int*)+0x42>
c001b04d:	80 fa 2d             	cmp    dl,0x2d
c001b050:	75 0e                	jne    c001b060 <Reg::readInt(char*, char*, int*)+0x49>
c001b052:	ba 01 00 00 00       	mov    edx,0x1
c001b057:	eb 0b                	jmp    c001b064 <Reg::readInt(char*, char*, int*)+0x4d>
c001b059:	ba 01 00 00 00       	mov    edx,0x1
c001b05e:	eb 02                	jmp    c001b062 <Reg::readInt(char*, char*, int*)+0x4b>
c001b060:	31 d2                	xor    edx,edx
c001b062:	31 c0                	xor    eax,eax
c001b064:	be 0a 00 00 00       	mov    esi,0xa
c001b069:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b06e:	75 20                	jne    c001b090 <Reg::readInt(char*, char*, int*)+0x79>
c001b070:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b074:	80 f9 78             	cmp    cl,0x78
c001b077:	75 0a                	jne    c001b083 <Reg::readInt(char*, char*, int*)+0x6c>
c001b079:	83 c2 02             	add    edx,0x2
c001b07c:	be 10 00 00 00       	mov    esi,0x10
c001b081:	eb 0d                	jmp    c001b090 <Reg::readInt(char*, char*, int*)+0x79>
c001b083:	80 f9 62             	cmp    cl,0x62
c001b086:	75 08                	jne    c001b090 <Reg::readInt(char*, char*, int*)+0x79>
c001b088:	83 c2 02             	add    edx,0x2
c001b08b:	be 02 00 00 00       	mov    esi,0x2
c001b090:	01 d7                	add    edi,edx
c001b092:	31 d2                	xor    edx,edx
c001b094:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b096:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b09a:	80 fb 0d             	cmp    bl,0xd
c001b09d:	0f 94 c3             	sete   bl
c001b0a0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b0a5:	0f 94 c1             	sete   cl
c001b0a8:	08 cb                	or     bl,cl
c001b0aa:	75 3a                	jne    c001b0e6 <Reg::readInt(char*, char*, int*)+0xcf>
c001b0ac:	0f af d6             	imul   edx,esi
c001b0af:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b0b4:	83 fe 10             	cmp    esi,0x10
c001b0b7:	75 26                	jne    c001b0df <Reg::readInt(char*, char*, int*)+0xc8>
c001b0b9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0bd:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b0c0:	89 e9                	mov    ecx,ebp
c001b0c2:	80 f9 05             	cmp    cl,0x5
c001b0c5:	77 06                	ja     c001b0cd <Reg::readInt(char*, char*, int*)+0xb6>
c001b0c7:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b0cb:	eb 16                	jmp    c001b0e3 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0cd:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0d1:	83 e9 61             	sub    ecx,0x61
c001b0d4:	80 f9 05             	cmp    cl,0x5
c001b0d7:	77 06                	ja     c001b0df <Reg::readInt(char*, char*, int*)+0xc8>
c001b0d9:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b0dd:	eb 04                	jmp    c001b0e3 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0df:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b0e3:	47                   	inc    edi
c001b0e4:	eb ae                	jmp    c001b094 <Reg::readInt(char*, char*, int*)+0x7d>
c001b0e6:	84 c0                	test   al,al
c001b0e8:	74 02                	je     c001b0ec <Reg::readInt(char*, char*, int*)+0xd5>
c001b0ea:	f7 da                	neg    edx
c001b0ec:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b0f3:	89 10                	mov    DWORD PTR [eax],edx
c001b0f5:	88 d8                	mov    al,bl
c001b0f7:	81 c4 ec 00 00 00    	add    esp,0xec
c001b0fd:	5b                   	pop    ebx
c001b0fe:	5e                   	pop    esi
c001b0ff:	5f                   	pop    edi
c001b100:	5d                   	pop    ebp
c001b101:	c3                   	ret    

c001b102 <Reg::readString(char*, char*, char*, int)>:
c001b102:	57                   	push   edi
c001b103:	56                   	push   esi
c001b104:	53                   	push   ebx
c001b105:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b10b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b112:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b116:	57                   	push   edi
c001b117:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b11e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b125:	e8 b6 fe ff ff       	call   c001afe0 <Reg::getLine(char*, char*, char*)>
c001b12a:	83 c4 10             	add    esp,0x10
c001b12d:	89 c6                	mov    esi,eax
c001b12f:	84 c0                	test   al,al
c001b131:	74 44                	je     c001b177 <Reg::readString(char*, char*, char*, int)+0x75>
c001b133:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b13a:	31 c0                	xor    eax,eax
c001b13c:	4a                   	dec    edx
c001b13d:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b140:	84 c9                	test   cl,cl
c001b142:	74 0f                	je     c001b153 <Reg::readString(char*, char*, char*, int)+0x51>
c001b144:	39 c2                	cmp    edx,eax
c001b146:	7e 0b                	jle    c001b153 <Reg::readString(char*, char*, char*, int)+0x51>
c001b148:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b14b:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b150:	40                   	inc    eax
c001b151:	eb ea                	jmp    c001b13d <Reg::readString(char*, char*, char*, int)+0x3b>
c001b153:	83 ec 0c             	sub    esp,0xc
c001b156:	53                   	push   ebx
c001b157:	e8 38 56 fe ff       	call   c0000794 <strlen>
c001b15c:	83 c4 10             	add    esp,0x10
c001b15f:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b164:	75 11                	jne    c001b177 <Reg::readString(char*, char*, char*, int)+0x75>
c001b166:	83 ec 0c             	sub    esp,0xc
c001b169:	53                   	push   ebx
c001b16a:	e8 25 56 fe ff       	call   c0000794 <strlen>
c001b16f:	83 c4 10             	add    esp,0x10
c001b172:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b177:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b17d:	89 f0                	mov    eax,esi
c001b17f:	5b                   	pop    ebx
c001b180:	5e                   	pop    esi
c001b181:	5f                   	pop    edi
c001b182:	c3                   	ret    

c001b183 <Reg::readBool(char*, char*, bool*)>:
c001b183:	83 ec 20             	sub    esp,0x20
c001b186:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b18a:	50                   	push   eax
c001b18b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b18f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b193:	e8 7f fe ff ff       	call   c001b017 <Reg::readInt(char*, char*, int*)>
c001b198:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b19d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b1a1:	0f 95 02             	setne  BYTE PTR [edx]
c001b1a4:	83 c4 2c             	add    esp,0x2c
c001b1a7:	c3                   	ret    

c001b1a8 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b1a8:	53                   	push   ebx
c001b1a9:	83 ec 1c             	sub    esp,0x1c
c001b1ac:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b1b0:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b1b4:	50                   	push   eax
c001b1b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1bd:	e8 c1 ff ff ff       	call   c001b183 <Reg::readBool(char*, char*, bool*)>
c001b1c2:	83 c4 10             	add    esp,0x10
c001b1c5:	84 c0                	test   al,al
c001b1c7:	74 04                	je     c001b1cd <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b1c9:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b1cd:	88 d8                	mov    al,bl
c001b1cf:	83 c4 18             	add    esp,0x18
c001b1d2:	5b                   	pop    ebx
c001b1d3:	c3                   	ret    

c001b1d4 <Reg::readIntWithDefault(char*, char*, int)>:
c001b1d4:	53                   	push   ebx
c001b1d5:	83 ec 1c             	sub    esp,0x1c
c001b1d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1dc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1e0:	50                   	push   eax
c001b1e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1e9:	e8 29 fe ff ff       	call   c001b017 <Reg::readInt(char*, char*, int*)>
c001b1ee:	83 c4 10             	add    esp,0x10
c001b1f1:	84 c0                	test   al,al
c001b1f3:	74 04                	je     c001b1f9 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b1f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b1f9:	89 d8                	mov    eax,ebx
c001b1fb:	83 c4 18             	add    esp,0x18
c001b1fe:	5b                   	pop    ebx
c001b1ff:	c3                   	ret    

c001b200 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b200:	57                   	push   edi
c001b201:	56                   	push   esi
c001b202:	53                   	push   ebx
c001b203:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b207:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b20b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b20f:	56                   	push   esi
c001b210:	53                   	push   ebx
c001b211:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b215:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b219:	e8 e4 fe ff ff       	call   c001b102 <Reg::readString(char*, char*, char*, int)>
c001b21e:	83 c4 10             	add    esp,0x10
c001b221:	84 c0                	test   al,al
c001b223:	75 1b                	jne    c001b240 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b225:	50                   	push   eax
c001b226:	56                   	push   esi
c001b227:	4e                   	dec    esi
c001b228:	6a 00                	push   0x0
c001b22a:	53                   	push   ebx
c001b22b:	e8 48 55 fe ff       	call   c0000778 <memset>
c001b230:	83 c4 0c             	add    esp,0xc
c001b233:	56                   	push   esi
c001b234:	57                   	push   edi
c001b235:	53                   	push   ebx
c001b236:	89 fb                	mov    ebx,edi
c001b238:	e8 07 55 fe ff       	call   c0000744 <memcpy>
c001b23d:	83 c4 10             	add    esp,0x10
c001b240:	89 d8                	mov    eax,ebx
c001b242:	5b                   	pop    ebx
c001b243:	5e                   	pop    esi
c001b244:	5f                   	pop    edi
c001b245:	c3                   	ret    

c001b246 <Sys::eject(regs*)>:
c001b246:	83 ec 0c             	sub    esp,0xc
c001b249:	83 ca ff             	or     edx,0xffffffff
c001b24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b250:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b253:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b258:	83 e9 41             	sub    ecx,0x41
c001b25b:	83 f9 19             	cmp    ecx,0x19
c001b25e:	77 18                	ja     c001b278 <Sys::eject(regs*)+0x32>
c001b260:	8b 0c 8d c0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1640]
c001b267:	85 c9                	test   ecx,ecx
c001b269:	74 0d                	je     c001b278 <Sys::eject(regs*)+0x32>
c001b26b:	83 ec 0c             	sub    esp,0xc
c001b26e:	51                   	push   ecx
c001b26f:	e8 78 b4 ff ff       	call   c00166ec <LogicalDisk::eject()>
c001b274:	83 c4 10             	add    esp,0x10
c001b277:	99                   	cdq    
c001b278:	83 c4 0c             	add    esp,0xc
c001b27b:	c3                   	ret    

c001b27c <Sys::exit(regs*)>:
c001b27c:	83 ec 18             	sub    esp,0x18
c001b27f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b283:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b286:	e8 7a 35 00 00       	call   c001e805 <terminateTask(int)>
c001b28b:	83 c8 ff             	or     eax,0xffffffff
c001b28e:	83 c4 1c             	add    esp,0x1c
c001b291:	89 c2                	mov    edx,eax
c001b293:	c3                   	ret    

c001b294 <Sys::getCwd(regs*)>:
c001b294:	83 ec 10             	sub    esp,0x10
c001b297:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b29b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b29e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2a6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2a9:	e8 f2 7f ff ff       	call   c00132a0 <Fs::getcwd(Process*, char*, int)>
c001b2ae:	83 c4 1c             	add    esp,0x1c
c001b2b1:	99                   	cdq    
c001b2b2:	c3                   	ret    

c001b2b3 <Sys::getPID(regs*)>:
c001b2b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2bd:	99                   	cdq    
c001b2be:	c3                   	ret    

c001b2bf <Sys::getRAMData(regs*)>:
c001b2bf:	8b 0d d4 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3d4
c001b2c5:	6b 05 d0 e3 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e3d0,0x64
c001b2cc:	99                   	cdq    
c001b2cd:	f7 f9                	idiv   ecx
c001b2cf:	c1 e0 18             	shl    eax,0x18
c001b2d2:	09 c8                	or     eax,ecx
c001b2d4:	99                   	cdq    
c001b2d5:	c3                   	ret    

c001b2d6 <Sys::loadDLL(regs*)>:
c001b2d6:	56                   	push   esi
c001b2d7:	53                   	push   ebx
c001b2d8:	31 d2                	xor    edx,edx
c001b2da:	51                   	push   ecx
c001b2db:	b8 01 00 00 00       	mov    eax,0x1
c001b2e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2e4:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2e8:	0f 84 8c 00 00 00    	je     c001b37a <Sys::loadDLL(regs*)+0xa4>
c001b2ee:	83 ec 0c             	sub    esp,0xc
c001b2f1:	68 14 01 00 00       	push   0x114
c001b2f6:	e8 45 45 ff ff       	call   c000f840 <malloc>
c001b2fb:	83 c4 0c             	add    esp,0xc
c001b2fe:	89 c3                	mov    ebx,eax
c001b300:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b305:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b308:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b30b:	53                   	push   ebx
c001b30c:	e8 8d 81 ff ff       	call   c001349e <File::File(char const*, Process*)>
c001b311:	83 c4 10             	add    esp,0x10
c001b314:	31 d2                	xor    edx,edx
c001b316:	b8 02 00 00 00       	mov    eax,0x2
c001b31b:	85 db                	test   ebx,ebx
c001b31d:	74 5b                	je     c001b37a <Sys::loadDLL(regs*)+0xa4>
c001b31f:	83 ec 0c             	sub    esp,0xc
c001b322:	53                   	push   ebx
c001b323:	e8 48 84 ff ff       	call   c0013770 <File::exists()>
c001b328:	83 c4 10             	add    esp,0x10
c001b32b:	84 c0                	test   al,al
c001b32d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b32f:	75 11                	jne    c001b342 <Sys::loadDLL(regs*)+0x6c>
c001b331:	83 ec 0c             	sub    esp,0xc
c001b334:	53                   	push   ebx
c001b335:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b338:	83 c4 10             	add    esp,0x10
c001b33b:	b8 03 00 00 00       	mov    eax,0x3
c001b340:	eb 36                	jmp    c001b378 <Sys::loadDLL(regs*)+0xa2>
c001b342:	83 ec 0c             	sub    esp,0xc
c001b345:	53                   	push   ebx
c001b346:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b349:	58                   	pop    eax
c001b34a:	5a                   	pop    edx
c001b34b:	6a 00                	push   0x0
c001b34d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b350:	e8 c5 23 00 00       	call   c001d71a <Thr::loadDLL(char const*, bool)>
c001b355:	83 c4 10             	add    esp,0x10
c001b358:	89 c1                	mov    ecx,eax
c001b35a:	31 d2                	xor    edx,edx
c001b35c:	b8 04 00 00 00       	mov    eax,0x4
c001b361:	85 c9                	test   ecx,ecx
c001b363:	74 15                	je     c001b37a <Sys::loadDLL(regs*)+0xa4>
c001b365:	53                   	push   ebx
c001b366:	53                   	push   ebx
c001b367:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c001b36d:	51                   	push   ecx
c001b36e:	e8 db 25 00 00       	call   c001d94e <Thr::executeDLL(unsigned long, void*)>
c001b373:	83 c4 10             	add    esp,0x10
c001b376:	31 c0                	xor    eax,eax
c001b378:	31 d2                	xor    edx,edx
c001b37a:	59                   	pop    ecx
c001b37b:	5b                   	pop    ebx
c001b37c:	5e                   	pop    esi
c001b37d:	c3                   	ret    

c001b37e <Sys::read(regs*)>:
c001b37e:	57                   	push   edi
c001b37f:	56                   	push   esi
c001b380:	53                   	push   ebx
c001b381:	83 ec 10             	sub    esp,0x10
c001b384:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b388:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b38b:	83 f8 02             	cmp    eax,0x2
c001b38e:	77 10                	ja     c001b3a0 <Sys::read(regs*)+0x22>
c001b390:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b395:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b398:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b39e:	eb 0e                	jmp    c001b3ae <Sys::read(regs*)+0x30>
c001b3a0:	83 ec 0c             	sub    esp,0xc
c001b3a3:	50                   	push   eax
c001b3a4:	e8 a0 66 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b3a9:	83 c4 10             	add    esp,0x10
c001b3ac:	89 c1                	mov    ecx,eax
c001b3ae:	83 c8 ff             	or     eax,0xffffffff
c001b3b1:	85 c9                	test   ecx,ecx
c001b3b3:	89 c2                	mov    edx,eax
c001b3b5:	74 28                	je     c001b3df <Sys::read(regs*)+0x61>
c001b3b7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3bf:	31 ff                	xor    edi,edi
c001b3c1:	83 ec 0c             	sub    esp,0xc
c001b3c4:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3c6:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3ca:	52                   	push   edx
c001b3cb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3ce:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3d1:	57                   	push   edi
c001b3d2:	56                   	push   esi
c001b3d3:	51                   	push   ecx
c001b3d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3db:	83 c4 20             	add    esp,0x20
c001b3de:	99                   	cdq    
c001b3df:	83 c4 10             	add    esp,0x10
c001b3e2:	5b                   	pop    ebx
c001b3e3:	5e                   	pop    esi
c001b3e4:	5f                   	pop    edi
c001b3e5:	c3                   	ret    

c001b3e6 <Sys::sbrk(regs*)>:
c001b3e6:	56                   	push   esi
c001b3e7:	53                   	push   ebx
c001b3e8:	50                   	push   eax
c001b3e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b3f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3f5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b3f8:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b3fe:	85 db                	test   ebx,ebx
c001b400:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b403:	74 02                	je     c001b407 <Sys::sbrk(regs*)+0x21>
c001b405:	79 06                	jns    c001b40d <Sys::sbrk(regs*)+0x27>
c001b407:	89 f0                	mov    eax,esi
c001b409:	31 d2                	xor    edx,edx
c001b40b:	eb 2a                	jmp    c001b437 <Sys::sbrk(regs*)+0x51>
c001b40d:	83 c8 ff             	or     eax,0xffffffff
c001b410:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b416:	89 c2                	mov    edx,eax
c001b418:	77 1d                	ja     c001b437 <Sys::sbrk(regs*)+0x51>
c001b41a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b420:	50                   	push   eax
c001b421:	c1 ea 0c             	shr    edx,0xc
c001b424:	68 07 04 00 00       	push   0x407
c001b429:	52                   	push   edx
c001b42a:	51                   	push   ecx
c001b42b:	e8 46 70 ff ff       	call   c0012476 <VAS::allocatePages(int, int)>
c001b430:	89 f0                	mov    eax,esi
c001b432:	31 d2                	xor    edx,edx
c001b434:	83 c4 10             	add    esp,0x10
c001b437:	59                   	pop    ecx
c001b438:	5b                   	pop    ebx
c001b439:	5e                   	pop    esi
c001b43a:	c3                   	ret    

c001b43b <Sys::setCwd(regs*)>:
c001b43b:	83 ec 14             	sub    esp,0x14
c001b43e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b442:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b445:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b44a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b44d:	e8 bd 83 ff ff       	call   c001380f <Fs::setcwd(Process*, char*)>
c001b452:	83 c4 1c             	add    esp,0x1c
c001b455:	99                   	cdq    
c001b456:	c3                   	ret    

c001b457 <Sys::setTime(regs*)>:
c001b457:	55                   	push   ebp
c001b458:	31 d2                	xor    edx,edx
c001b45a:	57                   	push   edi
c001b45b:	bf 18 00 00 00       	mov    edi,0x18
c001b460:	56                   	push   esi
c001b461:	53                   	push   ebx
c001b462:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b467:	83 ec 30             	sub    esp,0x30
c001b46a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b46e:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b471:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b474:	f7 f3                	div    ebx
c001b476:	89 d6                	mov    esi,edx
c001b478:	31 d2                	xor    edx,edx
c001b47a:	f7 f3                	div    ebx
c001b47c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b47f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b483:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b488:	31 d2                	xor    edx,edx
c001b48a:	f7 f3                	div    ebx
c001b48c:	31 d2                	xor    edx,edx
c001b48e:	bb 0c 00 00 00       	mov    ebx,0xc
c001b493:	f7 f7                	div    edi
c001b495:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b498:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b49c:	0f b7 cd             	movzx  ecx,bp
c001b49f:	56                   	push   esi
c001b4a0:	89 c7                	mov    edi,eax
c001b4a2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b4a6:	c1 e6 10             	shl    esi,0x10
c001b4a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4ad:	83 e7 1f             	and    edi,0x1f
c001b4b0:	51                   	push   ecx
c001b4b1:	47                   	inc    edi
c001b4b2:	c1 e8 05             	shr    eax,0x5
c001b4b5:	31 d2                	xor    edx,edx
c001b4b7:	f7 f3                	div    ebx
c001b4b9:	31 db                	xor    ebx,ebx
c001b4bb:	52                   	push   edx
c001b4bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b4c0:	57                   	push   edi
c001b4c1:	68 a9 bc 02 c0       	push   0xc002bca9
c001b4c6:	e8 7b 7a ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001b4cb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b4cf:	89 f8                	mov    eax,edi
c001b4d1:	31 c9                	xor    ecx,ecx
c001b4d3:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b4d7:	88 c1                	mov    cl,al
c001b4d9:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b4df:	88 d5                	mov    ch,dl
c001b4e1:	c1 e0 10             	shl    eax,0x10
c001b4e4:	0f b7 d1             	movzx  edx,cx
c001b4e7:	09 c2                	or     edx,eax
c001b4e9:	89 d8                	mov    eax,ebx
c001b4eb:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b4f0:	09 f0                	or     eax,esi
c001b4f2:	89 c3                	mov    ebx,eax
c001b4f4:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b4f8:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b4fc:	83 c4 18             	add    esp,0x18
c001b4ff:	53                   	push   ebx
c001b500:	52                   	push   edx
c001b501:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b505:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b509:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b50d:	e8 17 8a ff ff       	call   c0013f29 <datetimeToSeconds(datetime_t)>
c001b512:	83 c4 0c             	add    esp,0xc
c001b515:	52                   	push   edx
c001b516:	50                   	push   eax
c001b517:	56                   	push   esi
c001b518:	e8 93 8b ff ff       	call   c00140b0 <secondsToDatetime(unsigned long long)>
c001b51d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b521:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b525:	51                   	push   ecx
c001b526:	89 d6                	mov    esi,edx
c001b528:	51                   	push   ecx
c001b529:	c1 ee 10             	shr    esi,0x10
c001b52c:	89 f3                	mov    ebx,esi
c001b52e:	0f b6 f3             	movzx  esi,bl
c001b531:	56                   	push   esi
c001b532:	0f b6 f6             	movzx  esi,dh
c001b535:	0f b6 d2             	movzx  edx,dl
c001b538:	56                   	push   esi
c001b539:	52                   	push   edx
c001b53a:	89 c2                	mov    edx,eax
c001b53c:	c1 ea 10             	shr    edx,0x10
c001b53f:	52                   	push   edx
c001b540:	0f b6 d4             	movzx  edx,ah
c001b543:	0f b6 c0             	movzx  eax,al
c001b546:	52                   	push   edx
c001b547:	50                   	push   eax
c001b548:	68 c5 bc 02 c0       	push   0xc002bcc5
c001b54d:	e8 f4 79 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001b552:	83 c4 2c             	add    esp,0x2c
c001b555:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b55a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b55e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b562:	53                   	push   ebx
c001b563:	51                   	push   ecx
c001b564:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b56a:	e8 e1 8a ff ff       	call   c0014050 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b56f:	83 f0 01             	xor    eax,0x1
c001b572:	31 d2                	xor    edx,edx
c001b574:	0f b6 c0             	movzx  eax,al
c001b577:	83 c4 3c             	add    esp,0x3c
c001b57a:	5b                   	pop    ebx
c001b57b:	5e                   	pop    esi
c001b57c:	5f                   	pop    edi
c001b57d:	5d                   	pop    ebp
c001b57e:	c3                   	ret    

c001b57f <Sys::timezone(regs*)>:
c001b57f:	53                   	push   ebx
c001b580:	83 ec 08             	sub    esp,0x8
c001b583:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b587:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b58b:	75 17                	jne    c001b5a4 <Sys::timezone(regs*)+0x25>
c001b58d:	83 ec 0c             	sub    esp,0xc
c001b590:	68 e1 bc 02 c0       	push   0xc002bce1
c001b595:	e8 ac 79 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001b59a:	83 c8 ff             	or     eax,0xffffffff
c001b59d:	83 c4 10             	add    esp,0x10
c001b5a0:	89 c2                	mov    edx,eax
c001b5a2:	eb 20                	jmp    c001b5c4 <Sys::timezone(regs*)+0x45>
c001b5a4:	83 ec 0c             	sub    esp,0xc
c001b5a7:	68 19 bd 02 c0       	push   0xc002bd19
c001b5ac:	e8 95 79 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001b5b1:	58                   	pop    eax
c001b5b2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b5b5:	e8 f8 87 ff ff       	call   c0013db2 <User::loadClockSettings(int)>
c001b5ba:	83 c4 10             	add    esp,0x10
c001b5bd:	b8 01 00 00 00       	mov    eax,0x1
c001b5c2:	31 d2                	xor    edx,edx
c001b5c4:	83 c4 08             	add    esp,0x8
c001b5c7:	5b                   	pop    ebx
c001b5c8:	c3                   	ret    

c001b5c9 <Sys::write(regs*)>:
c001b5c9:	57                   	push   edi
c001b5ca:	56                   	push   esi
c001b5cb:	53                   	push   ebx
c001b5cc:	83 ec 10             	sub    esp,0x10
c001b5cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5d6:	83 f8 02             	cmp    eax,0x2
c001b5d9:	77 10                	ja     c001b5eb <Sys::write(regs*)+0x22>
c001b5db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5e3:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b5e9:	eb 0e                	jmp    c001b5f9 <Sys::write(regs*)+0x30>
c001b5eb:	83 ec 0c             	sub    esp,0xc
c001b5ee:	50                   	push   eax
c001b5ef:	e8 55 64 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b5f4:	83 c4 10             	add    esp,0x10
c001b5f7:	89 c1                	mov    ecx,eax
c001b5f9:	83 c8 ff             	or     eax,0xffffffff
c001b5fc:	85 c9                	test   ecx,ecx
c001b5fe:	89 c2                	mov    edx,eax
c001b600:	74 28                	je     c001b62a <Sys::write(regs*)+0x61>
c001b602:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b60a:	31 ff                	xor    edi,edi
c001b60c:	83 ec 0c             	sub    esp,0xc
c001b60f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b611:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b615:	52                   	push   edx
c001b616:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b619:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b61c:	57                   	push   edi
c001b61d:	56                   	push   esi
c001b61e:	51                   	push   ecx
c001b61f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b622:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b626:	83 c4 20             	add    esp,0x20
c001b629:	99                   	cdq    
c001b62a:	83 c4 10             	add    esp,0x10
c001b62d:	5b                   	pop    ebx
c001b62e:	5e                   	pop    esi
c001b62f:	5f                   	pop    edi
c001b630:	c3                   	ret    

c001b631 <Sys::wsbe(regs*)>:
c001b631:	57                   	push   edi
c001b632:	b9 0b 00 00 00       	mov    ecx,0xb
c001b637:	56                   	push   esi
c001b638:	be 58 bd 02 c0       	mov    esi,0xc002bd58
c001b63d:	53                   	push   ebx
c001b63e:	83 ec 30             	sub    esp,0x30
c001b641:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b645:	fc                   	cld    
c001b646:	83 ec 0c             	sub    esp,0xc
c001b649:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b64b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b64f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b654:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b657:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b65d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b65f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b662:	57                   	push   edi
c001b663:	e8 2c 51 fe ff       	call   c0000794 <strlen>
c001b668:	5a                   	pop    edx
c001b669:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b66d:	52                   	push   edx
c001b66e:	31 d2                	xor    edx,edx
c001b670:	57                   	push   edi
c001b671:	52                   	push   edx
c001b672:	50                   	push   eax
c001b673:	56                   	push   esi
c001b674:	ff d3                	call   ebx
c001b676:	83 c4 14             	add    esp,0x14
c001b679:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b67d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b680:	e8 80 31 00 00       	call   c001e805 <terminateTask(int)>
c001b685:	83 c4 40             	add    esp,0x40
c001b688:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b68d:	5b                   	pop    ebx
c001b68e:	31 d2                	xor    edx,edx
c001b690:	5e                   	pop    esi
c001b691:	5f                   	pop    edi
c001b692:	c3                   	ret    

c001b693 <Sys::yield(regs*)>:
c001b693:	57                   	push   edi
c001b694:	56                   	push   esi
c001b695:	53                   	push   ebx
c001b696:	e8 27 27 00 00       	call   c001ddc2 <lockScheduler()>
c001b69b:	e8 5e 2a 00 00       	call   c001e0fe <schedule()>
c001b6a0:	e8 1f 27 00 00       	call   c001ddc4 <unlockScheduler()>
c001b6a5:	8b 35 30 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea30
c001b6ab:	8b 3d 34 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea34
c001b6b1:	89 f0                	mov    eax,esi
c001b6b3:	89 fb                	mov    ebx,edi
c001b6b5:	89 f1                	mov    ecx,esi
c001b6b7:	c1 e0 07             	shl    eax,0x7
c001b6ba:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b6be:	25 80 30 0f 00       	and    eax,0xf3080
c001b6c3:	c1 eb 17             	shr    ebx,0x17
c001b6c6:	31 c8                	xor    eax,ecx
c001b6c8:	89 da                	mov    edx,ebx
c001b6ca:	5b                   	pop    ebx
c001b6cb:	5e                   	pop    esi
c001b6cc:	5f                   	pop    edi
c001b6cd:	c3                   	ret    

c001b6ce <sysCallSeekDir(regs*)>:
c001b6ce:	31 c0                	xor    eax,eax
c001b6d0:	31 d2                	xor    edx,edx
c001b6d2:	c3                   	ret    

c001b6d3 <sysCallTellDir(regs*)>:
c001b6d3:	31 c0                	xor    eax,eax
c001b6d5:	31 d2                	xor    edx,edx
c001b6d7:	c3                   	ret    

c001b6d8 <sysCallVerify(regs*)>:
c001b6d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6dc:	31 d2                	xor    edx,edx
c001b6de:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6e1:	c3                   	ret    

c001b6e2 <sysFormatDisk(regs*)>:
c001b6e2:	56                   	push   esi
c001b6e3:	53                   	push   ebx
c001b6e4:	53                   	push   ebx
c001b6e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6e9:	8b 1d 18 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e518
c001b6ef:	eb 25                	jmp    c001b716 <sysFormatDisk(regs*)+0x34>
c001b6f1:	83 ec 0c             	sub    esp,0xc
c001b6f4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b6f7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6f9:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b6fc:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b6ff:	50                   	push   eax
c001b700:	ff 34 85 c0 e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1640]
c001b707:	53                   	push   ebx
c001b708:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b70b:	83 c4 20             	add    esp,0x20
c001b70e:	83 f8 08             	cmp    eax,0x8
c001b711:	75 12                	jne    c001b725 <sysFormatDisk(regs*)+0x43>
c001b713:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b716:	85 db                	test   ebx,ebx
c001b718:	75 d7                	jne    c001b6f1 <sysFormatDisk(regs*)+0xf>
c001b71a:	59                   	pop    ecx
c001b71b:	b8 03 00 00 00       	mov    eax,0x3
c001b720:	31 d2                	xor    edx,edx
c001b722:	5b                   	pop    ebx
c001b723:	5e                   	pop    esi
c001b724:	c3                   	ret    
c001b725:	85 c0                	test   eax,eax
c001b727:	74 1b                	je     c001b744 <sysFormatDisk(regs*)+0x62>
c001b729:	83 f8 09             	cmp    eax,0x9
c001b72c:	74 0b                	je     c001b739 <sysFormatDisk(regs*)+0x57>
c001b72e:	59                   	pop    ecx
c001b72f:	b8 02 00 00 00       	mov    eax,0x2
c001b734:	31 d2                	xor    edx,edx
c001b736:	5b                   	pop    ebx
c001b737:	5e                   	pop    esi
c001b738:	c3                   	ret    
c001b739:	59                   	pop    ecx
c001b73a:	b8 01 00 00 00       	mov    eax,0x1
c001b73f:	31 d2                	xor    edx,edx
c001b741:	5b                   	pop    ebx
c001b742:	5e                   	pop    esi
c001b743:	c3                   	ret    
c001b744:	59                   	pop    ecx
c001b745:	31 c0                	xor    eax,eax
c001b747:	31 d2                	xor    edx,edx
c001b749:	5b                   	pop    ebx
c001b74a:	5e                   	pop    esi
c001b74b:	c3                   	ret    

c001b74c <sysSetDiskVolumeLabel(regs*)>:
c001b74c:	56                   	push   esi
c001b74d:	53                   	push   ebx
c001b74e:	53                   	push   ebx
c001b74f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b753:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b756:	83 f8 19             	cmp    eax,0x19
c001b759:	77 29                	ja     c001b784 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b75b:	8b 0c 85 c0 e9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1640]
c001b762:	85 c9                	test   ecx,ecx
c001b764:	74 1e                	je     c001b784 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b766:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b769:	85 d2                	test   edx,edx
c001b76b:	74 17                	je     c001b784 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b76d:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b773:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b775:	52                   	push   edx
c001b776:	50                   	push   eax
c001b777:	51                   	push   ecx
c001b778:	53                   	push   ebx
c001b779:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b77c:	83 c4 10             	add    esp,0x10
c001b77f:	99                   	cdq    
c001b780:	59                   	pop    ecx
c001b781:	5b                   	pop    ebx
c001b782:	5e                   	pop    esi
c001b783:	c3                   	ret    
c001b784:	59                   	pop    ecx
c001b785:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b78a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b78f:	5b                   	pop    ebx
c001b790:	5e                   	pop    esi
c001b791:	c3                   	ret    

c001b792 <sysGetDiskVolumeLabel(regs*)>:
c001b792:	57                   	push   edi
c001b793:	56                   	push   esi
c001b794:	53                   	push   ebx
c001b795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b799:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b79c:	83 fa 19             	cmp    edx,0x19
c001b79f:	77 34                	ja     c001b7d5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7a1:	8b 0c 95 c0 e9 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1640]
c001b7a8:	85 c9                	test   ecx,ecx
c001b7aa:	74 29                	je     c001b7d5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7ac:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b7af:	85 db                	test   ebx,ebx
c001b7b1:	74 22                	je     c001b7d5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7b3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b7b6:	85 c0                	test   eax,eax
c001b7b8:	74 1b                	je     c001b7d5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7ba:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b7c0:	83 ec 0c             	sub    esp,0xc
c001b7c3:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b7c5:	50                   	push   eax
c001b7c6:	53                   	push   ebx
c001b7c7:	52                   	push   edx
c001b7c8:	51                   	push   ecx
c001b7c9:	56                   	push   esi
c001b7ca:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b7cd:	83 c4 20             	add    esp,0x20
c001b7d0:	99                   	cdq    
c001b7d1:	5b                   	pop    ebx
c001b7d2:	5e                   	pop    esi
c001b7d3:	5f                   	pop    edi
c001b7d4:	c3                   	ret    
c001b7d5:	5b                   	pop    ebx
c001b7d6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7db:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7e0:	5e                   	pop    esi
c001b7e1:	5f                   	pop    edi
c001b7e2:	c3                   	ret    

c001b7e3 <sysShutdown(regs*)>:
c001b7e3:	83 ec 0c             	sub    esp,0xc
c001b7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7ea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7ed:	85 c0                	test   eax,eax
c001b7ef:	74 18                	je     c001b809 <sysShutdown(regs*)+0x26>
c001b7f1:	83 f8 01             	cmp    eax,0x1
c001b7f4:	74 38                	je     c001b82e <sysShutdown(regs*)+0x4b>
c001b7f6:	83 f8 02             	cmp    eax,0x2
c001b7f9:	74 24                	je     c001b81f <sysShutdown(regs*)+0x3c>
c001b7fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b800:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b805:	83 c4 0c             	add    esp,0xc
c001b808:	c3                   	ret    
c001b809:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b80e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b810:	6a 00                	push   0x0
c001b812:	6a 00                	push   0x0
c001b814:	6a 00                	push   0x0
c001b816:	50                   	push   eax
c001b817:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b81a:	83 c4 10             	add    esp,0x10
c001b81d:	eb dc                	jmp    c001b7fb <sysShutdown(regs*)+0x18>
c001b81f:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b824:	8b 10                	mov    edx,DWORD PTR [eax]
c001b826:	6a 00                	push   0x0
c001b828:	6a 00                	push   0x0
c001b82a:	6a 01                	push   0x1
c001b82c:	eb e8                	jmp    c001b816 <sysShutdown(regs*)+0x33>
c001b82e:	a1 60 0a 03 c0       	mov    eax,ds:0xc0030a60
c001b833:	85 c0                	test   eax,eax
c001b835:	74 02                	je     c001b839 <sysShutdown(regs*)+0x56>
c001b837:	ff d0                	call   eax
c001b839:	31 c0                	xor    eax,eax
c001b83b:	31 d2                	xor    edx,edx
c001b83d:	83 c4 0c             	add    esp,0xc
c001b840:	c3                   	ret    

c001b841 <sysCallRealpath(regs*)>:
c001b841:	83 ec 0c             	sub    esp,0xc
c001b844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b848:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b84b:	85 d2                	test   edx,edx
c001b84d:	74 07                	je     c001b856 <sysCallRealpath(regs*)+0x15>
c001b84f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b852:	85 c0                	test   eax,eax
c001b854:	75 0b                	jne    c001b861 <sysCallRealpath(regs*)+0x20>
c001b856:	b8 01 00 00 00       	mov    eax,0x1
c001b85b:	31 d2                	xor    edx,edx
c001b85d:	83 c4 0c             	add    esp,0xc
c001b860:	c3                   	ret    
c001b861:	51                   	push   ecx
c001b862:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b868:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b86b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b871:	51                   	push   ecx
c001b872:	52                   	push   edx
c001b873:	50                   	push   eax
c001b874:	e8 7b 7a ff ff       	call   c00132f4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b879:	83 c4 10             	add    esp,0x10
c001b87c:	31 c0                	xor    eax,eax
c001b87e:	31 d2                	xor    edx,edx
c001b880:	83 c4 0c             	add    esp,0xc
c001b883:	c3                   	ret    

c001b884 <sysCallGetArgc(regs*)>:
c001b884:	83 ec 14             	sub    esp,0x14
c001b887:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b88c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b88f:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b895:	68 84 bd 02 c0       	push   0xc002bd84
c001b89a:	e8 a7 76 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001b89f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8a7:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b8ad:	83 c4 1c             	add    esp,0x1c
c001b8b0:	99                   	cdq    
c001b8b1:	c3                   	ret    

c001b8b2 <sysCallReadDir(regs*)>:
c001b8b2:	53                   	push   ebx
c001b8b3:	83 ec 18             	sub    esp,0x18
c001b8b6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8ba:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8bd:	83 f8 02             	cmp    eax,0x2
c001b8c0:	76 53                	jbe    c001b915 <sysCallReadDir(regs*)+0x63>
c001b8c2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b8c5:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b8cb:	77 4f                	ja     c001b91c <sysCallReadDir(regs*)+0x6a>
c001b8cd:	83 ec 0c             	sub    esp,0xc
c001b8d0:	50                   	push   eax
c001b8d1:	e8 73 61 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b8d6:	83 c4 10             	add    esp,0x10
c001b8d9:	85 c0                	test   eax,eax
c001b8db:	74 50                	je     c001b92d <sysCallReadDir(regs*)+0x7b>
c001b8dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b8e5:	83 ec 0c             	sub    esp,0xc
c001b8e8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8ea:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b8ee:	51                   	push   ecx
c001b8ef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8f2:	6a 00                	push   0x0
c001b8f4:	68 10 01 00 00       	push   0x110
c001b8f9:	50                   	push   eax
c001b8fa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b8fd:	83 c4 20             	add    esp,0x20
c001b900:	85 c0                	test   eax,eax
c001b902:	74 38                	je     c001b93c <sysCallReadDir(regs*)+0x8a>
c001b904:	83 f8 07             	cmp    eax,0x7
c001b907:	74 0c                	je     c001b915 <sysCallReadDir(regs*)+0x63>
c001b909:	b8 02 00 00 00       	mov    eax,0x2
c001b90e:	31 d2                	xor    edx,edx
c001b910:	83 c4 18             	add    esp,0x18
c001b913:	5b                   	pop    ebx
c001b914:	c3                   	ret    
c001b915:	b8 01 00 00 00       	mov    eax,0x1
c001b91a:	eb f2                	jmp    c001b90e <sysCallReadDir(regs*)+0x5c>
c001b91c:	83 ec 08             	sub    esp,0x8
c001b91f:	52                   	push   edx
c001b920:	68 9c be 02 c0       	push   0xc002be9c
c001b925:	e8 1c 76 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001b92a:	83 c4 10             	add    esp,0x10
c001b92d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b932:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b937:	83 c4 18             	add    esp,0x18
c001b93a:	5b                   	pop    ebx
c001b93b:	c3                   	ret    
c001b93c:	31 c0                	xor    eax,eax
c001b93e:	eb ce                	jmp    c001b90e <sysCallReadDir(regs*)+0x5c>

c001b940 <sysCallIsATTY(regs*)>:
c001b940:	83 ec 0c             	sub    esp,0xc
c001b943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b947:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b94a:	83 f8 02             	cmp    eax,0x2
c001b94d:	76 07                	jbe    c001b956 <sysCallIsATTY(regs*)+0x16>
c001b94f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b954:	75 26                	jne    c001b97c <sysCallIsATTY(regs*)+0x3c>
c001b956:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b95b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b95e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b964:	85 c0                	test   eax,eax
c001b966:	74 24                	je     c001b98c <sysCallIsATTY(regs*)+0x4c>
c001b968:	83 ec 0c             	sub    esp,0xc
c001b96b:	8b 10                	mov    edx,DWORD PTR [eax]
c001b96d:	50                   	push   eax
c001b96e:	ff 12                	call   DWORD PTR [edx]
c001b970:	31 d2                	xor    edx,edx
c001b972:	0f b6 c0             	movzx  eax,al
c001b975:	83 c4 10             	add    esp,0x10
c001b978:	83 c4 0c             	add    esp,0xc
c001b97b:	c3                   	ret    
c001b97c:	83 ec 0c             	sub    esp,0xc
c001b97f:	50                   	push   eax
c001b980:	e8 c4 60 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b985:	83 c4 10             	add    esp,0x10
c001b988:	85 c0                	test   eax,eax
c001b98a:	75 dc                	jne    c001b968 <sysCallIsATTY(regs*)+0x28>
c001b98c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b991:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b996:	83 c4 0c             	add    esp,0xc
c001b999:	c3                   	ret    

c001b99a <sysCallSeek(regs*)>:
c001b99a:	53                   	push   ebx
c001b99b:	83 ec 08             	sub    esp,0x8
c001b99e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9a5:	83 f8 02             	cmp    eax,0x2
c001b9a8:	76 4a                	jbe    c001b9f4 <sysCallSeek(regs*)+0x5a>
c001b9aa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9af:	77 32                	ja     c001b9e3 <sysCallSeek(regs*)+0x49>
c001b9b1:	83 ec 0c             	sub    esp,0xc
c001b9b4:	50                   	push   eax
c001b9b5:	e8 8f 60 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b9ba:	83 c4 0c             	add    esp,0xc
c001b9bd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9c0:	31 db                	xor    ebx,ebx
c001b9c2:	53                   	push   ebx
c001b9c3:	51                   	push   ecx
c001b9c4:	50                   	push   eax
c001b9c5:	e8 f6 7b ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c001b9ca:	83 c4 10             	add    esp,0x10
c001b9cd:	85 c0                	test   eax,eax
c001b9cf:	0f 95 c0             	setne  al
c001b9d2:	31 d2                	xor    edx,edx
c001b9d4:	0f b6 c0             	movzx  eax,al
c001b9d7:	f7 d8                	neg    eax
c001b9d9:	83 d2 00             	adc    edx,0x0
c001b9dc:	83 c4 08             	add    esp,0x8
c001b9df:	f7 da                	neg    edx
c001b9e1:	5b                   	pop    ebx
c001b9e2:	c3                   	ret    
c001b9e3:	83 ec 08             	sub    esp,0x8
c001b9e6:	50                   	push   eax
c001b9e7:	68 8f bd 02 c0       	push   0xc002bd8f
c001b9ec:	e8 55 75 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001b9f1:	83 c4 10             	add    esp,0x10
c001b9f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9fe:	83 c4 08             	add    esp,0x8
c001ba01:	5b                   	pop    ebx
c001ba02:	c3                   	ret    

c001ba03 <sysCallTell(regs*)>:
c001ba03:	53                   	push   ebx
c001ba04:	83 ec 08             	sub    esp,0x8
c001ba07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba0b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba0e:	83 f8 02             	cmp    eax,0x2
c001ba11:	76 5e                	jbe    c001ba71 <sysCallTell(regs*)+0x6e>
c001ba13:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba18:	77 2d                	ja     c001ba47 <sysCallTell(regs*)+0x44>
c001ba1a:	83 ec 0c             	sub    esp,0xc
c001ba1d:	50                   	push   eax
c001ba1e:	e8 26 60 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001ba23:	5a                   	pop    edx
c001ba24:	59                   	pop    ecx
c001ba25:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba28:	50                   	push   eax
c001ba29:	e8 e8 7b ff ff       	call   c0013616 <File::tell(unsigned long long*)>
c001ba2e:	83 c4 10             	add    esp,0x10
c001ba31:	85 c0                	test   eax,eax
c001ba33:	0f 95 c0             	setne  al
c001ba36:	31 d2                	xor    edx,edx
c001ba38:	0f b6 c0             	movzx  eax,al
c001ba3b:	f7 d8                	neg    eax
c001ba3d:	83 d2 00             	adc    edx,0x0
c001ba40:	83 c4 08             	add    esp,0x8
c001ba43:	f7 da                	neg    edx
c001ba45:	5b                   	pop    ebx
c001ba46:	c3                   	ret    
c001ba47:	83 ec 08             	sub    esp,0x8
c001ba4a:	50                   	push   eax
c001ba4b:	68 a9 bd 02 c0       	push   0xc002bda9
c001ba50:	e8 f1 74 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001ba55:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba58:	83 c4 10             	add    esp,0x10
c001ba5b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba68:	31 d2                	xor    edx,edx
c001ba6a:	31 c0                	xor    eax,eax
c001ba6c:	83 c4 08             	add    esp,0x8
c001ba6f:	5b                   	pop    ebx
c001ba70:	c3                   	ret    
c001ba71:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba76:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba7b:	83 c4 08             	add    esp,0x8
c001ba7e:	5b                   	pop    ebx
c001ba7f:	c3                   	ret    

c001ba80 <sysCallSize(regs*)>:
c001ba80:	53                   	push   ebx
c001ba81:	83 ec 18             	sub    esp,0x18
c001ba84:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba88:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba8b:	83 f8 02             	cmp    eax,0x2
c001ba8e:	76 64                	jbe    c001baf4 <sysCallSize(regs*)+0x74>
c001ba90:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba95:	77 33                	ja     c001baca <sysCallSize(regs*)+0x4a>
c001ba97:	83 ec 0c             	sub    esp,0xc
c001ba9a:	50                   	push   eax
c001ba9b:	e8 a9 5f ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001baa0:	83 c4 0c             	add    esp,0xc
c001baa3:	8d 54 24 13          	lea    edx,[esp+0x13]
c001baa7:	52                   	push   edx
c001baa8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001baab:	50                   	push   eax
c001baac:	e8 fd 7c ff ff       	call   c00137ae <File::stat(unsigned long long*, bool*)>
c001bab1:	83 c4 10             	add    esp,0x10
c001bab4:	85 c0                	test   eax,eax
c001bab6:	0f 95 c0             	setne  al
c001bab9:	31 d2                	xor    edx,edx
c001babb:	0f b6 c0             	movzx  eax,al
c001babe:	f7 d8                	neg    eax
c001bac0:	83 d2 00             	adc    edx,0x0
c001bac3:	83 c4 18             	add    esp,0x18
c001bac6:	f7 da                	neg    edx
c001bac8:	5b                   	pop    ebx
c001bac9:	c3                   	ret    
c001baca:	83 ec 08             	sub    esp,0x8
c001bacd:	50                   	push   eax
c001bace:	68 c3 bd 02 c0       	push   0xc002bdc3
c001bad3:	e8 6e 74 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001bad8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001badb:	83 c4 10             	add    esp,0x10
c001bade:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bae4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001baeb:	31 d2                	xor    edx,edx
c001baed:	31 c0                	xor    eax,eax
c001baef:	83 c4 18             	add    esp,0x18
c001baf2:	5b                   	pop    ebx
c001baf3:	c3                   	ret    
c001baf4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001baf9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bafe:	83 c4 18             	add    esp,0x18
c001bb01:	5b                   	pop    ebx
c001bb02:	c3                   	ret    

c001bb03 <sysCallSizeFromFilename(regs*)>:
c001bb03:	57                   	push   edi
c001bb04:	56                   	push   esi
c001bb05:	53                   	push   ebx
c001bb06:	83 ec 20             	sub    esp,0x20
c001bb09:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb0d:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb10:	83 fb 02             	cmp    ebx,0x2
c001bb13:	0f 86 99 00 00 00    	jbe    c001bbb2 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb19:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb1f:	77 65                	ja     c001bb86 <sysCallSizeFromFilename(regs*)+0x83>
c001bb21:	83 ec 0c             	sub    esp,0xc
c001bb24:	68 14 01 00 00       	push   0x114
c001bb29:	e8 12 3d ff ff       	call   c000f840 <malloc>
c001bb2e:	83 c4 0c             	add    esp,0xc
c001bb31:	89 c6                	mov    esi,eax
c001bb33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb38:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb3b:	53                   	push   ebx
c001bb3c:	56                   	push   esi
c001bb3d:	e8 5c 79 ff ff       	call   c001349e <File::File(char const*, Process*)>
c001bb42:	83 c4 0c             	add    esp,0xc
c001bb45:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb49:	50                   	push   eax
c001bb4a:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb4d:	56                   	push   esi
c001bb4e:	e8 5b 7c ff ff       	call   c00137ae <File::stat(unsigned long long*, bool*)>
c001bb53:	83 c4 10             	add    esp,0x10
c001bb56:	85 f6                	test   esi,esi
c001bb58:	74 14                	je     c001bb6e <sysCallSizeFromFilename(regs*)+0x6b>
c001bb5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb5e:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb60:	83 ec 0c             	sub    esp,0xc
c001bb63:	56                   	push   esi
c001bb64:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb67:	83 c4 10             	add    esp,0x10
c001bb6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb6e:	85 c0                	test   eax,eax
c001bb70:	0f 95 c0             	setne  al
c001bb73:	31 d2                	xor    edx,edx
c001bb75:	0f b6 c0             	movzx  eax,al
c001bb78:	f7 d8                	neg    eax
c001bb7a:	83 d2 00             	adc    edx,0x0
c001bb7d:	83 c4 20             	add    esp,0x20
c001bb80:	f7 da                	neg    edx
c001bb82:	5b                   	pop    ebx
c001bb83:	5e                   	pop    esi
c001bb84:	5f                   	pop    edi
c001bb85:	c3                   	ret    
c001bb86:	83 ec 08             	sub    esp,0x8
c001bb89:	53                   	push   ebx
c001bb8a:	68 c3 bd 02 c0       	push   0xc002bdc3
c001bb8f:	e8 b2 73 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001bb94:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bb97:	83 c4 10             	add    esp,0x10
c001bb9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bba0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bba7:	31 d2                	xor    edx,edx
c001bba9:	83 c4 20             	add    esp,0x20
c001bbac:	31 c0                	xor    eax,eax
c001bbae:	5b                   	pop    ebx
c001bbaf:	5e                   	pop    esi
c001bbb0:	5f                   	pop    edi
c001bbb1:	c3                   	ret    
c001bbb2:	83 c4 20             	add    esp,0x20
c001bbb5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbba:	5b                   	pop    ebx
c001bbbb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbc0:	5e                   	pop    esi
c001bbc1:	5f                   	pop    edi
c001bbc2:	c3                   	ret    

c001bbc3 <sysCallClose(regs*)>:
c001bbc3:	53                   	push   ebx
c001bbc4:	83 ec 08             	sub    esp,0x8
c001bbc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbcb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbce:	83 f8 02             	cmp    eax,0x2
c001bbd1:	76 50                	jbe    c001bc23 <sysCallClose(regs*)+0x60>
c001bbd3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbd8:	74 58                	je     c001bc32 <sysCallClose(regs*)+0x6f>
c001bbda:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bbdf:	74 60                	je     c001bc41 <sysCallClose(regs*)+0x7e>
c001bbe1:	77 2f                	ja     c001bc12 <sysCallClose(regs*)+0x4f>
c001bbe3:	83 ec 0c             	sub    esp,0xc
c001bbe6:	50                   	push   eax
c001bbe7:	e8 5d 5e ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bbec:	89 c3                	mov    ebx,eax
c001bbee:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbf1:	e8 6a 79 ff ff       	call   c0013560 <File::close()>
c001bbf6:	83 c4 10             	add    esp,0x10
c001bbf9:	85 db                	test   ebx,ebx
c001bbfb:	74 0c                	je     c001bc09 <sysCallClose(regs*)+0x46>
c001bbfd:	83 ec 0c             	sub    esp,0xc
c001bc00:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc02:	53                   	push   ebx
c001bc03:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc06:	83 c4 10             	add    esp,0x10
c001bc09:	31 c0                	xor    eax,eax
c001bc0b:	31 d2                	xor    edx,edx
c001bc0d:	83 c4 08             	add    esp,0x8
c001bc10:	5b                   	pop    ebx
c001bc11:	c3                   	ret    
c001bc12:	83 ec 08             	sub    esp,0x8
c001bc15:	50                   	push   eax
c001bc16:	68 c0 be 02 c0       	push   0xc002bec0
c001bc1b:	e8 26 73 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001bc20:	83 c4 10             	add    esp,0x10
c001bc23:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc28:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc2d:	83 c4 08             	add    esp,0x8
c001bc30:	5b                   	pop    ebx
c001bc31:	c3                   	ret    
c001bc32:	83 ec 0c             	sub    esp,0xc
c001bc35:	68 de bd 02 c0       	push   0xc002bdde
c001bc3a:	e8 07 73 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001bc3f:	eb c5                	jmp    c001bc06 <sysCallClose(regs*)+0x43>
c001bc41:	83 ec 0c             	sub    esp,0xc
c001bc44:	68 ec bd 02 c0       	push   0xc002bdec
c001bc49:	eb ef                	jmp    c001bc3a <sysCallClose(regs*)+0x77>

c001bc4b <sysCallOpenDir(regs*)>:
c001bc4b:	56                   	push   esi
c001bc4c:	53                   	push   ebx
c001bc4d:	53                   	push   ebx
c001bc4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc52:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc55:	85 f6                	test   esi,esi
c001bc57:	74 59                	je     c001bcb2 <sysCallOpenDir(regs*)+0x67>
c001bc59:	83 ec 0c             	sub    esp,0xc
c001bc5c:	68 14 01 00 00       	push   0x114
c001bc61:	e8 da 3b ff ff       	call   c000f840 <malloc>
c001bc66:	83 c4 0c             	add    esp,0xc
c001bc69:	89 c6                	mov    esi,eax
c001bc6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc70:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc73:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc76:	56                   	push   esi
c001bc77:	e8 ce 7c ff ff       	call   c001394a <Directory::Directory(char const*, Process*)>
c001bc7c:	83 c4 10             	add    esp,0x10
c001bc7f:	85 f6                	test   esi,esi
c001bc81:	74 2f                	je     c001bcb2 <sysCallOpenDir(regs*)+0x67>
c001bc83:	83 ec 0c             	sub    esp,0xc
c001bc86:	56                   	push   esi
c001bc87:	e8 22 7d ff ff       	call   c00139ae <Directory::open()>
c001bc8c:	83 c4 10             	add    esp,0x10
c001bc8f:	85 c0                	test   eax,eax
c001bc91:	75 1f                	jne    c001bcb2 <sysCallOpenDir(regs*)+0x67>
c001bc93:	83 ec 0c             	sub    esp,0xc
c001bc96:	56                   	push   esi
c001bc97:	e8 b8 5a ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001bc9c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc9f:	83 c4 10             	add    esp,0x10
c001bca2:	89 02                	mov    DWORD PTR [edx],eax
c001bca4:	c1 f8 1f             	sar    eax,0x1f
c001bca7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcaa:	31 c0                	xor    eax,eax
c001bcac:	59                   	pop    ecx
c001bcad:	31 d2                	xor    edx,edx
c001bcaf:	5b                   	pop    ebx
c001bcb0:	5e                   	pop    esi
c001bcb1:	c3                   	ret    
c001bcb2:	59                   	pop    ecx
c001bcb3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcb8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcbd:	5b                   	pop    ebx
c001bcbe:	5e                   	pop    esi
c001bcbf:	c3                   	ret    

c001bcc0 <sysCallCloseDir(regs*)>:
c001bcc0:	53                   	push   ebx
c001bcc1:	83 ec 08             	sub    esp,0x8
c001bcc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bccb:	83 f8 02             	cmp    eax,0x2
c001bcce:	76 47                	jbe    c001bd17 <sysCallCloseDir(regs*)+0x57>
c001bcd0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcd5:	77 2f                	ja     c001bd06 <sysCallCloseDir(regs*)+0x46>
c001bcd7:	83 ec 0c             	sub    esp,0xc
c001bcda:	50                   	push   eax
c001bcdb:	e8 69 5d ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bce0:	89 c3                	mov    ebx,eax
c001bce2:	89 04 24             	mov    DWORD PTR [esp],eax
c001bce5:	e8 20 7d ff ff       	call   c0013a0a <Directory::close()>
c001bcea:	83 c4 10             	add    esp,0x10
c001bced:	85 db                	test   ebx,ebx
c001bcef:	74 0c                	je     c001bcfd <sysCallCloseDir(regs*)+0x3d>
c001bcf1:	83 ec 0c             	sub    esp,0xc
c001bcf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcf6:	53                   	push   ebx
c001bcf7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcfa:	83 c4 10             	add    esp,0x10
c001bcfd:	31 c0                	xor    eax,eax
c001bcff:	31 d2                	xor    edx,edx
c001bd01:	83 c4 08             	add    esp,0x8
c001bd04:	5b                   	pop    ebx
c001bd05:	c3                   	ret    
c001bd06:	83 ec 08             	sub    esp,0x8
c001bd09:	50                   	push   eax
c001bd0a:	68 e8 be 02 c0       	push   0xc002bee8
c001bd0f:	e8 32 72 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001bd14:	83 c4 10             	add    esp,0x10
c001bd17:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd1c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd21:	83 c4 08             	add    esp,0x8
c001bd24:	5b                   	pop    ebx
c001bd25:	c3                   	ret    

c001bd26 <sysCallMakeDir(regs*)>:
c001bd26:	56                   	push   esi
c001bd27:	53                   	push   ebx
c001bd28:	83 ec 10             	sub    esp,0x10
c001bd2b:	68 14 01 00 00       	push   0x114
c001bd30:	e8 0b 3b ff ff       	call   c000f840 <malloc>
c001bd35:	83 c4 0c             	add    esp,0xc
c001bd38:	89 c3                	mov    ebx,eax
c001bd3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd3f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd46:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd49:	53                   	push   ebx
c001bd4a:	e8 fb 7b ff ff       	call   c001394a <Directory::Directory(char const*, Process*)>
c001bd4f:	83 c4 10             	add    esp,0x10
c001bd52:	85 db                	test   ebx,ebx
c001bd54:	74 32                	je     c001bd88 <sysCallMakeDir(regs*)+0x62>
c001bd56:	83 ec 0c             	sub    esp,0xc
c001bd59:	53                   	push   ebx
c001bd5a:	e8 2f 7e ff ff       	call   c0013b8e <Directory::create()>
c001bd5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd62:	89 c6                	mov    esi,eax
c001bd64:	e8 a1 7c ff ff       	call   c0013a0a <Directory::close()>
c001bd69:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd6e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd71:	83 c4 10             	add    esp,0x10
c001bd74:	31 c0                	xor    eax,eax
c001bd76:	59                   	pop    ecx
c001bd77:	85 f6                	test   esi,esi
c001bd79:	5b                   	pop    ebx
c001bd7a:	0f 95 c0             	setne  al
c001bd7d:	5e                   	pop    esi
c001bd7e:	31 d2                	xor    edx,edx
c001bd80:	f7 d8                	neg    eax
c001bd82:	83 d2 00             	adc    edx,0x0
c001bd85:	f7 da                	neg    edx
c001bd87:	c3                   	ret    
c001bd88:	59                   	pop    ecx
c001bd89:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd8e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd93:	5b                   	pop    ebx
c001bd94:	5e                   	pop    esi
c001bd95:	c3                   	ret    

c001bd96 <sysCallWait(regs*)>:
c001bd96:	83 ec 10             	sub    esp,0x10
c001bd99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd9d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bda0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bda3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bda6:	e8 ce 24 00 00       	call   c001e279 <waitTask(int, int*, int)>
c001bdab:	83 c4 1c             	add    esp,0x1c
c001bdae:	99                   	cdq    
c001bdaf:	c3                   	ret    

c001bdb0 <sysCallNotImpl(regs*)>:
c001bdb0:	83 ec 18             	sub    esp,0x18
c001bdb3:	68 fa bd 02 c0       	push   0xc002bdfa
c001bdb8:	e8 2a e8 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001bdbd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdc2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdc7:	83 c4 1c             	add    esp,0x1c
c001bdca:	c3                   	ret    

c001bdcb <sysPanic(regs*)>:
c001bdcb:	83 ec 18             	sub    esp,0x18
c001bdce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bdd2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdd5:	e8 0d e8 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001bdda:	c7 04 24 14 be 02 c0 	mov    DWORD PTR [esp],0xc002be14
c001bde1:	e8 01 e8 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001bde6:	b8 01 00 00 00       	mov    eax,0x1
c001bdeb:	31 d2                	xor    edx,edx
c001bded:	83 c4 1c             	add    esp,0x1c
c001bdf0:	c3                   	ret    

c001bdf1 <sysCallRmdir(regs*)>:
c001bdf1:	56                   	push   esi
c001bdf2:	53                   	push   ebx
c001bdf3:	83 ec 20             	sub    esp,0x20
c001bdf6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bdfa:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bdfd:	68 14 01 00 00       	push   0x114
c001be02:	e8 39 3a ff ff       	call   c000f840 <malloc>
c001be07:	83 c4 0c             	add    esp,0xc
c001be0a:	89 c3                	mov    ebx,eax
c001be0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be11:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be14:	56                   	push   esi
c001be15:	53                   	push   ebx
c001be16:	e8 83 76 ff ff       	call   c001349e <File::File(char const*, Process*)>
c001be1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be1e:	e8 57 78 ff ff       	call   c001367a <File::unlink()>
c001be23:	83 c4 10             	add    esp,0x10
c001be26:	85 db                	test   ebx,ebx
c001be28:	74 14                	je     c001be3e <sysCallRmdir(regs*)+0x4d>
c001be2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be2e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be30:	83 ec 0c             	sub    esp,0xc
c001be33:	53                   	push   ebx
c001be34:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be37:	83 c4 10             	add    esp,0x10
c001be3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be3e:	85 c0                	test   eax,eax
c001be40:	0f 95 c0             	setne  al
c001be43:	31 d2                	xor    edx,edx
c001be45:	0f b6 c0             	movzx  eax,al
c001be48:	f7 d8                	neg    eax
c001be4a:	83 d2 00             	adc    edx,0x0
c001be4d:	83 c4 14             	add    esp,0x14
c001be50:	f7 da                	neg    edx
c001be52:	5b                   	pop    ebx
c001be53:	5e                   	pop    esi
c001be54:	c3                   	ret    

c001be55 <sysCallUnlink(regs*)>:
c001be55:	56                   	push   esi
c001be56:	53                   	push   ebx
c001be57:	83 ec 20             	sub    esp,0x20
c001be5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be5e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be61:	68 14 01 00 00       	push   0x114
c001be66:	e8 d5 39 ff ff       	call   c000f840 <malloc>
c001be6b:	83 c4 0c             	add    esp,0xc
c001be6e:	89 c3                	mov    ebx,eax
c001be70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be75:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be78:	56                   	push   esi
c001be79:	53                   	push   ebx
c001be7a:	e8 1f 76 ff ff       	call   c001349e <File::File(char const*, Process*)>
c001be7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be82:	e8 f3 77 ff ff       	call   c001367a <File::unlink()>
c001be87:	83 c4 10             	add    esp,0x10
c001be8a:	85 db                	test   ebx,ebx
c001be8c:	74 14                	je     c001bea2 <sysCallUnlink(regs*)+0x4d>
c001be8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be92:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be94:	83 ec 0c             	sub    esp,0xc
c001be97:	53                   	push   ebx
c001be98:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be9b:	83 c4 10             	add    esp,0x10
c001be9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bea2:	85 c0                	test   eax,eax
c001bea4:	0f 95 c0             	setne  al
c001bea7:	31 d2                	xor    edx,edx
c001bea9:	0f b6 c0             	movzx  eax,al
c001beac:	f7 d8                	neg    eax
c001beae:	83 d2 00             	adc    edx,0x0
c001beb1:	83 c4 14             	add    esp,0x14
c001beb4:	f7 da                	neg    edx
c001beb6:	5b                   	pop    ebx
c001beb7:	5e                   	pop    esi
c001beb8:	c3                   	ret    

c001beb9 <sysCallGetArgv(regs*)>:
c001beb9:	83 ec 0c             	sub    esp,0xc
c001bebc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bec0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bec3:	85 c0                	test   eax,eax
c001bec5:	78 2b                	js     c001bef2 <sysCallGetArgv(regs*)+0x39>
c001bec7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001becd:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bed0:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bed6:	7d 1a                	jge    c001bef2 <sysCallGetArgv(regs*)+0x39>
c001bed8:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bedf:	85 c0                	test   eax,eax
c001bee1:	74 17                	je     c001befa <sysCallGetArgv(regs*)+0x41>
c001bee3:	83 ec 08             	sub    esp,0x8
c001bee6:	50                   	push   eax
c001bee7:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001beea:	e8 45 49 fe ff       	call   c0000834 <strcpy>
c001beef:	83 c4 10             	add    esp,0x10
c001bef2:	31 c0                	xor    eax,eax
c001bef4:	31 d2                	xor    edx,edx
c001bef6:	83 c4 0c             	add    esp,0xc
c001bef9:	c3                   	ret    
c001befa:	b8 01 00 00 00       	mov    eax,0x1
c001beff:	31 d2                	xor    edx,edx
c001bf01:	83 c4 0c             	add    esp,0xc
c001bf04:	c3                   	ret    

c001bf05 <sysCallTTYName(regs*)>:
c001bf05:	56                   	push   esi
c001bf06:	53                   	push   ebx
c001bf07:	53                   	push   ebx
c001bf08:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf0c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf0f:	85 c0                	test   eax,eax
c001bf11:	74 5f                	je     c001bf72 <sysCallTTYName(regs*)+0x6d>
c001bf13:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf16:	83 f8 02             	cmp    eax,0x2
c001bf19:	77 3e                	ja     c001bf59 <sysCallTTYName(regs*)+0x54>
c001bf1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf23:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf29:	85 db                	test   ebx,ebx
c001bf2b:	74 45                	je     c001bf72 <sysCallTTYName(regs*)+0x6d>
c001bf2d:	83 ec 0c             	sub    esp,0xc
c001bf30:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf32:	53                   	push   ebx
c001bf33:	ff 10                	call   DWORD PTR [eax]
c001bf35:	83 c4 10             	add    esp,0x10
c001bf38:	84 c0                	test   al,al
c001bf3a:	74 41                	je     c001bf7d <sysCallTTYName(regs*)+0x78>
c001bf3c:	83 ec 08             	sub    esp,0x8
c001bf3f:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bf45:	53                   	push   ebx
c001bf46:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf49:	e8 e6 48 fe ff       	call   c0000834 <strcpy>
c001bf4e:	83 c4 10             	add    esp,0x10
c001bf51:	31 c0                	xor    eax,eax
c001bf53:	59                   	pop    ecx
c001bf54:	31 d2                	xor    edx,edx
c001bf56:	5b                   	pop    ebx
c001bf57:	5e                   	pop    esi
c001bf58:	c3                   	ret    
c001bf59:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf5e:	74 bb                	je     c001bf1b <sysCallTTYName(regs*)+0x16>
c001bf60:	83 ec 0c             	sub    esp,0xc
c001bf63:	50                   	push   eax
c001bf64:	e8 e0 5a ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bf69:	83 c4 10             	add    esp,0x10
c001bf6c:	89 c3                	mov    ebx,eax
c001bf6e:	85 db                	test   ebx,ebx
c001bf70:	75 bb                	jne    c001bf2d <sysCallTTYName(regs*)+0x28>
c001bf72:	59                   	pop    ecx
c001bf73:	b8 01 00 00 00       	mov    eax,0x1
c001bf78:	31 d2                	xor    edx,edx
c001bf7a:	5b                   	pop    ebx
c001bf7b:	5e                   	pop    esi
c001bf7c:	c3                   	ret    
c001bf7d:	59                   	pop    ecx
c001bf7e:	b8 02 00 00 00       	mov    eax,0x2
c001bf83:	31 d2                	xor    edx,edx
c001bf85:	5b                   	pop    ebx
c001bf86:	5e                   	pop    esi
c001bf87:	c3                   	ret    

c001bf88 <sysCallUSleep(regs*)>:
c001bf88:	83 ec 14             	sub    esp,0x14
c001bf8b:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bf90:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf94:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bf9b:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bf9e:	01 ca                	add    edx,ecx
c001bfa0:	52                   	push   edx
c001bfa1:	50                   	push   eax
c001bfa2:	e8 6b 23 00 00       	call   c001e312 <nanoSleep(unsigned long long)>
c001bfa7:	31 c0                	xor    eax,eax
c001bfa9:	31 d2                	xor    edx,edx
c001bfab:	83 c4 1c             	add    esp,0x1c
c001bfae:	c3                   	ret    

c001bfaf <sysCallSpawn(regs*)>:
c001bfaf:	56                   	push   esi
c001bfb0:	53                   	push   ebx
c001bfb1:	53                   	push   ebx
c001bfb2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfb6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bfb9:	85 f6                	test   esi,esi
c001bfbb:	75 08                	jne    c001bfc5 <sysCallSpawn(regs*)+0x16>
c001bfbd:	59                   	pop    ecx
c001bfbe:	31 c0                	xor    eax,eax
c001bfc0:	31 d2                	xor    edx,edx
c001bfc2:	5b                   	pop    ebx
c001bfc3:	5e                   	pop    esi
c001bfc4:	c3                   	ret    
c001bfc5:	83 ec 0c             	sub    esp,0xc
c001bfc8:	68 3f 07 00 00       	push   0x73f
c001bfcd:	e8 6e 38 ff ff       	call   c000f840 <malloc>
c001bfd2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bfd5:	89 c6                	mov    esi,eax
c001bfd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfdc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfdf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bfe2:	56                   	push   esi
c001bfe3:	e8 2a 1a 00 00       	call   c001da12 <Process::Process(char const*, Process*, char**)>
c001bfe8:	83 c4 20             	add    esp,0x20
c001bfeb:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bff2:	75 c9                	jne    c001bfbd <sysCallSpawn(regs*)+0xe>
c001bff4:	83 ec 0c             	sub    esp,0xc
c001bff7:	56                   	push   esi
c001bff8:	e8 db 1f 00 00       	call   c001dfd8 <Process::createUserThread()>
c001bffd:	8b 06                	mov    eax,DWORD PTR [esi]
c001bfff:	83 c4 10             	add    esp,0x10
c001c002:	99                   	cdq    
c001c003:	59                   	pop    ecx
c001c004:	5b                   	pop    ebx
c001c005:	5e                   	pop    esi
c001c006:	c3                   	ret    

c001c007 <sysCallGetEnv(regs*)>:
c001c007:	55                   	push   ebp
c001c008:	57                   	push   edi
c001c009:	56                   	push   esi
c001c00a:	53                   	push   ebx
c001c00b:	83 ec 28             	sub    esp,0x28
c001c00e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c012:	68 23 be 02 c0       	push   0xc002be23
c001c017:	e8 2a 6f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001c01c:	5f                   	pop    edi
c001c01d:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c020:	5d                   	pop    ebp
c001c021:	53                   	push   ebx
c001c022:	68 52 c1 02 c0       	push   0xc002c152
c001c027:	e8 1a 6f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001c02c:	58                   	pop    eax
c001c02d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c030:	5a                   	pop    edx
c001c031:	57                   	push   edi
c001c032:	68 2c be 02 c0       	push   0xc002be2c
c001c037:	e8 0a 6f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001c03c:	59                   	pop    ecx
c001c03d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c042:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c045:	e8 b9 e4 ff ff       	call   c001a503 <Krnl::getProcessTotalEnvCount(Process*)>
c001c04a:	5a                   	pop    edx
c001c04b:	89 c5                	mov    ebp,eax
c001c04d:	59                   	pop    ecx
c001c04e:	50                   	push   eax
c001c04f:	68 36 be 02 c0       	push   0xc002be36
c001c054:	e8 ed 6e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001c059:	83 c4 10             	add    esp,0x10
c001c05c:	39 ef                	cmp    edi,ebp
c001c05e:	7c 15                	jl     c001c075 <sysCallGetEnv(regs*)+0x6e>
c001c060:	85 db                	test   ebx,ebx
c001c062:	75 0c                	jne    c001c070 <sysCallGetEnv(regs*)+0x69>
c001c064:	83 c4 1c             	add    esp,0x1c
c001c067:	31 c0                	xor    eax,eax
c001c069:	5b                   	pop    ebx
c001c06a:	31 d2                	xor    edx,edx
c001c06c:	5e                   	pop    esi
c001c06d:	5f                   	pop    edi
c001c06e:	5d                   	pop    ebp
c001c06f:	c3                   	ret    
c001c070:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c073:	eb ef                	jmp    c001c064 <sysCallGetEnv(regs*)+0x5d>
c001c075:	83 ec 0c             	sub    esp,0xc
c001c078:	68 42 be 02 c0       	push   0xc002be42
c001c07d:	e8 c4 6e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001c082:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c086:	83 c4 0c             	add    esp,0xc
c001c089:	57                   	push   edi
c001c08a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c090:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c093:	50                   	push   eax
c001c094:	e8 8a e4 ff ff       	call   c001a523 <Krnl::getProcessEnvPair(Process*, int)>
c001c099:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c09d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0a1:	68 d1 c1 02 c0       	push   0xc002c1d1
c001c0a6:	e8 9b 6e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001c0ab:	83 c4 10             	add    esp,0x10
c001c0ae:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c0b1:	85 f6                	test   esi,esi
c001c0b3:	75 47                	jne    c001c0fc <sysCallGetEnv(regs*)+0xf5>
c001c0b5:	83 ec 0c             	sub    esp,0xc
c001c0b8:	55                   	push   ebp
c001c0b9:	e8 d6 46 fe ff       	call   c0000794 <strlen>
c001c0be:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0c1:	89 c3                	mov    ebx,eax
c001c0c3:	e8 cc 46 fe ff       	call   c0000794 <strlen>
c001c0c8:	5a                   	pop    edx
c001c0c9:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0cd:	59                   	pop    ecx
c001c0ce:	50                   	push   eax
c001c0cf:	68 45 be 02 c0       	push   0xc002be45
c001c0d4:	e8 6d 6e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001c0d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c0dc:	e8 b3 46 fe ff       	call   c0000794 <strlen>
c001c0e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0e4:	89 c3                	mov    ebx,eax
c001c0e6:	e8 a9 46 fe ff       	call   c0000794 <strlen>
c001c0eb:	83 c4 10             	add    esp,0x10
c001c0ee:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0f2:	83 c4 1c             	add    esp,0x1c
c001c0f5:	31 d2                	xor    edx,edx
c001c0f7:	5b                   	pop    ebx
c001c0f8:	5e                   	pop    esi
c001c0f9:	5f                   	pop    edi
c001c0fa:	5d                   	pop    ebp
c001c0fb:	c3                   	ret    
c001c0fc:	83 ec 0c             	sub    esp,0xc
c001c0ff:	68 eb c1 02 c0       	push   0xc002c1eb
c001c104:	e8 3d 6e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001c109:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c10c:	58                   	pop    eax
c001c10d:	5a                   	pop    edx
c001c10e:	55                   	push   ebp
c001c10f:	53                   	push   ebx
c001c110:	e8 1f 47 fe ff       	call   c0000834 <strcpy>
c001c115:	59                   	pop    ecx
c001c116:	5e                   	pop    esi
c001c117:	68 4f be 02 c0       	push   0xc002be4f
c001c11c:	53                   	push   ebx
c001c11d:	e8 52 48 fe ff       	call   c0000974 <strcat>
c001c122:	5d                   	pop    ebp
c001c123:	58                   	pop    eax
c001c124:	57                   	push   edi
c001c125:	53                   	push   ebx
c001c126:	e8 49 48 fe ff       	call   c0000974 <strcat>
c001c12b:	c7 04 24 05 c2 02 c0 	mov    DWORD PTR [esp],0xc002c205
c001c132:	e8 0f 6e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001c137:	83 c4 10             	add    esp,0x10
c001c13a:	e9 25 ff ff ff       	jmp    c001c064 <sysCallGetEnv(regs*)+0x5d>

c001c13f <sysAppSettings(regs*)>:
c001c13f:	53                   	push   ebx
c001c140:	83 ec 08             	sub    esp,0x8
c001c143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c147:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c14a:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c150:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c155:	66 3d c0 09          	cmp    ax,0x9c0
c001c159:	75 2f                	jne    c001c18a <sysAppSettings(regs*)+0x4b>
c001c15b:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c161:	83 e0 1f             	and    eax,0x1f
c001c164:	3c 01                	cmp    al,0x1
c001c166:	74 2e                	je     c001c196 <sysAppSettings(regs*)+0x57>
c001c168:	3c 07                	cmp    al,0x7
c001c16a:	0f 84 bd 00 00 00    	je     c001c22d <sysAppSettings(regs*)+0xee>
c001c170:	84 c0                	test   al,al
c001c172:	0f 84 dc 00 00 00    	je     c001c254 <sysAppSettings(regs*)+0x115>
c001c178:	3c 08                	cmp    al,0x8
c001c17a:	74 6d                	je     c001c1e9 <sysAppSettings(regs*)+0xaa>
c001c17c:	0f b6 c0             	movzx  eax,al
c001c17f:	83 c4 08             	add    esp,0x8
c001c182:	05 e8 03 00 00       	add    eax,0x3e8
c001c187:	5b                   	pop    ebx
c001c188:	99                   	cdq    
c001c189:	c3                   	ret    
c001c18a:	b8 01 00 00 00       	mov    eax,0x1
c001c18f:	31 d2                	xor    edx,edx
c001c191:	83 c4 08             	add    esp,0x8
c001c194:	5b                   	pop    ebx
c001c195:	c3                   	ret    
c001c196:	51                   	push   ecx
c001c197:	68 00 01 00 00       	push   0x100
c001c19c:	6a 00                	push   0x0
c001c19e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1a6:	83 c0 0c             	add    eax,0xc
c001c1a9:	50                   	push   eax
c001c1aa:	e8 c9 45 fe ff       	call   c0000778 <memset>
c001c1af:	83 c4 0c             	add    esp,0xc
c001c1b2:	68 ff 00 00 00       	push   0xff
c001c1b7:	53                   	push   ebx
c001c1b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1c0:	83 c0 0c             	add    eax,0xc
c001c1c3:	50                   	push   eax
c001c1c4:	e8 7b 45 fe ff       	call   c0000744 <memcpy>
c001c1c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1ce:	5b                   	pop    ebx
c001c1cf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1d2:	5a                   	pop    edx
c001c1d3:	8d 50 0c             	lea    edx,[eax+0xc]
c001c1d6:	52                   	push   edx
c001c1d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1dd:	e8 e2 49 ff ff       	call   c0010bc4 <VgaText::setTitle(char*)>
c001c1e2:	83 c4 10             	add    esp,0x10
c001c1e5:	31 c0                	xor    eax,eax
c001c1e7:	eb a6                	jmp    c001c18f <sysAppSettings(regs*)+0x50>
c001c1e9:	83 ec 08             	sub    esp,0x8
c001c1ec:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c1f2:	83 e0 0f             	and    eax,0xf
c001c1f5:	50                   	push   eax
c001c1f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c204:	e8 ab 49 ff ff       	call   c0010bb4 <VgaText::setTitleColour(VgaColour)>
c001c209:	58                   	pop    eax
c001c20a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c210:	5a                   	pop    edx
c001c211:	c1 e8 04             	shr    eax,0x4
c001c214:	83 e0 0f             	and    eax,0xf
c001c217:	50                   	push   eax
c001c218:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c21d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c220:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c226:	e8 79 49 ff ff       	call   c0010ba4 <VgaText::setTitleTextColour(VgaColour)>
c001c22b:	eb b5                	jmp    c001c1e2 <sysAppSettings(regs*)+0xa3>
c001c22d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c232:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c235:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c23b:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c241:	c0 e8 06             	shr    al,0x6
c001c244:	83 e0 01             	and    eax,0x1
c001c247:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c24d:	31 c0                	xor    eax,eax
c001c24f:	e9 3b ff ff ff       	jmp    c001c18f <sysAppSettings(regs*)+0x50>
c001c254:	b8 02 00 00 00       	mov    eax,0x2
c001c259:	e9 31 ff ff ff       	jmp    c001c18f <sysAppSettings(regs*)+0x50>

c001c25e <sysSetFatAttrib(regs*)>:
c001c25e:	57                   	push   edi
c001c25f:	56                   	push   esi
c001c260:	53                   	push   ebx
c001c261:	83 ec 1c             	sub    esp,0x1c
c001c264:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c268:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c26b:	68 14 01 00 00       	push   0x114
c001c270:	e8 cb 35 ff ff       	call   c000f840 <malloc>
c001c275:	83 c4 0c             	add    esp,0xc
c001c278:	89 c3                	mov    ebx,eax
c001c27a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c27f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c282:	57                   	push   edi
c001c283:	53                   	push   ebx
c001c284:	e8 15 72 ff ff       	call   c001349e <File::File(char const*, Process*)>
c001c289:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c28c:	83 c4 0c             	add    esp,0xc
c001c28f:	0f b6 d4             	movzx  edx,ah
c001c292:	0f b6 c0             	movzx  eax,al
c001c295:	52                   	push   edx
c001c296:	50                   	push   eax
c001c297:	53                   	push   ebx
c001c298:	e8 77 74 ff ff       	call   c0013714 <File::chfatattr(unsigned char, unsigned char)>
c001c29d:	83 c4 10             	add    esp,0x10
c001c2a0:	85 db                	test   ebx,ebx
c001c2a2:	74 14                	je     c001c2b8 <sysSetFatAttrib(regs*)+0x5a>
c001c2a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2a8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2aa:	83 ec 0c             	sub    esp,0xc
c001c2ad:	53                   	push   ebx
c001c2ae:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2b1:	83 c4 10             	add    esp,0x10
c001c2b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2b8:	85 c0                	test   eax,eax
c001c2ba:	0f 95 c0             	setne  al
c001c2bd:	31 d2                	xor    edx,edx
c001c2bf:	0f b6 c0             	movzx  eax,al
c001c2c2:	f7 d8                	neg    eax
c001c2c4:	83 d2 00             	adc    edx,0x0
c001c2c7:	83 c4 10             	add    esp,0x10
c001c2ca:	f7 da                	neg    edx
c001c2cc:	5b                   	pop    ebx
c001c2cd:	5e                   	pop    esi
c001c2ce:	5f                   	pop    edi
c001c2cf:	c3                   	ret    

c001c2d0 <sysPipe(regs*)>:
c001c2d0:	57                   	push   edi
c001c2d1:	56                   	push   esi
c001c2d2:	53                   	push   ebx
c001c2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d7:	83 ec 0c             	sub    esp,0xc
c001c2da:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c2dd:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c2e0:	6a 20                	push   0x20
c001c2e2:	e8 59 35 ff ff       	call   c000f840 <malloc>
c001c2e7:	89 c3                	mov    ebx,eax
c001c2e9:	58                   	pop    eax
c001c2ea:	5a                   	pop    edx
c001c2eb:	68 00 50 00 00       	push   0x5000
c001c2f0:	53                   	push   ebx
c001c2f1:	e8 fe 41 ff ff       	call   c00104f4 <Pipe::Pipe(int)>
c001c2f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2f9:	e8 56 54 ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001c2fe:	89 07                	mov    DWORD PTR [edi],eax
c001c300:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c303:	e8 4c 54 ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001c308:	83 c4 10             	add    esp,0x10
c001c30b:	89 06                	mov    DWORD PTR [esi],eax
c001c30d:	31 d2                	xor    edx,edx
c001c30f:	5b                   	pop    ebx
c001c310:	31 c0                	xor    eax,eax
c001c312:	5e                   	pop    esi
c001c313:	5f                   	pop    edi
c001c314:	c3                   	ret    

c001c315 <sysGetUnixTime(regs*)>:
c001c315:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001c31a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c320:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c324:	e9 5f 7b ff ff       	jmp    c0013e88 <Clock::timeInSecondsLocal()>

c001c329 <string_ends_with(char const*, char const*)>:
c001c329:	57                   	push   edi
c001c32a:	56                   	push   esi
c001c32b:	53                   	push   ebx
c001c32c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c330:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c334:	83 ec 0c             	sub    esp,0xc
c001c337:	53                   	push   ebx
c001c338:	e8 57 44 fe ff       	call   c0000794 <strlen>
c001c33d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c340:	89 c6                	mov    esi,eax
c001c342:	e8 4d 44 fe ff       	call   c0000794 <strlen>
c001c347:	83 c4 10             	add    esp,0x10
c001c34a:	39 c6                	cmp    esi,eax
c001c34c:	7d 06                	jge    c001c354 <string_ends_with(char const*, char const*)+0x2b>
c001c34e:	5b                   	pop    ebx
c001c34f:	31 c0                	xor    eax,eax
c001c351:	5e                   	pop    esi
c001c352:	5f                   	pop    edi
c001c353:	c3                   	ret    
c001c354:	83 ec 08             	sub    esp,0x8
c001c357:	29 c6                	sub    esi,eax
c001c359:	57                   	push   edi
c001c35a:	01 f3                	add    ebx,esi
c001c35c:	53                   	push   ebx
c001c35d:	e8 5e 45 fe ff       	call   c00008c0 <strcmp>
c001c362:	83 c4 10             	add    esp,0x10
c001c365:	85 c0                	test   eax,eax
c001c367:	5b                   	pop    ebx
c001c368:	0f 94 c0             	sete   al
c001c36b:	5e                   	pop    esi
c001c36c:	0f b6 c0             	movzx  eax,al
c001c36f:	5f                   	pop    edi
c001c370:	c3                   	ret    

c001c371 <sysCallOpen(regs*)>:
c001c371:	56                   	push   esi
c001c372:	53                   	push   ebx
c001c373:	81 ec 04 01 00 00    	sub    esp,0x104
c001c379:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c380:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c383:	85 c9                	test   ecx,ecx
c001c385:	0f 84 b3 00 00 00    	je     c001c43e <sysCallOpen(regs*)+0xcd>
c001c38b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c38e:	85 c0                	test   eax,eax
c001c390:	0f 84 a8 00 00 00    	je     c001c43e <sysCallOpen(regs*)+0xcd>
c001c396:	52                   	push   edx
c001c397:	68 51 be 02 c0       	push   0xc002be51
c001c39c:	50                   	push   eax
c001c39d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3a1:	56                   	push   esi
c001c3a2:	e8 4d 6f ff ff       	call   c00132f4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c3a7:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3aa:	e8 e5 43 fe ff       	call   c0000794 <strlen>
c001c3af:	83 c4 10             	add    esp,0x10
c001c3b2:	48                   	dec    eax
c001c3b3:	74 1d                	je     c001c3d2 <sysCallOpen(regs*)+0x61>
c001c3b5:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c3b8:	eb 0f                	jmp    c001c3c9 <sysCallOpen(regs*)+0x58>
c001c3ba:	80 fa 3a             	cmp    dl,0x3a
c001c3bd:	74 0f                	je     c001c3ce <sysCallOpen(regs*)+0x5d>
c001c3bf:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c3c3:	48                   	dec    eax
c001c3c4:	74 0c                	je     c001c3d2 <sysCallOpen(regs*)+0x61>
c001c3c6:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c3c9:	80 fa 2e             	cmp    dl,0x2e
c001c3cc:	75 ec                	jne    c001c3ba <sysCallOpen(regs*)+0x49>
c001c3ce:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c3d2:	83 ec 08             	sub    esp,0x8
c001c3d5:	68 55 be 02 c0       	push   0xc002be55
c001c3da:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3dd:	e8 47 ff ff ff       	call   c001c329 <string_ends_with(char const*, char const*)>
c001c3e2:	83 c4 10             	add    esp,0x10
c001c3e5:	85 c0                	test   eax,eax
c001c3e7:	75 17                	jne    c001c400 <sysCallOpen(regs*)+0x8f>
c001c3e9:	83 ec 08             	sub    esp,0x8
c001c3ec:	68 76 be 02 c0       	push   0xc002be76
c001c3f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3f4:	e8 30 ff ff ff       	call   c001c329 <string_ends_with(char const*, char const*)>
c001c3f9:	83 c4 10             	add    esp,0x10
c001c3fc:	85 c0                	test   eax,eax
c001c3fe:	74 51                	je     c001c451 <sysCallOpen(regs*)+0xe0>
c001c400:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c403:	83 ec 08             	sub    esp,0x8
c001c406:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c40c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c413:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c416:	ff 30                	push   DWORD PTR [eax]
c001c418:	68 5a be 02 c0       	push   0xc002be5a
c001c41d:	e8 24 6b ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001c422:	c7 04 24 69 be 02 c0 	mov    DWORD PTR [esp],0xc002be69
c001c429:	e8 18 6b ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001c42e:	83 c4 10             	add    esp,0x10
c001c431:	81 c4 04 01 00 00    	add    esp,0x104
c001c437:	31 c0                	xor    eax,eax
c001c439:	31 d2                	xor    edx,edx
c001c43b:	5b                   	pop    ebx
c001c43c:	5e                   	pop    esi
c001c43d:	c3                   	ret    
c001c43e:	81 c4 04 01 00 00    	add    esp,0x104
c001c444:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c449:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c44e:	5b                   	pop    ebx
c001c44f:	5e                   	pop    esi
c001c450:	c3                   	ret    
c001c451:	83 ec 08             	sub    esp,0x8
c001c454:	68 56 be 02 c0       	push   0xc002be56
c001c459:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c45c:	e8 5f 44 fe ff       	call   c00008c0 <strcmp>
c001c461:	83 c4 10             	add    esp,0x10
c001c464:	85 c0                	test   eax,eax
c001c466:	74 98                	je     c001c400 <sysCallOpen(regs*)+0x8f>
c001c468:	83 ec 08             	sub    esp,0x8
c001c46b:	68 55 be 02 c0       	push   0xc002be55
c001c470:	56                   	push   esi
c001c471:	e8 b3 fe ff ff       	call   c001c329 <string_ends_with(char const*, char const*)>
c001c476:	83 c4 10             	add    esp,0x10
c001c479:	85 c0                	test   eax,eax
c001c47b:	75 83                	jne    c001c400 <sysCallOpen(regs*)+0x8f>
c001c47d:	83 ec 08             	sub    esp,0x8
c001c480:	68 7b be 02 c0       	push   0xc002be7b
c001c485:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c488:	e8 9c fe ff ff       	call   c001c329 <string_ends_with(char const*, char const*)>
c001c48d:	83 c4 10             	add    esp,0x10
c001c490:	85 c0                	test   eax,eax
c001c492:	0f 85 d9 00 00 00    	jne    c001c571 <sysCallOpen(regs*)+0x200>
c001c498:	83 ec 08             	sub    esp,0x8
c001c49b:	68 80 be 02 c0       	push   0xc002be80
c001c4a0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4a3:	e8 81 fe ff ff       	call   c001c329 <string_ends_with(char const*, char const*)>
c001c4a8:	83 c4 10             	add    esp,0x10
c001c4ab:	85 c0                	test   eax,eax
c001c4ad:	0f 85 be 00 00 00    	jne    c001c571 <sysCallOpen(regs*)+0x200>
c001c4b3:	83 ec 08             	sub    esp,0x8
c001c4b6:	68 7c be 02 c0       	push   0xc002be7c
c001c4bb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4be:	e8 fd 43 fe ff       	call   c00008c0 <strcmp>
c001c4c3:	83 c4 10             	add    esp,0x10
c001c4c6:	85 c0                	test   eax,eax
c001c4c8:	0f 84 a3 00 00 00    	je     c001c571 <sysCallOpen(regs*)+0x200>
c001c4ce:	83 ec 08             	sub    esp,0x8
c001c4d1:	68 7b be 02 c0       	push   0xc002be7b
c001c4d6:	56                   	push   esi
c001c4d7:	e8 4d fe ff ff       	call   c001c329 <string_ends_with(char const*, char const*)>
c001c4dc:	83 c4 10             	add    esp,0x10
c001c4df:	85 c0                	test   eax,eax
c001c4e1:	0f 85 8a 00 00 00    	jne    c001c571 <sysCallOpen(regs*)+0x200>
c001c4e7:	83 ec 0c             	sub    esp,0xc
c001c4ea:	68 14 01 00 00       	push   0x114
c001c4ef:	e8 4c 33 ff ff       	call   c000f840 <malloc>
c001c4f4:	83 c4 0c             	add    esp,0xc
c001c4f7:	89 c6                	mov    esi,eax
c001c4f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4fe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c501:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c504:	56                   	push   esi
c001c505:	e8 94 6f ff ff       	call   c001349e <File::File(char const*, Process*)>
c001c50a:	83 c4 10             	add    esp,0x10
c001c50d:	85 f6                	test   esi,esi
c001c50f:	0f 84 29 ff ff ff    	je     c001c43e <sysCallOpen(regs*)+0xcd>
c001c515:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c518:	0f b6 c2             	movzx  eax,dl
c001c51b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c51e:	89 d0                	mov    eax,edx
c001c520:	83 e0 01             	and    eax,0x1
c001c523:	f6 c2 02             	test   dl,0x2
c001c526:	74 03                	je     c001c52b <sysCallOpen(regs*)+0x1ba>
c001c528:	83 c8 02             	or     eax,0x2
c001c52b:	f6 c2 04             	test   dl,0x4
c001c52e:	74 03                	je     c001c533 <sysCallOpen(regs*)+0x1c2>
c001c530:	83 c8 04             	or     eax,0x4
c001c533:	f6 c2 08             	test   dl,0x8
c001c536:	74 03                	je     c001c53b <sysCallOpen(regs*)+0x1ca>
c001c538:	83 c8 0a             	or     eax,0xa
c001c53b:	83 e2 10             	and    edx,0x10
c001c53e:	74 03                	je     c001c543 <sysCallOpen(regs*)+0x1d2>
c001c540:	83 c8 12             	or     eax,0x12
c001c543:	83 ec 08             	sub    esp,0x8
c001c546:	50                   	push   eax
c001c547:	56                   	push   esi
c001c548:	e8 b5 6f ff ff       	call   c0013502 <File::open(FileOpenMode)>
c001c54d:	83 c4 10             	add    esp,0x10
c001c550:	85 c0                	test   eax,eax
c001c552:	0f 85 e6 fe ff ff    	jne    c001c43e <sysCallOpen(regs*)+0xcd>
c001c558:	83 ec 0c             	sub    esp,0xc
c001c55b:	56                   	push   esi
c001c55c:	e8 f3 51 ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001c561:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c564:	89 02                	mov    DWORD PTR [edx],eax
c001c566:	c1 f8 1f             	sar    eax,0x1f
c001c569:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c56c:	e9 bd fe ff ff       	jmp    c001c42e <sysCallOpen(regs*)+0xbd>
c001c571:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c574:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c57a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c581:	e9 ab fe ff ff       	jmp    c001c431 <sysCallOpen(regs*)+0xc0>

c001c586 <Sys::loadSyscalls()>:
c001c586:	c7 05 20 0f 03 c0 93 b6 01 c0 	mov    DWORD PTR ds:0xc0030f20,0xc001b693
c001c590:	c7 05 24 0f 03 c0 7c b2 01 c0 	mov    DWORD PTR ds:0xc0030f24,0xc001b27c
c001c59a:	c7 05 28 0f 03 c0 e6 b3 01 c0 	mov    DWORD PTR ds:0xc0030f28,0xc001b3e6
c001c5a4:	c7 05 2c 0f 03 c0 c9 b5 01 c0 	mov    DWORD PTR ds:0xc0030f2c,0xc001b5c9
c001c5ae:	c7 05 30 0f 03 c0 7e b3 01 c0 	mov    DWORD PTR ds:0xc0030f30,0xc001b37e
c001c5b8:	c7 05 34 0f 03 c0 b3 b2 01 c0 	mov    DWORD PTR ds:0xc0030f34,0xc001b2b3
c001c5c2:	c7 05 38 0f 03 c0 94 b2 01 c0 	mov    DWORD PTR ds:0xc0030f38,0xc001b294
c001c5cc:	c7 05 3c 0f 03 c0 3b b4 01 c0 	mov    DWORD PTR ds:0xc0030f3c,0xc001b43b
c001c5d6:	c7 05 44 0f 03 c0 c3 bb 01 c0 	mov    DWORD PTR ds:0xc0030f44,0xc001bbc3
c001c5e0:	c7 05 40 0f 03 c0 71 c3 01 c0 	mov    DWORD PTR ds:0xc0030f40,0xc001c371
c001c5ea:	c7 05 48 0f 03 c0 4b bc 01 c0 	mov    DWORD PTR ds:0xc0030f48,0xc001bc4b
c001c5f4:	c7 05 4c 0f 03 c0 b2 b8 01 c0 	mov    DWORD PTR ds:0xc0030f4c,0xc001b8b2
c001c5fe:	c7 05 50 0f 03 c0 ce b6 01 c0 	mov    DWORD PTR ds:0xc0030f50,0xc001b6ce
c001c608:	c7 05 54 0f 03 c0 d3 b6 01 c0 	mov    DWORD PTR ds:0xc0030f54,0xc001b6d3
c001c612:	c7 05 58 0f 03 c0 26 bd 01 c0 	mov    DWORD PTR ds:0xc0030f58,0xc001bd26
c001c61c:	c7 05 5c 0f 03 c0 c0 bc 01 c0 	mov    DWORD PTR ds:0xc0030f5c,0xc001bcc0
c001c626:	c7 05 60 0f 03 c0 9a b9 01 c0 	mov    DWORD PTR ds:0xc0030f60,0xc001b99a
c001c630:	c7 05 64 0f 03 c0 03 ba 01 c0 	mov    DWORD PTR ds:0xc0030f64,0xc001ba03
c001c63a:	c7 05 68 0f 03 c0 80 ba 01 c0 	mov    DWORD PTR ds:0xc0030f68,0xc001ba80
c001c644:	c7 05 6c 0f 03 c0 d8 b6 01 c0 	mov    DWORD PTR ds:0xc0030f6c,0xc001b6d8
c001c64e:	c7 05 70 0f 03 c0 96 bd 01 c0 	mov    DWORD PTR ds:0xc0030f70,0xc001bd96
c001c658:	c7 05 74 0f 03 c0 b0 bd 01 c0 	mov    DWORD PTR ds:0xc0030f74,0xc001bdb0
c001c662:	c7 05 78 0f 03 c0 b0 bd 01 c0 	mov    DWORD PTR ds:0xc0030f78,0xc001bdb0
c001c66c:	c7 05 7c 0f 03 c0 f1 bd 01 c0 	mov    DWORD PTR ds:0xc0030f7c,0xc001bdf1
c001c676:	c7 05 80 0f 03 c0 55 be 01 c0 	mov    DWORD PTR ds:0xc0030f80,0xc001be55
c001c680:	c7 05 84 0f 03 c0 84 b8 01 c0 	mov    DWORD PTR ds:0xc0030f84,0xc001b884
c001c68a:	c7 05 88 0f 03 c0 b9 be 01 c0 	mov    DWORD PTR ds:0xc0030f88,0xc001beb9
c001c694:	c7 05 8c 0f 03 c0 41 b8 01 c0 	mov    DWORD PTR ds:0xc0030f8c,0xc001b841
c001c69e:	c7 05 90 0f 03 c0 05 bf 01 c0 	mov    DWORD PTR ds:0xc0030f90,0xc001bf05
c001c6a8:	c7 05 94 0f 03 c0 40 b9 01 c0 	mov    DWORD PTR ds:0xc0030f94,0xc001b940
c001c6b2:	c7 05 98 0f 03 c0 88 bf 01 c0 	mov    DWORD PTR ds:0xc0030f98,0xc001bf88
c001c6bc:	c7 05 9c 0f 03 c0 03 bb 01 c0 	mov    DWORD PTR ds:0xc0030f9c,0xc001bb03
c001c6c6:	c7 05 a0 0f 03 c0 af bf 01 c0 	mov    DWORD PTR ds:0xc0030fa0,0xc001bfaf
c001c6d0:	c7 05 a4 0f 03 c0 07 c0 01 c0 	mov    DWORD PTR ds:0xc0030fa4,0xc001c007
c001c6da:	c7 05 a8 0f 03 c0 3f c1 01 c0 	mov    DWORD PTR ds:0xc0030fa8,0xc001c13f
c001c6e4:	c7 05 ac 0f 03 c0 e2 b6 01 c0 	mov    DWORD PTR ds:0xc0030fac,0xc001b6e2
c001c6ee:	c7 05 b0 0f 03 c0 4c b7 01 c0 	mov    DWORD PTR ds:0xc0030fb0,0xc001b74c
c001c6f8:	c7 05 b4 0f 03 c0 92 b7 01 c0 	mov    DWORD PTR ds:0xc0030fb4,0xc001b792
c001c702:	c7 05 b8 0f 03 c0 5e c2 01 c0 	mov    DWORD PTR ds:0xc0030fb8,0xc001c25e
c001c70c:	c7 05 bc 0f 03 c0 cb bd 01 c0 	mov    DWORD PTR ds:0xc0030fbc,0xc001bdcb
c001c716:	c7 05 c0 0f 03 c0 e3 b7 01 c0 	mov    DWORD PTR ds:0xc0030fc0,0xc001b7e3
c001c720:	c7 05 c4 0f 03 c0 d0 c2 01 c0 	mov    DWORD PTR ds:0xc0030fc4,0xc001c2d0
c001c72a:	c7 05 c8 0f 03 c0 15 c3 01 c0 	mov    DWORD PTR ds:0xc0030fc8,0xc001c315
c001c734:	c7 05 cc 0f 03 c0 d6 b2 01 c0 	mov    DWORD PTR ds:0xc0030fcc,0xc001b2d6
c001c73e:	c7 05 d0 0f 03 c0 57 b4 01 c0 	mov    DWORD PTR ds:0xc0030fd0,0xc001b457
c001c748:	c7 05 d4 0f 03 c0 7f b5 01 c0 	mov    DWORD PTR ds:0xc0030fd4,0xc001b57f
c001c752:	c7 05 d8 0f 03 c0 46 b2 01 c0 	mov    DWORD PTR ds:0xc0030fd8,0xc001b246
c001c75c:	c7 05 dc 0f 03 c0 31 b6 01 c0 	mov    DWORD PTR ds:0xc0030fdc,0xc001b631
c001c766:	c7 05 e0 0f 03 c0 bf b2 01 c0 	mov    DWORD PTR ds:0xc0030fe0,0xc001b2bf
c001c770:	c3                   	ret    

c001c771 <Sys::systemCall(regs*, void*)>:
c001c771:	53                   	push   ebx
c001c772:	83 ec 08             	sub    esp,0x8
c001c775:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c779:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c77c:	83 f8 7f             	cmp    eax,0x7f
c001c77f:	77 16                	ja     c001c797 <Sys::systemCall(regs*, void*)+0x26>
c001c781:	8b 14 85 20 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf0e0]
c001c788:	85 d2                	test   edx,edx
c001c78a:	74 0b                	je     c001c797 <Sys::systemCall(regs*, void*)+0x26>
c001c78c:	83 ec 0c             	sub    esp,0xc
c001c78f:	53                   	push   ebx
c001c790:	ff d2                	call   edx
c001c792:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c795:	eb 0d                	jmp    c001c7a4 <Sys::systemCall(regs*, void*)+0x33>
c001c797:	52                   	push   edx
c001c798:	52                   	push   edx
c001c799:	50                   	push   eax
c001c79a:	68 85 be 02 c0       	push   0xc002be85
c001c79f:	e8 a2 67 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001c7a4:	83 c4 10             	add    esp,0x10
c001c7a7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c7ac:	31 d2                	xor    edx,edx
c001c7ae:	83 c4 08             	add    esp,0x8
c001c7b1:	5b                   	pop    ebx
c001c7b2:	c3                   	ret    

c001c7b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c7b3:	55                   	push   ebp
c001c7b4:	57                   	push   edi
c001c7b5:	56                   	push   esi
c001c7b6:	53                   	push   ebx
c001c7b7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c7bd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c7c4:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c7cb:	85 c0                	test   eax,eax
c001c7cd:	0f 95 c1             	setne  cl
c001c7d0:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c7d8:	0f 94 c2             	sete   dl
c001c7db:	84 d1                	test   cl,dl
c001c7dd:	74 23                	je     c001c802 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7df:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c7e5:	74 1b                	je     c001c802 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7e7:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c7ed:	89 da                	mov    edx,ebx
c001c7ef:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c7f5:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c7fb:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c802:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c809:	05 ff 0f 00 00       	add    eax,0xfff
c001c80e:	83 ec 0c             	sub    esp,0xc
c001c811:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c815:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c81b:	c1 e8 0c             	shr    eax,0xc
c001c81e:	89 ef                	mov    edi,ebp
c001c820:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c824:	c1 ef 0c             	shr    edi,0xc
c001c827:	6a 01                	push   0x1
c001c829:	e8 71 53 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c001c82e:	89 c6                	mov    esi,eax
c001c830:	58                   	pop    eax
c001c831:	5a                   	pop    edx
c001c832:	57                   	push   edi
c001c833:	68 0b bf 02 c0       	push   0xc002bf0b
c001c838:	e8 09 67 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001c83d:	59                   	pop    ecx
c001c83e:	58                   	pop    eax
c001c83f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c843:	68 1d bf 02 c0       	push   0xc002bf1d
c001c848:	e8 f9 66 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001c84d:	83 c4 10             	add    esp,0x10
c001c850:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c856:	0f 86 24 01 00 00    	jbe    c001c980 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c85c:	c1 e7 0c             	shl    edi,0xc
c001c85f:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c862:	89 df                	mov    edi,ebx
c001c864:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c868:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c86f:	01 dd                	add    ebp,ebx
c001c871:	29 fd                	sub    ebp,edi
c001c873:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c877:	0f 84 01 01 00 00    	je     c001c97e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c87d:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c883:	76 05                	jbe    c001c88a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c885:	bd 00 10 00 00       	mov    ebp,0x1000
c001c88a:	83 ec 0c             	sub    esp,0xc
c001c88d:	31 d2                	xor    edx,edx
c001c88f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c896:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c898:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c89c:	50                   	push   eax
c001c89d:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c8a1:	50                   	push   eax
c001c8a2:	52                   	push   edx
c001c8a3:	55                   	push   ebp
c001c8a4:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c8ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8ae:	83 c4 20             	add    esp,0x20
c001c8b1:	85 c0                	test   eax,eax
c001c8b3:	74 0a                	je     c001c8bf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c8b5:	53                   	push   ebx
c001c8b6:	53                   	push   ebx
c001c8b7:	50                   	push   eax
c001c8b8:	68 2f bf 02 c0       	push   0xc002bf2f
c001c8bd:	eb 0f                	jmp    c001c8ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c8bf:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c8c3:	74 20                	je     c001c8e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c8c5:	51                   	push   ecx
c001c8c6:	51                   	push   ecx
c001c8c7:	6a 00                	push   0x0
c001c8c9:	68 5a bf 02 c0       	push   0xc002bf5a
c001c8ce:	e8 73 66 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001c8d3:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8d6:	e8 34 57 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c001c8db:	83 c4 10             	add    esp,0x10
c001c8de:	31 c0                	xor    eax,eax
c001c8e0:	e9 55 01 00 00       	jmp    c001ca3a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c8e5:	e8 d8 14 00 00       	call   c001ddc2 <lockScheduler()>
c001c8ea:	e8 f3 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c8ef:	6a 07                	push   0x7
c001c8f1:	89 c5                	mov    ebp,eax
c001c8f3:	56                   	push   esi
c001c8f4:	50                   	push   eax
c001c8f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8fd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c903:	e8 6e 5a ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c908:	83 c4 0c             	add    esp,0xc
c001c90b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c912:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c918:	6a 00                	push   0x0
c001c91a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c91f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c922:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c928:	e8 b3 58 ff ff       	call   c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c92d:	58                   	pop    eax
c001c92e:	5a                   	pop    edx
c001c92f:	68 07 0c 00 00       	push   0xc07
c001c934:	57                   	push   edi
c001c935:	81 c7 00 10 00 00    	add    edi,0x1000
c001c93b:	55                   	push   ebp
c001c93c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c943:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c949:	6a 00                	push   0x0
c001c94b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c950:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c953:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c959:	e8 d2 5d ff ff       	call   c0012730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c95e:	83 c4 1c             	add    esp,0x1c
c001c961:	68 00 10 00 00       	push   0x1000
c001c966:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c96a:	50                   	push   eax
c001c96b:	56                   	push   esi
c001c96c:	e8 d3 3d fe ff       	call   c0000744 <memcpy>
c001c971:	e8 4e 14 00 00       	call   c001ddc4 <unlockScheduler()>
c001c976:	83 c4 10             	add    esp,0x10
c001c979:	e9 ea fe ff ff       	jmp    c001c868 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c97e:	89 fb                	mov    ebx,edi
c001c980:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c988:	0f 86 9e 00 00 00    	jbe    c001ca2c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c98e:	e8 2f 14 00 00       	call   c001ddc2 <lockScheduler()>
c001c993:	51                   	push   ecx
c001c994:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c99b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9a1:	6a 00                	push   0x0
c001c9a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9ab:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9b1:	e8 2a 58 ff ff       	call   c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9b6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c9ba:	c1 e7 0c             	shl    edi,0xc
c001c9bd:	01 df                	add    edi,ebx
c001c9bf:	83 c4 10             	add    esp,0x10
c001c9c2:	39 fb                	cmp    ebx,edi
c001c9c4:	74 61                	je     c001ca27 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c9c6:	e8 17 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c9cb:	6a 07                	push   0x7
c001c9cd:	89 c5                	mov    ebp,eax
c001c9cf:	56                   	push   esi
c001c9d0:	50                   	push   eax
c001c9d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9d9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9df:	e8 92 59 ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9e4:	58                   	pop    eax
c001c9e5:	5a                   	pop    edx
c001c9e6:	68 07 0c 00 00       	push   0xc07
c001c9eb:	53                   	push   ebx
c001c9ec:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c9f2:	55                   	push   ebp
c001c9f3:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9fa:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca00:	6a 00                	push   0x0
c001ca02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca07:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca0a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca10:	e8 1b 5d ff ff       	call   c0012730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca15:	83 c4 1c             	add    esp,0x1c
c001ca18:	68 00 10 00 00       	push   0x1000
c001ca1d:	6a 00                	push   0x0
c001ca1f:	56                   	push   esi
c001ca20:	e8 53 3d fe ff       	call   c0000778 <memset>
c001ca25:	eb 98                	jmp    c001c9bf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca27:	e8 98 13 00 00       	call   c001ddc4 <unlockScheduler()>
c001ca2c:	83 ec 0c             	sub    esp,0xc
c001ca2f:	56                   	push   esi
c001ca30:	e8 da 55 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c001ca35:	83 c4 10             	add    esp,0x10
c001ca38:	b0 01                	mov    al,0x1
c001ca3a:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca40:	5b                   	pop    ebx
c001ca41:	5e                   	pop    esi
c001ca42:	5f                   	pop    edi
c001ca43:	5d                   	pop    ebp
c001ca44:	c3                   	ret    

c001ca45 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca45:	55                   	push   ebp
c001ca46:	57                   	push   edi
c001ca47:	56                   	push   esi
c001ca48:	53                   	push   ebx
c001ca49:	83 ec 48             	sub    esp,0x48
c001ca4c:	68 14 01 00 00       	push   0x114
c001ca51:	e8 ea 2d ff ff       	call   c000f840 <malloc>
c001ca56:	83 c4 0c             	add    esp,0xc
c001ca59:	89 c6                	mov    esi,eax
c001ca5b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca5f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca63:	50                   	push   eax
c001ca64:	e8 35 6a ff ff       	call   c001349e <File::File(char const*, Process*)>
c001ca69:	58                   	pop    eax
c001ca6a:	5a                   	pop    edx
c001ca6b:	6a 01                	push   0x1
c001ca6d:	56                   	push   esi
c001ca6e:	e8 8f 6a ff ff       	call   c0013502 <File::open(FileOpenMode)>
c001ca73:	83 c4 10             	add    esp,0x10
c001ca76:	85 c0                	test   eax,eax
c001ca78:	0f 85 47 01 00 00    	jne    c001cbc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca7e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca86:	83 ec 0c             	sub    esp,0xc
c001ca89:	6a 34                	push   0x34
c001ca8b:	e8 b0 2d ff ff       	call   c000f840 <malloc>
c001ca90:	89 c3                	mov    ebx,eax
c001ca92:	58                   	pop    eax
c001ca93:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca95:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ca99:	57                   	push   edi
c001ca9a:	53                   	push   ebx
c001ca9b:	6a 00                	push   0x0
c001ca9d:	6a 34                	push   0x34
c001ca9f:	56                   	push   esi
c001caa0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001caa3:	83 c4 20             	add    esp,0x20
c001caa6:	85 c0                	test   eax,eax
c001caa8:	0f 85 17 01 00 00    	jne    c001cbc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caae:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cab4:	0f 85 0b 01 00 00    	jne    c001cbc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caba:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cabd:	85 c0                	test   eax,eax
c001cabf:	0f 84 00 01 00 00    	je     c001cbc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cac5:	31 d2                	xor    edx,edx
c001cac7:	55                   	push   ebp
c001cac8:	52                   	push   edx
c001cac9:	50                   	push   eax
c001caca:	56                   	push   esi
c001cacb:	e8 f0 6a ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c001cad0:	83 c4 10             	add    esp,0x10
c001cad3:	85 c0                	test   eax,eax
c001cad5:	0f 85 ea 00 00 00    	jne    c001cbc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cadb:	83 ec 0c             	sub    esp,0xc
c001cade:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cae1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cae5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cae9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001caed:	0f af c2             	imul   eax,edx
c001caf0:	50                   	push   eax
c001caf1:	e8 4a 2d ff ff       	call   c000f840 <malloc>
c001caf6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001caf8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cafc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001caff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb03:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb07:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb0b:	0f af c2             	imul   eax,edx
c001cb0e:	99                   	cdq    
c001cb0f:	52                   	push   edx
c001cb10:	50                   	push   eax
c001cb11:	56                   	push   esi
c001cb12:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb15:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb18:	83 c4 20             	add    esp,0x20
c001cb1b:	85 c0                	test   eax,eax
c001cb1d:	0f 84 a2 00 00 00    	je     c001cbc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb23:	31 d2                	xor    edx,edx
c001cb25:	51                   	push   ecx
c001cb26:	52                   	push   edx
c001cb27:	50                   	push   eax
c001cb28:	56                   	push   esi
c001cb29:	e8 92 6a ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c001cb2e:	83 c4 10             	add    esp,0x10
c001cb31:	85 c0                	test   eax,eax
c001cb33:	0f 85 8c 00 00 00    	jne    c001cbc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb39:	83 ec 0c             	sub    esp,0xc
c001cb3c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb40:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb44:	31 ed                	xor    ebp,ebp
c001cb46:	0f af c2             	imul   eax,edx
c001cb49:	50                   	push   eax
c001cb4a:	e8 f1 2c ff ff       	call   c000f840 <malloc>
c001cb4f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb55:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb5c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb60:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb64:	0f af c2             	imul   eax,edx
c001cb67:	99                   	cdq    
c001cb68:	52                   	push   edx
c001cb69:	50                   	push   eax
c001cb6a:	56                   	push   esi
c001cb6b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb6e:	83 c4 20             	add    esp,0x20
c001cb71:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb79:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb7d:	0f 86 80 00 00 00    	jbe    c001cc03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb83:	0f b7 fd             	movzx  edi,bp
c001cb86:	c1 e7 05             	shl    edi,0x5
c001cb89:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cb8d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cb90:	75 6b                	jne    c001cbfd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb92:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cb95:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb99:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cb9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cba0:	52                   	push   edx
c001cba1:	31 d2                	xor    edx,edx
c001cba3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cba6:	52                   	push   edx
c001cba7:	50                   	push   eax
c001cba8:	56                   	push   esi
c001cba9:	e8 12 6a ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c001cbae:	83 c4 10             	add    esp,0x10
c001cbb1:	85 c0                	test   eax,eax
c001cbb3:	74 17                	je     c001cbcc <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cbb5:	83 ec 0c             	sub    esp,0xc
c001cbb8:	68 86 bf 02 c0       	push   0xc002bf86
c001cbbd:	e8 84 63 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001cbc2:	83 c4 10             	add    esp,0x10
c001cbc5:	31 c0                	xor    eax,eax
c001cbc7:	e9 87 00 00 00       	jmp    c001cc53 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cbcc:	83 ec 0c             	sub    esp,0xc
c001cbcf:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cbd2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cbd5:	50                   	push   eax
c001cbd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cbda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbde:	56                   	push   esi
c001cbdf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cbe3:	e8 cb fb ff ff       	call   c001c7b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cbe8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cbec:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cbf0:	83 c4 20             	add    esp,0x20
c001cbf3:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cbf7:	73 04                	jae    c001cbfd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cbfd:	45                   	inc    ebp
c001cbfe:	e9 76 ff ff ff       	jmp    c001cb79 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc03:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc0f:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc15:	83 ec 0c             	sub    esp,0xc
c001cc18:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc23:	05 00 10 00 00       	add    eax,0x1000
c001cc28:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc2f:	e8 1c 2c ff ff       	call   c000f850 <free>
c001cc34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc37:	e8 14 2c ff ff       	call   c000f850 <free>
c001cc3c:	58                   	pop    eax
c001cc3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc41:	e8 0a 2c ff ff       	call   c000f850 <free>
c001cc46:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc49:	e8 12 69 ff ff       	call   c0013560 <File::close()>
c001cc4e:	83 c4 10             	add    esp,0x10
c001cc51:	b0 01                	mov    al,0x1
c001cc53:	83 c4 3c             	add    esp,0x3c
c001cc56:	5b                   	pop    ebx
c001cc57:	5e                   	pop    esi
c001cc58:	5f                   	pop    edi
c001cc59:	5d                   	pop    ebp
c001cc5a:	c3                   	ret    

c001cc5b <Thr::runtimeReferenceHelper()>:
c001cc5b:	83 ec 18             	sub    esp,0x18
c001cc5e:	68 8e bf 02 c0       	push   0xc002bf8e
c001cc63:	e8 de 62 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001cc68:	fa                   	cli    
c001cc69:	83 c4 10             	add    esp,0x10
c001cc6c:	eb fe                	jmp    c001cc6c <Thr::runtimeReferenceHelper()+0x11>

c001cc6e <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc6e:	57                   	push   edi
c001cc6f:	56                   	push   esi
c001cc70:	53                   	push   ebx
c001cc71:	31 db                	xor    ebx,ebx
c001cc73:	39 1d c0 18 03 c0    	cmp    DWORD PTR ds:0xc00318c0,ebx
c001cc79:	7e 3c                	jle    c001ccb7 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc7b:	8b 34 9d 40 18 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce7c0]
c001cc82:	31 ff                	xor    edi,edi
c001cc84:	39 3c 9d 40 17 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce8c0],edi
c001cc8b:	7e 27                	jle    c001ccb4 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cc8d:	50                   	push   eax
c001cc8e:	50                   	push   eax
c001cc8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc93:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc95:	03 04 9d c0 17 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce840]
c001cc9c:	50                   	push   eax
c001cc9d:	e8 1e 3c fe ff       	call   c00008c0 <strcmp>
c001cca2:	83 c4 10             	add    esp,0x10
c001cca5:	85 c0                	test   eax,eax
c001cca7:	75 05                	jne    c001ccae <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cca9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ccac:	eb 0b                	jmp    c001ccb9 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ccae:	83 c6 10             	add    esi,0x10
c001ccb1:	47                   	inc    edi
c001ccb2:	eb d0                	jmp    c001cc84 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001ccb4:	43                   	inc    ebx
c001ccb5:	eb bc                	jmp    c001cc73 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001ccb7:	31 c0                	xor    eax,eax
c001ccb9:	5b                   	pop    ebx
c001ccba:	5e                   	pop    esi
c001ccbb:	5f                   	pop    edi
c001ccbc:	c3                   	ret    

c001ccbd <Thr::loadKernelSymbolTable(char const*)>:
c001ccbd:	55                   	push   ebp
c001ccbe:	57                   	push   edi
c001ccbf:	56                   	push   esi
c001ccc0:	53                   	push   ebx
c001ccc1:	83 ec 68             	sub    esp,0x68
c001ccc4:	8b 35 14 19 03 c0    	mov    esi,DWORD PTR ds:0xc0031914
c001ccca:	68 14 01 00 00       	push   0x114
c001cccf:	e8 6c 2b ff ff       	call   c000f840 <malloc>
c001ccd4:	83 c4 0c             	add    esp,0xc
c001ccd7:	89 c3                	mov    ebx,eax
c001ccd9:	56                   	push   esi
c001ccda:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ccde:	50                   	push   eax
c001ccdf:	e8 ba 67 ff ff       	call   c001349e <File::File(char const*, Process*)>
c001cce4:	5e                   	pop    esi
c001cce5:	5f                   	pop    edi
c001cce6:	6a 01                	push   0x1
c001cce8:	53                   	push   ebx
c001cce9:	e8 14 68 ff ff       	call   c0013502 <File::open(FileOpenMode)>
c001ccee:	83 c4 10             	add    esp,0x10
c001ccf1:	85 c0                	test   eax,eax
c001ccf3:	74 0a                	je     c001ccff <Thr::loadKernelSymbolTable(char const*)+0x42>
c001ccf5:	83 ec 0c             	sub    esp,0xc
c001ccf8:	68 b0 bf 02 c0       	push   0xc002bfb0
c001ccfd:	eb 34                	jmp    c001cd33 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001ccff:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd07:	83 ec 0c             	sub    esp,0xc
c001cd0a:	6a 34                	push   0x34
c001cd0c:	e8 2f 2b ff ff       	call   c000f840 <malloc>
c001cd11:	59                   	pop    ecx
c001cd12:	89 c7                	mov    edi,eax
c001cd14:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd18:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd1a:	56                   	push   esi
c001cd1b:	57                   	push   edi
c001cd1c:	6a 00                	push   0x0
c001cd1e:	6a 34                	push   0x34
c001cd20:	53                   	push   ebx
c001cd21:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd24:	83 c4 20             	add    esp,0x20
c001cd27:	85 c0                	test   eax,eax
c001cd29:	74 17                	je     c001cd42 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd2b:	83 ec 0c             	sub    esp,0xc
c001cd2e:	68 c7 bf 02 c0       	push   0xc002bfc7
c001cd33:	e8 af d8 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001cd38:	83 c4 10             	add    esp,0x10
c001cd3b:	31 c0                	xor    eax,eax
c001cd3d:	e9 31 02 00 00       	jmp    c001cf73 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd42:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd48:	75 e1                	jne    c001cd2b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd4a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd4d:	85 c0                	test   eax,eax
c001cd4f:	74 da                	je     c001cd2b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd51:	52                   	push   edx
c001cd52:	31 d2                	xor    edx,edx
c001cd54:	52                   	push   edx
c001cd55:	50                   	push   eax
c001cd56:	53                   	push   ebx
c001cd57:	e8 64 68 ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c001cd5c:	83 c4 10             	add    esp,0x10
c001cd5f:	85 c0                	test   eax,eax
c001cd61:	75 c8                	jne    c001cd2b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd63:	83 ec 0c             	sub    esp,0xc
c001cd66:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd6a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd6e:	31 ed                	xor    ebp,ebp
c001cd70:	0f af c2             	imul   eax,edx
c001cd73:	50                   	push   eax
c001cd74:	e8 c7 2a ff ff       	call   c000f840 <malloc>
c001cd79:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd7f:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd86:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd8a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd8e:	0f af c2             	imul   eax,edx
c001cd91:	99                   	cdq    
c001cd92:	52                   	push   edx
c001cd93:	50                   	push   eax
c001cd94:	53                   	push   ebx
c001cd95:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd98:	83 c4 20             	add    esp,0x20
c001cd9b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cda3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cdab:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cdb3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cdbb:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cdbf:	0f 86 aa 00 00 00    	jbe    c001ce6f <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cdc5:	0f b7 f5             	movzx  esi,bp
c001cdc8:	6b f6 28             	imul   esi,esi,0x28
c001cdcb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cdcf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cdd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdd6:	50                   	push   eax
c001cdd7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cddb:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cddf:	8b 16                	mov    edx,DWORD PTR [esi]
c001cde1:	6b c0 28             	imul   eax,eax,0x28
c001cde4:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cde8:	89 d0                	mov    eax,edx
c001cdea:	31 d2                	xor    edx,edx
c001cdec:	52                   	push   edx
c001cded:	50                   	push   eax
c001cdee:	53                   	push   ebx
c001cdef:	e8 cc 67 ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c001cdf4:	83 c4 0c             	add    esp,0xc
c001cdf7:	6a 20                	push   0x20
c001cdf9:	6a 00                	push   0x0
c001cdfb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cdff:	52                   	push   edx
c001ce00:	e8 73 39 fe ff       	call   c0000778 <memset>
c001ce05:	58                   	pop    eax
c001ce06:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce08:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce0c:	51                   	push   ecx
c001ce0d:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce11:	52                   	push   edx
c001ce12:	6a 00                	push   0x0
c001ce14:	6a 1f                	push   0x1f
c001ce16:	53                   	push   ebx
c001ce17:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce1a:	83 c4 18             	add    esp,0x18
c001ce1d:	68 de bf 02 c0       	push   0xc002bfde
c001ce22:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce26:	52                   	push   edx
c001ce27:	e8 94 3a fe ff       	call   c00008c0 <strcmp>
c001ce2c:	83 c4 10             	add    esp,0x10
c001ce2f:	85 c0                	test   eax,eax
c001ce31:	75 0f                	jne    c001ce42 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce33:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce42:	50                   	push   eax
c001ce43:	50                   	push   eax
c001ce44:	68 e6 bf 02 c0       	push   0xc002bfe6
c001ce49:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce4d:	50                   	push   eax
c001ce4e:	e8 6d 3a fe ff       	call   c00008c0 <strcmp>
c001ce53:	83 c4 10             	add    esp,0x10
c001ce56:	85 c0                	test   eax,eax
c001ce58:	75 0f                	jne    c001ce69 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce5a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce5d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce65:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce69:	45                   	inc    ebp
c001ce6a:	e9 4c ff ff ff       	jmp    c001cdbb <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce6f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce74:	75 10                	jne    c001ce86 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce76:	83 ec 0c             	sub    esp,0xc
c001ce79:	68 ee bf 02 c0       	push   0xc002bfee
c001ce7e:	e8 64 d7 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001ce83:	83 c4 10             	add    esp,0x10
c001ce86:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ce8b:	75 10                	jne    c001ce9d <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ce8d:	83 ec 0c             	sub    esp,0xc
c001ce90:	68 ee bf 02 c0       	push   0xc002bfee
c001ce95:	e8 4d d7 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001ce9a:	83 c4 10             	add    esp,0x10
c001ce9d:	31 d2                	xor    edx,edx
c001ce9f:	50                   	push   eax
c001cea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cea4:	52                   	push   edx
c001cea5:	50                   	push   eax
c001cea6:	53                   	push   ebx
c001cea7:	e8 14 67 ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c001ceac:	5a                   	pop    edx
c001cead:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ceb1:	e8 8a 29 ff ff       	call   c000f840 <malloc>
c001ceb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ceba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cebe:	31 c9                	xor    ecx,ecx
c001cec0:	5e                   	pop    esi
c001cec1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cec3:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cec7:	55                   	push   ebp
c001cec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cecc:	51                   	push   ecx
c001cecd:	52                   	push   edx
c001cece:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ced2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ced6:	53                   	push   ebx
c001ced7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ceda:	83 c4 14             	add    esp,0x14
c001cedd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cee1:	e8 5a 29 ff ff       	call   c000f840 <malloc>
c001cee6:	89 c6                	mov    esi,eax
c001cee8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ceea:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ceed:	56                   	push   esi
c001ceee:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cef2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cef6:	51                   	push   ecx
c001cef7:	52                   	push   edx
c001cef8:	53                   	push   ebx
c001cef9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cefc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf00:	8b 15 c0 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318c0
c001cf06:	83 c4 1c             	add    esp,0x1c
c001cf09:	c1 e8 04             	shr    eax,0x4
c001cf0c:	89 04 95 40 17 03 c0 	mov    DWORD PTR [edx*4-0x3ffce8c0],eax
c001cf13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf17:	31 d2                	xor    edx,edx
c001cf19:	52                   	push   edx
c001cf1a:	50                   	push   eax
c001cf1b:	53                   	push   ebx
c001cf1c:	e8 9f 66 ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c001cf21:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf23:	31 d2                	xor    edx,edx
c001cf25:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf28:	56                   	push   esi
c001cf29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf2d:	52                   	push   edx
c001cf2e:	50                   	push   eax
c001cf2f:	53                   	push   ebx
c001cf30:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf33:	83 c4 14             	add    esp,0x14
c001cf36:	53                   	push   ebx
c001cf37:	e8 24 66 ff ff       	call   c0013560 <File::close()>
c001cf3c:	5d                   	pop    ebp
c001cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf41:	e8 0a 29 ff ff       	call   c000f850 <free>
c001cf46:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf49:	e8 02 29 ff ff       	call   c000f850 <free>
c001cf4e:	a1 c0 18 03 c0       	mov    eax,ds:0xc00318c0
c001cf53:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf57:	8d 50 01             	lea    edx,[eax+0x1]
c001cf5a:	89 0c 85 40 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7c0],ecx
c001cf61:	89 34 85 c0 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce840],esi
c001cf68:	89 15 c0 18 03 c0    	mov    DWORD PTR ds:0xc00318c0,edx
c001cf6e:	83 c4 10             	add    esp,0x10
c001cf71:	b0 01                	mov    al,0x1
c001cf73:	83 c4 5c             	add    esp,0x5c
c001cf76:	5b                   	pop    ebx
c001cf77:	5e                   	pop    esi
c001cf78:	5f                   	pop    edi
c001cf79:	5d                   	pop    ebp
c001cf7a:	c3                   	ret    

c001cf7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf7b:	55                   	push   ebp
c001cf7c:	57                   	push   edi
c001cf7d:	56                   	push   esi
c001cf7e:	53                   	push   ebx
c001cf7f:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf85:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cf8c:	8b 1d 14 19 03 c0    	mov    ebx,DWORD PTR ds:0xc0031914
c001cf92:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cf96:	68 14 01 00 00       	push   0x114
c001cf9b:	e8 a0 28 ff ff       	call   c000f840 <malloc>
c001cfa0:	83 c4 0c             	add    esp,0xc
c001cfa3:	89 c5                	mov    ebp,eax
c001cfa5:	53                   	push   ebx
c001cfa6:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cfad:	50                   	push   eax
c001cfae:	e8 eb 64 ff ff       	call   c001349e <File::File(char const*, Process*)>
c001cfb3:	5e                   	pop    esi
c001cfb4:	5f                   	pop    edi
c001cfb5:	6a 01                	push   0x1
c001cfb7:	55                   	push   ebp
c001cfb8:	e8 45 65 ff ff       	call   c0013502 <File::open(FileOpenMode)>
c001cfbd:	83 c4 10             	add    esp,0x10
c001cfc0:	85 c0                	test   eax,eax
c001cfc2:	0f 85 8d 06 00 00    	jne    c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfc8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cfd0:	83 ec 0c             	sub    esp,0xc
c001cfd3:	6a 34                	push   0x34
c001cfd5:	e8 66 28 ff ff       	call   c000f840 <malloc>
c001cfda:	5b                   	pop    ebx
c001cfdb:	89 c7                	mov    edi,eax
c001cfdd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cfe1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cfe4:	53                   	push   ebx
c001cfe5:	57                   	push   edi
c001cfe6:	6a 00                	push   0x0
c001cfe8:	6a 34                	push   0x34
c001cfea:	55                   	push   ebp
c001cfeb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfee:	83 c4 20             	add    esp,0x20
c001cff1:	85 c0                	test   eax,eax
c001cff3:	0f 85 5c 06 00 00    	jne    c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cff9:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cfff:	0f 85 50 06 00 00    	jne    c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d005:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d008:	85 c0                	test   eax,eax
c001d00a:	0f 84 45 06 00 00    	je     c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d010:	31 d2                	xor    edx,edx
c001d012:	51                   	push   ecx
c001d013:	52                   	push   edx
c001d014:	50                   	push   eax
c001d015:	55                   	push   ebp
c001d016:	e8 a5 65 ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c001d01b:	83 c4 10             	add    esp,0x10
c001d01e:	85 c0                	test   eax,eax
c001d020:	0f 85 2f 06 00 00    	jne    c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d026:	83 ec 0c             	sub    esp,0xc
c001d029:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d02c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d030:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d034:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d038:	0f af c2             	imul   eax,edx
c001d03b:	50                   	push   eax
c001d03c:	e8 ff 27 ff ff       	call   c000f840 <malloc>
c001d041:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d044:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d048:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d04b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d04f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d053:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d057:	0f af c2             	imul   eax,edx
c001d05a:	99                   	cdq    
c001d05b:	52                   	push   edx
c001d05c:	50                   	push   eax
c001d05d:	55                   	push   ebp
c001d05e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d061:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d064:	83 c4 20             	add    esp,0x20
c001d067:	85 c0                	test   eax,eax
c001d069:	0f 84 e6 05 00 00    	je     c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d06f:	52                   	push   edx
c001d070:	31 d2                	xor    edx,edx
c001d072:	52                   	push   edx
c001d073:	50                   	push   eax
c001d074:	55                   	push   ebp
c001d075:	e8 46 65 ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c001d07a:	83 c4 10             	add    esp,0x10
c001d07d:	85 c0                	test   eax,eax
c001d07f:	0f 85 d0 05 00 00    	jne    c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d085:	83 ec 0c             	sub    esp,0xc
c001d088:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d08c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d090:	31 f6                	xor    esi,esi
c001d092:	0f af c2             	imul   eax,edx
c001d095:	50                   	push   eax
c001d096:	e8 a5 27 ff ff       	call   c000f840 <malloc>
c001d09b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d09e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0a9:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0ad:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0b1:	0f af c2             	imul   eax,edx
c001d0b4:	99                   	cdq    
c001d0b5:	52                   	push   edx
c001d0b6:	50                   	push   eax
c001d0b7:	55                   	push   ebp
c001d0b8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0bb:	83 c4 20             	add    esp,0x20
c001d0be:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d0c2:	0f 86 8a 00 00 00    	jbe    c001d152 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d0c8:	0f b7 de             	movzx  ebx,si
c001d0cb:	c1 e3 05             	shl    ebx,0x5
c001d0ce:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d0d2:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d0d5:	75 75                	jne    c001d14c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d0d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d0da:	31 d2                	xor    edx,edx
c001d0dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0e0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d0e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0e7:	50                   	push   eax
c001d0e8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d0eb:	52                   	push   edx
c001d0ec:	50                   	push   eax
c001d0ed:	55                   	push   ebp
c001d0ee:	e8 cd 64 ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c001d0f3:	83 c4 10             	add    esp,0x10
c001d0f6:	85 c0                	test   eax,eax
c001d0f8:	0f 85 57 05 00 00    	jne    c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0fe:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d105:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d108:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d10c:	31 d2                	xor    edx,edx
c001d10e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d112:	83 ec 0c             	sub    esp,0xc
c001d115:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d119:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d120:	50                   	push   eax
c001d121:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d129:	52                   	push   edx
c001d12a:	50                   	push   eax
c001d12b:	55                   	push   ebp
c001d12c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d12f:	83 c4 1c             	add    esp,0x1c
c001d132:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d135:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d138:	50                   	push   eax
c001d139:	6a 00                	push   0x0
c001d13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d13f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d143:	50                   	push   eax
c001d144:	e8 2f 36 fe ff       	call   c0000778 <memset>
c001d149:	83 c4 10             	add    esp,0x10
c001d14c:	46                   	inc    esi
c001d14d:	e9 6c ff ff ff       	jmp    c001d0be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d152:	53                   	push   ebx
c001d153:	31 db                	xor    ebx,ebx
c001d155:	68 00 01 00 00       	push   0x100
c001d15a:	6a 00                	push   0x0
c001d15c:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d160:	50                   	push   eax
c001d161:	e8 12 36 fe ff       	call   c0000778 <memset>
c001d166:	83 c4 0c             	add    esp,0xc
c001d169:	68 00 01 00 00       	push   0x100
c001d16e:	6a 00                	push   0x0
c001d170:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d177:	50                   	push   eax
c001d178:	e8 fb 35 fe ff       	call   c0000778 <memset>
c001d17d:	83 c4 10             	add    esp,0x10
c001d180:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d188:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d190:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d198:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1a0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d1a8:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d1ac:	0f 86 30 01 00 00    	jbe    c001d2e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d1b2:	0f b7 f3             	movzx  esi,bx
c001d1b5:	6b f6 28             	imul   esi,esi,0x28
c001d1b8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d1bc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d1bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1c3:	52                   	push   edx
c001d1c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1c8:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d1cc:	8b 06                	mov    eax,DWORD PTR [esi]
c001d1ce:	6b d2 28             	imul   edx,edx,0x28
c001d1d1:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d1d5:	31 d2                	xor    edx,edx
c001d1d7:	52                   	push   edx
c001d1d8:	50                   	push   eax
c001d1d9:	55                   	push   ebp
c001d1da:	e8 e1 63 ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c001d1df:	83 c4 0c             	add    esp,0xc
c001d1e2:	6a 20                	push   0x20
c001d1e4:	6a 00                	push   0x0
c001d1e6:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1ed:	51                   	push   ecx
c001d1ee:	e8 85 35 fe ff       	call   c0000778 <memset>
c001d1f3:	59                   	pop    ecx
c001d1f4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d1f7:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d1fb:	52                   	push   edx
c001d1fc:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d203:	51                   	push   ecx
c001d204:	6a 00                	push   0x0
c001d206:	6a 1f                	push   0x1f
c001d208:	55                   	push   ebp
c001d209:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d20c:	83 c4 1c             	add    esp,0x1c
c001d20f:	6a 09                	push   0x9
c001d211:	68 08 c0 02 c0       	push   0xc002c008
c001d216:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d21d:	51                   	push   ecx
c001d21e:	e8 1d 34 fe ff       	call   c0000640 <memcmp>
c001d223:	83 c4 10             	add    esp,0x10
c001d226:	85 c0                	test   eax,eax
c001d228:	75 21                	jne    c001d24b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d22a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d22e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d232:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d236:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d23a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d23d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d244:	89 d0                	mov    eax,edx
c001d246:	40                   	inc    eax
c001d247:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d24b:	50                   	push   eax
c001d24c:	6a 09                	push   0x9
c001d24e:	68 12 c0 02 c0       	push   0xc002c012
c001d253:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d25a:	50                   	push   eax
c001d25b:	e8 e0 33 fe ff       	call   c0000640 <memcmp>
c001d260:	83 c4 10             	add    esp,0x10
c001d263:	85 c0                	test   eax,eax
c001d265:	75 21                	jne    c001d288 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d26b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d26f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d273:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d277:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d27a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d281:	89 d0                	mov    eax,edx
c001d283:	40                   	inc    eax
c001d284:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d288:	50                   	push   eax
c001d289:	50                   	push   eax
c001d28a:	68 de bf 02 c0       	push   0xc002bfde
c001d28f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d296:	50                   	push   eax
c001d297:	e8 24 36 fe ff       	call   c00008c0 <strcmp>
c001d29c:	83 c4 10             	add    esp,0x10
c001d29f:	85 c0                	test   eax,eax
c001d2a1:	75 0f                	jne    c001d2b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d2a3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2b2:	50                   	push   eax
c001d2b3:	50                   	push   eax
c001d2b4:	68 e6 bf 02 c0       	push   0xc002bfe6
c001d2b9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2c0:	50                   	push   eax
c001d2c1:	e8 fa 35 fe ff       	call   c00008c0 <strcmp>
c001d2c6:	83 c4 10             	add    esp,0x10
c001d2c9:	85 c0                	test   eax,eax
c001d2cb:	75 0f                	jne    c001d2dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d2cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2d8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d2dc:	43                   	inc    ebx
c001d2dd:	e9 c6 fe ff ff       	jmp    c001d1a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d2e2:	31 d2                	xor    edx,edx
c001d2e4:	50                   	push   eax
c001d2e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2e9:	52                   	push   edx
c001d2ea:	50                   	push   eax
c001d2eb:	55                   	push   ebp
c001d2ec:	e8 cf 62 ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c001d2f1:	58                   	pop    eax
c001d2f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2f6:	e8 45 25 ff ff       	call   c000f840 <malloc>
c001d2fb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d302:	31 d2                	xor    edx,edx
c001d304:	58                   	pop    eax
c001d305:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d309:	53                   	push   ebx
c001d30a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d30e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d312:	52                   	push   edx
c001d313:	50                   	push   eax
c001d314:	55                   	push   ebp
c001d315:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d318:	83 c4 14             	add    esp,0x14
c001d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d31f:	e8 1c 25 ff ff       	call   c000f840 <malloc>
c001d324:	31 d2                	xor    edx,edx
c001d326:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d32a:	83 c4 0c             	add    esp,0xc
c001d32d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d331:	52                   	push   edx
c001d332:	50                   	push   eax
c001d333:	55                   	push   ebp
c001d334:	e8 87 62 ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c001d339:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d33c:	31 d2                	xor    edx,edx
c001d33e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d341:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d345:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d349:	52                   	push   edx
c001d34a:	50                   	push   eax
c001d34b:	55                   	push   ebp
c001d34c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d34f:	83 c4 20             	add    esp,0x20
c001d352:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d35a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d35e:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d362:	0f 84 f1 02 00 00    	je     c001d659 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d368:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d36f:	31 d2                	xor    edx,edx
c001d371:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d375:	c1 e8 03             	shr    eax,0x3
c001d378:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d37c:	51                   	push   ecx
c001d37d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d381:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d385:	52                   	push   edx
c001d386:	50                   	push   eax
c001d387:	55                   	push   ebp
c001d388:	e8 33 62 ff ff       	call   c00135c0 <File::seek(unsigned long long)>
c001d38d:	5b                   	pop    ebx
c001d38e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d392:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d399:	e8 a2 24 ff ff       	call   c000f840 <malloc>
c001d39e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3a5:	31 d2                	xor    edx,edx
c001d3a7:	5e                   	pop    esi
c001d3a8:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d3ac:	50                   	push   eax
c001d3ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3b5:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d3bc:	52                   	push   edx
c001d3bd:	50                   	push   eax
c001d3be:	55                   	push   ebp
c001d3bf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3c2:	83 c4 20             	add    esp,0x20
c001d3c5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d3cd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d3d1:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d3d5:	0f 8d 62 02 00 00    	jge    c001d63d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d3db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d3df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3e3:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d3e8:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d3eb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d3ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3f3:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d3f7:	89 d8                	mov    eax,ebx
c001d3f9:	c1 e8 08             	shr    eax,0x8
c001d3fc:	89 c6                	mov    esi,eax
c001d3fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d402:	c1 e6 04             	shl    esi,0x4
c001d405:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d409:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d40c:	85 d2                	test   edx,edx
c001d40e:	0f 85 bf 00 00 00    	jne    c001d4d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d414:	83 ec 0c             	sub    esp,0xc
c001d417:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d41b:	03 06                	add    eax,DWORD PTR [esi]
c001d41d:	50                   	push   eax
c001d41e:	e8 4b f8 ff ff       	call   c001cc6e <Thr::getAddressOfKernelSymbol(char const*)>
c001d423:	83 c4 10             	add    esp,0x10
c001d426:	89 c2                	mov    edx,eax
c001d428:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d42d:	85 c0                	test   eax,eax
c001d42f:	0f 85 9e 00 00 00    	jne    c001d4d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d435:	83 ec 0c             	sub    esp,0xc
c001d438:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d43c:	03 06                	add    eax,DWORD PTR [esi]
c001d43e:	50                   	push   eax
c001d43f:	e8 b1 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d444:	83 c4 10             	add    esp,0x10
c001d447:	89 c2                	mov    edx,eax
c001d449:	85 c0                	test   eax,eax
c001d44b:	0f 85 82 00 00 00    	jne    c001d4d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d451:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d455:	50                   	push   eax
c001d456:	50                   	push   eax
c001d457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d45b:	03 06                	add    eax,DWORD PTR [esi]
c001d45d:	50                   	push   eax
c001d45e:	68 1c c0 02 c0       	push   0xc002c01c
c001d463:	e8 de 5a ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001d468:	58                   	pop    eax
c001d469:	5a                   	pop    edx
c001d46a:	68 36 c0 02 c0       	push   0xc002c036
c001d46f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d476:	50                   	push   eax
c001d477:	e8 b8 33 fe ff       	call   c0000834 <strcpy>
c001d47c:	59                   	pop    ecx
c001d47d:	58                   	pop    eax
c001d47e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d482:	03 06                	add    eax,DWORD PTR [esi]
c001d484:	50                   	push   eax
c001d485:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d48c:	50                   	push   eax
c001d48d:	e8 e2 34 fe ff       	call   c0000974 <strcat>
c001d492:	58                   	pop    eax
c001d493:	5a                   	pop    edx
c001d494:	68 cc c0 02 c0       	push   0xc002c0cc
c001d499:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4a0:	50                   	push   eax
c001d4a1:	e8 ce 34 fe ff       	call   c0000974 <strcat>
c001d4a6:	83 c4 10             	add    esp,0x10
c001d4a9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4ae:	0f 84 43 01 00 00    	je     c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4b4:	83 ec 0c             	sub    esp,0xc
c001d4b7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4be:	50                   	push   eax
c001d4bf:	e8 23 d1 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001d4c4:	83 c4 10             	add    esp,0x10
c001d4c7:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d4cb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d4cf:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d4d3:	80 fb 01             	cmp    bl,0x1
c001d4d6:	75 7d                	jne    c001d555 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d4d8:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d4df:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d4e3:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d4e7:	01 ce                	add    esi,ecx
c001d4e9:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d4ef:	0f 94 c0             	sete   al
c001d4f2:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d4f8:	0f 94 c3             	sete   bl
c001d4fb:	09 c3                	or     ebx,eax
c001d4fd:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4ff:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d504:	74 36                	je     c001d53c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d506:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d509:	84 db                	test   bl,bl
c001d50b:	75 0a                	jne    c001d517 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d50d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d511:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d515:	76 37                	jbe    c001d54e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d517:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d51b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d520:	0f 84 d1 00 00 00    	je     c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d526:	83 ec 0c             	sub    esp,0xc
c001d529:	68 4d c0 02 c0       	push   0xc002c04d
c001d52e:	e8 b4 d0 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001d533:	83 c4 10             	add    esp,0x10
c001d536:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d53a:	eb 12                	jmp    c001d54e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d53c:	01 c1                	add    ecx,eax
c001d53e:	84 db                	test   bl,bl
c001d540:	75 0c                	jne    c001d54e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d542:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d546:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d54a:	77 02                	ja     c001d54e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d54c:	01 d1                	add    ecx,edx
c001d54e:	89 0e                	mov    DWORD PTR [esi],ecx
c001d550:	e9 df 00 00 00       	jmp    c001d634 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d555:	80 fb 02             	cmp    bl,0x2
c001d558:	75 71                	jne    c001d5cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d55a:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d561:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d565:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d569:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d56f:	74 15                	je     c001d586 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d571:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d577:	74 0d                	je     c001d586 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d579:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d57d:	83 e8 04             	sub    eax,0x4
c001d580:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d584:	76 1f                	jbe    c001d5a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d586:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d58a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d58f:	74 66                	je     c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d591:	83 ec 0c             	sub    esp,0xc
c001d594:	68 69 c0 02 c0       	push   0xc002c069
c001d599:	e8 49 d0 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001d59e:	83 c4 10             	add    esp,0x10
c001d5a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5a5:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5a7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5ac:	74 13                	je     c001d5c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d5ae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d5b2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d5b9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d5bd:	01 c8                	add    eax,ecx
c001d5bf:	eb 04                	jmp    c001d5c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d5c1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d5c5:	01 c2                	add    edx,eax
c001d5c7:	89 16                	mov    DWORD PTR [esi],edx
c001d5c9:	eb 69                	jmp    c001d634 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5cb:	0f b6 db             	movzx  ebx,bl
c001d5ce:	50                   	push   eax
c001d5cf:	50                   	push   eax
c001d5d0:	53                   	push   ebx
c001d5d1:	68 85 c0 02 c0       	push   0xc002c085
c001d5d6:	e8 6b 59 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001d5db:	83 c4 10             	add    esp,0x10
c001d5de:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5e3:	74 12                	je     c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5e5:	83 ec 0c             	sub    esp,0xc
c001d5e8:	68 90 c0 02 c0       	push   0xc002c090
c001d5ed:	e8 f5 cf ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001d5f2:	83 c4 10             	add    esp,0x10
c001d5f5:	eb 3d                	jmp    c001d634 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5f7:	83 ec 0c             	sub    esp,0xc
c001d5fa:	55                   	push   ebp
c001d5fb:	e8 60 5f ff ff       	call   c0013560 <File::close()>
c001d600:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d603:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d606:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d609:	59                   	pop    ecx
c001d60a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d60e:	e8 3d 22 ff ff       	call   c000f850 <free>
c001d613:	5b                   	pop    ebx
c001d614:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d618:	e8 33 22 ff ff       	call   c000f850 <free>
c001d61d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d620:	e8 2b 22 ff ff       	call   c000f850 <free>
c001d625:	5e                   	pop    esi
c001d626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d62a:	e8 21 22 ff ff       	call   c000f850 <free>
c001d62f:	83 c4 10             	add    esp,0x10
c001d632:	eb 21                	jmp    c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d634:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d638:	e9 90 fd ff ff       	jmp    c001d3cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d63d:	83 ec 0c             	sub    esp,0xc
c001d640:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d644:	e8 07 22 ff ff       	call   c000f850 <free>
c001d649:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d64d:	83 c4 10             	add    esp,0x10
c001d650:	e9 05 fd ff ff       	jmp    c001d35a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d655:	31 c0                	xor    eax,eax
c001d657:	eb 33                	jmp    c001d68c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d659:	83 ec 0c             	sub    esp,0xc
c001d65c:	55                   	push   ebp
c001d65d:	e8 fe 5e ff ff       	call   c0013560 <File::close()>
c001d662:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d665:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d668:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d66b:	58                   	pop    eax
c001d66c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d670:	e8 db 21 ff ff       	call   c000f850 <free>
c001d675:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d678:	e8 d3 21 ff ff       	call   c000f850 <free>
c001d67d:	5a                   	pop    edx
c001d67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d682:	e8 c9 21 ff ff       	call   c000f850 <free>
c001d687:	83 c4 10             	add    esp,0x10
c001d68a:	b0 01                	mov    al,0x1
c001d68c:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d692:	5b                   	pop    ebx
c001d693:	5e                   	pop    esi
c001d694:	5f                   	pop    edi
c001d695:	5d                   	pop    ebp
c001d696:	c3                   	ret    

c001d697 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d697:	56                   	push   esi
c001d698:	31 d2                	xor    edx,edx
c001d69a:	53                   	push   ebx
c001d69b:	8b 1d 20 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031120
c001d6a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6a5:	39 d3                	cmp    ebx,edx
c001d6a7:	7e 1b                	jle    c001d6c4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d6a9:	8b 04 95 40 13 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcecc0]
c001d6b0:	39 c8                	cmp    eax,ecx
c001d6b2:	77 0d                	ja     c001d6c1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d6b4:	8b 34 95 40 11 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffceec0]
c001d6bb:	01 c6                	add    esi,eax
c001d6bd:	39 ce                	cmp    esi,ecx
c001d6bf:	77 05                	ja     c001d6c6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d6c1:	42                   	inc    edx
c001d6c2:	eb e1                	jmp    c001d6a5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d6c4:	31 c0                	xor    eax,eax
c001d6c6:	5b                   	pop    ebx
c001d6c7:	5e                   	pop    esi
c001d6c8:	c3                   	ret    

c001d6c9 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d6c9:	53                   	push   ebx
c001d6ca:	31 c0                	xor    eax,eax
c001d6cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d6d0:	8b 1d 20 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031120
c001d6d6:	39 c3                	cmp    ebx,eax
c001d6d8:	7e 22                	jle    c001d6fc <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d6da:	8b 14 85 40 13 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcecc0]
c001d6e1:	39 ca                	cmp    edx,ecx
c001d6e3:	77 14                	ja     c001d6f9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6e5:	03 14 85 40 11 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffceec0]
c001d6ec:	39 ca                	cmp    edx,ecx
c001d6ee:	76 09                	jbe    c001d6f9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6f0:	8b 04 85 40 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceac0]
c001d6f7:	eb 05                	jmp    c001d6fe <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d6f9:	40                   	inc    eax
c001d6fa:	eb da                	jmp    c001d6d6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d6fc:	31 c0                	xor    eax,eax
c001d6fe:	5b                   	pop    ebx
c001d6ff:	c3                   	ret    

c001d700 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d700:	53                   	push   ebx
c001d701:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d705:	53                   	push   ebx
c001d706:	e8 8c ff ff ff       	call   c001d697 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d70b:	5a                   	pop    edx
c001d70c:	31 d2                	xor    edx,edx
c001d70e:	85 c0                	test   eax,eax
c001d710:	74 04                	je     c001d716 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d712:	89 da                	mov    edx,ebx
c001d714:	29 c2                	sub    edx,eax
c001d716:	89 d0                	mov    eax,edx
c001d718:	5b                   	pop    ebx
c001d719:	c3                   	ret    

c001d71a <Thr::loadDLL(char const*, bool)>:
c001d71a:	55                   	push   ebp
c001d71b:	57                   	push   edi
c001d71c:	56                   	push   esi
c001d71d:	53                   	push   ebx
c001d71e:	81 ec 34 01 00 00    	sub    esp,0x134
c001d724:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d72b:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d732:	56                   	push   esi
c001d733:	68 a8 c0 02 c0       	push   0xc002c0a8
c001d738:	e8 09 58 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001d73d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d744:	e8 f7 20 ff ff       	call   c000f840 <malloc>
c001d749:	83 c4 0c             	add    esp,0xc
c001d74c:	89 c3                	mov    ebx,eax
c001d74e:	ff 35 14 19 03 c0    	push   DWORD PTR ds:0xc0031914
c001d754:	56                   	push   esi
c001d755:	50                   	push   eax
c001d756:	e8 43 5d ff ff       	call   c001349e <File::File(char const*, Process*)>
c001d75b:	83 c4 10             	add    esp,0x10
c001d75e:	85 db                	test   ebx,ebx
c001d760:	75 3c                	jne    c001d79e <Thr::loadDLL(char const*, bool)+0x84>
c001d762:	89 e8                	mov    eax,ebp
c001d764:	84 c0                	test   al,al
c001d766:	0f 84 d5 01 00 00    	je     c001d941 <Thr::loadDLL(char const*, bool)+0x227>
c001d76c:	57                   	push   edi
c001d76d:	57                   	push   edi
c001d76e:	68 b9 c0 02 c0       	push   0xc002c0b9
c001d773:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d777:	57                   	push   edi
c001d778:	e8 b7 30 fe ff       	call   c0000834 <strcpy>
c001d77d:	58                   	pop    eax
c001d77e:	5a                   	pop    edx
c001d77f:	56                   	push   esi
c001d780:	57                   	push   edi
c001d781:	e8 ee 31 fe ff       	call   c0000974 <strcat>
c001d786:	59                   	pop    ecx
c001d787:	58                   	pop    eax
c001d788:	68 cc c0 02 c0       	push   0xc002c0cc
c001d78d:	57                   	push   edi
c001d78e:	e8 e1 31 fe ff       	call   c0000974 <strcat>
c001d793:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d796:	e8 4c ce ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001d79b:	83 c4 10             	add    esp,0x10
c001d79e:	51                   	push   ecx
c001d79f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d7a3:	50                   	push   eax
c001d7a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d7a8:	50                   	push   eax
c001d7a9:	53                   	push   ebx
c001d7aa:	e8 ff 5f ff ff       	call   c00137ae <File::stat(unsigned long long*, bool*)>
c001d7af:	83 c4 10             	add    esp,0x10
c001d7b2:	85 db                	test   ebx,ebx
c001d7b4:	74 0c                	je     c001d7c2 <Thr::loadDLL(char const*, bool)+0xa8>
c001d7b6:	83 ec 0c             	sub    esp,0xc
c001d7b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d7bb:	53                   	push   ebx
c001d7bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d7bf:	83 c4 10             	add    esp,0x10
c001d7c2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d7c7:	75 0a                	jne    c001d7d3 <Thr::loadDLL(char const*, bool)+0xb9>
c001d7c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7cd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d7d1:	75 3c                	jne    c001d80f <Thr::loadDLL(char const*, bool)+0xf5>
c001d7d3:	89 e8                	mov    eax,ebp
c001d7d5:	84 c0                	test   al,al
c001d7d7:	0f 84 4c 01 00 00    	je     c001d929 <Thr::loadDLL(char const*, bool)+0x20f>
c001d7dd:	51                   	push   ecx
c001d7de:	51                   	push   ecx
c001d7df:	68 b9 c0 02 c0       	push   0xc002c0b9
c001d7e4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d7e8:	53                   	push   ebx
c001d7e9:	e8 46 30 fe ff       	call   c0000834 <strcpy>
c001d7ee:	5f                   	pop    edi
c001d7ef:	58                   	pop    eax
c001d7f0:	56                   	push   esi
c001d7f1:	53                   	push   ebx
c001d7f2:	e8 7d 31 fe ff       	call   c0000974 <strcat>
c001d7f7:	58                   	pop    eax
c001d7f8:	5a                   	pop    edx
c001d7f9:	68 cc c0 02 c0       	push   0xc002c0cc
c001d7fe:	53                   	push   ebx
c001d7ff:	e8 70 31 fe ff       	call   c0000974 <strcat>
c001d804:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d807:	e8 db cd ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001d80c:	83 c4 10             	add    esp,0x10
c001d80f:	e8 26 46 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c001d814:	51                   	push   ecx
c001d815:	6a 03                	push   0x3
c001d817:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d81b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d81f:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d825:	83 d3 00             	adc    ebx,0x0
c001d828:	89 ca                	mov    edx,ecx
c001d82a:	89 d1                	mov    ecx,edx
c001d82c:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d830:	51                   	push   ecx
c001d831:	50                   	push   eax
c001d832:	e8 3f 4c ff ff       	call   c0012476 <VAS::allocatePages(int, int)>
c001d837:	5f                   	pop    edi
c001d838:	89 c3                	mov    ebx,eax
c001d83a:	58                   	pop    eax
c001d83b:	53                   	push   ebx
c001d83c:	68 ce c0 02 c0       	push   0xc002c0ce
c001d841:	e8 00 57 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001d846:	89 34 24             	mov    DWORD PTR [esp],esi
c001d849:	e8 46 2f fe ff       	call   c0000794 <strlen>
c001d84e:	8b 3d 20 11 03 c0    	mov    edi,DWORD PTR ds:0xc0031120
c001d854:	40                   	inc    eax
c001d855:	89 04 24             	mov    DWORD PTR [esp],eax
c001d858:	e8 e3 1f ff ff       	call   c000f840 <malloc>
c001d85d:	89 04 bd 40 15 03 c0 	mov    DWORD PTR [edi*4-0x3ffceac0],eax
c001d864:	58                   	pop    eax
c001d865:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c001d86a:	5a                   	pop    edx
c001d86b:	56                   	push   esi
c001d86c:	ff 34 85 40 15 03 c0 	push   DWORD PTR [eax*4-0x3ffceac0]
c001d873:	e8 bc 2f fe ff       	call   c0000834 <strcpy>
c001d878:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c001d87d:	8d 50 01             	lea    edx,[eax+0x1]
c001d880:	89 1c 85 40 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcecc0],ebx
c001d887:	89 15 20 11 03 c0    	mov    DWORD PTR ds:0xc0031120,edx
c001d88d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d891:	83 c4 0c             	add    esp,0xc
c001d894:	89 14 85 40 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceec0],edx
c001d89b:	6a 01                	push   0x1
c001d89d:	53                   	push   ebx
c001d89e:	56                   	push   esi
c001d89f:	e8 d7 f6 ff ff       	call   c001cf7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d8a4:	83 c4 10             	add    esp,0x10
c001d8a7:	89 c7                	mov    edi,eax
c001d8a9:	84 c0                	test   al,al
c001d8ab:	0f 85 8c 00 00 00    	jne    c001d93d <Thr::loadDLL(char const*, bool)+0x223>
c001d8b1:	89 e8                	mov    eax,ebp
c001d8b3:	84 c0                	test   al,al
c001d8b5:	74 76                	je     c001d92d <Thr::loadDLL(char const*, bool)+0x213>
c001d8b7:	83 ec 0c             	sub    esp,0xc
c001d8ba:	68 db c0 02 c0       	push   0xc002c0db
c001d8bf:	e8 23 cd ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001d8c4:	83 c4 10             	add    esp,0x10
c001d8c7:	eb 64                	jmp    c001d92d <Thr::loadDLL(char const*, bool)+0x213>
c001d8c9:	e8 6c 45 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c001d8ce:	89 f5                	mov    ebp,esi
c001d8d0:	c1 e5 0c             	shl    ebp,0xc
c001d8d3:	52                   	push   edx
c001d8d4:	01 dd                	add    ebp,ebx
c001d8d6:	52                   	push   edx
c001d8d7:	55                   	push   ebp
c001d8d8:	50                   	push   eax
c001d8d9:	e8 12 47 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c001d8de:	83 c4 10             	add    esp,0x10
c001d8e1:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d8e4:	75 0c                	jne    c001d8f2 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d8e6:	83 ec 0c             	sub    esp,0xc
c001d8e9:	55                   	push   ebp
c001d8ea:	e8 69 25 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d8ef:	83 c4 10             	add    esp,0x10
c001d8f2:	46                   	inc    esi
c001d8f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8fb:	05 ff 0f 00 00       	add    eax,0xfff
c001d900:	83 d2 00             	adc    edx,0x0
c001d903:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d907:	c1 ea 0c             	shr    edx,0xc
c001d90a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d90e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d912:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d916:	ba 00 00 00 00       	mov    edx,0x0
c001d91b:	89 d0                	mov    eax,edx
c001d91d:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d921:	72 a6                	jb     c001d8c9 <Thr::loadDLL(char const*, bool)+0x1af>
c001d923:	89 f8                	mov    eax,edi
c001d925:	84 c0                	test   al,al
c001d927:	75 18                	jne    c001d941 <Thr::loadDLL(char const*, bool)+0x227>
c001d929:	31 db                	xor    ebx,ebx
c001d92b:	eb 14                	jmp    c001d941 <Thr::loadDLL(char const*, bool)+0x227>
c001d92d:	83 ec 0c             	sub    esp,0xc
c001d930:	68 fa c0 02 c0       	push   0xc002c0fa
c001d935:	e8 ad cc ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001d93a:	83 c4 10             	add    esp,0x10
c001d93d:	31 f6                	xor    esi,esi
c001d93f:	eb b2                	jmp    c001d8f3 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d941:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d947:	89 d8                	mov    eax,ebx
c001d949:	5b                   	pop    ebx
c001d94a:	5e                   	pop    esi
c001d94b:	5f                   	pop    edi
c001d94c:	5d                   	pop    ebp
c001d94d:	c3                   	ret    

c001d94e <Thr::executeDLL(unsigned long, void*)>:
c001d94e:	56                   	push   esi
c001d94f:	53                   	push   ebx
c001d950:	52                   	push   edx
c001d951:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d955:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d959:	85 db                	test   ebx,ebx
c001d95b:	75 10                	jne    c001d96d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d95d:	83 ec 0c             	sub    esp,0xc
c001d960:	68 16 c1 02 c0       	push   0xc002c116
c001d965:	e8 7d cc ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001d96a:	83 c4 10             	add    esp,0x10
c001d96d:	50                   	push   eax
c001d96e:	50                   	push   eax
c001d96f:	53                   	push   ebx
c001d970:	68 40 c1 02 c0       	push   0xc002c140
c001d975:	e8 cc 55 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001d97a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d97e:	89 d8                	mov    eax,ebx
c001d980:	83 c4 14             	add    esp,0x14
c001d983:	5b                   	pop    ebx
c001d984:	5e                   	pop    esi
c001d985:	ff e0                	jmp    eax
c001d987:	90                   	nop

c001d988 <changeTSS>:
c001d988:	83 ec 14             	sub    esp,0x14
c001d98b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d990:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d993:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d998:	c1 e2 15             	shl    edx,0x15
c001d99b:	29 d0                	sub    eax,edx
c001d99d:	50                   	push   eax
c001d99e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001d9a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9a9:	05 7c 11 00 00       	add    eax,0x117c
c001d9ae:	50                   	push   eax
c001d9af:	e8 2a 3b ff ff       	call   c00114de <TSS::setESP(unsigned long)>
c001d9b4:	83 c4 1c             	add    esp,0x1c
c001d9b7:	c3                   	ret    

c001d9b8 <Process::addArgs(char**)>:
c001d9b8:	57                   	push   edi
c001d9b9:	56                   	push   esi
c001d9ba:	53                   	push   ebx
c001d9bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d9bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d9c3:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d9cd:	85 ff                	test   edi,edi
c001d9cf:	74 3d                	je     c001da0e <Process::addArgs(char**)+0x56>
c001d9d1:	8b 07                	mov    eax,DWORD PTR [edi]
c001d9d3:	85 c0                	test   eax,eax
c001d9d5:	74 37                	je     c001da0e <Process::addArgs(char**)+0x56>
c001d9d7:	31 db                	xor    ebx,ebx
c001d9d9:	83 ec 0c             	sub    esp,0xc
c001d9dc:	50                   	push   eax
c001d9dd:	e8 b2 2d fe ff       	call   c0000794 <strlen>
c001d9e2:	40                   	inc    eax
c001d9e3:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9e6:	e8 55 1e ff ff       	call   c000f840 <malloc>
c001d9eb:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d9f2:	5a                   	pop    edx
c001d9f3:	59                   	pop    ecx
c001d9f4:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d9f7:	43                   	inc    ebx
c001d9f8:	50                   	push   eax
c001d9f9:	e8 36 2e fe ff       	call   c0000834 <strcpy>
c001d9fe:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da04:	83 c4 10             	add    esp,0x10
c001da07:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da0a:	85 c0                	test   eax,eax
c001da0c:	75 cb                	jne    c001d9d9 <Process::addArgs(char**)+0x21>
c001da0e:	5b                   	pop    ebx
c001da0f:	5e                   	pop    esi
c001da10:	5f                   	pop    edi
c001da11:	c3                   	ret    

c001da12 <Process::Process(char const*, Process*, char**)>:
c001da12:	56                   	push   esi
c001da13:	53                   	push   ebx
c001da14:	83 ec 14             	sub    esp,0x14
c001da17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da1b:	05 0c 02 00 00       	add    eax,0x20c
c001da20:	bb 07 00 00 00       	mov    ebx,0x7
c001da25:	89 c6                	mov    esi,eax
c001da27:	85 db                	test   ebx,ebx
c001da29:	78 12                	js     c001da3d <Process::Process(char const*, Process*, char**)+0x2b>
c001da2b:	83 ec 0c             	sub    esp,0xc
c001da2e:	56                   	push   esi
c001da2f:	e8 1e b2 00 00       	call   c0028c52 <ThreadControlBlock::ThreadControlBlock()>
c001da34:	83 c4 10             	add    esp,0x10
c001da37:	83 c6 63             	add    esi,0x63
c001da3a:	4b                   	dec    ebx
c001da3b:	eb ea                	jmp    c001da27 <Process::Process(char const*, Process*, char**)+0x15>
c001da3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da41:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da48:	83 ec 0c             	sub    esp,0xc
c001da4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da4f:	e8 e4 c9 ff ff       	call   c001a438 <Krnl::newProcessEnv(Process*)>
c001da54:	83 c4 10             	add    esp,0x10
c001da57:	89 c2                	mov    edx,eax
c001da59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da5d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001da63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da67:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001da70:	a1 10 d9 02 c0       	mov    eax,ds:0xc002d910
c001da75:	8d 50 01             	lea    edx,[eax+0x1]
c001da78:	89 15 10 d9 02 c0    	mov    DWORD PTR ds:0xc002d910,edx
c001da7e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da82:	89 02                	mov    DWORD PTR [edx],eax
c001da84:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001da8c:	83 ec 0c             	sub    esp,0xc
c001da8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da93:	e8 a8 1d ff ff       	call   c000f840 <malloc>
c001da98:	83 c4 10             	add    esp,0x10
c001da9b:	89 c3                	mov    ebx,eax
c001da9d:	83 ec 08             	sub    esp,0x8
c001daa0:	6a 00                	push   0x0
c001daa2:	53                   	push   ebx
c001daa3:	e8 76 4d ff ff       	call   c001281e <VAS::VAS(bool)>
c001daa8:	83 c4 10             	add    esp,0x10
c001daab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daaf:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dab9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dacb:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dad5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dadb:	85 c0                	test   eax,eax
c001dadd:	74 42                	je     c001db21 <Process::Process(char const*, Process*, char**)+0x10f>
c001dadf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dae3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dae9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001daef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf3:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001daf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dafd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db03:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db0d:	05 0c 01 00 00       	add    eax,0x10c
c001db12:	83 ec 08             	sub    esp,0x8
c001db15:	52                   	push   edx
c001db16:	50                   	push   eax
c001db17:	e8 18 2d fe ff       	call   c0000834 <strcpy>
c001db1c:	83 c4 10             	add    esp,0x10
c001db1f:	eb 63                	jmp    c001db84 <Process::Process(char const*, Process*, char**)+0x172>
c001db21:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db29:	83 ec 0c             	sub    esp,0xc
c001db2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db30:	e8 0b 1d ff ff       	call   c000f840 <malloc>
c001db35:	83 c4 10             	add    esp,0x10
c001db38:	89 c3                	mov    ebx,eax
c001db3a:	83 ec 08             	sub    esp,0x8
c001db3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db41:	53                   	push   ebx
c001db42:	e8 95 36 ff ff       	call   c00111dc <VgaText::VgaText(char const*)>
c001db47:	83 c4 10             	add    esp,0x10
c001db4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db4e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001db54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db58:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db5e:	83 ec 0c             	sub    esp,0xc
c001db61:	50                   	push   eax
c001db62:	e8 68 2a ff ff       	call   c00105cf <addToTerminalCycle(VgaText*)>
c001db67:	83 c4 10             	add    esp,0x10
c001db6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db6e:	05 0c 01 00 00       	add    eax,0x10c
c001db73:	83 ec 08             	sub    esp,0x8
c001db76:	68 5f c1 02 c0       	push   0xc002c15f
c001db7b:	50                   	push   eax
c001db7c:	e8 b3 2c fe ff       	call   c0000834 <strcpy>
c001db81:	83 c4 10             	add    esp,0x10
c001db84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db88:	83 c0 0c             	add    eax,0xc
c001db8b:	83 ec 08             	sub    esp,0x8
c001db8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db92:	50                   	push   eax
c001db93:	e8 9c 2c fe ff       	call   c0000834 <strcpy>
c001db98:	83 c4 10             	add    esp,0x10
c001db9b:	83 ec 08             	sub    esp,0x8
c001db9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dba6:	e8 0d fe ff ff       	call   c001d9b8 <Process::addArgs(char**)>
c001dbab:	83 c4 10             	add    esp,0x10
c001dbae:	83 ec 08             	sub    esp,0x8
c001dbb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbb9:	e8 87 ee ff ff       	call   c001ca45 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dbbe:	83 c4 10             	add    esp,0x10
c001dbc1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbc5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dbc9:	83 f0 01             	xor    eax,0x1
c001dbcc:	88 c2                	mov    dl,al
c001dbce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbd2:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dbd8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dbdd:	83 ec 08             	sub    esp,0x8
c001dbe0:	50                   	push   eax
c001dbe1:	68 5c c2 02 c0       	push   0xc002c25c
c001dbe6:	e8 5b 53 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001dbeb:	83 c4 10             	add    esp,0x10
c001dbee:	90                   	nop
c001dbef:	83 c4 14             	add    esp,0x14
c001dbf2:	5b                   	pop    ebx
c001dbf3:	5e                   	pop    esi
c001dbf4:	c3                   	ret    
c001dbf5:	90                   	nop

c001dbf6 <Process::Process(bool, char const*, Process*, char**)>:
c001dbf6:	56                   	push   esi
c001dbf7:	53                   	push   ebx
c001dbf8:	83 ec 24             	sub    esp,0x24
c001dbfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dbff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc07:	05 0c 02 00 00       	add    eax,0x20c
c001dc0c:	bb 07 00 00 00       	mov    ebx,0x7
c001dc11:	89 c6                	mov    esi,eax
c001dc13:	85 db                	test   ebx,ebx
c001dc15:	78 12                	js     c001dc29 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc17:	83 ec 0c             	sub    esp,0xc
c001dc1a:	56                   	push   esi
c001dc1b:	e8 32 b0 00 00       	call   c0028c52 <ThreadControlBlock::ThreadControlBlock()>
c001dc20:	83 c4 10             	add    esp,0x10
c001dc23:	83 c6 63             	add    esi,0x63
c001dc26:	4b                   	dec    ebx
c001dc27:	eb ea                	jmp    c001dc13 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc2d:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc34:	83 ec 0c             	sub    esp,0xc
c001dc37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc3b:	e8 f8 c7 ff ff       	call   c001a438 <Krnl::newProcessEnv(Process*)>
c001dc40:	83 c4 10             	add    esp,0x10
c001dc43:	89 c2                	mov    edx,eax
c001dc45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc49:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dc4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc53:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dc5c:	a1 10 d9 02 c0       	mov    eax,ds:0xc002d910
c001dc61:	8d 50 01             	lea    edx,[eax+0x1]
c001dc64:	89 15 10 d9 02 c0    	mov    DWORD PTR ds:0xc002d910,edx
c001dc6a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc6e:	89 02                	mov    DWORD PTR [edx],eax
c001dc70:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dc78:	83 ec 0c             	sub    esp,0xc
c001dc7b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dc7f:	e8 bc 1b ff ff       	call   c000f840 <malloc>
c001dc84:	83 c4 10             	add    esp,0x10
c001dc87:	89 c3                	mov    ebx,eax
c001dc89:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dc8e:	83 ec 08             	sub    esp,0x8
c001dc91:	50                   	push   eax
c001dc92:	53                   	push   ebx
c001dc93:	e8 86 4b ff ff       	call   c001281e <VAS::VAS(bool)>
c001dc98:	83 c4 10             	add    esp,0x10
c001dc9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc9f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dca5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dcb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dcbb:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dcc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcc5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dccb:	85 c0                	test   eax,eax
c001dccd:	74 42                	je     c001dd11 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcd9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dcdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce3:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dce9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dced:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcf3:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dcf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcfd:	05 0c 01 00 00       	add    eax,0x10c
c001dd02:	83 ec 08             	sub    esp,0x8
c001dd05:	52                   	push   edx
c001dd06:	50                   	push   eax
c001dd07:	e8 28 2b fe ff       	call   c0000834 <strcpy>
c001dd0c:	83 c4 10             	add    esp,0x10
c001dd0f:	eb 63                	jmp    c001dd74 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd11:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd19:	83 ec 0c             	sub    esp,0xc
c001dd1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd20:	e8 1b 1b ff ff       	call   c000f840 <malloc>
c001dd25:	83 c4 10             	add    esp,0x10
c001dd28:	89 c3                	mov    ebx,eax
c001dd2a:	83 ec 08             	sub    esp,0x8
c001dd2d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd31:	53                   	push   ebx
c001dd32:	e8 a5 34 ff ff       	call   c00111dc <VgaText::VgaText(char const*)>
c001dd37:	83 c4 10             	add    esp,0x10
c001dd3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd3e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dd44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd48:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dd4e:	83 ec 0c             	sub    esp,0xc
c001dd51:	50                   	push   eax
c001dd52:	e8 78 28 ff ff       	call   c00105cf <addToTerminalCycle(VgaText*)>
c001dd57:	83 c4 10             	add    esp,0x10
c001dd5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5e:	05 0c 01 00 00       	add    eax,0x10c
c001dd63:	83 ec 08             	sub    esp,0x8
c001dd66:	68 5f c1 02 c0       	push   0xc002c15f
c001dd6b:	50                   	push   eax
c001dd6c:	e8 c3 2a fe ff       	call   c0000834 <strcpy>
c001dd71:	83 c4 10             	add    esp,0x10
c001dd74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd78:	83 c0 0c             	add    eax,0xc
c001dd7b:	83 ec 08             	sub    esp,0x8
c001dd7e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd82:	50                   	push   eax
c001dd83:	e8 ac 2a fe ff       	call   c0000834 <strcpy>
c001dd88:	83 c4 10             	add    esp,0x10
c001dd8b:	83 ec 08             	sub    esp,0x8
c001dd8e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dd92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd96:	e8 1d fc ff ff       	call   c001d9b8 <Process::addArgs(char**)>
c001dd9b:	83 c4 10             	add    esp,0x10
c001dd9e:	90                   	nop
c001dd9f:	83 c4 24             	add    esp,0x24
c001dda2:	5b                   	pop    ebx
c001dda3:	5e                   	pop    esi
c001dda4:	c3                   	ret    

c001dda5 <disableIRQs()>:
c001dda5:	fa                   	cli    
c001dda6:	ff 05 ec 18 03 c0    	inc    DWORD PTR ds:0xc00318ec
c001ddac:	c3                   	ret    

c001ddad <getIRQNestingLevel()>:
c001ddad:	a1 ec 18 03 c0       	mov    eax,ds:0xc00318ec
c001ddb2:	c3                   	ret    

c001ddb3 <enableIRQs()>:
c001ddb3:	a1 ec 18 03 c0       	mov    eax,ds:0xc00318ec
c001ddb8:	48                   	dec    eax
c001ddb9:	a3 ec 18 03 c0       	mov    ds:0xc00318ec,eax
c001ddbe:	75 01                	jne    c001ddc1 <enableIRQs()+0xe>
c001ddc0:	fb                   	sti    
c001ddc1:	c3                   	ret    

c001ddc2 <lockScheduler()>:
c001ddc2:	eb e1                	jmp    c001dda5 <disableIRQs()>

c001ddc4 <unlockScheduler()>:
c001ddc4:	eb ed                	jmp    c001ddb3 <enableIRQs()>

c001ddc6 <userModeEntryPoint(void*)>:
c001ddc6:	83 ec 0c             	sub    esp,0xc
c001ddc9:	e8 f6 ff ff ff       	call   c001ddc4 <unlockScheduler()>
c001ddce:	fb                   	sti    
c001ddcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddd4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ddd7:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dddd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dde1:	83 c4 0c             	add    esp,0xc
c001dde4:	e9 41 25 fe ff       	jmp    c000032a <goToUsermode>

c001dde9 <lockStuff()>:
c001dde9:	e8 b7 ff ff ff       	call   c001dda5 <disableIRQs()>
c001ddee:	ff 05 e8 18 03 c0    	inc    DWORD PTR ds:0xc00318e8
c001ddf4:	c3                   	ret    

c001ddf5 <taskStartupFunction>:
c001ddf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddfa:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001ddfd:	c3                   	ret    

c001ddfe <updateTimeUsed()>:
c001ddfe:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001de03:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de09:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de10:	74 50                	je     c001de62 <updateTimeUsed()+0x64>
c001de12:	57                   	push   edi
c001de13:	56                   	push   esi
c001de14:	53                   	push   ebx
c001de15:	0f 31                	rdtsc  
c001de17:	89 c1                	mov    ecx,eax
c001de19:	a3 28 19 03 c0       	mov    ds:0xc0031928,eax
c001de1e:	2b 0d 18 19 03 c0    	sub    ecx,DWORD PTR ds:0xc0031918
c001de24:	89 d3                	mov    ebx,edx
c001de26:	89 0d 20 19 03 c0    	mov    DWORD PTR ds:0xc0031920,ecx
c001de2c:	1b 1d 1c 19 03 c0    	sbb    ebx,DWORD PTR ds:0xc003191c
c001de32:	a3 18 19 03 c0       	mov    ds:0xc0031918,eax
c001de37:	89 1d 24 19 03 c0    	mov    DWORD PTR ds:0xc0031924,ebx
c001de3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de42:	89 15 2c 19 03 c0    	mov    DWORD PTR ds:0xc003192c,edx
c001de48:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001de4b:	89 15 1c 19 03 c0    	mov    DWORD PTR ds:0xc003191c,edx
c001de51:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001de54:	01 f1                	add    ecx,esi
c001de56:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001de59:	11 fb                	adc    ebx,edi
c001de5b:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de5e:	5b                   	pop    ebx
c001de5f:	5e                   	pop    esi
c001de60:	5f                   	pop    edi
c001de61:	c3                   	ret    
c001de62:	c3                   	ret    

c001de63 <switchToThread(ThreadControlBlock*)>:
c001de63:	53                   	push   ebx
c001de64:	83 ec 08             	sub    esp,0x8
c001de67:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c001de6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de70:	85 c0                	test   eax,eax
c001de72:	75 30                	jne    c001dea4 <switchToThread(ThreadControlBlock*)+0x41>
c001de74:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001de77:	3c ff                	cmp    al,0xff
c001de79:	74 25                	je     c001dea0 <switchToThread(ThreadControlBlock*)+0x3d>
c001de7b:	0f b6 d0             	movzx  edx,al
c001de7e:	b8 84 03 00 00       	mov    eax,0x384
c001de83:	29 d0                	sub    eax,edx
c001de85:	c1 e0 10             	shl    eax,0x10
c001de88:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001de8b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001de8e:	e8 6b ff ff ff       	call   c001ddfe <updateTimeUsed()>
c001de93:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001de97:	83 c4 08             	add    esp,0x8
c001de9a:	5b                   	pop    ebx
c001de9b:	e9 c2 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dea0:	31 c0                	xor    eax,eax
c001dea2:	eb e7                	jmp    c001de8b <switchToThread(ThreadControlBlock*)+0x28>
c001dea4:	c7 05 e4 18 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00318e4,0x1
c001deae:	83 c4 08             	add    esp,0x8
c001deb1:	5b                   	pop    ebx
c001deb2:	c3                   	ret    
c001deb3:	90                   	nop

c001deb4 <Semaphore::Semaphore(int)>:
c001deb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001deb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001debc:	89 10                	mov    DWORD PTR [eax],edx
c001debe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dec2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dec9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001decd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ded4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ded8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dedf:	90                   	nop
c001dee0:	c3                   	ret    
c001dee1:	90                   	nop

c001dee2 <Mutex::Mutex()>:
c001dee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dee6:	6a 01                	push   0x1
c001dee8:	50                   	push   eax
c001dee9:	e8 c6 ff ff ff       	call   c001deb4 <Semaphore::Semaphore(int)>
c001deee:	83 c4 08             	add    esp,0x8
c001def1:	90                   	nop
c001def2:	c3                   	ret    
c001def3:	90                   	nop

c001def4 <Process::createThread(void (*)(void*), void*, int)>:
c001def4:	55                   	push   ebp
c001def5:	31 c9                	xor    ecx,ecx
c001def7:	57                   	push   edi
c001def8:	56                   	push   esi
c001def9:	53                   	push   ebx
c001defa:	83 ec 1c             	sub    esp,0x1c
c001defd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df01:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df08:	89 f2                	mov    edx,esi
c001df0a:	0f b7 c2             	movzx  eax,dx
c001df0d:	83 e2 01             	and    edx,0x1
c001df10:	74 14                	je     c001df26 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001df12:	d1 f8                	sar    eax,1
c001df14:	41                   	inc    ecx
c001df15:	89 c2                	mov    edx,eax
c001df17:	83 f9 10             	cmp    ecx,0x10
c001df1a:	75 ee                	jne    c001df0a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df1c:	83 c4 1c             	add    esp,0x1c
c001df1f:	31 c0                	xor    eax,eax
c001df21:	5b                   	pop    ebx
c001df22:	5e                   	pop    esi
c001df23:	5f                   	pop    edi
c001df24:	5d                   	pop    ebp
c001df25:	c3                   	ret    
c001df26:	83 ec 08             	sub    esp,0x8
c001df29:	b8 01 00 00 00       	mov    eax,0x1
c001df2e:	d3 e0                	shl    eax,cl
c001df30:	09 c6                	or     esi,eax
c001df32:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df38:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df3f:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001df42:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001df45:	01 ce                	add    esi,ecx
c001df47:	89 f0                	mov    eax,esi
c001df49:	c1 e0 05             	shl    eax,0x5
c001df4c:	01 c6                	add    esi,eax
c001df4e:	8d 04 33             	lea    eax,[ebx+esi*1]
c001df51:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001df57:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df5d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df61:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df67:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001df6d:	89 ca                	mov    edx,ecx
c001df6f:	f7 da                	neg    edx
c001df71:	c1 e2 15             	shl    edx,0x15
c001df74:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001df7a:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001df80:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001df84:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001df8e:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001df94:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001df98:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001df9e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dfa8:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dfb2:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001dfb9:	50                   	push   eax
c001dfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dfbe:	68 08 19 03 c0       	push   0xc0031908
c001dfc3:	e8 18 ab 00 00       	call   c0028ae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dfc8:	83 c4 10             	add    esp,0x10
c001dfcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfcf:	83 c4 1c             	add    esp,0x1c
c001dfd2:	5b                   	pop    ebx
c001dfd3:	5e                   	pop    esi
c001dfd4:	5f                   	pop    edi
c001dfd5:	5d                   	pop    ebp
c001dfd6:	c3                   	ret    
c001dfd7:	90                   	nop

c001dfd8 <Process::createUserThread()>:
c001dfd8:	83 ec 0c             	sub    esp,0xc
c001dfdb:	68 80 00 00 00       	push   0x80
c001dfe0:	6a 00                	push   0x0
c001dfe2:	68 c6 dd 01 c0       	push   0xc001ddc6
c001dfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfeb:	e8 04 ff ff ff       	call   c001def4 <Process::createThread(void (*)(void*), void*, int)>
c001dff0:	83 c4 1c             	add    esp,0x1c
c001dff3:	c3                   	ret    

c001dff4 <setupMultitasking(void (*)())>:
c001dff4:	56                   	push   esi
c001dff5:	53                   	push   ebx
c001dff6:	53                   	push   ebx
c001dff7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dffb:	eb 10                	jmp    c001e00d <setupMultitasking(void (*)())+0x19>
c001dffd:	83 ec 0c             	sub    esp,0xc
c001e000:	68 08 19 03 c0       	push   0xc0031908
c001e005:	e8 28 aa 00 00       	call   c0028a32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e00a:	83 c4 10             	add    esp,0x10
c001e00d:	83 ec 0c             	sub    esp,0xc
c001e010:	68 08 19 03 c0       	push   0xc0031908
c001e015:	e8 fc a9 00 00       	call   c0028a16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e01a:	83 c4 10             	add    esp,0x10
c001e01d:	84 c0                	test   al,al
c001e01f:	74 dc                	je     c001dffd <setupMultitasking(void (*)())+0x9>
c001e021:	83 ec 0c             	sub    esp,0xc
c001e024:	68 3f 07 00 00       	push   0x73f
c001e029:	e8 12 18 ff ff       	call   c000f840 <malloc>
c001e02e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e035:	89 c3                	mov    ebx,eax
c001e037:	6a 00                	push   0x0
c001e039:	68 63 c1 02 c0       	push   0xc002c163
c001e03e:	6a 01                	push   0x1
c001e040:	50                   	push   eax
c001e041:	e8 b0 fb ff ff       	call   c001dbf6 <Process::Process(bool, char const*, Process*, char**)>
c001e046:	83 c4 18             	add    esp,0x18
c001e049:	89 1d 14 19 03 c0    	mov    DWORD PTR ds:0xc0031914,ebx
c001e04f:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e055:	68 84 c2 02 c0       	push   0xc002c284
c001e05a:	e8 e7 4e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e05f:	58                   	pop    eax
c001e060:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e066:	e8 e6 2c ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c001e06b:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e073:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e079:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e07c:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e086:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e08c:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e092:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e09c:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e0a6:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e0b0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e0b6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e0bc:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e0c6:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e0cc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e0d6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e0dc:	5a                   	pop    edx
c001e0dd:	59                   	pop    ecx
c001e0de:	68 5f c1 02 c0       	push   0xc002c15f
c001e0e3:	50                   	push   eax
c001e0e4:	e8 4b 27 fe ff       	call   c0000834 <strcpy>
c001e0e9:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e0f0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e0f4:	83 c4 14             	add    esp,0x14
c001e0f7:	5b                   	pop    ebx
c001e0f8:	5e                   	pop    esi
c001e0f9:	e9 56 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e0fe <schedule()>:
c001e0fe:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c001e103:	85 c0                	test   eax,eax
c001e105:	74 0b                	je     c001e112 <schedule()+0x14>
c001e107:	c7 05 e4 18 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00318e4,0x1
c001e111:	c3                   	ret    
c001e112:	53                   	push   ebx
c001e113:	83 ec 14             	sub    esp,0x14
c001e116:	68 08 19 03 c0       	push   0xc0031908
c001e11b:	e8 f6 a8 00 00       	call   c0028a16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e120:	83 c4 10             	add    esp,0x10
c001e123:	84 c0                	test   al,al
c001e125:	75 38                	jne    c001e15f <schedule()+0x61>
c001e127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e12c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e12f:	4a                   	dec    edx
c001e130:	74 32                	je     c001e164 <schedule()+0x66>
c001e132:	83 ec 0c             	sub    esp,0xc
c001e135:	68 08 19 03 c0       	push   0xc0031908
c001e13a:	e8 cf a8 00 00       	call   c0028a0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e13f:	c7 04 24 08 19 03 c0 	mov    DWORD PTR [esp],0xc0031908
c001e146:	89 c3                	mov    ebx,eax
c001e148:	e8 e5 a8 00 00       	call   c0028a32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e14d:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e154:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e157:	e8 07 fd ff ff       	call   c001de63 <switchToThread(ThreadControlBlock*)>
c001e15c:	83 c4 10             	add    esp,0x10
c001e15f:	83 c4 08             	add    esp,0x8
c001e162:	5b                   	pop    ebx
c001e163:	c3                   	ret    
c001e164:	83 ec 08             	sub    esp,0x8
c001e167:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e16e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e174:	68 08 19 03 c0       	push   0xc0031908
c001e179:	e8 62 a9 00 00       	call   c0028ae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e17e:	83 c4 10             	add    esp,0x10
c001e181:	eb af                	jmp    c001e132 <schedule()+0x34>

c001e183 <unlockStuff()>:
c001e183:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c001e188:	48                   	dec    eax
c001e189:	a3 e8 18 03 c0       	mov    ds:0xc00318e8,eax
c001e18e:	75 09                	jne    c001e199 <unlockStuff()+0x16>
c001e190:	a1 e4 18 03 c0       	mov    eax,ds:0xc00318e4
c001e195:	85 c0                	test   eax,eax
c001e197:	75 05                	jne    c001e19e <unlockStuff()+0x1b>
c001e199:	e9 15 fc ff ff       	jmp    c001ddb3 <enableIRQs()>
c001e19e:	83 ec 0c             	sub    esp,0xc
c001e1a1:	c7 05 e4 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00318e4,0x0
c001e1ab:	e8 4e ff ff ff       	call   c001e0fe <schedule()>
c001e1b0:	83 c4 0c             	add    esp,0xc
c001e1b3:	e9 fb fb ff ff       	jmp    c001ddb3 <enableIRQs()>

c001e1b8 <Semaphore::tryAcquire()>:
c001e1b8:	83 ec 0c             	sub    esp,0xc
c001e1bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1bf:	e8 25 fc ff ff       	call   c001dde9 <lockStuff()>
c001e1c4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e1c7:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e1c9:	7c 0b                	jl     c001e1d6 <Semaphore::tryAcquire()+0x1e>
c001e1cb:	e8 b3 ff ff ff       	call   c001e183 <unlockStuff()>
c001e1d0:	31 c0                	xor    eax,eax
c001e1d2:	83 c4 0c             	add    esp,0xc
c001e1d5:	c3                   	ret    
c001e1d6:	42                   	inc    edx
c001e1d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e1da:	e8 a4 ff ff ff       	call   c001e183 <unlockStuff()>
c001e1df:	b0 01                	mov    al,0x1
c001e1e1:	83 c4 0c             	add    esp,0xc
c001e1e4:	c3                   	ret    
c001e1e5:	90                   	nop

c001e1e6 <Semaphore::assertLocked(char const*)>:
c001e1e6:	83 ec 0c             	sub    esp,0xc
c001e1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1f1:	e8 f3 fb ff ff       	call   c001dde9 <lockStuff()>
c001e1f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e1f8:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e1fb:	7c 05                	jl     c001e202 <Semaphore::assertLocked(char const*)+0x1c>
c001e1fd:	83 c4 0c             	add    esp,0xc
c001e200:	eb 81                	jmp    c001e183 <unlockStuff()>
c001e202:	83 ec 0c             	sub    esp,0xc
c001e205:	52                   	push   edx
c001e206:	e8 dc c3 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001e20b:	83 c4 10             	add    esp,0x10
c001e20e:	83 c4 0c             	add    esp,0xc
c001e211:	e9 6d ff ff ff       	jmp    c001e183 <unlockStuff()>

c001e216 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e216:	83 ec 0c             	sub    esp,0xc
c001e219:	e8 8f fb ff ff       	call   c001ddad <getIRQNestingLevel()>
c001e21e:	83 ec 08             	sub    esp,0x8
c001e221:	50                   	push   eax
c001e222:	68 b8 c2 02 c0       	push   0xc002c2b8
c001e227:	e8 1a 4d ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e22c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e235:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e238:	e8 c1 fe ff ff       	call   c001e0fe <schedule()>
c001e23d:	e8 82 fb ff ff       	call   c001ddc4 <unlockScheduler()>
c001e242:	e8 66 fb ff ff       	call   c001ddad <getIRQNestingLevel()>
c001e247:	5a                   	pop    edx
c001e248:	59                   	pop    ecx
c001e249:	50                   	push   eax
c001e24a:	68 ec c2 02 c0       	push   0xc002c2ec
c001e24f:	e8 f2 4c ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e254:	83 c4 1c             	add    esp,0x1c
c001e257:	c3                   	ret    

c001e258 <blockTask(TaskState)>:
c001e258:	83 ec 0c             	sub    esp,0xc
c001e25b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e25f:	e8 5e fb ff ff       	call   c001ddc2 <lockScheduler()>
c001e264:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e269:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e26c:	e8 8d fe ff ff       	call   c001e0fe <schedule()>
c001e271:	83 c4 0c             	add    esp,0xc
c001e274:	e9 4b fb ff ff       	jmp    c001ddc4 <unlockScheduler()>

c001e279 <waitTask(int, int*, int)>:
c001e279:	83 ec 18             	sub    esp,0x18
c001e27c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e285:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e288:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e28c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e291:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e294:	6a 07                	push   0x7
c001e296:	e8 bd ff ff ff       	call   c001e258 <blockTask(TaskState)>
c001e29b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a0:	83 c4 10             	add    esp,0x10
c001e2a3:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e2a6:	85 d2                	test   edx,edx
c001e2a8:	74 0a                	je     c001e2b4 <waitTask(int, int*, int)+0x3b>
c001e2aa:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e2ad:	89 02                	mov    DWORD PTR [edx],eax
c001e2af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2b4:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e2b7:	83 c4 0c             	add    esp,0xc
c001e2ba:	c3                   	ret    

c001e2bb <nanoSleepUntil(unsigned long long)>:
c001e2bb:	83 ec 0c             	sub    esp,0xc
c001e2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2c6:	3b 05 30 ea 02 c0    	cmp    eax,DWORD PTR ds:0xc002ea30
c001e2cc:	89 d1                	mov    ecx,edx
c001e2ce:	1b 0d 34 ea 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ea34
c001e2d4:	73 04                	jae    c001e2da <nanoSleepUntil(unsigned long long)+0x1f>
c001e2d6:	83 c4 0c             	add    esp,0xc
c001e2d9:	c3                   	ret    
c001e2da:	e8 0a fb ff ff       	call   c001dde9 <lockStuff()>
c001e2df:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e2e5:	83 ec 08             	sub    esp,0x8
c001e2e8:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e2eb:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e2ee:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e2f4:	68 fc 18 03 c0       	push   0xc00318fc
c001e2f9:	e8 e2 a7 00 00       	call   c0028ae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2fe:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e305:	e8 4e ff ff ff       	call   c001e258 <blockTask(TaskState)>
c001e30a:	83 c4 1c             	add    esp,0x1c
c001e30d:	e9 71 fe ff ff       	jmp    c001e183 <unlockStuff()>

c001e312 <nanoSleep(unsigned long long)>:
c001e312:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001e317:	8b 15 34 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea34
c001e31d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e321:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e325:	eb 94                	jmp    c001e2bb <nanoSleepUntil(unsigned long long)>

c001e327 <sleep(unsigned long long)>:
c001e327:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e32f:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e334:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e338:	01 ca                	add    edx,ecx
c001e33a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e33e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e342:	eb ce                	jmp    c001e312 <nanoSleep(unsigned long long)>

c001e344 <Semaphore::acquire()>:
c001e344:	83 ec 0c             	sub    esp,0xc
c001e347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34b:	e8 99 fa ff ff       	call   c001dde9 <lockStuff()>
c001e350:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e353:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e355:	7d 0c                	jge    c001e363 <Semaphore::acquire()+0x1f>
c001e357:	42                   	inc    edx
c001e358:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e35b:	83 c4 0c             	add    esp,0xc
c001e35e:	e9 20 fe ff ff       	jmp    c001e183 <unlockStuff()>
c001e363:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e369:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e370:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e373:	85 d2                	test   edx,edx
c001e375:	74 2a                	je     c001e3a1 <Semaphore::acquire()+0x5d>
c001e377:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e37a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e380:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e383:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e389:	83 ec 0c             	sub    esp,0xc
c001e38c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e38f:	6a 05                	push   0x5
c001e391:	e8 c2 fe ff ff       	call   c001e258 <blockTask(TaskState)>
c001e396:	83 c4 10             	add    esp,0x10
c001e399:	83 c4 0c             	add    esp,0xc
c001e39c:	e9 e2 fd ff ff       	jmp    c001e183 <unlockStuff()>
c001e3a1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e3aa:	eb d7                	jmp    c001e383 <Semaphore::acquire()+0x3f>

c001e3ac <taskReturned>:
c001e3ac:	83 ec 18             	sub    esp,0x18
c001e3af:	68 20 c3 02 c0       	push   0xc002c320
c001e3b4:	e8 2e c2 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001e3b9:	83 c4 10             	add    esp,0x10
c001e3bc:	83 ec 0c             	sub    esp,0xc
c001e3bf:	6a 02                	push   0x2
c001e3c1:	e8 92 fe ff ff       	call   c001e258 <blockTask(TaskState)>
c001e3c6:	e8 f7 f9 ff ff       	call   c001ddc2 <lockScheduler()>
c001e3cb:	e8 2e fd ff ff       	call   c001e0fe <schedule()>
c001e3d0:	e8 ef f9 ff ff       	call   c001ddc4 <unlockScheduler()>
c001e3d5:	83 c4 10             	add    esp,0x10
c001e3d8:	eb e2                	jmp    c001e3bc <taskReturned+0x10>

c001e3da <unblockTask(ThreadControlBlock*)>:
c001e3da:	53                   	push   ebx
c001e3db:	83 ec 08             	sub    esp,0x8
c001e3de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e3e2:	e8 db f9 ff ff       	call   c001ddc2 <lockScheduler()>
c001e3e7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e3ea:	85 c0                	test   eax,eax
c001e3ec:	74 5c                	je     c001e44a <unblockTask(ThreadControlBlock*)+0x70>
c001e3ee:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e3f1:	48                   	dec    eax
c001e3f2:	74 31                	je     c001e425 <unblockTask(ThreadControlBlock*)+0x4b>
c001e3f4:	83 ec 0c             	sub    esp,0xc
c001e3f7:	68 08 19 03 c0       	push   0xc0031908
c001e3fc:	e8 0d a6 00 00       	call   c0028a0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e401:	83 c4 10             	add    esp,0x10
c001e404:	85 c0                	test   eax,eax
c001e406:	75 17                	jne    c001e41f <unblockTask(ThreadControlBlock*)+0x45>
c001e408:	eb 65                	jmp    c001e46f <unblockTask(ThreadControlBlock*)+0x95>
c001e40a:	83 ec 08             	sub    esp,0x8
c001e40d:	50                   	push   eax
c001e40e:	68 08 19 03 c0       	push   0xc0031908
c001e413:	e8 d0 a8 00 00       	call   c0028ce8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e418:	83 c4 10             	add    esp,0x10
c001e41b:	85 c0                	test   eax,eax
c001e41d:	74 50                	je     c001e46f <unblockTask(ThreadControlBlock*)+0x95>
c001e41f:	39 c3                	cmp    ebx,eax
c001e421:	75 e7                	jne    c001e40a <unblockTask(ThreadControlBlock*)+0x30>
c001e423:	eb 1c                	jmp    c001e441 <unblockTask(ThreadControlBlock*)+0x67>
c001e425:	83 ec 0c             	sub    esp,0xc
c001e428:	68 10 c4 02 c0       	push   0xc002c410
c001e42d:	e8 14 4b ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e432:	c7 04 24 9c c3 02 c0 	mov    DWORD PTR [esp],0xc002c39c
c001e439:	e8 08 4b ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e43e:	83 c4 10             	add    esp,0x10
c001e441:	83 c4 08             	add    esp,0x8
c001e444:	5b                   	pop    ebx
c001e445:	e9 7a f9 ff ff       	jmp    c001ddc4 <unlockScheduler()>
c001e44a:	83 ec 0c             	sub    esp,0xc
c001e44d:	68 54 c3 02 c0       	push   0xc002c354
c001e452:	e8 ef 4a ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e457:	c7 04 24 9c c3 02 c0 	mov    DWORD PTR [esp],0xc002c39c
c001e45e:	e8 e3 4a ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e463:	83 c4 10             	add    esp,0x10
c001e466:	83 c4 08             	add    esp,0x8
c001e469:	5b                   	pop    ebx
c001e46a:	e9 55 f9 ff ff       	jmp    c001ddc4 <unlockScheduler()>
c001e46f:	83 ec 08             	sub    esp,0x8
c001e472:	53                   	push   ebx
c001e473:	68 08 19 03 c0       	push   0xc0031908
c001e478:	e8 63 a6 00 00       	call   c0028ae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e47d:	83 c4 10             	add    esp,0x10
c001e480:	83 c4 08             	add    esp,0x8
c001e483:	5b                   	pop    ebx
c001e484:	e9 3b f9 ff ff       	jmp    c001ddc4 <unlockScheduler()>

c001e489 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e489:	55                   	push   ebp
c001e48a:	57                   	push   edi
c001e48b:	56                   	push   esi
c001e48c:	53                   	push   ebx
c001e48d:	83 ec 1c             	sub    esp,0x1c
c001e490:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e494:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e497:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e49d:	85 ff                	test   edi,edi
c001e49f:	7e 20                	jle    c001e4c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e4a1:	31 f6                	xor    esi,esi
c001e4a3:	83 ec 0c             	sub    esp,0xc
c001e4a6:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e4ad:	46                   	inc    esi
c001e4ae:	e8 9d 13 ff ff       	call   c000f850 <free>
c001e4b3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4b6:	83 c4 10             	add    esp,0x10
c001e4b9:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e4bf:	7f e2                	jg     c001e4a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e4c1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e4cb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e4d0:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e4d3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e4d6:	d3 c0                	rol    eax,cl
c001e4d8:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e4df:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4e2:	89 f7                	mov    edi,esi
c001e4e4:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e4ec:	0f 85 74 01 00 00    	jne    c001e666 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e4f2:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e4f8:	85 ed                	test   ebp,ebp
c001e4fa:	74 1b                	je     c001e517 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e4fc:	83 ec 0c             	sub    esp,0xc
c001e4ff:	55                   	push   ebp
c001e500:	e8 4f be ff ff       	call   c001a354 <EnvVarContainer::~EnvVarContainer()>
c001e505:	59                   	pop    ecx
c001e506:	5e                   	pop    esi
c001e507:	6a 0c                	push   0xc
c001e509:	55                   	push   ebp
c001e50a:	e8 57 49 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c001e50f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e512:	83 c4 10             	add    esp,0x10
c001e515:	89 f7                	mov    edi,esi
c001e517:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e51d:	85 c0                	test   eax,eax
c001e51f:	0f 84 aa 00 00 00    	je     c001e5cf <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e525:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e528:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e52c:	31 c9                	xor    ecx,ecx
c001e52e:	eb 10                	jmp    c001e540 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e530:	41                   	inc    ecx
c001e531:	83 f9 10             	cmp    ecx,0x10
c001e534:	0f 84 95 00 00 00    	je     c001e5cf <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e53a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e540:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e547:	d3 fa                	sar    edx,cl
c001e549:	83 e2 01             	and    edx,0x1
c001e54c:	74 e2                	je     c001e530 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e54e:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e551:	01 ca                	add    edx,ecx
c001e553:	89 d5                	mov    ebp,edx
c001e555:	c1 e5 05             	shl    ebp,0x5
c001e558:	01 ea                	add    edx,ebp
c001e55a:	01 d0                	add    eax,edx
c001e55c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e562:	83 fd 07             	cmp    ebp,0x7
c001e565:	75 c9                	jne    c001e530 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e567:	05 40 02 00 00       	add    eax,0x240
c001e56c:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e56f:	83 fd ff             	cmp    ebp,0xffffffff
c001e572:	0f 8c 08 01 00 00    	jl     c001e680 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e578:	0f 84 b9 01 00 00    	je     c001e737 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e57e:	85 ed                	test   ebp,ebp
c001e580:	0f 84 a0 01 00 00    	je     c001e726 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e586:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e588:	75 a6                	jne    c001e530 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e58a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e590:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e594:	01 d0                	add    eax,edx
c001e596:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e59a:	83 ec 0c             	sub    esp,0xc
c001e59d:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e5a3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5a6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e5ac:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e5b3:	50                   	push   eax
c001e5b4:	e8 21 fe ff ff       	call   c001e3da <unblockTask(ThreadControlBlock*)>
c001e5b9:	83 c4 10             	add    esp,0x10
c001e5bc:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5c3:	89 f7                	mov    edi,esi
c001e5c5:	41                   	inc    ecx
c001e5c6:	83 f9 10             	cmp    ecx,0x10
c001e5c9:	0f 85 6b ff ff ff    	jne    c001e53a <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e5cf:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e5d5:	85 c0                	test   eax,eax
c001e5d7:	74 5d                	je     c001e636 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5d9:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e5df:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e5e5:	74 4f                	je     c001e636 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5e7:	83 ec 0c             	sub    esp,0xc
c001e5ea:	68 08 19 03 c0       	push   0xc0031908
c001e5ef:	e8 1a a4 00 00       	call   c0028a0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5f4:	c7 04 24 08 19 03 c0 	mov    DWORD PTR [esp],0xc0031908
c001e5fb:	89 c7                	mov    edi,eax
c001e5fd:	e8 14 a4 00 00       	call   c0028a16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e602:	83 c4 10             	add    esp,0x10
c001e605:	84 c0                	test   al,al
c001e607:	0f 84 e4 00 00 00    	je     c001e6f1 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e60d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e610:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e616:	85 d2                	test   edx,edx
c001e618:	74 0f                	je     c001e629 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e61a:	83 ec 0c             	sub    esp,0xc
c001e61d:	8b 02                	mov    eax,DWORD PTR [edx]
c001e61f:	52                   	push   edx
c001e620:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e626:	83 c4 10             	add    esp,0x10
c001e629:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e633:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e636:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e63c:	85 db                	test   ebx,ebx
c001e63e:	74 16                	je     c001e656 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e640:	83 ec 0c             	sub    esp,0xc
c001e643:	53                   	push   ebx
c001e644:	e8 c1 3b ff ff       	call   c001220a <VAS::~VAS()>
c001e649:	58                   	pop    eax
c001e64a:	5a                   	pop    edx
c001e64b:	6a 10                	push   0x10
c001e64d:	53                   	push   ebx
c001e64e:	e8 13 48 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c001e653:	83 c4 10             	add    esp,0x10
c001e656:	83 ec 0c             	sub    esp,0xc
c001e659:	68 6a c1 02 c0       	push   0xc002c16a
c001e65e:	e8 e3 48 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e663:	83 c4 10             	add    esp,0x10
c001e666:	83 ec 08             	sub    esp,0x8
c001e669:	68 3f 07 00 00       	push   0x73f
c001e66e:	68 78 c1 02 c0       	push   0xc002c178
c001e673:	e8 ce 48 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e678:	83 c4 2c             	add    esp,0x2c
c001e67b:	5b                   	pop    ebx
c001e67c:	5e                   	pop    esi
c001e67d:	5f                   	pop    edi
c001e67e:	5d                   	pop    ebp
c001e67f:	c3                   	ret    
c001e680:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e684:	83 ec 0c             	sub    esp,0xc
c001e687:	68 54 c4 02 c0       	push   0xc002c454
c001e68c:	e8 56 bf ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001e691:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e694:	83 c4 10             	add    esp,0x10
c001e697:	89 f7                	mov    edi,esi
c001e699:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e69d:	e9 8e fe ff ff       	jmp    c001e530 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6a2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e6a8:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e6ae:	75 1c                	jne    c001e6cc <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6b0:	83 ec 0c             	sub    esp,0xc
c001e6b3:	68 bc c4 02 c0       	push   0xc002c4bc
c001e6b8:	e8 89 48 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e6bd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e6c4:	e8 8f fb ff ff       	call   c001e258 <blockTask(TaskState)>
c001e6c9:	83 c4 10             	add    esp,0x10
c001e6cc:	83 ec 08             	sub    esp,0x8
c001e6cf:	56                   	push   esi
c001e6d0:	68 08 19 03 c0       	push   0xc0031908
c001e6d5:	e8 06 a4 00 00       	call   c0028ae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e6da:	c7 04 24 08 19 03 c0 	mov    DWORD PTR [esp],0xc0031908
c001e6e1:	e8 28 a3 00 00       	call   c0028a0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6e6:	83 c4 10             	add    esp,0x10
c001e6e9:	39 f8                	cmp    eax,edi
c001e6eb:	0f 84 1c ff ff ff    	je     c001e60d <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e6f1:	83 ec 0c             	sub    esp,0xc
c001e6f4:	68 08 19 03 c0       	push   0xc0031908
c001e6f9:	e8 10 a3 00 00       	call   c0028a0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6fe:	c7 04 24 08 19 03 c0 	mov    DWORD PTR [esp],0xc0031908
c001e705:	89 c6                	mov    esi,eax
c001e707:	e8 26 a3 00 00       	call   c0028a32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e70c:	83 c4 10             	add    esp,0x10
c001e70f:	39 f3                	cmp    ebx,esi
c001e711:	74 b9                	je     c001e6cc <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e713:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e716:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e719:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e71f:	75 ab                	jne    c001e6cc <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e721:	e9 7c ff ff ff       	jmp    c001e6a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e726:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e72a:	83 ec 0c             	sub    esp,0xc
c001e72d:	68 88 c4 02 c0       	push   0xc002c488
c001e732:	e9 55 ff ff ff       	jmp    c001e68c <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e737:	8b 36                	mov    esi,DWORD PTR [esi]
c001e739:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e73d:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e740:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e743:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e749:	01 d7                	add    edi,edx
c001e74b:	89 f8                	mov    eax,edi
c001e74d:	e9 44 fe ff ff       	jmp    c001e596 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e752 <cleanerTaskFunction(void*)>:
c001e752:	53                   	push   ebx
c001e753:	83 ec 08             	sub    esp,0x8
c001e756:	e8 69 f6 ff ff       	call   c001ddc4 <unlockScheduler()>
c001e75b:	e8 62 f6 ff ff       	call   c001ddc2 <lockScheduler()>
c001e760:	80 3d cc 18 03 c0 00 	cmp    BYTE PTR ds:0xc00318cc,0x0
c001e767:	0f 85 8e 00 00 00    	jne    c001e7fb <cleanerTaskFunction(void*)+0xa9>
c001e76d:	83 ec 0c             	sub    esp,0xc
c001e770:	6a 02                	push   0x2
c001e772:	e8 9f fa ff ff       	call   c001e216 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e777:	83 c4 10             	add    esp,0x10
c001e77a:	c6 05 cc 18 03 c0 00 	mov    BYTE PTR ds:0xc00318cc,0x0
c001e781:	e8 63 f6 ff ff       	call   c001dde9 <lockStuff()>
c001e786:	e8 37 f6 ff ff       	call   c001ddc2 <lockScheduler()>
c001e78b:	83 ec 0c             	sub    esp,0xc
c001e78e:	68 f0 18 03 c0       	push   0xc00318f0
c001e793:	e8 7e a2 00 00       	call   c0028a16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e798:	83 c4 10             	add    esp,0x10
c001e79b:	84 c0                	test   al,al
c001e79d:	75 40                	jne    c001e7df <cleanerTaskFunction(void*)+0x8d>
c001e79f:	83 ec 0c             	sub    esp,0xc
c001e7a2:	68 f0 18 03 c0       	push   0xc00318f0
c001e7a7:	e8 62 a2 00 00       	call   c0028a0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7ac:	c7 04 24 f0 18 03 c0 	mov    DWORD PTR [esp],0xc00318f0
c001e7b3:	89 c3                	mov    ebx,eax
c001e7b5:	e8 78 a2 00 00       	call   c0028a32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7ba:	c7 04 24 8e c1 02 c0 	mov    DWORD PTR [esp],0xc002c18e
c001e7c1:	e8 80 47 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e7c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7c9:	e8 bb fc ff ff       	call   c001e489 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e7ce:	c7 04 24 a7 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1a7
c001e7d5:	e8 6c 47 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e7da:	83 c4 10             	add    esp,0x10
c001e7dd:	eb ac                	jmp    c001e78b <cleanerTaskFunction(void*)+0x39>
c001e7df:	e8 e0 f5 ff ff       	call   c001ddc4 <unlockScheduler()>
c001e7e4:	e8 9a f9 ff ff       	call   c001e183 <unlockStuff()>
c001e7e9:	e8 d4 f5 ff ff       	call   c001ddc2 <lockScheduler()>
c001e7ee:	80 3d cc 18 03 c0 00 	cmp    BYTE PTR ds:0xc00318cc,0x0
c001e7f5:	0f 84 72 ff ff ff    	je     c001e76d <cleanerTaskFunction(void*)+0x1b>
c001e7fb:	e8 c4 f5 ff ff       	call   c001ddc4 <unlockScheduler()>
c001e800:	e9 75 ff ff ff       	jmp    c001e77a <cleanerTaskFunction(void*)+0x28>

c001e805 <terminateTask(int)>:
c001e805:	83 ec 14             	sub    esp,0x14
c001e808:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e80d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e810:	83 c0 0c             	add    eax,0xc
c001e813:	50                   	push   eax
c001e814:	68 e4 c4 02 c0       	push   0xc002c4e4
c001e819:	e8 28 47 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e81e:	e8 c6 f5 ff ff       	call   c001dde9 <lockStuff()>
c001e823:	e8 9a f5 ff ff       	call   c001ddc2 <lockScheduler()>
c001e828:	c7 04 24 ba c1 02 c0 	mov    DWORD PTR [esp],0xc002c1ba
c001e82f:	e8 12 47 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e834:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e838:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e83d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e840:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e845:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e848:	5a                   	pop    edx
c001e849:	59                   	pop    ecx
c001e84a:	50                   	push   eax
c001e84b:	68 f0 18 03 c0       	push   0xc00318f0
c001e850:	e8 8b a2 00 00       	call   c0028ae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e855:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e85a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e861:	c7 04 24 d4 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1d4
c001e868:	e8 d9 46 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e86d:	83 c4 10             	add    esp,0x10
c001e870:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c001e875:	85 c0                	test   eax,eax
c001e877:	74 5a                	je     c001e8d3 <terminateTask(int)+0xce>
c001e879:	83 ec 0c             	sub    esp,0xc
c001e87c:	68 ee c1 02 c0       	push   0xc002c1ee
c001e881:	e8 c0 46 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e886:	58                   	pop    eax
c001e887:	c6 05 cc 18 03 c0 01 	mov    BYTE PTR ds:0xc00318cc,0x1
c001e88e:	ff 35 c8 18 03 c0    	push   DWORD PTR ds:0xc00318c8
c001e894:	e8 41 fb ff ff       	call   c001e3da <unblockTask(ThreadControlBlock*)>
c001e899:	c7 04 24 08 c2 02 c0 	mov    DWORD PTR [esp],0xc002c208
c001e8a0:	e8 a1 46 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e8a5:	83 c4 10             	add    esp,0x10
c001e8a8:	e8 17 f5 ff ff       	call   c001ddc4 <unlockScheduler()>
c001e8ad:	e8 d1 f8 ff ff       	call   c001e183 <unlockStuff()>
c001e8b2:	83 ec 0c             	sub    esp,0xc
c001e8b5:	68 40 c2 02 c0       	push   0xc002c240
c001e8ba:	e8 87 46 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e8bf:	83 c4 10             	add    esp,0x10
c001e8c2:	e8 fb f4 ff ff       	call   c001ddc2 <lockScheduler()>
c001e8c7:	e8 32 f8 ff ff       	call   c001e0fe <schedule()>
c001e8cc:	e8 f3 f4 ff ff       	call   c001ddc4 <unlockScheduler()>
c001e8d1:	eb ef                	jmp    c001e8c2 <terminateTask(int)+0xbd>
c001e8d3:	83 ec 0c             	sub    esp,0xc
c001e8d6:	68 22 c2 02 c0       	push   0xc002c222
c001e8db:	e8 66 46 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001e8e0:	83 c4 10             	add    esp,0x10
c001e8e3:	eb c3                	jmp    c001e8a8 <terminateTask(int)+0xa3>

c001e8e5 <Thr::terminateFromIRQ(int)>:
c001e8e5:	83 ec 18             	sub    esp,0x18
c001e8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8ec:	e8 14 ff ff ff       	call   c001e805 <terminateTask(int)>
c001e8f1:	90                   	nop

c001e8f2 <Semaphore::release()>:
c001e8f2:	83 ec 0c             	sub    esp,0xc
c001e8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f9:	e8 eb f4 ff ff       	call   c001dde9 <lockStuff()>
c001e8fe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e901:	85 d2                	test   edx,edx
c001e903:	74 1a                	je     c001e91f <Semaphore::release()+0x2d>
c001e905:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e908:	83 ec 0c             	sub    esp,0xc
c001e90b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e90e:	52                   	push   edx
c001e90f:	e8 c6 fa ff ff       	call   c001e3da <unblockTask(ThreadControlBlock*)>
c001e914:	83 c4 10             	add    esp,0x10
c001e917:	83 c4 0c             	add    esp,0xc
c001e91a:	e9 64 f8 ff ff       	jmp    c001e183 <unlockStuff()>
c001e91f:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e922:	83 c4 0c             	add    esp,0xc
c001e925:	e9 59 f8 ff ff       	jmp    c001e183 <unlockStuff()>

c001e92a <__static_initialization_and_destruction_0(int, int)>:
c001e92a:	83 ec 0c             	sub    esp,0xc
c001e92d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e932:	0f 85 88 00 00 00    	jne    c001e9c0 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e938:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e940:	75 7e                	jne    c001e9c0 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e942:	83 ec 0c             	sub    esp,0xc
c001e945:	68 08 19 03 c0       	push   0xc0031908
c001e94a:	e8 41 a3 00 00       	call   c0028c90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e94f:	83 c4 10             	add    esp,0x10
c001e952:	83 ec 04             	sub    esp,0x4
c001e955:	68 9c d2 02 c0       	push   0xc002d29c
c001e95a:	68 08 19 03 c0       	push   0xc0031908
c001e95f:	68 50 8c 02 c0       	push   0xc0028c50
c001e964:	e8 77 44 ff ff       	call   c0012de0 <__cxa_atexit>
c001e969:	83 c4 10             	add    esp,0x10
c001e96c:	83 ec 0c             	sub    esp,0xc
c001e96f:	68 fc 18 03 c0       	push   0xc00318fc
c001e974:	e8 17 a3 00 00       	call   c0028c90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e979:	83 c4 10             	add    esp,0x10
c001e97c:	83 ec 04             	sub    esp,0x4
c001e97f:	68 9c d2 02 c0       	push   0xc002d29c
c001e984:	68 fc 18 03 c0       	push   0xc00318fc
c001e989:	68 50 8c 02 c0       	push   0xc0028c50
c001e98e:	e8 4d 44 ff ff       	call   c0012de0 <__cxa_atexit>
c001e993:	83 c4 10             	add    esp,0x10
c001e996:	83 ec 0c             	sub    esp,0xc
c001e999:	68 f0 18 03 c0       	push   0xc00318f0
c001e99e:	e8 ed a2 00 00       	call   c0028c90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9a3:	83 c4 10             	add    esp,0x10
c001e9a6:	83 ec 04             	sub    esp,0x4
c001e9a9:	68 9c d2 02 c0       	push   0xc002d29c
c001e9ae:	68 f0 18 03 c0       	push   0xc00318f0
c001e9b3:	68 50 8c 02 c0       	push   0xc0028c50
c001e9b8:	e8 23 44 ff ff       	call   c0012de0 <__cxa_atexit>
c001e9bd:	83 c4 10             	add    esp,0x10
c001e9c0:	90                   	nop
c001e9c1:	83 c4 0c             	add    esp,0xc
c001e9c4:	c3                   	ret    

c001e9c5 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e9c5:	83 ec 0c             	sub    esp,0xc
c001e9c8:	83 ec 08             	sub    esp,0x8
c001e9cb:	68 ff ff 00 00       	push   0xffff
c001e9d0:	6a 01                	push   0x1
c001e9d2:	e8 53 ff ff ff       	call   c001e92a <__static_initialization_and_destruction_0(int, int)>
c001e9d7:	83 c4 10             	add    esp,0x10
c001e9da:	83 c4 0c             	add    esp,0xc
c001e9dd:	c3                   	ret    

c001e9de <Vm::inbv(unsigned short)>:
c001e9de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9e2:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9e7:	75 06                	jne    c001e9ef <Vm::inbv(unsigned short)+0x11>
c001e9e9:	a0 4c 19 03 c0       	mov    al,ds:0xc003194c
c001e9ee:	c3                   	ret    
c001e9ef:	ec                   	in     al,dx
c001e9f0:	c3                   	ret    

c001e9f1 <Vm::outbv(unsigned short, unsigned char)>:
c001e9f1:	53                   	push   ebx
c001e9f2:	83 ec 08             	sub    esp,0x8
c001e9f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e9fd:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea02:	75 38                	jne    c001ea3c <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea04:	0f b6 c3             	movzx  eax,bl
c001ea07:	51                   	push   ecx
c001ea08:	51                   	push   ecx
c001ea09:	50                   	push   eax
c001ea0a:	68 03 c5 02 c0       	push   0xc002c503
c001ea0f:	e8 32 45 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001ea14:	8b 15 4c 19 03 c0    	mov    edx,DWORD PTR ds:0xc003194c
c001ea1a:	83 c4 10             	add    esp,0x10
c001ea1d:	8d 42 01             	lea    eax,[edx+0x1]
c001ea20:	88 9a 60 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6a0],bl
c001ea26:	a3 4c 19 03 c0       	mov    ds:0xc003194c,eax
c001ea2b:	83 f8 20             	cmp    eax,0x20
c001ea2e:	75 0f                	jne    c001ea3f <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea30:	c7 05 4c 19 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003194c,0x1f
c001ea3a:	eb 03                	jmp    c001ea3f <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea3c:	88 d8                	mov    al,bl
c001ea3e:	ee                   	out    dx,al
c001ea3f:	83 c4 08             	add    esp,0x8
c001ea42:	5b                   	pop    ebx
c001ea43:	c3                   	ret    

c001ea44 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea44:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea49:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea4e:	c1 e0 04             	shl    eax,0x4
c001ea51:	01 d0                	add    eax,edx
c001ea53:	c3                   	ret    

c001ea54 <Vm::getSegment(unsigned int)>:
c001ea54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea58:	c1 e8 10             	shr    eax,0x10
c001ea5b:	c3                   	ret    

c001ea5c <Vm::getOffset(unsigned int)>:
c001ea5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea60:	c3                   	ret    

c001ea61 <Vm::mainloop2()>:
c001ea61:	83 ec 0c             	sub    esp,0xc
c001ea64:	e8 59 f3 ff ff       	call   c001ddc2 <lockScheduler()>
c001ea69:	83 ec 0c             	sub    esp,0xc
c001ea6c:	c6 05 45 19 03 c0 01 	mov    BYTE PTR ds:0xc0031945,0x1
c001ea73:	6a 02                	push   0x2
c001ea75:	e8 9c f7 ff ff       	call   c001e216 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea7f:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea83:	52                   	push   edx
c001ea84:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea88:	52                   	push   edx
c001ea89:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ea8d:	52                   	push   edx
c001ea8e:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ea92:	50                   	push   eax
c001ea93:	e8 62 18 fe ff       	call   c00002fa <goToVM86>
c001ea98:	83 c4 2c             	add    esp,0x2c
c001ea9b:	c3                   	ret    

c001ea9c <Vm::mainVm8086Loop(void*)>:
c001ea9c:	83 ec 0c             	sub    esp,0xc
c001ea9f:	e8 20 f3 ff ff       	call   c001ddc4 <unlockScheduler()>
c001eaa4:	83 c4 0c             	add    esp,0xc
c001eaa7:	eb b8                	jmp    c001ea61 <Vm::mainloop2()>

c001eaa9 <Vm::mainloop3(unsigned long)>:
c001eaa9:	53                   	push   ebx
c001eaaa:	83 ec 08             	sub    esp,0x8
c001eaad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eab1:	e8 0c f3 ff ff       	call   c001ddc2 <lockScheduler()>
c001eab6:	83 ec 0c             	sub    esp,0xc
c001eab9:	89 1d 40 19 03 c0    	mov    DWORD PTR ds:0xc0031940,ebx
c001eabf:	6a 02                	push   0x2
c001eac1:	c6 05 44 19 03 c0 01 	mov    BYTE PTR ds:0xc0031944,0x1
c001eac8:	e8 49 f7 ff ff       	call   c001e216 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eacd:	83 c4 18             	add    esp,0x18
c001ead0:	5b                   	pop    ebx
c001ead1:	eb 8e                	jmp    c001ea61 <Vm::mainloop2()>

c001ead3 <Vm::initialise8086()>:
c001ead3:	83 ec 0c             	sub    esp,0xc
c001ead6:	68 80 00 00 00       	push   0x80
c001eadb:	6a 00                	push   0x0
c001eadd:	68 9c ea 01 c0       	push   0xc001ea9c
c001eae2:	ff 35 14 19 03 c0    	push   DWORD PTR ds:0xc0031914
c001eae8:	e8 07 f4 ff ff       	call   c001def4 <Process::createThread(void (*)(void*), void*, int)>
c001eaed:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eaf4:	a3 48 19 03 c0       	mov    ds:0xc0031948,eax
c001eaf9:	68 00 01 00 00       	push   0x100
c001eafe:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001eb03:	6a 00                	push   0x0
c001eb05:	6a 00                	push   0x0
c001eb07:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb0d:	e8 58 3b ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb12:	83 c4 2c             	add    esp,0x2c
c001eb15:	c3                   	ret    

c001eb16 <Vm::finish8086()>:
c001eb16:	53                   	push   ebx
c001eb17:	83 ec 08             	sub    esp,0x8
c001eb1a:	e8 a3 f2 ff ff       	call   c001ddc2 <lockScheduler()>
c001eb1f:	80 3d 44 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031944,0x0
c001eb26:	75 0c                	jne    c001eb34 <Vm::finish8086()+0x1e>
c001eb28:	e8 d1 f5 ff ff       	call   c001e0fe <schedule()>
c001eb2d:	e8 92 f2 ff ff       	call   c001ddc4 <unlockScheduler()>
c001eb32:	eb e6                	jmp    c001eb1a <Vm::finish8086()+0x4>
c001eb34:	83 ec 0c             	sub    esp,0xc
c001eb37:	8b 1d 40 19 03 c0    	mov    ebx,DWORD PTR ds:0xc0031940
c001eb3d:	ff 35 48 19 03 c0    	push   DWORD PTR ds:0xc0031948
c001eb43:	c6 05 44 19 03 c0 00 	mov    BYTE PTR ds:0xc0031944,0x0
c001eb4a:	e8 8b f8 ff ff       	call   c001e3da <unblockTask(ThreadControlBlock*)>
c001eb4f:	e8 70 f2 ff ff       	call   c001ddc4 <unlockScheduler()>
c001eb54:	89 d8                	mov    eax,ebx
c001eb56:	83 c4 18             	add    esp,0x18
c001eb59:	5b                   	pop    ebx
c001eb5a:	c3                   	ret    

c001eb5b <Vm::getOutput8086(unsigned char*)>:
c001eb5b:	83 ec 10             	sub    esp,0x10
c001eb5e:	ff 35 4c 19 03 c0    	push   DWORD PTR ds:0xc003194c
c001eb64:	68 60 19 03 c0       	push   0xc0031960
c001eb69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb6d:	e8 d2 1b fe ff       	call   c0000744 <memcpy>
c001eb72:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c001eb77:	c7 05 4c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003194c,0x0
c001eb81:	83 c4 1c             	add    esp,0x1c
c001eb84:	c3                   	ret    

c001eb85 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb85:	55                   	push   ebp
c001eb86:	57                   	push   edi
c001eb87:	56                   	push   esi
c001eb88:	53                   	push   ebx
c001eb89:	83 ec 2c             	sub    esp,0x2c
c001eb8c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eb90:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001eb94:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001eb98:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001eb9c:	e8 21 f2 ff ff       	call   c001ddc2 <lockScheduler()>
c001eba1:	a0 45 19 03 c0       	mov    al,ds:0xc0031945
c001eba6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ebaa:	84 c0                	test   al,al
c001ebac:	75 0c                	jne    c001ebba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ebae:	e8 4b f5 ff ff       	call   c001e0fe <schedule()>
c001ebb3:	e8 0c f2 ff ff       	call   c001ddc4 <unlockScheduler()>
c001ebb8:	eb e2                	jmp    c001eb9c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebba:	a1 48 19 03 c0       	mov    eax,ds:0xc0031948
c001ebbf:	c7 05 4c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003194c,0x0
c001ebc9:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ebcd:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ebd1:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ebd5:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ebd9:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ebdd:	50                   	push   eax
c001ebde:	6a 20                	push   0x20
c001ebe0:	6a 00                	push   0x0
c001ebe2:	68 60 19 03 c0       	push   0xc0031960
c001ebe7:	e8 8c 1b fe ff       	call   c0000778 <memset>
c001ebec:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ebf3:	e8 48 0c ff ff       	call   c000f840 <malloc>
c001ebf8:	83 c4 0c             	add    esp,0xc
c001ebfb:	89 c7                	mov    edi,eax
c001ebfd:	ff 35 14 19 03 c0    	push   DWORD PTR ds:0xc0031914
c001ec03:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec07:	50                   	push   eax
c001ec08:	e8 91 48 ff ff       	call   c001349e <File::File(char const*, Process*)>
c001ec0d:	83 c4 10             	add    esp,0x10
c001ec10:	85 ff                	test   edi,edi
c001ec12:	75 0a                	jne    c001ec1e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec14:	83 ec 0c             	sub    esp,0xc
c001ec17:	68 1f c5 02 c0       	push   0xc002c51f
c001ec1c:	eb 27                	jmp    c001ec45 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ec1e:	50                   	push   eax
c001ec1f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec23:	50                   	push   eax
c001ec24:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec28:	50                   	push   eax
c001ec29:	57                   	push   edi
c001ec2a:	e8 7f 4b ff ff       	call   c00137ae <File::stat(unsigned long long*, bool*)>
c001ec2f:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ec34:	83 c4 10             	add    esp,0x10
c001ec37:	89 e8                	mov    eax,ebp
c001ec39:	84 c0                	test   al,al
c001ec3b:	74 19                	je     c001ec56 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec3d:	83 ec 0c             	sub    esp,0xc
c001ec40:	68 33 c5 02 c0       	push   0xc002c533
c001ec45:	e8 9d b9 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001ec4a:	31 ed                	xor    ebp,ebp
c001ec4c:	e8 73 f1 ff ff       	call   c001ddc4 <unlockScheduler()>
c001ec51:	83 c4 10             	add    esp,0x10
c001ec54:	eb 75                	jmp    c001eccb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec56:	50                   	push   eax
c001ec57:	50                   	push   eax
c001ec58:	6a 01                	push   0x1
c001ec5a:	57                   	push   edi
c001ec5b:	e8 a2 48 ff ff       	call   c0013502 <File::open(FileOpenMode)>
c001ec60:	83 c4 10             	add    esp,0x10
c001ec63:	85 c0                	test   eax,eax
c001ec65:	74 17                	je     c001ec7e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ec67:	83 ec 0c             	sub    esp,0xc
c001ec6a:	68 4c c5 02 c0       	push   0xc002c54c
c001ec6f:	e8 73 b9 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001ec74:	e8 4b f1 ff ff       	call   c001ddc4 <unlockScheduler()>
c001ec79:	83 c4 10             	add    esp,0x10
c001ec7c:	eb 4d                	jmp    c001eccb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec7e:	0f b7 f6             	movzx  esi,si
c001ec81:	50                   	push   eax
c001ec82:	0f b7 db             	movzx  ebx,bx
c001ec85:	50                   	push   eax
c001ec86:	56                   	push   esi
c001ec87:	53                   	push   ebx
c001ec88:	e8 b7 fd ff ff       	call   c001ea44 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec8d:	5a                   	pop    edx
c001ec8e:	8b 17                	mov    edx,DWORD PTR [edi]
c001ec90:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ec94:	51                   	push   ecx
c001ec95:	50                   	push   eax
c001ec96:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec9a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec9e:	57                   	push   edi
c001ec9f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eca2:	83 c4 14             	add    esp,0x14
c001eca5:	57                   	push   edi
c001eca6:	e8 b5 48 ff ff       	call   c0013560 <File::close()>
c001ecab:	c6 05 45 19 03 c0 00 	mov    BYTE PTR ds:0xc0031945,0x0
c001ecb2:	e8 0d f1 ff ff       	call   c001ddc4 <unlockScheduler()>
c001ecb7:	59                   	pop    ecx
c001ecb8:	ff 35 48 19 03 c0    	push   DWORD PTR ds:0xc0031948
c001ecbe:	e8 17 f7 ff ff       	call   c001e3da <unblockTask(ThreadControlBlock*)>
c001ecc3:	83 c4 10             	add    esp,0x10
c001ecc6:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001eccb:	83 c4 2c             	add    esp,0x2c
c001ecce:	89 e8                	mov    eax,ebp
c001ecd0:	5b                   	pop    ebx
c001ecd1:	5e                   	pop    esi
c001ecd2:	5f                   	pop    edi
c001ecd3:	5d                   	pop    ebp
c001ecd4:	c3                   	ret    

c001ecd5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ecd5:	57                   	push   edi
c001ecd6:	56                   	push   esi
c001ecd7:	53                   	push   ebx
c001ecd8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ecdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ece0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ece4:	83 e8 06             	sub    eax,0x6
c001ece7:	0f b7 c0             	movzx  eax,ax
c001ecea:	50                   	push   eax
c001eceb:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ecf0:	50                   	push   eax
c001ecf1:	e8 4e fd ff ff       	call   c001ea44 <Vm::realToLinear(unsigned short, unsigned short)>
c001ecf6:	5a                   	pop    edx
c001ecf7:	5e                   	pop    esi
c001ecf8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ecfb:	8d 56 fa             	lea    edx,[esi-0x6]
c001ecfe:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed04:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed07:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed0a:	83 c2 02             	add    edx,0x2
c001ed0d:	66 89 10             	mov    WORD PTR [eax],dx
c001ed10:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed13:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed17:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed1a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed1e:	89 d6                	mov    esi,edx
c001ed20:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed26:	66 81 e6 ff fd       	and    si,0xfdff
c001ed2b:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed2f:	74 07                	je     c001ed38 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed31:	89 d6                	mov    esi,edx
c001ed33:	66 81 ce 00 02       	or     si,0x200
c001ed38:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed41:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed45:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed4d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed50:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed58:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed5b:	5b                   	pop    ebx
c001ed5c:	5e                   	pop    esi
c001ed5d:	5f                   	pop    edi
c001ed5e:	c3                   	ret    

c001ed5f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed5f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed64:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed69:	c1 e0 04             	shl    eax,0x4
c001ed6c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed6f:	c3                   	ret    

c001ed70 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed70:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed75:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed7a:	c1 e0 04             	shl    eax,0x4
c001ed7d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed81:	c3                   	ret    

c001ed82 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed82:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed87:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed8c:	c1 e0 04             	shl    eax,0x4
c001ed8f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ed92:	c3                   	ret    

c001ed93 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ed93:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed98:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed9d:	c1 e0 04             	shl    eax,0x4
c001eda0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eda4:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001eda7:	c3                   	ret    

c001eda8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001eda8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edad:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edb2:	c1 e0 04             	shl    eax,0x4
c001edb5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edb9:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001edbd:	c3                   	ret    

c001edbe <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001edbe:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edc3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edc8:	c1 e0 04             	shl    eax,0x4
c001edcb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edcf:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001edd2:	c3                   	ret    

c001edd3 <Vm::faultHandler(regs*)>:
c001edd3:	55                   	push   ebp
c001edd4:	57                   	push   edi
c001edd5:	56                   	push   esi
c001edd6:	53                   	push   ebx
c001edd7:	83 ec 1c             	sub    esp,0x1c
c001edda:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001edde:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ede1:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ede4:	0f b7 c1             	movzx  eax,cx
c001ede7:	50                   	push   eax
c001ede8:	0f b7 c3             	movzx  eax,bx
c001edeb:	c1 e3 04             	shl    ebx,0x4
c001edee:	50                   	push   eax
c001edef:	e8 50 fc ff ff       	call   c001ea44 <Vm::realToLinear(unsigned short, unsigned short)>
c001edf4:	5a                   	pop    edx
c001edf5:	89 c5                	mov    ebp,eax
c001edf7:	5e                   	pop    esi
c001edf8:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001edfc:	50                   	push   eax
c001edfd:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee01:	50                   	push   eax
c001ee02:	e8 3d fc ff ff       	call   c001ea44 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee07:	01 cb                	add    ebx,ecx
c001ee09:	89 c6                	mov    esi,eax
c001ee0b:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee0f:	50                   	push   eax
c001ee10:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee14:	50                   	push   eax
c001ee15:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee19:	50                   	push   eax
c001ee1a:	55                   	push   ebp
c001ee1b:	53                   	push   ebx
c001ee1c:	b3 06                	mov    bl,0x6
c001ee1e:	68 65 c5 02 c0       	push   0xc002c565
c001ee23:	e8 1e 41 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001ee28:	83 c4 20             	add    esp,0x20
c001ee2b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ee30:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ee35:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee39:	3c 9d                	cmp    al,0x9d
c001ee3b:	0f 84 d7 02 00 00    	je     c001f118 <Vm::faultHandler(regs*)+0x345>
c001ee41:	0f 87 a3 00 00 00    	ja     c001eeea <Vm::faultHandler(regs*)+0x117>
c001ee47:	3c 66                	cmp    al,0x66
c001ee49:	0f 84 15 02 00 00    	je     c001f064 <Vm::faultHandler(regs*)+0x291>
c001ee4f:	77 5f                	ja     c001eeb0 <Vm::faultHandler(regs*)+0xdd>
c001ee51:	3c 36                	cmp    al,0x36
c001ee53:	0f 84 f1 01 00 00    	je     c001f04a <Vm::faultHandler(regs*)+0x277>
c001ee59:	77 28                	ja     c001ee83 <Vm::faultHandler(regs*)+0xb0>
c001ee5b:	3c 26                	cmp    al,0x26
c001ee5d:	0f 84 99 01 00 00    	je     c001effc <Vm::faultHandler(regs*)+0x229>
c001ee63:	3c 2e                	cmp    al,0x2e
c001ee65:	0f 85 3b 07 00 00    	jne    c001f5a6 <Vm::faultHandler(regs*)+0x7d3>
c001ee6b:	83 ec 0c             	sub    esp,0xc
c001ee6e:	31 db                	xor    ebx,ebx
c001ee70:	68 7a c5 02 c0       	push   0xc002c57a
c001ee75:	e8 cc 40 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001ee7a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee7d:	83 c4 10             	add    esp,0x10
c001ee80:	45                   	inc    ebp
c001ee81:	eb b2                	jmp    c001ee35 <Vm::faultHandler(regs*)+0x62>
c001ee83:	3c 64                	cmp    al,0x64
c001ee85:	0f 84 8b 01 00 00    	je     c001f016 <Vm::faultHandler(regs*)+0x243>
c001ee8b:	0f 87 9f 01 00 00    	ja     c001f030 <Vm::faultHandler(regs*)+0x25d>
c001ee91:	3c 3e                	cmp    al,0x3e
c001ee93:	0f 85 0d 07 00 00    	jne    c001f5a6 <Vm::faultHandler(regs*)+0x7d3>
c001ee99:	83 ec 0c             	sub    esp,0xc
c001ee9c:	b3 01                	mov    bl,0x1
c001ee9e:	68 7e c5 02 c0       	push   0xc002c57e
c001eea3:	e8 9e 40 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001eea8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eeab:	83 c4 10             	add    esp,0x10
c001eeae:	eb d0                	jmp    c001ee80 <Vm::faultHandler(regs*)+0xad>
c001eeb0:	3c 6d                	cmp    al,0x6d
c001eeb2:	0f 84 af 03 00 00    	je     c001f267 <Vm::faultHandler(regs*)+0x494>
c001eeb8:	77 15                	ja     c001eecf <Vm::faultHandler(regs*)+0xfc>
c001eeba:	3c 67                	cmp    al,0x67
c001eebc:	0f 84 bf 01 00 00    	je     c001f081 <Vm::faultHandler(regs*)+0x2ae>
c001eec2:	3c 6c                	cmp    al,0x6c
c001eec4:	0f 84 3f 03 00 00    	je     c001f209 <Vm::faultHandler(regs*)+0x436>
c001eeca:	e9 d7 06 00 00       	jmp    c001f5a6 <Vm::faultHandler(regs*)+0x7d3>
c001eecf:	3c 6f                	cmp    al,0x6f
c001eed1:	0f 84 a4 04 00 00    	je     c001f37b <Vm::faultHandler(regs*)+0x5a8>
c001eed7:	0f 82 11 04 00 00    	jb     c001f2ee <Vm::faultHandler(regs*)+0x51b>
c001eedd:	3c 9c                	cmp    al,0x9c
c001eedf:	0f 84 ba 01 00 00    	je     c001f09f <Vm::faultHandler(regs*)+0x2cc>
c001eee5:	e9 bc 06 00 00       	jmp    c001f5a6 <Vm::faultHandler(regs*)+0x7d3>
c001eeea:	3c ec                	cmp    al,0xec
c001eeec:	0f 84 24 06 00 00    	je     c001f516 <Vm::faultHandler(regs*)+0x743>
c001eef2:	0f 87 93 00 00 00    	ja     c001ef8b <Vm::faultHandler(regs*)+0x1b8>
c001eef8:	3c e4                	cmp    al,0xe4
c001eefa:	0f 84 5c 05 00 00    	je     c001f45c <Vm::faultHandler(regs*)+0x689>
c001ef00:	77 6a                	ja     c001ef6c <Vm::faultHandler(regs*)+0x199>
c001ef02:	3c cd                	cmp    al,0xcd
c001ef04:	0f 84 7e 02 00 00    	je     c001f188 <Vm::faultHandler(regs*)+0x3b5>
c001ef0a:	3c cf                	cmp    al,0xcf
c001ef0c:	0f 85 94 06 00 00    	jne    c001f5a6 <Vm::faultHandler(regs*)+0x7d3>
c001ef12:	83 ec 0c             	sub    esp,0xc
c001ef15:	68 c2 c5 02 c0       	push   0xc002c5c2
c001ef1a:	e8 27 40 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001ef1f:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ef22:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ef25:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef29:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef2c:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ef30:	0d 00 02 02 00       	or     eax,0x20200
c001ef35:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ef38:	56                   	push   esi
c001ef39:	53                   	push   ebx
c001ef3a:	52                   	push   edx
c001ef3b:	68 c8 c5 02 c0       	push   0xc002c5c8
c001ef40:	e8 01 40 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001ef45:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ef49:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef4f:	66 c1 e8 09          	shr    ax,0x9
c001ef53:	83 e0 01             	and    eax,0x1
c001ef56:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef59:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ef5c:	83 c0 06             	add    eax,0x6
c001ef5f:	25 ff ff 00 00       	and    eax,0xffff
c001ef64:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ef67:	e9 95 02 00 00       	jmp    c001f201 <Vm::faultHandler(regs*)+0x42e>
c001ef6c:	3c e6                	cmp    al,0xe6
c001ef6e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ef72:	0f 84 4e 05 00 00    	je     c001f4c6 <Vm::faultHandler(regs*)+0x6f3>
c001ef78:	0f 82 0a 05 00 00    	jb     c001f488 <Vm::faultHandler(regs*)+0x6b5>
c001ef7e:	3c e7                	cmp    al,0xe7
c001ef80:	0f 84 69 05 00 00    	je     c001f4ef <Vm::faultHandler(regs*)+0x71c>
c001ef86:	e9 1b 06 00 00       	jmp    c001f5a6 <Vm::faultHandler(regs*)+0x7d3>
c001ef8b:	3c ef                	cmp    al,0xef
c001ef8d:	0f 84 e6 05 00 00    	je     c001f579 <Vm::faultHandler(regs*)+0x7a6>
c001ef93:	77 37                	ja     c001efcc <Vm::faultHandler(regs*)+0x1f9>
c001ef95:	3c ed                	cmp    al,0xed
c001ef97:	0f 84 a3 05 00 00    	je     c001f540 <Vm::faultHandler(regs*)+0x76d>
c001ef9d:	3c ee                	cmp    al,0xee
c001ef9f:	0f 85 01 06 00 00    	jne    c001f5a6 <Vm::faultHandler(regs*)+0x7d3>
c001efa5:	52                   	push   edx
c001efa6:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001efa9:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001efac:	68 63 c6 02 c0       	push   0xc002c663
c001efb1:	e8 90 3f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001efb6:	59                   	pop    ecx
c001efb7:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001efbb:	5b                   	pop    ebx
c001efbc:	50                   	push   eax
c001efbd:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001efc1:	50                   	push   eax
c001efc2:	e8 2a fa ff ff       	call   c001e9f1 <Vm::outbv(unsigned short, unsigned char)>
c001efc7:	e9 a5 05 00 00       	jmp    c001f571 <Vm::faultHandler(regs*)+0x79e>
c001efcc:	3c fa                	cmp    al,0xfa
c001efce:	0f 84 f7 01 00 00    	je     c001f1cb <Vm::faultHandler(regs*)+0x3f8>
c001efd4:	3c fb                	cmp    al,0xfb
c001efd6:	0f 84 0a 02 00 00    	je     c001f1e6 <Vm::faultHandler(regs*)+0x413>
c001efdc:	3c f3                	cmp    al,0xf3
c001efde:	0f 85 c2 05 00 00    	jne    c001f5a6 <Vm::faultHandler(regs*)+0x7d3>
c001efe4:	83 ec 0c             	sub    esp,0xc
c001efe7:	68 9b c5 02 c0       	push   0xc002c59b
c001efec:	e8 55 3f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001eff1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eff4:	83 c4 10             	add    esp,0x10
c001eff7:	e9 84 fe ff ff       	jmp    c001ee80 <Vm::faultHandler(regs*)+0xad>
c001effc:	83 ec 0c             	sub    esp,0xc
c001efff:	b3 02                	mov    bl,0x2
c001f001:	68 76 c5 02 c0       	push   0xc002c576
c001f006:	e8 3b 3f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f00b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f00e:	83 c4 10             	add    esp,0x10
c001f011:	e9 6a fe ff ff       	jmp    c001ee80 <Vm::faultHandler(regs*)+0xad>
c001f016:	83 ec 0c             	sub    esp,0xc
c001f019:	b3 03                	mov    bl,0x3
c001f01b:	68 82 c5 02 c0       	push   0xc002c582
c001f020:	e8 21 3f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f025:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f028:	83 c4 10             	add    esp,0x10
c001f02b:	e9 50 fe ff ff       	jmp    c001ee80 <Vm::faultHandler(regs*)+0xad>
c001f030:	83 ec 0c             	sub    esp,0xc
c001f033:	b3 04                	mov    bl,0x4
c001f035:	68 86 c5 02 c0       	push   0xc002c586
c001f03a:	e8 07 3f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f03f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f042:	83 c4 10             	add    esp,0x10
c001f045:	e9 36 fe ff ff       	jmp    c001ee80 <Vm::faultHandler(regs*)+0xad>
c001f04a:	83 ec 0c             	sub    esp,0xc
c001f04d:	b3 05                	mov    bl,0x5
c001f04f:	68 8a c5 02 c0       	push   0xc002c58a
c001f054:	e8 ed 3e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f059:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f05c:	83 c4 10             	add    esp,0x10
c001f05f:	e9 1c fe ff ff       	jmp    c001ee80 <Vm::faultHandler(regs*)+0xad>
c001f064:	83 ec 0c             	sub    esp,0xc
c001f067:	68 8e c5 02 c0       	push   0xc002c58e
c001f06c:	e8 d5 3e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f071:	83 c4 10             	add    esp,0x10
c001f074:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f077:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f07c:	e9 ff fd ff ff       	jmp    c001ee80 <Vm::faultHandler(regs*)+0xad>
c001f081:	50                   	push   eax
c001f082:	50                   	push   eax
c001f083:	6a 01                	push   0x1
c001f085:	68 93 c5 02 c0       	push   0xc002c593
c001f08a:	e8 b7 3e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f08f:	83 c4 10             	add    esp,0x10
c001f092:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f095:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f09a:	e9 e1 fd ff ff       	jmp    c001ee80 <Vm::faultHandler(regs*)+0xad>
c001f09f:	83 ec 0c             	sub    esp,0xc
c001f0a2:	68 a1 c5 02 c0       	push   0xc002c5a1
c001f0a7:	e8 9a 3e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f0ac:	83 c4 10             	add    esp,0x10
c001f0af:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f0b2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0b7:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f0ba:	74 2f                	je     c001f0eb <Vm::faultHandler(regs*)+0x318>
c001f0bc:	83 ea 04             	sub    edx,0x4
c001f0bf:	25 ff 0d 00 00       	and    eax,0xdff
c001f0c4:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f0ca:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f0cd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f0d0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0d6:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f0da:	0f 84 bf 04 00 00    	je     c001f59f <Vm::faultHandler(regs*)+0x7cc>
c001f0e0:	80 cc 02             	or     ah,0x2
c001f0e3:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f0e6:	e9 b4 04 00 00       	jmp    c001f59f <Vm::faultHandler(regs*)+0x7cc>
c001f0eb:	83 ea 02             	sub    edx,0x2
c001f0ee:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f0f4:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f0f7:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f0fb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f101:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f105:	74 05                	je     c001f10c <Vm::faultHandler(regs*)+0x339>
c001f107:	80 cc 02             	or     ah,0x2
c001f10a:	eb 03                	jmp    c001f10f <Vm::faultHandler(regs*)+0x33c>
c001f10c:	80 e4 fd             	and    ah,0xfd
c001f10f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f113:	e9 87 04 00 00       	jmp    c001f59f <Vm::faultHandler(regs*)+0x7cc>
c001f118:	83 ec 0c             	sub    esp,0xc
c001f11b:	68 a8 c5 02 c0       	push   0xc002c5a8
c001f120:	e8 21 3e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f125:	83 c4 10             	add    esp,0x10
c001f128:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f12d:	74 28                	je     c001f157 <Vm::faultHandler(regs*)+0x384>
c001f12f:	8b 06                	mov    eax,DWORD PTR [esi]
c001f131:	25 ff 0d 00 00       	and    eax,0xdff
c001f136:	0d 00 02 02 00       	or     eax,0x20200
c001f13b:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f13e:	8b 06                	mov    eax,DWORD PTR [esi]
c001f140:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f146:	c1 e8 09             	shr    eax,0x9
c001f149:	83 e0 01             	and    eax,0x1
c001f14c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f14f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f152:	83 c0 04             	add    eax,0x4
c001f155:	eb 24                	jmp    c001f17b <Vm::faultHandler(regs*)+0x3a8>
c001f157:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f15a:	0d 00 02 02 00       	or     eax,0x20200
c001f15f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f162:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f165:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f16b:	66 c1 e8 09          	shr    ax,0x9
c001f16f:	83 e0 01             	and    eax,0x1
c001f172:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f175:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f178:	83 c0 02             	add    eax,0x2
c001f17b:	25 ff ff 00 00       	and    eax,0xffff
c001f180:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f183:	e9 17 04 00 00       	jmp    c001f59f <Vm::faultHandler(regs*)+0x7cc>
c001f188:	53                   	push   ebx
c001f189:	53                   	push   ebx
c001f18a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f18e:	50                   	push   eax
c001f18f:	68 ae c5 02 c0       	push   0xc002c5ae
c001f194:	e8 ad 3d ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f199:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f19d:	83 c4 10             	add    esp,0x10
c001f1a0:	3c ee                	cmp    al,0xee
c001f1a2:	75 10                	jne    c001f1b4 <Vm::faultHandler(regs*)+0x3e1>
c001f1a4:	83 ec 0c             	sub    esp,0xc
c001f1a7:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f1aa:	e8 fa f8 ff ff       	call   c001eaa9 <Vm::mainloop3(unsigned long)>
c001f1af:	e9 c0 03 00 00       	jmp    c001f574 <Vm::faultHandler(regs*)+0x7a1>
c001f1b4:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f1b8:	83 ec 0c             	sub    esp,0xc
c001f1bb:	53                   	push   ebx
c001f1bc:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f1c0:	53                   	push   ebx
c001f1c1:	55                   	push   ebp
c001f1c2:	50                   	push   eax
c001f1c3:	57                   	push   edi
c001f1c4:	e8 0c fb ff ff       	call   c001ecd5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f1c9:	eb 36                	jmp    c001f201 <Vm::faultHandler(regs*)+0x42e>
c001f1cb:	83 ec 0c             	sub    esp,0xc
c001f1ce:	68 b8 c5 02 c0       	push   0xc002c5b8
c001f1d3:	e8 6e 3d ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f1d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f1dd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f1e1:	e9 8b 03 00 00       	jmp    c001f571 <Vm::faultHandler(regs*)+0x79e>
c001f1e6:	83 ec 0c             	sub    esp,0xc
c001f1e9:	68 bd c5 02 c0       	push   0xc002c5bd
c001f1ee:	e8 53 3d ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f1f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f1f8:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f1fc:	e9 70 03 00 00       	jmp    c001f571 <Vm::faultHandler(regs*)+0x79e>
c001f201:	83 c4 20             	add    esp,0x20
c001f204:	e9 99 03 00 00       	jmp    c001f5a2 <Vm::faultHandler(regs*)+0x7cf>
c001f209:	83 ec 0c             	sub    esp,0xc
c001f20c:	68 fb c5 02 c0       	push   0xc002c5fb
c001f211:	e8 30 3d ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f216:	83 c4 10             	add    esp,0x10
c001f219:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f21c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f221:	74 0d                	je     c001f230 <Vm::faultHandler(regs*)+0x45d>
c001f223:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f22a:	0f 87 9e 01 00 00    	ja     c001f3ce <Vm::faultHandler(regs*)+0x5fb>
c001f230:	83 ec 0c             	sub    esp,0xc
c001f233:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f237:	0f b7 db             	movzx  ebx,bx
c001f23a:	50                   	push   eax
c001f23b:	e8 9e f7 ff ff       	call   c001e9de <Vm::inbv(unsigned short)>
c001f240:	83 c4 0c             	add    esp,0xc
c001f243:	0f b6 c0             	movzx  eax,al
c001f246:	50                   	push   eax
c001f247:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f24b:	50                   	push   eax
c001f24c:	53                   	push   ebx
c001f24d:	e8 41 fb ff ff       	call   c001ed93 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f252:	83 c4 10             	add    esp,0x10
c001f255:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f258:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f25c:	74 03                	je     c001f261 <Vm::faultHandler(regs*)+0x48e>
c001f25e:	48                   	dec    eax
c001f25f:	eb 01                	jmp    c001f262 <Vm::faultHandler(regs*)+0x48f>
c001f261:	40                   	inc    eax
c001f262:	0f b7 c0             	movzx  eax,ax
c001f265:	eb 7f                	jmp    c001f2e6 <Vm::faultHandler(regs*)+0x513>
c001f267:	83 ec 0c             	sub    esp,0xc
c001f26a:	68 2d c6 02 c0       	push   0xc002c62d
c001f26f:	e8 d2 3c ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f274:	83 c4 10             	add    esp,0x10
c001f277:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f27a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f27f:	74 0d                	je     c001f28e <Vm::faultHandler(regs*)+0x4bb>
c001f281:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f288:	0f 87 40 01 00 00    	ja     c001f3ce <Vm::faultHandler(regs*)+0x5fb>
c001f28e:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f291:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f295:	0f b7 db             	movzx  ebx,bx
c001f298:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f29d:	74 20                	je     c001f2bf <Vm::faultHandler(regs*)+0x4ec>
c001f29f:	ed                   	in     eax,dx
c001f2a0:	51                   	push   ecx
c001f2a1:	50                   	push   eax
c001f2a2:	56                   	push   esi
c001f2a3:	53                   	push   ebx
c001f2a4:	e8 15 fb ff ff       	call   c001edbe <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f2a9:	83 c4 10             	add    esp,0x10
c001f2ac:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2af:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2b3:	74 05                	je     c001f2ba <Vm::faultHandler(regs*)+0x4e7>
c001f2b5:	83 e8 04             	sub    eax,0x4
c001f2b8:	eb 27                	jmp    c001f2e1 <Vm::faultHandler(regs*)+0x50e>
c001f2ba:	83 c0 04             	add    eax,0x4
c001f2bd:	eb 22                	jmp    c001f2e1 <Vm::faultHandler(regs*)+0x50e>
c001f2bf:	66 ed                	in     ax,dx
c001f2c1:	0f b7 c0             	movzx  eax,ax
c001f2c4:	52                   	push   edx
c001f2c5:	50                   	push   eax
c001f2c6:	56                   	push   esi
c001f2c7:	53                   	push   ebx
c001f2c8:	e8 db fa ff ff       	call   c001eda8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f2cd:	83 c4 10             	add    esp,0x10
c001f2d0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2d3:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2d7:	74 05                	je     c001f2de <Vm::faultHandler(regs*)+0x50b>
c001f2d9:	83 e8 02             	sub    eax,0x2
c001f2dc:	eb 03                	jmp    c001f2e1 <Vm::faultHandler(regs*)+0x50e>
c001f2de:	83 c0 02             	add    eax,0x2
c001f2e1:	25 ff ff 00 00       	and    eax,0xffff
c001f2e6:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f2e9:	e9 b1 02 00 00       	jmp    c001f59f <Vm::faultHandler(regs*)+0x7cc>
c001f2ee:	83 ec 0c             	sub    esp,0xc
c001f2f1:	4b                   	dec    ebx
c001f2f2:	68 33 c6 02 c0       	push   0xc002c633
c001f2f7:	e8 4a 3c ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f2fc:	83 c4 10             	add    esp,0x10
c001f2ff:	80 fb 05             	cmp    bl,0x5
c001f302:	77 0a                	ja     c001f30e <Vm::faultHandler(regs*)+0x53b>
c001f304:	0f b6 db             	movzx  ebx,bl
c001f307:	ff 24 9d a4 c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd395c]
c001f30e:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f312:	eb 1b                	jmp    c001f32f <Vm::faultHandler(regs*)+0x55c>
c001f314:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f318:	eb 15                	jmp    c001f32f <Vm::faultHandler(regs*)+0x55c>
c001f31a:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f31e:	eb 0f                	jmp    c001f32f <Vm::faultHandler(regs*)+0x55c>
c001f320:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f324:	eb 09                	jmp    c001f32f <Vm::faultHandler(regs*)+0x55c>
c001f326:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f329:	eb 04                	jmp    c001f32f <Vm::faultHandler(regs*)+0x55c>
c001f32b:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f32f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f334:	74 0d                	je     c001f343 <Vm::faultHandler(regs*)+0x570>
c001f336:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f33d:	0f 87 8b 00 00 00    	ja     c001f3ce <Vm::faultHandler(regs*)+0x5fb>
c001f343:	53                   	push   ebx
c001f344:	53                   	push   ebx
c001f345:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f349:	52                   	push   edx
c001f34a:	50                   	push   eax
c001f34b:	e8 0f fa ff ff       	call   c001ed5f <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f350:	5e                   	pop    esi
c001f351:	0f b6 c0             	movzx  eax,al
c001f354:	5d                   	pop    ebp
c001f355:	50                   	push   eax
c001f356:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f35a:	50                   	push   eax
c001f35b:	e8 91 f6 ff ff       	call   c001e9f1 <Vm::outbv(unsigned short, unsigned char)>
c001f360:	83 c4 10             	add    esp,0x10
c001f363:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f366:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f36a:	74 03                	je     c001f36f <Vm::faultHandler(regs*)+0x59c>
c001f36c:	48                   	dec    eax
c001f36d:	eb 01                	jmp    c001f370 <Vm::faultHandler(regs*)+0x59d>
c001f36f:	40                   	inc    eax
c001f370:	0f b7 c0             	movzx  eax,ax
c001f373:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f376:	e9 24 02 00 00       	jmp    c001f59f <Vm::faultHandler(regs*)+0x7cc>
c001f37b:	83 ec 0c             	sub    esp,0xc
c001f37e:	4b                   	dec    ebx
c001f37f:	68 33 c6 02 c0       	push   0xc002c633
c001f384:	e8 bd 3b ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f389:	83 c4 10             	add    esp,0x10
c001f38c:	80 fb 05             	cmp    bl,0x5
c001f38f:	77 0a                	ja     c001f39b <Vm::faultHandler(regs*)+0x5c8>
c001f391:	0f b6 db             	movzx  ebx,bl
c001f394:	ff 24 9d bc c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3944]
c001f39b:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f39f:	eb 1b                	jmp    c001f3bc <Vm::faultHandler(regs*)+0x5e9>
c001f3a1:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3a5:	eb 15                	jmp    c001f3bc <Vm::faultHandler(regs*)+0x5e9>
c001f3a7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3ab:	eb 0f                	jmp    c001f3bc <Vm::faultHandler(regs*)+0x5e9>
c001f3ad:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3b1:	eb 09                	jmp    c001f3bc <Vm::faultHandler(regs*)+0x5e9>
c001f3b3:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3b6:	eb 04                	jmp    c001f3bc <Vm::faultHandler(regs*)+0x5e9>
c001f3b8:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3bc:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f3bf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3c4:	74 39                	je     c001f3ff <Vm::faultHandler(regs*)+0x62c>
c001f3c6:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f3cc:	76 31                	jbe    c001f3ff <Vm::faultHandler(regs*)+0x62c>
c001f3ce:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f3d2:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f3d6:	51                   	push   ecx
c001f3d7:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f3db:	51                   	push   ecx
c001f3dc:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f3e0:	51                   	push   ecx
c001f3e1:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f3e5:	51                   	push   ecx
c001f3e6:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f3ea:	52                   	push   edx
c001f3eb:	50                   	push   eax
c001f3ec:	50                   	push   eax
c001f3ed:	68 00 c6 02 c0       	push   0xc002c600
c001f3f2:	e8 4f 3b ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f3f7:	83 c4 20             	add    esp,0x20
c001f3fa:	e9 fb 01 00 00       	jmp    c001f5fa <Vm::faultHandler(regs*)+0x827>
c001f3ff:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f402:	0f b7 d3             	movzx  edx,bx
c001f405:	81 e6 00 04 00 00    	and    esi,0x400
c001f40b:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f40e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f413:	74 1d                	je     c001f432 <Vm::faultHandler(regs*)+0x65f>
c001f415:	51                   	push   ecx
c001f416:	51                   	push   ecx
c001f417:	52                   	push   edx
c001f418:	50                   	push   eax
c001f419:	e8 64 f9 ff ff       	call   c001ed82 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f41e:	83 c4 10             	add    esp,0x10
c001f421:	89 ea                	mov    edx,ebp
c001f423:	ef                   	out    dx,eax
c001f424:	85 f6                	test   esi,esi
c001f426:	74 05                	je     c001f42d <Vm::faultHandler(regs*)+0x65a>
c001f428:	83 eb 04             	sub    ebx,0x4
c001f42b:	eb 21                	jmp    c001f44e <Vm::faultHandler(regs*)+0x67b>
c001f42d:	83 c3 04             	add    ebx,0x4
c001f430:	eb 1c                	jmp    c001f44e <Vm::faultHandler(regs*)+0x67b>
c001f432:	51                   	push   ecx
c001f433:	51                   	push   ecx
c001f434:	52                   	push   edx
c001f435:	50                   	push   eax
c001f436:	e8 35 f9 ff ff       	call   c001ed70 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f43b:	83 c4 10             	add    esp,0x10
c001f43e:	89 ea                	mov    edx,ebp
c001f440:	66 ef                	out    dx,ax
c001f442:	85 f6                	test   esi,esi
c001f444:	74 05                	je     c001f44b <Vm::faultHandler(regs*)+0x678>
c001f446:	83 eb 02             	sub    ebx,0x2
c001f449:	eb 03                	jmp    c001f44e <Vm::faultHandler(regs*)+0x67b>
c001f44b:	83 c3 02             	add    ebx,0x2
c001f44e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f454:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f457:	e9 43 01 00 00       	jmp    c001f59f <Vm::faultHandler(regs*)+0x7cc>
c001f45c:	53                   	push   ebx
c001f45d:	53                   	push   ebx
c001f45e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f462:	50                   	push   eax
c001f463:	68 39 c6 02 c0       	push   0xc002c639
c001f468:	e8 d9 3a ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f46d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f474:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f478:	89 04 24             	mov    DWORD PTR [esp],eax
c001f47b:	e8 5e f5 ff ff       	call   c001e9de <Vm::inbv(unsigned short)>
c001f480:	0f b6 c0             	movzx  eax,al
c001f483:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f486:	eb 5e                	jmp    c001f4e6 <Vm::faultHandler(regs*)+0x713>
c001f488:	51                   	push   ecx
c001f489:	51                   	push   ecx
c001f48a:	53                   	push   ebx
c001f48b:	68 3f c6 02 c0       	push   0xc002c63f
c001f490:	e8 b1 3a ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f495:	83 c4 10             	add    esp,0x10
c001f498:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f49d:	74 07                	je     c001f4a6 <Vm::faultHandler(regs*)+0x6d3>
c001f49f:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4a3:	ed                   	in     eax,dx
c001f4a4:	eb 14                	jmp    c001f4ba <Vm::faultHandler(regs*)+0x6e7>
c001f4a6:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f4a9:	66 31 db             	xor    bx,bx
c001f4ac:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f4af:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4b3:	66 ed                	in     ax,dx
c001f4b5:	0f b7 c0             	movzx  eax,ax
c001f4b8:	09 d8                	or     eax,ebx
c001f4ba:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f4bd:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f4c1:	e9 dc 00 00 00       	jmp    c001f5a2 <Vm::faultHandler(regs*)+0x7cf>
c001f4c6:	50                   	push   eax
c001f4c7:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4ca:	53                   	push   ebx
c001f4cb:	68 45 c6 02 c0       	push   0xc002c645
c001f4d0:	e8 71 3a ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f4d5:	58                   	pop    eax
c001f4d6:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f4da:	5a                   	pop    edx
c001f4db:	50                   	push   eax
c001f4dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4e0:	50                   	push   eax
c001f4e1:	e8 0b f5 ff ff       	call   c001e9f1 <Vm::outbv(unsigned short, unsigned char)>
c001f4e6:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f4ea:	e9 85 00 00 00       	jmp    c001f574 <Vm::faultHandler(regs*)+0x7a1>
c001f4ef:	50                   	push   eax
c001f4f0:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4f3:	53                   	push   ebx
c001f4f4:	68 4e c6 02 c0       	push   0xc002c64e
c001f4f9:	e8 48 3a ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f4fe:	83 c4 10             	add    esp,0x10
c001f501:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f505:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f50a:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f50d:	74 03                	je     c001f512 <Vm::faultHandler(regs*)+0x73f>
c001f50f:	ef                   	out    dx,eax
c001f510:	eb ab                	jmp    c001f4bd <Vm::faultHandler(regs*)+0x6ea>
c001f512:	66 ef                	out    dx,ax
c001f514:	eb a7                	jmp    c001f4bd <Vm::faultHandler(regs*)+0x6ea>
c001f516:	55                   	push   ebp
c001f517:	55                   	push   ebp
c001f518:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f51b:	68 57 c6 02 c0       	push   0xc002c657
c001f520:	e8 21 3a ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f525:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f52c:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f530:	89 04 24             	mov    DWORD PTR [esp],eax
c001f533:	e8 a6 f4 ff ff       	call   c001e9de <Vm::inbv(unsigned short)>
c001f538:	0f b6 c0             	movzx  eax,al
c001f53b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f53e:	eb 31                	jmp    c001f571 <Vm::faultHandler(regs*)+0x79e>
c001f540:	56                   	push   esi
c001f541:	56                   	push   esi
c001f542:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f545:	68 5d c6 02 c0       	push   0xc002c65d
c001f54a:	e8 f7 39 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f54f:	83 c4 10             	add    esp,0x10
c001f552:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f555:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f55a:	74 03                	je     c001f55f <Vm::faultHandler(regs*)+0x78c>
c001f55c:	ed                   	in     eax,dx
c001f55d:	eb 0d                	jmp    c001f56c <Vm::faultHandler(regs*)+0x799>
c001f55f:	66 ed                	in     ax,dx
c001f561:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f564:	0f b7 c0             	movzx  eax,ax
c001f567:	66 31 d2             	xor    dx,dx
c001f56a:	09 d0                	or     eax,edx
c001f56c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f56f:	eb 2e                	jmp    c001f59f <Vm::faultHandler(regs*)+0x7cc>
c001f571:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f574:	83 c4 10             	add    esp,0x10
c001f577:	eb 29                	jmp    c001f5a2 <Vm::faultHandler(regs*)+0x7cf>
c001f579:	50                   	push   eax
c001f57a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f57d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f580:	68 6c c6 02 c0       	push   0xc002c66c
c001f585:	e8 bc 39 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f58a:	83 c4 10             	add    esp,0x10
c001f58d:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f590:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f595:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f598:	74 03                	je     c001f59d <Vm::faultHandler(regs*)+0x7ca>
c001f59a:	ef                   	out    dx,eax
c001f59b:	eb 02                	jmp    c001f59f <Vm::faultHandler(regs*)+0x7cc>
c001f59d:	66 ef                	out    dx,ax
c001f59f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5a2:	b0 01                	mov    al,0x1
c001f5a4:	eb 56                	jmp    c001f5fc <Vm::faultHandler(regs*)+0x829>
c001f5a6:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f5aa:	51                   	push   ecx
c001f5ab:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f5af:	51                   	push   ecx
c001f5b0:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f5b4:	51                   	push   ecx
c001f5b5:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f5b9:	51                   	push   ecx
c001f5ba:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5be:	52                   	push   edx
c001f5bf:	50                   	push   eax
c001f5c0:	50                   	push   eax
c001f5c1:	68 75 c6 02 c0       	push   0xc002c675
c001f5c6:	e8 7b 39 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c001f5cb:	83 c4 20             	add    esp,0x20
c001f5ce:	83 ec 0c             	sub    esp,0xc
c001f5d1:	6a 60                	push   0x60
c001f5d3:	e8 06 f4 ff ff       	call   c001e9de <Vm::inbv(unsigned short)>
c001f5d8:	83 c4 10             	add    esp,0x10
c001f5db:	3c 1c                	cmp    al,0x1c
c001f5dd:	74 04                	je     c001f5e3 <Vm::faultHandler(regs*)+0x810>
c001f5df:	3c 5a                	cmp    al,0x5a
c001f5e1:	75 eb                	jne    c001f5ce <Vm::faultHandler(regs*)+0x7fb>
c001f5e3:	3c 1c                	cmp    al,0x1c
c001f5e5:	74 04                	je     c001f5eb <Vm::faultHandler(regs*)+0x818>
c001f5e7:	3c 5a                	cmp    al,0x5a
c001f5e9:	75 0f                	jne    c001f5fa <Vm::faultHandler(regs*)+0x827>
c001f5eb:	83 ec 0c             	sub    esp,0xc
c001f5ee:	6a 60                	push   0x60
c001f5f0:	e8 e9 f3 ff ff       	call   c001e9de <Vm::inbv(unsigned short)>
c001f5f5:	83 c4 10             	add    esp,0x10
c001f5f8:	eb e9                	jmp    c001f5e3 <Vm::faultHandler(regs*)+0x810>
c001f5fa:	31 c0                	xor    eax,eax
c001f5fc:	83 c4 1c             	add    esp,0x1c
c001f5ff:	5b                   	pop    ebx
c001f600:	5e                   	pop    esi
c001f601:	5f                   	pop    edi
c001f602:	5d                   	pop    ebp
c001f603:	c3                   	ret    

c001f604 <Vm::fpuInternalTo32(unsigned long long)>:
c001f604:	57                   	push   edi
c001f605:	56                   	push   esi
c001f606:	53                   	push   ebx
c001f607:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f60b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f60f:	89 d6                	mov    esi,edx
c001f611:	89 d7                	mov    edi,edx
c001f613:	89 c1                	mov    ecx,eax
c001f615:	c1 ef 14             	shr    edi,0x14
c001f618:	89 d3                	mov    ebx,edx
c001f61a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f620:	31 d2                	xor    edx,edx
c001f622:	89 f8                	mov    eax,edi
c001f624:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f62a:	bf ff 00 00 00       	mov    edi,0xff
c001f62f:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f634:	83 d2 ff             	adc    edx,0xffffffff
c001f637:	39 c7                	cmp    edi,eax
c001f639:	bf 00 00 00 00       	mov    edi,0x0
c001f63e:	19 d7                	sbb    edi,edx
c001f640:	72 15                	jb     c001f657 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f642:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f646:	c1 e0 17             	shl    eax,0x17
c001f649:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f64f:	09 f1                	or     ecx,esi
c001f651:	09 c1                	or     ecx,eax
c001f653:	89 cf                	mov    edi,ecx
c001f655:	eb 02                	jmp    c001f659 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f657:	31 ff                	xor    edi,edi
c001f659:	89 f8                	mov    eax,edi
c001f65b:	5b                   	pop    ebx
c001f65c:	5e                   	pop    esi
c001f65d:	5f                   	pop    edi
c001f65e:	c3                   	ret    

c001f65f <Vm::fpuInternalTo64(unsigned long long)>:
c001f65f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f663:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f667:	c3                   	ret    

c001f668 <Vm::fpu32ToInternal(unsigned int)>:
c001f668:	57                   	push   edi
c001f669:	31 ff                	xor    edi,edi
c001f66b:	56                   	push   esi
c001f66c:	53                   	push   ebx
c001f66d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f671:	89 cb                	mov    ebx,ecx
c001f673:	89 ce                	mov    esi,ecx
c001f675:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f67b:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f681:	c1 e9 17             	shr    ecx,0x17
c001f684:	89 f0                	mov    eax,esi
c001f686:	0f b6 d1             	movzx  edx,cl
c001f689:	81 c2 80 03 00 00    	add    edx,0x380
c001f68f:	89 d1                	mov    ecx,edx
c001f691:	89 fa                	mov    edx,edi
c001f693:	c1 e1 14             	shl    ecx,0x14
c001f696:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f69a:	c1 e0 1d             	shl    eax,0x1d
c001f69d:	89 d7                	mov    edi,edx
c001f69f:	89 c6                	mov    esi,eax
c001f6a1:	89 ca                	mov    edx,ecx
c001f6a3:	89 f0                	mov    eax,esi
c001f6a5:	09 fa                	or     edx,edi
c001f6a7:	09 da                	or     edx,ebx
c001f6a9:	5b                   	pop    ebx
c001f6aa:	5e                   	pop    esi
c001f6ab:	5f                   	pop    edi
c001f6ac:	c3                   	ret    

c001f6ad <Vm::fpu64ToInternal(unsigned long long)>:
c001f6ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6b5:	c3                   	ret    

c001f6b6 <Vm::fpuFloatToLong(unsigned long long)>:
c001f6b6:	57                   	push   edi
c001f6b7:	31 c0                	xor    eax,eax
c001f6b9:	56                   	push   esi
c001f6ba:	31 d2                	xor    edx,edx
c001f6bc:	53                   	push   ebx
c001f6bd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6c5:	89 d9                	mov    ecx,ebx
c001f6c7:	c1 e9 14             	shr    ecx,0x14
c001f6ca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f6d0:	89 cf                	mov    edi,ecx
c001f6d2:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f6d8:	78 33                	js     c001f70d <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6da:	89 d9                	mov    ecx,ebx
c001f6dc:	89 f0                	mov    eax,esi
c001f6de:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f6e4:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f6ea:	89 ca                	mov    edx,ecx
c001f6ec:	b9 34 00 00 00       	mov    ecx,0x34
c001f6f1:	29 f9                	sub    ecx,edi
c001f6f3:	0f ad d0             	shrd   eax,edx,cl
c001f6f6:	d3 fa                	sar    edx,cl
c001f6f8:	f6 c1 20             	test   cl,0x20
c001f6fb:	74 05                	je     c001f702 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f6fd:	89 d0                	mov    eax,edx
c001f6ff:	c1 fa 1f             	sar    edx,0x1f
c001f702:	85 db                	test   ebx,ebx
c001f704:	79 07                	jns    c001f70d <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f706:	f7 d8                	neg    eax
c001f708:	83 d2 00             	adc    edx,0x0
c001f70b:	f7 da                	neg    edx
c001f70d:	5b                   	pop    ebx
c001f70e:	5e                   	pop    esi
c001f70f:	5f                   	pop    edi
c001f710:	c3                   	ret    

c001f711 <Vm::fpuULongToFloat(unsigned long long)>:
c001f711:	57                   	push   edi
c001f712:	31 c9                	xor    ecx,ecx
c001f714:	56                   	push   esi
c001f715:	53                   	push   ebx
c001f716:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f71a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f71e:	0f ba e7 14          	bt     edi,0x14
c001f722:	72 07                	jb     c001f72b <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f724:	01 f6                	add    esi,esi
c001f726:	11 ff                	adc    edi,edi
c001f728:	41                   	inc    ecx
c001f729:	eb f3                	jmp    c001f71e <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f72b:	89 fa                	mov    edx,edi
c001f72d:	89 f0                	mov    eax,esi
c001f72f:	bb 33 04 00 00       	mov    ebx,0x433
c001f734:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f73a:	29 cb                	sub    ebx,ecx
c001f73c:	89 d9                	mov    ecx,ebx
c001f73e:	5b                   	pop    ebx
c001f73f:	c1 e1 14             	shl    ecx,0x14
c001f742:	5e                   	pop    esi
c001f743:	09 ca                	or     edx,ecx
c001f745:	5f                   	pop    edi
c001f746:	c3                   	ret    

c001f747 <Vm::fpuLongToFloat(long long)>:
c001f747:	56                   	push   esi
c001f748:	31 c0                	xor    eax,eax
c001f74a:	53                   	push   ebx
c001f74b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f74f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f753:	39 c8                	cmp    eax,ecx
c001f755:	19 d8                	sbb    eax,ebx
c001f757:	7d 04                	jge    c001f75d <Vm::fpuLongToFloat(long long)+0x16>
c001f759:	31 f6                	xor    esi,esi
c001f75b:	eb 0c                	jmp    c001f769 <Vm::fpuLongToFloat(long long)+0x22>
c001f75d:	f7 d9                	neg    ecx
c001f75f:	be 01 00 00 00       	mov    esi,0x1
c001f764:	83 d3 00             	adc    ebx,0x0
c001f767:	f7 db                	neg    ebx
c001f769:	31 c0                	xor    eax,eax
c001f76b:	0f ba e3 14          	bt     ebx,0x14
c001f76f:	72 07                	jb     c001f778 <Vm::fpuLongToFloat(long long)+0x31>
c001f771:	01 c9                	add    ecx,ecx
c001f773:	11 db                	adc    ebx,ebx
c001f775:	40                   	inc    eax
c001f776:	eb f3                	jmp    c001f76b <Vm::fpuLongToFloat(long long)+0x24>
c001f778:	ba 33 04 00 00       	mov    edx,0x433
c001f77d:	29 c2                	sub    edx,eax
c001f77f:	89 c8                	mov    eax,ecx
c001f781:	c1 e2 14             	shl    edx,0x14
c001f784:	89 d9                	mov    ecx,ebx
c001f786:	89 f3                	mov    ebx,esi
c001f788:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f78e:	09 ca                	or     edx,ecx
c001f790:	84 db                	test   bl,bl
c001f792:	74 06                	je     c001f79a <Vm::fpuLongToFloat(long long)+0x53>
c001f794:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f79a:	5b                   	pop    ebx
c001f79b:	5e                   	pop    esi
c001f79c:	c3                   	ret    

c001f79d <Vm::fpuGet0()>:
c001f79d:	31 c0                	xor    eax,eax
c001f79f:	31 d2                	xor    edx,edx
c001f7a1:	c3                   	ret    

c001f7a2 <Vm::fpuGet1()>:
c001f7a2:	b8 01 00 00 00       	mov    eax,0x1
c001f7a7:	31 d2                	xor    edx,edx
c001f7a9:	c3                   	ret    

c001f7aa <Vm::fpuGetPi()>:
c001f7aa:	b8 03 00 00 00       	mov    eax,0x3
c001f7af:	31 d2                	xor    edx,edx
c001f7b1:	c3                   	ret    

c001f7b2 <Vm::fpuGetLog2E()>:
c001f7b2:	83 ec 18             	sub    esp,0x18
c001f7b5:	68 d4 c6 02 c0       	push   0xc002c6d4
c001f7ba:	e8 28 ae ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001f7bf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7c4:	31 d2                	xor    edx,edx
c001f7c6:	83 c4 1c             	add    esp,0x1c
c001f7c9:	c3                   	ret    

c001f7ca <Vm::fpuGetLogE2()>:
c001f7ca:	83 ec 18             	sub    esp,0x18
c001f7cd:	68 e0 c6 02 c0       	push   0xc002c6e0
c001f7d2:	e8 10 ae ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001f7d7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7dc:	31 d2                	xor    edx,edx
c001f7de:	83 c4 1c             	add    esp,0x1c
c001f7e1:	c3                   	ret    

c001f7e2 <Vm::fpuGetLog210()>:
c001f7e2:	83 ec 18             	sub    esp,0x18
c001f7e5:	68 ec c6 02 c0       	push   0xc002c6ec
c001f7ea:	e8 f8 ad ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001f7ef:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7f4:	31 d2                	xor    edx,edx
c001f7f6:	83 c4 1c             	add    esp,0x1c
c001f7f9:	c3                   	ret    

c001f7fa <Vm::fpuGetLog102()>:
c001f7fa:	83 ec 18             	sub    esp,0x18
c001f7fd:	68 f9 c6 02 c0       	push   0xc002c6f9
c001f802:	e8 e0 ad ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001f807:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f80c:	31 d2                	xor    edx,edx
c001f80e:	83 c4 1c             	add    esp,0x1c
c001f811:	c3                   	ret    

c001f812 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f812:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f816:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f81a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f81e:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f822:	0f 92 c0             	setb   al
c001f825:	c3                   	ret    

c001f826 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f826:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82e:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f832:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f836:	09 c2                	or     edx,eax
c001f838:	0f 94 c0             	sete   al
c001f83b:	c3                   	ret    

c001f83c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f83c:	57                   	push   edi
c001f83d:	56                   	push   esi
c001f83e:	53                   	push   ebx
c001f83f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f843:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f847:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f84b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f84f:	57                   	push   edi
c001f850:	56                   	push   esi
c001f851:	53                   	push   ebx
c001f852:	51                   	push   ecx
c001f853:	e8 ce ff ff ff       	call   c001f826 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f858:	83 c4 10             	add    esp,0x10
c001f85b:	88 c2                	mov    dl,al
c001f85d:	31 c0                	xor    eax,eax
c001f85f:	84 d2                	test   dl,dl
c001f861:	75 0c                	jne    c001f86f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f863:	57                   	push   edi
c001f864:	56                   	push   esi
c001f865:	53                   	push   ebx
c001f866:	51                   	push   ecx
c001f867:	e8 a6 ff ff ff       	call   c001f812 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f86c:	83 c4 10             	add    esp,0x10
c001f86f:	83 e0 01             	and    eax,0x1
c001f872:	5b                   	pop    ebx
c001f873:	88 c1                	mov    cl,al
c001f875:	83 e2 01             	and    edx,0x1
c001f878:	a0 81 19 03 c0       	mov    al,ds:0xc0031981
c001f87d:	c1 e2 06             	shl    edx,0x6
c001f880:	83 e0 ba             	and    eax,0xffffffba
c001f883:	5e                   	pop    esi
c001f884:	09 c8                	or     eax,ecx
c001f886:	5f                   	pop    edi
c001f887:	09 d0                	or     eax,edx
c001f889:	a2 81 19 03 c0       	mov    ds:0xc0031981,al
c001f88e:	c3                   	ret    

c001f88f <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f88f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f893:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f897:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f89b:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f89f:	c3                   	ret    

c001f8a0 <Vm::fpuAbs(unsigned long long)>:
c001f8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8a8:	c3                   	ret    

c001f8a9 <Vm::fpuChs(unsigned long long)>:
c001f8a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8b1:	f7 d8                	neg    eax
c001f8b3:	83 d2 00             	adc    edx,0x0
c001f8b6:	f7 da                	neg    edx
c001f8b8:	c3                   	ret    

c001f8b9 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f8b9:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f8bd:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f8c2:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f8c6:	eb c7                	jmp    c001f88f <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f8c8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f8c8:	53                   	push   ebx
c001f8c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f8d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8d9:	0f af ca             	imul   ecx,edx
c001f8dc:	0f af d8             	imul   ebx,eax
c001f8df:	f7 e2                	mul    edx
c001f8e1:	01 d9                	add    ecx,ebx
c001f8e3:	5b                   	pop    ebx
c001f8e4:	01 ca                	add    edx,ecx
c001f8e6:	c3                   	ret    

c001f8e7 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f8e7:	83 ec 0c             	sub    esp,0xc
c001f8ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8fa:	e8 9d 70 00 00       	call   c002699c <__udivdi3>
c001f8ff:	83 c4 1c             	add    esp,0x1c
c001f902:	c3                   	ret    

c001f903 <Vm::fpuSquare(unsigned long long)>:
c001f903:	50                   	push   eax
c001f904:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f908:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f90c:	52                   	push   edx
c001f90d:	50                   	push   eax
c001f90e:	52                   	push   edx
c001f90f:	50                   	push   eax
c001f910:	e8 b3 ff ff ff       	call   c001f8c8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f915:	83 c4 14             	add    esp,0x14
c001f918:	c3                   	ret    

c001f919 <Vm::fpuGetReg(int)>:
c001f919:	83 ec 0c             	sub    esp,0xc
c001f91c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f921:	76 10                	jbe    c001f933 <Vm::fpuGetReg(int)+0x1a>
c001f923:	83 ec 0c             	sub    esp,0xc
c001f926:	68 06 c7 02 c0       	push   0xc002c706
c001f92b:	e8 b7 ac ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001f930:	83 c4 10             	add    esp,0x10
c001f933:	a0 81 19 03 c0       	mov    al,ds:0xc0031981
c001f938:	b9 08 00 00 00       	mov    ecx,0x8
c001f93d:	c0 e8 03             	shr    al,0x3
c001f940:	83 e0 07             	and    eax,0x7
c001f943:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f947:	99                   	cdq    
c001f948:	f7 f9                	idiv   ecx
c001f94a:	8b 04 d5 84 19 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce67c]
c001f951:	8b 14 d5 88 19 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce678]
c001f958:	83 c4 0c             	add    esp,0xc
c001f95b:	c3                   	ret    

c001f95c <Vm::fpuSetReg(int, unsigned long long)>:
c001f95c:	57                   	push   edi
c001f95d:	56                   	push   esi
c001f95e:	52                   	push   edx
c001f95f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f963:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f967:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f96c:	76 10                	jbe    c001f97e <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f96e:	83 ec 0c             	sub    esp,0xc
c001f971:	68 19 c7 02 c0       	push   0xc002c719
c001f976:	e8 6c ac ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c001f97b:	83 c4 10             	add    esp,0x10
c001f97e:	a0 81 19 03 c0       	mov    al,ds:0xc0031981
c001f983:	b9 08 00 00 00       	mov    ecx,0x8
c001f988:	c0 e8 03             	shr    al,0x3
c001f98b:	83 e0 07             	and    eax,0x7
c001f98e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f992:	99                   	cdq    
c001f993:	f7 f9                	idiv   ecx
c001f995:	89 34 d5 84 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce67c],esi
c001f99c:	89 3c d5 88 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce678],edi
c001f9a3:	58                   	pop    eax
c001f9a4:	5e                   	pop    esi
c001f9a5:	5f                   	pop    edi
c001f9a6:	c3                   	ret    

c001f9a7 <Vm::fpuPush(unsigned long long)>:
c001f9a7:	a0 81 19 03 c0       	mov    al,ds:0xc0031981
c001f9ac:	c0 e8 03             	shr    al,0x3
c001f9af:	83 e0 07             	and    eax,0x7
c001f9b2:	83 c0 07             	add    eax,0x7
c001f9b5:	88 c2                	mov    dl,al
c001f9b7:	83 e0 07             	and    eax,0x7
c001f9ba:	83 e2 07             	and    edx,0x7
c001f9bd:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f9c4:	8a 15 81 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031981
c001f9ca:	83 e2 c7             	and    edx,0xffffffc7
c001f9cd:	09 ca                	or     edx,ecx
c001f9cf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9d3:	88 15 81 19 03 c0    	mov    BYTE PTR ds:0xc0031981,dl
c001f9d9:	89 0c c5 88 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce678],ecx
c001f9e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9e4:	89 14 c5 84 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce67c],edx
c001f9eb:	a1 c4 19 03 c0       	mov    eax,ds:0xc00319c4
c001f9f0:	83 f8 08             	cmp    eax,0x8
c001f9f3:	75 08                	jne    c001f9fd <Vm::fpuPush(unsigned long long)+0x56>
c001f9f5:	80 0d 80 19 03 c0 40 	or     BYTE PTR ds:0xc0031980,0x40
c001f9fc:	c3                   	ret    
c001f9fd:	40                   	inc    eax
c001f9fe:	a3 c4 19 03 c0       	mov    ds:0xc00319c4,eax
c001fa03:	c3                   	ret    

c001fa04 <Vm::fpuPop()>:
c001fa04:	8a 0d 81 19 03 c0    	mov    cl,BYTE PTR ds:0xc0031981
c001fa0a:	53                   	push   ebx
c001fa0b:	c0 e9 03             	shr    cl,0x3
c001fa0e:	8a 1d 81 19 03 c0    	mov    bl,BYTE PTR ds:0xc0031981
c001fa14:	83 e1 07             	and    ecx,0x7
c001fa17:	83 e3 c7             	and    ebx,0xffffffc7
c001fa1a:	8b 04 cd 84 19 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce67c]
c001fa21:	8b 14 cd 88 19 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce678]
c001fa28:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa2f:	83 e1 38             	and    ecx,0x38
c001fa32:	09 d9                	or     ecx,ebx
c001fa34:	88 0d 81 19 03 c0    	mov    BYTE PTR ds:0xc0031981,cl
c001fa3a:	8b 0d c4 19 03 c0    	mov    ecx,DWORD PTR ds:0xc00319c4
c001fa40:	85 c9                	test   ecx,ecx
c001fa42:	74 09                	je     c001fa4d <Vm::fpuPop()+0x49>
c001fa44:	49                   	dec    ecx
c001fa45:	89 0d c4 19 03 c0    	mov    DWORD PTR ds:0xc00319c4,ecx
c001fa4b:	eb 07                	jmp    c001fa54 <Vm::fpuPop()+0x50>
c001fa4d:	80 0d 80 19 03 c0 40 	or     BYTE PTR ds:0xc0031980,0x40
c001fa54:	5b                   	pop    ebx
c001fa55:	c3                   	ret    

c001fa56 <Vm::x87Handler(regs*)>:
c001fa56:	55                   	push   ebp
c001fa57:	57                   	push   edi
c001fa58:	56                   	push   esi
c001fa59:	53                   	push   ebx
c001fa5a:	83 ec 1c             	sub    esp,0x1c
c001fa5d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa61:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fa66:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fa69:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fa71:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fa75:	50                   	push   eax
c001fa76:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fa7a:	50                   	push   eax
c001fa7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fa7f:	50                   	push   eax
c001fa80:	53                   	push   ebx
c001fa81:	e8 28 a2 ff ff       	call   c0019cae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fa86:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fa89:	83 c4 10             	add    esp,0x10
c001fa8c:	89 c6                	mov    esi,eax
c001fa8e:	80 fa d9             	cmp    dl,0xd9
c001fa91:	0f 85 52 01 00 00    	jne    c001fbe9 <Vm::x87Handler(regs*)+0x193>
c001fa97:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa9b:	8d 50 20             	lea    edx,[eax+0x20]
c001fa9e:	80 fa 0e             	cmp    dl,0xe
c001faa1:	0f 87 86 00 00 00    	ja     c001fb2d <Vm::x87Handler(regs*)+0xd7>
c001faa7:	0f b6 d2             	movzx  edx,dl
c001faaa:	ff 24 95 2c c7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd38d4]
c001fab1:	e8 e7 fc ff ff       	call   c001f79d <Vm::fpuGet0()>
c001fab6:	eb 05                	jmp    c001fabd <Vm::x87Handler(regs*)+0x67>
c001fab8:	e8 e5 fc ff ff       	call   c001f7a2 <Vm::fpuGet1()>
c001fabd:	57                   	push   edi
c001fabe:	57                   	push   edi
c001fabf:	52                   	push   edx
c001fac0:	50                   	push   eax
c001fac1:	e8 e1 fe ff ff       	call   c001f9a7 <Vm::fpuPush(unsigned long long)>
c001fac6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001faca:	83 c4 10             	add    esp,0x10
c001facd:	b0 01                	mov    al,0x1
c001facf:	e9 e3 09 00 00       	jmp    c00204b7 <Vm::x87Handler(regs*)+0xa61>
c001fad4:	83 ec 0c             	sub    esp,0xc
c001fad7:	6a 00                	push   0x0
c001fad9:	e8 3b fe ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fade:	59                   	pop    ecx
c001fadf:	5e                   	pop    esi
c001fae0:	52                   	push   edx
c001fae1:	50                   	push   eax
c001fae2:	e8 c2 fd ff ff       	call   c001f8a9 <Vm::fpuChs(unsigned long long)>
c001fae7:	eb 13                	jmp    c001fafc <Vm::x87Handler(regs*)+0xa6>
c001fae9:	83 ec 0c             	sub    esp,0xc
c001faec:	6a 00                	push   0x0
c001faee:	e8 26 fe ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001faf3:	5f                   	pop    edi
c001faf4:	5d                   	pop    ebp
c001faf5:	52                   	push   edx
c001faf6:	50                   	push   eax
c001faf7:	e8 a4 fd ff ff       	call   c001f8a0 <Vm::fpuAbs(unsigned long long)>
c001fafc:	83 c4 0c             	add    esp,0xc
c001faff:	52                   	push   edx
c001fb00:	50                   	push   eax
c001fb01:	6a 00                	push   0x0
c001fb03:	e8 54 fe ff ff       	call   c001f95c <Vm::fpuSetReg(int, unsigned long long)>
c001fb08:	eb bc                	jmp    c001fac6 <Vm::x87Handler(regs*)+0x70>
c001fb0a:	e8 d3 fc ff ff       	call   c001f7e2 <Vm::fpuGetLog210()>
c001fb0f:	eb ac                	jmp    c001fabd <Vm::x87Handler(regs*)+0x67>
c001fb11:	e8 9c fc ff ff       	call   c001f7b2 <Vm::fpuGetLog2E()>
c001fb16:	eb a5                	jmp    c001fabd <Vm::x87Handler(regs*)+0x67>
c001fb18:	e8 8d fc ff ff       	call   c001f7aa <Vm::fpuGetPi()>
c001fb1d:	eb 9e                	jmp    c001fabd <Vm::x87Handler(regs*)+0x67>
c001fb1f:	e8 d6 fc ff ff       	call   c001f7fa <Vm::fpuGetLog102()>
c001fb24:	eb 97                	jmp    c001fabd <Vm::x87Handler(regs*)+0x67>
c001fb26:	e8 9f fc ff ff       	call   c001f7ca <Vm::fpuGetLogE2()>
c001fb2b:	eb 90                	jmp    c001fabd <Vm::x87Handler(regs*)+0x67>
c001fb2d:	8d 50 40             	lea    edx,[eax+0x40]
c001fb30:	80 fa 07             	cmp    dl,0x7
c001fb33:	77 15                	ja     c001fb4a <Vm::x87Handler(regs*)+0xf4>
c001fb35:	83 ec 0c             	sub    esp,0xc
c001fb38:	2d c0 00 00 00       	sub    eax,0xc0
c001fb3d:	50                   	push   eax
c001fb3e:	e8 d6 fd ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fb43:	59                   	pop    ecx
c001fb44:	5e                   	pop    esi
c001fb45:	e9 75 ff ff ff       	jmp    c001fabf <Vm::x87Handler(regs*)+0x69>
c001fb4a:	8d 50 38             	lea    edx,[eax+0x38]
c001fb4d:	80 fa 07             	cmp    dl,0x7
c001fb50:	77 3c                	ja     c001fb8e <Vm::x87Handler(regs*)+0x138>
c001fb52:	83 ec 0c             	sub    esp,0xc
c001fb55:	2d c8 00 00 00       	sub    eax,0xc8
c001fb5a:	50                   	push   eax
c001fb5b:	e8 b9 fd ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fb60:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb67:	89 c6                	mov    esi,eax
c001fb69:	89 d7                	mov    edi,edx
c001fb6b:	e8 a9 fd ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fb70:	83 c4 0c             	add    esp,0xc
c001fb73:	52                   	push   edx
c001fb74:	50                   	push   eax
c001fb75:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb79:	2d c8 00 00 00       	sub    eax,0xc8
c001fb7e:	50                   	push   eax
c001fb7f:	e8 d8 fd ff ff       	call   c001f95c <Vm::fpuSetReg(int, unsigned long long)>
c001fb84:	83 c4 0c             	add    esp,0xc
c001fb87:	57                   	push   edi
c001fb88:	56                   	push   esi
c001fb89:	e9 73 ff ff ff       	jmp    c001fb01 <Vm::x87Handler(regs*)+0xab>
c001fb8e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb92:	84 d2                	test   dl,dl
c001fb94:	75 0f                	jne    c001fba5 <Vm::x87Handler(regs*)+0x14f>
c001fb96:	83 ec 0c             	sub    esp,0xc
c001fb99:	ff 36                	push   DWORD PTR [esi]
c001fb9b:	e8 c8 fa ff ff       	call   c001f668 <Vm::fpu32ToInternal(unsigned int)>
c001fba0:	e9 bf 00 00 00       	jmp    c001fc64 <Vm::x87Handler(regs*)+0x20e>
c001fba5:	80 fa 03             	cmp    dl,0x3
c001fba8:	75 13                	jne    c001fbbd <Vm::x87Handler(regs*)+0x167>
c001fbaa:	e8 55 fe ff ff       	call   c001fa04 <Vm::fpuPop()>
c001fbaf:	55                   	push   ebp
c001fbb0:	55                   	push   ebp
c001fbb1:	52                   	push   edx
c001fbb2:	50                   	push   eax
c001fbb3:	e8 4c fa ff ff       	call   c001f604 <Vm::fpuInternalTo32(unsigned long long)>
c001fbb8:	e9 88 00 00 00       	jmp    c001fc45 <Vm::x87Handler(regs*)+0x1ef>
c001fbbd:	80 fa 05             	cmp    dl,0x5
c001fbc0:	75 0e                	jne    c001fbd0 <Vm::x87Handler(regs*)+0x17a>
c001fbc2:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fbc5:	66 a3 82 19 03 c0    	mov    ds:0xc0031982,ax
c001fbcb:	e9 df 00 00 00       	jmp    c001fcaf <Vm::x87Handler(regs*)+0x259>
c001fbd0:	31 c0                	xor    eax,eax
c001fbd2:	80 fa 07             	cmp    dl,0x7
c001fbd5:	0f 85 dc 08 00 00    	jne    c00204b7 <Vm::x87Handler(regs*)+0xa61>
c001fbdb:	66 a1 82 19 03 c0    	mov    ax,ds:0xc0031982
c001fbe1:	66 89 06             	mov    WORD PTR [esi],ax
c001fbe4:	e9 c6 00 00 00       	jmp    c001fcaf <Vm::x87Handler(regs*)+0x259>
c001fbe9:	80 fa d8             	cmp    dl,0xd8
c001fbec:	0f 84 c9 00 00 00    	je     c001fcbb <Vm::x87Handler(regs*)+0x265>
c001fbf2:	80 fa dc             	cmp    dl,0xdc
c001fbf5:	0f 84 0d 02 00 00    	je     c001fe08 <Vm::x87Handler(regs*)+0x3b2>
c001fbfb:	80 fa de             	cmp    dl,0xde
c001fbfe:	0f 84 cd 02 00 00    	je     c001fed1 <Vm::x87Handler(regs*)+0x47b>
c001fc04:	80 fa dd             	cmp    dl,0xdd
c001fc07:	0f 84 5f 04 00 00    	je     c002006c <Vm::x87Handler(regs*)+0x616>
c001fc0d:	80 fa da             	cmp    dl,0xda
c001fc10:	0f 84 24 05 00 00    	je     c002013a <Vm::x87Handler(regs*)+0x6e4>
c001fc16:	80 fa df             	cmp    dl,0xdf
c001fc19:	0f 84 68 05 00 00    	je     c0020187 <Vm::x87Handler(regs*)+0x731>
c001fc1f:	31 c0                	xor    eax,eax
c001fc21:	80 fa db             	cmp    dl,0xdb
c001fc24:	0f 85 8d 08 00 00    	jne    c00204b7 <Vm::x87Handler(regs*)+0xa61>
c001fc2a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc2e:	80 fa 03             	cmp    dl,0x3
c001fc31:	0f 85 70 06 00 00    	jne    c00202a7 <Vm::x87Handler(regs*)+0x851>
c001fc37:	e8 c8 fd ff ff       	call   c001fa04 <Vm::fpuPop()>
c001fc3c:	55                   	push   ebp
c001fc3d:	55                   	push   ebp
c001fc3e:	52                   	push   edx
c001fc3f:	50                   	push   eax
c001fc40:	e8 71 fa ff ff       	call   c001f6b6 <Vm::fpuFloatToLong(unsigned long long)>
c001fc45:	83 c4 10             	add    esp,0x10
c001fc48:	89 06                	mov    DWORD PTR [esi],eax
c001fc4a:	eb 63                	jmp    c001fcaf <Vm::x87Handler(regs*)+0x259>
c001fc4c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc50:	84 d2                	test   dl,dl
c001fc52:	0f 85 e6 05 00 00    	jne    c002023e <Vm::x87Handler(regs*)+0x7e8>
c001fc58:	57                   	push   edi
c001fc59:	57                   	push   edi
c001fc5a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc5d:	ff 36                	push   DWORD PTR [esi]
c001fc5f:	e8 49 fa ff ff       	call   c001f6ad <Vm::fpu64ToInternal(unsigned long long)>
c001fc64:	5e                   	pop    esi
c001fc65:	5f                   	pop    edi
c001fc66:	52                   	push   edx
c001fc67:	50                   	push   eax
c001fc68:	e8 3a fd ff ff       	call   c001f9a7 <Vm::fpuPush(unsigned long long)>
c001fc6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc71:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc74:	e9 51 fe ff ff       	jmp    c001faca <Vm::x87Handler(regs*)+0x74>
c001fc79:	80 fa 03             	cmp    dl,0x3
c001fc7c:	0f 85 d7 06 00 00    	jne    c0020359 <Vm::x87Handler(regs*)+0x903>
c001fc82:	57                   	push   edi
c001fc83:	57                   	push   edi
c001fc84:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc87:	ff 36                	push   DWORD PTR [esi]
c001fc89:	e8 1f fa ff ff       	call   c001f6ad <Vm::fpu64ToInternal(unsigned long long)>
c001fc8e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc95:	89 c6                	mov    esi,eax
c001fc97:	89 d7                	mov    edi,edx
c001fc99:	e8 7b fc ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fc9e:	57                   	push   edi
c001fc9f:	56                   	push   esi
c001fca0:	52                   	push   edx
c001fca1:	50                   	push   eax
c001fca2:	e8 95 fb ff ff       	call   c001f83c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fca7:	83 c4 20             	add    esp,0x20
c001fcaa:	e8 55 fd ff ff       	call   c001fa04 <Vm::fpuPop()>
c001fcaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fcb3:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcb6:	e9 12 fe ff ff       	jmp    c001facd <Vm::x87Handler(regs*)+0x77>
c001fcbb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcbf:	8d 50 40             	lea    edx,[eax+0x40]
c001fcc2:	80 fa 07             	cmp    dl,0x7
c001fcc5:	77 29                	ja     c001fcf0 <Vm::x87Handler(regs*)+0x29a>
c001fcc7:	83 ec 0c             	sub    esp,0xc
c001fcca:	2d c0 00 00 00       	sub    eax,0xc0
c001fccf:	50                   	push   eax
c001fcd0:	e8 44 fc ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fcd5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcdc:	89 c6                	mov    esi,eax
c001fcde:	89 d7                	mov    edi,edx
c001fce0:	e8 34 fc ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fce5:	57                   	push   edi
c001fce6:	56                   	push   esi
c001fce7:	52                   	push   edx
c001fce8:	50                   	push   eax
c001fce9:	e8 a1 fb ff ff       	call   c001f88f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fcee:	eb 2f                	jmp    c001fd1f <Vm::x87Handler(regs*)+0x2c9>
c001fcf0:	8d 50 38             	lea    edx,[eax+0x38]
c001fcf3:	80 fa 07             	cmp    dl,0x7
c001fcf6:	77 2f                	ja     c001fd27 <Vm::x87Handler(regs*)+0x2d1>
c001fcf8:	83 ec 0c             	sub    esp,0xc
c001fcfb:	2d c8 00 00 00       	sub    eax,0xc8
c001fd00:	50                   	push   eax
c001fd01:	e8 13 fc ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fd06:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd0d:	89 c6                	mov    esi,eax
c001fd0f:	89 d7                	mov    edi,edx
c001fd11:	e8 03 fc ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fd16:	57                   	push   edi
c001fd17:	56                   	push   esi
c001fd18:	52                   	push   edx
c001fd19:	50                   	push   eax
c001fd1a:	e8 a9 fb ff ff       	call   c001f8c8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd1f:	83 c4 1c             	add    esp,0x1c
c001fd22:	e9 d8 fd ff ff       	jmp    c001faff <Vm::x87Handler(regs*)+0xa9>
c001fd27:	8d 50 30             	lea    edx,[eax+0x30]
c001fd2a:	80 fa 07             	cmp    dl,0x7
c001fd2d:	77 0d                	ja     c001fd3c <Vm::x87Handler(regs*)+0x2e6>
c001fd2f:	83 ec 0c             	sub    esp,0xc
c001fd32:	2d d0 00 00 00       	sub    eax,0xd0
c001fd37:	e9 99 03 00 00       	jmp    c00200d5 <Vm::x87Handler(regs*)+0x67f>
c001fd3c:	8d 50 28             	lea    edx,[eax+0x28]
c001fd3f:	80 fa 07             	cmp    dl,0x7
c001fd42:	77 0d                	ja     c001fd51 <Vm::x87Handler(regs*)+0x2fb>
c001fd44:	83 ec 0c             	sub    esp,0xc
c001fd47:	2d d8 00 00 00       	sub    eax,0xd8
c001fd4c:	e9 c0 03 00 00       	jmp    c0020111 <Vm::x87Handler(regs*)+0x6bb>
c001fd51:	8d 50 20             	lea    edx,[eax+0x20]
c001fd54:	80 fa 07             	cmp    dl,0x7
c001fd57:	77 1b                	ja     c001fd74 <Vm::x87Handler(regs*)+0x31e>
c001fd59:	83 ec 0c             	sub    esp,0xc
c001fd5c:	2d e0 00 00 00       	sub    eax,0xe0
c001fd61:	50                   	push   eax
c001fd62:	e8 b2 fb ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fd67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd6e:	89 c6                	mov    esi,eax
c001fd70:	89 d7                	mov    edi,edx
c001fd72:	eb 22                	jmp    c001fd96 <Vm::x87Handler(regs*)+0x340>
c001fd74:	8d 50 18             	lea    edx,[eax+0x18]
c001fd77:	80 fa 07             	cmp    dl,0x7
c001fd7a:	77 2d                	ja     c001fda9 <Vm::x87Handler(regs*)+0x353>
c001fd7c:	83 ec 0c             	sub    esp,0xc
c001fd7f:	6a 00                	push   0x0
c001fd81:	e8 93 fb ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fd86:	89 c6                	mov    esi,eax
c001fd88:	89 d7                	mov    edi,edx
c001fd8a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd8e:	2d e8 00 00 00       	sub    eax,0xe8
c001fd93:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd96:	e8 7e fb ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fd9b:	57                   	push   edi
c001fd9c:	56                   	push   esi
c001fd9d:	52                   	push   edx
c001fd9e:	50                   	push   eax
c001fd9f:	e8 15 fb ff ff       	call   c001f8b9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fda4:	e9 76 ff ff ff       	jmp    c001fd1f <Vm::x87Handler(regs*)+0x2c9>
c001fda9:	8d 50 10             	lea    edx,[eax+0x10]
c001fdac:	80 fa 07             	cmp    dl,0x7
c001fdaf:	77 1b                	ja     c001fdcc <Vm::x87Handler(regs*)+0x376>
c001fdb1:	83 ec 0c             	sub    esp,0xc
c001fdb4:	2d f0 00 00 00       	sub    eax,0xf0
c001fdb9:	50                   	push   eax
c001fdba:	e8 5a fb ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fdbf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdc6:	89 c6                	mov    esi,eax
c001fdc8:	89 d7                	mov    edi,edx
c001fdca:	eb 22                	jmp    c001fdee <Vm::x87Handler(regs*)+0x398>
c001fdcc:	3c f7                	cmp    al,0xf7
c001fdce:	0f 86 d1 03 00 00    	jbe    c00201a5 <Vm::x87Handler(regs*)+0x74f>
c001fdd4:	83 ec 0c             	sub    esp,0xc
c001fdd7:	6a 00                	push   0x0
c001fdd9:	e8 3b fb ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fdde:	89 c6                	mov    esi,eax
c001fde0:	89 d7                	mov    edi,edx
c001fde2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fde6:	2d f8 00 00 00       	sub    eax,0xf8
c001fdeb:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdee:	e8 26 fb ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fdf3:	57                   	push   edi
c001fdf4:	56                   	push   esi
c001fdf5:	52                   	push   edx
c001fdf6:	50                   	push   eax
c001fdf7:	e8 eb fa ff ff       	call   c001f8e7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fdfc:	83 c4 1c             	add    esp,0x1c
c001fdff:	52                   	push   edx
c001fe00:	50                   	push   eax
c001fe01:	6a 00                	push   0x0
c001fe03:	e9 51 02 00 00       	jmp    c0020059 <Vm::x87Handler(regs*)+0x603>
c001fe08:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe0c:	8d 50 40             	lea    edx,[eax+0x40]
c001fe0f:	80 fa 07             	cmp    dl,0x7
c001fe12:	77 37                	ja     c001fe4b <Vm::x87Handler(regs*)+0x3f5>
c001fe14:	83 ec 0c             	sub    esp,0xc
c001fe17:	2d c0 00 00 00       	sub    eax,0xc0
c001fe1c:	50                   	push   eax
c001fe1d:	e8 f7 fa ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fe22:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe29:	89 c6                	mov    esi,eax
c001fe2b:	89 d7                	mov    edi,edx
c001fe2d:	e8 e7 fa ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fe32:	57                   	push   edi
c001fe33:	56                   	push   esi
c001fe34:	52                   	push   edx
c001fe35:	50                   	push   eax
c001fe36:	e8 54 fa ff ff       	call   c001f88f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe3b:	83 c4 1c             	add    esp,0x1c
c001fe3e:	52                   	push   edx
c001fe3f:	50                   	push   eax
c001fe40:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe44:	2d c0 00 00 00       	sub    eax,0xc0
c001fe49:	eb 3d                	jmp    c001fe88 <Vm::x87Handler(regs*)+0x432>
c001fe4b:	8d 50 38             	lea    edx,[eax+0x38]
c001fe4e:	80 fa 07             	cmp    dl,0x7
c001fe51:	77 3b                	ja     c001fe8e <Vm::x87Handler(regs*)+0x438>
c001fe53:	83 ec 0c             	sub    esp,0xc
c001fe56:	2d c8 00 00 00       	sub    eax,0xc8
c001fe5b:	50                   	push   eax
c001fe5c:	e8 b8 fa ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fe61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe68:	89 c6                	mov    esi,eax
c001fe6a:	89 d7                	mov    edi,edx
c001fe6c:	e8 a8 fa ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fe71:	57                   	push   edi
c001fe72:	56                   	push   esi
c001fe73:	52                   	push   edx
c001fe74:	50                   	push   eax
c001fe75:	e8 4e fa ff ff       	call   c001f8c8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe7a:	83 c4 1c             	add    esp,0x1c
c001fe7d:	52                   	push   edx
c001fe7e:	50                   	push   eax
c001fe7f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe83:	2d c8 00 00 00       	sub    eax,0xc8
c001fe88:	50                   	push   eax
c001fe89:	e9 75 fc ff ff       	jmp    c001fb03 <Vm::x87Handler(regs*)+0xad>
c001fe8e:	83 c0 18             	add    eax,0x18
c001fe91:	3c 07                	cmp    al,0x7
c001fe93:	0f 87 3b 04 00 00    	ja     c00202d4 <Vm::x87Handler(regs*)+0x87e>
c001fe99:	83 ec 0c             	sub    esp,0xc
c001fe9c:	6a 00                	push   0x0
c001fe9e:	e8 76 fa ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fea3:	89 c6                	mov    esi,eax
c001fea5:	89 d7                	mov    edi,edx
c001fea7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feab:	2d e8 00 00 00       	sub    eax,0xe8
c001feb0:	89 04 24             	mov    DWORD PTR [esp],eax
c001feb3:	e8 61 fa ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001feb8:	57                   	push   edi
c001feb9:	56                   	push   esi
c001feba:	52                   	push   edx
c001febb:	50                   	push   eax
c001febc:	e8 f8 f9 ff ff       	call   c001f8b9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fec1:	83 c4 1c             	add    esp,0x1c
c001fec4:	52                   	push   edx
c001fec5:	50                   	push   eax
c001fec6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feca:	2d e8 00 00 00       	sub    eax,0xe8
c001fecf:	eb b7                	jmp    c001fe88 <Vm::x87Handler(regs*)+0x432>
c001fed1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fed5:	8d 50 40             	lea    edx,[eax+0x40]
c001fed8:	80 fa 07             	cmp    dl,0x7
c001fedb:	77 3a                	ja     c001ff17 <Vm::x87Handler(regs*)+0x4c1>
c001fedd:	83 ec 0c             	sub    esp,0xc
c001fee0:	2d c0 00 00 00       	sub    eax,0xc0
c001fee5:	50                   	push   eax
c001fee6:	e8 2e fa ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001feeb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fef2:	89 c6                	mov    esi,eax
c001fef4:	89 d7                	mov    edi,edx
c001fef6:	e8 1e fa ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fefb:	57                   	push   edi
c001fefc:	56                   	push   esi
c001fefd:	52                   	push   edx
c001fefe:	50                   	push   eax
c001feff:	e8 8b f9 ff ff       	call   c001f88f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff04:	83 c4 1c             	add    esp,0x1c
c001ff07:	52                   	push   edx
c001ff08:	50                   	push   eax
c001ff09:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff0d:	2d c0 00 00 00       	sub    eax,0xc0
c001ff12:	e9 9e 01 00 00       	jmp    c00200b5 <Vm::x87Handler(regs*)+0x65f>
c001ff17:	8d 50 20             	lea    edx,[eax+0x20]
c001ff1a:	80 fa 07             	cmp    dl,0x7
c001ff1d:	77 3a                	ja     c001ff59 <Vm::x87Handler(regs*)+0x503>
c001ff1f:	83 ec 0c             	sub    esp,0xc
c001ff22:	2d e0 00 00 00       	sub    eax,0xe0
c001ff27:	50                   	push   eax
c001ff28:	e8 ec f9 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001ff2d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff34:	89 c6                	mov    esi,eax
c001ff36:	89 d7                	mov    edi,edx
c001ff38:	e8 dc f9 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001ff3d:	57                   	push   edi
c001ff3e:	56                   	push   esi
c001ff3f:	52                   	push   edx
c001ff40:	50                   	push   eax
c001ff41:	e8 73 f9 ff ff       	call   c001f8b9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff46:	83 c4 1c             	add    esp,0x1c
c001ff49:	52                   	push   edx
c001ff4a:	50                   	push   eax
c001ff4b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff4f:	2d e0 00 00 00       	sub    eax,0xe0
c001ff54:	e9 5c 01 00 00       	jmp    c00200b5 <Vm::x87Handler(regs*)+0x65f>
c001ff59:	8d 50 18             	lea    edx,[eax+0x18]
c001ff5c:	80 fa 07             	cmp    dl,0x7
c001ff5f:	77 3b                	ja     c001ff9c <Vm::x87Handler(regs*)+0x546>
c001ff61:	83 ec 0c             	sub    esp,0xc
c001ff64:	6a 00                	push   0x0
c001ff66:	e8 ae f9 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001ff6b:	89 c6                	mov    esi,eax
c001ff6d:	89 d7                	mov    edi,edx
c001ff6f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff73:	2d e8 00 00 00       	sub    eax,0xe8
c001ff78:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff7b:	e8 99 f9 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001ff80:	57                   	push   edi
c001ff81:	56                   	push   esi
c001ff82:	52                   	push   edx
c001ff83:	50                   	push   eax
c001ff84:	e8 30 f9 ff ff       	call   c001f8b9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff89:	83 c4 1c             	add    esp,0x1c
c001ff8c:	52                   	push   edx
c001ff8d:	50                   	push   eax
c001ff8e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff92:	2d e8 00 00 00       	sub    eax,0xe8
c001ff97:	e9 19 01 00 00       	jmp    c00200b5 <Vm::x87Handler(regs*)+0x65f>
c001ff9c:	8d 50 38             	lea    edx,[eax+0x38]
c001ff9f:	80 fa 07             	cmp    dl,0x7
c001ffa2:	77 37                	ja     c001ffdb <Vm::x87Handler(regs*)+0x585>
c001ffa4:	83 ec 0c             	sub    esp,0xc
c001ffa7:	2d c8 00 00 00       	sub    eax,0xc8
c001ffac:	50                   	push   eax
c001ffad:	e8 67 f9 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001ffb2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffb9:	89 c6                	mov    esi,eax
c001ffbb:	89 d7                	mov    edi,edx
c001ffbd:	e8 57 f9 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001ffc2:	57                   	push   edi
c001ffc3:	56                   	push   esi
c001ffc4:	52                   	push   edx
c001ffc5:	50                   	push   eax
c001ffc6:	e8 fd f8 ff ff       	call   c001f8c8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffcb:	83 c4 1c             	add    esp,0x1c
c001ffce:	52                   	push   edx
c001ffcf:	50                   	push   eax
c001ffd0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffd4:	2d c8 00 00 00       	sub    eax,0xc8
c001ffd9:	eb 7d                	jmp    c0020058 <Vm::x87Handler(regs*)+0x602>
c001ffdb:	3c f7                	cmp    al,0xf7
c001ffdd:	76 38                	jbe    c0020017 <Vm::x87Handler(regs*)+0x5c1>
c001ffdf:	83 ec 0c             	sub    esp,0xc
c001ffe2:	6a 00                	push   0x0
c001ffe4:	e8 30 f9 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001ffe9:	89 c6                	mov    esi,eax
c001ffeb:	89 d7                	mov    edi,edx
c001ffed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fff1:	2d f8 00 00 00       	sub    eax,0xf8
c001fff6:	89 04 24             	mov    DWORD PTR [esp],eax
c001fff9:	e8 1b f9 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c001fffe:	57                   	push   edi
c001ffff:	56                   	push   esi
c0020000:	52                   	push   edx
c0020001:	50                   	push   eax
c0020002:	e8 e0 f8 ff ff       	call   c001f8e7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020007:	83 c4 1c             	add    esp,0x1c
c002000a:	52                   	push   edx
c002000b:	50                   	push   eax
c002000c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020010:	2d f8 00 00 00       	sub    eax,0xf8
c0020015:	eb 41                	jmp    c0020058 <Vm::x87Handler(regs*)+0x602>
c0020017:	8d 50 10             	lea    edx,[eax+0x10]
c002001a:	80 fa 07             	cmp    dl,0x7
c002001d:	0f 87 5a 01 00 00    	ja     c002017d <Vm::x87Handler(regs*)+0x727>
c0020023:	83 ec 0c             	sub    esp,0xc
c0020026:	2d f0 00 00 00       	sub    eax,0xf0
c002002b:	50                   	push   eax
c002002c:	e8 e8 f8 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c0020031:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020038:	89 c6                	mov    esi,eax
c002003a:	89 d7                	mov    edi,edx
c002003c:	e8 d8 f8 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c0020041:	57                   	push   edi
c0020042:	56                   	push   esi
c0020043:	52                   	push   edx
c0020044:	50                   	push   eax
c0020045:	e8 9d f8 ff ff       	call   c001f8e7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002004a:	83 c4 1c             	add    esp,0x1c
c002004d:	52                   	push   edx
c002004e:	50                   	push   eax
c002004f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020053:	2d f0 00 00 00       	sub    eax,0xf0
c0020058:	50                   	push   eax
c0020059:	e8 fe f8 ff ff       	call   c001f95c <Vm::fpuSetReg(int, unsigned long long)>
c002005e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020062:	e8 9d f9 ff ff       	call   c001fa04 <Vm::fpuPop()>
c0020067:	e9 5e fa ff ff       	jmp    c001faca <Vm::x87Handler(regs*)+0x74>
c002006c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020070:	8d 50 30             	lea    edx,[eax+0x30]
c0020073:	80 fa 07             	cmp    dl,0x7
c0020076:	77 1d                	ja     c0020095 <Vm::x87Handler(regs*)+0x63f>
c0020078:	83 ec 0c             	sub    esp,0xc
c002007b:	6a 00                	push   0x0
c002007d:	e8 97 f8 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c0020082:	83 c4 0c             	add    esp,0xc
c0020085:	52                   	push   edx
c0020086:	50                   	push   eax
c0020087:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002008b:	2d d0 00 00 00       	sub    eax,0xd0
c0020090:	e9 f3 fd ff ff       	jmp    c001fe88 <Vm::x87Handler(regs*)+0x432>
c0020095:	8d 50 28             	lea    edx,[eax+0x28]
c0020098:	80 fa 07             	cmp    dl,0x7
c002009b:	77 28                	ja     c00200c5 <Vm::x87Handler(regs*)+0x66f>
c002009d:	83 ec 0c             	sub    esp,0xc
c00200a0:	6a 00                	push   0x0
c00200a2:	e8 72 f8 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c00200a7:	83 c4 0c             	add    esp,0xc
c00200aa:	52                   	push   edx
c00200ab:	50                   	push   eax
c00200ac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200b0:	2d d8 00 00 00       	sub    eax,0xd8
c00200b5:	50                   	push   eax
c00200b6:	e8 a1 f8 ff ff       	call   c001f95c <Vm::fpuSetReg(int, unsigned long long)>
c00200bb:	e8 44 f9 ff ff       	call   c001fa04 <Vm::fpuPop()>
c00200c0:	e9 01 fa ff ff       	jmp    c001fac6 <Vm::x87Handler(regs*)+0x70>
c00200c5:	8d 50 20             	lea    edx,[eax+0x20]
c00200c8:	80 fa 07             	cmp    dl,0x7
c00200cb:	77 30                	ja     c00200fd <Vm::x87Handler(regs*)+0x6a7>
c00200cd:	83 ec 0c             	sub    esp,0xc
c00200d0:	2d e0 00 00 00       	sub    eax,0xe0
c00200d5:	50                   	push   eax
c00200d6:	e8 3e f8 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c00200db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200e2:	89 c6                	mov    esi,eax
c00200e4:	89 d7                	mov    edi,edx
c00200e6:	e8 2e f8 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c00200eb:	57                   	push   edi
c00200ec:	56                   	push   esi
c00200ed:	52                   	push   edx
c00200ee:	50                   	push   eax
c00200ef:	e8 48 f7 ff ff       	call   c001f83c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00200f4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200f8:	e9 54 02 00 00       	jmp    c0020351 <Vm::x87Handler(regs*)+0x8fb>
c00200fd:	8d 50 18             	lea    edx,[eax+0x18]
c0020100:	80 fa 07             	cmp    dl,0x7
c0020103:	0f 87 43 fb ff ff    	ja     c001fc4c <Vm::x87Handler(regs*)+0x1f6>
c0020109:	83 ec 0c             	sub    esp,0xc
c002010c:	2d e8 00 00 00       	sub    eax,0xe8
c0020111:	50                   	push   eax
c0020112:	e8 02 f8 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c0020117:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002011e:	89 c6                	mov    esi,eax
c0020120:	89 d7                	mov    edi,edx
c0020122:	e8 f2 f7 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c0020127:	57                   	push   edi
c0020128:	56                   	push   esi
c0020129:	52                   	push   edx
c002012a:	50                   	push   eax
c002012b:	e8 0c f7 ff ff       	call   c001f83c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020130:	83 c4 20             	add    esp,0x20
c0020133:	e8 cc f8 ff ff       	call   c001fa04 <Vm::fpuPop()>
c0020138:	eb 62                	jmp    c002019c <Vm::x87Handler(regs*)+0x746>
c002013a:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002013e:	0f 85 0f 01 00 00    	jne    c0020253 <Vm::x87Handler(regs*)+0x7fd>
c0020144:	83 ec 0c             	sub    esp,0xc
c0020147:	6a 01                	push   0x1
c0020149:	e8 cb f7 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c002014e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020155:	89 c6                	mov    esi,eax
c0020157:	89 d7                	mov    edi,edx
c0020159:	e8 bb f7 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c002015e:	57                   	push   edi
c002015f:	56                   	push   esi
c0020160:	52                   	push   edx
c0020161:	50                   	push   eax
c0020162:	e8 d5 f6 ff ff       	call   c001f83c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020167:	83 c4 20             	add    esp,0x20
c002016a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002016e:	e8 91 f8 ff ff       	call   c001fa04 <Vm::fpuPop()>
c0020173:	e8 8c f8 ff ff       	call   c001fa04 <Vm::fpuPop()>
c0020178:	e9 50 f9 ff ff       	jmp    c001facd <Vm::x87Handler(regs*)+0x77>
c002017d:	3c d9                	cmp    al,0xd9
c002017f:	0f 85 b5 02 00 00    	jne    c002043a <Vm::x87Handler(regs*)+0x9e4>
c0020185:	eb bd                	jmp    c0020144 <Vm::x87Handler(regs*)+0x6ee>
c0020187:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002018b:	0f 85 ea 02 00 00    	jne    c002047b <Vm::x87Handler(regs*)+0xa25>
c0020191:	0f b7 05 80 19 03 c0 	movzx  eax,WORD PTR ds:0xc0031980
c0020198:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002019c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201a0:	e9 28 f9 ff ff       	jmp    c001facd <Vm::x87Handler(regs*)+0x77>
c00201a5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201a9:	84 d2                	test   dl,dl
c00201ab:	75 0f                	jne    c00201bc <Vm::x87Handler(regs*)+0x766>
c00201ad:	83 ec 0c             	sub    esp,0xc
c00201b0:	ff 36                	push   DWORD PTR [esi]
c00201b2:	e8 b1 f4 ff ff       	call   c001f668 <Vm::fpu32ToInternal(unsigned int)>
c00201b7:	e9 2c 01 00 00       	jmp    c00202e8 <Vm::x87Handler(regs*)+0x892>
c00201bc:	80 fa 01             	cmp    dl,0x1
c00201bf:	75 0f                	jne    c00201d0 <Vm::x87Handler(regs*)+0x77a>
c00201c1:	83 ec 0c             	sub    esp,0xc
c00201c4:	ff 36                	push   DWORD PTR [esi]
c00201c6:	e8 9d f4 ff ff       	call   c001f668 <Vm::fpu32ToInternal(unsigned int)>
c00201cb:	e9 81 02 00 00       	jmp    c0020451 <Vm::x87Handler(regs*)+0x9fb>
c00201d0:	80 fa 04             	cmp    dl,0x4
c00201d3:	75 0f                	jne    c00201e4 <Vm::x87Handler(regs*)+0x78e>
c00201d5:	83 ec 0c             	sub    esp,0xc
c00201d8:	ff 36                	push   DWORD PTR [esi]
c00201da:	e8 89 f4 ff ff       	call   c001f668 <Vm::fpu32ToInternal(unsigned int)>
c00201df:	e9 86 01 00 00       	jmp    c002036a <Vm::x87Handler(regs*)+0x914>
c00201e4:	80 fa 05             	cmp    dl,0x5
c00201e7:	75 1b                	jne    c0020204 <Vm::x87Handler(regs*)+0x7ae>
c00201e9:	83 ec 0c             	sub    esp,0xc
c00201ec:	6a 00                	push   0x0
c00201ee:	e8 26 f7 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c00201f3:	89 c7                	mov    edi,eax
c00201f5:	89 d5                	mov    ebp,edx
c00201f7:	58                   	pop    eax
c00201f8:	ff 36                	push   DWORD PTR [esi]
c00201fa:	e8 69 f4 ff ff       	call   c001f668 <Vm::fpu32ToInternal(unsigned int)>
c00201ff:	e9 a3 01 00 00       	jmp    c00203a7 <Vm::x87Handler(regs*)+0x951>
c0020204:	80 fa 06             	cmp    dl,0x6
c0020207:	75 0f                	jne    c0020218 <Vm::x87Handler(regs*)+0x7c2>
c0020209:	83 ec 0c             	sub    esp,0xc
c002020c:	ff 36                	push   DWORD PTR [esi]
c002020e:	e8 55 f4 ff ff       	call   c001f668 <Vm::fpu32ToInternal(unsigned int)>
c0020213:	e9 ae 01 00 00       	jmp    c00203c6 <Vm::x87Handler(regs*)+0x970>
c0020218:	31 c0                	xor    eax,eax
c002021a:	80 fa 07             	cmp    dl,0x7
c002021d:	0f 85 94 02 00 00    	jne    c00204b7 <Vm::x87Handler(regs*)+0xa61>
c0020223:	83 ec 0c             	sub    esp,0xc
c0020226:	6a 00                	push   0x0
c0020228:	e8 ec f6 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c002022d:	89 c7                	mov    edi,eax
c002022f:	89 d5                	mov    ebp,edx
c0020231:	58                   	pop    eax
c0020232:	ff 36                	push   DWORD PTR [esi]
c0020234:	e8 2f f4 ff ff       	call   c001f668 <Vm::fpu32ToInternal(unsigned int)>
c0020239:	e9 cb 01 00 00       	jmp    c0020409 <Vm::x87Handler(regs*)+0x9b3>
c002023e:	80 fa 03             	cmp    dl,0x3
c0020241:	0f 85 d3 01 00 00    	jne    c002041a <Vm::x87Handler(regs*)+0x9c4>
c0020247:	e8 b8 f7 ff ff       	call   c001fa04 <Vm::fpuPop()>
c002024c:	51                   	push   ecx
c002024d:	51                   	push   ecx
c002024e:	e9 de 01 00 00       	jmp    c0020431 <Vm::x87Handler(regs*)+0x9db>
c0020253:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020257:	80 fa 01             	cmp    dl,0x1
c002025a:	75 09                	jne    c0020265 <Vm::x87Handler(regs*)+0x80f>
c002025c:	57                   	push   edi
c002025d:	57                   	push   edi
c002025e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020260:	e9 e3 01 00 00       	jmp    c0020448 <Vm::x87Handler(regs*)+0x9f2>
c0020265:	80 fa 04             	cmp    dl,0x4
c0020268:	75 12                	jne    c002027c <Vm::x87Handler(regs*)+0x826>
c002026a:	31 d2                	xor    edx,edx
c002026c:	51                   	push   ecx
c002026d:	51                   	push   ecx
c002026e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020270:	52                   	push   edx
c0020271:	50                   	push   eax
c0020272:	e8 d0 f4 ff ff       	call   c001f747 <Vm::fpuLongToFloat(long long)>
c0020277:	e9 ee 00 00 00       	jmp    c002036a <Vm::x87Handler(regs*)+0x914>
c002027c:	31 c0                	xor    eax,eax
c002027e:	80 fa 07             	cmp    dl,0x7
c0020281:	0f 85 30 02 00 00    	jne    c00204b7 <Vm::x87Handler(regs*)+0xa61>
c0020287:	83 ec 0c             	sub    esp,0xc
c002028a:	6a 00                	push   0x0
c002028c:	e8 88 f6 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c0020291:	89 c7                	mov    edi,eax
c0020293:	89 d5                	mov    ebp,edx
c0020295:	58                   	pop    eax
c0020296:	8b 06                	mov    eax,DWORD PTR [esi]
c0020298:	5a                   	pop    edx
c0020299:	31 d2                	xor    edx,edx
c002029b:	52                   	push   edx
c002029c:	50                   	push   eax
c002029d:	e8 a5 f4 ff ff       	call   c001f747 <Vm::fpuLongToFloat(long long)>
c00202a2:	e9 62 01 00 00       	jmp    c0020409 <Vm::x87Handler(regs*)+0x9b3>
c00202a7:	84 d2                	test   dl,dl
c00202a9:	75 0d                	jne    c00202b8 <Vm::x87Handler(regs*)+0x862>
c00202ab:	31 d2                	xor    edx,edx
c00202ad:	55                   	push   ebp
c00202ae:	55                   	push   ebp
c00202af:	8b 06                	mov    eax,DWORD PTR [esi]
c00202b1:	52                   	push   edx
c00202b2:	50                   	push   eax
c00202b3:	e9 d3 01 00 00       	jmp    c002048b <Vm::x87Handler(regs*)+0xa35>
c00202b8:	31 c0                	xor    eax,eax
c00202ba:	80 fa 02             	cmp    dl,0x2
c00202bd:	0f 85 f4 01 00 00    	jne    c00204b7 <Vm::x87Handler(regs*)+0xa61>
c00202c3:	83 ec 0c             	sub    esp,0xc
c00202c6:	6a 00                	push   0x0
c00202c8:	e8 4c f6 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c00202cd:	59                   	pop    ecx
c00202ce:	5f                   	pop    edi
c00202cf:	e9 6a f9 ff ff       	jmp    c001fc3e <Vm::x87Handler(regs*)+0x1e8>
c00202d4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202d8:	84 d2                	test   dl,dl
c00202da:	75 2a                	jne    c0020306 <Vm::x87Handler(regs*)+0x8b0>
c00202dc:	50                   	push   eax
c00202dd:	50                   	push   eax
c00202de:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202e1:	ff 36                	push   DWORD PTR [esi]
c00202e3:	e8 c5 f3 ff ff       	call   c001f6ad <Vm::fpu64ToInternal(unsigned long long)>
c00202e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202ef:	89 c6                	mov    esi,eax
c00202f1:	89 d7                	mov    edi,edx
c00202f3:	e8 21 f6 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c00202f8:	57                   	push   edi
c00202f9:	56                   	push   esi
c00202fa:	52                   	push   edx
c00202fb:	50                   	push   eax
c00202fc:	e8 8e f5 ff ff       	call   c001f88f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020301:	e9 64 01 00 00       	jmp    c002046a <Vm::x87Handler(regs*)+0xa14>
c0020306:	80 fa 01             	cmp    dl,0x1
c0020309:	75 11                	jne    c002031c <Vm::x87Handler(regs*)+0x8c6>
c002030b:	50                   	push   eax
c002030c:	50                   	push   eax
c002030d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020310:	ff 36                	push   DWORD PTR [esi]
c0020312:	e8 96 f3 ff ff       	call   c001f6ad <Vm::fpu64ToInternal(unsigned long long)>
c0020317:	e9 35 01 00 00       	jmp    c0020451 <Vm::x87Handler(regs*)+0x9fb>
c002031c:	80 fa 02             	cmp    dl,0x2
c002031f:	0f 85 54 f9 ff ff    	jne    c001fc79 <Vm::x87Handler(regs*)+0x223>
c0020325:	55                   	push   ebp
c0020326:	55                   	push   ebp
c0020327:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002032a:	ff 36                	push   DWORD PTR [esi]
c002032c:	e8 7c f3 ff ff       	call   c001f6ad <Vm::fpu64ToInternal(unsigned long long)>
c0020331:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020338:	89 c6                	mov    esi,eax
c002033a:	89 d7                	mov    edi,edx
c002033c:	e8 d8 f5 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c0020341:	57                   	push   edi
c0020342:	56                   	push   esi
c0020343:	52                   	push   edx
c0020344:	50                   	push   eax
c0020345:	e8 f2 f4 ff ff       	call   c001f83c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002034a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002034e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020351:	83 c4 20             	add    esp,0x20
c0020354:	e9 74 f7 ff ff       	jmp    c001facd <Vm::x87Handler(regs*)+0x77>
c0020359:	80 fa 04             	cmp    dl,0x4
c002035c:	75 2a                	jne    c0020388 <Vm::x87Handler(regs*)+0x932>
c002035e:	51                   	push   ecx
c002035f:	51                   	push   ecx
c0020360:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020363:	ff 36                	push   DWORD PTR [esi]
c0020365:	e8 43 f3 ff ff       	call   c001f6ad <Vm::fpu64ToInternal(unsigned long long)>
c002036a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020371:	89 c6                	mov    esi,eax
c0020373:	89 d7                	mov    edi,edx
c0020375:	e8 9f f5 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c002037a:	57                   	push   edi
c002037b:	56                   	push   esi
c002037c:	52                   	push   edx
c002037d:	50                   	push   eax
c002037e:	e8 36 f5 ff ff       	call   c001f8b9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020383:	e9 e2 00 00 00       	jmp    c002046a <Vm::x87Handler(regs*)+0xa14>
c0020388:	80 fa 05             	cmp    dl,0x5
c002038b:	75 28                	jne    c00203b5 <Vm::x87Handler(regs*)+0x95f>
c002038d:	83 ec 0c             	sub    esp,0xc
c0020390:	6a 00                	push   0x0
c0020392:	e8 82 f5 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c0020397:	89 c7                	mov    edi,eax
c0020399:	89 d5                	mov    ebp,edx
c002039b:	58                   	pop    eax
c002039c:	5a                   	pop    edx
c002039d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203a0:	ff 36                	push   DWORD PTR [esi]
c00203a2:	e8 06 f3 ff ff       	call   c001f6ad <Vm::fpu64ToInternal(unsigned long long)>
c00203a7:	83 c4 10             	add    esp,0x10
c00203aa:	55                   	push   ebp
c00203ab:	57                   	push   edi
c00203ac:	52                   	push   edx
c00203ad:	50                   	push   eax
c00203ae:	e8 06 f5 ff ff       	call   c001f8b9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203b3:	eb 60                	jmp    c0020415 <Vm::x87Handler(regs*)+0x9bf>
c00203b5:	80 fa 06             	cmp    dl,0x6
c00203b8:	75 2a                	jne    c00203e4 <Vm::x87Handler(regs*)+0x98e>
c00203ba:	51                   	push   ecx
c00203bb:	51                   	push   ecx
c00203bc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203bf:	ff 36                	push   DWORD PTR [esi]
c00203c1:	e8 e7 f2 ff ff       	call   c001f6ad <Vm::fpu64ToInternal(unsigned long long)>
c00203c6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203cd:	89 c6                	mov    esi,eax
c00203cf:	89 d7                	mov    edi,edx
c00203d1:	e8 43 f5 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c00203d6:	57                   	push   edi
c00203d7:	56                   	push   esi
c00203d8:	52                   	push   edx
c00203d9:	50                   	push   eax
c00203da:	e8 08 f5 ff ff       	call   c001f8e7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203df:	e9 86 00 00 00       	jmp    c002046a <Vm::x87Handler(regs*)+0xa14>
c00203e4:	31 c0                	xor    eax,eax
c00203e6:	80 fa 07             	cmp    dl,0x7
c00203e9:	0f 85 c8 00 00 00    	jne    c00204b7 <Vm::x87Handler(regs*)+0xa61>
c00203ef:	83 ec 0c             	sub    esp,0xc
c00203f2:	6a 00                	push   0x0
c00203f4:	e8 20 f5 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c00203f9:	89 c7                	mov    edi,eax
c00203fb:	89 d5                	mov    ebp,edx
c00203fd:	58                   	pop    eax
c00203fe:	5a                   	pop    edx
c00203ff:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020402:	ff 36                	push   DWORD PTR [esi]
c0020404:	e8 a4 f2 ff ff       	call   c001f6ad <Vm::fpu64ToInternal(unsigned long long)>
c0020409:	83 c4 10             	add    esp,0x10
c002040c:	55                   	push   ebp
c002040d:	57                   	push   edi
c002040e:	52                   	push   edx
c002040f:	50                   	push   eax
c0020410:	e8 d2 f4 ff ff       	call   c001f8e7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020415:	83 c4 0c             	add    esp,0xc
c0020418:	eb 53                	jmp    c002046d <Vm::x87Handler(regs*)+0xa17>
c002041a:	31 c0                	xor    eax,eax
c002041c:	80 fa 02             	cmp    dl,0x2
c002041f:	0f 85 92 00 00 00    	jne    c00204b7 <Vm::x87Handler(regs*)+0xa61>
c0020425:	83 ec 0c             	sub    esp,0xc
c0020428:	6a 00                	push   0x0
c002042a:	e8 ea f4 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c002042f:	59                   	pop    ecx
c0020430:	5f                   	pop    edi
c0020431:	52                   	push   edx
c0020432:	50                   	push   eax
c0020433:	e8 27 f2 ff ff       	call   c001f65f <Vm::fpuInternalTo64(unsigned long long)>
c0020438:	eb 70                	jmp    c00204aa <Vm::x87Handler(regs*)+0xa54>
c002043a:	31 c0                	xor    eax,eax
c002043c:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020441:	75 74                	jne    c00204b7 <Vm::x87Handler(regs*)+0xa61>
c0020443:	50                   	push   eax
c0020444:	50                   	push   eax
c0020445:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020448:	31 d2                	xor    edx,edx
c002044a:	52                   	push   edx
c002044b:	50                   	push   eax
c002044c:	e8 f6 f2 ff ff       	call   c001f747 <Vm::fpuLongToFloat(long long)>
c0020451:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020458:	89 c6                	mov    esi,eax
c002045a:	89 d7                	mov    edi,edx
c002045c:	e8 b8 f4 ff ff       	call   c001f919 <Vm::fpuGetReg(int)>
c0020461:	57                   	push   edi
c0020462:	56                   	push   esi
c0020463:	52                   	push   edx
c0020464:	50                   	push   eax
c0020465:	e8 5e f4 ff ff       	call   c001f8c8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002046a:	83 c4 1c             	add    esp,0x1c
c002046d:	52                   	push   edx
c002046e:	50                   	push   eax
c002046f:	6a 00                	push   0x0
c0020471:	e8 e6 f4 ff ff       	call   c001f95c <Vm::fpuSetReg(int, unsigned long long)>
c0020476:	e9 f2 f7 ff ff       	jmp    c001fc6d <Vm::x87Handler(regs*)+0x217>
c002047b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002047f:	80 fa 05             	cmp    dl,0x5
c0020482:	75 11                	jne    c0020495 <Vm::x87Handler(regs*)+0xa3f>
c0020484:	55                   	push   ebp
c0020485:	55                   	push   ebp
c0020486:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020489:	ff 36                	push   DWORD PTR [esi]
c002048b:	e8 81 f2 ff ff       	call   c001f711 <Vm::fpuULongToFloat(unsigned long long)>
c0020490:	e9 cf f7 ff ff       	jmp    c001fc64 <Vm::x87Handler(regs*)+0x20e>
c0020495:	31 c0                	xor    eax,eax
c0020497:	80 fa 07             	cmp    dl,0x7
c002049a:	75 1b                	jne    c00204b7 <Vm::x87Handler(regs*)+0xa61>
c002049c:	e8 63 f5 ff ff       	call   c001fa04 <Vm::fpuPop()>
c00204a1:	51                   	push   ecx
c00204a2:	51                   	push   ecx
c00204a3:	52                   	push   edx
c00204a4:	50                   	push   eax
c00204a5:	e8 0c f2 ff ff       	call   c001f6b6 <Vm::fpuFloatToLong(unsigned long long)>
c00204aa:	83 c4 10             	add    esp,0x10
c00204ad:	89 06                	mov    DWORD PTR [esi],eax
c00204af:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00204b2:	e9 f8 f7 ff ff       	jmp    c001fcaf <Vm::x87Handler(regs*)+0x259>
c00204b7:	83 c4 1c             	add    esp,0x1c
c00204ba:	5b                   	pop    ebx
c00204bb:	5e                   	pop    esi
c00204bc:	5f                   	pop    edi
c00204bd:	5d                   	pop    ebp
c00204be:	c3                   	ret    

c00204bf <__static_initialization_and_destruction_0(int, int)>:
c00204bf:	83 ec 0c             	sub    esp,0xc
c00204c2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00204c7:	75 1a                	jne    c00204e3 <__static_initialization_and_destruction_0(int, int)+0x24>
c00204c9:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00204d1:	75 10                	jne    c00204e3 <__static_initialization_and_destruction_0(int, int)+0x24>
c00204d3:	83 ec 0c             	sub    esp,0xc
c00204d6:	68 80 19 03 c0       	push   0xc0031980
c00204db:	e8 10 88 00 00       	call   c0028cf0 <Vm::_FPUState::_FPUState()>
c00204e0:	83 c4 10             	add    esp,0x10
c00204e3:	90                   	nop
c00204e4:	83 c4 0c             	add    esp,0xc
c00204e7:	c3                   	ret    

c00204e8 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00204e8:	83 ec 0c             	sub    esp,0xc
c00204eb:	83 ec 08             	sub    esp,0x8
c00204ee:	68 ff ff 00 00       	push   0xffff
c00204f3:	6a 01                	push   0x1
c00204f5:	e8 c5 ff ff ff       	call   c00204bf <__static_initialization_and_destruction_0(int, int)>
c00204fa:	83 c4 10             	add    esp,0x10
c00204fd:	83 c4 0c             	add    esp,0xc
c0020500:	c3                   	ret    
c0020501:	90                   	nop

c0020502 <FAT::getName()>:
c0020502:	b8 68 c7 02 c0       	mov    eax,0xc002c768
c0020507:	c3                   	ret    

c0020508 <FAT::tell(void*, unsigned long long*)>:
c0020508:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002050d:	75 06                	jne    c0020515 <FAT::tell(void*, unsigned long long*)+0xd>
c002050f:	b8 04 00 00 00       	mov    eax,0x4
c0020514:	c3                   	ret    
c0020515:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002051a:	75 06                	jne    c0020522 <FAT::tell(void*, unsigned long long*)+0x1a>
c002051c:	b8 04 00 00 00       	mov    eax,0x4
c0020521:	c3                   	ret    
c0020522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020526:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020529:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002052c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020530:	89 01                	mov    DWORD PTR [ecx],eax
c0020532:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020535:	b8 00 00 00 00       	mov    eax,0x0
c002053a:	c3                   	ret    
c002053b:	90                   	nop

c002053c <FAT::stat(void*, unsigned long long*)>:
c002053c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020541:	75 06                	jne    c0020549 <FAT::stat(void*, unsigned long long*)+0xd>
c0020543:	b8 04 00 00 00       	mov    eax,0x4
c0020548:	c3                   	ret    
c0020549:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002054e:	75 06                	jne    c0020556 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020550:	b8 04 00 00 00       	mov    eax,0x4
c0020555:	c3                   	ret    
c0020556:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002055a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002055d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020560:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020564:	89 01                	mov    DWORD PTR [ecx],eax
c0020566:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020569:	b8 00 00 00 00       	mov    eax,0x0
c002056e:	c3                   	ret    
c002056f:	90                   	nop

c0020570 <FAT::~FAT()>:
c0020570:	83 ec 0c             	sub    esp,0xc
c0020573:	ba ec c7 02 c0       	mov    edx,0xc002c7ec
c0020578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002057c:	89 10                	mov    DWORD PTR [eax],edx
c002057e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020582:	83 ec 0c             	sub    esp,0xc
c0020585:	50                   	push   eax
c0020586:	e8 e3 2c ff ff       	call   c001326e <Filesystem::~Filesystem()>
c002058b:	83 c4 10             	add    esp,0x10
c002058e:	90                   	nop
c002058f:	83 c4 0c             	add    esp,0xc
c0020592:	c3                   	ret    
c0020593:	90                   	nop

c0020594 <FAT::~FAT()>:
c0020594:	83 ec 0c             	sub    esp,0xc
c0020597:	83 ec 0c             	sub    esp,0xc
c002059a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002059e:	e8 cd ff ff ff       	call   c0020570 <FAT::~FAT()>
c00205a3:	83 c4 10             	add    esp,0x10
c00205a6:	83 ec 08             	sub    esp,0x8
c00205a9:	6a 08                	push   0x8
c00205ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205af:	e8 b2 28 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c00205b4:	83 c4 10             	add    esp,0x10
c00205b7:	83 c4 0c             	add    esp,0xc
c00205ba:	c3                   	ret    
c00205bb:	90                   	nop

c00205bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00205bc:	83 ec 1c             	sub    esp,0x1c
c00205bf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00205c6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00205cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205cf:	8b 04 85 00 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce600]
c00205d6:	83 f8 ff             	cmp    eax,0xffffffff
c00205d9:	75 34                	jne    c002060f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00205db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205df:	88 c2                	mov    dl,al
c00205e1:	a1 e0 19 03 c0       	mov    eax,ds:0xc00319e0
c00205e6:	01 d0                	add    eax,edx
c00205e8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00205ec:	8b 15 e0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319e0
c00205f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205f6:	89 14 85 00 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce600],edx
c00205fd:	a1 e0 19 03 c0       	mov    eax,ds:0xc00319e0
c0020602:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020606:	89 14 85 80 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce580],edx
c002060d:	eb 17                	jmp    c0020626 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002060f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020613:	88 c2                	mov    dl,al
c0020615:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020619:	8b 04 85 00 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce600]
c0020620:	01 d0                	add    eax,edx
c0020622:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020626:	83 ec 04             	sub    esp,0x4
c0020629:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002062d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020631:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020635:	50                   	push   eax
c0020636:	e8 fd 66 fe ff       	call   c0006d38 <f_getlabel>
c002063b:	83 c4 10             	add    esp,0x10
c002063e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020642:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020647:	75 07                	jne    c0020650 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020649:	b8 00 00 00 00       	mov    eax,0x0
c002064e:	eb 05                	jmp    c0020655 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020650:	b8 01 00 00 00       	mov    eax,0x1
c0020655:	83 c4 1c             	add    esp,0x1c
c0020658:	c3                   	ret    
c0020659:	90                   	nop

c002065a <FAT::setlabel(LogicalDisk*, int, char*)>:
c002065a:	57                   	push   edi
c002065b:	83 ec 58             	sub    esp,0x58
c002065e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020666:	8d 54 24 10          	lea    edx,[esp+0x10]
c002066a:	b9 0f 00 00 00       	mov    ecx,0xf
c002066f:	b8 00 00 00 00       	mov    eax,0x0
c0020674:	fc                   	cld    
c0020675:	89 d7                	mov    edi,edx
c0020677:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020679:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002067d:	8b 04 85 00 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce600]
c0020684:	83 f8 ff             	cmp    eax,0xffffffff
c0020687:	75 34                	jne    c00206bd <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020689:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002068d:	88 c2                	mov    dl,al
c002068f:	a1 e0 19 03 c0       	mov    eax,ds:0xc00319e0
c0020694:	01 d0                	add    eax,edx
c0020696:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002069a:	8b 15 e0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319e0
c00206a0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206a4:	89 14 85 00 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce600],edx
c00206ab:	a1 e0 19 03 c0       	mov    eax,ds:0xc00319e0
c00206b0:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00206b4:	89 14 85 80 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce580],edx
c00206bb:	eb 17                	jmp    c00206d4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00206bd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206c1:	88 c2                	mov    dl,al
c00206c3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206c7:	8b 04 85 00 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce600]
c00206ce:	01 d0                	add    eax,edx
c00206d0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206d4:	83 ec 08             	sub    esp,0x8
c00206d7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00206db:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206df:	50                   	push   eax
c00206e0:	e8 8f 02 fe ff       	call   c0000974 <strcat>
c00206e5:	83 c4 10             	add    esp,0x10
c00206e8:	83 ec 0c             	sub    esp,0xc
c00206eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206ef:	50                   	push   eax
c00206f0:	e8 31 68 fe ff       	call   c0006f26 <f_setlabel>
c00206f5:	83 c4 10             	add    esp,0x10
c00206f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00206fc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020701:	75 07                	jne    c002070a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020703:	b8 00 00 00 00       	mov    eax,0x0
c0020708:	eb 05                	jmp    c002070f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002070a:	b8 01 00 00 00       	mov    eax,0x1
c002070f:	83 c4 58             	add    esp,0x58
c0020712:	5f                   	pop    edi
c0020713:	c3                   	ret    

c0020714 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020714:	83 ec 2c             	sub    esp,0x2c
c0020717:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002071f:	83 ec 08             	sub    esp,0x8
c0020722:	68 8c c7 02 c0       	push   0xc002c78c
c0020727:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002072b:	e8 90 01 fe ff       	call   c00008c0 <strcmp>
c0020730:	83 c4 10             	add    esp,0x10
c0020733:	85 c0                	test   eax,eax
c0020735:	0f 94 c0             	sete   al
c0020738:	84 c0                	test   al,al
c002073a:	74 0d                	je     c0020749 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002073c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020744:	e9 a6 00 00 00       	jmp    c00207ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020749:	83 ec 08             	sub    esp,0x8
c002074c:	68 7e c7 02 c0       	push   0xc002c77e
c0020751:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020755:	e8 66 01 fe ff       	call   c00008c0 <strcmp>
c002075a:	83 c4 10             	add    esp,0x10
c002075d:	85 c0                	test   eax,eax
c002075f:	0f 94 c0             	sete   al
c0020762:	84 c0                	test   al,al
c0020764:	74 0a                	je     c0020770 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020766:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002076e:	eb 7f                	jmp    c00207ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020770:	83 ec 08             	sub    esp,0x8
c0020773:	68 84 c7 02 c0       	push   0xc002c784
c0020778:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002077c:	e8 3f 01 fe ff       	call   c00008c0 <strcmp>
c0020781:	83 c4 10             	add    esp,0x10
c0020784:	85 c0                	test   eax,eax
c0020786:	0f 94 c0             	sete   al
c0020789:	84 c0                	test   al,al
c002078b:	74 0a                	je     c0020797 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002078d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020795:	eb 58                	jmp    c00207ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020797:	83 ec 08             	sub    esp,0x8
c002079a:	68 4c 94 02 c0       	push   0xc002944c
c002079f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207a3:	e8 18 01 fe ff       	call   c00008c0 <strcmp>
c00207a8:	83 c4 10             	add    esp,0x10
c00207ab:	85 c0                	test   eax,eax
c00207ad:	0f 94 c0             	sete   al
c00207b0:	84 c0                	test   al,al
c00207b2:	74 0a                	je     c00207be <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00207b4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00207bc:	eb 31                	jmp    c00207ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207be:	83 ec 08             	sub    esp,0x8
c00207c1:	68 8a c7 02 c0       	push   0xc002c78a
c00207c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207ca:	e8 f1 00 fe ff       	call   c00008c0 <strcmp>
c00207cf:	83 c4 10             	add    esp,0x10
c00207d2:	85 c0                	test   eax,eax
c00207d4:	0f 94 c0             	sete   al
c00207d7:	84 c0                	test   al,al
c00207d9:	74 0a                	je     c00207e5 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00207db:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00207e3:	eb 0a                	jmp    c00207ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207e5:	b8 08 00 00 00       	mov    eax,0x8
c00207ea:	e9 04 01 00 00       	jmp    c00208f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00207ef:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00207f6:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00207fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207ff:	8b 04 85 00 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce600]
c0020806:	83 f8 ff             	cmp    eax,0xffffffff
c0020809:	75 34                	jne    c002083f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002080b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002080f:	88 c2                	mov    dl,al
c0020811:	a1 e0 19 03 c0       	mov    eax,ds:0xc00319e0
c0020816:	01 d0                	add    eax,edx
c0020818:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002081c:	8b 15 e0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319e0
c0020822:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020826:	89 14 85 00 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce600],edx
c002082d:	a1 e0 19 03 c0       	mov    eax,ds:0xc00319e0
c0020832:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020836:	89 14 85 80 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce580],edx
c002083d:	eb 17                	jmp    c0020856 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002083f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020843:	88 c2                	mov    dl,al
c0020845:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020849:	8b 04 85 00 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce600]
c0020850:	01 d0                	add    eax,edx
c0020852:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020856:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002085a:	88 04 24             	mov    BYTE PTR [esp],al
c002085d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020861:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020865:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002086d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020872:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002087a:	83 ec 0c             	sub    esp,0xc
c002087d:	68 00 20 00 00       	push   0x2000
c0020882:	e8 b9 ef fe ff       	call   c000f840 <malloc>
c0020887:	83 c4 10             	add    esp,0x10
c002088a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002088e:	68 00 20 00 00       	push   0x2000
c0020893:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020897:	8d 44 24 08          	lea    eax,[esp+0x8]
c002089b:	50                   	push   eax
c002089c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00208a0:	50                   	push   eax
c00208a1:	e8 cb 6a fe ff       	call   c0007371 <f_mkfs>
c00208a6:	83 c4 10             	add    esp,0x10
c00208a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00208b2:	75 07                	jne    c00208bb <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00208b4:	b8 00 00 00 00       	mov    eax,0x0
c00208b9:	eb 38                	jmp    c00208f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208bb:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00208c0:	75 17                	jne    c00208d9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00208c2:	83 ec 0c             	sub    esp,0xc
c00208c5:	68 bc c7 02 c0       	push   0xc002c7bc
c00208ca:	e8 77 26 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00208cf:	83 c4 10             	add    esp,0x10
c00208d2:	b8 09 00 00 00       	mov    eax,0x9
c00208d7:	eb 1a                	jmp    c00208f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208dd:	83 ec 08             	sub    esp,0x8
c00208e0:	50                   	push   eax
c00208e1:	68 90 c7 02 c0       	push   0xc002c790
c00208e6:	e8 5b 26 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00208eb:	83 c4 10             	add    esp,0x10
c00208ee:	b8 01 00 00 00       	mov    eax,0x1
c00208f3:	83 c4 2c             	add    esp,0x2c
c00208f6:	c3                   	ret    
c00208f7:	90                   	nop

c00208f8 <FAT::tryMount(LogicalDisk*, int)>:
c00208f8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00208fe:	a1 e0 19 03 c0       	mov    eax,ds:0xc00319e0
c0020903:	83 f8 14             	cmp    eax,0x14
c0020906:	75 17                	jne    c002091f <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020908:	83 ec 0c             	sub    esp,0xc
c002090b:	68 a2 c7 02 c0       	push   0xc002c7a2
c0020910:	e8 d2 9c ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0020915:	83 c4 10             	add    esp,0x10
c0020918:	b0 00                	mov    al,0x0
c002091a:	e9 d7 01 00 00       	jmp    c0020af6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002091f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020926:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002092c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020932:	3d 00 02 00 00       	cmp    eax,0x200
c0020937:	74 07                	je     c0020940 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020939:	b0 00                	mov    al,0x0
c002093b:	e9 b6 01 00 00       	jmp    c0020af6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020940:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020948:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002094f:	8b 04 85 00 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce600]
c0020956:	83 f8 ff             	cmp    eax,0xffffffff
c0020959:	74 07                	je     c0020962 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002095b:	b0 01                	mov    al,0x1
c002095d:	e9 94 01 00 00       	jmp    c0020af6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020962:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002096c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020974:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002097b:	88 c2                	mov    dl,al
c002097d:	a1 e0 19 03 c0       	mov    eax,ds:0xc00319e0
c0020982:	01 d0                	add    eax,edx
c0020984:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002098b:	8b 15 e0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319e0
c0020991:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020998:	89 14 85 00 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce600],edx
c002099f:	a1 e0 19 03 c0       	mov    eax,ds:0xc00319e0
c00209a4:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00209ab:	89 14 85 80 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce580],edx
c00209b2:	83 ec 0c             	sub    esp,0xc
c00209b5:	68 54 02 00 00       	push   0x254
c00209ba:	e8 81 ee fe ff       	call   c000f840 <malloc>
c00209bf:	83 c4 10             	add    esp,0x10
c00209c2:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00209c9:	83 ec 04             	sub    esp,0x4
c00209cc:	6a 00                	push   0x0
c00209ce:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209d5:	50                   	push   eax
c00209d6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209dd:	e8 4d 45 fe ff       	call   c0004f2f <f_mount>
c00209e2:	83 c4 10             	add    esp,0x10
c00209e5:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00209ec:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00209f4:	74 19                	je     c0020a0f <FAT::tryMount(LogicalDisk*, int)+0x117>
c00209f6:	83 ec 0c             	sub    esp,0xc
c00209f9:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a00:	e8 5b ee fe ff       	call   c000f860 <rfree>
c0020a05:	83 c4 10             	add    esp,0x10
c0020a08:	b0 00                	mov    al,0x0
c0020a0a:	e9 e7 00 00 00       	jmp    c0020af6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a0f:	83 ec 04             	sub    esp,0x4
c0020a12:	68 00 01 00 00       	push   0x100
c0020a17:	6a 00                	push   0x0
c0020a19:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a20:	50                   	push   eax
c0020a21:	e8 52 fd fd ff       	call   c0000778 <memset>
c0020a26:	83 c4 10             	add    esp,0x10
c0020a29:	83 ec 08             	sub    esp,0x8
c0020a2c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a33:	50                   	push   eax
c0020a34:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a3b:	50                   	push   eax
c0020a3c:	e8 33 ff fd ff       	call   c0000974 <strcat>
c0020a41:	83 c4 10             	add    esp,0x10
c0020a44:	83 ec 08             	sub    esp,0x8
c0020a47:	68 b0 c7 02 c0       	push   0xc002c7b0
c0020a4c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a53:	50                   	push   eax
c0020a54:	e8 1b ff fd ff       	call   c0000974 <strcat>
c0020a59:	83 c4 10             	add    esp,0x10
c0020a5c:	83 ec 04             	sub    esp,0x4
c0020a5f:	6a 01                	push   0x1
c0020a61:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020a68:	50                   	push   eax
c0020a69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a6d:	50                   	push   eax
c0020a6e:	e8 1e 45 fe ff       	call   c0004f91 <f_open>
c0020a73:	83 c4 10             	add    esp,0x10
c0020a76:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a7d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020a84:	85 c0                	test   eax,eax
c0020a86:	74 0a                	je     c0020a92 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020a88:	78 2d                	js     c0020ab7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a8a:	83 e8 04             	sub    eax,0x4
c0020a8d:	83 f8 01             	cmp    eax,0x1
c0020a90:	77 25                	ja     c0020ab7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a92:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020a9a:	83 ec 0c             	sub    esp,0xc
c0020a9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020aa1:	50                   	push   eax
c0020aa2:	e8 3c 50 fe ff       	call   c0005ae3 <f_close>
c0020aa7:	83 c4 10             	add    esp,0x10
c0020aaa:	90                   	nop
c0020aab:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020ab3:	74 3a                	je     c0020aef <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020ab5:	eb 2d                	jmp    c0020ae4 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020ab7:	83 ec 0c             	sub    esp,0xc
c0020aba:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ac1:	e8 9a ed fe ff       	call   c000f860 <rfree>
c0020ac6:	83 c4 10             	add    esp,0x10
c0020ac9:	83 ec 04             	sub    esp,0x4
c0020acc:	6a 00                	push   0x0
c0020ace:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020ad5:	50                   	push   eax
c0020ad6:	6a 00                	push   0x0
c0020ad8:	e8 52 44 fe ff       	call   c0004f2f <f_mount>
c0020add:	83 c4 10             	add    esp,0x10
c0020ae0:	b0 00                	mov    al,0x0
c0020ae2:	eb 12                	jmp    c0020af6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ae4:	a1 e0 19 03 c0       	mov    eax,ds:0xc00319e0
c0020ae9:	40                   	inc    eax
c0020aea:	a3 e0 19 03 c0       	mov    ds:0xc00319e0,eax
c0020aef:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020af6:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020afc:	c3                   	ret    
c0020afd:	90                   	nop

c0020afe <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020afe:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b04:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b0c:	74 0a                	je     c0020b18 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b0e:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b16:	75 0a                	jne    c0020b22 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b18:	b8 04 00 00 00       	mov    eax,0x4
c0020b1d:	e9 db 00 00 00       	jmp    c0020bfd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b22:	83 ec 08             	sub    esp,0x8
c0020b25:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b2c:	50                   	push   eax
c0020b2d:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b34:	e8 b4 55 fe ff       	call   c00060ed <f_readdir>
c0020b39:	83 c4 10             	add    esp,0x10
c0020b3c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b43:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b49:	83 ec 0c             	sub    esp,0xc
c0020b4c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b53:	83 c0 1a             	add    eax,0x1a
c0020b56:	50                   	push   eax
c0020b57:	e8 38 fc fd ff       	call   c0000794 <strlen>
c0020b5c:	83 c4 10             	add    esp,0x10
c0020b5f:	ba 00 00 00 00       	mov    edx,0x0
c0020b64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b68:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b6c:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020b73:	0f b6 c0             	movzx  eax,al
c0020b76:	83 e0 10             	and    eax,0x10
c0020b79:	74 07                	je     c0020b82 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020b7b:	b8 02 00 00 00       	mov    eax,0x2
c0020b80:	eb 05                	jmp    c0020b87 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020b82:	b8 01 00 00 00       	mov    eax,0x1
c0020b87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b8b:	83 ec 08             	sub    esp,0x8
c0020b8e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b95:	83 c0 1a             	add    eax,0x1a
c0020b98:	50                   	push   eax
c0020b99:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b9d:	83 c0 10             	add    eax,0x10
c0020ba0:	50                   	push   eax
c0020ba1:	e8 8e fc fd ff       	call   c0000834 <strcpy>
c0020ba6:	83 c4 10             	add    esp,0x10
c0020ba9:	83 ec 04             	sub    esp,0x4
c0020bac:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020bb3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bb7:	50                   	push   eax
c0020bb8:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020bbf:	e8 80 fb fd ff       	call   c0000744 <memcpy>
c0020bc4:	83 c4 10             	add    esp,0x10
c0020bc7:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020bce:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020bd4:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020bdb:	84 c0                	test   al,al
c0020bdd:	75 07                	jne    c0020be6 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020bdf:	b8 07 00 00 00       	mov    eax,0x7
c0020be4:	eb 17                	jmp    c0020bfd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020be6:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020bed:	85 c0                	test   eax,eax
c0020bef:	75 07                	jne    c0020bf8 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020bf1:	b8 00 00 00 00       	mov    eax,0x0
c0020bf6:	eb 05                	jmp    c0020bfd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bf8:	b8 01 00 00 00       	mov    eax,0x1
c0020bfd:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c03:	c3                   	ret    

c0020c04 <FAT::read(void*, unsigned long, void*, int*)>:
c0020c04:	83 ec 1c             	sub    esp,0x1c
c0020c07:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c0c:	74 07                	je     c0020c15 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c0e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c13:	75 07                	jne    c0020c1c <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c15:	b8 04 00 00 00       	mov    eax,0x4
c0020c1a:	eb 3d                	jmp    c0020c59 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c1c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c20:	50                   	push   eax
c0020c21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c2d:	e8 9b 47 fe ff       	call   c00053cd <f_read>
c0020c32:	83 c4 10             	add    esp,0x10
c0020c35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c3d:	89 c2                	mov    edx,eax
c0020c3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c43:	89 10                	mov    DWORD PTR [eax],edx
c0020c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c49:	85 c0                	test   eax,eax
c0020c4b:	75 07                	jne    c0020c54 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c4d:	b8 00 00 00 00       	mov    eax,0x0
c0020c52:	eb 05                	jmp    c0020c59 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c54:	b8 01 00 00 00       	mov    eax,0x1
c0020c59:	83 c4 1c             	add    esp,0x1c
c0020c5c:	c3                   	ret    
c0020c5d:	90                   	nop

c0020c5e <FAT::write(void*, unsigned long, void*, int*)>:
c0020c5e:	83 ec 1c             	sub    esp,0x1c
c0020c61:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c66:	74 07                	je     c0020c6f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c68:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c6d:	75 07                	jne    c0020c76 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c6f:	b8 04 00 00 00       	mov    eax,0x4
c0020c74:	eb 3d                	jmp    c0020cb3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c76:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c7a:	50                   	push   eax
c0020c7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c83:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c87:	e8 c1 49 fe ff       	call   c000564d <f_write>
c0020c8c:	83 c4 10             	add    esp,0x10
c0020c8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c97:	89 c2                	mov    edx,eax
c0020c99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c9d:	89 10                	mov    DWORD PTR [eax],edx
c0020c9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ca3:	85 c0                	test   eax,eax
c0020ca5:	75 07                	jne    c0020cae <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020ca7:	b8 00 00 00 00       	mov    eax,0x0
c0020cac:	eb 05                	jmp    c0020cb3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cae:	b8 01 00 00 00       	mov    eax,0x1
c0020cb3:	83 c4 1c             	add    esp,0x1c
c0020cb6:	c3                   	ret    
c0020cb7:	90                   	nop

c0020cb8 <FAT::close(void*)>:
c0020cb8:	83 ec 1c             	sub    esp,0x1c
c0020cbb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cc0:	75 07                	jne    c0020cc9 <FAT::close(void*)+0x11>
c0020cc2:	b8 04 00 00 00       	mov    eax,0x4
c0020cc7:	eb 36                	jmp    c0020cff <FAT::close(void*)+0x47>
c0020cc9:	83 ec 0c             	sub    esp,0xc
c0020ccc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cd0:	e8 0e 4e fe ff       	call   c0005ae3 <f_close>
c0020cd5:	83 c4 10             	add    esp,0x10
c0020cd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cdc:	83 ec 0c             	sub    esp,0xc
c0020cdf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ce3:	e8 68 eb fe ff       	call   c000f850 <free>
c0020ce8:	83 c4 10             	add    esp,0x10
c0020ceb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cef:	85 c0                	test   eax,eax
c0020cf1:	75 07                	jne    c0020cfa <FAT::close(void*)+0x42>
c0020cf3:	b8 00 00 00 00       	mov    eax,0x0
c0020cf8:	eb 05                	jmp    c0020cff <FAT::close(void*)+0x47>
c0020cfa:	b8 01 00 00 00       	mov    eax,0x1
c0020cff:	83 c4 1c             	add    esp,0x1c
c0020d02:	c3                   	ret    
c0020d03:	90                   	nop

c0020d04 <FAT::closeDir(void*)>:
c0020d04:	83 ec 1c             	sub    esp,0x1c
c0020d07:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d0c:	75 07                	jne    c0020d15 <FAT::closeDir(void*)+0x11>
c0020d0e:	b8 04 00 00 00       	mov    eax,0x4
c0020d13:	eb 36                	jmp    c0020d4b <FAT::closeDir(void*)+0x47>
c0020d15:	83 ec 0c             	sub    esp,0xc
c0020d18:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d1c:	e8 aa 53 fe ff       	call   c00060cb <f_closedir>
c0020d21:	83 c4 10             	add    esp,0x10
c0020d24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d28:	83 ec 0c             	sub    esp,0xc
c0020d2b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d2f:	e8 1c eb fe ff       	call   c000f850 <free>
c0020d34:	83 c4 10             	add    esp,0x10
c0020d37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d3b:	85 c0                	test   eax,eax
c0020d3d:	75 07                	jne    c0020d46 <FAT::closeDir(void*)+0x42>
c0020d3f:	b8 00 00 00 00       	mov    eax,0x0
c0020d44:	eb 05                	jmp    c0020d4b <FAT::closeDir(void*)+0x47>
c0020d46:	b8 01 00 00 00       	mov    eax,0x1
c0020d4b:	83 c4 1c             	add    esp,0x1c
c0020d4e:	c3                   	ret    
c0020d4f:	90                   	nop

c0020d50 <FAT::seek(void*, unsigned long long)>:
c0020d50:	83 ec 2c             	sub    esp,0x2c
c0020d53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d63:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d68:	75 07                	jne    c0020d71 <FAT::seek(void*, unsigned long long)+0x21>
c0020d6a:	b8 04 00 00 00       	mov    eax,0x4
c0020d6f:	eb 2f                	jmp    c0020da0 <FAT::seek(void*, unsigned long long)+0x50>
c0020d71:	83 ec 04             	sub    esp,0x4
c0020d74:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d78:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d7c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d80:	e8 8d 4d fe ff       	call   c0005b12 <f_lseek>
c0020d85:	83 c4 10             	add    esp,0x10
c0020d88:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d90:	85 c0                	test   eax,eax
c0020d92:	75 07                	jne    c0020d9b <FAT::seek(void*, unsigned long long)+0x4b>
c0020d94:	b8 00 00 00 00       	mov    eax,0x0
c0020d99:	eb 05                	jmp    c0020da0 <FAT::seek(void*, unsigned long long)+0x50>
c0020d9b:	b8 01 00 00 00       	mov    eax,0x1
c0020da0:	83 c4 2c             	add    esp,0x2c
c0020da3:	c3                   	ret    

c0020da4 <fatWrapperReadDisk>:
c0020da4:	83 ec 1c             	sub    esp,0x1c
c0020da7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020daf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020db3:	89 04 24             	mov    DWORD PTR [esp],eax
c0020db6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020dbe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dc3:	8b 04 85 c0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1640]
c0020dca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020dce:	83 ec 0c             	sub    esp,0xc
c0020dd1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dd5:	52                   	push   edx
c0020dd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dde:	50                   	push   eax
c0020ddf:	e8 72 59 ff ff       	call   c0016756 <LogicalDisk::read(unsigned long long, int, void*)>
c0020de4:	83 c4 20             	add    esp,0x20
c0020de7:	83 c4 1c             	add    esp,0x1c
c0020dea:	c3                   	ret    

c0020deb <fatWrapperWriteDisk>:
c0020deb:	83 ec 1c             	sub    esp,0x1c
c0020dee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020df2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020df6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dfd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e05:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e0a:	8b 04 85 c0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1640]
c0020e11:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e15:	83 ec 0c             	sub    esp,0xc
c0020e18:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e1c:	52                   	push   edx
c0020e1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e25:	50                   	push   eax
c0020e26:	e8 97 59 ff ff       	call   c00167c2 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e2b:	83 c4 20             	add    esp,0x20
c0020e2e:	83 c4 1c             	add    esp,0x1c
c0020e31:	c3                   	ret    

c0020e32 <fatWrapperIoctl>:
c0020e32:	53                   	push   ebx
c0020e33:	83 ec 28             	sub    esp,0x28
c0020e36:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e3e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e42:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e46:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e4b:	75 31                	jne    c0020e7e <fatWrapperIoctl+0x4c>
c0020e4d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e55:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e5a:	8b 04 85 c0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1640]
c0020e61:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e67:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e6d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e71:	66 89 02             	mov    WORD PTR [edx],ax
c0020e74:	b8 00 00 00 00       	mov    eax,0x0
c0020e79:	e9 b2 00 00 00       	jmp    c0020f30 <fatWrapperIoctl+0xfe>
c0020e7e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e83:	75 6a                	jne    c0020eef <fatWrapperIoctl+0xbd>
c0020e85:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e89:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e8d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e92:	8b 04 85 c0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1640]
c0020e99:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e9f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020ea5:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020eab:	89 c8                	mov    eax,ecx
c0020ead:	89 da                	mov    edx,ebx
c0020eaf:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020eb3:	c1 e0 0a             	shl    eax,0xa
c0020eb6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020ebb:	8b 0c 8d c0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1640]
c0020ec2:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020ec8:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020ece:	89 cb                	mov    ebx,ecx
c0020ed0:	c1 fb 1f             	sar    ebx,0x1f
c0020ed3:	53                   	push   ebx
c0020ed4:	51                   	push   ecx
c0020ed5:	52                   	push   edx
c0020ed6:	50                   	push   eax
c0020ed7:	e8 c0 5a 00 00       	call   c002699c <__udivdi3>
c0020edc:	83 c4 10             	add    esp,0x10
c0020edf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020ee3:	89 01                	mov    DWORD PTR [ecx],eax
c0020ee5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020ee8:	b8 00 00 00 00       	mov    eax,0x0
c0020eed:	eb 41                	jmp    c0020f30 <fatWrapperIoctl+0xfe>
c0020eef:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020ef4:	75 07                	jne    c0020efd <fatWrapperIoctl+0xcb>
c0020ef6:	b8 00 00 00 00       	mov    eax,0x0
c0020efb:	eb 33                	jmp    c0020f30 <fatWrapperIoctl+0xfe>
c0020efd:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f02:	75 19                	jne    c0020f1d <fatWrapperIoctl+0xeb>
c0020f04:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f10:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f16:	b8 00 00 00 00       	mov    eax,0x0
c0020f1b:	eb 13                	jmp    c0020f30 <fatWrapperIoctl+0xfe>
c0020f1d:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f22:	75 07                	jne    c0020f2b <fatWrapperIoctl+0xf9>
c0020f24:	b8 00 00 00 00       	mov    eax,0x0
c0020f29:	eb 05                	jmp    c0020f30 <fatWrapperIoctl+0xfe>
c0020f2b:	b8 04 00 00 00       	mov    eax,0x4
c0020f30:	83 c4 28             	add    esp,0x28
c0020f33:	5b                   	pop    ebx
c0020f34:	c3                   	ret    
c0020f35:	90                   	nop

c0020f36 <FAT::FAT()>:
c0020f36:	83 ec 1c             	sub    esp,0x1c
c0020f39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f3d:	83 ec 0c             	sub    esp,0xc
c0020f40:	50                   	push   eax
c0020f41:	e8 04 23 ff ff       	call   c001324a <Filesystem::Filesystem()>
c0020f46:	83 c4 10             	add    esp,0x10
c0020f49:	ba ec c7 02 c0       	mov    edx,0xc002c7ec
c0020f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f52:	89 10                	mov    DWORD PTR [eax],edx
c0020f54:	c7 05 e0 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319e0,0x0
c0020f5e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f66:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f6b:	7f 15                	jg     c0020f82 <FAT::FAT()+0x4c>
c0020f6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f71:	c7 04 85 00 1a 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce600],0xffffffff
c0020f7c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f80:	eb e4                	jmp    c0020f66 <FAT::FAT()+0x30>
c0020f82:	90                   	nop
c0020f83:	83 c4 1c             	add    esp,0x1c
c0020f86:	c3                   	ret    
c0020f87:	90                   	nop

c0020f88 <FAT::fixFilepath(char*)>:
c0020f88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f8c:	8a 00                	mov    al,BYTE PTR [eax]
c0020f8e:	3c 40                	cmp    al,0x40
c0020f90:	7e 2c                	jle    c0020fbe <FAT::fixFilepath(char*)+0x36>
c0020f92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f96:	8a 00                	mov    al,BYTE PTR [eax]
c0020f98:	83 e8 41             	sub    eax,0x41
c0020f9b:	88 c2                	mov    dl,al
c0020f9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fa1:	88 10                	mov    BYTE PTR [eax],dl
c0020fa3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fa7:	8a 00                	mov    al,BYTE PTR [eax]
c0020fa9:	0f be c0             	movsx  eax,al
c0020fac:	8b 04 85 00 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce600]
c0020fb3:	83 c0 30             	add    eax,0x30
c0020fb6:	88 c2                	mov    dl,al
c0020fb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fbc:	88 10                	mov    BYTE PTR [eax],dl
c0020fbe:	90                   	nop
c0020fbf:	c3                   	ret    

c0020fc0 <FAT::open(char const*, void**, FileOpenMode)>:
c0020fc0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fc6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fce:	74 0a                	je     c0020fda <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020fd0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fd8:	75 0a                	jne    c0020fe4 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020fda:	b8 04 00 00 00       	mov    eax,0x4
c0020fdf:	e9 fd 00 00 00       	jmp    c00210e1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fe4:	83 ec 08             	sub    esp,0x8
c0020fe7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fee:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ff2:	50                   	push   eax
c0020ff3:	e8 3c f8 fd ff       	call   c0000834 <strcpy>
c0020ff8:	83 c4 10             	add    esp,0x10
c0020ffb:	83 ec 08             	sub    esp,0x8
c0020ffe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021002:	50                   	push   eax
c0021003:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002100a:	e8 79 ff ff ff       	call   c0020f88 <FAT::fixFilepath(char*)>
c002100f:	83 c4 10             	add    esp,0x10
c0021012:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002101a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021021:	83 e0 01             	and    eax,0x1
c0021024:	74 08                	je     c002102e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021026:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002102e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021035:	83 e0 04             	and    eax,0x4
c0021038:	74 10                	je     c002104a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002103a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021042:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002104a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021051:	83 e0 02             	and    eax,0x2
c0021054:	74 08                	je     c002105e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021056:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002105e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021065:	83 e0 08             	and    eax,0x8
c0021068:	74 08                	je     c0021072 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002106a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021072:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021079:	83 e0 10             	and    eax,0x10
c002107c:	74 08                	je     c0021086 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002107e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021086:	83 ec 0c             	sub    esp,0xc
c0021089:	68 50 02 00 00       	push   0x250
c002108e:	e8 ad e7 fe ff       	call   c000f840 <malloc>
c0021093:	83 c4 10             	add    esp,0x10
c0021096:	89 c2                	mov    edx,eax
c0021098:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002109f:	89 10                	mov    DWORD PTR [eax],edx
c00210a1:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210a9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00210b2:	83 ec 04             	sub    esp,0x4
c00210b5:	52                   	push   edx
c00210b6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00210ba:	52                   	push   edx
c00210bb:	50                   	push   eax
c00210bc:	e8 d0 3e fe ff       	call   c0004f91 <f_open>
c00210c1:	83 c4 10             	add    esp,0x10
c00210c4:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00210cb:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00210d3:	74 07                	je     c00210dc <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00210d5:	b8 01 00 00 00       	mov    eax,0x1
c00210da:	eb 05                	jmp    c00210e1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210dc:	b8 00 00 00 00       	mov    eax,0x0
c00210e1:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210e7:	c3                   	ret    

c00210e8 <FAT::openDir(char const*, void**)>:
c00210e8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210ee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210f6:	74 0a                	je     c0021102 <FAT::openDir(char const*, void**)+0x1a>
c00210f8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021100:	75 07                	jne    c0021109 <FAT::openDir(char const*, void**)+0x21>
c0021102:	b8 04 00 00 00       	mov    eax,0x4
c0021107:	eb 7d                	jmp    c0021186 <FAT::openDir(char const*, void**)+0x9e>
c0021109:	83 ec 08             	sub    esp,0x8
c002110c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021113:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021117:	50                   	push   eax
c0021118:	e8 17 f7 fd ff       	call   c0000834 <strcpy>
c002111d:	83 c4 10             	add    esp,0x10
c0021120:	83 ec 08             	sub    esp,0x8
c0021123:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021127:	50                   	push   eax
c0021128:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002112f:	e8 54 fe ff ff       	call   c0020f88 <FAT::fixFilepath(char*)>
c0021134:	83 c4 10             	add    esp,0x10
c0021137:	83 ec 0c             	sub    esp,0xc
c002113a:	6a 4c                	push   0x4c
c002113c:	e8 ff e6 fe ff       	call   c000f840 <malloc>
c0021141:	83 c4 10             	add    esp,0x10
c0021144:	89 c2                	mov    edx,eax
c0021146:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002114d:	89 10                	mov    DWORD PTR [eax],edx
c002114f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021156:	8b 00                	mov    eax,DWORD PTR [eax]
c0021158:	83 ec 08             	sub    esp,0x8
c002115b:	8d 54 24 14          	lea    edx,[esp+0x14]
c002115f:	52                   	push   edx
c0021160:	50                   	push   eax
c0021161:	e8 63 4e fe ff       	call   c0005fc9 <f_opendir>
c0021166:	83 c4 10             	add    esp,0x10
c0021169:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021170:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021178:	74 07                	je     c0021181 <FAT::openDir(char const*, void**)+0x99>
c002117a:	b8 01 00 00 00       	mov    eax,0x1
c002117f:	eb 05                	jmp    c0021186 <FAT::openDir(char const*, void**)+0x9e>
c0021181:	b8 00 00 00 00       	mov    eax,0x0
c0021186:	81 c4 1c 01 00 00    	add    esp,0x11c
c002118c:	c3                   	ret    
c002118d:	90                   	nop

c002118e <FAT::stat(char const*, unsigned long long*, bool*)>:
c002118e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021194:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002119c:	75 0a                	jne    c00211a8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002119e:	b8 04 00 00 00       	mov    eax,0x4
c00211a3:	e9 c9 00 00 00       	jmp    c0021271 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211a8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211b0:	75 0a                	jne    c00211bc <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00211b2:	b8 04 00 00 00       	mov    eax,0x4
c00211b7:	e9 b5 00 00 00       	jmp    c0021271 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211bc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00211c4:	75 0a                	jne    c00211d0 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00211c6:	b8 04 00 00 00       	mov    eax,0x4
c00211cb:	e9 a1 00 00 00       	jmp    c0021271 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211d0:	83 ec 08             	sub    esp,0x8
c00211d3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211da:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211e1:	50                   	push   eax
c00211e2:	e8 4d f6 fd ff       	call   c0000834 <strcpy>
c00211e7:	83 c4 10             	add    esp,0x10
c00211ea:	83 ec 08             	sub    esp,0x8
c00211ed:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00211f4:	50                   	push   eax
c00211f5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211fc:	e8 87 fd ff ff       	call   c0020f88 <FAT::fixFilepath(char*)>
c0021201:	83 c4 10             	add    esp,0x10
c0021204:	83 ec 08             	sub    esp,0x8
c0021207:	8d 44 24 08          	lea    eax,[esp+0x8]
c002120b:	50                   	push   eax
c002120c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021213:	50                   	push   eax
c0021214:	e8 6f 4f fe ff       	call   c0006188 <f_stat>
c0021219:	83 c4 10             	add    esp,0x10
c002121c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021223:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002122a:	85 c0                	test   eax,eax
c002122c:	74 07                	je     c0021235 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002122e:	83 f8 04             	cmp    eax,0x4
c0021231:	74 32                	je     c0021265 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021233:	eb 37                	jmp    c002126c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021235:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021239:	0f b6 c0             	movzx  eax,al
c002123c:	83 e0 10             	and    eax,0x10
c002123f:	0f 95 c2             	setne  dl
c0021242:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021249:	88 10                	mov    BYTE PTR [eax],dl
c002124b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002124e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021252:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021259:	89 01                	mov    DWORD PTR [ecx],eax
c002125b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002125e:	b8 00 00 00 00       	mov    eax,0x0
c0021263:	eb 0c                	jmp    c0021271 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021265:	b8 02 00 00 00       	mov    eax,0x2
c002126a:	eb 05                	jmp    c0021271 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002126c:	b8 01 00 00 00       	mov    eax,0x1
c0021271:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021277:	c3                   	ret    

c0021278 <FAT::unlink(char const*)>:
c0021278:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002127e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021286:	75 07                	jne    c002128f <FAT::unlink(char const*)+0x17>
c0021288:	b8 04 00 00 00       	mov    eax,0x4
c002128d:	eb 5c                	jmp    c00212eb <FAT::unlink(char const*)+0x73>
c002128f:	83 ec 08             	sub    esp,0x8
c0021292:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021299:	8d 44 24 18          	lea    eax,[esp+0x18]
c002129d:	50                   	push   eax
c002129e:	e8 91 f5 fd ff       	call   c0000834 <strcpy>
c00212a3:	83 c4 10             	add    esp,0x10
c00212a6:	83 ec 08             	sub    esp,0x8
c00212a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212ad:	50                   	push   eax
c00212ae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212b5:	e8 ce fc ff ff       	call   c0020f88 <FAT::fixFilepath(char*)>
c00212ba:	83 c4 10             	add    esp,0x10
c00212bd:	83 ec 0c             	sub    esp,0xc
c00212c0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212c4:	50                   	push   eax
c00212c5:	e8 10 52 fe ff       	call   c00064da <f_unlink>
c00212ca:	83 c4 10             	add    esp,0x10
c00212cd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212d4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00212db:	85 c0                	test   eax,eax
c00212dd:	75 07                	jne    c00212e6 <FAT::unlink(char const*)+0x6e>
c00212df:	b8 00 00 00 00       	mov    eax,0x0
c00212e4:	eb 05                	jmp    c00212eb <FAT::unlink(char const*)+0x73>
c00212e6:	b8 01 00 00 00       	mov    eax,0x1
c00212eb:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212f1:	c3                   	ret    

c00212f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00212f2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00212f8:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00212ff:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021306:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002130a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002130e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021316:	75 0a                	jne    c0021322 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021318:	b8 04 00 00 00       	mov    eax,0x4
c002131d:	e9 1c 01 00 00       	jmp    c002143e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021322:	83 ec 08             	sub    esp,0x8
c0021325:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002132c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021330:	50                   	push   eax
c0021331:	e8 fe f4 fd ff       	call   c0000834 <strcpy>
c0021336:	83 c4 10             	add    esp,0x10
c0021339:	83 ec 08             	sub    esp,0x8
c002133c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021340:	50                   	push   eax
c0021341:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021348:	e8 3b fc ff ff       	call   c0020f88 <FAT::fixFilepath(char*)>
c002134d:	83 c4 10             	add    esp,0x10
c0021350:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021358:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021360:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021365:	83 e0 01             	and    eax,0x1
c0021368:	74 08                	je     c0021372 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002136a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021372:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021377:	83 e0 02             	and    eax,0x2
c002137a:	74 08                	je     c0021384 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002137c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021384:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021389:	83 e0 04             	and    eax,0x4
c002138c:	74 08                	je     c0021396 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002138e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021396:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002139b:	83 e0 08             	and    eax,0x8
c002139e:	74 08                	je     c00213a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213a0:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213ad:	83 e0 01             	and    eax,0x1
c00213b0:	74 08                	je     c00213ba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00213b2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00213ba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213bf:	83 e0 02             	and    eax,0x2
c00213c2:	74 08                	je     c00213cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00213c4:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00213cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213d1:	83 e0 04             	and    eax,0x4
c00213d4:	74 08                	je     c00213de <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00213d6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00213de:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213e3:	83 e0 08             	and    eax,0x8
c00213e6:	74 08                	je     c00213f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00213e8:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00213f0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00213f7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00213fe:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021406:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002140e:	83 ec 04             	sub    esp,0x4
c0021411:	52                   	push   edx
c0021412:	50                   	push   eax
c0021413:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021417:	50                   	push   eax
c0021418:	e8 5f 57 fe ff       	call   c0006b7c <f_chmod>
c002141d:	83 c4 10             	add    esp,0x10
c0021420:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021427:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002142e:	85 c0                	test   eax,eax
c0021430:	75 07                	jne    c0021439 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021432:	b8 00 00 00 00       	mov    eax,0x0
c0021437:	eb 05                	jmp    c002143e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021439:	b8 01 00 00 00       	mov    eax,0x1
c002143e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021444:	c3                   	ret    
c0021445:	90                   	nop

c0021446 <FAT::rename(char const*, char const*)>:
c0021446:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002144c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021454:	74 0a                	je     c0021460 <FAT::rename(char const*, char const*)+0x1a>
c0021456:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002145e:	75 0a                	jne    c002146a <FAT::rename(char const*, char const*)+0x24>
c0021460:	b8 04 00 00 00       	mov    eax,0x4
c0021465:	e9 98 00 00 00       	jmp    c0021502 <FAT::rename(char const*, char const*)+0xbc>
c002146a:	83 ec 08             	sub    esp,0x8
c002146d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021474:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002147b:	50                   	push   eax
c002147c:	e8 b3 f3 fd ff       	call   c0000834 <strcpy>
c0021481:	83 c4 10             	add    esp,0x10
c0021484:	83 ec 08             	sub    esp,0x8
c0021487:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002148e:	50                   	push   eax
c002148f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021496:	e8 ed fa ff ff       	call   c0020f88 <FAT::fixFilepath(char*)>
c002149b:	83 c4 10             	add    esp,0x10
c002149e:	83 ec 08             	sub    esp,0x8
c00214a1:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214a8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214ac:	50                   	push   eax
c00214ad:	e8 82 f3 fd ff       	call   c0000834 <strcpy>
c00214b2:	83 c4 10             	add    esp,0x10
c00214b5:	83 ec 08             	sub    esp,0x8
c00214b8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214bc:	50                   	push   eax
c00214bd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214c4:	e8 bf fa ff ff       	call   c0020f88 <FAT::fixFilepath(char*)>
c00214c9:	83 c4 10             	add    esp,0x10
c00214cc:	83 ec 08             	sub    esp,0x8
c00214cf:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214d3:	50                   	push   eax
c00214d4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214db:	50                   	push   eax
c00214dc:	e8 a8 53 fe ff       	call   c0006889 <f_rename>
c00214e1:	83 c4 10             	add    esp,0x10
c00214e4:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00214eb:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00214f2:	85 c0                	test   eax,eax
c00214f4:	75 07                	jne    c00214fd <FAT::rename(char const*, char const*)+0xb7>
c00214f6:	b8 00 00 00 00       	mov    eax,0x0
c00214fb:	eb 05                	jmp    c0021502 <FAT::rename(char const*, char const*)+0xbc>
c00214fd:	b8 01 00 00 00       	mov    eax,0x1
c0021502:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021508:	c3                   	ret    
c0021509:	90                   	nop

c002150a <FAT::mkdir(char const*)>:
c002150a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021510:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021518:	75 07                	jne    c0021521 <FAT::mkdir(char const*)+0x17>
c002151a:	b8 04 00 00 00       	mov    eax,0x4
c002151f:	eb 5c                	jmp    c002157d <FAT::mkdir(char const*)+0x73>
c0021521:	83 ec 08             	sub    esp,0x8
c0021524:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002152b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002152f:	50                   	push   eax
c0021530:	e8 ff f2 fd ff       	call   c0000834 <strcpy>
c0021535:	83 c4 10             	add    esp,0x10
c0021538:	83 ec 08             	sub    esp,0x8
c002153b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002153f:	50                   	push   eax
c0021540:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021547:	e8 3c fa ff ff       	call   c0020f88 <FAT::fixFilepath(char*)>
c002154c:	83 c4 10             	add    esp,0x10
c002154f:	83 ec 0c             	sub    esp,0xc
c0021552:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021556:	50                   	push   eax
c0021557:	e8 01 51 fe ff       	call   c000665d <f_mkdir>
c002155c:	83 c4 10             	add    esp,0x10
c002155f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021566:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002156d:	85 c0                	test   eax,eax
c002156f:	75 07                	jne    c0021578 <FAT::mkdir(char const*)+0x6e>
c0021571:	b8 00 00 00 00       	mov    eax,0x0
c0021576:	eb 05                	jmp    c002157d <FAT::mkdir(char const*)+0x73>
c0021578:	b8 01 00 00 00       	mov    eax,0x1
c002157d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021583:	c3                   	ret    

c0021584 <FAT::exists(char const*)>:
c0021584:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002158a:	83 ec 08             	sub    esp,0x8
c002158d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021594:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021598:	50                   	push   eax
c0021599:	e8 96 f2 fd ff       	call   c0000834 <strcpy>
c002159e:	83 c4 10             	add    esp,0x10
c00215a1:	83 ec 08             	sub    esp,0x8
c00215a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215a8:	50                   	push   eax
c00215a9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215b0:	e8 d3 f9 ff ff       	call   c0020f88 <FAT::fixFilepath(char*)>
c00215b5:	83 c4 10             	add    esp,0x10
c00215b8:	83 ec 08             	sub    esp,0x8
c00215bb:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00215c2:	50                   	push   eax
c00215c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215c7:	50                   	push   eax
c00215c8:	e8 bb 4b fe ff       	call   c0006188 <f_stat>
c00215cd:	83 c4 10             	add    esp,0x10
c00215d0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00215d7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00215de:	85 c0                	test   eax,eax
c00215e0:	75 04                	jne    c00215e6 <FAT::exists(char const*)+0x62>
c00215e2:	b0 01                	mov    al,0x1
c00215e4:	eb 02                	jmp    c00215e8 <FAT::exists(char const*)+0x64>
c00215e6:	b0 00                	mov    al,0x0
c00215e8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00215ee:	c3                   	ret    
c00215ef:	90                   	nop

c00215f0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00215f0:	b8 08 00 00 00       	mov    eax,0x8
c00215f5:	c3                   	ret    

c00215f6 <ISO9660::seek(void*, unsigned long long)>:
c00215f6:	53                   	push   ebx
c00215f7:	b8 04 00 00 00       	mov    eax,0x4
c00215fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021600:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021604:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021608:	85 d2                	test   edx,edx
c002160a:	74 17                	je     c0021623 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002160c:	89 c8                	mov    eax,ecx
c002160e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021611:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021614:	b8 01 00 00 00       	mov    eax,0x1
c0021619:	73 08                	jae    c0021623 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002161b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002161e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021621:	31 c0                	xor    eax,eax
c0021623:	5b                   	pop    ebx
c0021624:	c3                   	ret    
c0021625:	90                   	nop

c0021626 <ISO9660::tell(void*, unsigned long long*)>:
c0021626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002162a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002162e:	85 d2                	test   edx,edx
c0021630:	74 12                	je     c0021644 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021632:	85 c0                	test   eax,eax
c0021634:	74 0e                	je     c0021644 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021636:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021639:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002163c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002163f:	89 10                	mov    DWORD PTR [eax],edx
c0021641:	31 c0                	xor    eax,eax
c0021643:	c3                   	ret    
c0021644:	b8 04 00 00 00       	mov    eax,0x4
c0021649:	c3                   	ret    

c002164a <ISO9660::getName()>:
c002164a:	b8 48 c8 02 c0       	mov    eax,0xc002c848
c002164f:	c3                   	ret    

c0021650 <ISO9660::stat(void*, unsigned long long*)>:
c0021650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021654:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021658:	85 d2                	test   edx,edx
c002165a:	74 12                	je     c002166e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002165c:	85 c0                	test   eax,eax
c002165e:	74 0e                	je     c002166e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021660:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021663:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021666:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021669:	89 10                	mov    DWORD PTR [eax],edx
c002166b:	31 c0                	xor    eax,eax
c002166d:	c3                   	ret    
c002166e:	b8 04 00 00 00       	mov    eax,0x4
c0021673:	c3                   	ret    

c0021674 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021674:	b8 01 00 00 00       	mov    eax,0x1
c0021679:	c3                   	ret    

c002167a <ISO9660::unlink(char const*)>:
c002167a:	b8 01 00 00 00       	mov    eax,0x1
c002167f:	c3                   	ret    

c0021680 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021680:	b8 01 00 00 00       	mov    eax,0x1
c0021685:	c3                   	ret    

c0021686 <ISO9660::rename(char const*, char const*)>:
c0021686:	b8 01 00 00 00       	mov    eax,0x1
c002168b:	c3                   	ret    

c002168c <ISO9660::mkdir(char const*)>:
c002168c:	b8 01 00 00 00       	mov    eax,0x1
c0021691:	c3                   	ret    

c0021692 <ISO9660::close(void*)>:
c0021692:	83 ec 0c             	sub    esp,0xc
c0021695:	b8 04 00 00 00       	mov    eax,0x4
c002169a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002169e:	85 d2                	test   edx,edx
c00216a0:	74 0e                	je     c00216b0 <ISO9660::close(void*)+0x1e>
c00216a2:	83 ec 0c             	sub    esp,0xc
c00216a5:	52                   	push   edx
c00216a6:	e8 a5 e1 fe ff       	call   c000f850 <free>
c00216ab:	83 c4 10             	add    esp,0x10
c00216ae:	31 c0                	xor    eax,eax
c00216b0:	83 c4 0c             	add    esp,0xc
c00216b3:	c3                   	ret    

c00216b4 <ISO9660::closeDir(void*)>:
c00216b4:	83 ec 0c             	sub    esp,0xc
c00216b7:	b8 04 00 00 00       	mov    eax,0x4
c00216bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216c0:	85 d2                	test   edx,edx
c00216c2:	74 0e                	je     c00216d2 <ISO9660::closeDir(void*)+0x1e>
c00216c4:	83 ec 0c             	sub    esp,0xc
c00216c7:	52                   	push   edx
c00216c8:	e8 83 e1 fe ff       	call   c000f850 <free>
c00216cd:	83 c4 10             	add    esp,0x10
c00216d0:	31 c0                	xor    eax,eax
c00216d2:	83 c4 0c             	add    esp,0xc
c00216d5:	c3                   	ret    

c00216d6 <ISO9660::~ISO9660()>:
c00216d6:	83 ec 0c             	sub    esp,0xc
c00216d9:	ba ac c8 02 c0       	mov    edx,0xc002c8ac
c00216de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216e2:	89 10                	mov    DWORD PTR [eax],edx
c00216e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216e8:	83 ec 0c             	sub    esp,0xc
c00216eb:	50                   	push   eax
c00216ec:	e8 7d 1b ff ff       	call   c001326e <Filesystem::~Filesystem()>
c00216f1:	83 c4 10             	add    esp,0x10
c00216f4:	90                   	nop
c00216f5:	83 c4 0c             	add    esp,0xc
c00216f8:	c3                   	ret    
c00216f9:	90                   	nop

c00216fa <ISO9660::~ISO9660()>:
c00216fa:	83 ec 0c             	sub    esp,0xc
c00216fd:	83 ec 0c             	sub    esp,0xc
c0021700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021704:	e8 cd ff ff ff       	call   c00216d6 <ISO9660::~ISO9660()>
c0021709:	83 c4 10             	add    esp,0x10
c002170c:	83 ec 08             	sub    esp,0x8
c002170f:	6a 08                	push   0x8
c0021711:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021715:	e8 4c 17 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c002171a:	83 c4 10             	add    esp,0x10
c002171d:	83 c4 0c             	add    esp,0xc
c0021720:	c3                   	ret    

c0021721 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021721:	55                   	push   ebp
c0021722:	31 c9                	xor    ecx,ecx
c0021724:	57                   	push   edi
c0021725:	56                   	push   esi
c0021726:	53                   	push   ebx
c0021727:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002172b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002172f:	89 eb                	mov    ebx,ebp
c0021731:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021735:	39 ce                	cmp    esi,ecx
c0021737:	7e 17                	jle    c0021750 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021739:	31 d2                	xor    edx,edx
c002173b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002173f:	7d 13                	jge    c0021754 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021741:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021745:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021748:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002174b:	75 0d                	jne    c002175a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002174d:	42                   	inc    edx
c002174e:	eb eb                	jmp    c002173b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021750:	31 c0                	xor    eax,eax
c0021752:	eb 0a                	jmp    c002175e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021754:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021758:	eb 04                	jmp    c002175e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002175a:	41                   	inc    ecx
c002175b:	43                   	inc    ebx
c002175c:	eb d7                	jmp    c0021735 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002175e:	5b                   	pop    ebx
c002175f:	5e                   	pop    esi
c0021760:	5f                   	pop    edi
c0021761:	5d                   	pop    ebp
c0021762:	c3                   	ret    

c0021763 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021763:	56                   	push   esi
c0021764:	53                   	push   ebx
c0021765:	52                   	push   edx
c0021766:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002176a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002176e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021772:	39 0d e0 1a 03 c0    	cmp    DWORD PTR ds:0xc0031ae0,ecx
c0021778:	75 08                	jne    c0021782 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002177a:	38 05 14 d9 02 c0    	cmp    BYTE PTR ds:0xc002d914,al
c0021780:	74 2b                	je     c00217ad <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021782:	83 ec 0c             	sub    esp,0xc
c0021785:	a2 14 d9 02 c0       	mov    ds:0xc002d914,al
c002178a:	68 00 1b 03 c0       	push   0xc0031b00
c002178f:	0f be c0             	movsx  eax,al
c0021792:	6a 01                	push   0x1
c0021794:	89 0d e0 1a 03 c0    	mov    DWORD PTR ds:0xc0031ae0,ecx
c002179a:	31 db                	xor    ebx,ebx
c002179c:	53                   	push   ebx
c002179d:	51                   	push   ecx
c002179e:	ff 34 85 bc e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1744]
c00217a5:	e8 ac 4f ff ff       	call   c0016756 <LogicalDisk::read(unsigned long long, int, void*)>
c00217aa:	83 c4 20             	add    esp,0x20
c00217ad:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00217b5:	c7 44 24 14 00 1b 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031b00
c00217bd:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00217c1:	58                   	pop    eax
c00217c2:	5b                   	pop    ebx
c00217c3:	5e                   	pop    esi
c00217c4:	e9 7b ef fd ff       	jmp    c0000744 <memcpy>
c00217c9:	90                   	nop

c00217ca <ISO9660::tryMount(LogicalDisk*, int)>:
c00217ca:	81 ec 10 08 00 00    	sub    esp,0x810
c00217d0:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00217d7:	83 c0 41             	add    eax,0x41
c00217da:	0f be c0             	movsx  eax,al
c00217dd:	50                   	push   eax
c00217de:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217e2:	50                   	push   eax
c00217e3:	6a 10                	push   0x10
c00217e5:	e8 79 ff ff ff       	call   c0021763 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217ea:	83 c4 10             	add    esp,0x10
c00217ed:	31 c0                	xor    eax,eax
c00217ef:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00217f4:	75 1d                	jne    c0021813 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217f6:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00217fb:	75 16                	jne    c0021813 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217fd:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021802:	75 0f                	jne    c0021813 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021804:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021809:	75 08                	jne    c0021813 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002180b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021810:	0f 94 c0             	sete   al
c0021813:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021819:	c3                   	ret    

c002181a <ISO9660::read(void*, unsigned long, void*, int*)>:
c002181a:	55                   	push   ebp
c002181b:	57                   	push   edi
c002181c:	56                   	push   esi
c002181d:	53                   	push   ebx
c002181e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021824:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002182b:	85 ed                	test   ebp,ebp
c002182d:	0f 84 d6 01 00 00    	je     c0021a09 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021833:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002183b:	0f 84 c8 01 00 00    	je     c0021a09 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021841:	b8 01 00 00 00       	mov    eax,0x1
c0021846:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002184a:	0f 85 be 01 00 00    	jne    c0021a0e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021850:	31 d2                	xor    edx,edx
c0021852:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021859:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002185c:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c002185f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021863:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021866:	89 04 24             	mov    DWORD PTR [esp],eax
c0021869:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002186d:	01 f0                	add    eax,esi
c002186f:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021872:	11 fa                	adc    edx,edi
c0021874:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021878:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002187c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021880:	19 d1                	sbb    ecx,edx
c0021882:	72 0a                	jb     c002188e <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021884:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021888:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002188c:	eb 13                	jmp    c00218a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002188e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021892:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021896:	29 f0                	sub    eax,esi
c0021898:	19 fa                	sbb    edx,edi
c002189a:	89 04 24             	mov    DWORD PTR [esp],eax
c002189d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218a4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00218a7:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218ab:	51                   	push   ecx
c00218ac:	c1 e0 0b             	shl    eax,0xb
c00218af:	01 c6                	add    esi,eax
c00218b1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218b5:	11 d7                	adc    edi,edx
c00218b7:	50                   	push   eax
c00218b8:	89 fa                	mov    edx,edi
c00218ba:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00218be:	89 f0                	mov    eax,esi
c00218c0:	53                   	push   ebx
c00218c1:	0f ac d0 0b          	shrd   eax,edx,0xb
c00218c5:	50                   	push   eax
c00218c6:	e8 98 fe ff ff       	call   c0021763 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218cf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00218d2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00218d6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00218dc:	83 c4 10             	add    esp,0x10
c00218df:	b8 00 08 00 00       	mov    eax,0x800
c00218e4:	29 d0                	sub    eax,edx
c00218e6:	39 c1                	cmp    ecx,eax
c00218e8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00218ec:	83 d9 00             	sbb    ecx,0x0
c00218ef:	7d 1c                	jge    c002190d <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00218f1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00218f6:	75 12                	jne    c002190a <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00218f8:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021905:	e9 fb 00 00 00       	jmp    c0021a05 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c002190a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002190d:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021910:	31 d2                	xor    edx,edx
c0021912:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021916:	39 c2                	cmp    edx,eax
c0021918:	7d 14                	jge    c002192e <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c002191a:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021921:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021925:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021928:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002192b:	42                   	inc    edx
c002192c:	eb e8                	jmp    c0021916 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c002192e:	89 c3                	mov    ebx,eax
c0021930:	85 c0                	test   eax,eax
c0021932:	79 02                	jns    c0021936 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021934:	31 db                	xor    ebx,ebx
c0021936:	99                   	cdq    
c0021937:	01 c3                	add    ebx,eax
c0021939:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021940:	01 c6                	add    esi,eax
c0021942:	11 d7                	adc    edi,edx
c0021944:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021948:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002194c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002194f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021953:	29 c6                	sub    esi,eax
c0021955:	19 d7                	sbb    edi,edx
c0021957:	89 34 24             	mov    DWORD PTR [esp],esi
c002195a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002195e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021963:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021966:	b8 00 00 00 00       	mov    eax,0x0
c002196b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002196f:	7d 3e                	jge    c00219af <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021971:	52                   	push   edx
c0021972:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021976:	50                   	push   eax
c0021977:	53                   	push   ebx
c0021978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002197c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021980:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021984:	50                   	push   eax
c0021985:	e8 d9 fd ff ff       	call   c0021763 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002198a:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021992:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021997:	81 c3 00 08 00 00    	add    ebx,0x800
c002199d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00219a5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219aa:	83 c4 10             	add    esp,0x10
c00219ad:	eb af                	jmp    c002195e <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00219af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219b3:	0b 04 24             	or     eax,DWORD PTR [esp]
c00219b6:	74 32                	je     c00219ea <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00219b8:	50                   	push   eax
c00219b9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219bd:	50                   	push   eax
c00219be:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219c2:	50                   	push   eax
c00219c3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00219c7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00219cb:	0f ac fe 0b          	shrd   esi,edi,0xb
c00219cf:	56                   	push   esi
c00219d0:	e8 8e fd ff ff       	call   c0021763 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219d5:	83 c4 0c             	add    esp,0xc
c00219d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00219dc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219e0:	50                   	push   eax
c00219e1:	53                   	push   ebx
c00219e2:	e8 5d ed fd ff       	call   c0000744 <memcpy>
c00219e7:	83 c4 10             	add    esp,0x10
c00219ea:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00219f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219f9:	89 38                	mov    DWORD PTR [eax],edi
c00219fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219ff:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a02:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a05:	31 c0                	xor    eax,eax
c0021a07:	eb 05                	jmp    c0021a0e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a09:	b8 04 00 00 00       	mov    eax,0x4
c0021a0e:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a14:	5b                   	pop    ebx
c0021a15:	5e                   	pop    esi
c0021a16:	5f                   	pop    edi
c0021a17:	5d                   	pop    ebp
c0021a18:	c3                   	ret    
c0021a19:	90                   	nop

c0021a1a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a1a:	55                   	push   ebp
c0021a1b:	57                   	push   edi
c0021a1c:	56                   	push   esi
c0021a1d:	53                   	push   ebx
c0021a1e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a24:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a2b:	85 f6                	test   esi,esi
c0021a2d:	0f 84 64 02 00 00    	je     c0021c97 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a33:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a3b:	0f 84 56 02 00 00    	je     c0021c97 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a41:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a44:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a47:	75 0a                	jne    c0021a53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a49:	b8 07 00 00 00       	mov    eax,0x7
c0021a4e:	e9 49 02 00 00       	jmp    c0021c9c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a53:	50                   	push   eax
c0021a54:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a58:	50                   	push   eax
c0021a59:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a60:	53                   	push   ebx
c0021a61:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a63:	c1 e0 0b             	shl    eax,0xb
c0021a66:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021a69:	c1 e8 0b             	shr    eax,0xb
c0021a6c:	50                   	push   eax
c0021a6d:	e8 f1 fc ff ff       	call   c0021763 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a72:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a75:	83 c4 10             	add    esp,0x10
c0021a78:	89 c1                	mov    ecx,eax
c0021a7a:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021a7d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a83:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a86:	84 db                	test   bl,bl
c0021a88:	0f 85 90 00 00 00    	jne    c0021b1e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021a8e:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021a94:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021a9a:	29 c7                	sub    edi,eax
c0021a9c:	89 fb                	mov    ebx,edi
c0021a9e:	c1 fb 1f             	sar    ebx,0x1f
c0021aa1:	01 f8                	add    eax,edi
c0021aa3:	11 da                	adc    edx,ebx
c0021aa5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021aa9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021aad:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021ab0:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021ab3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021ab6:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0021abc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021ac0:	89 d8                	mov    eax,ebx
c0021ac2:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021ac5:	ba 00 00 00 00       	mov    edx,0x0
c0021aca:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ace:	b8 00 00 00 00       	mov    eax,0x0
c0021ad3:	73 0b                	jae    c0021ae0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021ad5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021ad8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021adc:	29 f8                	sub    eax,edi
c0021ade:	19 da                	sbb    edx,ebx
c0021ae0:	89 d3                	mov    ebx,edx
c0021ae2:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021ae5:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021ae8:	09 c3                	or     ebx,eax
c0021aea:	0f 84 59 ff ff ff    	je     c0021a49 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021af0:	55                   	push   ebp
c0021af1:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021af5:	50                   	push   eax
c0021af6:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021afd:	53                   	push   ebx
c0021afe:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b00:	c1 e0 0b             	shl    eax,0xb
c0021b03:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b07:	c1 e8 0b             	shr    eax,0xb
c0021b0a:	50                   	push   eax
c0021b0b:	e8 53 fc ff ff       	call   c0021763 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b10:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b13:	83 c4 10             	add    esp,0x10
c0021b16:	25 ff 07 00 00       	and    eax,0x7ff
c0021b1b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b1e:	57                   	push   edi
c0021b1f:	6a 28                	push   0x28
c0021b21:	6a 00                	push   0x0
c0021b23:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b27:	50                   	push   eax
c0021b28:	e8 4b ec fd ff       	call   c0000778 <memset>
c0021b2d:	31 d2                	xor    edx,edx
c0021b2f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b32:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b38:	89 f8                	mov    eax,edi
c0021b3a:	83 c0 21             	add    eax,0x21
c0021b3d:	83 d2 00             	adc    edx,0x0
c0021b40:	89 c7                	mov    edi,eax
c0021b42:	89 d5                	mov    ebp,edx
c0021b44:	83 c4 10             	add    esp,0x10
c0021b47:	31 c9                	xor    ecx,ecx
c0021b49:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b50:	83 f9 28             	cmp    ecx,0x28
c0021b53:	88 04 24             	mov    BYTE PTR [esp],al
c0021b56:	0f 94 c2             	sete   dl
c0021b59:	88 d0                	mov    al,dl
c0021b5b:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b60:	39 fa                	cmp    edx,edi
c0021b62:	ba 00 00 00 00       	mov    edx,0x0
c0021b67:	19 ea                	sbb    edx,ebp
c0021b69:	0f 92 c2             	setb   dl
c0021b6c:	09 c2                	or     edx,eax
c0021b6e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b72:	0f 94 c0             	sete   al
c0021b75:	08 d0                	or     al,dl
c0021b77:	75 16                	jne    c0021b8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b79:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b7d:	74 10                	je     c0021b8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b7f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b82:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b86:	41                   	inc    ecx
c0021b87:	83 c7 01             	add    edi,0x1
c0021b8a:	83 d5 00             	adc    ebp,0x0
c0021b8d:	eb ba                	jmp    c0021b49 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021b8f:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021b96:	83 ec 0c             	sub    esp,0xc
c0021b99:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021b9d:	57                   	push   edi
c0021b9e:	e8 f1 eb fd ff       	call   c0000794 <strlen>
c0021ba3:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021bab:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021baf:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021bb6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021bb9:	5a                   	pop    edx
c0021bba:	25 ff 07 00 00       	and    eax,0x7ff
c0021bbf:	01 c8                	add    eax,ecx
c0021bc1:	59                   	pop    ecx
c0021bc2:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021bc8:	83 e0 02             	and    eax,0x2
c0021bcb:	3c 01                	cmp    al,0x1
c0021bcd:	19 c0                	sbb    eax,eax
c0021bcf:	83 c0 02             	add    eax,0x2
c0021bd2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bd6:	57                   	push   edi
c0021bd7:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021bdb:	50                   	push   eax
c0021bdc:	e8 53 ec fd ff       	call   c0000834 <strcpy>
c0021be1:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021be5:	83 c4 10             	add    esp,0x10
c0021be8:	84 c0                	test   al,al
c0021bea:	75 21                	jne    c0021c0d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021bec:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021bf4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021bfc:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c04:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c0b:	eb 28                	jmp    c0021c35 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c0d:	fe c8                	dec    al
c0021c0f:	75 24                	jne    c0021c35 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c11:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c19:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c21:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c29:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c30:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c35:	0f b6 fb             	movzx  edi,bl
c0021c38:	31 db                	xor    ebx,ebx
c0021c3a:	50                   	push   eax
c0021c3b:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c42:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c46:	50                   	push   eax
c0021c47:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c4e:	e8 f1 ea fd ff       	call   c0000744 <memcpy>
c0021c53:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c5a:	89 f9                	mov    ecx,edi
c0021c5c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c62:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c65:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c68:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021c6b:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c6e:	83 c4 10             	add    esp,0x10
c0021c71:	39 c7                	cmp    edi,eax
c0021c73:	89 df                	mov    edi,ebx
c0021c75:	19 d7                	sbb    edi,edx
c0021c77:	72 10                	jb     c0021c89 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c79:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021c80:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021c87:	eb 0a                	jmp    c0021c93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021c89:	29 c8                	sub    eax,ecx
c0021c8b:	19 da                	sbb    edx,ebx
c0021c8d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021c90:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021c93:	31 c0                	xor    eax,eax
c0021c95:	eb 05                	jmp    c0021c9c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021c97:	b8 04 00 00 00       	mov    eax,0x4
c0021c9c:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021ca2:	5b                   	pop    ebx
c0021ca3:	5e                   	pop    esi
c0021ca4:	5f                   	pop    edi
c0021ca5:	5d                   	pop    ebp
c0021ca6:	c3                   	ret    

c0021ca7 <readRoot(unsigned int*, unsigned int*, char)>:
c0021ca7:	81 ec 40 08 00 00    	sub    esp,0x840
c0021cad:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021cb5:	50                   	push   eax
c0021cb6:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021cba:	50                   	push   eax
c0021cbb:	6a 10                	push   0x10
c0021cbd:	e8 a1 fa ff ff       	call   c0021763 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cc2:	83 c4 0c             	add    esp,0xc
c0021cc5:	6a 22                	push   0x22
c0021cc7:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021cce:	50                   	push   eax
c0021ccf:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021cd3:	50                   	push   eax
c0021cd4:	e8 6b ea fd ff       	call   c0000744 <memcpy>
c0021cd9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021ce0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021ce4:	89 10                	mov    DWORD PTR [eax],edx
c0021ce6:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021ced:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021cf1:	89 10                	mov    DWORD PTR [eax],edx
c0021cf3:	b0 01                	mov    al,0x1
c0021cf5:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021cfb:	c3                   	ret    

c0021cfc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021cfc:	55                   	push   ebp
c0021cfd:	57                   	push   edi
c0021cfe:	56                   	push   esi
c0021cff:	53                   	push   ebx
c0021d00:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d06:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d0d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d18:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d1c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d20:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d24:	75 03                	jne    c0021d29 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d26:	83 c3 02             	add    ebx,0x2
c0021d29:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d2c:	75 03                	jne    c0021d31 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d2e:	43                   	inc    ebx
c0021d2f:	eb f8                	jmp    c0021d29 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d31:	51                   	push   ecx
c0021d32:	68 00 01 00 00       	push   0x100
c0021d37:	6a 00                	push   0x0
c0021d39:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d3d:	50                   	push   eax
c0021d3e:	e8 35 ea fd ff       	call   c0000778 <memset>
c0021d43:	83 c4 10             	add    esp,0x10
c0021d46:	31 d2                	xor    edx,edx
c0021d48:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d4b:	84 c0                	test   al,al
c0021d4d:	74 21                	je     c0021d70 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d4f:	3c 2f                	cmp    al,0x2f
c0021d51:	75 0b                	jne    c0021d5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d53:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d57:	bd 01 00 00 00       	mov    ebp,0x1
c0021d5c:	eb 14                	jmp    c0021d72 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d5e:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d61:	80 f9 19             	cmp    cl,0x19
c0021d64:	77 03                	ja     c0021d69 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d66:	83 e8 20             	sub    eax,0x20
c0021d69:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d6d:	42                   	inc    edx
c0021d6e:	eb d8                	jmp    c0021d48 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d70:	31 ed                	xor    ebp,ebp
c0021d72:	83 ec 0c             	sub    esp,0xc
c0021d75:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d7c:	e8 bf da fe ff       	call   c000f840 <malloc>
c0021d81:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021d88:	89 c6                	mov    esi,eax
c0021d8a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021d90:	c1 ef 0b             	shr    edi,0xb
c0021d93:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021d9a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021d9e:	83 c4 10             	add    esp,0x10
c0021da1:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021da6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021daa:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021db1:	74 28                	je     c0021ddb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021db3:	52                   	push   edx
c0021db4:	57                   	push   edi
c0021db5:	50                   	push   eax
c0021db6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021dba:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021dc1:	e8 9d f9 ff ff       	call   c0021763 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021dca:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021dd1:	05 00 08 00 00       	add    eax,0x800
c0021dd6:	83 c4 10             	add    esp,0x10
c0021dd9:	eb cb                	jmp    c0021da6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021ddb:	83 ec 0c             	sub    esp,0xc
c0021dde:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021de2:	57                   	push   edi
c0021de3:	e8 ac e9 fd ff       	call   c0000794 <strlen>
c0021de8:	50                   	push   eax
c0021de9:	57                   	push   edi
c0021dea:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021df1:	56                   	push   esi
c0021df2:	e8 2a f9 ff ff       	call   c0021721 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021df7:	83 c4 20             	add    esp,0x20
c0021dfa:	85 c0                	test   eax,eax
c0021dfc:	75 13                	jne    c0021e11 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021dfe:	83 ec 0c             	sub    esp,0xc
c0021e01:	56                   	push   esi
c0021e02:	e8 49 da fe ff       	call   c000f850 <free>
c0021e07:	83 c4 10             	add    esp,0x10
c0021e0a:	31 c0                	xor    eax,eax
c0021e0c:	e9 b3 00 00 00       	jmp    c0021ec4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e11:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e15:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e19:	c1 e7 08             	shl    edi,0x8
c0021e1c:	c1 e2 10             	shl    edx,0x10
c0021e1f:	09 d7                	or     edi,edx
c0021e21:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e25:	09 d7                	or     edi,edx
c0021e27:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e2b:	c1 e2 18             	shl    edx,0x18
c0021e2e:	09 d7                	or     edi,edx
c0021e30:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e34:	89 d1                	mov    ecx,edx
c0021e36:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e3a:	c1 e1 08             	shl    ecx,0x8
c0021e3d:	c1 e2 10             	shl    edx,0x10
c0021e40:	09 ca                	or     edx,ecx
c0021e42:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e46:	09 ca                	or     edx,ecx
c0021e48:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e4c:	c1 e1 18             	shl    ecx,0x18
c0021e4f:	09 ca                	or     edx,ecx
c0021e51:	89 e9                	mov    ecx,ebp
c0021e53:	84 c9                	test   cl,cl
c0021e55:	74 3c                	je     c0021e93 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e57:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e5b:	83 ec 0c             	sub    esp,0xc
c0021e5e:	56                   	push   esi
c0021e5f:	e8 ec d9 fe ff       	call   c000f850 <free>
c0021e64:	83 c4 0c             	add    esp,0xc
c0021e67:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e6e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e73:	50                   	push   eax
c0021e74:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e7b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e86:	52                   	push   edx
c0021e87:	57                   	push   edi
c0021e88:	53                   	push   ebx
c0021e89:	e8 6e fe ff ff       	call   c0021cfc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e8e:	83 c4 20             	add    esp,0x20
c0021e91:	eb 31                	jmp    c0021ec4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e93:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021e96:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021e9d:	d0 e8                	shr    al,1
c0021e9f:	89 3b                	mov    DWORD PTR [ebx],edi
c0021ea1:	83 e0 01             	and    eax,0x1
c0021ea4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021eab:	83 ec 0c             	sub    esp,0xc
c0021eae:	89 13                	mov    DWORD PTR [ebx],edx
c0021eb0:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021eb7:	89 03                	mov    DWORD PTR [ebx],eax
c0021eb9:	56                   	push   esi
c0021eba:	e8 91 d9 fe ff       	call   c000f850 <free>
c0021ebf:	83 c4 10             	add    esp,0x10
c0021ec2:	b0 01                	mov    al,0x1
c0021ec4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021eca:	5b                   	pop    ebx
c0021ecb:	5e                   	pop    esi
c0021ecc:	5f                   	pop    edi
c0021ecd:	5d                   	pop    ebp
c0021ece:	c3                   	ret    

c0021ecf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021ecf:	55                   	push   ebp
c0021ed0:	57                   	push   edi
c0021ed1:	56                   	push   esi
c0021ed2:	53                   	push   ebx
c0021ed3:	83 ec 20             	sub    esp,0x20
c0021ed6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021eda:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021ede:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021ee2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021eea:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021ef2:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021ef7:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021efd:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f03:	57                   	push   edi
c0021f04:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f08:	50                   	push   eax
c0021f09:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f0d:	50                   	push   eax
c0021f0e:	e8 94 fd ff ff       	call   c0021ca7 <readRoot(unsigned int*, unsigned int*, char)>
c0021f13:	5a                   	pop    edx
c0021f14:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f18:	e8 77 e8 fd ff       	call   c0000794 <strlen>
c0021f1d:	83 c4 10             	add    esp,0x10
c0021f20:	83 f8 03             	cmp    eax,0x3
c0021f23:	77 17                	ja     c0021f3c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f29:	89 03                	mov    DWORD PTR [ebx],eax
c0021f2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f2f:	89 06                	mov    DWORD PTR [esi],eax
c0021f31:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f38:	b0 01                	mov    al,0x1
c0021f3a:	eb 19                	jmp    c0021f55 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f3c:	50                   	push   eax
c0021f3d:	55                   	push   ebp
c0021f3e:	57                   	push   edi
c0021f3f:	56                   	push   esi
c0021f40:	53                   	push   ebx
c0021f41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f45:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f49:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f4d:	e8 aa fd ff ff       	call   c0021cfc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f52:	83 c4 20             	add    esp,0x20
c0021f55:	83 c4 1c             	add    esp,0x1c
c0021f58:	5b                   	pop    ebx
c0021f59:	5e                   	pop    esi
c0021f5a:	5f                   	pop    edi
c0021f5b:	5d                   	pop    ebp
c0021f5c:	c3                   	ret    
c0021f5d:	90                   	nop

c0021f5e <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f5e:	57                   	push   edi
c0021f5f:	56                   	push   esi
c0021f60:	53                   	push   ebx
c0021f61:	83 ec 10             	sub    esp,0x10
c0021f64:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f68:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f6c:	85 ff                	test   edi,edi
c0021f6e:	0f 84 9d 00 00 00    	je     c0022011 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f74:	85 f6                	test   esi,esi
c0021f76:	0f 84 95 00 00 00    	je     c0022011 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f7c:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f81:	74 17                	je     c0021f9a <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021f83:	83 ec 0c             	sub    esp,0xc
c0021f86:	68 63 c8 02 c0       	push   0xc002c863
c0021f8b:	e8 b6 0f ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0021f90:	83 c4 10             	add    esp,0x10
c0021f93:	b8 03 00 00 00       	mov    eax,0x3
c0021f98:	eb 7c                	jmp    c0022016 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f9a:	83 ec 0c             	sub    esp,0xc
c0021f9d:	6a 1c                	push   0x1c
c0021f9f:	e8 9c d8 fe ff       	call   c000f840 <malloc>
c0021fa4:	89 07                	mov    DWORD PTR [edi],eax
c0021fa6:	89 c3                	mov    ebx,eax
c0021fa8:	58                   	pop    eax
c0021fa9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fad:	50                   	push   eax
c0021fae:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fb1:	50                   	push   eax
c0021fb2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fb6:	50                   	push   eax
c0021fb7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fbb:	50                   	push   eax
c0021fbc:	56                   	push   esi
c0021fbd:	e8 0d ff ff ff       	call   c0021ecf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fc2:	83 c4 20             	add    esp,0x20
c0021fc5:	84 c0                	test   al,al
c0021fc7:	74 07                	je     c0021fd0 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021fc9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fce:	74 0b                	je     c0021fdb <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021fd0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021fd4:	b8 01 00 00 00       	mov    eax,0x1
c0021fd9:	eb 3b                	jmp    c0022016 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fdf:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021fe3:	89 03                	mov    DWORD PTR [ebx],eax
c0021fe5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021fec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ff0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021ff7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021ffe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022001:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022008:	8a 06                	mov    al,BYTE PTR [esi]
c002200a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002200d:	31 c0                	xor    eax,eax
c002200f:	eb 05                	jmp    c0022016 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022011:	b8 04 00 00 00       	mov    eax,0x4
c0022016:	83 c4 10             	add    esp,0x10
c0022019:	5b                   	pop    ebx
c002201a:	5e                   	pop    esi
c002201b:	5f                   	pop    edi
c002201c:	c3                   	ret    
c002201d:	90                   	nop

c002201e <ISO9660::exists(char const*)>:
c002201e:	83 ec 28             	sub    esp,0x28
c0022021:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022025:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022029:	52                   	push   edx
c002202a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002202d:	52                   	push   edx
c002202e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022032:	52                   	push   edx
c0022033:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022037:	52                   	push   edx
c0022038:	50                   	push   eax
c0022039:	e8 91 fe ff ff       	call   c0021ecf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002203e:	83 c4 3c             	add    esp,0x3c
c0022041:	c3                   	ret    

c0022042 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022042:	56                   	push   esi
c0022043:	53                   	push   ebx
c0022044:	83 ec 14             	sub    esp,0x14
c0022047:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002204b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002204f:	85 db                	test   ebx,ebx
c0022051:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022055:	0f 94 c2             	sete   dl
c0022058:	85 f6                	test   esi,esi
c002205a:	0f 94 c0             	sete   al
c002205d:	08 c2                	or     dl,al
c002205f:	75 68                	jne    c00220c9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022061:	85 c9                	test   ecx,ecx
c0022063:	74 64                	je     c00220c9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022065:	83 ec 0c             	sub    esp,0xc
c0022068:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002206b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002206f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022075:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002207c:	50                   	push   eax
c002207d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022080:	50                   	push   eax
c0022081:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022085:	50                   	push   eax
c0022086:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002208a:	50                   	push   eax
c002208b:	51                   	push   ecx
c002208c:	e8 3e fe ff ff       	call   c0021ecf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022091:	83 c4 20             	add    esp,0x20
c0022094:	ba 01 00 00 00       	mov    edx,0x1
c0022099:	84 c0                	test   al,al
c002209b:	74 31                	je     c00220ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002209d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220a1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220a8:	89 03                	mov    DWORD PTR [ebx],eax
c00220aa:	ba 00 00 00 00       	mov    edx,0x0
c00220af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220b3:	85 c0                	test   eax,eax
c00220b5:	0f 95 06             	setne  BYTE PTR [esi]
c00220b8:	74 14                	je     c00220ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220ba:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220c0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220c7:	eb 05                	jmp    c00220ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220c9:	ba 04 00 00 00       	mov    edx,0x4
c00220ce:	83 c4 14             	add    esp,0x14
c00220d1:	89 d0                	mov    eax,edx
c00220d3:	5b                   	pop    ebx
c00220d4:	5e                   	pop    esi
c00220d5:	c3                   	ret    

c00220d6 <ISO9660::openDir(char const*, void**)>:
c00220d6:	57                   	push   edi
c00220d7:	56                   	push   esi
c00220d8:	53                   	push   ebx
c00220d9:	83 ec 10             	sub    esp,0x10
c00220dc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220e0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220e4:	85 ff                	test   edi,edi
c00220e6:	0f 84 95 00 00 00    	je     c0022181 <ISO9660::openDir(char const*, void**)+0xab>
c00220ec:	85 f6                	test   esi,esi
c00220ee:	0f 84 8d 00 00 00    	je     c0022181 <ISO9660::openDir(char const*, void**)+0xab>
c00220f4:	83 ec 0c             	sub    esp,0xc
c00220f7:	6a 1c                	push   0x1c
c00220f9:	e8 42 d7 fe ff       	call   c000f840 <malloc>
c00220fe:	89 07                	mov    DWORD PTR [edi],eax
c0022100:	89 c3                	mov    ebx,eax
c0022102:	59                   	pop    ecx
c0022103:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022107:	50                   	push   eax
c0022108:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002210b:	50                   	push   eax
c002210c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022110:	50                   	push   eax
c0022111:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022115:	50                   	push   eax
c0022116:	56                   	push   esi
c0022117:	e8 b3 fd ff ff       	call   c0021ecf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002211c:	83 c4 20             	add    esp,0x20
c002211f:	84 c0                	test   al,al
c0022121:	74 07                	je     c002212a <ISO9660::openDir(char const*, void**)+0x54>
c0022123:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022128:	75 21                	jne    c002214b <ISO9660::openDir(char const*, void**)+0x75>
c002212a:	0f b6 c0             	movzx  eax,al
c002212d:	52                   	push   edx
c002212e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022132:	50                   	push   eax
c0022133:	68 89 c8 02 c0       	push   0xc002c889
c0022138:	e8 09 0e ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c002213d:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022141:	83 c4 10             	add    esp,0x10
c0022144:	b8 01 00 00 00       	mov    eax,0x1
c0022149:	eb 3b                	jmp    c0022186 <ISO9660::openDir(char const*, void**)+0xb0>
c002214b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002214f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022153:	89 03                	mov    DWORD PTR [ebx],eax
c0022155:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002215c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022160:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022167:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002216e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022171:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022178:	8a 06                	mov    al,BYTE PTR [esi]
c002217a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002217d:	31 c0                	xor    eax,eax
c002217f:	eb 05                	jmp    c0022186 <ISO9660::openDir(char const*, void**)+0xb0>
c0022181:	b8 04 00 00 00       	mov    eax,0x4
c0022186:	83 c4 10             	add    esp,0x10
c0022189:	5b                   	pop    ebx
c002218a:	5e                   	pop    esi
c002218b:	5f                   	pop    edi
c002218c:	c3                   	ret    
c002218d:	90                   	nop

c002218e <ISO9660::ISO9660()>:
c002218e:	83 ec 0c             	sub    esp,0xc
c0022191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022195:	83 ec 0c             	sub    esp,0xc
c0022198:	50                   	push   eax
c0022199:	e8 ac 10 ff ff       	call   c001324a <Filesystem::Filesystem()>
c002219e:	83 c4 10             	add    esp,0x10
c00221a1:	ba ac c8 02 c0       	mov    edx,0xc002c8ac
c00221a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221aa:	89 10                	mov    DWORD PTR [eax],edx
c00221ac:	90                   	nop
c00221ad:	83 c4 0c             	add    esp,0xc
c00221b0:	c3                   	ret    
c00221b1:	90                   	nop

c00221b2 <SoundChannel::~SoundChannel()>:
c00221b2:	83 ec 0c             	sub    esp,0xc
c00221b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00221bc:	83 ec 0c             	sub    esp,0xc
c00221bf:	50                   	push   eax
c00221c0:	e8 8b d6 fe ff       	call   c000f850 <free>
c00221c5:	83 c4 10             	add    esp,0x10
c00221c8:	90                   	nop
c00221c9:	83 c4 0c             	add    esp,0xc
c00221cc:	c3                   	ret    
c00221cd:	90                   	nop

c00221ce <SoundChannel::setSpeed(float)>:
c00221ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00221d6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00221d9:	c3                   	ret    

c00221da <SoundChannel::getSpeed()>:
c00221da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221de:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00221e1:	c3                   	ret    

c00221e2 <SoundChannel::setVolume(int)>:
c00221e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221e6:	83 f8 64             	cmp    eax,0x64
c00221e9:	7e 05                	jle    c00221f0 <SoundChannel::setVolume(int)+0xe>
c00221eb:	b8 64 00 00 00       	mov    eax,0x64
c00221f0:	85 c0                	test   eax,eax
c00221f2:	79 02                	jns    c00221f6 <SoundChannel::setVolume(int)+0x14>
c00221f4:	31 c0                	xor    eax,eax
c00221f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00221fa:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00221fd:	c3                   	ret    

c00221fe <SoundChannel::getVolume()>:
c00221fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022202:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022205:	c3                   	ret    

c0022206 <SoundChannel::pause()>:
c0022206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002220a:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002220e:	c3                   	ret    
c002220f:	90                   	nop

c0022210 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022210:	83 ec 1c             	sub    esp,0x1c
c0022213:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022217:	e8 ea ff ff ff       	call   c0022206 <SoundChannel::pause()>
c002221c:	83 c4 04             	add    esp,0x4
c002221f:	6a 50                	push   0x50
c0022221:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022225:	e8 b8 ff ff ff       	call   c00221e2 <SoundChannel::setVolume(int)>
c002222a:	83 c4 08             	add    esp,0x8
c002222d:	a1 24 c9 02 c0       	mov    eax,ds:0xc002c924
c0022232:	50                   	push   eax
c0022233:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022237:	e8 92 ff ff ff       	call   c00221ce <SoundChannel::setSpeed(float)>
c002223c:	83 c4 08             	add    esp,0x8
c002223f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022243:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022247:	89 10                	mov    DWORD PTR [eax],edx
c0022249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002224d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022251:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022254:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022258:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002225c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002225f:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022264:	75 23                	jne    c0022289 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002226a:	8b 10                	mov    edx,DWORD PTR [eax]
c002226c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022270:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022273:	0f af c2             	imul   eax,edx
c0022276:	85 c0                	test   eax,eax
c0022278:	79 03                	jns    c002227d <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002227a:	83 c0 03             	add    eax,0x3
c002227d:	c1 f8 02             	sar    eax,0x2
c0022280:	05 a0 0f 00 00       	add    eax,0xfa0
c0022285:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022289:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002228d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022291:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022298:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002229f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00222aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ae:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222b1:	c1 e0 02             	shl    eax,0x2
c00222b4:	83 ec 0c             	sub    esp,0xc
c00222b7:	50                   	push   eax
c00222b8:	e8 83 d5 fe ff       	call   c000f840 <malloc>
c00222bd:	83 c4 10             	add    esp,0x10
c00222c0:	89 c2                	mov    edx,eax
c00222c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222c6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00222c9:	83 ec 04             	sub    esp,0x4
c00222cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00222d0:	50                   	push   eax
c00222d1:	6a 01                	push   0x1
c00222d3:	6a 04                	push   0x4
c00222d5:	e8 c5 68 fe ff       	call   c0008b9f <src_new>
c00222da:	83 c4 10             	add    esp,0x10
c00222dd:	89 c2                	mov    edx,eax
c00222df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222e3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00222e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222ea:	85 c0                	test   eax,eax
c00222ec:	74 10                	je     c00222fe <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00222ee:	83 ec 0c             	sub    esp,0xc
c00222f1:	68 08 c9 02 c0       	push   0xc002c908
c00222f6:	e8 ec 82 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c00222fb:	83 c4 10             	add    esp,0x10
c00222fe:	a0 00 27 03 c0       	mov    al,ds:0xc0032700
c0022303:	83 f0 01             	xor    eax,0x1
c0022306:	84 c0                	test   al,al
c0022308:	74 57                	je     c0022361 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002230a:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c002230f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022313:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002231b:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022323:	7f 35                	jg     c002235a <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022325:	83 ec 0c             	sub    esp,0xc
c0022328:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002232c:	e8 96 4f 00 00       	call   c00272c7 <__floatsisf>
c0022331:	83 c4 10             	add    esp,0x10
c0022334:	8b 15 28 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c928
c002233a:	83 ec 08             	sub    esp,0x8
c002233d:	52                   	push   edx
c002233e:	50                   	push   eax
c002233f:	e8 95 4b 00 00       	call   c0026ed9 <__mulsf3>
c0022344:	83 c4 10             	add    esp,0x10
c0022347:	89 c2                	mov    edx,eax
c0022349:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002234d:	89 14 85 00 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd00],edx
c0022354:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022358:	eb c1                	jmp    c002231b <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002235a:	c6 05 00 27 03 c0 01 	mov    BYTE PTR ds:0xc0032700,0x1
c0022361:	90                   	nop
c0022362:	83 c4 1c             	add    esp,0x1c
c0022365:	c3                   	ret    

c0022366 <SoundChannel::play()>:
c0022366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002236a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c002236e:	c3                   	ret    
c002236f:	90                   	nop

c0022370 <SoundChannel::paused()>:
c0022370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022374:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022377:	c3                   	ret    

c0022378 <SoundChannel::getSampleRate()>:
c0022378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002237c:	8b 00                	mov    eax,DWORD PTR [eax]
c002237e:	c3                   	ret    
c002237f:	90                   	nop

c0022380 <SoundChannel::getBits()>:
c0022380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022384:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022387:	c3                   	ret    

c0022388 <SoundChannel::getBufferUsed()>:
c0022388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002238c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002238f:	c3                   	ret    

c0022390 <SoundChannel::getBufferSize()>:
c0022390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022394:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022397:	c3                   	ret    

c0022398 <SoundChannel::unbuffer(float*, int, int)>:
c0022398:	56                   	push   esi
c0022399:	53                   	push   ebx
c002239a:	83 ec 40             	sub    esp,0x40
c002239d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00223a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00223a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00223a8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00223ab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00223af:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00223b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00223b7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00223bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00223bf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00223c3:	e8 ff 4e 00 00       	call   c00272c7 <__floatsisf>
c00223c8:	5a                   	pop    edx
c00223c9:	89 c6                	mov    esi,eax
c00223cb:	ff 33                	push   DWORD PTR [ebx]
c00223cd:	e8 f5 4e 00 00       	call   c00272c7 <__floatsisf>
c00223d2:	59                   	pop    ecx
c00223d3:	5a                   	pop    edx
c00223d4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00223d7:	50                   	push   eax
c00223d8:	e8 fc 4a 00 00       	call   c0026ed9 <__mulsf3>
c00223dd:	59                   	pop    ecx
c00223de:	5a                   	pop    edx
c00223df:	50                   	push   eax
c00223e0:	56                   	push   esi
c00223e1:	e8 b6 4c 00 00       	call   c002709c <__divsf3>
c00223e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00223e9:	e8 a9 61 00 00       	call   c0028597 <__extendsfdf2>
c00223ee:	59                   	pop    ecx
c00223ef:	5e                   	pop    esi
c00223f0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00223f4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00223f8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022400:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022404:	50                   	push   eax
c0022405:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022408:	e8 87 63 fe ff       	call   c0008794 <src_process>
c002240d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022411:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022414:	83 c4 0c             	add    esp,0xc
c0022417:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002241a:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002241d:	29 d0                	sub    eax,edx
c002241f:	c1 e0 02             	shl    eax,0x2
c0022422:	50                   	push   eax
c0022423:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022426:	50                   	push   eax
c0022427:	51                   	push   ecx
c0022428:	e8 4f e2 fd ff       	call   c000067c <memmove>
c002242d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022431:	83 c4 44             	add    esp,0x44
c0022434:	5b                   	pop    ebx
c0022435:	5e                   	pop    esi
c0022436:	c3                   	ret    
c0022437:	90                   	nop

c0022438 <SoundChannel::buffer8(unsigned char*, int)>:
c0022438:	55                   	push   ebp
c0022439:	57                   	push   edi
c002243a:	56                   	push   esi
c002243b:	53                   	push   ebx
c002243c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022440:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022444:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022447:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002244b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002244e:	74 7a                	je     c00224ca <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022450:	85 ff                	test   edi,edi
c0022452:	7e 76                	jle    c00224ca <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022454:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022458:	8d 70 01             	lea    esi,[eax+0x1]
c002245b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002245e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022461:	8b 1c 9d 00 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdd00]
c0022468:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002246b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002246e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022471:	74 5e                	je     c00224d1 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022473:	83 ff 01             	cmp    edi,0x1
c0022476:	74 4b                	je     c00224c3 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022478:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002247c:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002247f:	8d 70 01             	lea    esi,[eax+0x1]
c0022482:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022485:	8b 1c 9d 00 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdd00]
c002248c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002248f:	b8 02 00 00 00       	mov    eax,0x2
c0022494:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022497:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002249a:	75 23                	jne    c00224bf <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002249c:	eb 27                	jmp    c00224c5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002249e:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00224a3:	8d 71 01             	lea    esi,[ecx+0x1]
c00224a6:	40                   	inc    eax
c00224a7:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224aa:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00224ad:	8b 1c 9d 00 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdd00]
c00224b4:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00224b7:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224ba:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224bd:	74 06                	je     c00224c5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224bf:	39 c7                	cmp    edi,eax
c00224c1:	75 db                	jne    c002249e <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00224c3:	89 f8                	mov    eax,edi
c00224c5:	5b                   	pop    ebx
c00224c6:	5e                   	pop    esi
c00224c7:	5f                   	pop    edi
c00224c8:	5d                   	pop    ebp
c00224c9:	c3                   	ret    
c00224ca:	5b                   	pop    ebx
c00224cb:	31 c0                	xor    eax,eax
c00224cd:	5e                   	pop    esi
c00224ce:	5f                   	pop    edi
c00224cf:	5d                   	pop    ebp
c00224d0:	c3                   	ret    
c00224d1:	b8 01 00 00 00       	mov    eax,0x1
c00224d6:	eb ed                	jmp    c00224c5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00224d8 <SoundDevice::SoundDevice(char const*)>:
c00224d8:	83 ec 1c             	sub    esp,0x1c
c00224db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224df:	83 ec 08             	sub    esp,0x8
c00224e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224e6:	50                   	push   eax
c00224e7:	e8 70 20 ff ff       	call   c001455c <Device::Device(char const*)>
c00224ec:	83 c4 10             	add    esp,0x10
c00224ef:	ba 34 c9 02 c0       	mov    edx,0xc002c934
c00224f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224f8:	89 10                	mov    DWORD PTR [eax],edx
c00224fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224fe:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022508:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002250c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022516:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002251e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022523:	7f 19                	jg     c002253e <SoundDevice::SoundDevice(char const*)+0x66>
c0022525:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002252d:	83 c2 54             	add    edx,0x54
c0022530:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022538:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002253c:	eb e0                	jmp    c002251e <SoundDevice::SoundDevice(char const*)+0x46>
c002253e:	90                   	nop
c002253f:	83 c4 1c             	add    esp,0x1c
c0022542:	c3                   	ret    
c0022543:	90                   	nop

c0022544 <SoundDevice::~SoundDevice()>:
c0022544:	53                   	push   ebx
c0022545:	83 ec 18             	sub    esp,0x18
c0022548:	ba 34 c9 02 c0       	mov    edx,0xc002c934
c002254d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022551:	89 10                	mov    DWORD PTR [eax],edx
c0022553:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002255b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022560:	7f 46                	jg     c00225a8 <SoundDevice::~SoundDevice()+0x64>
c0022562:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022566:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002256a:	83 c2 54             	add    edx,0x54
c002256d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022571:	85 c0                	test   eax,eax
c0022573:	74 2d                	je     c00225a2 <SoundDevice::~SoundDevice()+0x5e>
c0022575:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022579:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002257d:	83 c2 54             	add    edx,0x54
c0022580:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022584:	85 db                	test   ebx,ebx
c0022586:	74 1a                	je     c00225a2 <SoundDevice::~SoundDevice()+0x5e>
c0022588:	83 ec 0c             	sub    esp,0xc
c002258b:	53                   	push   ebx
c002258c:	e8 21 fc ff ff       	call   c00221b2 <SoundChannel::~SoundChannel()>
c0022591:	83 c4 10             	add    esp,0x10
c0022594:	83 ec 08             	sub    esp,0x8
c0022597:	6a 2c                	push   0x2c
c0022599:	53                   	push   ebx
c002259a:	e8 c7 08 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c002259f:	83 c4 10             	add    esp,0x10
c00225a2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225a6:	eb b3                	jmp    c002255b <SoundDevice::~SoundDevice()+0x17>
c00225a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225ac:	83 ec 0c             	sub    esp,0xc
c00225af:	50                   	push   eax
c00225b0:	e8 89 1c ff ff       	call   c001423e <Device::~Device()>
c00225b5:	83 c4 10             	add    esp,0x10
c00225b8:	90                   	nop
c00225b9:	83 c4 18             	add    esp,0x18
c00225bc:	5b                   	pop    ebx
c00225bd:	c3                   	ret    

c00225be <SoundDevice::~SoundDevice()>:
c00225be:	83 ec 0c             	sub    esp,0xc
c00225c1:	83 ec 0c             	sub    esp,0xc
c00225c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225c8:	e8 77 ff ff ff       	call   c0022544 <SoundDevice::~SoundDevice()>
c00225cd:	83 c4 10             	add    esp,0x10
c00225d0:	83 ec 08             	sub    esp,0x8
c00225d3:	68 e4 01 00 00       	push   0x1e4
c00225d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225dc:	e8 85 08 ff ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c00225e1:	83 c4 10             	add    esp,0x10
c00225e4:	83 c4 0c             	add    esp,0xc
c00225e7:	c3                   	ret    

c00225e8 <SoundDevice::getFreeChannelNum()>:
c00225e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00225ec:	31 c0                	xor    eax,eax
c00225ee:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00225f6:	74 09                	je     c0022601 <SoundDevice::getFreeChannelNum()+0x19>
c00225f8:	40                   	inc    eax
c00225f9:	83 f8 20             	cmp    eax,0x20
c00225fc:	75 f0                	jne    c00225ee <SoundDevice::getFreeChannelNum()+0x6>
c00225fe:	83 c8 ff             	or     eax,0xffffffff
c0022601:	c3                   	ret    

c0022602 <SoundDevice::addChannel(SoundChannel*)>:
c0022602:	56                   	push   esi
c0022603:	53                   	push   ebx
c0022604:	51                   	push   ecx
c0022605:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022609:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002260d:	53                   	push   ebx
c002260e:	e8 d5 ff ff ff       	call   c00225e8 <SoundDevice::getFreeChannelNum()>
c0022613:	5a                   	pop    edx
c0022614:	83 f8 ff             	cmp    eax,0xffffffff
c0022617:	74 51                	je     c002266a <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022619:	85 f6                	test   esi,esi
c002261b:	74 4d                	je     c002266a <SoundDevice::addChannel(SoundChannel*)+0x68>
c002261d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022624:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002262b:	75 30                	jne    c002265d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002262d:	83 ec 0c             	sub    esp,0xc
c0022630:	56                   	push   esi
c0022631:	e8 42 fd ff ff       	call   c0022378 <SoundChannel::getSampleRate()>
c0022636:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002263c:	89 34 24             	mov    DWORD PTR [esp],esi
c002263f:	e8 3c fd ff ff       	call   c0022380 <SoundChannel::getBits()>
c0022644:	83 c4 0c             	add    esp,0xc
c0022647:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002264d:	8b 13                	mov    edx,DWORD PTR [ebx]
c002264f:	50                   	push   eax
c0022650:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022656:	53                   	push   ebx
c0022657:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002265a:	83 c4 10             	add    esp,0x10
c002265d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022663:	b8 01 00 00 00       	mov    eax,0x1
c0022668:	eb 03                	jmp    c002266d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002266a:	83 c8 ff             	or     eax,0xffffffff
c002266d:	5a                   	pop    edx
c002266e:	5b                   	pop    ebx
c002266f:	5e                   	pop    esi
c0022670:	c3                   	ret    
c0022671:	90                   	nop

c0022672 <SoundDevice::removeChannel(int)>:
c0022672:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002267a:	83 fa 1f             	cmp    edx,0x1f
c002267d:	77 23                	ja     c00226a2 <SoundDevice::removeChannel(int)+0x30>
c002267f:	8d 14 90             	lea    edx,[eax+edx*4]
c0022682:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022689:	74 17                	je     c00226a2 <SoundDevice::removeChannel(int)+0x30>
c002268b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022695:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002269b:	75 05                	jne    c00226a2 <SoundDevice::removeChannel(int)+0x30>
c002269d:	8b 00                	mov    eax,DWORD PTR [eax]
c002269f:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00226a2:	c3                   	ret    
c00226a3:	90                   	nop

c00226a4 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00226a4:	57                   	push   edi
c00226a5:	56                   	push   esi
c00226a6:	53                   	push   ebx
c00226a7:	31 db                	xor    ebx,ebx
c00226a9:	83 ec 10             	sub    esp,0x10
c00226ac:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226b0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226b4:	0f 8d cb 00 00 00    	jge    c0022785 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00226ba:	83 ec 0c             	sub    esp,0xc
c00226bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226c1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226c4:	e8 ce 5e 00 00       	call   c0028597 <__extendsfdf2>
c00226c9:	83 c4 10             	add    esp,0x10
c00226cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226d4:	68 00 00 f0 3f       	push   0x3ff00000
c00226d9:	6a 00                	push   0x0
c00226db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226e3:	e8 3b 4e 00 00       	call   c0027523 <__adddf3>
c00226e8:	83 c4 10             	add    esp,0x10
c00226eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226f3:	68 00 00 e0 3f       	push   0x3fe00000
c00226f8:	6a 00                	push   0x0
c00226fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022702:	e8 99 54 00 00       	call   c0027ba0 <__muldf3>
c0022707:	83 c4 10             	add    esp,0x10
c002270a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002270e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022712:	68 00 00 60 40       	push   0x40600000
c0022717:	6a 00                	push   0x0
c0022719:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002271d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022721:	e8 7a 54 00 00       	call   c0027ba0 <__muldf3>
c0022726:	59                   	pop    ecx
c0022727:	5f                   	pop    edi
c0022728:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002272c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022730:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022738:	e8 36 5d 00 00       	call   c0028473 <__truncdfsf2>
c002273d:	5a                   	pop    edx
c002273e:	89 c7                	mov    edi,eax
c0022740:	59                   	pop    ecx
c0022741:	68 00 00 fe 42       	push   0x42fe0000
c0022746:	50                   	push   eax
c0022747:	e8 d1 4d 00 00       	call   c002751d <__gesf2>
c002274c:	83 c4 10             	add    esp,0x10
c002274f:	85 c0                	test   eax,eax
c0022751:	78 06                	js     c0022759 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022753:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022757:	eb 26                	jmp    c002277f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022759:	50                   	push   eax
c002275a:	50                   	push   eax
c002275b:	6a 00                	push   0x0
c002275d:	57                   	push   edi
c002275e:	e8 be 4d 00 00       	call   c0027521 <__lesf2>
c0022763:	83 c4 10             	add    esp,0x10
c0022766:	85 c0                	test   eax,eax
c0022768:	7f 06                	jg     c0022770 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002276a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002276e:	eb 0f                	jmp    c002277f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022770:	83 ec 0c             	sub    esp,0xc
c0022773:	57                   	push   edi
c0022774:	e8 b3 5e 00 00       	call   c002862c <lrintf>
c0022779:	83 c4 10             	add    esp,0x10
c002277c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002277f:	43                   	inc    ebx
c0022780:	e9 2b ff ff ff       	jmp    c00226b0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022785:	83 c4 10             	add    esp,0x10
c0022788:	5b                   	pop    ebx
c0022789:	5e                   	pop    esi
c002278a:	5f                   	pop    edi
c002278b:	c3                   	ret    

c002278c <SoundDevice::getAudio(int, float*, float*)>:
c002278c:	55                   	push   ebp
c002278d:	57                   	push   edi
c002278e:	56                   	push   esi
c002278f:	53                   	push   ebx
c0022790:	31 db                	xor    ebx,ebx
c0022792:	83 ec 20             	sub    esp,0x20
c0022795:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022799:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002279d:	c1 e0 02             	shl    eax,0x2
c00227a0:	50                   	push   eax
c00227a1:	6a 00                	push   0x0
c00227a3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00227a7:	e8 cc df fd ff       	call   c0000778 <memset>
c00227ac:	83 c4 10             	add    esp,0x10
c00227af:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00227b3:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00227ba:	85 c0                	test   eax,eax
c00227bc:	0f 84 d7 00 00 00    	je     c0022899 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227c2:	83 ec 0c             	sub    esp,0xc
c00227c5:	50                   	push   eax
c00227c6:	e8 a5 fb ff ff       	call   c0022370 <SoundChannel::paused()>
c00227cb:	83 c4 10             	add    esp,0x10
c00227ce:	84 c0                	test   al,al
c00227d0:	0f 85 c3 00 00 00    	jne    c0022899 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227d6:	83 ec 0c             	sub    esp,0xc
c00227d9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227e0:	e8 19 fa ff ff       	call   c00221fe <SoundChannel::getVolume()>
c00227e5:	83 c4 10             	add    esp,0x10
c00227e8:	85 c0                	test   eax,eax
c00227ea:	0f 84 a9 00 00 00    	je     c0022899 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227f0:	83 ec 0c             	sub    esp,0xc
c00227f3:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227fa:	e8 ff f9 ff ff       	call   c00221fe <SoundChannel::getVolume()>
c00227ff:	83 ec 0c             	sub    esp,0xc
c0022802:	50                   	push   eax
c0022803:	e8 bf 4a 00 00       	call   c00272c7 <__floatsisf>
c0022808:	59                   	pop    ecx
c0022809:	5d                   	pop    ebp
c002280a:	31 ed                	xor    ebp,ebp
c002280c:	68 00 00 c8 42       	push   0x42c80000
c0022811:	50                   	push   eax
c0022812:	e8 85 48 00 00       	call   c002709c <__divsf3>
c0022817:	83 c4 10             	add    esp,0x10
c002281a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002281e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022822:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022828:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002282c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022833:	e8 60 fb ff ff       	call   c0022398 <SoundChannel::unbuffer(float*, int, int)>
c0022838:	83 c4 20             	add    esp,0x20
c002283b:	89 c1                	mov    ecx,eax
c002283d:	39 cd                	cmp    ebp,ecx
c002283f:	7d 52                	jge    c0022893 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022841:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022845:	50                   	push   eax
c0022846:	50                   	push   eax
c0022847:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002284b:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002284e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022852:	e8 82 46 00 00       	call   c0026ed9 <__mulsf3>
c0022857:	5a                   	pop    edx
c0022858:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002285c:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022862:	e8 60 4a 00 00       	call   c00272c7 <__floatsisf>
c0022867:	59                   	pop    ecx
c0022868:	5a                   	pop    edx
c0022869:	50                   	push   eax
c002286a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002286e:	e8 29 48 00 00       	call   c002709c <__divsf3>
c0022873:	59                   	pop    ecx
c0022874:	5a                   	pop    edx
c0022875:	50                   	push   eax
c0022876:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002287a:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002287d:	e8 34 43 00 00       	call   c0026bb6 <__addsf3>
c0022882:	83 c4 10             	add    esp,0x10
c0022885:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022889:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002288d:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022890:	45                   	inc    ebp
c0022891:	eb aa                	jmp    c002283d <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022893:	39 cf                	cmp    edi,ecx
c0022895:	7e 02                	jle    c0022899 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022897:	89 cf                	mov    edi,ecx
c0022899:	43                   	inc    ebx
c002289a:	83 fb 20             	cmp    ebx,0x20
c002289d:	0f 85 10 ff ff ff    	jne    c00227b3 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00228a3:	83 c4 1c             	add    esp,0x1c
c00228a6:	89 f8                	mov    eax,edi
c00228a8:	5b                   	pop    ebx
c00228a9:	5e                   	pop    esi
c00228aa:	5f                   	pop    edi
c00228ab:	5d                   	pop    ebp
c00228ac:	c3                   	ret    
c00228ad:	90                   	nop

c00228ae <PCI::open(int, int, void*)>:
c00228ae:	83 ec 18             	sub    esp,0x18
c00228b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00228b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00228b7:	50                   	push   eax
c00228b8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00228bb:	31 c0                	xor    eax,eax
c00228bd:	83 c4 1c             	add    esp,0x1c
c00228c0:	c3                   	ret    
c00228c1:	90                   	nop

c00228c2 <PCI::close(int, int, void*)>:
c00228c2:	31 c0                	xor    eax,eax
c00228c4:	c3                   	ret    
c00228c5:	90                   	nop

c00228c6 <PCI::PCI()>:
c00228c6:	83 ec 0c             	sub    esp,0xc
c00228c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228cd:	83 ec 08             	sub    esp,0x8
c00228d0:	68 64 c9 02 c0       	push   0xc002c964
c00228d5:	50                   	push   eax
c00228d6:	e8 05 13 ff ff       	call   c0013be0 <Bus::Bus(char const*)>
c00228db:	83 c4 10             	add    esp,0x10
c00228de:	ba d0 c9 02 c0       	mov    edx,0xc002c9d0
c00228e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e7:	89 10                	mov    DWORD PTR [eax],edx
c00228e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228f3:	0f b6 d0             	movzx  edx,al
c00228f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228fa:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022905:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002290b:	0f b6 d0             	movzx  edx,al
c002290e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022912:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002291b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022921:	8d 50 01             	lea    edx,[eax+0x1]
c0022924:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022928:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002292e:	0f b6 d0             	movzx  edx,al
c0022931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022935:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022939:	83 c9 c0             	or     ecx,0xffffffc0
c002293c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022940:	90                   	nop
c0022941:	83 c4 0c             	add    esp,0xc
c0022944:	c3                   	ret    
c0022945:	90                   	nop

c0022946 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022946:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002294a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002294f:	89 ca                	mov    edx,ecx
c0022951:	c1 e0 10             	shl    eax,0x10
c0022954:	81 e2 fc 00 00 00    	and    edx,0xfc
c002295a:	09 d0                	or     eax,edx
c002295c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022961:	c1 e2 08             	shl    edx,0x8
c0022964:	09 d0                	or     eax,edx
c0022966:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002296b:	c1 e2 0b             	shl    edx,0xb
c002296e:	09 d0                	or     eax,edx
c0022970:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022975:	0d 00 00 00 80       	or     eax,0x80000000
c002297a:	ef                   	out    dx,eax
c002297b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022980:	ed                   	in     eax,dx
c0022981:	83 e1 02             	and    ecx,0x2
c0022984:	0f b6 c9             	movzx  ecx,cl
c0022987:	c1 e1 03             	shl    ecx,0x3
c002298a:	d3 e8                	shr    eax,cl
c002298c:	c3                   	ret    
c002298d:	90                   	nop

c002298e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002298e:	6a 00                	push   0x0
c0022990:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022995:	50                   	push   eax
c0022996:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002299b:	50                   	push   eax
c002299c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229a1:	50                   	push   eax
c00229a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229a6:	e8 9b ff ff ff       	call   c0022946 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229ab:	83 c4 14             	add    esp,0x14
c00229ae:	c3                   	ret    
c00229af:	90                   	nop

c00229b0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00229b0:	6a 0e                	push   0xe
c00229b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229b7:	50                   	push   eax
c00229b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229bd:	50                   	push   eax
c00229be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229c3:	50                   	push   eax
c00229c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229c8:	e8 79 ff ff ff       	call   c0022946 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229cd:	83 c4 14             	add    esp,0x14
c00229d0:	0f b6 c0             	movzx  eax,al
c00229d3:	c3                   	ret    

c00229d4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00229d4:	55                   	push   ebp
c00229d5:	57                   	push   edi
c00229d6:	56                   	push   esi
c00229d7:	53                   	push   ebx
c00229d8:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00229dd:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00229e2:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00229e7:	6a 0a                	push   0xa
c00229e9:	56                   	push   esi
c00229ea:	55                   	push   ebp
c00229eb:	57                   	push   edi
c00229ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00229f0:	e8 51 ff ff ff       	call   c0022946 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229f5:	6a 0a                	push   0xa
c00229f7:	89 c3                	mov    ebx,eax
c00229f9:	56                   	push   esi
c00229fa:	0f b6 db             	movzx  ebx,bl
c00229fd:	55                   	push   ebp
c00229fe:	57                   	push   edi
c00229ff:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a03:	e8 3e ff ff ff       	call   c0022946 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a08:	83 c4 28             	add    esp,0x28
c0022a0b:	25 00 ff 00 00       	and    eax,0xff00
c0022a10:	09 d8                	or     eax,ebx
c0022a12:	5b                   	pop    ebx
c0022a13:	5e                   	pop    esi
c0022a14:	5f                   	pop    edi
c0022a15:	5d                   	pop    ebp
c0022a16:	c3                   	ret    
c0022a17:	90                   	nop

c0022a18 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a18:	6a 08                	push   0x8
c0022a1a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a1f:	50                   	push   eax
c0022a20:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a25:	50                   	push   eax
c0022a26:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a2b:	50                   	push   eax
c0022a2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a30:	e8 11 ff ff ff       	call   c0022946 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a35:	83 c4 14             	add    esp,0x14
c0022a38:	0f b6 c4             	movzx  eax,ah
c0022a3b:	c3                   	ret    

c0022a3c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a3c:	6a 08                	push   0x8
c0022a3e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a43:	50                   	push   eax
c0022a44:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a49:	50                   	push   eax
c0022a4a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a4f:	50                   	push   eax
c0022a50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a54:	e8 ed fe ff ff       	call   c0022946 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a59:	83 c4 14             	add    esp,0x14
c0022a5c:	c3                   	ret    
c0022a5d:	90                   	nop

c0022a5e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a5e:	6a 3c                	push   0x3c
c0022a60:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a65:	50                   	push   eax
c0022a66:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a6b:	50                   	push   eax
c0022a6c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a71:	50                   	push   eax
c0022a72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a76:	e8 cb fe ff ff       	call   c0022946 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a7b:	83 c4 14             	add    esp,0x14
c0022a7e:	c3                   	ret    
c0022a7f:	90                   	nop

c0022a80 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022a80:	6a 18                	push   0x18
c0022a82:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a87:	50                   	push   eax
c0022a88:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a8d:	50                   	push   eax
c0022a8e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a93:	50                   	push   eax
c0022a94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a98:	e8 a9 fe ff ff       	call   c0022946 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a9d:	83 c4 14             	add    esp,0x14
c0022aa0:	0f b6 c4             	movzx  eax,ah
c0022aa3:	c3                   	ret    

c0022aa4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022aa4:	55                   	push   ebp
c0022aa5:	57                   	push   edi
c0022aa6:	56                   	push   esi
c0022aa7:	53                   	push   ebx
c0022aa8:	50                   	push   eax
c0022aa9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022aad:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022ab2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022ab7:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022abc:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022ac3:	8d 43 12             	lea    eax,[ebx+0x12]
c0022ac6:	83 c3 10             	add    ebx,0x10
c0022ac9:	0f b6 c0             	movzx  eax,al
c0022acc:	0f b6 db             	movzx  ebx,bl
c0022acf:	50                   	push   eax
c0022ad0:	51                   	push   ecx
c0022ad1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022ad5:	57                   	push   edi
c0022ad6:	55                   	push   ebp
c0022ad7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022adb:	e8 66 fe ff ff       	call   c0022946 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ae0:	53                   	push   ebx
c0022ae1:	89 c6                	mov    esi,eax
c0022ae3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022ae7:	c1 e6 10             	shl    esi,0x10
c0022aea:	51                   	push   ecx
c0022aeb:	57                   	push   edi
c0022aec:	55                   	push   ebp
c0022aed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022af1:	e8 50 fe ff ff       	call   c0022946 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022af6:	83 c4 2c             	add    esp,0x2c
c0022af9:	0f b7 c0             	movzx  eax,ax
c0022afc:	5b                   	pop    ebx
c0022afd:	09 f0                	or     eax,esi
c0022aff:	5e                   	pop    esi
c0022b00:	5f                   	pop    edi
c0022b01:	5d                   	pop    ebp
c0022b02:	c3                   	ret    
c0022b03:	90                   	nop

c0022b04 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b04:	53                   	push   ebx
c0022b05:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b0a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b13:	c1 e1 10             	shl    ecx,0x10
c0022b16:	25 fc 00 00 00       	and    eax,0xfc
c0022b1b:	09 c1                	or     ecx,eax
c0022b1d:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b22:	c1 e0 08             	shl    eax,0x8
c0022b25:	09 c1                	or     ecx,eax
c0022b27:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b2c:	c1 e0 0b             	shl    eax,0xb
c0022b2f:	09 c1                	or     ecx,eax
c0022b31:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b37:	89 c8                	mov    eax,ecx
c0022b39:	ef                   	out    dx,eax
c0022b3a:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b3f:	ed                   	in     eax,dx
c0022b40:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b45:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b4a:	74 0a                	je     c0022b56 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b4c:	0f b7 d8             	movzx  ebx,ax
c0022b4f:	89 d0                	mov    eax,edx
c0022b51:	c1 e0 10             	shl    eax,0x10
c0022b54:	eb 05                	jmp    c0022b5b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b56:	66 31 c0             	xor    ax,ax
c0022b59:	89 d3                	mov    ebx,edx
c0022b5b:	09 c3                	or     ebx,eax
c0022b5d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b62:	89 c8                	mov    eax,ecx
c0022b64:	ef                   	out    dx,eax
c0022b65:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b6a:	89 d8                	mov    eax,ebx
c0022b6c:	ef                   	out    dx,eax
c0022b6d:	5b                   	pop    ebx
c0022b6e:	c3                   	ret    
c0022b6f:	90                   	nop

c0022b70 <PCI::checkBus(unsigned char)>:
c0022b70:	56                   	push   esi
c0022b71:	53                   	push   ebx
c0022b72:	31 db                	xor    ebx,ebx
c0022b74:	51                   	push   ecx
c0022b75:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b7a:	52                   	push   edx
c0022b7b:	53                   	push   ebx
c0022b7c:	43                   	inc    ebx
c0022b7d:	56                   	push   esi
c0022b7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b82:	e8 2b 03 00 00       	call   c0022eb2 <PCI::checkDevice(unsigned char, unsigned char)>
c0022b87:	83 c4 10             	add    esp,0x10
c0022b8a:	83 fb 20             	cmp    ebx,0x20
c0022b8d:	75 eb                	jne    c0022b7a <PCI::checkBus(unsigned char)+0xa>
c0022b8f:	58                   	pop    eax
c0022b90:	5b                   	pop    ebx
c0022b91:	5e                   	pop    esi
c0022b92:	c3                   	ret    
c0022b93:	90                   	nop

c0022b94 <PCI::foundDevice(PCIDeviceInfo)>:
c0022b94:	55                   	push   ebp
c0022b95:	57                   	push   edi
c0022b96:	56                   	push   esi
c0022b97:	53                   	push   ebx
c0022b98:	83 ec 1c             	sub    esp,0x1c
c0022b9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022b9f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022ba5:	0f 84 52 01 00 00    	je     c0022cfd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bab:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022baf:	66 81 f9 06 04       	cmp    cx,0x406
c0022bb4:	75 2c                	jne    c0022be2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022bb6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022bbb:	50                   	push   eax
c0022bbc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022bc1:	50                   	push   eax
c0022bc2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022bc7:	50                   	push   eax
c0022bc8:	56                   	push   esi
c0022bc9:	e8 b2 fe ff ff       	call   c0022a80 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022bce:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022bd2:	0f b6 c0             	movzx  eax,al
c0022bd5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022bd9:	83 c4 2c             	add    esp,0x2c
c0022bdc:	5b                   	pop    ebx
c0022bdd:	5e                   	pop    esi
c0022bde:	5f                   	pop    edi
c0022bdf:	5d                   	pop    ebp
c0022be0:	eb 8e                	jmp    c0022b70 <PCI::checkBus(unsigned char)>
c0022be2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022be6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022bec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022bf0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022bf4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022bf8:	88 d3                	mov    bl,dl
c0022bfa:	85 c0                	test   eax,eax
c0022bfc:	74 33                	je     c0022c31 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022bfe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c01:	85 d2                	test   edx,edx
c0022c03:	74 28                	je     c0022c2d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c05:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c0b:	31 ef                	xor    edi,ebp
c0022c0d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c13:	75 18                	jne    c0022c2d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c15:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c19:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c1f:	75 0c                	jne    c0022c2d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c21:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c27:	0f 84 d0 00 00 00    	je     c0022cfd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c2f:	eb c9                	jmp    c0022bfa <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c31:	66 81 f9 01 06       	cmp    cx,0x601
c0022c36:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c3a:	75 19                	jne    c0022c55 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c3c:	83 ec 0c             	sub    esp,0xc
c0022c3f:	68 64 01 00 00       	push   0x164
c0022c44:	e8 f7 cb fe ff       	call   c000f840 <malloc>
c0022c49:	89 c5                	mov    ebp,eax
c0022c4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c4e:	e8 95 0f 00 00       	call   c0023be8 <SATABus::SATABus()>
c0022c53:	eb 1e                	jmp    c0022c73 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c55:	66 81 f9 01 01       	cmp    cx,0x101
c0022c5a:	75 60                	jne    c0022cbc <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c5c:	83 ec 0c             	sub    esp,0xc
c0022c5f:	68 70 02 00 00       	push   0x270
c0022c64:	e8 d7 cb fe ff       	call   c000f840 <malloc>
c0022c69:	89 c5                	mov    ebp,eax
c0022c6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c6e:	e8 03 03 00 00       	call   c0022f76 <IDE::IDE()>
c0022c73:	58                   	pop    eax
c0022c74:	5a                   	pop    edx
c0022c75:	55                   	push   ebp
c0022c76:	56                   	push   esi
c0022c77:	e8 f0 16 ff ff       	call   c001436c <Device::addChild(Device*)>
c0022c7c:	83 ec 1c             	sub    esp,0x1c
c0022c7f:	b9 09 00 00 00       	mov    ecx,0x9
c0022c84:	fc                   	cld    
c0022c85:	89 e7                	mov    edi,esp
c0022c87:	89 de                	mov    esi,ebx
c0022c89:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c8b:	55                   	push   ebp
c0022c8c:	e8 e5 15 ff ff       	call   c0014276 <Device::preOpenPCI(PCIDeviceInfo)>
c0022c91:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022c94:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022c98:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022ca0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022ca8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022cb0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cb3:	83 c4 4c             	add    esp,0x4c
c0022cb6:	5b                   	pop    ebx
c0022cb7:	5e                   	pop    esi
c0022cb8:	5f                   	pop    edi
c0022cb9:	5d                   	pop    ebp
c0022cba:	ff e0                	jmp    eax
c0022cbc:	83 ec 0c             	sub    esp,0xc
c0022cbf:	68 58 01 00 00       	push   0x158
c0022cc4:	e8 77 cb fe ff       	call   c000f840 <malloc>
c0022cc9:	89 c5                	mov    ebp,eax
c0022ccb:	58                   	pop    eax
c0022ccc:	5a                   	pop    edx
c0022ccd:	68 6c c9 02 c0       	push   0xc002c96c
c0022cd2:	55                   	push   ebp
c0022cd3:	e8 8a 19 ff ff       	call   c0014662 <DriverlessDevice::DriverlessDevice(char const*)>
c0022cd8:	59                   	pop    ecx
c0022cd9:	5f                   	pop    edi
c0022cda:	55                   	push   ebp
c0022cdb:	56                   	push   esi
c0022cdc:	e8 8b 16 ff ff       	call   c001436c <Device::addChild(Device*)>
c0022ce1:	b9 09 00 00 00       	mov    ecx,0x9
c0022ce6:	fc                   	cld    
c0022ce7:	89 df                	mov    edi,ebx
c0022ce9:	89 de                	mov    esi,ebx
c0022ceb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ced:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022cf1:	83 c4 2c             	add    esp,0x2c
c0022cf4:	5b                   	pop    ebx
c0022cf5:	5e                   	pop    esi
c0022cf6:	5f                   	pop    edi
c0022cf7:	5d                   	pop    ebp
c0022cf8:	e9 79 15 ff ff       	jmp    c0014276 <Device::preOpenPCI(PCIDeviceInfo)>
c0022cfd:	83 c4 1c             	add    esp,0x1c
c0022d00:	5b                   	pop    ebx
c0022d01:	5e                   	pop    esi
c0022d02:	5f                   	pop    edi
c0022d03:	5d                   	pop    ebp
c0022d04:	c3                   	ret    
c0022d05:	90                   	nop

c0022d06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d06:	55                   	push   ebp
c0022d07:	57                   	push   edi
c0022d08:	56                   	push   esi
c0022d09:	53                   	push   ebx
c0022d0a:	83 ec 5c             	sub    esp,0x5c
c0022d0d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d15:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d19:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d1e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d22:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d26:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d2f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d34:	6a 0c                	push   0xc
c0022d36:	55                   	push   ebp
c0022d37:	53                   	push   ebx
c0022d38:	57                   	push   edi
c0022d39:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d40:	e8 01 fc ff ff       	call   c0022946 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d45:	55                   	push   ebp
c0022d46:	53                   	push   ebx
c0022d47:	57                   	push   edi
c0022d48:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d4f:	e8 80 fc ff ff       	call   c00229d4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d54:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d59:	83 c4 24             	add    esp,0x24
c0022d5c:	55                   	push   ebp
c0022d5d:	53                   	push   ebx
c0022d5e:	57                   	push   edi
c0022d5f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d63:	e8 f6 fc ff ff       	call   c0022a5e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d68:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022d6c:	6a 3c                	push   0x3c
c0022d6e:	55                   	push   ebp
c0022d6f:	53                   	push   ebx
c0022d70:	57                   	push   edi
c0022d71:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d78:	e8 c9 fb ff ff       	call   c0022946 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d7d:	0f b6 c4             	movzx  eax,ah
c0022d80:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d84:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022d88:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022d8c:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0022d91:	83 c4 24             	add    esp,0x24
c0022d94:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022d9a:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022da1:	74 6c                	je     c0022e0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022da3:	31 f6                	xor    esi,esi
c0022da5:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0022dab:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022db1:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022db7:	7e 56                	jle    c0022e0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022db9:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022dbc:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022dc3:	39 cb                	cmp    ebx,ecx
c0022dc5:	75 45                	jne    c0022e0c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022dc7:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022dce:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022dd2:	75 38                	jne    c0022e0c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022dd4:	83 ec 0c             	sub    esp,0xc
c0022dd7:	68 86 c9 02 c0       	push   0xc002c986
c0022ddc:	e8 65 01 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0022de1:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0022de7:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022ded:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022df5:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022df9:	52                   	push   edx
c0022dfa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022dfe:	53                   	push   ebx
c0022dff:	68 ab c9 02 c0       	push   0xc002c9ab
c0022e04:	e8 3d 01 ff ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0022e09:	83 c4 20             	add    esp,0x20
c0022e0c:	46                   	inc    esi
c0022e0d:	eb 96                	jmp    c0022da5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e0f:	31 d2                	xor    edx,edx
c0022e11:	83 ec 0c             	sub    esp,0xc
c0022e14:	55                   	push   ebp
c0022e15:	53                   	push   ebx
c0022e16:	57                   	push   edi
c0022e17:	52                   	push   edx
c0022e18:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e1c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e23:	e8 7c fc ff ff       	call   c0022aa4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e28:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e2c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e30:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e34:	42                   	inc    edx
c0022e35:	83 c4 20             	add    esp,0x20
c0022e38:	83 fa 06             	cmp    edx,0x6
c0022e3b:	75 d4                	jne    c0022e11 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e3d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e41:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e45:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e49:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e4d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e51:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e55:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e5a:	86 e0                	xchg   al,ah
c0022e5c:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e61:	55                   	push   ebp
c0022e62:	53                   	push   ebx
c0022e63:	57                   	push   edi
c0022e64:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e68:	e8 ab fb ff ff       	call   c0022a18 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e6d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e71:	55                   	push   ebp
c0022e72:	53                   	push   ebx
c0022e73:	57                   	push   edi
c0022e74:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e7b:	e8 0e fb ff ff       	call   c002298e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e80:	83 ec 0c             	sub    esp,0xc
c0022e83:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022e88:	b9 09 00 00 00       	mov    ecx,0x9
c0022e8d:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022e91:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022e95:	fc                   	cld    
c0022e96:	89 e7                	mov    edi,esp
c0022e98:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e9a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022ea1:	e8 ee fc ff ff       	call   c0022b94 <PCI::foundDevice(PCIDeviceInfo)>
c0022ea6:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022eac:	5b                   	pop    ebx
c0022ead:	5e                   	pop    esi
c0022eae:	5f                   	pop    edi
c0022eaf:	5d                   	pop    ebp
c0022eb0:	c3                   	ret    
c0022eb1:	90                   	nop

c0022eb2 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022eb2:	55                   	push   ebp
c0022eb3:	57                   	push   edi
c0022eb4:	56                   	push   esi
c0022eb5:	53                   	push   ebx
c0022eb6:	83 ec 0c             	sub    esp,0xc
c0022eb9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022ebd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022ec2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022ec7:	6a 00                	push   0x0
c0022ec9:	56                   	push   esi
c0022eca:	57                   	push   edi
c0022ecb:	55                   	push   ebp
c0022ecc:	e8 bd fa ff ff       	call   c002298e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ed1:	6a 00                	push   0x0
c0022ed3:	56                   	push   esi
c0022ed4:	57                   	push   edi
c0022ed5:	55                   	push   ebp
c0022ed6:	e8 2b fe ff ff       	call   c0022d06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022edb:	83 c4 20             	add    esp,0x20
c0022ede:	6a 00                	push   0x0
c0022ee0:	56                   	push   esi
c0022ee1:	57                   	push   edi
c0022ee2:	55                   	push   ebp
c0022ee3:	e8 c8 fa ff ff       	call   c00229b0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022ee8:	83 c4 10             	add    esp,0x10
c0022eeb:	84 c0                	test   al,al
c0022eed:	79 27                	jns    c0022f16 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022eef:	bb 01 00 00 00       	mov    ebx,0x1
c0022ef4:	53                   	push   ebx
c0022ef5:	56                   	push   esi
c0022ef6:	57                   	push   edi
c0022ef7:	55                   	push   ebp
c0022ef8:	e8 91 fa ff ff       	call   c002298e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022efd:	83 c4 10             	add    esp,0x10
c0022f00:	66 40                	inc    ax
c0022f02:	74 0c                	je     c0022f10 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f04:	53                   	push   ebx
c0022f05:	56                   	push   esi
c0022f06:	57                   	push   edi
c0022f07:	55                   	push   ebp
c0022f08:	e8 f9 fd ff ff       	call   c0022d06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f0d:	83 c4 10             	add    esp,0x10
c0022f10:	43                   	inc    ebx
c0022f11:	83 fb 08             	cmp    ebx,0x8
c0022f14:	75 de                	jne    c0022ef4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f16:	83 c4 0c             	add    esp,0xc
c0022f19:	5b                   	pop    ebx
c0022f1a:	5e                   	pop    esi
c0022f1b:	5f                   	pop    edi
c0022f1c:	5d                   	pop    ebp
c0022f1d:	c3                   	ret    

c0022f1e <PCI::detect()>:
c0022f1e:	56                   	push   esi
c0022f1f:	53                   	push   ebx
c0022f20:	53                   	push   ebx
c0022f21:	31 db                	xor    ebx,ebx
c0022f23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f27:	6a 00                	push   0x0
c0022f29:	6a 00                	push   0x0
c0022f2b:	6a 00                	push   0x0
c0022f2d:	56                   	push   esi
c0022f2e:	e8 7d fa ff ff       	call   c00229b0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f33:	83 c4 10             	add    esp,0x10
c0022f36:	a8 80                	test   al,0x80
c0022f38:	75 21                	jne    c0022f5b <PCI::detect()+0x3d>
c0022f3a:	51                   	push   ecx
c0022f3b:	51                   	push   ecx
c0022f3c:	6a 00                	push   0x0
c0022f3e:	56                   	push   esi
c0022f3f:	e8 2c fc ff ff       	call   c0022b70 <PCI::checkBus(unsigned char)>
c0022f44:	83 c4 10             	add    esp,0x10
c0022f47:	eb 24                	jmp    c0022f6d <PCI::detect()+0x4f>
c0022f49:	52                   	push   edx
c0022f4a:	52                   	push   edx
c0022f4b:	53                   	push   ebx
c0022f4c:	43                   	inc    ebx
c0022f4d:	56                   	push   esi
c0022f4e:	e8 1d fc ff ff       	call   c0022b70 <PCI::checkBus(unsigned char)>
c0022f53:	83 c4 10             	add    esp,0x10
c0022f56:	83 fb 08             	cmp    ebx,0x8
c0022f59:	74 12                	je     c0022f6d <PCI::detect()+0x4f>
c0022f5b:	53                   	push   ebx
c0022f5c:	6a 00                	push   0x0
c0022f5e:	6a 00                	push   0x0
c0022f60:	56                   	push   esi
c0022f61:	e8 28 fa ff ff       	call   c002298e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f66:	83 c4 10             	add    esp,0x10
c0022f69:	66 40                	inc    ax
c0022f6b:	74 dc                	je     c0022f49 <PCI::detect()+0x2b>
c0022f6d:	58                   	pop    eax
c0022f6e:	5b                   	pop    ebx
c0022f6f:	5e                   	pop    esi
c0022f70:	c3                   	ret    
c0022f71:	90                   	nop

c0022f72 <IDE::close(int, int, void*)>:
c0022f72:	83 c8 ff             	or     eax,0xffffffff
c0022f75:	c3                   	ret    

c0022f76 <IDE::IDE()>:
c0022f76:	83 ec 0c             	sub    esp,0xc
c0022f79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f7d:	83 ec 08             	sub    esp,0x8
c0022f80:	68 f4 c9 02 c0       	push   0xc002c9f4
c0022f85:	50                   	push   eax
c0022f86:	e8 6d 17 ff ff       	call   c00146f8 <HardDiskController::HardDiskController(char const*)>
c0022f8b:	83 c4 10             	add    esp,0x10
c0022f8e:	ba 34 cc 02 c0       	mov    edx,0xc002cc34
c0022f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f97:	89 10                	mov    DWORD PTR [eax],edx
c0022f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f9d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022fa4:	90                   	nop
c0022fa5:	83 c4 0c             	add    esp,0xc
c0022fa8:	c3                   	ret    
c0022fa9:	90                   	nop

c0022faa <IDE::prepareInterrupt(unsigned char)>:
c0022faa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022faf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fb3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022fbb:	c3                   	ret    

c0022fbc <selectDrive(unsigned char, unsigned char)>:
c0022fbc:	c3                   	ret    
c0022fbd:	90                   	nop

c0022fbe <IDE::getBase(unsigned char)>:
c0022fbe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022fc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fc7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022fcf:	c3                   	ret    

c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022fd0:	55                   	push   ebp
c0022fd1:	57                   	push   edi
c0022fd2:	56                   	push   esi
c0022fd3:	53                   	push   ebx
c0022fd4:	83 ec 1c             	sub    esp,0x1c
c0022fd7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022fdb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022fdf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022fe2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022fe6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022fea:	80 f9 03             	cmp    cl,0x3
c0022fed:	77 51                	ja     c0023040 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022fef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022ff3:	0f b6 f2             	movzx  esi,dl
c0022ff6:	0f b6 db             	movzx  ebx,bl
c0022ff9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022ffc:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023000:	83 ca 80             	or     edx,0xffffff80
c0023003:	0f b6 d2             	movzx  edx,dl
c0023006:	52                   	push   edx
c0023007:	6a 0c                	push   0xc
c0023009:	56                   	push   esi
c002300a:	57                   	push   edi
c002300b:	e8 c0 ff ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023010:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023019:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002301d:	ee                   	out    dx,al
c002301e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023023:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023027:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002302b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002302f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023037:	83 c4 2c             	add    esp,0x2c
c002303a:	5b                   	pop    ebx
c002303b:	5e                   	pop    esi
c002303c:	5f                   	pop    edi
c002303d:	5d                   	pop    ebp
c002303e:	eb 90                	jmp    c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023040:	80 fb 07             	cmp    bl,0x7
c0023043:	77 12                	ja     c0023057 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023045:	0f b6 d2             	movzx  edx,dl
c0023048:	0f b6 db             	movzx  ebx,bl
c002304b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023053:	89 da                	mov    edx,ebx
c0023055:	eb 2f                	jmp    c0023086 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023057:	80 fb 0d             	cmp    bl,0xd
c002305a:	77 13                	ja     c002306f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002305c:	0f b6 d2             	movzx  edx,dl
c002305f:	0f b6 db             	movzx  ebx,bl
c0023062:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023069:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002306d:	eb 17                	jmp    c0023086 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002306f:	80 fb 15             	cmp    bl,0x15
c0023072:	77 13                	ja     c0023087 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023074:	0f b6 d2             	movzx  edx,dl
c0023077:	0f b6 db             	movzx  ebx,bl
c002307a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023082:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023086:	ee                   	out    dx,al
c0023087:	83 c4 1c             	add    esp,0x1c
c002308a:	5b                   	pop    ebx
c002308b:	5e                   	pop    esi
c002308c:	5f                   	pop    edi
c002308d:	5d                   	pop    ebp
c002308e:	c3                   	ret    
c002308f:	90                   	nop

c0023090 <IDE::read(unsigned char, unsigned char)>:
c0023090:	55                   	push   ebp
c0023091:	57                   	push   edi
c0023092:	56                   	push   esi
c0023093:	53                   	push   ebx
c0023094:	83 ec 1c             	sub    esp,0x1c
c0023097:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002309b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002309f:	8d 43 f8             	lea    eax,[ebx-0x8]
c00230a2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230a6:	3c 03                	cmp    al,0x3
c00230a8:	77 43                	ja     c00230ed <IDE::read(unsigned char, unsigned char)+0x5d>
c00230aa:	0f b6 f2             	movzx  esi,dl
c00230ad:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230b0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00230b4:	83 c8 80             	or     eax,0xffffff80
c00230b7:	0f b6 c0             	movzx  eax,al
c00230ba:	50                   	push   eax
c00230bb:	6a 0c                	push   0xc
c00230bd:	56                   	push   esi
c00230be:	57                   	push   edi
c00230bf:	e8 0c ff ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230c4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00230c9:	0f b6 c3             	movzx  eax,bl
c00230cc:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00230d0:	ec                   	in     al,dx
c00230d1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230d5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00230da:	52                   	push   edx
c00230db:	6a 0c                	push   0xc
c00230dd:	56                   	push   esi
c00230de:	57                   	push   edi
c00230df:	e8 ec fe ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230e4:	83 c4 20             	add    esp,0x20
c00230e7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00230eb:	eb 49                	jmp    c0023136 <IDE::read(unsigned char, unsigned char)+0xa6>
c00230ed:	80 fb 07             	cmp    bl,0x7
c00230f0:	77 12                	ja     c0023104 <IDE::read(unsigned char, unsigned char)+0x74>
c00230f2:	0f b6 d2             	movzx  edx,dl
c00230f5:	0f b6 c3             	movzx  eax,bl
c00230f8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023100:	89 c2                	mov    edx,eax
c0023102:	eb 31                	jmp    c0023135 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023104:	80 fb 0d             	cmp    bl,0xd
c0023107:	77 13                	ja     c002311c <IDE::read(unsigned char, unsigned char)+0x8c>
c0023109:	0f b6 d2             	movzx  edx,dl
c002310c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023113:	0f b6 d3             	movzx  edx,bl
c0023116:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002311a:	eb 19                	jmp    c0023135 <IDE::read(unsigned char, unsigned char)+0xa5>
c002311c:	31 c0                	xor    eax,eax
c002311e:	80 fb 15             	cmp    bl,0x15
c0023121:	77 13                	ja     c0023136 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023123:	0f b6 d2             	movzx  edx,dl
c0023126:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002312e:	0f b6 d3             	movzx  edx,bl
c0023131:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023135:	ec                   	in     al,dx
c0023136:	83 c4 1c             	add    esp,0x1c
c0023139:	5b                   	pop    ebx
c002313a:	5e                   	pop    esi
c002313b:	5f                   	pop    edi
c002313c:	5d                   	pop    ebp
c002313d:	c3                   	ret    

c002313e <IDE::waitInterrupt(unsigned char)>:
c002313e:	55                   	push   ebp
c002313f:	57                   	push   edi
c0023140:	56                   	push   esi
c0023141:	53                   	push   ebx
c0023142:	31 db                	xor    ebx,ebx
c0023144:	83 ec 0c             	sub    esp,0xc
c0023147:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002314b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023150:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023158:	89 e8                	mov    eax,ebp
c002315a:	84 c0                	test   al,al
c002315c:	75 34                	jne    c0023192 <IDE::waitInterrupt(unsigned char)+0x54>
c002315e:	52                   	push   edx
c002315f:	6a 0c                	push   0xc
c0023161:	56                   	push   esi
c0023162:	57                   	push   edi
c0023163:	e8 28 ff ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c0023168:	83 c4 10             	add    esp,0x10
c002316b:	a8 01                	test   al,0x1
c002316d:	75 2b                	jne    c002319a <IDE::waitInterrupt(unsigned char)+0x5c>
c002316f:	f6 c3 04             	test   bl,0x4
c0023172:	75 16                	jne    c002318a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023174:	83 fb 32             	cmp    ebx,0x32
c0023177:	7e 11                	jle    c002318a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023179:	50                   	push   eax
c002317a:	50                   	push   eax
c002317b:	6a 00                	push   0x0
c002317d:	68 80 96 98 00       	push   0x989680
c0023182:	e8 8b b1 ff ff       	call   c001e312 <nanoSleep(unsigned long long)>
c0023187:	83 c4 10             	add    esp,0x10
c002318a:	83 fb 3c             	cmp    ebx,0x3c
c002318d:	74 0b                	je     c002319a <IDE::waitInterrupt(unsigned char)+0x5c>
c002318f:	43                   	inc    ebx
c0023190:	eb be                	jmp    c0023150 <IDE::waitInterrupt(unsigned char)+0x12>
c0023192:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002319a:	83 c4 0c             	add    esp,0xc
c002319d:	89 e8                	mov    eax,ebp
c002319f:	5b                   	pop    ebx
c00231a0:	5e                   	pop    esi
c00231a1:	5f                   	pop    edi
c00231a2:	5d                   	pop    ebp
c00231a3:	c3                   	ret    

c00231a4 <ideChannel0IRQHandler(regs*, void*)>:
c00231a4:	83 ec 10             	sub    esp,0x10
c00231a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231ab:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00231b2:	6a 07                	push   0x7
c00231b4:	6a 00                	push   0x0
c00231b6:	50                   	push   eax
c00231b7:	e8 d4 fe ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c00231bc:	83 c4 1c             	add    esp,0x1c
c00231bf:	c3                   	ret    

c00231c0 <ideChannel1IRQHandler(regs*, void*)>:
c00231c0:	83 ec 10             	sub    esp,0x10
c00231c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231c7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00231ce:	6a 07                	push   0x7
c00231d0:	6a 01                	push   0x1
c00231d2:	50                   	push   eax
c00231d3:	e8 b8 fe ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c00231d8:	83 c4 1c             	add    esp,0x1c
c00231db:	c3                   	ret    

c00231dc <IDE::enableIRQs(unsigned char, bool)>:
c00231dc:	57                   	push   edi
c00231dd:	56                   	push   esi
c00231de:	be 04 00 00 00       	mov    esi,0x4
c00231e3:	53                   	push   ebx
c00231e4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00231e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00231ed:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00231f2:	0f 94 c0             	sete   al
c00231f5:	d1 e0                	shl    eax,1
c00231f7:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00231fe:	0f b6 c0             	movzx  eax,al
c0023201:	50                   	push   eax
c0023202:	6a 0c                	push   0xc
c0023204:	57                   	push   edi
c0023205:	53                   	push   ebx
c0023206:	e8 c5 fd ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002320b:	83 c4 10             	add    esp,0x10
c002320e:	50                   	push   eax
c002320f:	6a 0c                	push   0xc
c0023211:	57                   	push   edi
c0023212:	53                   	push   ebx
c0023213:	e8 78 fe ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c0023218:	83 c4 10             	add    esp,0x10
c002321b:	4e                   	dec    esi
c002321c:	75 f0                	jne    c002320e <IDE::enableIRQs(unsigned char, bool)+0x32>
c002321e:	5b                   	pop    ebx
c002321f:	5e                   	pop    esi
c0023220:	5f                   	pop    edi
c0023221:	c3                   	ret    

c0023222 <IDE::open(int, int, void*)>:
c0023222:	55                   	push   ebp
c0023223:	57                   	push   edi
c0023224:	56                   	push   esi
c0023225:	53                   	push   ebx
c0023226:	83 ec 1c             	sub    esp,0x1c
c0023229:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002322d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023236:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002323f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023246:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002324d:	0f 85 b0 02 00 00    	jne    c0023503 <IDE::open(int, int, void*)+0x2e1>
c0023253:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023259:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002325d:	83 e0 7f             	and    eax,0x7f
c0023260:	3c 05                	cmp    al,0x5
c0023262:	74 04                	je     c0023268 <IDE::open(int, int, void*)+0x46>
c0023264:	3c 0f                	cmp    al,0xf
c0023266:	75 32                	jne    c002329a <IDE::open(int, int, void*)+0x78>
c0023268:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002326e:	83 e0 fc             	and    eax,0xfffffffc
c0023271:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023278:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002327e:	83 e0 fc             	and    eax,0xfffffffc
c0023281:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023288:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002328e:	83 e0 fc             	and    eax,0xfffffffc
c0023291:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023298:	eb 14                	jmp    c00232ae <IDE::open(int, int, void*)+0x8c>
c002329a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00232a4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00232ae:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00232b5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00232bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00232c0:	89 c6                	mov    esi,eax
c00232c2:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232c7:	c1 e6 10             	shl    esi,0x10
c00232ca:	89 e8                	mov    eax,ebp
c00232cc:	89 fa                	mov    edx,edi
c00232ce:	c1 e0 0b             	shl    eax,0xb
c00232d1:	09 f0                	or     eax,esi
c00232d3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00232da:	c1 e6 08             	shl    esi,0x8
c00232dd:	09 c6                	or     esi,eax
c00232df:	89 f0                	mov    eax,esi
c00232e1:	0d 08 00 00 80       	or     eax,0x80000008
c00232e6:	ef                   	out    dx,eax
c00232e7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00232ec:	89 ca                	mov    edx,ecx
c00232ee:	ed                   	in     eax,dx
c00232ef:	c1 e8 10             	shr    eax,0x10
c00232f2:	3d ff ff 00 00       	cmp    eax,0xffff
c00232f7:	0f 84 f5 00 00 00    	je     c00233f2 <IDE::open(int, int, void*)+0x1d0>
c00232fd:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023303:	89 fa                	mov    edx,edi
c0023305:	89 f0                	mov    eax,esi
c0023307:	ef                   	out    dx,eax
c0023308:	b0 fe                	mov    al,0xfe
c002330a:	89 ca                	mov    edx,ecx
c002330c:	ee                   	out    dx,al
c002330d:	89 f0                	mov    eax,esi
c002330f:	89 fa                	mov    edx,edi
c0023311:	ef                   	out    dx,eax
c0023312:	89 ca                	mov    edx,ecx
c0023314:	ed                   	in     eax,dx
c0023315:	3c fe                	cmp    al,0xfe
c0023317:	0f 85 a9 00 00 00    	jne    c00233c6 <IDE::open(int, int, void*)+0x1a4>
c002331d:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0023323:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002332a:	74 33                	je     c002335f <IDE::open(int, int, void*)+0x13d>
c002332c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023332:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023336:	40                   	inc    eax
c0023337:	83 ec 0c             	sub    esp,0xc
c002333a:	0f b6 c0             	movzx  eax,al
c002333d:	50                   	push   eax
c002333e:	55                   	push   ebp
c002333f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023343:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023349:	51                   	push   ecx
c002334a:	e8 f1 4e ff ff       	call   c0018240 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002334f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023354:	83 c4 1c             	add    esp,0x1c
c0023357:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002335d:	eb 0a                	jmp    c0023369 <IDE::open(int, int, void*)+0x147>
c002335f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023369:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023370:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023377:	c1 e1 10             	shl    ecx,0x10
c002337a:	c1 e0 08             	shl    eax,0x8
c002337d:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023382:	09 c1                	or     ecx,eax
c0023384:	89 fa                	mov    edx,edi
c0023386:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002338d:	c1 e0 0b             	shl    eax,0xb
c0023390:	09 c1                	or     ecx,eax
c0023392:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023398:	89 c8                	mov    eax,ecx
c002339a:	ef                   	out    dx,eax
c002339b:	be fc 0c 00 00       	mov    esi,0xcfc
c00233a0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00233a6:	89 f2                	mov    edx,esi
c00233a8:	ee                   	out    dx,al
c00233a9:	89 c8                	mov    eax,ecx
c00233ab:	89 fa                	mov    edx,edi
c00233ad:	ef                   	out    dx,eax
c00233ae:	89 f2                	mov    edx,esi
c00233b0:	ed                   	in     eax,dx
c00233b1:	0f b6 c0             	movzx  eax,al
c00233b4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00233ba:	74 46                	je     c0023402 <IDE::open(int, int, void*)+0x1e0>
c00233bc:	83 ec 0c             	sub    esp,0xc
c00233bf:	68 0c ca 02 c0       	push   0xc002ca0c
c00233c4:	eb 34                	jmp    c00233fa <IDE::open(int, int, void*)+0x1d8>
c00233c6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00233cf:	75 17                	jne    c00233e8 <IDE::open(int, int, void*)+0x1c6>
c00233d1:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00233d6:	74 07                	je     c00233df <IDE::open(int, int, void*)+0x1bd>
c00233d8:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233dd:	75 09                	jne    c00233e8 <IDE::open(int, int, void*)+0x1c6>
c00233df:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233e6:	eb 1a                	jmp    c0023402 <IDE::open(int, int, void*)+0x1e0>
c00233e8:	83 ec 0c             	sub    esp,0xc
c00233eb:	68 14 ca 02 c0       	push   0xc002ca14
c00233f0:	eb 08                	jmp    c00233fa <IDE::open(int, int, void*)+0x1d8>
c00233f2:	83 ec 0c             	sub    esp,0xc
c00233f5:	68 45 ca 02 c0       	push   0xc002ca45
c00233fa:	e8 e8 71 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c00233ff:	83 c4 10             	add    esp,0x10
c0023402:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023409:	79 1a                	jns    c0023425 <IDE::open(int, int, void*)+0x203>
c002340b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023411:	83 e0 fc             	and    eax,0xfffffffc
c0023414:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002341b:	83 c0 08             	add    eax,0x8
c002341e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023425:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002342b:	89 c2                	mov    edx,eax
c002342d:	83 e2 0f             	and    edx,0xf
c0023430:	66 83 fa 08          	cmp    dx,0x8
c0023434:	75 0a                	jne    c0023440 <IDE::open(int, int, void*)+0x21e>
c0023436:	83 e8 02             	sub    eax,0x2
c0023439:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023440:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023446:	89 c2                	mov    edx,eax
c0023448:	83 e2 0f             	and    edx,0xf
c002344b:	66 83 fa 08          	cmp    dx,0x8
c002344f:	75 0a                	jne    c002345b <IDE::open(int, int, void*)+0x239>
c0023451:	83 e8 02             	sub    eax,0x2
c0023454:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002345b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023462:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023469:	89 d0                	mov    eax,edx
c002346b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002346e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023472:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023476:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023479:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002347e:	0f b6 c9             	movzx  ecx,cl
c0023481:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023488:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002348b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002348f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023493:	8d 50 02             	lea    edx,[eax+0x2]
c0023496:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002349b:	0f b6 d2             	movzx  edx,dl
c002349e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00234a4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234a7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234ab:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00234af:	8d 48 03             	lea    ecx,[eax+0x3]
c00234b2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234b7:	0f b6 c9             	movzx  ecx,cl
c00234ba:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00234c0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234c3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234c7:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00234cb:	8d 50 04             	lea    edx,[eax+0x4]
c00234ce:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00234d4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234d9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00234e0:	66 85 f6             	test   si,si
c00234e3:	74 3e                	je     c0023523 <IDE::open(int, int, void*)+0x301>
c00234e5:	0f b6 d2             	movzx  edx,dl
c00234e8:	83 c0 05             	add    eax,0x5
c00234eb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234ee:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234f2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00234f6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00234fc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023501:	eb 20                	jmp    c0023523 <IDE::open(int, int, void*)+0x301>
c0023503:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002350d:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023517:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002351e:	e9 02 ff ff ff       	jmp    c0023425 <IDE::open(int, int, void*)+0x203>
c0023523:	52                   	push   edx
c0023524:	52                   	push   edx
c0023525:	6a 00                	push   0x0
c0023527:	53                   	push   ebx
c0023528:	e8 7d fa ff ff       	call   c0022faa <IDE::prepareInterrupt(unsigned char)>
c002352d:	59                   	pop    ecx
c002352e:	5e                   	pop    esi
c002352f:	6a 01                	push   0x1
c0023531:	53                   	push   ebx
c0023532:	e8 73 fa ff ff       	call   c0022faa <IDE::prepareInterrupt(unsigned char)>
c0023537:	83 c4 0c             	add    esp,0xc
c002353a:	6a 00                	push   0x0
c002353c:	6a 00                	push   0x0
c002353e:	53                   	push   ebx
c002353f:	e8 98 fc ff ff       	call   c00231dc <IDE::enableIRQs(unsigned char, bool)>
c0023544:	83 c4 0c             	add    esp,0xc
c0023547:	6a 00                	push   0x0
c0023549:	6a 01                	push   0x1
c002354b:	53                   	push   ebx
c002354c:	e8 8b fc ff ff       	call   c00231dc <IDE::enableIRQs(unsigned char, bool)>
c0023551:	83 c4 10             	add    esp,0x10
c0023554:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002355b:	74 40                	je     c002359d <IDE::open(int, int, void*)+0x37b>
c002355d:	83 ec 0c             	sub    esp,0xc
c0023560:	68 6f ca 02 c0       	push   0xc002ca6f
c0023565:	e8 dc f9 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c002356a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002356d:	6a 01                	push   0x1
c002356f:	68 a4 31 02 c0       	push   0xc00231a4
c0023574:	6a 0e                	push   0xe
c0023576:	53                   	push   ebx
c0023577:	e8 74 0d ff ff       	call   c00142f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002357c:	83 c4 14             	add    esp,0x14
c002357f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023585:	53                   	push   ebx
c0023586:	6a 01                	push   0x1
c0023588:	68 c0 31 02 c0       	push   0xc00231c0
c002358d:	6a 0f                	push   0xf
c002358f:	53                   	push   ebx
c0023590:	e8 5b 0d ff ff       	call   c00142f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023595:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002359b:	eb 4a                	jmp    c00235e7 <IDE::open(int, int, void*)+0x3c5>
c002359d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00235a7:	50                   	push   eax
c00235a8:	6a 0f                	push   0xf
c00235aa:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235b0:	68 8b ca 02 c0       	push   0xc002ca8b
c00235b5:	e8 8c f9 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c00235ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235bd:	6a 00                	push   0x0
c00235bf:	68 a4 31 02 c0       	push   0xc00231a4
c00235c4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235ca:	53                   	push   ebx
c00235cb:	e8 20 0d ff ff       	call   c00142f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235d0:	83 c4 14             	add    esp,0x14
c00235d3:	53                   	push   ebx
c00235d4:	6a 00                	push   0x0
c00235d6:	68 c0 31 02 c0       	push   0xc00231c0
c00235db:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00235e1:	53                   	push   ebx
c00235e2:	e8 09 0d ff ff       	call   c00142f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235e9:	83 c4 20             	add    esp,0x20
c00235ec:	83 ec 0c             	sub    esp,0xc
c00235ef:	53                   	push   ebx
c00235f0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00235f3:	83 c4 0c             	add    esp,0xc
c00235f6:	6a 07                	push   0x7
c00235f8:	6a 00                	push   0x0
c00235fa:	53                   	push   ebx
c00235fb:	e8 90 fa ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c0023600:	83 c4 0c             	add    esp,0xc
c0023603:	6a 07                	push   0x7
c0023605:	6a 01                	push   0x1
c0023607:	53                   	push   ebx
c0023608:	e8 83 fa ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c002360d:	83 c4 0c             	add    esp,0xc
c0023610:	6a 01                	push   0x1
c0023612:	6a 00                	push   0x0
c0023614:	53                   	push   ebx
c0023615:	e8 c2 fb ff ff       	call   c00231dc <IDE::enableIRQs(unsigned char, bool)>
c002361a:	83 c4 0c             	add    esp,0xc
c002361d:	6a 01                	push   0x1
c002361f:	6a 01                	push   0x1
c0023621:	53                   	push   ebx
c0023622:	e8 b5 fb ff ff       	call   c00231dc <IDE::enableIRQs(unsigned char, bool)>
c0023627:	83 c4 2c             	add    esp,0x2c
c002362a:	31 c0                	xor    eax,eax
c002362c:	5b                   	pop    ebx
c002362d:	5e                   	pop    esi
c002362e:	5f                   	pop    edi
c002362f:	5d                   	pop    ebp
c0023630:	c3                   	ret    
c0023631:	90                   	nop

c0023632 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023632:	55                   	push   ebp
c0023633:	57                   	push   edi
c0023634:	56                   	push   esi
c0023635:	53                   	push   ebx
c0023636:	83 ec 1c             	sub    esp,0x1c
c0023639:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002363d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023641:	8d 50 f8             	lea    edx,[eax-0x8]
c0023644:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023648:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002364c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023650:	80 fa 03             	cmp    dl,0x3
c0023653:	77 5d                	ja     c00236b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023655:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023659:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002365d:	0f b6 db             	movzx  ebx,bl
c0023660:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023663:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023667:	83 ca 80             	or     edx,0xffffff80
c002366a:	0f b6 d2             	movzx  edx,dl
c002366d:	52                   	push   edx
c002366e:	6a 0c                	push   0xc
c0023670:	53                   	push   ebx
c0023671:	56                   	push   esi
c0023672:	e8 59 f9 ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023677:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002367c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023680:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023684:	0f b6 c0             	movzx  eax,al
c0023687:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002368b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002368d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023692:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023696:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002369a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002369e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00236a6:	83 c4 2c             	add    esp,0x2c
c00236a9:	5b                   	pop    ebx
c00236aa:	5e                   	pop    esi
c00236ab:	5f                   	pop    edi
c00236ac:	5d                   	pop    ebp
c00236ad:	e9 1e f9 ff ff       	jmp    c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236b2:	3c 07                	cmp    al,0x7
c00236b4:	77 10                	ja     c00236c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00236b6:	0f b6 db             	movzx  ebx,bl
c00236b9:	0f b6 d0             	movzx  edx,al
c00236bc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00236c4:	eb 2d                	jmp    c00236f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236c6:	3c 0d                	cmp    al,0xd
c00236c8:	77 13                	ja     c00236dd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00236ca:	0f b6 db             	movzx  ebx,bl
c00236cd:	0f b6 c0             	movzx  eax,al
c00236d0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00236d7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00236db:	eb 16                	jmp    c00236f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236dd:	3c 15                	cmp    al,0x15
c00236df:	77 14                	ja     c00236f5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00236e1:	0f b6 db             	movzx  ebx,bl
c00236e4:	0f b6 c0             	movzx  eax,al
c00236e7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00236ef:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00236f3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236f5:	83 c4 1c             	add    esp,0x1c
c00236f8:	5b                   	pop    ebx
c00236f9:	5e                   	pop    esi
c00236fa:	5f                   	pop    edi
c00236fb:	5d                   	pop    ebp
c00236fc:	c3                   	ret    
c00236fd:	90                   	nop

c00236fe <IDE::detect()>:
c00236fe:	55                   	push   ebp
c00236ff:	57                   	push   edi
c0023700:	56                   	push   esi
c0023701:	53                   	push   ebx
c0023702:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023708:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002370f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023716:	0f 85 be 02 00 00    	jne    c00239da <IDE::detect()+0x2dc>
c002371c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023723:	31 f6                	xor    esi,esi
c0023725:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002372d:	31 ed                	xor    ebp,ebp
c002372f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023733:	c1 e0 06             	shl    eax,0x6
c0023736:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002373e:	89 e8                	mov    eax,ebp
c0023740:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023744:	c1 e0 04             	shl    eax,0x4
c0023747:	83 c8 a0             	or     eax,0xffffffa0
c002374a:	0f b6 c0             	movzx  eax,al
c002374d:	50                   	push   eax
c002374e:	6a 06                	push   0x6
c0023750:	56                   	push   esi
c0023751:	53                   	push   ebx
c0023752:	e8 79 f8 ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023757:	83 c4 0c             	add    esp,0xc
c002375a:	6a 0c                	push   0xc
c002375c:	56                   	push   esi
c002375d:	53                   	push   ebx
c002375e:	e8 2d f9 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c0023763:	83 c4 0c             	add    esp,0xc
c0023766:	6a 0c                	push   0xc
c0023768:	56                   	push   esi
c0023769:	53                   	push   ebx
c002376a:	e8 21 f9 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c002376f:	83 c4 0c             	add    esp,0xc
c0023772:	6a 0c                	push   0xc
c0023774:	56                   	push   esi
c0023775:	53                   	push   ebx
c0023776:	e8 15 f9 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c002377b:	83 c4 0c             	add    esp,0xc
c002377e:	6a 0c                	push   0xc
c0023780:	56                   	push   esi
c0023781:	53                   	push   ebx
c0023782:	e8 09 f9 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c0023787:	68 ec 00 00 00       	push   0xec
c002378c:	6a 07                	push   0x7
c002378e:	56                   	push   esi
c002378f:	53                   	push   ebx
c0023790:	e8 3b f8 ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023795:	83 c4 1c             	add    esp,0x1c
c0023798:	6a 0c                	push   0xc
c002379a:	56                   	push   esi
c002379b:	53                   	push   ebx
c002379c:	e8 ef f8 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c00237a1:	83 c4 0c             	add    esp,0xc
c00237a4:	6a 0c                	push   0xc
c00237a6:	56                   	push   esi
c00237a7:	53                   	push   ebx
c00237a8:	e8 e3 f8 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c00237ad:	83 c4 0c             	add    esp,0xc
c00237b0:	6a 0c                	push   0xc
c00237b2:	56                   	push   esi
c00237b3:	53                   	push   ebx
c00237b4:	e8 d7 f8 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c00237b9:	83 c4 0c             	add    esp,0xc
c00237bc:	6a 0c                	push   0xc
c00237be:	56                   	push   esi
c00237bf:	53                   	push   ebx
c00237c0:	e8 cb f8 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c00237c5:	83 c4 0c             	add    esp,0xc
c00237c8:	6a 0c                	push   0xc
c00237ca:	56                   	push   esi
c00237cb:	53                   	push   ebx
c00237cc:	e8 bf f8 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c00237d1:	83 c4 10             	add    esp,0x10
c00237d4:	84 c0                	test   al,al
c00237d6:	0f 84 8b 01 00 00    	je     c0023967 <IDE::detect()+0x269>
c00237dc:	31 ff                	xor    edi,edi
c00237de:	50                   	push   eax
c00237df:	6a 0c                	push   0xc
c00237e1:	56                   	push   esi
c00237e2:	53                   	push   ebx
c00237e3:	e8 a8 f8 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c00237e8:	83 c4 10             	add    esp,0x10
c00237eb:	a8 01                	test   al,0x1
c00237ed:	0f 85 8e 01 00 00    	jne    c0023981 <IDE::detect()+0x283>
c00237f3:	84 c0                	test   al,al
c00237f5:	78 04                	js     c00237fb <IDE::detect()+0xfd>
c00237f7:	a8 08                	test   al,0x8
c00237f9:	75 27                	jne    c0023822 <IDE::detect()+0x124>
c00237fb:	47                   	inc    edi
c00237fc:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023802:	7e da                	jle    c00237de <IDE::detect()+0xe0>
c0023804:	50                   	push   eax
c0023805:	50                   	push   eax
c0023806:	6a 00                	push   0x0
c0023808:	68 40 4b 4c 00       	push   0x4c4b40
c002380d:	e8 00 ab ff ff       	call   c001e312 <nanoSleep(unsigned long long)>
c0023812:	83 c4 10             	add    esp,0x10
c0023815:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002381b:	75 c1                	jne    c00237de <IDE::detect()+0xe0>
c002381d:	e9 5f 01 00 00       	jmp    c0023981 <IDE::detect()+0x283>
c0023822:	31 c9                	xor    ecx,ecx
c0023824:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023828:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002382c:	83 ec 0c             	sub    esp,0xc
c002382f:	68 80 00 00 00       	push   0x80
c0023834:	57                   	push   edi
c0023835:	6a 00                	push   0x0
c0023837:	56                   	push   esi
c0023838:	53                   	push   ebx
c0023839:	e8 f4 fd ff ff       	call   c0023632 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002383e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023843:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023847:	89 d1                	mov    ecx,edx
c0023849:	c1 e0 06             	shl    eax,0x6
c002384c:	01 d8                	add    eax,ebx
c002384e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023855:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002385c:	89 f2                	mov    edx,esi
c002385e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023864:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023868:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002386e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023872:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023879:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023881:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023888:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023890:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023896:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002389d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00238a3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00238a7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238ab:	83 c4 20             	add    esp,0x20
c00238ae:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00238b1:	83 c0 02             	add    eax,0x2
c00238b4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00238ba:	83 c7 02             	add    edi,0x2
c00238bd:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00238c0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00238c6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00238ca:	75 e2                	jne    c00238ae <IDE::detect()+0x1b0>
c00238cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238d0:	c1 e0 06             	shl    eax,0x6
c00238d3:	01 d8                	add    eax,ebx
c00238d5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00238db:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00238e2:	66 c1 ea 09          	shr    dx,0x9
c00238e6:	83 e2 01             	and    edx,0x1
c00238e9:	84 c9                	test   cl,cl
c00238eb:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00238f1:	75 2f                	jne    c0023922 <IDE::detect()+0x224>
c00238f3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00238f9:	85 c0                	test   eax,eax
c00238fb:	74 66                	je     c0023963 <IDE::detect()+0x265>
c00238fd:	50                   	push   eax
c00238fe:	55                   	push   ebp
c00238ff:	56                   	push   esi
c0023900:	68 a7 ca 02 c0       	push   0xc002caa7
c0023905:	e8 3c f6 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c002390a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023911:	e8 2a bf fe ff       	call   c000f840 <malloc>
c0023916:	89 c7                	mov    edi,eax
c0023918:	89 04 24             	mov    DWORD PTR [esp],eax
c002391b:	e8 78 06 00 00       	call   c0023f98 <ATA::ATA()>
c0023920:	eb 28                	jmp    c002394a <IDE::detect()+0x24c>
c0023922:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023928:	55                   	push   ebp
c0023929:	56                   	push   esi
c002392a:	68 d6 ca 02 c0       	push   0xc002cad6
c002392f:	e8 12 f6 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023934:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002393b:	e8 00 bf fe ff       	call   c000f840 <malloc>
c0023940:	89 c7                	mov    edi,eax
c0023942:	89 04 24             	mov    DWORD PTR [esp],eax
c0023945:	e8 8e 0c 00 00       	call   c00245d8 <ATAPI::ATAPI()>
c002394a:	5a                   	pop    edx
c002394b:	59                   	pop    ecx
c002394c:	57                   	push   edi
c002394d:	53                   	push   ebx
c002394e:	e8 19 0a ff ff       	call   c001436c <Device::addChild(Device*)>
c0023953:	8b 07                	mov    eax,DWORD PTR [edi]
c0023955:	53                   	push   ebx
c0023956:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002395a:	6a 00                	push   0x0
c002395c:	57                   	push   edi
c002395d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023960:	83 c4 20             	add    esp,0x20
c0023963:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023967:	4d                   	dec    ebp
c0023968:	74 0a                	je     c0023974 <IDE::detect()+0x276>
c002396a:	bd 01 00 00 00       	mov    ebp,0x1
c002396f:	e9 bb fd ff ff       	jmp    c002372f <IDE::detect()+0x31>
c0023974:	4e                   	dec    esi
c0023975:	74 63                	je     c00239da <IDE::detect()+0x2dc>
c0023977:	be 01 00 00 00       	mov    esi,0x1
c002397c:	e9 ac fd ff ff       	jmp    c002372d <IDE::detect()+0x2f>
c0023981:	50                   	push   eax
c0023982:	6a 04                	push   0x4
c0023984:	56                   	push   esi
c0023985:	53                   	push   ebx
c0023986:	e8 05 f7 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c002398b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002398f:	83 c4 0c             	add    esp,0xc
c0023992:	6a 05                	push   0x5
c0023994:	56                   	push   esi
c0023995:	53                   	push   ebx
c0023996:	e8 f5 f6 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c002399b:	83 c4 10             	add    esp,0x10
c002399e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00239a2:	80 fa 14             	cmp    dl,0x14
c00239a5:	75 04                	jne    c00239ab <IDE::detect()+0x2ad>
c00239a7:	3c eb                	cmp    al,0xeb
c00239a9:	eb 07                	jmp    c00239b2 <IDE::detect()+0x2b4>
c00239ab:	3c 96                	cmp    al,0x96
c00239ad:	75 b8                	jne    c0023967 <IDE::detect()+0x269>
c00239af:	80 fa 69             	cmp    dl,0x69
c00239b2:	75 b3                	jne    c0023967 <IDE::detect()+0x269>
c00239b4:	68 a1 00 00 00       	push   0xa1
c00239b9:	6a 07                	push   0x7
c00239bb:	56                   	push   esi
c00239bc:	53                   	push   ebx
c00239bd:	e8 0e f6 ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239c2:	5f                   	pop    edi
c00239c3:	58                   	pop    eax
c00239c4:	6a 00                	push   0x0
c00239c6:	68 40 42 0f 00       	push   0xf4240
c00239cb:	e8 42 a9 ff ff       	call   c001e312 <nanoSleep(unsigned long long)>
c00239d0:	83 c4 10             	add    esp,0x10
c00239d3:	b1 01                	mov    cl,0x1
c00239d5:	e9 4a fe ff ff       	jmp    c0023824 <IDE::detect()+0x126>
c00239da:	81 c4 1c 02 00 00    	add    esp,0x21c
c00239e0:	5b                   	pop    ebx
c00239e1:	5e                   	pop    esi
c00239e2:	5f                   	pop    edi
c00239e3:	5d                   	pop    ebp
c00239e4:	c3                   	ret    
c00239e5:	90                   	nop

c00239e6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00239e6:	55                   	push   ebp
c00239e7:	57                   	push   edi
c00239e8:	56                   	push   esi
c00239e9:	53                   	push   ebx
c00239ea:	83 ec 1c             	sub    esp,0x1c
c00239ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00239f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00239f5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00239f9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00239fd:	88 c3                	mov    bl,al
c00239ff:	84 c0                	test   al,al
c0023a01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a05:	0f 84 67 01 00 00    	je     c0023b72 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a0b:	83 ec 0c             	sub    esp,0xc
c0023a0e:	68 07 cb 02 c0       	push   0xc002cb07
c0023a13:	e8 2e f5 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023a18:	83 c4 10             	add    esp,0x10
c0023a1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a1f:	3c 01                	cmp    al,0x1
c0023a21:	75 17                	jne    c0023a3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a23:	83 ec 0c             	sub    esp,0xc
c0023a26:	b3 13                	mov    bl,0x13
c0023a28:	68 13 cb 02 c0       	push   0xc002cb13
c0023a2d:	e8 14 f5 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023a32:	83 c4 10             	add    esp,0x10
c0023a35:	e9 25 01 00 00       	jmp    c0023b5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a3a:	3c 02                	cmp    al,0x2
c0023a3c:	0f 85 ef 00 00 00    	jne    c0023b31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a42:	d1 e6                	shl    esi,1
c0023a44:	09 ee                	or     esi,ebp
c0023a46:	52                   	push   edx
c0023a47:	89 f0                	mov    eax,esi
c0023a49:	6a 01                	push   0x1
c0023a4b:	0f b6 f0             	movzx  esi,al
c0023a4e:	c1 e6 06             	shl    esi,0x6
c0023a51:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a59:	50                   	push   eax
c0023a5a:	57                   	push   edi
c0023a5b:	e8 30 f6 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c0023a60:	83 c4 10             	add    esp,0x10
c0023a63:	89 c6                	mov    esi,eax
c0023a65:	a8 01                	test   al,0x1
c0023a67:	74 12                	je     c0023a7b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023a69:	83 ec 0c             	sub    esp,0xc
c0023a6c:	b3 07                	mov    bl,0x7
c0023a6e:	68 28 cb 02 c0       	push   0xc002cb28
c0023a73:	e8 ce f4 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023a78:	83 c4 10             	add    esp,0x10
c0023a7b:	f7 c6 02 00 00 00    	test   esi,0x2
c0023a81:	74 12                	je     c0023a95 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023a83:	83 ec 0c             	sub    esp,0xc
c0023a86:	b3 03                	mov    bl,0x3
c0023a88:	68 46 cb 02 c0       	push   0xc002cb46
c0023a8d:	e8 b4 f4 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023a92:	83 c4 10             	add    esp,0x10
c0023a95:	f7 c6 04 00 00 00    	test   esi,0x4
c0023a9b:	74 12                	je     c0023aaf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023a9d:	83 ec 0c             	sub    esp,0xc
c0023aa0:	b3 14                	mov    bl,0x14
c0023aa2:	68 66 cb 02 c0       	push   0xc002cb66
c0023aa7:	e8 9a f4 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023aac:	83 c4 10             	add    esp,0x10
c0023aaf:	f7 c6 08 00 00 00    	test   esi,0x8
c0023ab5:	74 12                	je     c0023ac9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023ab7:	83 ec 0c             	sub    esp,0xc
c0023aba:	b3 03                	mov    bl,0x3
c0023abc:	68 46 cb 02 c0       	push   0xc002cb46
c0023ac1:	e8 80 f4 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023ac6:	83 c4 10             	add    esp,0x10
c0023ac9:	f7 c6 10 00 00 00    	test   esi,0x10
c0023acf:	74 12                	je     c0023ae3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023ad1:	83 ec 0c             	sub    esp,0xc
c0023ad4:	b3 15                	mov    bl,0x15
c0023ad6:	68 7e cb 02 c0       	push   0xc002cb7e
c0023adb:	e8 66 f4 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023ae0:	83 c4 10             	add    esp,0x10
c0023ae3:	f7 c6 20 00 00 00    	test   esi,0x20
c0023ae9:	74 12                	je     c0023afd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023aeb:	83 ec 0c             	sub    esp,0xc
c0023aee:	b3 03                	mov    bl,0x3
c0023af0:	68 46 cb 02 c0       	push   0xc002cb46
c0023af5:	e8 4c f4 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023afa:	83 c4 10             	add    esp,0x10
c0023afd:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b03:	74 12                	je     c0023b17 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b05:	83 ec 0c             	sub    esp,0xc
c0023b08:	b3 16                	mov    bl,0x16
c0023b0a:	68 98 cb 02 c0       	push   0xc002cb98
c0023b0f:	e8 32 f4 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023b14:	83 c4 10             	add    esp,0x10
c0023b17:	89 f0                	mov    eax,esi
c0023b19:	84 c0                	test   al,al
c0023b1b:	79 42                	jns    c0023b5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b1d:	83 ec 0c             	sub    esp,0xc
c0023b20:	b3 0d                	mov    bl,0xd
c0023b22:	68 b9 cb 02 c0       	push   0xc002cbb9
c0023b27:	e8 1a f4 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023b2c:	83 c4 10             	add    esp,0x10
c0023b2f:	eb 2e                	jmp    c0023b5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b31:	3c 03                	cmp    al,0x3
c0023b33:	75 14                	jne    c0023b49 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b35:	83 ec 0c             	sub    esp,0xc
c0023b38:	b3 17                	mov    bl,0x17
c0023b3a:	68 cd cb 02 c0       	push   0xc002cbcd
c0023b3f:	e8 02 f4 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023b44:	83 c4 10             	add    esp,0x10
c0023b47:	eb 16                	jmp    c0023b5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b49:	3c 04                	cmp    al,0x4
c0023b4b:	75 12                	jne    c0023b5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b4d:	83 ec 0c             	sub    esp,0xc
c0023b50:	b3 08                	mov    bl,0x8
c0023b52:	68 e3 cb 02 c0       	push   0xc002cbe3
c0023b57:	e8 ea f3 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023b5c:	83 c4 10             	add    esp,0x10
c0023b5f:	50                   	push   eax
c0023b60:	50                   	push   eax
c0023b61:	0f b6 c3             	movzx  eax,bl
c0023b64:	50                   	push   eax
c0023b65:	68 fb cb 02 c0       	push   0xc002cbfb
c0023b6a:	e8 d7 f3 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023b6f:	83 c4 10             	add    esp,0x10
c0023b72:	83 c4 1c             	add    esp,0x1c
c0023b75:	88 d8                	mov    al,bl
c0023b77:	5b                   	pop    ebx
c0023b78:	5e                   	pop    esi
c0023b79:	5f                   	pop    edi
c0023b7a:	5d                   	pop    ebp
c0023b7b:	c3                   	ret    

c0023b7c <IDE::polling(unsigned char, unsigned int)>:
c0023b7c:	57                   	push   edi
c0023b7d:	56                   	push   esi
c0023b7e:	53                   	push   ebx
c0023b7f:	bb 04 00 00 00       	mov    ebx,0x4
c0023b84:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023b88:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023b8d:	52                   	push   edx
c0023b8e:	6a 0c                	push   0xc
c0023b90:	56                   	push   esi
c0023b91:	57                   	push   edi
c0023b92:	e8 f9 f4 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c0023b97:	83 c4 10             	add    esp,0x10
c0023b9a:	4b                   	dec    ebx
c0023b9b:	75 f0                	jne    c0023b8d <IDE::polling(unsigned char, unsigned int)+0x11>
c0023b9d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023ba2:	50                   	push   eax
c0023ba3:	6a 0c                	push   0xc
c0023ba5:	56                   	push   esi
c0023ba6:	57                   	push   edi
c0023ba7:	e8 e4 f4 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c0023bac:	83 c4 10             	add    esp,0x10
c0023baf:	a8 01                	test   al,0x1
c0023bb1:	74 12                	je     c0023bc5 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023bb3:	83 ec 0c             	sub    esp,0xc
c0023bb6:	68 15 cc 02 c0       	push   0xc002cc15
c0023bbb:	e8 86 f3 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023bc0:	83 c4 10             	add    esp,0x10
c0023bc3:	eb 17                	jmp    c0023bdc <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bc5:	a8 20                	test   al,0x20
c0023bc7:	75 0f                	jne    c0023bd8 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023bc9:	4b                   	dec    ebx
c0023bca:	74 10                	je     c0023bdc <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bcc:	84 c0                	test   al,al
c0023bce:	78 d2                	js     c0023ba2 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bd0:	a8 08                	test   al,0x8
c0023bd2:	74 ce                	je     c0023ba2 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bd4:	31 c0                	xor    eax,eax
c0023bd6:	eb 06                	jmp    c0023bde <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bd8:	b0 01                	mov    al,0x1
c0023bda:	eb 02                	jmp    c0023bde <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bdc:	b0 02                	mov    al,0x2
c0023bde:	5b                   	pop    ebx
c0023bdf:	5e                   	pop    esi
c0023be0:	5f                   	pop    edi
c0023be1:	c3                   	ret    

c0023be2 <SATABus::close(int, int, void*)>:
c0023be2:	31 c0                	xor    eax,eax
c0023be4:	c3                   	ret    
c0023be5:	90                   	nop

c0023be6 <SATABus::detect()>:
c0023be6:	c3                   	ret    
c0023be7:	90                   	nop

c0023be8 <SATABus::SATABus()>:
c0023be8:	83 ec 0c             	sub    esp,0xc
c0023beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bef:	83 ec 08             	sub    esp,0x8
c0023bf2:	68 58 cc 02 c0       	push   0xc002cc58
c0023bf7:	50                   	push   eax
c0023bf8:	e8 fb 0a ff ff       	call   c00146f8 <HardDiskController::HardDiskController(char const*)>
c0023bfd:	83 c4 10             	add    esp,0x10
c0023c00:	ba 14 cd 02 c0       	mov    edx,0xc002cd14
c0023c05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c09:	89 10                	mov    DWORD PTR [eax],edx
c0023c0b:	83 ec 0c             	sub    esp,0xc
c0023c0e:	6a 50                	push   0x50
c0023c10:	e8 10 c4 fe ff       	call   c0010025 <Phys::allocateContiguousPages(int)>
c0023c15:	83 c4 10             	add    esp,0x10
c0023c18:	89 c2                	mov    edx,eax
c0023c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c1e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c24:	83 ec 0c             	sub    esp,0xc
c0023c27:	6a 50                	push   0x50
c0023c29:	e8 71 df fe ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0023c2e:	83 c4 10             	add    esp,0x10
c0023c31:	89 c2                	mov    edx,eax
c0023c33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c37:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c3d:	e8 f8 e1 fe ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0023c42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c46:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c50:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c56:	83 ec 0c             	sub    esp,0xc
c0023c59:	6a 03                	push   0x3
c0023c5b:	6a 50                	push   0x50
c0023c5d:	51                   	push   ecx
c0023c5e:	52                   	push   edx
c0023c5f:	50                   	push   eax
c0023c60:	e8 05 ea fe ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c65:	83 c4 20             	add    esp,0x20
c0023c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c6c:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c76:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023c7c:	83 ec 04             	sub    esp,0x4
c0023c7f:	52                   	push   edx
c0023c80:	50                   	push   eax
c0023c81:	68 7c cc 02 c0       	push   0xc002cc7c
c0023c86:	e8 bb f2 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023c8b:	83 c4 10             	add    esp,0x10
c0023c8e:	90                   	nop
c0023c8f:	83 c4 0c             	add    esp,0xc
c0023c92:	c3                   	ret    
c0023c93:	90                   	nop

c0023c94 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023c94:	83 ec 0c             	sub    esp,0xc
c0023c97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c9b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023c9e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023ca1:	09 c2                	or     edx,eax
c0023ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ca7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023cad:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023caf:	31 c0                	xor    eax,eax
c0023cb1:	c1 e9 08             	shr    ecx,0x8
c0023cb4:	83 e1 0f             	and    ecx,0xf
c0023cb7:	39 c8                	cmp    eax,ecx
c0023cb9:	74 0a                	je     c0023cc5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023cbb:	f6 c2 01             	test   dl,0x1
c0023cbe:	74 18                	je     c0023cd8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cc0:	d1 ea                	shr    edx,1
c0023cc2:	40                   	inc    eax
c0023cc3:	eb f2                	jmp    c0023cb7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023cc5:	83 ec 0c             	sub    esp,0xc
c0023cc8:	68 a0 cc 02 c0       	push   0xc002cca0
c0023ccd:	e8 15 69 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0023cd2:	83 c4 10             	add    esp,0x10
c0023cd5:	83 c8 ff             	or     eax,0xffffffff
c0023cd8:	83 c4 0c             	add    esp,0xc
c0023cdb:	c3                   	ret    

c0023cdc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023cdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023ce0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023ce3:	89 c2                	mov    edx,eax
c0023ce5:	c1 ea 08             	shr    edx,0x8
c0023ce8:	83 e2 0f             	and    edx,0xf
c0023ceb:	fe ca                	dec    dl
c0023ced:	75 31                	jne    c0023d20 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cef:	83 e0 0f             	and    eax,0xf
c0023cf2:	3c 03                	cmp    al,0x3
c0023cf4:	75 2a                	jne    c0023d20 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cf6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023cf9:	b8 02 00 00 00       	mov    eax,0x2
c0023cfe:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d04:	74 1c                	je     c0023d22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d06:	b8 04 00 00 00       	mov    eax,0x4
c0023d0b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d11:	74 0f                	je     c0023d22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d13:	31 c0                	xor    eax,eax
c0023d15:	83 fa 03             	cmp    edx,0x3
c0023d18:	0f 94 c0             	sete   al
c0023d1b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d1f:	c3                   	ret    
c0023d20:	31 c0                	xor    eax,eax
c0023d22:	c3                   	ret    
c0023d23:	90                   	nop

c0023d24 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d28:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d2b:	0f ba e2 0f          	bt     edx,0xf
c0023d2f:	72 f7                	jb     c0023d28 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d31:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d34:	83 ca 10             	or     edx,0x10
c0023d37:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d3a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d3d:	83 ca 01             	or     edx,0x1
c0023d40:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d43:	c3                   	ret    

c0023d44 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d48:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d4b:	83 e2 fe             	and    edx,0xfffffffe
c0023d4e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d51:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d54:	83 e2 ef             	and    edx,0xffffffef
c0023d57:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d5a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d5d:	0f ba e2 0e          	bt     edx,0xe
c0023d61:	72 f7                	jb     c0023d5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d63:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d66:	0f ba e2 0f          	bt     edx,0xf
c0023d6a:	72 ee                	jb     c0023d5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d6c:	c3                   	ret    
c0023d6d:	90                   	nop

c0023d6e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d6e:	55                   	push   ebp
c0023d6f:	57                   	push   edi
c0023d70:	56                   	push   esi
c0023d71:	53                   	push   ebx
c0023d72:	83 ec 1c             	sub    esp,0x1c
c0023d75:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d79:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d7d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023d81:	53                   	push   ebx
c0023d82:	89 fd                	mov    ebp,edi
c0023d84:	56                   	push   esi
c0023d85:	c1 e5 0a             	shl    ebp,0xa
c0023d88:	e8 b7 ff ff ff       	call   c0023d44 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023d8d:	83 ec 0c             	sub    esp,0xc
c0023d90:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023d96:	01 e8                	add    eax,ebp
c0023d98:	89 03                	mov    DWORD PTR [ebx],eax
c0023d9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023d9c:	68 00 04 00 00       	push   0x400
c0023da1:	6a 00                	push   0x0
c0023da3:	50                   	push   eax
c0023da4:	e8 cf c9 fd ff       	call   c0000778 <memset>
c0023da9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023daf:	89 fa                	mov    edx,edi
c0023db1:	01 e8                	add    eax,ebp
c0023db3:	c1 e7 0d             	shl    edi,0xd
c0023db6:	89 03                	mov    DWORD PTR [ebx],eax
c0023db8:	c1 e2 08             	shl    edx,0x8
c0023dbb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023dc2:	81 c2 00 80 00 00    	add    edx,0x8000
c0023dc8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023dcc:	89 d0                	mov    eax,edx
c0023dce:	83 c4 1c             	add    esp,0x1c
c0023dd1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023dd7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023dda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023ddd:	68 00 01 00 00       	push   0x100
c0023de2:	6a 00                	push   0x0
c0023de4:	50                   	push   eax
c0023de5:	e8 8e c9 fd ff       	call   c0000778 <memset>
c0023dea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023dee:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023df4:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023dfa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023dfe:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e01:	83 c4 10             	add    esp,0x10
c0023e04:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e0b:	31 ff                	xor    edi,edi
c0023e0d:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e13:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e1d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e23:	83 c5 20             	add    ebp,0x20
c0023e26:	01 f8                	add    eax,edi
c0023e28:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e2b:	52                   	push   edx
c0023e2c:	68 00 01 00 00       	push   0x100
c0023e31:	6a 00                	push   0x0
c0023e33:	50                   	push   eax
c0023e34:	e8 3f c9 fd ff       	call   c0000778 <memset>
c0023e39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e3d:	83 c4 10             	add    esp,0x10
c0023e40:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e46:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e4d:	01 f8                	add    eax,edi
c0023e4f:	81 c7 00 01 00 00    	add    edi,0x100
c0023e55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e58:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e5e:	75 b3                	jne    c0023e13 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e60:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e64:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e68:	83 c4 1c             	add    esp,0x1c
c0023e6b:	5b                   	pop    ebx
c0023e6c:	5e                   	pop    esi
c0023e6d:	5f                   	pop    edi
c0023e6e:	5d                   	pop    ebp
c0023e6f:	e9 b0 fe ff ff       	jmp    c0023d24 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023e74 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023e74:	55                   	push   ebp
c0023e75:	57                   	push   edi
c0023e76:	56                   	push   esi
c0023e77:	53                   	push   ebx
c0023e78:	31 db                	xor    ebx,ebx
c0023e7a:	83 ec 0c             	sub    esp,0xc
c0023e7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023e81:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023e85:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023e88:	f7 c7 01 00 00 00    	test   edi,0x1
c0023e8e:	0f 84 aa 00 00 00    	je     c0023f3e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023e94:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023e98:	89 d8                	mov    eax,ebx
c0023e9a:	c1 e0 07             	shl    eax,0x7
c0023e9d:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023ea4:	55                   	push   ebp
c0023ea5:	56                   	push   esi
c0023ea6:	e8 31 fe ff ff       	call   c0023cdc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023eab:	5a                   	pop    edx
c0023eac:	83 f8 01             	cmp    eax,0x1
c0023eaf:	59                   	pop    ecx
c0023eb0:	75 30                	jne    c0023ee2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023eb2:	50                   	push   eax
c0023eb3:	50                   	push   eax
c0023eb4:	53                   	push   ebx
c0023eb5:	68 c5 cc 02 c0       	push   0xc002ccc5
c0023eba:	e8 87 f0 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023ebf:	83 c4 0c             	add    esp,0xc
c0023ec2:	53                   	push   ebx
c0023ec3:	55                   	push   ebp
c0023ec4:	56                   	push   esi
c0023ec5:	e8 a4 fe ff ff       	call   c0023d6e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023eca:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023ed1:	e8 6a b9 fe ff       	call   c000f840 <malloc>
c0023ed6:	89 c5                	mov    ebp,eax
c0023ed8:	89 04 24             	mov    DWORD PTR [esp],eax
c0023edb:	e8 60 0d 00 00       	call   c0024c40 <SATA::SATA()>
c0023ee0:	eb 33                	jmp    c0023f15 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023ee2:	83 f8 04             	cmp    eax,0x4
c0023ee5:	75 47                	jne    c0023f2e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023ee7:	50                   	push   eax
c0023ee8:	50                   	push   eax
c0023ee9:	53                   	push   ebx
c0023eea:	68 dc cc 02 c0       	push   0xc002ccdc
c0023eef:	e8 52 f0 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023ef4:	83 c4 0c             	add    esp,0xc
c0023ef7:	53                   	push   ebx
c0023ef8:	55                   	push   ebp
c0023ef9:	56                   	push   esi
c0023efa:	e8 6f fe ff ff       	call   c0023d6e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023eff:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f06:	e8 35 b9 fe ff       	call   c000f840 <malloc>
c0023f0b:	89 c5                	mov    ebp,eax
c0023f0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f10:	e8 d7 10 00 00       	call   c0024fec <SATAPI::SATAPI()>
c0023f15:	5a                   	pop    edx
c0023f16:	59                   	pop    ecx
c0023f17:	55                   	push   ebp
c0023f18:	56                   	push   esi
c0023f19:	e8 4e 04 ff ff       	call   c001436c <Device::addChild(Device*)>
c0023f1e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f21:	56                   	push   esi
c0023f22:	6a 00                	push   0x0
c0023f24:	53                   	push   ebx
c0023f25:	55                   	push   ebp
c0023f26:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f29:	83 c4 20             	add    esp,0x20
c0023f2c:	eb 10                	jmp    c0023f3e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f2e:	50                   	push   eax
c0023f2f:	50                   	push   eax
c0023f30:	53                   	push   ebx
c0023f31:	68 f5 cc 02 c0       	push   0xc002ccf5
c0023f36:	e8 0b f0 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0023f3b:	83 c4 10             	add    esp,0x10
c0023f3e:	d1 ef                	shr    edi,1
c0023f40:	43                   	inc    ebx
c0023f41:	83 fb 20             	cmp    ebx,0x20
c0023f44:	0f 85 3e ff ff ff    	jne    c0023e88 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f4a:	83 c4 0c             	add    esp,0xc
c0023f4d:	5b                   	pop    ebx
c0023f4e:	5e                   	pop    esi
c0023f4f:	5f                   	pop    edi
c0023f50:	5d                   	pop    ebp
c0023f51:	c3                   	ret    

c0023f52 <SATABus::open(int, int, void*)>:
c0023f52:	83 ec 14             	sub    esp,0x14
c0023f55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f59:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f5f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f65:	52                   	push   edx
c0023f66:	50                   	push   eax
c0023f67:	e8 08 ff ff ff       	call   c0023e74 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023f6c:	31 c0                	xor    eax,eax
c0023f6e:	83 c4 1c             	add    esp,0x1c
c0023f71:	c3                   	ret    

c0023f72 <ATA::close(int, int, void*)>:
c0023f72:	83 ec 0c             	sub    esp,0xc
c0023f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f79:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023f7f:	85 c0                	test   eax,eax
c0023f81:	74 0c                	je     c0023f8f <ATA::close(int, int, void*)+0x1d>
c0023f83:	83 ec 0c             	sub    esp,0xc
c0023f86:	8b 10                	mov    edx,DWORD PTR [eax]
c0023f88:	50                   	push   eax
c0023f89:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023f8c:	83 c4 10             	add    esp,0x10
c0023f8f:	31 c0                	xor    eax,eax
c0023f91:	83 c4 0c             	add    esp,0xc
c0023f94:	c3                   	ret    
c0023f95:	90                   	nop

c0023f96 <ATA::powerSaving(PowerSavingLevel)>:
c0023f96:	c3                   	ret    
c0023f97:	90                   	nop

c0023f98 <ATA::ATA()>:
c0023f98:	83 ec 0c             	sub    esp,0xc
c0023f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f9f:	83 ec 04             	sub    esp,0x4
c0023fa2:	68 00 02 00 00       	push   0x200
c0023fa7:	68 dd cd 02 c0       	push   0xc002cddd
c0023fac:	50                   	push   eax
c0023fad:	e8 de 07 ff ff       	call   c0014790 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023fb2:	83 c4 10             	add    esp,0x10
c0023fb5:	ba 60 cd 02 c0       	mov    edx,0xc002cd60
c0023fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fbe:	89 10                	mov    DWORD PTR [eax],edx
c0023fc0:	90                   	nop
c0023fc1:	83 c4 0c             	add    esp,0xc
c0023fc4:	c3                   	ret    
c0023fc5:	90                   	nop

c0023fc6 <ATA::flush(bool)>:
c0023fc6:	53                   	push   ebx
c0023fc7:	83 ec 08             	sub    esp,0x8
c0023fca:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023fcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023fd3:	19 c0                	sbb    eax,eax
c0023fd5:	83 e0 fd             	and    eax,0xfffffffd
c0023fd8:	05 ea 00 00 00       	add    eax,0xea
c0023fdd:	50                   	push   eax
c0023fde:	6a 07                	push   0x7
c0023fe0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fe7:	50                   	push   eax
c0023fe8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fee:	e8 dd ef ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ff3:	83 c4 0c             	add    esp,0xc
c0023ff6:	6a 00                	push   0x0
c0023ff8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fff:	50                   	push   eax
c0024000:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024006:	e8 71 fb ff ff       	call   c0023b7c <IDE::polling(unsigned char, unsigned int)>
c002400b:	83 c4 18             	add    esp,0x18
c002400e:	5b                   	pop    ebx
c002400f:	c3                   	ret    

c0024010 <ATA::readyForCommand()>:
c0024010:	56                   	push   esi
c0024011:	53                   	push   ebx
c0024012:	31 db                	xor    ebx,ebx
c0024014:	50                   	push   eax
c0024015:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024019:	50                   	push   eax
c002401a:	6a 0c                	push   0xc
c002401c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024023:	50                   	push   eax
c0024024:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002402a:	e8 61 f0 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c002402f:	83 c4 10             	add    esp,0x10
c0024032:	a8 88                	test   al,0x88
c0024034:	74 23                	je     c0024059 <ATA::readyForCommand()+0x49>
c0024036:	43                   	inc    ebx
c0024037:	83 fb 63             	cmp    ebx,0x63
c002403a:	7e dd                	jle    c0024019 <ATA::readyForCommand()+0x9>
c002403c:	51                   	push   ecx
c002403d:	51                   	push   ecx
c002403e:	6a 00                	push   0x0
c0024040:	68 40 42 0f 00       	push   0xf4240
c0024045:	e8 c8 a2 ff ff       	call   c001e312 <nanoSleep(unsigned long long)>
c002404a:	83 c4 10             	add    esp,0x10
c002404d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024053:	75 c4                	jne    c0024019 <ATA::readyForCommand()+0x9>
c0024055:	31 c0                	xor    eax,eax
c0024057:	eb 02                	jmp    c002405b <ATA::readyForCommand()+0x4b>
c0024059:	b0 01                	mov    al,0x1
c002405b:	5a                   	pop    edx
c002405c:	5b                   	pop    ebx
c002405d:	5e                   	pop    esi
c002405e:	c3                   	ret    
c002405f:	90                   	nop

c0024060 <ATA::access(unsigned long long, int, void*, bool)>:
c0024060:	55                   	push   ebp
c0024061:	57                   	push   edi
c0024062:	56                   	push   esi
c0024063:	53                   	push   ebx
c0024064:	83 ec 2c             	sub    esp,0x2c
c0024067:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002406b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002406f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024073:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024077:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002407b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002407f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024083:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024089:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002408d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024093:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024097:	c1 e0 06             	shl    eax,0x6
c002409a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00240a2:	74 5d                	je     c0024101 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00240a4:	89 fa                	mov    edx,edi
c00240a6:	89 f0                	mov    eax,esi
c00240a8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00240ac:	c1 ea 1c             	shr    edx,0x1c
c00240af:	89 d1                	mov    ecx,edx
c00240b1:	09 c1                	or     ecx,eax
c00240b3:	74 25                	je     c00240da <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00240b5:	31 ed                	xor    ebp,ebp
c00240b7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00240be:	89 fa                	mov    edx,edi
c00240c0:	89 f0                	mov    eax,esi
c00240c2:	0f ad d0             	shrd   eax,edx,cl
c00240c5:	d3 ea                	shr    edx,cl
c00240c7:	f6 c1 20             	test   cl,0x20
c00240ca:	74 02                	je     c00240ce <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00240cc:	89 d0                	mov    eax,edx
c00240ce:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00240d2:	45                   	inc    ebp
c00240d3:	83 fd 06             	cmp    ebp,0x6
c00240d6:	75 df                	jne    c00240b7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00240d8:	eb 76                	jmp    c0024150 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00240da:	89 f0                	mov    eax,esi
c00240dc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00240e1:	89 fa                	mov    edx,edi
c00240e3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00240ea:	0f ac d0 10          	shrd   eax,edx,0x10
c00240ee:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00240f3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00240f7:	c1 ee 18             	shr    esi,0x18
c00240fa:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00240ff:	eb 56                	jmp    c0024157 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024101:	6a 00                	push   0x0
c0024103:	6a 3f                	push   0x3f
c0024105:	57                   	push   edi
c0024106:	56                   	push   esi
c0024107:	e8 90 29 00 00       	call   c0026a9c <__umoddi3>
c002410c:	83 c4 10             	add    esp,0x10
c002410f:	40                   	inc    eax
c0024110:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024114:	6a 00                	push   0x0
c0024116:	68 f0 03 00 00       	push   0x3f0
c002411b:	57                   	push   edi
c002411c:	56                   	push   esi
c002411d:	e8 7a 28 00 00       	call   c002699c <__udivdi3>
c0024122:	83 c4 10             	add    esp,0x10
c0024125:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002412a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024131:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024136:	6a 00                	push   0x0
c0024138:	6a 3f                	push   0x3f
c002413a:	57                   	push   edi
c002413b:	56                   	push   esi
c002413c:	e8 5b 28 00 00       	call   c002699c <__udivdi3>
c0024141:	83 c4 10             	add    esp,0x10
c0024144:	89 c6                	mov    esi,eax
c0024146:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002414b:	83 e6 0f             	and    esi,0xf
c002414e:	eb 07                	jmp    c0024157 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024150:	31 f6                	xor    esi,esi
c0024152:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024157:	bf 01 00 00 00       	mov    edi,0x1
c002415c:	50                   	push   eax
c002415d:	6a 00                	push   0x0
c002415f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024166:	50                   	push   eax
c0024167:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002416b:	e8 6c f0 ff ff       	call   c00231dc <IDE::enableIRQs(unsigned char, bool)>
c0024170:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024173:	e8 98 fe ff ff       	call   c0024010 <ATA::readyForCommand()>
c0024178:	83 c4 10             	add    esp,0x10
c002417b:	84 c0                	test   al,al
c002417d:	0f 84 5a 02 00 00    	je     c00243dd <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024183:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024189:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002418f:	c1 e0 04             	shl    eax,0x4
c0024192:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024199:	09 c6                	or     esi,eax
c002419b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00241a0:	75 05                	jne    c00241a7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00241a2:	83 ce a0             	or     esi,0xffffffa0
c00241a5:	eb 03                	jmp    c00241aa <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00241a7:	83 ce e0             	or     esi,0xffffffe0
c00241aa:	89 f0                	mov    eax,esi
c00241ac:	0f b6 f0             	movzx  esi,al
c00241af:	56                   	push   esi
c00241b0:	6a 06                	push   0x6
c00241b2:	51                   	push   ecx
c00241b3:	52                   	push   edx
c00241b4:	e8 17 ee ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241b9:	83 c4 10             	add    esp,0x10
c00241bc:	6a 00                	push   0x0
c00241be:	6a 01                	push   0x1
c00241c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241c7:	50                   	push   eax
c00241c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241ce:	e8 fd ed ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241d3:	83 c4 10             	add    esp,0x10
c00241d6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00241db:	75 6e                	jne    c002424b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00241dd:	6a 00                	push   0x0
c00241df:	6a 08                	push   0x8
c00241e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241e8:	50                   	push   eax
c00241e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241ef:	e8 dc ed ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241f4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00241f9:	50                   	push   eax
c00241fa:	6a 09                	push   0x9
c00241fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024203:	50                   	push   eax
c0024204:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002420a:	e8 c1 ed ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002420f:	83 c4 20             	add    esp,0x20
c0024212:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024217:	50                   	push   eax
c0024218:	6a 0a                	push   0xa
c002421a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024221:	50                   	push   eax
c0024222:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024228:	e8 a3 ed ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002422d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024232:	50                   	push   eax
c0024233:	6a 0b                	push   0xb
c0024235:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002423c:	50                   	push   eax
c002423d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024243:	e8 88 ed ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024248:	83 c4 20             	add    esp,0x20
c002424b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024250:	50                   	push   eax
c0024251:	6a 02                	push   0x2
c0024253:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002425a:	50                   	push   eax
c002425b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024261:	e8 6a ed ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024266:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002426b:	50                   	push   eax
c002426c:	6a 03                	push   0x3
c002426e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024275:	50                   	push   eax
c0024276:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002427c:	e8 4f ed ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024281:	83 c4 20             	add    esp,0x20
c0024284:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024289:	50                   	push   eax
c002428a:	6a 04                	push   0x4
c002428c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024293:	50                   	push   eax
c0024294:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002429a:	e8 31 ed ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002429f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00242a4:	50                   	push   eax
c00242a5:	6a 05                	push   0x5
c00242a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ae:	50                   	push   eax
c00242af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242b5:	e8 16 ed ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ba:	83 c4 20             	add    esp,0x20
c00242bd:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242c2:	0f 94 c0             	sete   al
c00242c5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00242ca:	74 09                	je     c00242d5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00242cc:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00242d3:	eb 07                	jmp    c00242dc <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00242d5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00242dc:	0f b6 c0             	movzx  eax,al
c00242df:	50                   	push   eax
c00242e0:	6a 07                	push   0x7
c00242e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242e9:	50                   	push   eax
c00242ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242f0:	e8 db ec ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242f5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00242f9:	83 c4 10             	add    esp,0x10
c00242fc:	85 f6                	test   esi,esi
c00242fe:	0f 84 ba 00 00 00    	je     c00243be <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024304:	50                   	push   eax
c0024305:	6a 01                	push   0x1
c0024307:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002430e:	50                   	push   eax
c002430f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024315:	e8 62 f8 ff ff       	call   c0023b7c <IDE::polling(unsigned char, unsigned int)>
c002431a:	83 c4 10             	add    esp,0x10
c002431d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024323:	84 c0                	test   al,al
c0024325:	74 2c                	je     c0024353 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024327:	0f b6 f8             	movzx  edi,al
c002432a:	0f b6 d2             	movzx  edx,dl
c002432d:	57                   	push   edi
c002432e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024335:	50                   	push   eax
c0024336:	52                   	push   edx
c0024337:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002433d:	e8 a4 f6 ff ff       	call   c00239e6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024342:	c7 04 24 38 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd38
c0024349:	e8 f8 eb fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c002434e:	e9 87 00 00 00       	jmp    c00243da <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024353:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024358:	74 33                	je     c002438d <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002435a:	31 ed                	xor    ebp,ebp
c002435c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024360:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024364:	50                   	push   eax
c0024365:	50                   	push   eax
c0024366:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002436d:	50                   	push   eax
c002436e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024374:	e8 45 ec ff ff       	call   c0022fbe <IDE::getBase(unsigned char)>
c0024379:	89 c2                	mov    edx,eax
c002437b:	89 f8                	mov    eax,edi
c002437d:	66 ef                	out    dx,ax
c002437f:	45                   	inc    ebp
c0024380:	83 c4 10             	add    esp,0x10
c0024383:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024389:	75 d1                	jne    c002435c <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002438b:	eb 23                	jmp    c00243b0 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002438d:	0f b6 d2             	movzx  edx,dl
c0024390:	51                   	push   ecx
c0024391:	51                   	push   ecx
c0024392:	52                   	push   edx
c0024393:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024399:	e8 20 ec ff ff       	call   c0022fbe <IDE::getBase(unsigned char)>
c002439e:	b9 00 01 00 00       	mov    ecx,0x100
c00243a3:	89 c2                	mov    edx,eax
c00243a5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00243a9:	fc                   	cld    
c00243aa:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00243ad:	83 c4 10             	add    esp,0x10
c00243b0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00243b8:	4e                   	dec    esi
c00243b9:	e9 3e ff ff ff       	jmp    c00242fc <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00243be:	31 ff                	xor    edi,edi
c00243c0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243c5:	74 16                	je     c00243dd <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00243c7:	50                   	push   eax
c00243c8:	50                   	push   eax
c00243c9:	31 c0                	xor    eax,eax
c00243cb:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00243d0:	0f 94 c0             	sete   al
c00243d3:	50                   	push   eax
c00243d4:	53                   	push   ebx
c00243d5:	e8 ec fb ff ff       	call   c0023fc6 <ATA::flush(bool)>
c00243da:	83 c4 10             	add    esp,0x10
c00243dd:	83 c4 2c             	add    esp,0x2c
c00243e0:	89 f8                	mov    eax,edi
c00243e2:	5b                   	pop    ebx
c00243e3:	5e                   	pop    esi
c00243e4:	5f                   	pop    edi
c00243e5:	5d                   	pop    ebp
c00243e6:	c3                   	ret    
c00243e7:	90                   	nop

c00243e8 <ATA::read(unsigned long long, int, void*)>:
c00243e8:	57                   	push   edi
c00243e9:	b8 04 00 00 00       	mov    eax,0x4
c00243ee:	56                   	push   esi
c00243ef:	53                   	push   ebx
c00243f0:	83 ec 10             	sub    esp,0x10
c00243f3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00243f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00243fb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00243fe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024402:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024406:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002440c:	77 3b                	ja     c0024449 <ATA::read(unsigned long long, int, void*)+0x61>
c002440e:	b8 06 00 00 00       	mov    eax,0x6
c0024413:	85 d2                	test   edx,edx
c0024415:	74 32                	je     c0024449 <ATA::read(unsigned long long, int, void*)+0x61>
c0024417:	50                   	push   eax
c0024418:	50                   	push   eax
c0024419:	6a 00                	push   0x0
c002441b:	52                   	push   edx
c002441c:	53                   	push   ebx
c002441d:	57                   	push   edi
c002441e:	56                   	push   esi
c002441f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024423:	e8 38 fc ff ff       	call   c0024060 <ATA::access(unsigned long long, int, void*, bool)>
c0024428:	83 c4 20             	add    esp,0x20
c002442b:	85 c0                	test   eax,eax
c002442d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024431:	75 11                	jne    c0024444 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024433:	01 1d 08 27 03 c0    	add    DWORD PTR ds:0xc0032708,ebx
c0024439:	e8 b6 c5 fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c002443e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024442:	eb 05                	jmp    c0024449 <ATA::read(unsigned long long, int, void*)+0x61>
c0024444:	b8 01 00 00 00       	mov    eax,0x1
c0024449:	83 c4 10             	add    esp,0x10
c002444c:	5b                   	pop    ebx
c002444d:	5e                   	pop    esi
c002444e:	5f                   	pop    edi
c002444f:	c3                   	ret    

c0024450 <ATA::write(unsigned long long, int, void*)>:
c0024450:	57                   	push   edi
c0024451:	b8 04 00 00 00       	mov    eax,0x4
c0024456:	56                   	push   esi
c0024457:	53                   	push   ebx
c0024458:	83 ec 10             	sub    esp,0x10
c002445b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002445f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024463:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024466:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002446a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002446e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024474:	77 3b                	ja     c00244b1 <ATA::write(unsigned long long, int, void*)+0x61>
c0024476:	b8 06 00 00 00       	mov    eax,0x6
c002447b:	85 d2                	test   edx,edx
c002447d:	74 32                	je     c00244b1 <ATA::write(unsigned long long, int, void*)+0x61>
c002447f:	50                   	push   eax
c0024480:	50                   	push   eax
c0024481:	6a 01                	push   0x1
c0024483:	52                   	push   edx
c0024484:	53                   	push   ebx
c0024485:	57                   	push   edi
c0024486:	56                   	push   esi
c0024487:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002448b:	e8 d0 fb ff ff       	call   c0024060 <ATA::access(unsigned long long, int, void*, bool)>
c0024490:	83 c4 20             	add    esp,0x20
c0024493:	85 c0                	test   eax,eax
c0024495:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024499:	75 11                	jne    c00244ac <ATA::write(unsigned long long, int, void*)+0x5c>
c002449b:	01 1d 04 27 03 c0    	add    DWORD PTR ds:0xc0032704,ebx
c00244a1:	e8 4e c5 fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c00244a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244aa:	eb 05                	jmp    c00244b1 <ATA::write(unsigned long long, int, void*)+0x61>
c00244ac:	b8 01 00 00 00       	mov    eax,0x1
c00244b1:	83 c4 10             	add    esp,0x10
c00244b4:	5b                   	pop    ebx
c00244b5:	5e                   	pop    esi
c00244b6:	5f                   	pop    edi
c00244b7:	c3                   	ret    

c00244b8 <ATA::detectCHS()>:
c00244b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00244bc:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00244c2:	c1 e0 06             	shl    eax,0x6
c00244c5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00244cb:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00244d5:	c7 44 24 04 43 cd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cd43
c00244dd:	e9 05 61 ff ff       	jmp    c001a5e7 <Krnl::panic(char const*)>

c00244e2 <ATA::open(int, int, void*)>:
c00244e2:	53                   	push   ebx
c00244e3:	83 ec 08             	sub    esp,0x8
c00244e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00244ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00244ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00244f2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00244f8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00244fe:	c1 e0 06             	shl    eax,0x6
c0024501:	01 d0                	add    eax,edx
c0024503:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002450a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024510:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024517:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024521:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024527:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002452e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024535:	75 0c                	jne    c0024543 <ATA::open(int, int, void*)+0x61>
c0024537:	83 ec 0c             	sub    esp,0xc
c002453a:	53                   	push   ebx
c002453b:	e8 78 ff ff ff       	call   c00244b8 <ATA::detectCHS()>
c0024540:	83 c4 10             	add    esp,0x10
c0024543:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024549:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002454f:	c1 e0 06             	shl    eax,0x6
c0024552:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024559:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024563:	d1 e8                	shr    eax,1
c0024565:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002456b:	6a 04                	push   0x4
c002456d:	6a 0c                	push   0xc
c002456f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024576:	50                   	push   eax
c0024577:	52                   	push   edx
c0024578:	e8 53 ea ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002457d:	90                   	nop
c002457e:	90                   	nop
c002457f:	6a 00                	push   0x0
c0024581:	6a 0c                	push   0xc
c0024583:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002458a:	50                   	push   eax
c002458b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024591:	e8 3a ea ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024596:	83 c4 14             	add    esp,0x14
c0024599:	53                   	push   ebx
c002459a:	e8 59 02 ff ff       	call   c00147f8 <PhysicalDisk::startCache()>
c002459f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245a2:	e8 c7 23 ff ff       	call   c001696e <createPartitionsForDisk(PhysicalDisk*)>
c00245a7:	31 c0                	xor    eax,eax
c00245a9:	83 c4 18             	add    esp,0x18
c00245ac:	5b                   	pop    ebx
c00245ad:	c3                   	ret    

c00245ae <ATAPI::write(unsigned long long, int, void*)>:
c00245ae:	b8 03 00 00 00       	mov    eax,0x3
c00245b3:	c3                   	ret    

c00245b4 <ATAPI::close(int, int, void*)>:
c00245b4:	83 ec 0c             	sub    esp,0xc
c00245b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00245c1:	85 c0                	test   eax,eax
c00245c3:	74 0c                	je     c00245d1 <ATAPI::close(int, int, void*)+0x1d>
c00245c5:	83 ec 0c             	sub    esp,0xc
c00245c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00245ca:	50                   	push   eax
c00245cb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00245ce:	83 c4 10             	add    esp,0x10
c00245d1:	31 c0                	xor    eax,eax
c00245d3:	83 c4 0c             	add    esp,0xc
c00245d6:	c3                   	ret    
c00245d7:	90                   	nop

c00245d8 <ATAPI::ATAPI()>:
c00245d8:	83 ec 0c             	sub    esp,0xc
c00245db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245df:	83 ec 04             	sub    esp,0x4
c00245e2:	68 00 08 00 00       	push   0x800
c00245e7:	68 7d ce 02 c0       	push   0xc002ce7d
c00245ec:	50                   	push   eax
c00245ed:	e8 9e 01 ff ff       	call   c0014790 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00245f2:	83 c4 10             	add    esp,0x10
c00245f5:	ba 98 cd 02 c0       	mov    edx,0xc002cd98
c00245fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245fe:	89 10                	mov    DWORD PTR [eax],edx
c0024600:	90                   	nop
c0024601:	83 c4 0c             	add    esp,0xc
c0024604:	c3                   	ret    
c0024605:	90                   	nop

c0024606 <ATAPI::readyForCommand()>:
c0024606:	56                   	push   esi
c0024607:	53                   	push   ebx
c0024608:	31 db                	xor    ebx,ebx
c002460a:	50                   	push   eax
c002460b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002460f:	50                   	push   eax
c0024610:	6a 0c                	push   0xc
c0024612:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024619:	50                   	push   eax
c002461a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024620:	e8 6b ea ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c0024625:	83 c4 10             	add    esp,0x10
c0024628:	a8 88                	test   al,0x88
c002462a:	74 23                	je     c002464f <ATAPI::readyForCommand()+0x49>
c002462c:	43                   	inc    ebx
c002462d:	83 fb 63             	cmp    ebx,0x63
c0024630:	7e dd                	jle    c002460f <ATAPI::readyForCommand()+0x9>
c0024632:	51                   	push   ecx
c0024633:	51                   	push   ecx
c0024634:	6a 00                	push   0x0
c0024636:	68 40 42 0f 00       	push   0xf4240
c002463b:	e8 d2 9c ff ff       	call   c001e312 <nanoSleep(unsigned long long)>
c0024640:	83 c4 10             	add    esp,0x10
c0024643:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024649:	75 c4                	jne    c002460f <ATAPI::readyForCommand()+0x9>
c002464b:	31 c0                	xor    eax,eax
c002464d:	eb 02                	jmp    c0024651 <ATAPI::readyForCommand()+0x4b>
c002464f:	b0 01                	mov    al,0x1
c0024651:	5a                   	pop    edx
c0024652:	5b                   	pop    ebx
c0024653:	5e                   	pop    esi
c0024654:	c3                   	ret    
c0024655:	90                   	nop

c0024656 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024656:	55                   	push   ebp
c0024657:	57                   	push   edi
c0024658:	56                   	push   esi
c0024659:	53                   	push   ebx
c002465a:	83 ec 20             	sub    esp,0x20
c002465d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024661:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024665:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024669:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002466d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024671:	6a 01                	push   0x1
c0024673:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002467a:	50                   	push   eax
c002467b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024681:	e8 56 eb ff ff       	call   c00231dc <IDE::enableIRQs(unsigned char, bool)>
c0024686:	5e                   	pop    esi
c0024687:	58                   	pop    eax
c0024688:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002468f:	50                   	push   eax
c0024690:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024696:	e8 0f e9 ff ff       	call   c0022faa <IDE::prepareInterrupt(unsigned char)>
c002469b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002469e:	e8 63 ff ff ff       	call   c0024606 <ATAPI::readyForCommand()>
c00246a3:	83 c4 10             	add    esp,0x10
c00246a6:	84 c0                	test   al,al
c00246a8:	75 0a                	jne    c00246b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00246aa:	bb 01 00 00 00       	mov    ebx,0x1
c00246af:	e9 57 02 00 00       	jmp    c002490b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246b4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00246ba:	c1 e0 04             	shl    eax,0x4
c00246bd:	0f b6 c0             	movzx  eax,al
c00246c0:	50                   	push   eax
c00246c1:	6a 06                	push   0x6
c00246c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246ca:	50                   	push   eax
c00246cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246d1:	e8 fa e8 ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246d6:	6a 00                	push   0x0
c00246d8:	6a 01                	push   0x1
c00246da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246e1:	50                   	push   eax
c00246e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246e8:	e8 e3 e8 ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246ed:	83 c4 20             	add    esp,0x20
c00246f0:	0f b6 c3             	movzx  eax,bl
c00246f3:	0f b6 df             	movzx  ebx,bh
c00246f6:	50                   	push   eax
c00246f7:	6a 04                	push   0x4
c00246f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024700:	50                   	push   eax
c0024701:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024707:	e8 c4 e8 ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002470c:	53                   	push   ebx
c002470d:	6a 05                	push   0x5
c002470f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024716:	50                   	push   eax
c0024717:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002471d:	e8 ae e8 ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024722:	83 c4 20             	add    esp,0x20
c0024725:	68 a0 00 00 00       	push   0xa0
c002472a:	6a 07                	push   0x7
c002472c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024733:	50                   	push   eax
c0024734:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002473a:	e8 91 e8 ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002473f:	83 c4 0c             	add    esp,0xc
c0024742:	6a 01                	push   0x1
c0024744:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002474b:	50                   	push   eax
c002474c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024752:	e8 25 f4 ff ff       	call   c0023b7c <IDE::polling(unsigned char, unsigned int)>
c0024757:	83 c4 10             	add    esp,0x10
c002475a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024760:	84 c0                	test   al,al
c0024762:	74 23                	je     c0024787 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024764:	0f b6 d8             	movzx  ebx,al
c0024767:	0f b6 d2             	movzx  edx,dl
c002476a:	53                   	push   ebx
c002476b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024772:	50                   	push   eax
c0024773:	52                   	push   edx
c0024774:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002477a:	e8 67 f2 ff ff       	call   c00239e6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002477f:	83 c4 10             	add    esp,0x10
c0024782:	e9 84 01 00 00       	jmp    c002490b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024787:	0f b6 d2             	movzx  edx,dl
c002478a:	53                   	push   ebx
c002478b:	53                   	push   ebx
c002478c:	52                   	push   edx
c002478d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024793:	e8 26 e8 ff ff       	call   c0022fbe <IDE::getBase(unsigned char)>
c0024798:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002479c:	b9 06 00 00 00       	mov    ecx,0x6
c00247a1:	89 c2                	mov    edx,eax
c00247a3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00247a6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00247aa:	83 c4 10             	add    esp,0x10
c00247ad:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247b3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247ba:	85 db                	test   ebx,ebx
c00247bc:	0f 84 ec 00 00 00    	je     c00248ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00247c2:	51                   	push   ecx
c00247c3:	51                   	push   ecx
c00247c4:	52                   	push   edx
c00247c5:	50                   	push   eax
c00247c6:	e8 73 e9 ff ff       	call   c002313e <IDE::waitInterrupt(unsigned char)>
c00247cb:	83 c4 10             	add    esp,0x10
c00247ce:	84 c0                	test   al,al
c00247d0:	0f 84 d4 fe ff ff    	je     c00246aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247d6:	56                   	push   esi
c00247d7:	56                   	push   esi
c00247d8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247df:	50                   	push   eax
c00247e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247e6:	e8 bf e7 ff ff       	call   c0022faa <IDE::prepareInterrupt(unsigned char)>
c00247eb:	83 c4 0c             	add    esp,0xc
c00247ee:	6a 04                	push   0x4
c00247f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247f7:	50                   	push   eax
c00247f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247fe:	e8 8d e8 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c0024803:	83 c4 0c             	add    esp,0xc
c0024806:	89 c6                	mov    esi,eax
c0024808:	6a 05                	push   0x5
c002480a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024811:	50                   	push   eax
c0024812:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024818:	e8 73 e8 ff ff       	call   c0023090 <IDE::read(unsigned char, unsigned char)>
c002481d:	89 f1                	mov    ecx,esi
c002481f:	0f b6 c0             	movzx  eax,al
c0024822:	0f b6 f1             	movzx  esi,cl
c0024825:	c1 e0 08             	shl    eax,0x8
c0024828:	09 c6                	or     esi,eax
c002482a:	d1 fe                	sar    esi,1
c002482c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024830:	83 c4 10             	add    esp,0x10
c0024833:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024838:	74 41                	je     c002487b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002483a:	31 c9                	xor    ecx,ecx
c002483c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024842:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024849:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002484d:	75 0a                	jne    c0024859 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002484f:	01 c9                	add    ecx,ecx
c0024851:	01 cd                	add    ebp,ecx
c0024853:	4b                   	dec    ebx
c0024854:	e9 54 ff ff ff       	jmp    c00247ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024859:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002485e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024862:	51                   	push   ecx
c0024863:	51                   	push   ecx
c0024864:	52                   	push   edx
c0024865:	50                   	push   eax
c0024866:	e8 53 e7 ff ff       	call   c0022fbe <IDE::getBase(unsigned char)>
c002486b:	89 c2                	mov    edx,eax
c002486d:	89 f0                	mov    eax,esi
c002486f:	66 ef                	out    dx,ax
c0024871:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024875:	83 c4 10             	add    esp,0x10
c0024878:	41                   	inc    ecx
c0024879:	eb c1                	jmp    c002483c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002487b:	31 f6                	xor    esi,esi
c002487d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024883:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002488a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002488e:	75 06                	jne    c0024896 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024890:	01 f6                	add    esi,esi
c0024892:	01 f5                	add    ebp,esi
c0024894:	eb bd                	jmp    c0024853 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024896:	51                   	push   ecx
c0024897:	51                   	push   ecx
c0024898:	52                   	push   edx
c0024899:	50                   	push   eax
c002489a:	e8 1f e7 ff ff       	call   c0022fbe <IDE::getBase(unsigned char)>
c002489f:	89 c2                	mov    edx,eax
c00248a1:	66 ed                	in     ax,dx
c00248a3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00248a8:	83 c4 10             	add    esp,0x10
c00248ab:	46                   	inc    esi
c00248ac:	eb cf                	jmp    c002487d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00248ae:	51                   	push   ecx
c00248af:	51                   	push   ecx
c00248b0:	52                   	push   edx
c00248b1:	50                   	push   eax
c00248b2:	e8 87 e8 ff ff       	call   c002313e <IDE::waitInterrupt(unsigned char)>
c00248b7:	83 c4 10             	add    esp,0x10
c00248ba:	84 c0                	test   al,al
c00248bc:	0f 84 e8 fd ff ff    	je     c00246aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248c2:	bb a0 86 01 00       	mov    ebx,0x186a0
c00248c7:	52                   	push   edx
c00248c8:	52                   	push   edx
c00248c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248d0:	50                   	push   eax
c00248d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248d7:	e8 ce e6 ff ff       	call   c0022faa <IDE::prepareInterrupt(unsigned char)>
c00248dc:	83 c4 10             	add    esp,0x10
c00248df:	50                   	push   eax
c00248e0:	50                   	push   eax
c00248e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248e8:	50                   	push   eax
c00248e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248ef:	e8 ca e6 ff ff       	call   c0022fbe <IDE::getBase(unsigned char)>
c00248f4:	8d 50 07             	lea    edx,[eax+0x7]
c00248f7:	ec                   	in     al,dx
c00248f8:	83 c4 10             	add    esp,0x10
c00248fb:	a8 88                	test   al,0x88
c00248fd:	74 0a                	je     c0024909 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00248ff:	4b                   	dec    ebx
c0024900:	75 dd                	jne    c00248df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024902:	bb 02 00 00 00       	mov    ebx,0x2
c0024907:	eb 02                	jmp    c002490b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024909:	31 db                	xor    ebx,ebx
c002490b:	83 c4 1c             	add    esp,0x1c
c002490e:	89 d8                	mov    eax,ebx
c0024910:	5b                   	pop    ebx
c0024911:	5e                   	pop    esi
c0024912:	5f                   	pop    edi
c0024913:	5d                   	pop    ebp
c0024914:	c3                   	ret    
c0024915:	90                   	nop

c0024916 <ATAPI::diskRemoved()>:
c0024916:	83 ec 18             	sub    esp,0x18
c0024919:	68 89 ce 02 c0       	push   0xc002ce89
c002491e:	e8 23 e6 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0024923:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024927:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002492e:	83 c4 1c             	add    esp,0x1c
c0024931:	c3                   	ret    

c0024932 <ATAPI::eject()>:
c0024932:	57                   	push   edi
c0024933:	b9 03 00 00 00       	mov    ecx,0x3
c0024938:	53                   	push   ebx
c0024939:	83 ec 14             	sub    esp,0x14
c002493c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024940:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024944:	fc                   	cld    
c0024945:	31 c0                	xor    eax,eax
c0024947:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024949:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002494e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024953:	50                   	push   eax
c0024954:	50                   	push   eax
c0024955:	6a 00                	push   0x0
c0024957:	6a 00                	push   0x0
c0024959:	6a 00                	push   0x0
c002495b:	6a 02                	push   0x2
c002495d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024961:	50                   	push   eax
c0024962:	53                   	push   ebx
c0024963:	e8 ee fc ff ff       	call   c0024656 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024968:	83 c4 14             	add    esp,0x14
c002496b:	53                   	push   ebx
c002496c:	e8 a5 ff ff ff       	call   c0024916 <ATAPI::diskRemoved()>
c0024971:	83 c4 24             	add    esp,0x24
c0024974:	31 c0                	xor    eax,eax
c0024976:	5b                   	pop    ebx
c0024977:	5f                   	pop    edi
c0024978:	c3                   	ret    
c0024979:	90                   	nop

c002497a <ATAPI::diskInserted()>:
c002497a:	53                   	push   ebx
c002497b:	83 ec 14             	sub    esp,0x14
c002497e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024982:	68 a0 ce 02 c0       	push   0xc002cea0
c0024987:	e8 ba e5 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c002498c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024993:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024996:	e8 5d fe fe ff       	call   c00147f8 <PhysicalDisk::startCache()>
c002499b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002499f:	83 c4 18             	add    esp,0x18
c00249a2:	5b                   	pop    ebx
c00249a3:	e9 c6 1f ff ff       	jmp    c001696e <createPartitionsForDisk(PhysicalDisk*)>

c00249a8 <ATAPI::detectMedia()>:
c00249a8:	56                   	push   esi
c00249a9:	53                   	push   ebx
c00249aa:	83 ec 28             	sub    esp,0x28
c00249ad:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249b1:	6a 0c                	push   0xc
c00249b3:	6a 00                	push   0x0
c00249b5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00249b9:	56                   	push   esi
c00249ba:	e8 b9 bd fd ff       	call   c0000778 <memset>
c00249bf:	58                   	pop    eax
c00249c0:	5a                   	pop    edx
c00249c1:	6a 00                	push   0x0
c00249c3:	6a 00                	push   0x0
c00249c5:	6a 00                	push   0x0
c00249c7:	6a 00                	push   0x0
c00249c9:	56                   	push   esi
c00249ca:	53                   	push   ebx
c00249cb:	e8 86 fc ff ff       	call   c0024656 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249d0:	83 c4 1c             	add    esp,0x1c
c00249d3:	6a 0c                	push   0xc
c00249d5:	6a 00                	push   0x0
c00249d7:	56                   	push   esi
c00249d8:	e8 9b bd fd ff       	call   c0000778 <memset>
c00249dd:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00249e2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00249e7:	59                   	pop    ecx
c00249e8:	58                   	pop    eax
c00249e9:	6a 01                	push   0x1
c00249eb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00249ef:	50                   	push   eax
c00249f0:	6a 00                	push   0x0
c00249f2:	6a 12                	push   0x12
c00249f4:	56                   	push   esi
c00249f5:	53                   	push   ebx
c00249f6:	e8 5b fc ff ff       	call   c0024656 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249fb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00249ff:	83 c4 20             	add    esp,0x20
c0024a02:	83 e0 7f             	and    eax,0x7f
c0024a05:	3c 70                	cmp    al,0x70
c0024a07:	74 15                	je     c0024a1e <ATAPI::detectMedia()+0x76>
c0024a09:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a10:	75 0c                	jne    c0024a1e <ATAPI::detectMedia()+0x76>
c0024a12:	83 ec 0c             	sub    esp,0xc
c0024a15:	53                   	push   ebx
c0024a16:	e8 5f ff ff ff       	call   c002497a <ATAPI::diskInserted()>
c0024a1b:	83 c4 10             	add    esp,0x10
c0024a1e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a22:	83 e0 0f             	and    eax,0xf
c0024a25:	3c 02                	cmp    al,0x2
c0024a27:	75 1b                	jne    c0024a44 <ATAPI::detectMedia()+0x9c>
c0024a29:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a2e:	75 2d                	jne    c0024a5d <ATAPI::detectMedia()+0xb5>
c0024a30:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a37:	74 24                	je     c0024a5d <ATAPI::detectMedia()+0xb5>
c0024a39:	83 ec 0c             	sub    esp,0xc
c0024a3c:	53                   	push   ebx
c0024a3d:	e8 d4 fe ff ff       	call   c0024916 <ATAPI::diskRemoved()>
c0024a42:	eb 16                	jmp    c0024a5a <ATAPI::detectMedia()+0xb2>
c0024a44:	84 c0                	test   al,al
c0024a46:	75 15                	jne    c0024a5d <ATAPI::detectMedia()+0xb5>
c0024a48:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a4f:	75 0c                	jne    c0024a5d <ATAPI::detectMedia()+0xb5>
c0024a51:	83 ec 0c             	sub    esp,0xc
c0024a54:	53                   	push   ebx
c0024a55:	e8 20 ff ff ff       	call   c002497a <ATAPI::diskInserted()>
c0024a5a:	83 c4 10             	add    esp,0x10
c0024a5d:	83 c4 24             	add    esp,0x24
c0024a60:	5b                   	pop    ebx
c0024a61:	5e                   	pop    esi
c0024a62:	c3                   	ret    
c0024a63:	90                   	nop

c0024a64 <ATAPI::open(int, int, void*)>:
c0024a64:	53                   	push   ebx
c0024a65:	83 ec 08             	sub    esp,0x8
c0024a68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a74:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a7a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024a80:	c1 e0 06             	shl    eax,0x6
c0024a83:	01 d0                	add    eax,edx
c0024a85:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024a8c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024a92:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024a99:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024aa3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024aa9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024ab0:	6a 04                	push   0x4
c0024ab2:	6a 0c                	push   0xc
c0024ab4:	51                   	push   ecx
c0024ab5:	52                   	push   edx
c0024ab6:	e8 15 e5 ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024abb:	90                   	nop
c0024abc:	90                   	nop
c0024abd:	6a 00                	push   0x0
c0024abf:	6a 0c                	push   0xc
c0024ac1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ac8:	50                   	push   eax
c0024ac9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024acf:	e8 fc e4 ff ff       	call   c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ad4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024adb:	83 c4 14             	add    esp,0x14
c0024ade:	53                   	push   ebx
c0024adf:	e8 c4 fe ff ff       	call   c00249a8 <ATAPI::detectMedia()>
c0024ae4:	31 c0                	xor    eax,eax
c0024ae6:	83 c4 18             	add    esp,0x18
c0024ae9:	5b                   	pop    ebx
c0024aea:	c3                   	ret    
c0024aeb:	90                   	nop

c0024aec <ATAPI::read(unsigned long long, int, void*)>:
c0024aec:	55                   	push   ebp
c0024aed:	57                   	push   edi
c0024aee:	56                   	push   esi
c0024aef:	53                   	push   ebx
c0024af0:	83 ec 1c             	sub    esp,0x1c
c0024af3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024af7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024afb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024aff:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b06:	74 41                	je     c0024b49 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b08:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b0c:	b9 03 00 00 00       	mov    ecx,0x3
c0024b11:	fc                   	cld    
c0024b12:	31 c0                	xor    eax,eax
c0024b14:	86 fb                	xchg   bl,bh
c0024b16:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b18:	c1 c3 10             	rol    ebx,0x10
c0024b1b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b20:	89 e8                	mov    eax,ebp
c0024b22:	86 fb                	xchg   bl,bh
c0024b24:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b28:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b2c:	50                   	push   eax
c0024b2d:	50                   	push   eax
c0024b2e:	55                   	push   ebp
c0024b2f:	c1 e5 0b             	shl    ebp,0xb
c0024b32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b36:	6a 00                	push   0x0
c0024b38:	55                   	push   ebp
c0024b39:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b3d:	50                   	push   eax
c0024b3e:	56                   	push   esi
c0024b3f:	e8 12 fb ff ff       	call   c0024656 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b44:	83 c4 20             	add    esp,0x20
c0024b47:	eb 1a                	jmp    c0024b63 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b49:	83 ec 0c             	sub    esp,0xc
c0024b4c:	56                   	push   esi
c0024b4d:	e8 56 fe ff ff       	call   c00249a8 <ATAPI::detectMedia()>
c0024b52:	83 c4 10             	add    esp,0x10
c0024b55:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b5c:	75 aa                	jne    c0024b08 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b5e:	b8 02 00 00 00       	mov    eax,0x2
c0024b63:	83 c4 1c             	add    esp,0x1c
c0024b66:	5b                   	pop    ebx
c0024b67:	5e                   	pop    esi
c0024b68:	5f                   	pop    edi
c0024b69:	5d                   	pop    ebp
c0024b6a:	c3                   	ret    
c0024b6b:	90                   	nop

c0024b6c <SATA::close(int, int, void*)>:
c0024b6c:	83 ec 0c             	sub    esp,0xc
c0024b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b73:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b79:	85 c0                	test   eax,eax
c0024b7b:	74 0c                	je     c0024b89 <SATA::close(int, int, void*)+0x1d>
c0024b7d:	83 ec 0c             	sub    esp,0xc
c0024b80:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b82:	50                   	push   eax
c0024b83:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b86:	83 c4 10             	add    esp,0x10
c0024b89:	31 c0                	xor    eax,eax
c0024b8b:	83 c4 0c             	add    esp,0xc
c0024b8e:	c3                   	ret    
c0024b8f:	90                   	nop

c0024b90 <SATA::powerSaving(PowerSavingLevel)>:
c0024b90:	c3                   	ret    
c0024b91:	90                   	nop

c0024b92 <SATA::open(int, int, void*)>:
c0024b92:	56                   	push   esi
c0024b93:	53                   	push   ebx
c0024b94:	50                   	push   eax
c0024b95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b9d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024ba7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024bad:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024bb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024bbb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024bc5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024bcb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024bd2:	e8 0b b3 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024bd7:	89 c6                	mov    esi,eax
c0024bd9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024bdf:	81 c6 00 10 00 00    	add    esi,0x1000
c0024be5:	e8 f8 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024bea:	39 c6                	cmp    esi,eax
c0024bec:	74 10                	je     c0024bfe <SATA::open(int, int, void*)+0x6c>
c0024bee:	83 ec 0c             	sub    esp,0xc
c0024bf1:	68 c8 cd 02 c0       	push   0xc002cdc8
c0024bf6:	e8 ec 59 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0024bfb:	83 c4 10             	add    esp,0x10
c0024bfe:	83 ec 0c             	sub    esp,0xc
c0024c01:	6a 02                	push   0x2
c0024c03:	e8 97 cf fe ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0024c08:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c0e:	e8 27 d2 fe ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0024c13:	6a 03                	push   0x3
c0024c15:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c1b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c21:	50                   	push   eax
c0024c22:	e8 4f d7 fe ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c27:	83 c4 14             	add    esp,0x14
c0024c2a:	53                   	push   ebx
c0024c2b:	e8 c8 fb fe ff       	call   c00147f8 <PhysicalDisk::startCache()>
c0024c30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c33:	e8 36 1d ff ff       	call   c001696e <createPartitionsForDisk(PhysicalDisk*)>
c0024c38:	83 c4 14             	add    esp,0x14
c0024c3b:	31 c0                	xor    eax,eax
c0024c3d:	5b                   	pop    ebx
c0024c3e:	5e                   	pop    esi
c0024c3f:	c3                   	ret    

c0024c40 <SATA::SATA()>:
c0024c40:	83 ec 0c             	sub    esp,0xc
c0024c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c47:	83 ec 04             	sub    esp,0x4
c0024c4a:	68 00 02 00 00       	push   0x200
c0024c4f:	68 dc cd 02 c0       	push   0xc002cddc
c0024c54:	50                   	push   eax
c0024c55:	e8 36 fb fe ff       	call   c0014790 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c5a:	83 c4 10             	add    esp,0x10
c0024c5d:	ba 4c ce 02 c0       	mov    edx,0xc002ce4c
c0024c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c66:	89 10                	mov    DWORD PTR [eax],edx
c0024c68:	90                   	nop
c0024c69:	83 c4 0c             	add    esp,0xc
c0024c6c:	c3                   	ret    
c0024c6d:	90                   	nop

c0024c6e <SATA::access(unsigned long long, int, void*, bool)>:
c0024c6e:	55                   	push   ebp
c0024c6f:	57                   	push   edi
c0024c70:	56                   	push   esi
c0024c71:	53                   	push   ebx
c0024c72:	83 ec 2c             	sub    esp,0x2c
c0024c75:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c79:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024c7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c81:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024c85:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024c89:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024c8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c92:	7e 10                	jle    c0024ca4 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024c94:	83 ec 0c             	sub    esp,0xc
c0024c97:	68 ec cd 02 c0       	push   0xc002cdec
c0024c9c:	e8 46 59 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0024ca1:	83 c4 10             	add    esp,0x10
c0024ca4:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024caa:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024cb0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024cb6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cba:	89 f0                	mov    eax,esi
c0024cbc:	c1 e0 07             	shl    eax,0x7
c0024cbf:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024cc3:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ccd:	53                   	push   ebx
c0024cce:	8d 46 02             	lea    eax,[esi+0x2]
c0024cd1:	53                   	push   ebx
c0024cd2:	c1 e0 07             	shl    eax,0x7
c0024cd5:	bb 01 00 00 00       	mov    ebx,0x1
c0024cda:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024cde:	50                   	push   eax
c0024cdf:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024ce5:	e8 aa ef ff ff       	call   c0023c94 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024cea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024cee:	83 c4 10             	add    esp,0x10
c0024cf1:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024cf6:	0f 84 ce 01 00 00    	je     c0024eca <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024cfc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d00:	c1 e0 09             	shl    eax,0x9
c0024d03:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d0c:	74 17                	je     c0024d25 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d0e:	51                   	push   ecx
c0024d0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d13:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d17:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d1d:	e8 22 ba fd ff       	call   c0000744 <memcpy>
c0024d22:	83 c4 10             	add    esp,0x10
c0024d25:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d2b:	8d 46 02             	lea    eax,[esi+0x2]
c0024d2e:	c1 e0 07             	shl    eax,0x7
c0024d31:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d35:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d37:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d3d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d43:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d47:	c1 e1 05             	shl    ecx,0x5
c0024d4a:	01 c8                	add    eax,ecx
c0024d4c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d50:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d52:	83 e1 01             	and    ecx,0x1
c0024d55:	83 e3 bf             	and    ebx,0xffffffbf
c0024d58:	c1 e1 06             	shl    ecx,0x6
c0024d5b:	09 d9                	or     ecx,ebx
c0024d5d:	88 08                	mov    BYTE PTR [eax],cl
c0024d5f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d61:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d67:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d6d:	89 08                	mov    DWORD PTR [eax],ecx
c0024d6f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d75:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d7b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d81:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d84:	52                   	push   edx
c0024d85:	68 90 00 00 00       	push   0x90
c0024d8a:	6a 00                	push   0x0
c0024d8c:	53                   	push   ebx
c0024d8d:	e8 e6 b9 fd ff       	call   c0000778 <memset>
c0024d92:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024d98:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024d9c:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024da2:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024da6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024daa:	83 c4 10             	add    esp,0x10
c0024dad:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024db0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024db6:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024dbc:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024dc1:	09 c8                	or     eax,ecx
c0024dc3:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024dc9:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024dcc:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024dd3:	66 25 00 7f          	and    ax,0x7f00
c0024dd7:	66 0d 27 80          	or     ax,0x8027
c0024ddb:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024de0:	66 89 03             	mov    WORD PTR [ebx],ax
c0024de3:	19 c0                	sbb    eax,eax
c0024de5:	83 e0 f0             	and    eax,0xfffffff0
c0024de8:	83 c0 35             	add    eax,0x35
c0024deb:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024dee:	89 f8                	mov    eax,edi
c0024df0:	c1 e8 10             	shr    eax,0x10
c0024df3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024df6:	89 f8                	mov    eax,edi
c0024df8:	c1 e8 18             	shr    eax,0x18
c0024dfb:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024dfe:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e02:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e09:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e0c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e10:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e14:	89 f3                	mov    ebx,esi
c0024e16:	31 c0                	xor    eax,eax
c0024e18:	c1 e3 07             	shl    ebx,0x7
c0024e1b:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e1f:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e25:	80 e1 88             	and    cl,0x88
c0024e28:	74 0a                	je     c0024e34 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e2a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e2f:	74 0a                	je     c0024e3b <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e31:	40                   	inc    eax
c0024e32:	eb eb                	jmp    c0024e1f <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e34:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e39:	75 0a                	jne    c0024e45 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e3b:	83 ec 0c             	sub    esp,0xc
c0024e3e:	68 25 ce 02 c0       	push   0xc002ce25
c0024e43:	eb 56                	jmp    c0024e9b <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e45:	b8 01 00 00 00       	mov    eax,0x1
c0024e4a:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e4e:	c1 e6 07             	shl    esi,0x7
c0024e51:	d3 e0                	shl    eax,cl
c0024e53:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e57:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e5d:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e63:	85 c8                	test   eax,ecx
c0024e65:	74 20                	je     c0024e87 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e67:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024e6d:	0f ba e1 1e          	bt     ecx,0x1e
c0024e71:	73 ea                	jae    c0024e5d <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024e73:	83 ec 0c             	sub    esp,0xc
c0024e76:	31 db                	xor    ebx,ebx
c0024e78:	68 33 ce 02 c0       	push   0xc002ce33
c0024e7d:	e8 65 57 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0024e82:	83 c4 10             	add    esp,0x10
c0024e85:	eb 43                	jmp    c0024eca <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e87:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024e8d:	0f ba e0 1e          	bt     eax,0x1e
c0024e91:	73 17                	jae    c0024eaa <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024e93:	83 ec 0c             	sub    esp,0xc
c0024e96:	68 33 ce 02 c0       	push   0xc002ce33
c0024e9b:	e8 47 57 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0024ea0:	bb 01 00 00 00       	mov    ebx,0x1
c0024ea5:	83 c4 10             	add    esp,0x10
c0024ea8:	eb 20                	jmp    c0024eca <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024eaa:	31 db                	xor    ebx,ebx
c0024eac:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024eb1:	75 17                	jne    c0024eca <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024eb3:	50                   	push   eax
c0024eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024eb8:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024ebe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024ec2:	e8 7d b8 fd ff       	call   c0000744 <memcpy>
c0024ec7:	83 c4 10             	add    esp,0x10
c0024eca:	83 c4 2c             	add    esp,0x2c
c0024ecd:	89 d8                	mov    eax,ebx
c0024ecf:	5b                   	pop    ebx
c0024ed0:	5e                   	pop    esi
c0024ed1:	5f                   	pop    edi
c0024ed2:	5d                   	pop    ebp
c0024ed3:	c3                   	ret    

c0024ed4 <SATA::read(unsigned long long, int, void*)>:
c0024ed4:	57                   	push   edi
c0024ed5:	b8 04 00 00 00       	mov    eax,0x4
c0024eda:	56                   	push   esi
c0024edb:	53                   	push   ebx
c0024edc:	83 ec 10             	sub    esp,0x10
c0024edf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ee3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024ee7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024eea:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024eee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024ef2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024ef8:	77 3b                	ja     c0024f35 <SATA::read(unsigned long long, int, void*)+0x61>
c0024efa:	b8 06 00 00 00       	mov    eax,0x6
c0024eff:	85 d2                	test   edx,edx
c0024f01:	74 32                	je     c0024f35 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f03:	50                   	push   eax
c0024f04:	50                   	push   eax
c0024f05:	6a 00                	push   0x0
c0024f07:	52                   	push   edx
c0024f08:	53                   	push   ebx
c0024f09:	57                   	push   edi
c0024f0a:	56                   	push   esi
c0024f0b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f0f:	e8 5a fd ff ff       	call   c0024c6e <SATA::access(unsigned long long, int, void*, bool)>
c0024f14:	83 c4 20             	add    esp,0x20
c0024f17:	85 c0                	test   eax,eax
c0024f19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f1d:	75 11                	jne    c0024f30 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f1f:	01 1d 08 27 03 c0    	add    DWORD PTR ds:0xc0032708,ebx
c0024f25:	e8 ca ba fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0024f2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f2e:	eb 05                	jmp    c0024f35 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f30:	b8 01 00 00 00       	mov    eax,0x1
c0024f35:	83 c4 10             	add    esp,0x10
c0024f38:	5b                   	pop    ebx
c0024f39:	5e                   	pop    esi
c0024f3a:	5f                   	pop    edi
c0024f3b:	c3                   	ret    

c0024f3c <SATA::write(unsigned long long, int, void*)>:
c0024f3c:	55                   	push   ebp
c0024f3d:	b8 04 00 00 00       	mov    eax,0x4
c0024f42:	57                   	push   edi
c0024f43:	56                   	push   esi
c0024f44:	53                   	push   ebx
c0024f45:	83 ec 1c             	sub    esp,0x1c
c0024f48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f4c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f50:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f53:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f57:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f5b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f61:	77 56                	ja     c0024fb9 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f63:	b8 06 00 00 00       	mov    eax,0x6
c0024f68:	85 ff                	test   edi,edi
c0024f6a:	74 4d                	je     c0024fb9 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f6c:	89 ee                	mov    esi,ebp
c0024f6e:	c1 e6 09             	shl    esi,0x9
c0024f71:	01 fe                	add    esi,edi
c0024f73:	89 c8                	mov    eax,ecx
c0024f75:	89 da                	mov    edx,ebx
c0024f77:	83 c0 01             	add    eax,0x1
c0024f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f7e:	83 d2 00             	adc    edx,0x0
c0024f81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024f85:	50                   	push   eax
c0024f86:	50                   	push   eax
c0024f87:	6a 01                	push   0x1
c0024f89:	57                   	push   edi
c0024f8a:	81 c7 00 02 00 00    	add    edi,0x200
c0024f90:	6a 01                	push   0x1
c0024f92:	53                   	push   ebx
c0024f93:	51                   	push   ecx
c0024f94:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024f98:	e8 d1 fc ff ff       	call   c0024c6e <SATA::access(unsigned long long, int, void*, bool)>
c0024f9d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024fa1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fa5:	83 c4 20             	add    esp,0x20
c0024fa8:	39 f7                	cmp    edi,esi
c0024faa:	75 c7                	jne    c0024f73 <SATA::write(unsigned long long, int, void*)+0x37>
c0024fac:	01 2d 04 27 03 c0    	add    DWORD PTR ds:0xc0032704,ebp
c0024fb2:	e8 3d ba fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0024fb7:	31 c0                	xor    eax,eax
c0024fb9:	83 c4 1c             	add    esp,0x1c
c0024fbc:	5b                   	pop    ebx
c0024fbd:	5e                   	pop    esi
c0024fbe:	5f                   	pop    edi
c0024fbf:	5d                   	pop    ebp
c0024fc0:	c3                   	ret    
c0024fc1:	90                   	nop

c0024fc2 <SATAPI::write(unsigned long long, int, void*)>:
c0024fc2:	b8 03 00 00 00       	mov    eax,0x3
c0024fc7:	c3                   	ret    

c0024fc8 <SATAPI::close(int, int, void*)>:
c0024fc8:	83 ec 0c             	sub    esp,0xc
c0024fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fcf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024fd5:	85 c0                	test   eax,eax
c0024fd7:	74 0c                	je     c0024fe5 <SATAPI::close(int, int, void*)+0x1d>
c0024fd9:	83 ec 0c             	sub    esp,0xc
c0024fdc:	8b 10                	mov    edx,DWORD PTR [eax]
c0024fde:	50                   	push   eax
c0024fdf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024fe2:	83 c4 10             	add    esp,0x10
c0024fe5:	31 c0                	xor    eax,eax
c0024fe7:	83 c4 0c             	add    esp,0xc
c0024fea:	c3                   	ret    
c0024feb:	90                   	nop

c0024fec <SATAPI::SATAPI()>:
c0024fec:	83 ec 0c             	sub    esp,0xc
c0024fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ff3:	83 ec 04             	sub    esp,0x4
c0024ff6:	68 00 08 00 00       	push   0x800
c0024ffb:	68 7c ce 02 c0       	push   0xc002ce7c
c0025000:	50                   	push   eax
c0025001:	e8 8a f7 fe ff       	call   c0014790 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025006:	83 c4 10             	add    esp,0x10
c0025009:	ba 28 cf 02 c0       	mov    edx,0xc002cf28
c002500e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025012:	89 10                	mov    DWORD PTR [eax],edx
c0025014:	90                   	nop
c0025015:	83 c4 0c             	add    esp,0xc
c0025018:	c3                   	ret    
c0025019:	90                   	nop

c002501a <SATAPI::diskRemoved()>:
c002501a:	83 ec 18             	sub    esp,0x18
c002501d:	68 88 ce 02 c0       	push   0xc002ce88
c0025022:	e8 1f df fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0025027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002502b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025032:	83 c4 1c             	add    esp,0x1c
c0025035:	c3                   	ret    

c0025036 <SATAPI::diskInserted()>:
c0025036:	53                   	push   ebx
c0025037:	83 ec 14             	sub    esp,0x14
c002503a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002503e:	68 9f ce 02 c0       	push   0xc002ce9f
c0025043:	e8 fe de fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0025048:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002504f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025052:	e8 a1 f7 fe ff       	call   c00147f8 <PhysicalDisk::startCache()>
c0025057:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002505b:	83 c4 18             	add    esp,0x18
c002505e:	5b                   	pop    ebx
c002505f:	e9 0a 19 ff ff       	jmp    c001696e <createPartitionsForDisk(PhysicalDisk*)>

c0025064 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025064:	55                   	push   ebp
c0025065:	57                   	push   edi
c0025066:	56                   	push   esi
c0025067:	53                   	push   ebx
c0025068:	83 ec 24             	sub    esp,0x24
c002506b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002506f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025073:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025079:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002507d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025081:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025087:	8d 5f 02             	lea    ebx,[edi+0x2]
c002508a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025090:	c1 e3 07             	shl    ebx,0x7
c0025093:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025097:	89 f8                	mov    eax,edi
c0025099:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002509d:	c1 e0 07             	shl    eax,0x7
c00250a0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00250a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00250a8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00250b2:	53                   	push   ebx
c00250b3:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00250b9:	e8 d6 eb ff ff       	call   c0023c94 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00250be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250c2:	83 c4 10             	add    esp,0x10
c00250c5:	b8 01 00 00 00       	mov    eax,0x1
c00250ca:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00250cf:	0f 84 8a 01 00 00    	je     c002525f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250d5:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250dd:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00250e3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00250e9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00250ed:	c1 e1 05             	shl    ecx,0x5
c00250f0:	01 c8                	add    eax,ecx
c00250f2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00250f4:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00250fa:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025100:	89 08                	mov    DWORD PTR [eax],ecx
c0025102:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025108:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002510e:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025114:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025117:	52                   	push   edx
c0025118:	68 90 00 00 00       	push   0x90
c002511d:	6a 00                	push   0x0
c002511f:	53                   	push   ebx
c0025120:	e8 53 b6 fd ff       	call   c0000778 <memset>
c0025125:	83 c4 0c             	add    esp,0xc
c0025128:	8d 43 40             	lea    eax,[ebx+0x40]
c002512b:	6a 0c                	push   0xc
c002512d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025131:	50                   	push   eax
c0025132:	e8 0d b6 fd ff       	call   c0000744 <memcpy>
c0025137:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002513d:	89 ea                	mov    edx,ebp
c002513f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025145:	c1 ea 18             	shr    edx,0x18
c0025148:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002514c:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002514f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025152:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025156:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002515c:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025162:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025167:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002516b:	09 c8                	or     eax,ecx
c002516d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025171:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025177:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002517a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025181:	66 25 00 7f          	and    ax,0x7f00
c0025185:	66 0d 27 80          	or     ax,0x8027
c0025189:	66 89 03             	mov    WORD PTR [ebx],ax
c002518c:	89 e8                	mov    eax,ebp
c002518e:	c1 e8 10             	shr    eax,0x10
c0025191:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025194:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025198:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002519b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002519f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00251a2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00251a6:	83 c4 10             	add    esp,0x10
c00251a9:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00251ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00251b1:	31 c0                	xor    eax,eax
c00251b3:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00251b9:	80 e1 88             	and    cl,0x88
c00251bc:	74 0a                	je     c00251c8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00251be:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251c3:	74 0a                	je     c00251cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00251c5:	40                   	inc    eax
c00251c6:	eb eb                	jmp    c00251b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00251c8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251cd:	75 0f                	jne    c00251de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00251cf:	83 ec 0c             	sub    esp,0xc
c00251d2:	68 25 ce 02 c0       	push   0xc002ce25
c00251d7:	e8 0b 54 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c00251dc:	eb 3a                	jmp    c0025218 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00251de:	b8 01 00 00 00       	mov    eax,0x1
c00251e3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00251e7:	c1 e7 07             	shl    edi,0x7
c00251ea:	d3 e0                	shl    eax,cl
c00251ec:	03 3c 24             	add    edi,DWORD PTR [esp]
c00251ef:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00251f5:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00251fb:	85 d0                	test   eax,edx
c00251fd:	74 23                	je     c0025222 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00251ff:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025205:	0f ba e2 1e          	bt     edx,0x1e
c0025209:	73 ea                	jae    c00251f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c002520b:	83 ec 0c             	sub    esp,0xc
c002520e:	68 b7 ce 02 c0       	push   0xc002ceb7
c0025213:	e8 2e dd fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0025218:	83 c4 10             	add    esp,0x10
c002521b:	b8 01 00 00 00       	mov    eax,0x1
c0025220:	eb 3d                	jmp    c002525f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025222:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025228:	0f ba e0 1e          	bt     eax,0x1e
c002522c:	73 0a                	jae    c0025238 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c002522e:	83 ec 0c             	sub    esp,0xc
c0025231:	68 ca ce 02 c0       	push   0xc002ceca
c0025236:	eb db                	jmp    c0025213 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025238:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002523d:	74 1e                	je     c002525d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002523f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025244:	74 17                	je     c002525d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025246:	50                   	push   eax
c0025247:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002524b:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025251:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025255:	e8 ea b4 fd ff       	call   c0000744 <memcpy>
c002525a:	83 c4 10             	add    esp,0x10
c002525d:	31 c0                	xor    eax,eax
c002525f:	83 c4 1c             	add    esp,0x1c
c0025262:	5b                   	pop    ebx
c0025263:	5e                   	pop    esi
c0025264:	5f                   	pop    edi
c0025265:	5d                   	pop    ebp
c0025266:	c3                   	ret    
c0025267:	90                   	nop

c0025268 <SATAPI::eject()>:
c0025268:	57                   	push   edi
c0025269:	b9 03 00 00 00       	mov    ecx,0x3
c002526e:	53                   	push   ebx
c002526f:	83 ec 14             	sub    esp,0x14
c0025272:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025276:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002527a:	fc                   	cld    
c002527b:	31 c0                	xor    eax,eax
c002527d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002527f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025284:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025289:	50                   	push   eax
c002528a:	6a 00                	push   0x0
c002528c:	6a 00                	push   0x0
c002528e:	6a 00                	push   0x0
c0025290:	6a 00                	push   0x0
c0025292:	6a 02                	push   0x2
c0025294:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025298:	50                   	push   eax
c0025299:	53                   	push   ebx
c002529a:	e8 c5 fd ff ff       	call   c0025064 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002529f:	83 c4 14             	add    esp,0x14
c00252a2:	53                   	push   ebx
c00252a3:	e8 72 fd ff ff       	call   c002501a <SATAPI::diskRemoved()>
c00252a8:	83 c4 24             	add    esp,0x24
c00252ab:	31 c0                	xor    eax,eax
c00252ad:	5b                   	pop    ebx
c00252ae:	5f                   	pop    edi
c00252af:	c3                   	ret    

c00252b0 <SATAPI::detectMedia()>:
c00252b0:	56                   	push   esi
c00252b1:	53                   	push   ebx
c00252b2:	83 ec 28             	sub    esp,0x28
c00252b5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252b9:	6a 0c                	push   0xc
c00252bb:	6a 00                	push   0x0
c00252bd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00252c1:	56                   	push   esi
c00252c2:	e8 b1 b4 fd ff       	call   c0000778 <memset>
c00252c7:	83 c4 0c             	add    esp,0xc
c00252ca:	6a 00                	push   0x0
c00252cc:	6a 00                	push   0x0
c00252ce:	6a 00                	push   0x0
c00252d0:	6a 00                	push   0x0
c00252d2:	6a 00                	push   0x0
c00252d4:	56                   	push   esi
c00252d5:	53                   	push   ebx
c00252d6:	e8 89 fd ff ff       	call   c0025064 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252db:	83 c4 1c             	add    esp,0x1c
c00252de:	6a 0c                	push   0xc
c00252e0:	6a 00                	push   0x0
c00252e2:	56                   	push   esi
c00252e3:	e8 90 b4 fd ff       	call   c0000778 <memset>
c00252e8:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00252ed:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00252f2:	83 c4 0c             	add    esp,0xc
c00252f5:	6a 01                	push   0x1
c00252f7:	8d 44 24 16          	lea    eax,[esp+0x16]
c00252fb:	50                   	push   eax
c00252fc:	6a 00                	push   0x0
c00252fe:	6a 00                	push   0x0
c0025300:	6a 12                	push   0x12
c0025302:	56                   	push   esi
c0025303:	53                   	push   ebx
c0025304:	e8 5b fd ff ff       	call   c0025064 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025309:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002530d:	83 c4 20             	add    esp,0x20
c0025310:	83 e0 7f             	and    eax,0x7f
c0025313:	3c 70                	cmp    al,0x70
c0025315:	74 15                	je     c002532c <SATAPI::detectMedia()+0x7c>
c0025317:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002531e:	75 0c                	jne    c002532c <SATAPI::detectMedia()+0x7c>
c0025320:	83 ec 0c             	sub    esp,0xc
c0025323:	53                   	push   ebx
c0025324:	e8 0d fd ff ff       	call   c0025036 <SATAPI::diskInserted()>
c0025329:	83 c4 10             	add    esp,0x10
c002532c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025330:	83 e0 0f             	and    eax,0xf
c0025333:	3c 02                	cmp    al,0x2
c0025335:	75 1b                	jne    c0025352 <SATAPI::detectMedia()+0xa2>
c0025337:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002533c:	75 2d                	jne    c002536b <SATAPI::detectMedia()+0xbb>
c002533e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025345:	74 24                	je     c002536b <SATAPI::detectMedia()+0xbb>
c0025347:	83 ec 0c             	sub    esp,0xc
c002534a:	53                   	push   ebx
c002534b:	e8 ca fc ff ff       	call   c002501a <SATAPI::diskRemoved()>
c0025350:	eb 16                	jmp    c0025368 <SATAPI::detectMedia()+0xb8>
c0025352:	84 c0                	test   al,al
c0025354:	75 15                	jne    c002536b <SATAPI::detectMedia()+0xbb>
c0025356:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002535d:	75 0c                	jne    c002536b <SATAPI::detectMedia()+0xbb>
c002535f:	83 ec 0c             	sub    esp,0xc
c0025362:	53                   	push   ebx
c0025363:	e8 ce fc ff ff       	call   c0025036 <SATAPI::diskInserted()>
c0025368:	83 c4 10             	add    esp,0x10
c002536b:	83 c4 24             	add    esp,0x24
c002536e:	5b                   	pop    ebx
c002536f:	5e                   	pop    esi
c0025370:	c3                   	ret    
c0025371:	90                   	nop

c0025372 <SATAPI::open(int, int, void*)>:
c0025372:	56                   	push   esi
c0025373:	53                   	push   ebx
c0025374:	50                   	push   eax
c0025375:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025379:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002537d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025387:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002538d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025397:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002539b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00253a5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253ab:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00253b2:	e8 2b ab fe ff       	call   c000fee2 <Phys::allocatePage()>
c00253b7:	89 c6                	mov    esi,eax
c00253b9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253bf:	81 c6 00 10 00 00    	add    esi,0x1000
c00253c5:	e8 18 ab fe ff       	call   c000fee2 <Phys::allocatePage()>
c00253ca:	39 c6                	cmp    esi,eax
c00253cc:	74 10                	je     c00253de <SATAPI::open(int, int, void*)+0x6c>
c00253ce:	83 ec 0c             	sub    esp,0xc
c00253d1:	68 df ce 02 c0       	push   0xc002cedf
c00253d6:	e8 0c 52 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c00253db:	83 c4 10             	add    esp,0x10
c00253de:	83 ec 0c             	sub    esp,0xc
c00253e1:	6a 02                	push   0x2
c00253e3:	e8 b7 c7 fe ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c00253e8:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00253ee:	e8 47 ca fe ff       	call   c0011e3a <Virt::getAKernelVAS()>
c00253f3:	6a 03                	push   0x3
c00253f5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00253fb:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025401:	50                   	push   eax
c0025402:	e8 6f cf fe ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025407:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002540e:	83 c4 14             	add    esp,0x14
c0025411:	53                   	push   ebx
c0025412:	e8 99 fe ff ff       	call   c00252b0 <SATAPI::detectMedia()>
c0025417:	83 c4 14             	add    esp,0x14
c002541a:	31 c0                	xor    eax,eax
c002541c:	5b                   	pop    ebx
c002541d:	5e                   	pop    esi
c002541e:	c3                   	ret    
c002541f:	90                   	nop

c0025420 <SATAPI::read(unsigned long long, int, void*)>:
c0025420:	55                   	push   ebp
c0025421:	57                   	push   edi
c0025422:	56                   	push   esi
c0025423:	53                   	push   ebx
c0025424:	83 ec 1c             	sub    esp,0x1c
c0025427:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002542b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002542f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025433:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002543a:	74 19                	je     c0025455 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002543c:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025441:	7e 2e                	jle    c0025471 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025443:	83 ec 0c             	sub    esp,0xc
c0025446:	68 f5 ce 02 c0       	push   0xc002cef5
c002544b:	e8 97 51 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0025450:	83 c4 10             	add    esp,0x10
c0025453:	eb 1c                	jmp    c0025471 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025455:	83 ec 0c             	sub    esp,0xc
c0025458:	55                   	push   ebp
c0025459:	e8 52 fe ff ff       	call   c00252b0 <SATAPI::detectMedia()>
c002545e:	83 c4 10             	add    esp,0x10
c0025461:	b8 02 00 00 00       	mov    eax,0x2
c0025466:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002546d:	75 cd                	jne    c002543c <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002546f:	eb 49                	jmp    c00254ba <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025471:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025475:	b9 03 00 00 00       	mov    ecx,0x3
c002547a:	fc                   	cld    
c002547b:	31 c0                	xor    eax,eax
c002547d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002547f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025484:	89 d8                	mov    eax,ebx
c0025486:	86 e0                	xchg   al,ah
c0025488:	c1 c0 10             	rol    eax,0x10
c002548b:	86 e0                	xchg   al,ah
c002548d:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025491:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025495:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025499:	50                   	push   eax
c002549a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002549e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254a2:	56                   	push   esi
c00254a3:	53                   	push   ebx
c00254a4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00254a8:	c1 e0 0b             	shl    eax,0xb
c00254ab:	50                   	push   eax
c00254ac:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00254b0:	50                   	push   eax
c00254b1:	55                   	push   ebp
c00254b2:	e8 ad fb ff ff       	call   c0025064 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254b7:	83 c4 20             	add    esp,0x20
c00254ba:	83 c4 1c             	add    esp,0x1c
c00254bd:	5b                   	pop    ebx
c00254be:	5e                   	pop    esi
c00254bf:	5f                   	pop    edi
c00254c0:	5d                   	pop    ebp
c00254c1:	c3                   	ret    

c00254c2 <AVX::open(int, int, void*)>:
c00254c2:	83 ec 0c             	sub    esp,0xc
c00254c5:	e8 3e 11 00 00       	call   c0026608 <avxInit>
c00254ca:	b8 00 00 00 00       	mov    eax,0x0
c00254cf:	83 c4 0c             	add    esp,0xc
c00254d2:	c3                   	ret    
c00254d3:	90                   	nop

c00254d4 <AVX::close(int, int, void*)>:
c00254d4:	83 ec 0c             	sub    esp,0xc
c00254d7:	e8 2d 11 00 00       	call   c0026609 <avxClose>
c00254dc:	b8 00 00 00 00       	mov    eax,0x0
c00254e1:	83 c4 0c             	add    esp,0xc
c00254e4:	c3                   	ret    
c00254e5:	90                   	nop

c00254e6 <AVX::available()>:
c00254e6:	83 ec 0c             	sub    esp,0xc
c00254e9:	e8 12 11 00 00       	call   c0026600 <avxDetect>
c00254ee:	85 c0                	test   eax,eax
c00254f0:	0f 95 c0             	setne  al
c00254f3:	83 c4 0c             	add    esp,0xc
c00254f6:	c3                   	ret    
c00254f7:	90                   	nop

c00254f8 <AVX::save(void*)>:
c00254f8:	83 ec 0c             	sub    esp,0xc
c00254fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254ff:	83 ec 0c             	sub    esp,0xc
c0025502:	50                   	push   eax
c0025503:	e8 fe 10 00 00       	call   c0026606 <avxSave>
c0025508:	83 c4 10             	add    esp,0x10
c002550b:	90                   	nop
c002550c:	83 c4 0c             	add    esp,0xc
c002550f:	c3                   	ret    

c0025510 <AVX::load(void*)>:
c0025510:	83 ec 0c             	sub    esp,0xc
c0025513:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025517:	83 ec 0c             	sub    esp,0xc
c002551a:	50                   	push   eax
c002551b:	e8 e7 10 00 00       	call   c0026607 <avxLoad>
c0025520:	83 c4 10             	add    esp,0x10
c0025523:	90                   	nop
c0025524:	83 c4 0c             	add    esp,0xc
c0025527:	c3                   	ret    

c0025528 <AVX::AVX()>:
c0025528:	83 ec 0c             	sub    esp,0xc
c002552b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002552f:	83 ec 08             	sub    esp,0x8
c0025532:	68 58 cf 02 c0       	push   0xc002cf58
c0025537:	50                   	push   eax
c0025538:	e8 31 f3 fe ff       	call   c001486e <FPU::FPU(char const*)>
c002553d:	83 c4 10             	add    esp,0x10
c0025540:	ba 68 cf 02 c0       	mov    edx,0xc002cf68
c0025545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025549:	89 10                	mov    DWORD PTR [eax],edx
c002554b:	90                   	nop
c002554c:	83 c4 0c             	add    esp,0xc
c002554f:	c3                   	ret    

c0025550 <MMX::available()>:
c0025550:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0025555:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002555b:	83 e0 20             	and    eax,0x20
c002555e:	84 c0                	test   al,al
c0025560:	0f 95 c0             	setne  al
c0025563:	c3                   	ret    

c0025564 <MMX::open(int, int, void*)>:
c0025564:	83 ec 0c             	sub    esp,0xc
c0025567:	e8 20 11 00 00       	call   c002668c <x87Init>
c002556c:	b8 00 00 00 00       	mov    eax,0x0
c0025571:	83 c4 0c             	add    esp,0xc
c0025574:	c3                   	ret    
c0025575:	90                   	nop

c0025576 <MMX::close(int, int, void*)>:
c0025576:	83 ec 0c             	sub    esp,0xc
c0025579:	e8 28 11 00 00       	call   c00266a6 <x87Close>
c002557e:	b8 00 00 00 00       	mov    eax,0x0
c0025583:	83 c4 0c             	add    esp,0xc
c0025586:	c3                   	ret    
c0025587:	90                   	nop

c0025588 <MMX::save(void*)>:
c0025588:	83 ec 0c             	sub    esp,0xc
c002558b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002558f:	83 ec 0c             	sub    esp,0xc
c0025592:	50                   	push   eax
c0025593:	e8 e9 10 00 00       	call   c0026681 <x87Save>
c0025598:	83 c4 10             	add    esp,0x10
c002559b:	90                   	nop
c002559c:	83 c4 0c             	add    esp,0xc
c002559f:	c3                   	ret    

c00255a0 <MMX::load(void*)>:
c00255a0:	83 ec 0c             	sub    esp,0xc
c00255a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255a7:	83 ec 0c             	sub    esp,0xc
c00255aa:	50                   	push   eax
c00255ab:	e8 d7 10 00 00       	call   c0026687 <x87Load>
c00255b0:	83 c4 10             	add    esp,0x10
c00255b3:	90                   	nop
c00255b4:	83 c4 0c             	add    esp,0xc
c00255b7:	c3                   	ret    

c00255b8 <MMX::MMX()>:
c00255b8:	83 ec 0c             	sub    esp,0xc
c00255bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255bf:	83 ec 08             	sub    esp,0x8
c00255c2:	68 98 cf 02 c0       	push   0xc002cf98
c00255c7:	50                   	push   eax
c00255c8:	e8 a1 f2 fe ff       	call   c001486e <FPU::FPU(char const*)>
c00255cd:	83 c4 10             	add    esp,0x10
c00255d0:	ba a8 cf 02 c0       	mov    edx,0xc002cfa8
c00255d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d9:	89 10                	mov    DWORD PTR [eax],edx
c00255db:	90                   	nop
c00255dc:	83 c4 0c             	add    esp,0xc
c00255df:	c3                   	ret    

c00255e0 <SSE::open(int, int, void*)>:
c00255e0:	83 ec 0c             	sub    esp,0xc
c00255e3:	e8 5c 10 00 00       	call   c0026644 <sseInit>
c00255e8:	b8 00 00 00 00       	mov    eax,0x0
c00255ed:	83 c4 0c             	add    esp,0xc
c00255f0:	c3                   	ret    
c00255f1:	90                   	nop

c00255f2 <SSE::close(int, int, void*)>:
c00255f2:	83 ec 0c             	sub    esp,0xc
c00255f5:	e8 5a 10 00 00       	call   c0026654 <sseClose>
c00255fa:	b8 00 00 00 00       	mov    eax,0x0
c00255ff:	83 c4 0c             	add    esp,0xc
c0025602:	c3                   	ret    
c0025603:	90                   	nop

c0025604 <SSE::available()>:
c0025604:	83 ec 1c             	sub    esp,0x1c
c0025607:	e8 14 10 00 00       	call   c0026620 <absolutelyNoChanceInHell>
c002560c:	85 c0                	test   eax,eax
c002560e:	0f 95 c0             	setne  al
c0025611:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025615:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025619:	83 c4 1c             	add    esp,0x1c
c002561c:	c3                   	ret    
c002561d:	90                   	nop

c002561e <SSE::save(void*)>:
c002561e:	83 ec 0c             	sub    esp,0xc
c0025621:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025625:	83 ec 0c             	sub    esp,0xc
c0025628:	50                   	push   eax
c0025629:	e8 0a 10 00 00       	call   c0026638 <sseSave>
c002562e:	83 c4 10             	add    esp,0x10
c0025631:	90                   	nop
c0025632:	83 c4 0c             	add    esp,0xc
c0025635:	c3                   	ret    

c0025636 <SSE::load(void*)>:
c0025636:	83 ec 0c             	sub    esp,0xc
c0025639:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002563d:	83 ec 0c             	sub    esp,0xc
c0025640:	50                   	push   eax
c0025641:	e8 f8 0f 00 00       	call   c002663e <sseLoad>
c0025646:	83 c4 10             	add    esp,0x10
c0025649:	90                   	nop
c002564a:	83 c4 0c             	add    esp,0xc
c002564d:	c3                   	ret    

c002564e <SSE::SSE()>:
c002564e:	83 ec 0c             	sub    esp,0xc
c0025651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025655:	83 ec 08             	sub    esp,0x8
c0025658:	68 d8 cf 02 c0       	push   0xc002cfd8
c002565d:	50                   	push   eax
c002565e:	e8 0b f2 fe ff       	call   c001486e <FPU::FPU(char const*)>
c0025663:	83 c4 10             	add    esp,0x10
c0025666:	ba e8 cf 02 c0       	mov    edx,0xc002cfe8
c002566b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002566f:	89 10                	mov    DWORD PTR [eax],edx
c0025671:	90                   	nop
c0025672:	83 c4 0c             	add    esp,0xc
c0025675:	c3                   	ret    

c0025676 <x87::open(int, int, void*)>:
c0025676:	83 ec 0c             	sub    esp,0xc
c0025679:	e8 0e 10 00 00       	call   c002668c <x87Init>
c002567e:	b8 00 00 00 00       	mov    eax,0x0
c0025683:	83 c4 0c             	add    esp,0xc
c0025686:	c3                   	ret    
c0025687:	90                   	nop

c0025688 <x87::close(int, int, void*)>:
c0025688:	83 ec 0c             	sub    esp,0xc
c002568b:	e8 16 10 00 00       	call   c00266a6 <x87Close>
c0025690:	b8 00 00 00 00       	mov    eax,0x0
c0025695:	83 c4 0c             	add    esp,0xc
c0025698:	c3                   	ret    
c0025699:	90                   	nop

c002569a <x87::available()>:
c002569a:	83 ec 0c             	sub    esp,0xc
c002569d:	e8 c4 0f 00 00       	call   c0026666 <x87Detect>
c00256a2:	85 c0                	test   eax,eax
c00256a4:	0f 95 c0             	setne  al
c00256a7:	83 c4 0c             	add    esp,0xc
c00256aa:	c3                   	ret    
c00256ab:	90                   	nop

c00256ac <x87::save(void*)>:
c00256ac:	83 ec 0c             	sub    esp,0xc
c00256af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256b3:	83 ec 0c             	sub    esp,0xc
c00256b6:	50                   	push   eax
c00256b7:	e8 c5 0f 00 00       	call   c0026681 <x87Save>
c00256bc:	83 c4 10             	add    esp,0x10
c00256bf:	90                   	nop
c00256c0:	83 c4 0c             	add    esp,0xc
c00256c3:	c3                   	ret    

c00256c4 <x87::load(void*)>:
c00256c4:	83 ec 0c             	sub    esp,0xc
c00256c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256cb:	83 ec 0c             	sub    esp,0xc
c00256ce:	50                   	push   eax
c00256cf:	e8 b3 0f 00 00       	call   c0026687 <x87Load>
c00256d4:	83 c4 10             	add    esp,0x10
c00256d7:	90                   	nop
c00256d8:	83 c4 0c             	add    esp,0xc
c00256db:	c3                   	ret    

c00256dc <x87::x87()>:
c00256dc:	83 ec 0c             	sub    esp,0xc
c00256df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256e3:	83 ec 08             	sub    esp,0x8
c00256e6:	68 18 d0 02 c0       	push   0xc002d018
c00256eb:	50                   	push   eax
c00256ec:	e8 7d f1 fe ff       	call   c001486e <FPU::FPU(char const*)>
c00256f1:	83 c4 10             	add    esp,0x10
c00256f4:	ba 28 d0 02 c0       	mov    edx,0xc002d028
c00256f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256fd:	89 10                	mov    DWORD PTR [eax],edx
c00256ff:	90                   	nop
c0025700:	83 c4 0c             	add    esp,0xc
c0025703:	c3                   	ret    

c0025704 <APIC::disable()>:
c0025704:	90                   	nop
c0025705:	c3                   	ret    

c0025706 <APIC::close(int, int, void*)>:
c0025706:	55                   	push   ebp
c0025707:	89 e5                	mov    ebp,esp
c0025709:	83 ec 08             	sub    esp,0x8
c002570c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002570f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025711:	83 c0 3c             	add    eax,0x3c
c0025714:	8b 00                	mov    eax,DWORD PTR [eax]
c0025716:	83 ec 0c             	sub    esp,0xc
c0025719:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002571c:	ff d0                	call   eax
c002571e:	83 c4 10             	add    esp,0x10
c0025721:	b8 00 00 00 00       	mov    eax,0x0
c0025726:	c9                   	leave  
c0025727:	c3                   	ret    

c0025728 <IOAPIC::close(int, int, void*)>:
c0025728:	b8 00 00 00 00       	mov    eax,0x0
c002572d:	c3                   	ret    

c002572e <APIC::io_wait()>:
c002572e:	eb 00                	jmp    c0025730 <APIC::io_wait()+0x2>
c0025730:	eb 00                	jmp    c0025732 <APIC::io_wait()+0x4>
c0025732:	90                   	nop
c0025733:	c3                   	ret    

c0025734 <APIC::getBase()>:
c0025734:	55                   	push   ebp
c0025735:	89 e5                	mov    ebp,esp
c0025737:	83 ec 18             	sub    esp,0x18
c002573a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c002573f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025745:	83 e0 08             	and    eax,0x8
c0025748:	84 c0                	test   al,al
c002574a:	75 07                	jne    c0025753 <APIC::getBase()+0x1f>
c002574c:	b8 00 00 00 00       	mov    eax,0x0
c0025751:	eb 21                	jmp    c0025774 <APIC::getBase()+0x40>
c0025753:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0025758:	83 ec 08             	sub    esp,0x8
c002575b:	6a 1b                	push   0x1b
c002575d:	50                   	push   eax
c002575e:	e8 85 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025763:	83 c4 10             	add    esp,0x10
c0025766:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025769:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002576c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002576f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025774:	c9                   	leave  
c0025775:	c3                   	ret    

c0025776 <APIC::eoi(unsigned char)>:
c0025776:	55                   	push   ebp
c0025777:	89 e5                	mov    ebp,esp
c0025779:	83 ec 28             	sub    esp,0x28
c002577c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002577f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025782:	83 ec 0c             	sub    esp,0xc
c0025785:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025788:	e8 a7 ff ff ff       	call   c0025734 <APIC::getBase()>
c002578d:	83 c4 10             	add    esp,0x10
c0025790:	05 b0 00 00 00       	add    eax,0xb0
c0025795:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025798:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002579b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00257a1:	90                   	nop
c00257a2:	c9                   	leave  
c00257a3:	c3                   	ret    

c00257a4 <APIC::open(int, int, void*)>:
c00257a4:	55                   	push   ebp
c00257a5:	89 e5                	mov    ebp,esp
c00257a7:	57                   	push   edi
c00257a8:	56                   	push   esi
c00257a9:	53                   	push   ebx
c00257aa:	83 ec 2c             	sub    esp,0x2c
c00257ad:	83 ec 0c             	sub    esp,0xc
c00257b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257b3:	e8 7c ff ff ff       	call   c0025734 <APIC::getBase()>
c00257b8:	83 c4 10             	add    esp,0x10
c00257bb:	89 c2                	mov    edx,eax
c00257bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257c0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257c6:	0f b6 f8             	movzx  edi,al
c00257c9:	89 d0                	mov    eax,edx
c00257cb:	ba 00 00 00 00       	mov    edx,0x0
c00257d0:	89 c1                	mov    ecx,eax
c00257d2:	80 e5 ff             	and    ch,0xff
c00257d5:	89 cb                	mov    ebx,ecx
c00257d7:	0f b6 f2             	movzx  esi,dl
c00257da:	89 d8                	mov    eax,ebx
c00257dc:	89 f2                	mov    edx,esi
c00257de:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257e1:	8d 5f 08             	lea    ebx,[edi+0x8]
c00257e4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00257e8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00257ec:	83 e0 00             	and    eax,0x0
c00257ef:	09 d0                	or     eax,edx
c00257f1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00257f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257f8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257fe:	8d 50 01             	lea    edx,[eax+0x1]
c0025801:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025804:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002580a:	0f b6 d0             	movzx  edx,al
c002580d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025810:	83 c2 08             	add    edx,0x8
c0025813:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025817:	0f b6 c9             	movzx  ecx,cl
c002581a:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025820:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025824:	83 ec 0c             	sub    esp,0xc
c0025827:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002582a:	e8 05 ff ff ff       	call   c0025734 <APIC::getBase()>
c002582f:	83 c4 10             	add    esp,0x10
c0025832:	05 f0 00 00 00       	add    eax,0xf0
c0025837:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002583a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002583d:	8b 00                	mov    eax,DWORD PTR [eax]
c002583f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025842:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025849:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025850:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025853:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025856:	89 10                	mov    DWORD PTR [eax],edx
c0025858:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002585f:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0025864:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025867:	7d 7c                	jge    c00258e5 <APIC::open(int, int, void*)+0x141>
c0025869:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002586c:	8b 04 85 a0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf360]
c0025873:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025876:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025879:	8b 04 85 a0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf360]
c0025880:	c1 e8 08             	shr    eax,0x8
c0025883:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025887:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002588a:	8b 04 85 a0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf360]
c0025891:	c1 e8 18             	shr    eax,0x18
c0025894:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025897:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002589b:	75 40                	jne    c00258dd <APIC::open(int, int, void*)+0x139>
c002589d:	83 ec 0c             	sub    esp,0xc
c00258a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258a3:	e8 8c fe ff ff       	call   c0025734 <APIC::getBase()>
c00258a8:	83 c4 10             	add    esp,0x10
c00258ab:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00258af:	75 07                	jne    c00258b8 <APIC::open(int, int, void*)+0x114>
c00258b1:	ba 60 03 00 00       	mov    edx,0x360
c00258b6:	eb 05                	jmp    c00258bd <APIC::open(int, int, void*)+0x119>
c00258b8:	ba 50 03 00 00       	mov    edx,0x350
c00258bd:	01 d0                	add    eax,edx
c00258bf:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258c2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00258c7:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00258ca:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00258d1:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00258d5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258d8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00258db:	89 10                	mov    DWORD PTR [eax],edx
c00258dd:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00258e0:	e9 7a ff ff ff       	jmp    c002585f <APIC::open(int, int, void*)+0xbb>
c00258e5:	b8 00 00 00 00       	mov    eax,0x0
c00258ea:	8d 65 f4             	lea    esp,[ebp-0xc]
c00258ed:	5b                   	pop    ebx
c00258ee:	5e                   	pop    esi
c00258ef:	5f                   	pop    edi
c00258f0:	5d                   	pop    ebp
c00258f1:	c3                   	ret    

c00258f2 <IOAPIC::IOAPIC()>:
c00258f2:	83 ec 0c             	sub    esp,0xc
c00258f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258f9:	83 ec 08             	sub    esp,0x8
c00258fc:	68 58 d0 02 c0       	push   0xc002d058
c0025901:	50                   	push   eax
c0025902:	e8 55 ec fe ff       	call   c001455c <Device::Device(char const*)>
c0025907:	83 c4 10             	add    esp,0x10
c002590a:	ba 80 d1 02 c0       	mov    edx,0xc002d180
c002590f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025913:	89 10                	mov    DWORD PTR [eax],edx
c0025915:	90                   	nop
c0025916:	83 c4 0c             	add    esp,0xc
c0025919:	c3                   	ret    

c002591a <APIC::APIC()>:
c002591a:	53                   	push   ebx
c002591b:	83 ec 18             	sub    esp,0x18
c002591e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025922:	83 ec 08             	sub    esp,0x8
c0025925:	68 60 d0 02 c0       	push   0xc002d060
c002592a:	50                   	push   eax
c002592b:	e8 98 f3 fe ff       	call   c0014cc8 <InterruptController::InterruptController(char const*)>
c0025930:	83 c4 10             	add    esp,0x10
c0025933:	ba 38 d1 02 c0       	mov    edx,0xc002d138
c0025938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002593c:	89 10                	mov    DWORD PTR [eax],edx
c002593e:	a0 60 27 03 c0       	mov    al,ds:0xc0032760
c0025943:	83 f0 01             	xor    eax,0x1
c0025946:	84 c0                	test   al,al
c0025948:	0f 84 a1 00 00 00    	je     c00259ef <APIC::APIC()+0xd5>
c002594e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025953:	a0 40 0d 03 c0       	mov    al,ds:0xc0030d40
c0025958:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002595c:	0f 83 86 00 00 00    	jae    c00259e8 <APIC::APIC()+0xce>
c0025962:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002596a:	83 ec 0c             	sub    esp,0xc
c002596d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025971:	e8 ca 9e fe ff       	call   c000f840 <malloc>
c0025976:	83 c4 10             	add    esp,0x10
c0025979:	89 c3                	mov    ebx,eax
c002597b:	83 ec 0c             	sub    esp,0xc
c002597e:	53                   	push   ebx
c002597f:	e8 6e ff ff ff       	call   c00258f2 <IOAPIC::IOAPIC()>
c0025984:	83 c4 10             	add    esp,0x10
c0025987:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002598b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025990:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025994:	89 14 85 40 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8c0],edx
c002599b:	a1 20 27 03 c0       	mov    eax,ds:0xc0032720
c00259a0:	40                   	inc    eax
c00259a1:	a3 20 27 03 c0       	mov    ds:0xc0032720,eax
c00259a6:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00259ab:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00259b1:	83 ec 08             	sub    esp,0x8
c00259b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259b8:	50                   	push   eax
c00259b9:	e8 ae e9 fe ff       	call   c001436c <Device::addChild(Device*)>
c00259be:	83 c4 10             	add    esp,0x10
c00259c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00259c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00259c7:	83 c0 08             	add    eax,0x8
c00259ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00259cc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00259d1:	6a 00                	push   0x0
c00259d3:	6a 00                	push   0x0
c00259d5:	52                   	push   edx
c00259d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00259da:	ff d0                	call   eax
c00259dc:	83 c4 10             	add    esp,0x10
c00259df:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00259e3:	e9 6b ff ff ff       	jmp    c0025953 <APIC::APIC()+0x39>
c00259e8:	c6 05 60 27 03 c0 01 	mov    BYTE PTR ds:0xc0032760,0x1
c00259ef:	90                   	nop
c00259f0:	83 c4 18             	add    esp,0x18
c00259f3:	5b                   	pop    ebx
c00259f4:	c3                   	ret    
c00259f5:	90                   	nop

c00259f6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00259f6:	55                   	push   ebp
c00259f7:	89 e5                	mov    ebp,esp
c00259f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a02:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a05:	72 1d                	jb     c0025a24 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a0a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a13:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a19:	01 d0                	add    eax,edx
c0025a1b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a1e:	73 04                	jae    c0025a24 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a20:	b0 01                	mov    al,0x1
c0025a22:	eb 02                	jmp    c0025a26 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a24:	b0 00                	mov    al,0x0
c0025a26:	5d                   	pop    ebp
c0025a27:	c3                   	ret    

c0025a28 <IOAPIC::read(int)>:
c0025a28:	55                   	push   ebp
c0025a29:	89 e5                	mov    ebp,esp
c0025a2b:	83 ec 10             	sub    esp,0x10
c0025a2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a31:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a37:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a3d:	0f b6 d0             	movzx  edx,al
c0025a40:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a43:	89 10                	mov    DWORD PTR [eax],edx
c0025a45:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a48:	83 c0 10             	add    eax,0x10
c0025a4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a4d:	c9                   	leave  
c0025a4e:	c3                   	ret    
c0025a4f:	90                   	nop

c0025a50 <IOAPIC::open(int, int, void*)>:
c0025a50:	55                   	push   ebp
c0025a51:	89 e5                	mov    ebp,esp
c0025a53:	57                   	push   edi
c0025a54:	56                   	push   esi
c0025a55:	53                   	push   ebx
c0025a56:	83 ec 0c             	sub    esp,0xc
c0025a59:	83 ec 0c             	sub    esp,0xc
c0025a5c:	68 8b d0 02 c0       	push   0xc002d08b
c0025a61:	e8 e0 d4 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0025a66:	83 c4 10             	add    esp,0x10
c0025a69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a6c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a6f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a78:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a7e:	8b 14 85 80 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf280]
c0025a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a88:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a91:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a97:	8b 14 85 00 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf200]
c0025a9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025aa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aaa:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025ab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ab3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ab9:	0f b6 f8             	movzx  edi,al
c0025abc:	89 d0                	mov    eax,edx
c0025abe:	ba 00 00 00 00       	mov    edx,0x0
c0025ac3:	89 c1                	mov    ecx,eax
c0025ac5:	80 e5 ff             	and    ch,0xff
c0025ac8:	89 cb                	mov    ebx,ecx
c0025aca:	0f b6 f2             	movzx  esi,dl
c0025acd:	89 d8                	mov    eax,ebx
c0025acf:	89 f2                	mov    edx,esi
c0025ad1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ad4:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025ad7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025adb:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025adf:	83 e0 00             	and    eax,0x0
c0025ae2:	09 d0                	or     eax,edx
c0025ae4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aeb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025af1:	8d 50 01             	lea    edx,[eax+0x1]
c0025af4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025af7:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025afd:	0f b6 d0             	movzx  edx,al
c0025b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b03:	83 c2 08             	add    edx,0x8
c0025b06:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b0a:	0f b6 c9             	movzx  ecx,cl
c0025b0d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b13:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b17:	83 ec 08             	sub    esp,0x8
c0025b1a:	6a 01                	push   0x1
c0025b1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b1f:	e8 04 ff ff ff       	call   c0025a28 <IOAPIC::read(int)>
c0025b24:	83 c4 10             	add    esp,0x10
c0025b27:	c1 f8 10             	sar    eax,0x10
c0025b2a:	0f b6 c0             	movzx  eax,al
c0025b2d:	8d 50 01             	lea    edx,[eax+0x1]
c0025b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b33:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b39:	b8 00 00 00 00       	mov    eax,0x0
c0025b3e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b41:	5b                   	pop    ebx
c0025b42:	5e                   	pop    esi
c0025b43:	5f                   	pop    edi
c0025b44:	5d                   	pop    ebp
c0025b45:	c3                   	ret    

c0025b46 <IOAPIC::write(int, int)>:
c0025b46:	55                   	push   ebp
c0025b47:	89 e5                	mov    ebp,esp
c0025b49:	83 ec 10             	sub    esp,0x10
c0025b4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b4f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b55:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b5b:	0f b6 d0             	movzx  edx,al
c0025b5e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b61:	89 10                	mov    DWORD PTR [eax],edx
c0025b63:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b66:	8d 50 10             	lea    edx,[eax+0x10]
c0025b69:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b6c:	89 02                	mov    DWORD PTR [edx],eax
c0025b6e:	90                   	nop
c0025b6f:	c9                   	leave  
c0025b70:	c3                   	ret    
c0025b71:	90                   	nop

c0025b72 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025b72:	55                   	push   ebp
c0025b73:	89 e5                	mov    ebp,esp
c0025b75:	53                   	push   ebx
c0025b76:	83 ec 2c             	sub    esp,0x2c
c0025b79:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b7c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025b7f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025b82:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025b85:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b88:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b8b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025b8e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b91:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025b94:	88 d8                	mov    al,bl
c0025b96:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025b99:	88 c8                	mov    al,cl
c0025b9b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b9e:	88 d0                	mov    al,dl
c0025ba0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025ba3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025ba7:	83 c0 08             	add    eax,0x8
c0025baa:	01 c0                	add    eax,eax
c0025bac:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025baf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bb3:	83 c0 08             	add    eax,0x8
c0025bb6:	01 c0                	add    eax,eax
c0025bb8:	40                   	inc    eax
c0025bb9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025bbc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bbf:	50                   	push   eax
c0025bc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bc3:	e8 60 fe ff ff       	call   c0025a28 <IOAPIC::read(int)>
c0025bc8:	83 c4 08             	add    esp,0x8
c0025bcb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025bce:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025bd5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025bd8:	c1 e0 18             	shl    eax,0x18
c0025bdb:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025bde:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025be1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025be4:	52                   	push   edx
c0025be5:	50                   	push   eax
c0025be6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025be9:	e8 58 ff ff ff       	call   c0025b46 <IOAPIC::write(int, int)>
c0025bee:	83 c4 0c             	add    esp,0xc
c0025bf1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025bf4:	50                   	push   eax
c0025bf5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bf8:	e8 2b fe ff ff       	call   c0025a28 <IOAPIC::read(int)>
c0025bfd:	83 c4 08             	add    esp,0x8
c0025c00:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c03:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c0a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c11:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c18:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c1c:	74 09                	je     c0025c27 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c1e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c25:	eb 07                	jmp    c0025c2e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c27:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c2e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c32:	74 09                	je     c0025c3d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c34:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c3b:	eb 07                	jmp    c0025c44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c3d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c44:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c4b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c4f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c52:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c58:	52                   	push   edx
c0025c59:	50                   	push   eax
c0025c5a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c5d:	e8 e4 fe ff ff       	call   c0025b46 <IOAPIC::write(int, int)>
c0025c62:	83 c4 0c             	add    esp,0xc
c0025c65:	90                   	nop
c0025c66:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c69:	c9                   	leave  
c0025c6a:	c3                   	ret    
c0025c6b:	90                   	nop

c0025c6c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c6c:	55                   	push   ebp
c0025c6d:	89 e5                	mov    ebp,esp
c0025c6f:	57                   	push   edi
c0025c70:	56                   	push   esi
c0025c71:	53                   	push   ebx
c0025c72:	83 ec 2c             	sub    esp,0x2c
c0025c75:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c78:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c7b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c7f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025c83:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c87:	74 5a                	je     c0025ce3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c89:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025c8d:	7f 44                	jg     c0025cd3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025c8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c92:	05 e0 d5 02 c0       	add    eax,0xc002d5e0
c0025c97:	8a 00                	mov    al,BYTE PTR [eax]
c0025c99:	0f b6 c0             	movzx  eax,al
c0025c9c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025c9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ca2:	66 8b 84 00 20 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf2e0]
c0025caa:	0f b7 c0             	movzx  eax,ax
c0025cad:	83 e0 02             	and    eax,0x2
c0025cb0:	85 c0                	test   eax,eax
c0025cb2:	74 04                	je     c0025cb8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025cb4:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025cb8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cbb:	66 8b 84 00 20 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf2e0]
c0025cc3:	0f b7 c0             	movzx  eax,ax
c0025cc6:	83 e0 08             	and    eax,0x8
c0025cc9:	85 c0                	test   eax,eax
c0025ccb:	74 16                	je     c0025ce3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ccd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025cd1:	eb 10                	jmp    c0025ce3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025cd3:	83 ec 0c             	sub    esp,0xc
c0025cd6:	68 9c d0 02 c0       	push   0xc002d09c
c0025cdb:	e8 07 49 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0025ce0:	83 c4 10             	add    esp,0x10
c0025ce3:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025ce7:	a1 20 27 03 c0       	mov    eax,ds:0xc0032720
c0025cec:	83 ec 08             	sub    esp,0x8
c0025cef:	50                   	push   eax
c0025cf0:	68 d4 d0 02 c0       	push   0xc002d0d4
c0025cf5:	e8 4c d2 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0025cfa:	83 c4 10             	add    esp,0x10
c0025cfd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d04:	a1 20 27 03 c0       	mov    eax,ds:0xc0032720
c0025d09:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d0c:	7d 67                	jge    c0025d75 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d0e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d11:	8b 04 85 40 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8c0]
c0025d18:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d1b:	83 ec 08             	sub    esp,0x8
c0025d1e:	52                   	push   edx
c0025d1f:	50                   	push   eax
c0025d20:	e8 d1 fc ff ff       	call   c00259f6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d25:	83 c4 10             	add    esp,0x10
c0025d28:	84 c0                	test   al,al
c0025d2a:	74 44                	je     c0025d70 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d2c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d2f:	8b 1c 85 40 27 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd8c0]
c0025d36:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d3a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d3d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d44:	83 c0 20             	add    eax,0x20
c0025d47:	0f b6 f0             	movzx  esi,al
c0025d4a:	b8 00 00 00 00       	mov    eax,0x0
c0025d4f:	99                   	cdq    
c0025d50:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d53:	0f b6 c9             	movzx  ecx,cl
c0025d56:	83 ec 04             	sub    esp,0x4
c0025d59:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d5c:	57                   	push   edi
c0025d5d:	56                   	push   esi
c0025d5e:	52                   	push   edx
c0025d5f:	50                   	push   eax
c0025d60:	51                   	push   ecx
c0025d61:	53                   	push   ebx
c0025d62:	e8 0b fe ff ff       	call   c0025b72 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d67:	83 c4 20             	add    esp,0x20
c0025d6a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d6e:	eb 05                	jmp    c0025d75 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d70:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025d73:	eb 8f                	jmp    c0025d04 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025d75:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025d78:	83 f0 01             	xor    eax,0x1
c0025d7b:	84 c0                	test   al,al
c0025d7d:	74 10                	je     c0025d8f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025d7f:	83 ec 0c             	sub    esp,0xc
c0025d82:	68 eb d0 02 c0       	push   0xc002d0eb
c0025d87:	e8 5b 48 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0025d8c:	83 c4 10             	add    esp,0x10
c0025d8f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025d93:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025d9a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025d9e:	7f 65                	jg     c0025e05 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025da0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025da3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025da6:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dad:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025db0:	01 ca                	add    edx,ecx
c0025db2:	83 c2 54             	add    edx,0x54
c0025db5:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025db9:	85 c0                	test   eax,eax
c0025dbb:	75 43                	jne    c0025e00 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025dbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dc0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dc3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dca:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dcd:	01 ca                	add    edx,ecx
c0025dcf:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025dd2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025dd5:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025dd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ddc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ddf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025de6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025de9:	01 ca                	add    edx,ecx
c0025deb:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025df1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025df4:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025df8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dfb:	83 e8 20             	sub    eax,0x20
c0025dfe:	eb 1a                	jmp    c0025e1a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e00:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e03:	eb 95                	jmp    c0025d9a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e05:	83 ec 0c             	sub    esp,0xc
c0025e08:	68 f8 d0 02 c0       	push   0xc002d0f8
c0025e0d:	e8 d5 47 ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0025e12:	83 c4 10             	add    esp,0x10
c0025e15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e1a:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e1d:	5b                   	pop    ebx
c0025e1e:	5e                   	pop    esi
c0025e1f:	5f                   	pop    edi
c0025e20:	5d                   	pop    ebp
c0025e21:	c3                   	ret    

c0025e22 <PIC::disable()>:
c0025e22:	55                   	push   ebp
c0025e23:	89 e5                	mov    ebp,esp
c0025e25:	83 ec 10             	sub    esp,0x10
c0025e28:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e2e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e32:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e35:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e39:	ee                   	out    dx,al
c0025e3a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e40:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e44:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e47:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e4b:	ee                   	out    dx,al
c0025e4c:	90                   	nop
c0025e4d:	c9                   	leave  
c0025e4e:	c3                   	ret    
c0025e4f:	90                   	nop

c0025e50 <PIC::close(int, int, void*)>:
c0025e50:	55                   	push   ebp
c0025e51:	89 e5                	mov    ebp,esp
c0025e53:	83 ec 08             	sub    esp,0x8
c0025e56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e59:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e5b:	83 c0 3c             	add    eax,0x3c
c0025e5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e60:	83 ec 0c             	sub    esp,0xc
c0025e63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e66:	ff d0                	call   eax
c0025e68:	83 c4 10             	add    esp,0x10
c0025e6b:	b8 00 00 00 00       	mov    eax,0x0
c0025e70:	c9                   	leave  
c0025e71:	c3                   	ret    

c0025e72 <PIC::PIC()>:
c0025e72:	83 ec 0c             	sub    esp,0xc
c0025e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e79:	83 ec 08             	sub    esp,0x8
c0025e7c:	68 a4 d1 02 c0       	push   0xc002d1a4
c0025e81:	50                   	push   eax
c0025e82:	e8 41 ee fe ff       	call   c0014cc8 <InterruptController::InterruptController(char const*)>
c0025e87:	83 c4 10             	add    esp,0x10
c0025e8a:	ba d0 d1 02 c0       	mov    edx,0xc002d1d0
c0025e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e93:	89 10                	mov    DWORD PTR [eax],edx
c0025e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e99:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e9f:	0f b6 d0             	movzx  edx,al
c0025ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea6:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025ead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025eb7:	0f b6 d0             	movzx  edx,al
c0025eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ebe:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025ec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ecd:	8d 50 01             	lea    edx,[eax+0x1]
c0025ed0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ed4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025eda:	0f b6 d0             	movzx  edx,al
c0025edd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ee5:	83 e1 3f             	and    ecx,0x3f
c0025ee8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ef6:	0f b6 d0             	movzx  edx,al
c0025ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025efd:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f08:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f0e:	0f b6 d0             	movzx  edx,al
c0025f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f15:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f24:	8d 50 01             	lea    edx,[eax+0x1]
c0025f27:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f2b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f31:	0f b6 d0             	movzx  edx,al
c0025f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f38:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f3c:	83 e1 3f             	and    ecx,0x3f
c0025f3f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f43:	90                   	nop
c0025f44:	83 c4 0c             	add    esp,0xc
c0025f47:	c3                   	ret    

c0025f48 <PIC::ioWait()>:
c0025f48:	eb 00                	jmp    c0025f4a <PIC::ioWait()+0x2>
c0025f4a:	eb 00                	jmp    c0025f4c <PIC::ioWait()+0x4>
c0025f4c:	90                   	nop
c0025f4d:	c3                   	ret    

c0025f4e <PIC::getIRQReg(int)>:
c0025f4e:	55                   	push   ebp
c0025f4f:	89 e5                	mov    ebp,esp
c0025f51:	83 ec 10             	sub    esp,0x10
c0025f54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f57:	0f b6 c0             	movzx  eax,al
c0025f5a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f60:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f63:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f66:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f6a:	ee                   	out    dx,al
c0025f6b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f6e:	0f b6 c0             	movzx  eax,al
c0025f71:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f77:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025f7a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f7d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f81:	ee                   	out    dx,al
c0025f82:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025f88:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025f8c:	89 c2                	mov    edx,eax
c0025f8e:	ec                   	in     al,dx
c0025f8f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025f92:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f95:	0f b6 c0             	movzx  eax,al
c0025f98:	c1 e0 08             	shl    eax,0x8
c0025f9b:	89 c1                	mov    ecx,eax
c0025f9d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025fa3:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025fa7:	89 c2                	mov    edx,eax
c0025fa9:	ec                   	in     al,dx
c0025faa:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025fad:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025fb0:	0f b6 c0             	movzx  eax,al
c0025fb3:	09 c8                	or     eax,ecx
c0025fb5:	c9                   	leave  
c0025fb6:	c3                   	ret    
c0025fb7:	90                   	nop

c0025fb8 <PIC::eoi(unsigned char)>:
c0025fb8:	55                   	push   ebp
c0025fb9:	89 e5                	mov    ebp,esp
c0025fbb:	83 ec 14             	sub    esp,0x14
c0025fbe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fc1:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025fc4:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025fc8:	75 1e                	jne    c0025fe8 <PIC::eoi(unsigned char)+0x30>
c0025fca:	6a 0b                	push   0xb
c0025fcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fcf:	e8 7a ff ff ff       	call   c0025f4e <PIC::getIRQReg(int)>
c0025fd4:	83 c4 08             	add    esp,0x8
c0025fd7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025fdb:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025fdf:	25 80 00 00 00       	and    eax,0x80
c0025fe4:	85 c0                	test   eax,eax
c0025fe6:	74 5f                	je     c0026047 <PIC::eoi(unsigned char)+0x8f>
c0025fe8:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025fec:	75 2d                	jne    c002601b <PIC::eoi(unsigned char)+0x63>
c0025fee:	6a 0b                	push   0xb
c0025ff0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ff3:	e8 56 ff ff ff       	call   c0025f4e <PIC::getIRQReg(int)>
c0025ff8:	83 c4 08             	add    esp,0x8
c0025ffb:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025fff:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026002:	66 85 c0             	test   ax,ax
c0026005:	78 14                	js     c002601b <PIC::eoi(unsigned char)+0x63>
c0026007:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002600d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026011:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026014:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026018:	ee                   	out    dx,al
c0026019:	eb 2d                	jmp    c0026048 <PIC::eoi(unsigned char)+0x90>
c002601b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002601f:	76 12                	jbe    c0026033 <PIC::eoi(unsigned char)+0x7b>
c0026021:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026027:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002602b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002602e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026032:	ee                   	out    dx,al
c0026033:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026039:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002603d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026040:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026044:	ee                   	out    dx,al
c0026045:	eb 01                	jmp    c0026048 <PIC::eoi(unsigned char)+0x90>
c0026047:	90                   	nop
c0026048:	c9                   	leave  
c0026049:	c3                   	ret    

c002604a <PIC::remap()>:
c002604a:	55                   	push   ebp
c002604b:	89 e5                	mov    ebp,esp
c002604d:	83 ec 48             	sub    esp,0x48
c0026050:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026057:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002605e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026064:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026067:	89 c2                	mov    edx,eax
c0026069:	ec                   	in     al,dx
c002606a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002606d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026070:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026073:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026079:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002607c:	89 c2                	mov    edx,eax
c002607e:	ec                   	in     al,dx
c002607f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026082:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026085:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026088:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002608e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026092:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026095:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026098:	ee                   	out    dx,al
c0026099:	83 ec 0c             	sub    esp,0xc
c002609c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002609f:	e8 a4 fe ff ff       	call   c0025f48 <PIC::ioWait()>
c00260a4:	83 c4 10             	add    esp,0x10
c00260a7:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00260ad:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00260b1:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00260b4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260b7:	ee                   	out    dx,al
c00260b8:	83 ec 0c             	sub    esp,0xc
c00260bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260be:	e8 85 fe ff ff       	call   c0025f48 <PIC::ioWait()>
c00260c3:	83 c4 10             	add    esp,0x10
c00260c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00260c9:	0f b6 c0             	movzx  eax,al
c00260cc:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00260d2:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00260d5:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00260d8:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00260db:	ee                   	out    dx,al
c00260dc:	83 ec 0c             	sub    esp,0xc
c00260df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260e2:	e8 61 fe ff ff       	call   c0025f48 <PIC::ioWait()>
c00260e7:	83 c4 10             	add    esp,0x10
c00260ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00260ed:	0f b6 c0             	movzx  eax,al
c00260f0:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00260f6:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00260f9:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00260fc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00260ff:	ee                   	out    dx,al
c0026100:	83 ec 0c             	sub    esp,0xc
c0026103:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026106:	e8 3d fe ff ff       	call   c0025f48 <PIC::ioWait()>
c002610b:	83 c4 10             	add    esp,0x10
c002610e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026114:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026118:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002611b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002611e:	ee                   	out    dx,al
c002611f:	83 ec 0c             	sub    esp,0xc
c0026122:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026125:	e8 1e fe ff ff       	call   c0025f48 <PIC::ioWait()>
c002612a:	83 c4 10             	add    esp,0x10
c002612d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026133:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026137:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002613a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002613d:	ee                   	out    dx,al
c002613e:	83 ec 0c             	sub    esp,0xc
c0026141:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026144:	e8 ff fd ff ff       	call   c0025f48 <PIC::ioWait()>
c0026149:	83 c4 10             	add    esp,0x10
c002614c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026152:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026156:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026159:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002615c:	ee                   	out    dx,al
c002615d:	83 ec 0c             	sub    esp,0xc
c0026160:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026163:	e8 e0 fd ff ff       	call   c0025f48 <PIC::ioWait()>
c0026168:	83 c4 10             	add    esp,0x10
c002616b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026171:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026175:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026178:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002617b:	ee                   	out    dx,al
c002617c:	83 ec 0c             	sub    esp,0xc
c002617f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026182:	e8 c1 fd ff ff       	call   c0025f48 <PIC::ioWait()>
c0026187:	83 c4 10             	add    esp,0x10
c002618a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002618e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026194:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026197:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002619a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002619d:	ee                   	out    dx,al
c002619e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00261a2:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00261a8:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00261ab:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00261ae:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00261b1:	ee                   	out    dx,al
c00261b2:	90                   	nop
c00261b3:	c9                   	leave  
c00261b4:	c3                   	ret    
c00261b5:	90                   	nop

c00261b6 <PIC::open(int, int, void*)>:
c00261b6:	55                   	push   ebp
c00261b7:	89 e5                	mov    ebp,esp
c00261b9:	83 ec 18             	sub    esp,0x18
c00261bc:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00261c2:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00261c6:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00261c9:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00261cd:	ee                   	out    dx,al
c00261ce:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00261d4:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00261d8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00261db:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261df:	ee                   	out    dx,al
c00261e0:	83 ec 0c             	sub    esp,0xc
c00261e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261e6:	e8 5f fe ff ff       	call   c002604a <PIC::remap()>
c00261eb:	83 c4 10             	add    esp,0x10
c00261ee:	b8 00 00 00 00       	mov    eax,0x0
c00261f3:	c9                   	leave  
c00261f4:	c3                   	ret    
c00261f5:	90                   	nop

c00261f6 <APICTimer::close(int, int, void*)>:
c00261f6:	b8 00 00 00 00       	mov    eax,0x0
c00261fb:	c3                   	ret    

c00261fc <apicTimerHandler(regs*, void*)>:
c00261fc:	83 ec 0c             	sub    esp,0xc
c00261ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026203:	8b 00                	mov    eax,DWORD PTR [eax]
c0026205:	99                   	cdq    
c0026206:	52                   	push   edx
c0026207:	50                   	push   eax
c0026208:	6a 00                	push   0x0
c002620a:	68 00 ca 9a 3b       	push   0x3b9aca00
c002620f:	e8 88 07 00 00       	call   c002699c <__udivdi3>
c0026214:	83 c4 10             	add    esp,0x10
c0026217:	83 ec 08             	sub    esp,0x8
c002621a:	52                   	push   edx
c002621b:	50                   	push   eax
c002621c:	e8 f2 0a ff ff       	call   c0016d13 <timerHandler(unsigned long long)>
c0026221:	83 c4 10             	add    esp,0x10
c0026224:	90                   	nop
c0026225:	83 c4 0c             	add    esp,0xc
c0026228:	c3                   	ret    
c0026229:	90                   	nop

c002622a <APICTimer::write(int)>:
c002622a:	53                   	push   ebx
c002622b:	83 ec 28             	sub    esp,0x28
c002622e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026232:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026236:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002623c:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0026241:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026247:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002624d:	83 ec 0c             	sub    esp,0xc
c0026250:	50                   	push   eax
c0026251:	e8 de f4 ff ff       	call   c0025734 <APIC::getBase()>
c0026256:	83 c4 10             	add    esp,0x10
c0026259:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002625d:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0026262:	8b 15 34 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea34
c0026268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002626c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026270:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026274:	05 e0 03 00 00       	add    eax,0x3e0
c0026279:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002627f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026283:	05 80 03 00 00       	add    eax,0x380
c0026288:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002628e:	fb                   	sti    
c002628f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026293:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026297:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002629c:	83 d2 00             	adc    edx,0x0
c002629f:	89 c1                	mov    ecx,eax
c00262a1:	89 d3                	mov    ebx,edx
c00262a3:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00262a8:	8b 15 34 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea34
c00262ae:	39 c8                	cmp    eax,ecx
c00262b0:	89 d0                	mov    eax,edx
c00262b2:	19 d8                	sbb    eax,ebx
c00262b4:	73 02                	jae    c00262b8 <APICTimer::write(int)+0x8e>
c00262b6:	eb d7                	jmp    c002628f <APICTimer::write(int)+0x65>
c00262b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262bc:	05 20 03 00 00       	add    eax,0x320
c00262c1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00262c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262cb:	05 90 03 00 00       	add    eax,0x390
c00262d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00262d2:	f7 d0                	not    eax
c00262d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262d8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262e0:	ba 00 00 00 00       	mov    edx,0x0
c00262e5:	f7 f3                	div    ebx
c00262e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00262ef:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00262f5:	0d 00 00 02 00       	or     eax,0x20000
c00262fa:	89 c2                	mov    edx,eax
c00262fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026300:	05 20 03 00 00       	add    eax,0x320
c0026305:	89 10                	mov    DWORD PTR [eax],edx
c0026307:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002630b:	05 e0 03 00 00       	add    eax,0x3e0
c0026310:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002631a:	05 80 03 00 00       	add    eax,0x380
c002631f:	89 c2                	mov    edx,eax
c0026321:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026325:	89 02                	mov    DWORD PTR [edx],eax
c0026327:	90                   	nop
c0026328:	83 c4 28             	add    esp,0x28
c002632b:	5b                   	pop    ebx
c002632c:	c3                   	ret    
c002632d:	90                   	nop

c002632e <APICTimer::open(int, int, void*)>:
c002632e:	57                   	push   edi
c002632f:	56                   	push   esi
c0026330:	53                   	push   ebx
c0026331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026335:	8b 00                	mov    eax,DWORD PTR [eax]
c0026337:	83 c0 24             	add    eax,0x24
c002633a:	8b 00                	mov    eax,DWORD PTR [eax]
c002633c:	83 ec 08             	sub    esp,0x8
c002633f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026347:	ff d0                	call   eax
c0026349:	83 c4 10             	add    esp,0x10
c002634c:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0026351:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026357:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002635d:	83 ec 0c             	sub    esp,0xc
c0026360:	50                   	push   eax
c0026361:	e8 ce f3 ff ff       	call   c0025734 <APIC::getBase()>
c0026366:	83 c4 10             	add    esp,0x10
c0026369:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002636f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026373:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026379:	0f b6 f8             	movzx  edi,al
c002637c:	89 d0                	mov    eax,edx
c002637e:	ba 00 00 00 00       	mov    edx,0x0
c0026383:	89 c1                	mov    ecx,eax
c0026385:	80 e5 ff             	and    ch,0xff
c0026388:	89 cb                	mov    ebx,ecx
c002638a:	0f b6 f2             	movzx  esi,dl
c002638d:	89 d8                	mov    eax,ebx
c002638f:	89 f2                	mov    edx,esi
c0026391:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026395:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026398:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002639c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263a0:	83 e0 00             	and    eax,0x0
c00263a3:	09 d0                	or     eax,edx
c00263a5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00263a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ad:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263b3:	8d 50 01             	lea    edx,[eax+0x1]
c00263b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263ba:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00263c0:	0f b6 d0             	movzx  edx,al
c00263c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c7:	83 c2 08             	add    edx,0x8
c00263ca:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00263ce:	0f b6 c9             	movzx  ecx,cl
c00263d1:	81 c9 00 00 01 00    	or     ecx,0x10000
c00263d7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00263db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263e3:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00263e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263f1:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00263f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263fb:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026401:	83 ec 0c             	sub    esp,0xc
c0026404:	51                   	push   ecx
c0026405:	6a 01                	push   0x1
c0026407:	68 fc 61 02 c0       	push   0xc00261fc
c002640c:	52                   	push   edx
c002640d:	50                   	push   eax
c002640e:	e8 dd de fe ff       	call   c00142f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026413:	83 c4 20             	add    esp,0x20
c0026416:	89 c2                	mov    edx,eax
c0026418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002641c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026422:	b8 00 00 00 00       	mov    eax,0x0
c0026427:	5b                   	pop    ebx
c0026428:	5e                   	pop    esi
c0026429:	5f                   	pop    edi
c002642a:	c3                   	ret    
c002642b:	90                   	nop

c002642c <APICTimer::APICTimer()>:
c002642c:	83 ec 0c             	sub    esp,0xc
c002642f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026433:	83 ec 08             	sub    esp,0x8
c0026436:	68 10 d2 02 c0       	push   0xc002d210
c002643b:	50                   	push   eax
c002643c:	e8 43 08 ff ff       	call   c0016c84 <Timer::Timer(char const*)>
c0026441:	83 c4 10             	add    esp,0x10
c0026444:	ba 24 d2 02 c0       	mov    edx,0xc002d224
c0026449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002644d:	89 10                	mov    DWORD PTR [eax],edx
c002644f:	90                   	nop
c0026450:	83 c4 0c             	add    esp,0xc
c0026453:	c3                   	ret    

c0026454 <PIT::write(int)>:
c0026454:	83 ec 10             	sub    esp,0x10
c0026457:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002645b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002645f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026465:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026469:	a3 64 27 03 c0       	mov    ds:0xc0032764,eax
c002646e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026473:	99                   	cdq    
c0026474:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026478:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002647c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026483:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026488:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002648c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026491:	ee                   	out    dx,al
c0026492:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026496:	0f b6 c0             	movzx  eax,al
c0026499:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00264a0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00264a4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00264a8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00264ad:	ee                   	out    dx,al
c00264ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264b2:	c1 f8 08             	sar    eax,0x8
c00264b5:	0f b6 c0             	movzx  eax,al
c00264b8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00264bf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00264c3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00264c7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00264cc:	ee                   	out    dx,al
c00264cd:	90                   	nop
c00264ce:	83 c4 10             	add    esp,0x10
c00264d1:	c3                   	ret    

c00264d2 <pitHandler(regs*, void*)>:
c00264d2:	83 ec 0c             	sub    esp,0xc
c00264d5:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c00264da:	99                   	cdq    
c00264db:	52                   	push   edx
c00264dc:	50                   	push   eax
c00264dd:	6a 00                	push   0x0
c00264df:	68 00 ca 9a 3b       	push   0x3b9aca00
c00264e4:	e8 b3 04 00 00       	call   c002699c <__udivdi3>
c00264e9:	83 c4 10             	add    esp,0x10
c00264ec:	83 ec 08             	sub    esp,0x8
c00264ef:	52                   	push   edx
c00264f0:	50                   	push   eax
c00264f1:	e8 1d 08 ff ff       	call   c0016d13 <timerHandler(unsigned long long)>
c00264f6:	83 c4 10             	add    esp,0x10
c00264f9:	90                   	nop
c00264fa:	83 c4 0c             	add    esp,0xc
c00264fd:	c3                   	ret    

c00264fe <PIT::open(int, int, void*)>:
c00264fe:	83 ec 0c             	sub    esp,0xc
c0026501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026505:	8b 00                	mov    eax,DWORD PTR [eax]
c0026507:	83 c0 24             	add    eax,0x24
c002650a:	8b 00                	mov    eax,DWORD PTR [eax]
c002650c:	83 ec 08             	sub    esp,0x8
c002650f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026513:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026517:	ff d0                	call   eax
c0026519:	83 c4 10             	add    esp,0x10
c002651c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026520:	83 ec 0c             	sub    esp,0xc
c0026523:	6a 00                	push   0x0
c0026525:	6a 01                	push   0x1
c0026527:	68 d2 64 02 c0       	push   0xc00264d2
c002652c:	6a 00                	push   0x0
c002652e:	50                   	push   eax
c002652f:	e8 bc dd fe ff       	call   c00142f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026534:	83 c4 20             	add    esp,0x20
c0026537:	89 c2                	mov    edx,eax
c0026539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002653d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026543:	b8 00 00 00 00       	mov    eax,0x0
c0026548:	83 c4 0c             	add    esp,0xc
c002654b:	c3                   	ret    

c002654c <PIT::close(int, int, void*)>:
c002654c:	83 ec 0c             	sub    esp,0xc
c002654f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026553:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002655d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026561:	6a 01                	push   0x1
c0026563:	68 d2 64 02 c0       	push   0xc00264d2
c0026568:	6a 00                	push   0x0
c002656a:	50                   	push   eax
c002656b:	e8 be dd fe ff       	call   c001432e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026570:	83 c4 10             	add    esp,0x10
c0026573:	b8 00 00 00 00       	mov    eax,0x0
c0026578:	83 c4 0c             	add    esp,0xc
c002657b:	c3                   	ret    

c002657c <PIT::PIT()>:
c002657c:	83 ec 0c             	sub    esp,0xc
c002657f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026583:	83 ec 08             	sub    esp,0x8
c0026586:	68 4c d2 02 c0       	push   0xc002d24c
c002658b:	50                   	push   eax
c002658c:	e8 f3 06 ff ff       	call   c0016c84 <Timer::Timer(char const*)>
c0026591:	83 c4 10             	add    esp,0x10
c0026594:	ba 74 d2 02 c0       	mov    edx,0xc002d274
c0026599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002659d:	89 10                	mov    DWORD PTR [eax],edx
c002659f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265a9:	0f b6 d0             	movzx  edx,al
c00265ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00265b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265c1:	0f b6 d0             	movzx  edx,al
c00265c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00265cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265d7:	8d 50 01             	lea    edx,[eax+0x1]
c00265da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265de:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00265e4:	0f b6 d0             	movzx  edx,al
c00265e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265eb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00265ef:	83 e1 3f             	and    ecx,0x3f
c00265f2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00265f6:	90                   	nop
c00265f7:	83 c4 0c             	add    esp,0xc
c00265fa:	c3                   	ret    
c00265fb:	66 90                	xchg   ax,ax
c00265fd:	66 90                	xchg   ax,ax
c00265ff:	90                   	nop

c0026600 <avxDetect>:
c0026600:	b8 00 00 00 00       	mov    eax,0x0
c0026605:	c3                   	ret    

c0026606 <avxSave>:
c0026606:	c3                   	ret    

c0026607 <avxLoad>:
c0026607:	c3                   	ret    

c0026608 <avxInit>:
c0026608:	c3                   	ret    

c0026609 <avxClose>:
c0026609:	c3                   	ret    

c002660a <wouldSheSayYes>:
c002660a:	c3                   	ret    
c002660b:	49                   	dec    ecx
c002660c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026610:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026614:	75 20                	jne    c0026636 <sseDetect.noSSE+0x1>
c0026616:	4e                   	dec    esi
c0026617:	79 61                	jns    c002667a <x87Detect+0x14>
c0026619:	68 2e 2e 2e 00       	push   0x2e2e2e
c002661e:	66 90                	xchg   ax,ax

c0026620 <absolutelyNoChanceInHell>:
c0026620:	b8 01 00 00 00       	mov    eax,0x1
c0026625:	0f a2                	cpuid  
c0026627:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002662d:	74 06                	je     c0026635 <sseDetect.noSSE>
c002662f:	b8 01 00 00 00       	mov    eax,0x1
c0026634:	c3                   	ret    

c0026635 <sseDetect.noSSE>:
c0026635:	31 c0                	xor    eax,eax
c0026637:	c3                   	ret    

c0026638 <sseSave>:
c0026638:	0f ae 44 24 08       	fxsave [esp+0x8]
c002663d:	c3                   	ret    

c002663e <sseLoad>:
c002663e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026643:	c3                   	ret    

c0026644 <sseInit>:
c0026644:	e8 43 00 00 00       	call   c002668c <x87Init>
c0026649:	0f 20 e0             	mov    eax,cr4
c002664c:	66 0d 00 06          	or     ax,0x600
c0026650:	0f 22 e0             	mov    cr4,eax
c0026653:	c3                   	ret    

c0026654 <sseClose>:
c0026654:	c3                   	ret    
c0026655:	66 90                	xchg   ax,ax
c0026657:	66 90                	xchg   ax,ax
c0026659:	66 90                	xchg   ax,ax
c002665b:	66 90                	xchg   ax,ax
c002665d:	66 90                	xchg   ax,ax
c002665f:	90                   	nop

c0026660 <value_37F>:
c0026660:	7f 03                	jg     c0026665 <value_37A+0x1>

c0026662 <value_37E>:
c0026662:	7e 03                	jle    c0026667 <x87Detect+0x1>

c0026664 <value_37A>:
c0026664:	7a 03                	jp     c0026669 <x87Detect+0x3>

c0026666 <x87Detect>:
c0026666:	b8 01 00 00 00       	mov    eax,0x1
c002666b:	0f a2                	cpuid  
c002666d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026673:	74 06                	je     c002667b <x87Detect.nox87>
c0026675:	b8 01 00 00 00       	mov    eax,0x1
c002667a:	c3                   	ret    

c002667b <x87Detect.nox87>:
c002667b:	b8 00 00 00 00       	mov    eax,0x0
c0026680:	c3                   	ret    

c0026681 <x87Save>:
c0026681:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026686:	c3                   	ret    

c0026687 <x87Load>:
c0026687:	dd 64 24 08          	frstor [esp+0x8]
c002668b:	c3                   	ret    

c002668c <x87Init>:
c002668c:	9b db e3             	finit  
c002668f:	0f 20 c0             	mov    eax,cr0
c0026692:	66 25 fb ff          	and    ax,0xfffb
c0026696:	66 0d 22 00          	or     ax,0x22
c002669a:	0f 22 c0             	mov    cr0,eax
c002669d:	0f 06                	clts   
c002669f:	d9 2d 64 66 02 c0    	fldcw  WORD PTR ds:0xc0026664
c00266a5:	c3                   	ret    

c00266a6 <x87Close>:
c00266a6:	c3                   	ret    
c00266a7:	90                   	nop

c00266a8 <__do_global_ctors_aux>:
c00266a8:	a1 ec 91 02 c0       	mov    eax,ds:0xc00291ec
c00266ad:	83 f8 ff             	cmp    eax,0xffffffff
c00266b0:	74 1a                	je     c00266cc <__do_global_ctors_aux+0x24>
c00266b2:	55                   	push   ebp
c00266b3:	89 e5                	mov    ebp,esp
c00266b5:	53                   	push   ebx
c00266b6:	52                   	push   edx
c00266b7:	bb ec 91 02 c0       	mov    ebx,0xc00291ec
c00266bc:	ff d0                	call   eax
c00266be:	83 eb 04             	sub    ebx,0x4
c00266c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00266c3:	83 f8 ff             	cmp    eax,0xffffffff
c00266c6:	75 f4                	jne    c00266bc <__do_global_ctors_aux+0x14>
c00266c8:	58                   	pop    eax
c00266c9:	5b                   	pop    ebx
c00266ca:	5d                   	pop    ebp
c00266cb:	c3                   	ret    
c00266cc:	c3                   	ret    
c00266cd:	66 90                	xchg   ax,ax
c00266cf:	90                   	nop

c00266d0 <__divdi3>:
c00266d0:	55                   	push   ebp
c00266d1:	57                   	push   edi
c00266d2:	56                   	push   esi
c00266d3:	53                   	push   ebx
c00266d4:	83 ec 1c             	sub    esp,0x1c
c00266d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00266db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00266df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00266e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00266e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00266ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00266ee:	85 db                	test   ebx,ebx
c00266f0:	0f 88 8e 00 00 00    	js     c0026784 <__divdi3+0xb4>
c00266f6:	89 dd                	mov    ebp,ebx
c00266f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026700:	89 d3                	mov    ebx,edx
c0026702:	85 d2                	test   edx,edx
c0026704:	79 0d                	jns    c0026713 <__divdi3+0x43>
c0026706:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002670a:	f7 d8                	neg    eax
c002670c:	83 d2 00             	adc    edx,0x0
c002670f:	f7 da                	neg    edx
c0026711:	89 d3                	mov    ebx,edx
c0026713:	89 c7                	mov    edi,eax
c0026715:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026718:	85 db                	test   ebx,ebx
c002671a:	75 48                	jne    c0026764 <__divdi3+0x94>
c002671c:	39 ef                	cmp    edi,ebp
c002671e:	76 24                	jbe    c0026744 <__divdi3+0x74>
c0026720:	89 ea                	mov    edx,ebp
c0026722:	f7 f7                	div    edi
c0026724:	89 c1                	mov    ecx,eax
c0026726:	31 f6                	xor    esi,esi
c0026728:	89 c8                	mov    eax,ecx
c002672a:	89 f2                	mov    edx,esi
c002672c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026730:	85 c9                	test   ecx,ecx
c0026732:	74 07                	je     c002673b <__divdi3+0x6b>
c0026734:	f7 d8                	neg    eax
c0026736:	83 d2 00             	adc    edx,0x0
c0026739:	f7 da                	neg    edx
c002673b:	83 c4 1c             	add    esp,0x1c
c002673e:	5b                   	pop    ebx
c002673f:	5e                   	pop    esi
c0026740:	5f                   	pop    edi
c0026741:	5d                   	pop    ebp
c0026742:	c3                   	ret    
c0026743:	90                   	nop
c0026744:	85 ff                	test   edi,edi
c0026746:	75 0b                	jne    c0026753 <__divdi3+0x83>
c0026748:	b8 01 00 00 00       	mov    eax,0x1
c002674d:	31 d2                	xor    edx,edx
c002674f:	f7 f3                	div    ebx
c0026751:	89 c7                	mov    edi,eax
c0026753:	31 d2                	xor    edx,edx
c0026755:	89 e8                	mov    eax,ebp
c0026757:	f7 f7                	div    edi
c0026759:	89 c6                	mov    esi,eax
c002675b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002675e:	f7 f7                	div    edi
c0026760:	89 c1                	mov    ecx,eax
c0026762:	eb c4                	jmp    c0026728 <__divdi3+0x58>
c0026764:	39 eb                	cmp    ebx,ebp
c0026766:	77 3c                	ja     c00267a4 <__divdi3+0xd4>
c0026768:	0f bd f3             	bsr    esi,ebx
c002676b:	83 f6 1f             	xor    esi,0x1f
c002676e:	75 40                	jne    c00267b0 <__divdi3+0xe0>
c0026770:	39 eb                	cmp    ebx,ebp
c0026772:	72 09                	jb     c002677d <__divdi3+0xad>
c0026774:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026777:	0f 87 97 00 00 00    	ja     c0026814 <__divdi3+0x144>
c002677d:	b9 01 00 00 00       	mov    ecx,0x1
c0026782:	eb a4                	jmp    c0026728 <__divdi3+0x58>
c0026784:	f7 d9                	neg    ecx
c0026786:	83 d3 00             	adc    ebx,0x0
c0026789:	f7 db                	neg    ebx
c002678b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002678e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026792:	89 dd                	mov    ebp,ebx
c0026794:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002679c:	e9 5f ff ff ff       	jmp    c0026700 <__divdi3+0x30>
c00267a1:	8d 76 00             	lea    esi,[esi+0x0]
c00267a4:	31 f6                	xor    esi,esi
c00267a6:	31 c9                	xor    ecx,ecx
c00267a8:	e9 7b ff ff ff       	jmp    c0026728 <__divdi3+0x58>
c00267ad:	8d 76 00             	lea    esi,[esi+0x0]
c00267b0:	b8 20 00 00 00       	mov    eax,0x20
c00267b5:	29 f0                	sub    eax,esi
c00267b7:	89 f1                	mov    ecx,esi
c00267b9:	d3 e3                	shl    ebx,cl
c00267bb:	89 fa                	mov    edx,edi
c00267bd:	88 c1                	mov    cl,al
c00267bf:	d3 ea                	shr    edx,cl
c00267c1:	09 da                	or     edx,ebx
c00267c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00267c7:	89 f1                	mov    ecx,esi
c00267c9:	d3 e7                	shl    edi,cl
c00267cb:	89 eb                	mov    ebx,ebp
c00267cd:	88 c1                	mov    cl,al
c00267cf:	d3 eb                	shr    ebx,cl
c00267d1:	89 f1                	mov    ecx,esi
c00267d3:	d3 e5                	shl    ebp,cl
c00267d5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00267d8:	88 c1                	mov    cl,al
c00267da:	d3 ea                	shr    edx,cl
c00267dc:	09 d5                	or     ebp,edx
c00267de:	89 e8                	mov    eax,ebp
c00267e0:	89 da                	mov    edx,ebx
c00267e2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00267e6:	89 d3                	mov    ebx,edx
c00267e8:	89 c5                	mov    ebp,eax
c00267ea:	f7 e7                	mul    edi
c00267ec:	39 d3                	cmp    ebx,edx
c00267ee:	72 18                	jb     c0026808 <__divdi3+0x138>
c00267f0:	74 0a                	je     c00267fc <__divdi3+0x12c>
c00267f2:	89 e9                	mov    ecx,ebp
c00267f4:	31 f6                	xor    esi,esi
c00267f6:	e9 2d ff ff ff       	jmp    c0026728 <__divdi3+0x58>
c00267fb:	90                   	nop
c00267fc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00267ff:	89 f1                	mov    ecx,esi
c0026801:	d3 e7                	shl    edi,cl
c0026803:	39 c7                	cmp    edi,eax
c0026805:	73 eb                	jae    c00267f2 <__divdi3+0x122>
c0026807:	90                   	nop
c0026808:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002680b:	31 f6                	xor    esi,esi
c002680d:	e9 16 ff ff ff       	jmp    c0026728 <__divdi3+0x58>
c0026812:	66 90                	xchg   ax,ax
c0026814:	31 c9                	xor    ecx,ecx
c0026816:	e9 0d ff ff ff       	jmp    c0026728 <__divdi3+0x58>
c002681b:	90                   	nop

c002681c <__moddi3>:
c002681c:	55                   	push   ebp
c002681d:	57                   	push   edi
c002681e:	56                   	push   esi
c002681f:	53                   	push   ebx
c0026820:	83 ec 2c             	sub    esp,0x2c
c0026823:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026827:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002682b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002682f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026833:	85 db                	test   ebx,ebx
c0026835:	0f 88 85 00 00 00    	js     c00268c0 <__moddi3+0xa4>
c002683b:	89 de                	mov    esi,ebx
c002683d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026845:	89 d7                	mov    edi,edx
c0026847:	85 d2                	test   edx,edx
c0026849:	79 09                	jns    c0026854 <__moddi3+0x38>
c002684b:	f7 d8                	neg    eax
c002684d:	83 d2 00             	adc    edx,0x0
c0026850:	f7 da                	neg    edx
c0026852:	89 d7                	mov    edi,edx
c0026854:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026858:	89 cd                	mov    ebp,ecx
c002685a:	85 ff                	test   edi,edi
c002685c:	75 52                	jne    c00268b0 <__moddi3+0x94>
c002685e:	89 c3                	mov    ebx,eax
c0026860:	39 f0                	cmp    eax,esi
c0026862:	76 24                	jbe    c0026888 <__moddi3+0x6c>
c0026864:	89 c8                	mov    eax,ecx
c0026866:	89 f2                	mov    edx,esi
c0026868:	f7 f3                	div    ebx
c002686a:	89 d6                	mov    esi,edx
c002686c:	89 f0                	mov    eax,esi
c002686e:	31 d2                	xor    edx,edx
c0026870:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026874:	85 c9                	test   ecx,ecx
c0026876:	74 07                	je     c002687f <__moddi3+0x63>
c0026878:	f7 d8                	neg    eax
c002687a:	83 d2 00             	adc    edx,0x0
c002687d:	f7 da                	neg    edx
c002687f:	83 c4 2c             	add    esp,0x2c
c0026882:	5b                   	pop    ebx
c0026883:	5e                   	pop    esi
c0026884:	5f                   	pop    edi
c0026885:	5d                   	pop    ebp
c0026886:	c3                   	ret    
c0026887:	90                   	nop
c0026888:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002688c:	85 db                	test   ebx,ebx
c002688e:	75 0d                	jne    c002689d <__moddi3+0x81>
c0026890:	b8 01 00 00 00       	mov    eax,0x1
c0026895:	31 d2                	xor    edx,edx
c0026897:	f7 f7                	div    edi
c0026899:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002689d:	89 f0                	mov    eax,esi
c002689f:	31 d2                	xor    edx,edx
c00268a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268a5:	f7 f7                	div    edi
c00268a7:	89 e8                	mov    eax,ebp
c00268a9:	f7 f7                	div    edi
c00268ab:	89 d6                	mov    esi,edx
c00268ad:	eb bd                	jmp    c002686c <__moddi3+0x50>
c00268af:	90                   	nop
c00268b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268b4:	39 f7                	cmp    edi,esi
c00268b6:	76 20                	jbe    c00268d8 <__moddi3+0xbc>
c00268b8:	89 c8                	mov    eax,ecx
c00268ba:	89 f2                	mov    edx,esi
c00268bc:	eb b2                	jmp    c0026870 <__moddi3+0x54>
c00268be:	66 90                	xchg   ax,ax
c00268c0:	f7 d9                	neg    ecx
c00268c2:	83 d3 00             	adc    ebx,0x0
c00268c5:	f7 db                	neg    ebx
c00268c7:	89 de                	mov    esi,ebx
c00268c9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00268d1:	e9 6f ff ff ff       	jmp    c0026845 <__moddi3+0x29>
c00268d6:	66 90                	xchg   ax,ax
c00268d8:	0f bd c7             	bsr    eax,edi
c00268db:	83 f0 1f             	xor    eax,0x1f
c00268de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00268e2:	75 24                	jne    c0026908 <__moddi3+0xec>
c00268e4:	39 f7                	cmp    edi,esi
c00268e6:	72 06                	jb     c00268ee <__moddi3+0xd2>
c00268e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00268ec:	77 0c                	ja     c00268fa <__moddi3+0xde>
c00268ee:	89 e9                	mov    ecx,ebp
c00268f0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00268f4:	19 fe                	sbb    esi,edi
c00268f6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00268fe:	89 f2                	mov    edx,esi
c0026900:	e9 6b ff ff ff       	jmp    c0026870 <__moddi3+0x54>
c0026905:	8d 76 00             	lea    esi,[esi+0x0]
c0026908:	b8 20 00 00 00       	mov    eax,0x20
c002690d:	89 c2                	mov    edx,eax
c002690f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026913:	29 da                	sub    edx,ebx
c0026915:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026919:	88 d9                	mov    cl,bl
c002691b:	d3 e7                	shl    edi,cl
c002691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026921:	88 d1                	mov    cl,dl
c0026923:	d3 e8                	shr    eax,cl
c0026925:	09 c7                	or     edi,eax
c0026927:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002692b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002692f:	89 d8                	mov    eax,ebx
c0026931:	88 d9                	mov    cl,bl
c0026933:	d3 e7                	shl    edi,cl
c0026935:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026939:	89 f3                	mov    ebx,esi
c002693b:	88 d1                	mov    cl,dl
c002693d:	d3 eb                	shr    ebx,cl
c002693f:	89 c7                	mov    edi,eax
c0026941:	88 c1                	mov    cl,al
c0026943:	d3 e6                	shl    esi,cl
c0026945:	89 e8                	mov    eax,ebp
c0026947:	88 d1                	mov    cl,dl
c0026949:	d3 e8                	shr    eax,cl
c002694b:	09 f0                	or     eax,esi
c002694d:	89 f9                	mov    ecx,edi
c002694f:	d3 e5                	shl    ebp,cl
c0026951:	89 da                	mov    edx,ebx
c0026953:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026957:	89 d3                	mov    ebx,edx
c0026959:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002695d:	89 c6                	mov    esi,eax
c002695f:	89 d1                	mov    ecx,edx
c0026961:	39 d3                	cmp    ebx,edx
c0026963:	72 27                	jb     c002698c <__moddi3+0x170>
c0026965:	74 21                	je     c0026988 <__moddi3+0x16c>
c0026967:	29 f5                	sub    ebp,esi
c0026969:	19 cb                	sbb    ebx,ecx
c002696b:	89 de                	mov    esi,ebx
c002696d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026971:	d3 e6                	shl    esi,cl
c0026973:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026977:	89 f9                	mov    ecx,edi
c0026979:	d3 ed                	shr    ebp,cl
c002697b:	09 ee                	or     esi,ebp
c002697d:	89 f0                	mov    eax,esi
c002697f:	d3 eb                	shr    ebx,cl
c0026981:	89 da                	mov    edx,ebx
c0026983:	e9 e8 fe ff ff       	jmp    c0026870 <__moddi3+0x54>
c0026988:	39 c5                	cmp    ebp,eax
c002698a:	73 db                	jae    c0026967 <__moddi3+0x14b>
c002698c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026990:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026994:	89 d1                	mov    ecx,edx
c0026996:	89 c6                	mov    esi,eax
c0026998:	eb cd                	jmp    c0026967 <__moddi3+0x14b>
c002699a:	66 90                	xchg   ax,ax

c002699c <__udivdi3>:
c002699c:	55                   	push   ebp
c002699d:	57                   	push   edi
c002699e:	56                   	push   esi
c002699f:	53                   	push   ebx
c00269a0:	83 ec 1c             	sub    esp,0x1c
c00269a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00269a7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00269ab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269af:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00269b3:	85 d2                	test   edx,edx
c00269b5:	75 41                	jne    c00269f8 <__udivdi3+0x5c>
c00269b7:	39 f7                	cmp    edi,esi
c00269b9:	76 15                	jbe    c00269d0 <__udivdi3+0x34>
c00269bb:	89 e8                	mov    eax,ebp
c00269bd:	89 f2                	mov    edx,esi
c00269bf:	f7 f7                	div    edi
c00269c1:	31 db                	xor    ebx,ebx
c00269c3:	89 da                	mov    edx,ebx
c00269c5:	83 c4 1c             	add    esp,0x1c
c00269c8:	5b                   	pop    ebx
c00269c9:	5e                   	pop    esi
c00269ca:	5f                   	pop    edi
c00269cb:	5d                   	pop    ebp
c00269cc:	c3                   	ret    
c00269cd:	8d 76 00             	lea    esi,[esi+0x0]
c00269d0:	89 f9                	mov    ecx,edi
c00269d2:	85 ff                	test   edi,edi
c00269d4:	75 0b                	jne    c00269e1 <__udivdi3+0x45>
c00269d6:	b8 01 00 00 00       	mov    eax,0x1
c00269db:	31 d2                	xor    edx,edx
c00269dd:	f7 f7                	div    edi
c00269df:	89 c1                	mov    ecx,eax
c00269e1:	31 d2                	xor    edx,edx
c00269e3:	89 f0                	mov    eax,esi
c00269e5:	f7 f1                	div    ecx
c00269e7:	89 c3                	mov    ebx,eax
c00269e9:	89 e8                	mov    eax,ebp
c00269eb:	f7 f1                	div    ecx
c00269ed:	89 da                	mov    edx,ebx
c00269ef:	83 c4 1c             	add    esp,0x1c
c00269f2:	5b                   	pop    ebx
c00269f3:	5e                   	pop    esi
c00269f4:	5f                   	pop    edi
c00269f5:	5d                   	pop    ebp
c00269f6:	c3                   	ret    
c00269f7:	90                   	nop
c00269f8:	39 f2                	cmp    edx,esi
c00269fa:	77 1c                	ja     c0026a18 <__udivdi3+0x7c>
c00269fc:	0f bd da             	bsr    ebx,edx
c00269ff:	83 f3 1f             	xor    ebx,0x1f
c0026a02:	75 24                	jne    c0026a28 <__udivdi3+0x8c>
c0026a04:	39 f2                	cmp    edx,esi
c0026a06:	72 08                	jb     c0026a10 <__udivdi3+0x74>
c0026a08:	39 ef                	cmp    edi,ebp
c0026a0a:	0f 87 84 00 00 00    	ja     c0026a94 <__udivdi3+0xf8>
c0026a10:	b8 01 00 00 00       	mov    eax,0x1
c0026a15:	eb ac                	jmp    c00269c3 <__udivdi3+0x27>
c0026a17:	90                   	nop
c0026a18:	31 db                	xor    ebx,ebx
c0026a1a:	31 c0                	xor    eax,eax
c0026a1c:	89 da                	mov    edx,ebx
c0026a1e:	83 c4 1c             	add    esp,0x1c
c0026a21:	5b                   	pop    ebx
c0026a22:	5e                   	pop    esi
c0026a23:	5f                   	pop    edi
c0026a24:	5d                   	pop    ebp
c0026a25:	c3                   	ret    
c0026a26:	66 90                	xchg   ax,ax
c0026a28:	b8 20 00 00 00       	mov    eax,0x20
c0026a2d:	29 d8                	sub    eax,ebx
c0026a2f:	88 d9                	mov    cl,bl
c0026a31:	d3 e2                	shl    edx,cl
c0026a33:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a37:	89 fa                	mov    edx,edi
c0026a39:	88 c1                	mov    cl,al
c0026a3b:	d3 ea                	shr    edx,cl
c0026a3d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a41:	09 d1                	or     ecx,edx
c0026a43:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a47:	88 d9                	mov    cl,bl
c0026a49:	d3 e7                	shl    edi,cl
c0026a4b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a4f:	89 f7                	mov    edi,esi
c0026a51:	88 c1                	mov    cl,al
c0026a53:	d3 ef                	shr    edi,cl
c0026a55:	88 d9                	mov    cl,bl
c0026a57:	d3 e6                	shl    esi,cl
c0026a59:	89 ea                	mov    edx,ebp
c0026a5b:	88 c1                	mov    cl,al
c0026a5d:	d3 ea                	shr    edx,cl
c0026a5f:	09 d6                	or     esi,edx
c0026a61:	89 f0                	mov    eax,esi
c0026a63:	89 fa                	mov    edx,edi
c0026a65:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a69:	89 d7                	mov    edi,edx
c0026a6b:	89 c6                	mov    esi,eax
c0026a6d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a71:	39 d7                	cmp    edi,edx
c0026a73:	72 13                	jb     c0026a88 <__udivdi3+0xec>
c0026a75:	74 09                	je     c0026a80 <__udivdi3+0xe4>
c0026a77:	89 f0                	mov    eax,esi
c0026a79:	31 db                	xor    ebx,ebx
c0026a7b:	e9 43 ff ff ff       	jmp    c00269c3 <__udivdi3+0x27>
c0026a80:	88 d9                	mov    cl,bl
c0026a82:	d3 e5                	shl    ebp,cl
c0026a84:	39 c5                	cmp    ebp,eax
c0026a86:	73 ef                	jae    c0026a77 <__udivdi3+0xdb>
c0026a88:	8d 46 ff             	lea    eax,[esi-0x1]
c0026a8b:	31 db                	xor    ebx,ebx
c0026a8d:	e9 31 ff ff ff       	jmp    c00269c3 <__udivdi3+0x27>
c0026a92:	66 90                	xchg   ax,ax
c0026a94:	31 c0                	xor    eax,eax
c0026a96:	e9 28 ff ff ff       	jmp    c00269c3 <__udivdi3+0x27>
c0026a9b:	90                   	nop

c0026a9c <__umoddi3>:
c0026a9c:	55                   	push   ebp
c0026a9d:	57                   	push   edi
c0026a9e:	56                   	push   esi
c0026a9f:	53                   	push   ebx
c0026aa0:	83 ec 1c             	sub    esp,0x1c
c0026aa3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026aa7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026aab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026aaf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026ab3:	89 da                	mov    edx,ebx
c0026ab5:	85 c0                	test   eax,eax
c0026ab7:	75 37                	jne    c0026af0 <__umoddi3+0x54>
c0026ab9:	39 df                	cmp    edi,ebx
c0026abb:	76 13                	jbe    c0026ad0 <__umoddi3+0x34>
c0026abd:	89 f0                	mov    eax,esi
c0026abf:	f7 f7                	div    edi
c0026ac1:	89 d0                	mov    eax,edx
c0026ac3:	31 d2                	xor    edx,edx
c0026ac5:	83 c4 1c             	add    esp,0x1c
c0026ac8:	5b                   	pop    ebx
c0026ac9:	5e                   	pop    esi
c0026aca:	5f                   	pop    edi
c0026acb:	5d                   	pop    ebp
c0026acc:	c3                   	ret    
c0026acd:	8d 76 00             	lea    esi,[esi+0x0]
c0026ad0:	89 fd                	mov    ebp,edi
c0026ad2:	85 ff                	test   edi,edi
c0026ad4:	75 0b                	jne    c0026ae1 <__umoddi3+0x45>
c0026ad6:	b8 01 00 00 00       	mov    eax,0x1
c0026adb:	31 d2                	xor    edx,edx
c0026add:	f7 f7                	div    edi
c0026adf:	89 c5                	mov    ebp,eax
c0026ae1:	89 d8                	mov    eax,ebx
c0026ae3:	31 d2                	xor    edx,edx
c0026ae5:	f7 f5                	div    ebp
c0026ae7:	89 f0                	mov    eax,esi
c0026ae9:	f7 f5                	div    ebp
c0026aeb:	89 d0                	mov    eax,edx
c0026aed:	eb d4                	jmp    c0026ac3 <__umoddi3+0x27>
c0026aef:	90                   	nop
c0026af0:	89 f1                	mov    ecx,esi
c0026af2:	39 d8                	cmp    eax,ebx
c0026af4:	76 0a                	jbe    c0026b00 <__umoddi3+0x64>
c0026af6:	89 f0                	mov    eax,esi
c0026af8:	83 c4 1c             	add    esp,0x1c
c0026afb:	5b                   	pop    ebx
c0026afc:	5e                   	pop    esi
c0026afd:	5f                   	pop    edi
c0026afe:	5d                   	pop    ebp
c0026aff:	c3                   	ret    
c0026b00:	0f bd e8             	bsr    ebp,eax
c0026b03:	83 f5 1f             	xor    ebp,0x1f
c0026b06:	75 1c                	jne    c0026b24 <__umoddi3+0x88>
c0026b08:	39 d8                	cmp    eax,ebx
c0026b0a:	72 04                	jb     c0026b10 <__umoddi3+0x74>
c0026b0c:	39 f7                	cmp    edi,esi
c0026b0e:	77 08                	ja     c0026b18 <__umoddi3+0x7c>
c0026b10:	89 da                	mov    edx,ebx
c0026b12:	29 fe                	sub    esi,edi
c0026b14:	19 c2                	sbb    edx,eax
c0026b16:	89 f1                	mov    ecx,esi
c0026b18:	89 c8                	mov    eax,ecx
c0026b1a:	83 c4 1c             	add    esp,0x1c
c0026b1d:	5b                   	pop    ebx
c0026b1e:	5e                   	pop    esi
c0026b1f:	5f                   	pop    edi
c0026b20:	5d                   	pop    ebp
c0026b21:	c3                   	ret    
c0026b22:	66 90                	xchg   ax,ax
c0026b24:	ba 20 00 00 00       	mov    edx,0x20
c0026b29:	29 ea                	sub    edx,ebp
c0026b2b:	89 e9                	mov    ecx,ebp
c0026b2d:	d3 e0                	shl    eax,cl
c0026b2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b33:	89 f8                	mov    eax,edi
c0026b35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b39:	88 d1                	mov    cl,dl
c0026b3b:	d3 e8                	shr    eax,cl
c0026b3d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b41:	09 c1                	or     ecx,eax
c0026b43:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b47:	89 e9                	mov    ecx,ebp
c0026b49:	d3 e7                	shl    edi,cl
c0026b4b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b4f:	89 d8                	mov    eax,ebx
c0026b51:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b55:	88 d1                	mov    cl,dl
c0026b57:	d3 e8                	shr    eax,cl
c0026b59:	89 c7                	mov    edi,eax
c0026b5b:	89 e9                	mov    ecx,ebp
c0026b5d:	d3 e3                	shl    ebx,cl
c0026b5f:	89 f0                	mov    eax,esi
c0026b61:	88 d1                	mov    cl,dl
c0026b63:	d3 e8                	shr    eax,cl
c0026b65:	09 d8                	or     eax,ebx
c0026b67:	89 e9                	mov    ecx,ebp
c0026b69:	d3 e6                	shl    esi,cl
c0026b6b:	89 f3                	mov    ebx,esi
c0026b6d:	89 fa                	mov    edx,edi
c0026b6f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b73:	89 d1                	mov    ecx,edx
c0026b75:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b79:	89 c6                	mov    esi,eax
c0026b7b:	89 d7                	mov    edi,edx
c0026b7d:	39 d1                	cmp    ecx,edx
c0026b7f:	72 27                	jb     c0026ba8 <__umoddi3+0x10c>
c0026b81:	74 21                	je     c0026ba4 <__umoddi3+0x108>
c0026b83:	89 ca                	mov    edx,ecx
c0026b85:	29 f3                	sub    ebx,esi
c0026b87:	19 fa                	sbb    edx,edi
c0026b89:	89 d0                	mov    eax,edx
c0026b8b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026b8f:	d3 e0                	shl    eax,cl
c0026b91:	89 e9                	mov    ecx,ebp
c0026b93:	d3 eb                	shr    ebx,cl
c0026b95:	09 d8                	or     eax,ebx
c0026b97:	d3 ea                	shr    edx,cl
c0026b99:	83 c4 1c             	add    esp,0x1c
c0026b9c:	5b                   	pop    ebx
c0026b9d:	5e                   	pop    esi
c0026b9e:	5f                   	pop    edi
c0026b9f:	5d                   	pop    ebp
c0026ba0:	c3                   	ret    
c0026ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0026ba4:	39 c3                	cmp    ebx,eax
c0026ba6:	73 db                	jae    c0026b83 <__umoddi3+0xe7>
c0026ba8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026bac:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026bb0:	89 d7                	mov    edi,edx
c0026bb2:	89 c6                	mov    esi,eax
c0026bb4:	eb cd                	jmp    c0026b83 <__umoddi3+0xe7>

c0026bb6 <__addsf3>:
c0026bb6:	55                   	push   ebp
c0026bb7:	89 e5                	mov    ebp,esp
c0026bb9:	57                   	push   edi
c0026bba:	56                   	push   esi
c0026bbb:	53                   	push   ebx
c0026bbc:	83 ec 08             	sub    esp,0x8
c0026bbf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026bc2:	89 fa                	mov    edx,edi
c0026bc4:	89 f8                	mov    eax,edi
c0026bc6:	c1 f8 17             	sar    eax,0x17
c0026bc9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026bcc:	c1 e2 08             	shl    edx,0x8
c0026bcf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026bd5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026bd8:	89 de                	mov    esi,ebx
c0026bda:	c1 fe 17             	sar    esi,0x17
c0026bdd:	c1 e3 08             	shl    ebx,0x8
c0026be0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026be6:	31 f0                	xor    eax,esi
c0026be8:	0f 88 3b 01 00 00    	js     c0026d29 <__addsf3+0x173>
c0026bee:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026bf1:	29 f1                	sub    ecx,esi
c0026bf3:	85 c9                	test   ecx,ecx
c0026bf5:	7e 54                	jle    c0026c4b <__addsf3+0x95>
c0026bf7:	89 f0                	mov    eax,esi
c0026bf9:	84 c0                	test   al,al
c0026bfb:	75 10                	jne    c0026c0d <__addsf3+0x57>
c0026bfd:	85 db                	test   ebx,ebx
c0026bff:	0f 84 aa 02 00 00    	je     c0026eaf <__addsf3+0x2f9>
c0026c05:	49                   	dec    ecx
c0026c06:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c09:	74 38                	je     c0026c43 <__addsf3+0x8d>
c0026c0b:	eb 13                	jmp    c0026c20 <__addsf3+0x6a>
c0026c0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c10:	f7 d0                	not    eax
c0026c12:	84 c0                	test   al,al
c0026c14:	0f 84 95 02 00 00    	je     c0026eaf <__addsf3+0x2f9>
c0026c1a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c20:	83 f9 1f             	cmp    ecx,0x1f
c0026c23:	0f 8f 86 02 00 00    	jg     c0026eaf <__addsf3+0x2f9>
c0026c29:	89 de                	mov    esi,ebx
c0026c2b:	d3 ee                	shr    esi,cl
c0026c2d:	b8 20 00 00 00       	mov    eax,0x20
c0026c32:	29 c8                	sub    eax,ecx
c0026c34:	89 c1                	mov    ecx,eax
c0026c36:	d3 e3                	shl    ebx,cl
c0026c38:	31 c0                	xor    eax,eax
c0026c3a:	85 db                	test   ebx,ebx
c0026c3c:	0f 95 c0             	setne  al
c0026c3f:	09 f0                	or     eax,esi
c0026c41:	01 d0                	add    eax,edx
c0026c43:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c46:	e9 b6 00 00 00       	jmp    c0026d01 <__addsf3+0x14b>
c0026c4b:	74 5c                	je     c0026ca9 <__addsf3+0xf3>
c0026c4d:	89 f1                	mov    ecx,esi
c0026c4f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c52:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c55:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c59:	75 14                	jne    c0026c6f <__addsf3+0xb9>
c0026c5b:	85 d2                	test   edx,edx
c0026c5d:	0f 84 4c 02 00 00    	je     c0026eaf <__addsf3+0x2f9>
c0026c63:	49                   	dec    ecx
c0026c64:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c67:	0f 84 94 00 00 00    	je     c0026d01 <__addsf3+0x14b>
c0026c6d:	eb 12                	jmp    c0026c81 <__addsf3+0xcb>
c0026c6f:	89 f0                	mov    eax,esi
c0026c71:	f7 d0                	not    eax
c0026c73:	84 c0                	test   al,al
c0026c75:	0f 84 34 02 00 00    	je     c0026eaf <__addsf3+0x2f9>
c0026c7b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c81:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c84:	83 f9 1f             	cmp    ecx,0x1f
c0026c87:	0f 8f 22 02 00 00    	jg     c0026eaf <__addsf3+0x2f9>
c0026c8d:	89 d7                	mov    edi,edx
c0026c8f:	d3 ef                	shr    edi,cl
c0026c91:	b8 20 00 00 00       	mov    eax,0x20
c0026c96:	29 c8                	sub    eax,ecx
c0026c98:	89 c1                	mov    ecx,eax
c0026c9a:	d3 e2                	shl    edx,cl
c0026c9c:	31 c0                	xor    eax,eax
c0026c9e:	85 d2                	test   edx,edx
c0026ca0:	0f 95 c0             	setne  al
c0026ca3:	09 f8                	or     eax,edi
c0026ca5:	01 d8                	add    eax,ebx
c0026ca7:	eb 58                	jmp    c0026d01 <__addsf3+0x14b>
c0026ca9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cac:	8d 70 01             	lea    esi,[eax+0x1]
c0026caf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026cb5:	75 32                	jne    c0026ce9 <__addsf3+0x133>
c0026cb7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026cbb:	75 1f                	jne    c0026cdc <__addsf3+0x126>
c0026cbd:	85 d2                	test   edx,edx
c0026cbf:	0f 84 e0 01 00 00    	je     c0026ea5 <__addsf3+0x2ef>
c0026cc5:	85 db                	test   ebx,ebx
c0026cc7:	0f 84 e2 01 00 00    	je     c0026eaf <__addsf3+0x2f9>
c0026ccd:	89 d0                	mov    eax,edx
c0026ccf:	01 d8                	add    eax,ebx
c0026cd1:	0f 89 a9 01 00 00    	jns    c0026e80 <__addsf3+0x2ca>
c0026cd7:	e9 9d 01 00 00       	jmp    c0026e79 <__addsf3+0x2c3>
c0026cdc:	85 d2                	test   edx,edx
c0026cde:	0f 85 cb 01 00 00    	jne    c0026eaf <__addsf3+0x2f9>
c0026ce4:	e9 bc 01 00 00       	jmp    c0026ea5 <__addsf3+0x2ef>
c0026ce9:	31 c0                	xor    eax,eax
c0026ceb:	89 f1                	mov    ecx,esi
c0026ced:	f7 d1                	not    ecx
c0026cef:	84 c9                	test   cl,cl
c0026cf1:	0f 84 90 01 00 00    	je     c0026e87 <__addsf3+0x2d1>
c0026cf7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cfa:	d1 e8                	shr    eax,1
c0026cfc:	e9 86 01 00 00       	jmp    c0026e87 <__addsf3+0x2d1>
c0026d01:	85 c0                	test   eax,eax
c0026d03:	0f 89 7e 01 00 00    	jns    c0026e87 <__addsf3+0x2d1>
c0026d09:	46                   	inc    esi
c0026d0a:	89 f2                	mov    edx,esi
c0026d0c:	f7 d2                	not    edx
c0026d0e:	84 d2                	test   dl,dl
c0026d10:	0f 84 6f 01 00 00    	je     c0026e85 <__addsf3+0x2cf>
c0026d16:	89 c2                	mov    edx,eax
c0026d18:	83 e2 01             	and    edx,0x1
c0026d1b:	d1 e8                	shr    eax,1
c0026d1d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d22:	09 d0                	or     eax,edx
c0026d24:	e9 5e 01 00 00       	jmp    c0026e87 <__addsf3+0x2d1>
c0026d29:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d2d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d30:	89 f0                	mov    eax,esi
c0026d32:	0f b6 c0             	movzx  eax,al
c0026d35:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d38:	29 c1                	sub    ecx,eax
c0026d3a:	85 c9                	test   ecx,ecx
c0026d3c:	7e 55                	jle    c0026d93 <__addsf3+0x1dd>
c0026d3e:	85 c0                	test   eax,eax
c0026d40:	75 11                	jne    c0026d53 <__addsf3+0x19d>
c0026d42:	85 db                	test   ebx,ebx
c0026d44:	0f 84 65 01 00 00    	je     c0026eaf <__addsf3+0x2f9>
c0026d4a:	49                   	dec    ecx
c0026d4b:	75 19                	jne    c0026d66 <__addsf3+0x1b0>
c0026d4d:	89 d0                	mov    eax,edx
c0026d4f:	29 d8                	sub    eax,ebx
c0026d51:	eb 38                	jmp    c0026d8b <__addsf3+0x1d5>
c0026d53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d56:	f7 d0                	not    eax
c0026d58:	84 c0                	test   al,al
c0026d5a:	0f 84 4f 01 00 00    	je     c0026eaf <__addsf3+0x2f9>
c0026d60:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d66:	83 f9 1f             	cmp    ecx,0x1f
c0026d69:	0f 8f 40 01 00 00    	jg     c0026eaf <__addsf3+0x2f9>
c0026d6f:	89 de                	mov    esi,ebx
c0026d71:	d3 ee                	shr    esi,cl
c0026d73:	b8 20 00 00 00       	mov    eax,0x20
c0026d78:	29 c8                	sub    eax,ecx
c0026d7a:	89 c1                	mov    ecx,eax
c0026d7c:	d3 e3                	shl    ebx,cl
c0026d7e:	31 c0                	xor    eax,eax
c0026d80:	85 db                	test   ebx,ebx
c0026d82:	0f 95 c0             	setne  al
c0026d85:	09 f0                	or     eax,esi
c0026d87:	29 c2                	sub    edx,eax
c0026d89:	89 d0                	mov    eax,edx
c0026d8b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d8e:	e9 af 00 00 00       	jmp    c0026e42 <__addsf3+0x28c>
c0026d93:	74 5c                	je     c0026df1 <__addsf3+0x23b>
c0026d95:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026d98:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d9b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026d9f:	75 14                	jne    c0026db5 <__addsf3+0x1ff>
c0026da1:	85 d2                	test   edx,edx
c0026da3:	0f 84 06 01 00 00    	je     c0026eaf <__addsf3+0x2f9>
c0026da9:	48                   	dec    eax
c0026daa:	75 1b                	jne    c0026dc7 <__addsf3+0x211>
c0026dac:	89 d8                	mov    eax,ebx
c0026dae:	29 d0                	sub    eax,edx
c0026db0:	e9 8d 00 00 00       	jmp    c0026e42 <__addsf3+0x28c>
c0026db5:	89 f1                	mov    ecx,esi
c0026db7:	f7 d1                	not    ecx
c0026db9:	84 c9                	test   cl,cl
c0026dbb:	0f 84 ee 00 00 00    	je     c0026eaf <__addsf3+0x2f9>
c0026dc1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026dc7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dca:	83 f8 1f             	cmp    eax,0x1f
c0026dcd:	0f 8f dc 00 00 00    	jg     c0026eaf <__addsf3+0x2f9>
c0026dd3:	89 d7                	mov    edi,edx
c0026dd5:	88 c1                	mov    cl,al
c0026dd7:	d3 ef                	shr    edi,cl
c0026dd9:	b9 20 00 00 00       	mov    ecx,0x20
c0026dde:	29 c1                	sub    ecx,eax
c0026de0:	d3 e2                	shl    edx,cl
c0026de2:	31 c0                	xor    eax,eax
c0026de4:	85 d2                	test   edx,edx
c0026de6:	0f 95 c0             	setne  al
c0026de9:	09 f8                	or     eax,edi
c0026deb:	29 c3                	sub    ebx,eax
c0026ded:	89 d8                	mov    eax,ebx
c0026def:	eb 51                	jmp    c0026e42 <__addsf3+0x28c>
c0026df1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026df4:	40                   	inc    eax
c0026df5:	a8 fe                	test   al,0xfe
c0026df7:	75 3d                	jne    c0026e36 <__addsf3+0x280>
c0026df9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026dfd:	0f 85 a7 00 00 00    	jne    c0026eaa <__addsf3+0x2f4>
c0026e03:	85 d2                	test   edx,edx
c0026e05:	75 12                	jne    c0026e19 <__addsf3+0x263>
c0026e07:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e0a:	85 db                	test   ebx,ebx
c0026e0c:	0f 85 9d 00 00 00    	jne    c0026eaf <__addsf3+0x2f9>
c0026e12:	31 ff                	xor    edi,edi
c0026e14:	e9 96 00 00 00       	jmp    c0026eaf <__addsf3+0x2f9>
c0026e19:	85 db                	test   ebx,ebx
c0026e1b:	0f 84 8e 00 00 00    	je     c0026eaf <__addsf3+0x2f9>
c0026e21:	89 d0                	mov    eax,edx
c0026e23:	29 d8                	sub    eax,ebx
c0026e25:	79 06                	jns    c0026e2d <__addsf3+0x277>
c0026e27:	89 d8                	mov    eax,ebx
c0026e29:	29 d0                	sub    eax,edx
c0026e2b:	eb 5a                	jmp    c0026e87 <__addsf3+0x2d1>
c0026e2d:	bf 00 00 00 00       	mov    edi,0x0
c0026e32:	74 7b                	je     c0026eaf <__addsf3+0x2f9>
c0026e34:	eb 4a                	jmp    c0026e80 <__addsf3+0x2ca>
c0026e36:	89 d0                	mov    eax,edx
c0026e38:	29 d8                	sub    eax,ebx
c0026e3a:	79 12                	jns    c0026e4e <__addsf3+0x298>
c0026e3c:	89 d8                	mov    eax,ebx
c0026e3e:	29 d0                	sub    eax,edx
c0026e40:	eb 09                	jmp    c0026e4b <__addsf3+0x295>
c0026e42:	85 c0                	test   eax,eax
c0026e44:	79 41                	jns    c0026e87 <__addsf3+0x2d1>
c0026e46:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e4b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e4e:	31 f6                	xor    esi,esi
c0026e50:	85 c0                	test   eax,eax
c0026e52:	74 33                	je     c0026e87 <__addsf3+0x2d1>
c0026e54:	0f bd c8             	bsr    ecx,eax
c0026e57:	83 f1 1f             	xor    ecx,0x1f
c0026e5a:	d3 e0                	shl    eax,cl
c0026e5c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e60:	39 ca                	cmp    edx,ecx
c0026e62:	7f 10                	jg     c0026e74 <__addsf3+0x2be>
c0026e64:	29 d1                	sub    ecx,edx
c0026e66:	41                   	inc    ecx
c0026e67:	d3 e8                	shr    eax,cl
c0026e69:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e6c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026e72:	eb 13                	jmp    c0026e87 <__addsf3+0x2d1>
c0026e74:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e77:	29 ce                	sub    esi,ecx
c0026e79:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e7e:	eb 07                	jmp    c0026e87 <__addsf3+0x2d1>
c0026e80:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e83:	eb 02                	jmp    c0026e87 <__addsf3+0x2d1>
c0026e85:	31 c0                	xor    eax,eax
c0026e87:	89 c2                	mov    edx,eax
c0026e89:	c1 ea 08             	shr    edx,0x8
c0026e8c:	a8 7f                	test   al,0x7f
c0026e8e:	0f 95 c1             	setne  cl
c0026e91:	09 d1                	or     ecx,edx
c0026e93:	83 e1 01             	and    ecx,0x1
c0026e96:	c1 e8 07             	shr    eax,0x7
c0026e99:	21 c8                	and    eax,ecx
c0026e9b:	c1 e6 17             	shl    esi,0x17
c0026e9e:	09 d6                	or     esi,edx
c0026ea0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026ea3:	eb 0a                	jmp    c0026eaf <__addsf3+0x2f9>
c0026ea5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ea8:	eb 05                	jmp    c0026eaf <__addsf3+0x2f9>
c0026eaa:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026eaf:	89 f8                	mov    eax,edi
c0026eb1:	5a                   	pop    edx
c0026eb2:	59                   	pop    ecx
c0026eb3:	5b                   	pop    ebx
c0026eb4:	5e                   	pop    esi
c0026eb5:	5f                   	pop    edi
c0026eb6:	5d                   	pop    ebp
c0026eb7:	c3                   	ret    

c0026eb8 <__subsf3>:
c0026eb8:	55                   	push   ebp
c0026eb9:	89 e5                	mov    ebp,esp
c0026ebb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ebe:	05 00 00 00 80       	add    eax,0x80000000
c0026ec3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026ec6:	5d                   	pop    ebp
c0026ec7:	e9 ea fc ff ff       	jmp    c0026bb6 <__addsf3>

c0026ecc <__negsf2>:
c0026ecc:	55                   	push   ebp
c0026ecd:	89 e5                	mov    ebp,esp
c0026ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ed2:	05 00 00 00 80       	add    eax,0x80000000
c0026ed7:	5d                   	pop    ebp
c0026ed8:	c3                   	ret    

c0026ed9 <__mulsf3>:
c0026ed9:	55                   	push   ebp
c0026eda:	89 e5                	mov    ebp,esp
c0026edc:	57                   	push   edi
c0026edd:	56                   	push   esi
c0026ede:	53                   	push   ebx
c0026edf:	83 ec 1c             	sub    esp,0x1c
c0026ee2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026ee5:	89 f0                	mov    eax,esi
c0026ee7:	89 f1                	mov    ecx,esi
c0026ee9:	c1 f9 17             	sar    ecx,0x17
c0026eec:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026eef:	c1 e0 08             	shl    eax,0x8
c0026ef2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026ef7:	89 c1                	mov    ecx,eax
c0026ef9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026efc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026eff:	89 c7                	mov    edi,eax
c0026f01:	c1 ff 17             	sar    edi,0x17
c0026f04:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f08:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f0b:	89 f8                	mov    eax,edi
c0026f0d:	0f b6 c0             	movzx  eax,al
c0026f10:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f13:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f17:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f1a:	42                   	inc    edx
c0026f1b:	80 e2 fe             	and    dl,0xfe
c0026f1e:	75 7b                	jne    c0026f9b <__mulsf3+0xc2>
c0026f20:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f24:	74 54                	je     c0026f7a <__mulsf3+0xa1>
c0026f26:	85 c9                	test   ecx,ecx
c0026f28:	0f 85 64 01 00 00    	jne    c0027092 <__mulsf3+0x1b9>
c0026f2e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f31:	80 e2 fe             	and    dl,0xfe
c0026f34:	75 1f                	jne    c0026f55 <__mulsf3+0x7c>
c0026f36:	85 c0                	test   eax,eax
c0026f38:	b8 00 00 00 00       	mov    eax,0x0
c0026f3d:	74 29                	je     c0026f68 <__mulsf3+0x8f>
c0026f3f:	53                   	push   ebx
c0026f40:	53                   	push   ebx
c0026f41:	50                   	push   eax
c0026f42:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f45:	e8 96 05 00 00       	call   c00274e0 <__nesf2>
c0026f4a:	83 c4 10             	add    esp,0x10
c0026f4d:	85 c0                	test   eax,eax
c0026f4f:	0f 85 3a 01 00 00    	jne    c002708f <__mulsf3+0x1b6>
c0026f55:	85 ff                	test   edi,edi
c0026f57:	0f 89 35 01 00 00    	jns    c0027092 <__mulsf3+0x1b9>
c0026f5d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f63:	e9 2a 01 00 00       	jmp    c0027092 <__mulsf3+0x1b9>
c0026f68:	51                   	push   ecx
c0026f69:	51                   	push   ecx
c0026f6a:	50                   	push   eax
c0026f6b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f6e:	e8 6d 05 00 00       	call   c00274e0 <__nesf2>
c0026f73:	83 c4 10             	add    esp,0x10
c0026f76:	85 c0                	test   eax,eax
c0026f78:	eb 15                	jmp    c0026f8f <__mulsf3+0xb6>
c0026f7a:	85 c9                	test   ecx,ecx
c0026f7c:	74 0b                	je     c0026f89 <__mulsf3+0xb0>
c0026f7e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026f81:	01 c9                	add    ecx,ecx
c0026f83:	78 16                	js     c0026f9b <__mulsf3+0xc2>
c0026f85:	89 d3                	mov    ebx,edx
c0026f87:	eb f5                	jmp    c0026f7e <__mulsf3+0xa5>
c0026f89:	89 f8                	mov    eax,edi
c0026f8b:	f7 d0                	not    eax
c0026f8d:	84 c0                	test   al,al
c0026f8f:	75 c4                	jne    c0026f55 <__mulsf3+0x7c>
c0026f91:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026f96:	e9 f7 00 00 00       	jmp    c0027092 <__mulsf3+0x1b9>
c0026f9b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026f9e:	c1 e6 08             	shl    esi,0x8
c0026fa1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026fa7:	8d 57 01             	lea    edx,[edi+0x1]
c0026faa:	80 e2 fe             	and    dl,0xfe
c0026fad:	75 63                	jne    c0027012 <__mulsf3+0x139>
c0026faf:	85 c0                	test   eax,eax
c0026fb1:	74 2f                	je     c0026fe2 <__mulsf3+0x109>
c0026fb3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fb7:	0f 89 d2 00 00 00    	jns    c002708f <__mulsf3+0x1b6>
c0026fbd:	52                   	push   edx
c0026fbe:	52                   	push   edx
c0026fbf:	6a 00                	push   0x0
c0026fc1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fc4:	e8 dc 04 00 00       	call   c00274a5 <__eqsf2>
c0026fc9:	83 c4 10             	add    esp,0x10
c0026fcc:	85 c0                	test   eax,eax
c0026fce:	0f 85 bb 00 00 00    	jne    c002708f <__mulsf3+0x1b6>
c0026fd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fd7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026fdd:	e9 b0 00 00 00       	jmp    c0027092 <__mulsf3+0x1b9>
c0026fe2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026fe5:	50                   	push   eax
c0026fe6:	50                   	push   eax
c0026fe7:	6a 00                	push   0x0
c0026fe9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fec:	e8 b4 04 00 00       	call   c00274a5 <__eqsf2>
c0026ff1:	83 c4 10             	add    esp,0x10
c0026ff4:	85 c0                	test   eax,eax
c0026ff6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026ff9:	75 0c                	jne    c0027007 <__mulsf3+0x12e>
c0026ffb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fff:	0f 89 8a 00 00 00    	jns    c002708f <__mulsf3+0x1b6>
c0027005:	eb cd                	jmp    c0026fd4 <__mulsf3+0xfb>
c0027007:	8d 43 ff             	lea    eax,[ebx-0x1]
c002700a:	01 f6                	add    esi,esi
c002700c:	78 04                	js     c0027012 <__mulsf3+0x139>
c002700e:	89 c3                	mov    ebx,eax
c0027010:	eb f5                	jmp    c0027007 <__mulsf3+0x12e>
c0027012:	89 c8                	mov    eax,ecx
c0027014:	0d 00 00 00 80       	or     eax,0x80000000
c0027019:	81 ce 00 00 00 80    	or     esi,0x80000000
c002701f:	f7 e6                	mul    esi
c0027021:	85 c0                	test   eax,eax
c0027023:	0f 95 c0             	setne  al
c0027026:	0f b6 c0             	movzx  eax,al
c0027029:	09 c2                	or     edx,eax
c002702b:	78 03                	js     c0027030 <__mulsf3+0x157>
c002702d:	01 d2                	add    edx,edx
c002702f:	4b                   	dec    ebx
c0027030:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027036:	7f 22                	jg     c002705a <__mulsf3+0x181>
c0027038:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002703e:	85 db                	test   ebx,ebx
c0027040:	7f 23                	jg     c0027065 <__mulsf3+0x18c>
c0027042:	83 fb e9             	cmp    ebx,0xffffffe9
c0027045:	7c 1a                	jl     c0027061 <__mulsf3+0x188>
c0027047:	81 ca 00 00 00 80    	or     edx,0x80000000
c002704d:	b9 01 00 00 00       	mov    ecx,0x1
c0027052:	29 d9                	sub    ecx,ebx
c0027054:	d3 ea                	shr    edx,cl
c0027056:	31 db                	xor    ebx,ebx
c0027058:	eb 0b                	jmp    c0027065 <__mulsf3+0x18c>
c002705a:	bb ff 00 00 00       	mov    ebx,0xff
c002705f:	eb 02                	jmp    c0027063 <__mulsf3+0x18a>
c0027061:	31 db                	xor    ebx,ebx
c0027063:	31 d2                	xor    edx,edx
c0027065:	89 d0                	mov    eax,edx
c0027067:	c1 e8 08             	shr    eax,0x8
c002706a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002706d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027073:	09 fb                	or     ebx,edi
c0027075:	c1 e3 17             	shl    ebx,0x17
c0027078:	09 c3                	or     ebx,eax
c002707a:	f6 c2 7f             	test   dl,0x7f
c002707d:	0f 95 c1             	setne  cl
c0027080:	09 c8                	or     eax,ecx
c0027082:	83 e0 01             	and    eax,0x1
c0027085:	c1 ea 07             	shr    edx,0x7
c0027088:	21 c2                	and    edx,eax
c002708a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002708d:	eb 03                	jmp    c0027092 <__mulsf3+0x1b9>
c002708f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027092:	89 f0                	mov    eax,esi
c0027094:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027097:	5b                   	pop    ebx
c0027098:	5e                   	pop    esi
c0027099:	5f                   	pop    edi
c002709a:	5d                   	pop    ebp
c002709b:	c3                   	ret    

c002709c <__divsf3>:
c002709c:	55                   	push   ebp
c002709d:	89 e5                	mov    ebp,esp
c002709f:	57                   	push   edi
c00270a0:	56                   	push   esi
c00270a1:	53                   	push   ebx
c00270a2:	83 ec 1c             	sub    esp,0x1c
c00270a5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00270a8:	89 d8                	mov    eax,ebx
c00270aa:	89 d9                	mov    ecx,ebx
c00270ac:	c1 f9 17             	sar    ecx,0x17
c00270af:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00270b2:	c1 e0 08             	shl    eax,0x8
c00270b5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270ba:	89 c1                	mov    ecx,eax
c00270bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270bf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00270c2:	89 c7                	mov    edi,eax
c00270c4:	c1 ff 17             	sar    edi,0x17
c00270c7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00270cb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00270ce:	89 f8                	mov    eax,edi
c00270d0:	0f b6 c0             	movzx  eax,al
c00270d3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00270d6:	29 c6                	sub    esi,eax
c00270d8:	83 c6 7f             	add    esi,0x7f
c00270db:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00270de:	42                   	inc    edx
c00270df:	80 e2 fe             	and    dl,0xfe
c00270e2:	0f 85 9c 00 00 00    	jne    c0027184 <__divsf3+0xe8>
c00270e8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00270ec:	74 33                	je     c0027121 <__divsf3+0x85>
c00270ee:	85 c9                	test   ecx,ecx
c00270f0:	0f 85 c7 01 00 00    	jne    c00272bd <__divsf3+0x221>
c00270f6:	8d 57 01             	lea    edx,[edi+0x1]
c00270f9:	80 e2 fe             	and    dl,0xfe
c00270fc:	75 2f                	jne    c002712d <__divsf3+0x91>
c00270fe:	85 c0                	test   eax,eax
c0027100:	74 2b                	je     c002712d <__divsf3+0x91>
c0027102:	51                   	push   ecx
c0027103:	51                   	push   ecx
c0027104:	6a 00                	push   0x0
c0027106:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027109:	e8 d2 03 00 00       	call   c00274e0 <__nesf2>
c002710e:	83 c4 10             	add    esp,0x10
c0027111:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027114:	85 c0                	test   eax,eax
c0027116:	0f 85 a1 01 00 00    	jne    c00272bd <__divsf3+0x221>
c002711c:	e9 92 01 00 00       	jmp    c00272b3 <__divsf3+0x217>
c0027121:	85 c9                	test   ecx,ecx
c0027123:	75 1b                	jne    c0027140 <__divsf3+0xa4>
c0027125:	8d 57 01             	lea    edx,[edi+0x1]
c0027128:	80 e2 fe             	and    dl,0xfe
c002712b:	74 1e                	je     c002714b <__divsf3+0xaf>
c002712d:	85 ff                	test   edi,edi
c002712f:	0f 89 88 01 00 00    	jns    c00272bd <__divsf3+0x221>
c0027135:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002713b:	e9 7d 01 00 00       	jmp    c00272bd <__divsf3+0x221>
c0027140:	8d 56 ff             	lea    edx,[esi-0x1]
c0027143:	01 c9                	add    ecx,ecx
c0027145:	78 3d                	js     c0027184 <__divsf3+0xe8>
c0027147:	89 d6                	mov    esi,edx
c0027149:	eb f5                	jmp    c0027140 <__divsf3+0xa4>
c002714b:	85 c0                	test   eax,eax
c002714d:	b8 00 00 00 00       	mov    eax,0x0
c0027152:	74 18                	je     c002716c <__divsf3+0xd0>
c0027154:	52                   	push   edx
c0027155:	52                   	push   edx
c0027156:	50                   	push   eax
c0027157:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002715a:	e8 81 03 00 00       	call   c00274e0 <__nesf2>
c002715f:	83 c4 10             	add    esp,0x10
c0027162:	85 c0                	test   eax,eax
c0027164:	0f 85 50 01 00 00    	jne    c00272ba <__divsf3+0x21e>
c002716a:	eb c1                	jmp    c002712d <__divsf3+0x91>
c002716c:	56                   	push   esi
c002716d:	56                   	push   esi
c002716e:	50                   	push   eax
c002716f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027172:	e8 69 03 00 00       	call   c00274e0 <__nesf2>
c0027177:	83 c4 10             	add    esp,0x10
c002717a:	85 c0                	test   eax,eax
c002717c:	0f 84 31 01 00 00    	je     c00272b3 <__divsf3+0x217>
c0027182:	eb a9                	jmp    c002712d <__divsf3+0x91>
c0027184:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027187:	c1 e3 08             	shl    ebx,0x8
c002718a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027190:	8d 57 01             	lea    edx,[edi+0x1]
c0027193:	80 e2 fe             	and    dl,0xfe
c0027196:	75 71                	jne    c0027209 <__divsf3+0x16d>
c0027198:	85 c0                	test   eax,eax
c002719a:	ba 00 00 00 00       	mov    edx,0x0
c002719f:	74 2f                	je     c00271d0 <__divsf3+0x134>
c00271a1:	51                   	push   ecx
c00271a2:	51                   	push   ecx
c00271a3:	52                   	push   edx
c00271a4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271a7:	e8 f9 02 00 00       	call   c00274a5 <__eqsf2>
c00271ac:	83 c4 10             	add    esp,0x10
c00271af:	85 c0                	test   eax,eax
c00271b1:	0f 85 03 01 00 00    	jne    c00272ba <__divsf3+0x21e>
c00271b7:	31 d2                	xor    edx,edx
c00271b9:	89 d3                	mov    ebx,edx
c00271bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00271be:	31 f8                	xor    eax,edi
c00271c0:	0f 89 f7 00 00 00    	jns    c00272bd <__divsf3+0x221>
c00271c6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00271cb:	e9 ed 00 00 00       	jmp    c00272bd <__divsf3+0x221>
c00271d0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00271d3:	50                   	push   eax
c00271d4:	50                   	push   eax
c00271d5:	52                   	push   edx
c00271d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271d9:	e8 c7 02 00 00       	call   c00274a5 <__eqsf2>
c00271de:	83 c4 10             	add    esp,0x10
c00271e1:	85 c0                	test   eax,eax
c00271e3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00271e6:	75 16                	jne    c00271fe <__divsf3+0x162>
c00271e8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00271eb:	31 fb                	xor    ebx,edi
c00271ed:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00271f3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00271f9:	e9 bf 00 00 00       	jmp    c00272bd <__divsf3+0x221>
c00271fe:	8d 46 01             	lea    eax,[esi+0x1]
c0027201:	01 db                	add    ebx,ebx
c0027203:	78 04                	js     c0027209 <__divsf3+0x16d>
c0027205:	89 c6                	mov    esi,eax
c0027207:	eb f5                	jmp    c00271fe <__divsf3+0x162>
c0027209:	89 c8                	mov    eax,ecx
c002720b:	0d 00 00 00 80       	or     eax,0x80000000
c0027210:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027216:	31 d2                	xor    edx,edx
c0027218:	39 d8                	cmp    eax,ebx
c002721a:	72 07                	jb     c0027223 <__divsf3+0x187>
c002721c:	29 d8                	sub    eax,ebx
c002721e:	ba 01 00 00 00       	mov    edx,0x1
c0027223:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002722a:	01 d2                	add    edx,edx
c002722c:	89 c1                	mov    ecx,eax
c002722e:	01 c0                	add    eax,eax
c0027230:	85 c9                	test   ecx,ecx
c0027232:	78 04                	js     c0027238 <__divsf3+0x19c>
c0027234:	39 c3                	cmp    ebx,eax
c0027236:	77 05                	ja     c002723d <__divsf3+0x1a1>
c0027238:	29 d8                	sub    eax,ebx
c002723a:	83 ca 01             	or     edx,0x1
c002723d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027240:	75 e8                	jne    c002722a <__divsf3+0x18e>
c0027242:	85 c0                	test   eax,eax
c0027244:	0f 95 c0             	setne  al
c0027247:	0f b6 c0             	movzx  eax,al
c002724a:	c1 e2 06             	shl    edx,0x6
c002724d:	09 c2                	or     edx,eax
c002724f:	78 03                	js     c0027254 <__divsf3+0x1b8>
c0027251:	01 d2                	add    edx,edx
c0027253:	4e                   	dec    esi
c0027254:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002725a:	7f 22                	jg     c002727e <__divsf3+0x1e2>
c002725c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027262:	85 f6                	test   esi,esi
c0027264:	7f 23                	jg     c0027289 <__divsf3+0x1ed>
c0027266:	83 fe e9             	cmp    esi,0xffffffe9
c0027269:	7c 1a                	jl     c0027285 <__divsf3+0x1e9>
c002726b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027271:	b9 01 00 00 00       	mov    ecx,0x1
c0027276:	29 f1                	sub    ecx,esi
c0027278:	d3 ea                	shr    edx,cl
c002727a:	31 f6                	xor    esi,esi
c002727c:	eb 0b                	jmp    c0027289 <__divsf3+0x1ed>
c002727e:	be ff 00 00 00       	mov    esi,0xff
c0027283:	eb 02                	jmp    c0027287 <__divsf3+0x1eb>
c0027285:	31 f6                	xor    esi,esi
c0027287:	31 d2                	xor    edx,edx
c0027289:	89 d0                	mov    eax,edx
c002728b:	c1 e8 08             	shr    eax,0x8
c002728e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027291:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027297:	09 fe                	or     esi,edi
c0027299:	c1 e6 17             	shl    esi,0x17
c002729c:	09 c6                	or     esi,eax
c002729e:	f6 c2 7f             	test   dl,0x7f
c00272a1:	0f 95 c1             	setne  cl
c00272a4:	09 c8                	or     eax,ecx
c00272a6:	83 e0 01             	and    eax,0x1
c00272a9:	c1 ea 07             	shr    edx,0x7
c00272ac:	21 c2                	and    edx,eax
c00272ae:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00272b1:	eb 0a                	jmp    c00272bd <__divsf3+0x221>
c00272b3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00272b8:	eb 03                	jmp    c00272bd <__divsf3+0x221>
c00272ba:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00272bd:	89 d8                	mov    eax,ebx
c00272bf:	8d 65 f4             	lea    esp,[ebp-0xc]
c00272c2:	5b                   	pop    ebx
c00272c3:	5e                   	pop    esi
c00272c4:	5f                   	pop    edi
c00272c5:	5d                   	pop    ebp
c00272c6:	c3                   	ret    

c00272c7 <__floatsisf>:
c00272c7:	55                   	push   ebp
c00272c8:	89 e5                	mov    ebp,esp
c00272ca:	53                   	push   ebx
c00272cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272ce:	85 d2                	test   edx,edx
c00272d0:	7e 2b                	jle    c00272fd <__floatsisf+0x36>
c00272d2:	0f bd ca             	bsr    ecx,edx
c00272d5:	83 f1 1f             	xor    ecx,0x1f
c00272d8:	d3 e2                	shl    edx,cl
c00272da:	89 d0                	mov    eax,edx
c00272dc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272e1:	89 c3                	mov    ebx,eax
c00272e3:	c1 eb 08             	shr    ebx,0x8
c00272e6:	80 e2 7f             	and    dl,0x7f
c00272e9:	0f 95 c2             	setne  dl
c00272ec:	09 da                	or     edx,ebx
c00272ee:	83 e2 01             	and    edx,0x1
c00272f1:	c1 e8 07             	shr    eax,0x7
c00272f4:	21 c2                	and    edx,eax
c00272f6:	b8 9e 00 00 00       	mov    eax,0x9e
c00272fb:	eb 32                	jmp    c002732f <__floatsisf+0x68>
c00272fd:	b8 00 00 00 00       	mov    eax,0x0
c0027302:	74 34                	je     c0027338 <__floatsisf+0x71>
c0027304:	f7 da                	neg    edx
c0027306:	0f bd ca             	bsr    ecx,edx
c0027309:	83 f1 1f             	xor    ecx,0x1f
c002730c:	d3 e2                	shl    edx,cl
c002730e:	89 d0                	mov    eax,edx
c0027310:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027315:	89 c3                	mov    ebx,eax
c0027317:	c1 eb 08             	shr    ebx,0x8
c002731a:	80 e2 7f             	and    dl,0x7f
c002731d:	0f 95 c2             	setne  dl
c0027320:	09 da                	or     edx,ebx
c0027322:	83 e2 01             	and    edx,0x1
c0027325:	c1 e8 07             	shr    eax,0x7
c0027328:	21 c2                	and    edx,eax
c002732a:	b8 9e 01 00 00       	mov    eax,0x19e
c002732f:	29 c8                	sub    eax,ecx
c0027331:	c1 e0 17             	shl    eax,0x17
c0027334:	09 d8                	or     eax,ebx
c0027336:	01 d0                	add    eax,edx
c0027338:	5b                   	pop    ebx
c0027339:	5d                   	pop    ebp
c002733a:	c3                   	ret    

c002733b <__floatunsisf>:
c002733b:	55                   	push   ebp
c002733c:	89 e5                	mov    ebp,esp
c002733e:	53                   	push   ebx
c002733f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027342:	31 c0                	xor    eax,eax
c0027344:	85 d2                	test   edx,edx
c0027346:	74 32                	je     c002737a <__floatunsisf+0x3f>
c0027348:	0f bd ca             	bsr    ecx,edx
c002734b:	83 f1 1f             	xor    ecx,0x1f
c002734e:	d3 e2                	shl    edx,cl
c0027350:	89 d0                	mov    eax,edx
c0027352:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027357:	89 c3                	mov    ebx,eax
c0027359:	c1 eb 08             	shr    ebx,0x8
c002735c:	80 e2 7f             	and    dl,0x7f
c002735f:	0f 95 c2             	setne  dl
c0027362:	09 da                	or     edx,ebx
c0027364:	83 e2 01             	and    edx,0x1
c0027367:	c1 e8 07             	shr    eax,0x7
c002736a:	21 c2                	and    edx,eax
c002736c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027371:	29 c8                	sub    eax,ecx
c0027373:	c1 e0 17             	shl    eax,0x17
c0027376:	09 d8                	or     eax,ebx
c0027378:	01 d0                	add    eax,edx
c002737a:	5b                   	pop    ebx
c002737b:	5d                   	pop    ebp
c002737c:	c3                   	ret    

c002737d <__fixsfsi>:
c002737d:	55                   	push   ebp
c002737e:	89 e5                	mov    ebp,esp
c0027380:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027383:	89 d1                	mov    ecx,edx
c0027385:	c1 e1 08             	shl    ecx,0x8
c0027388:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002738e:	c1 fa 17             	sar    edx,0x17
c0027391:	78 1c                	js     c00273af <__fixsfsi+0x32>
c0027393:	83 ea 7f             	sub    edx,0x7f
c0027396:	31 c0                	xor    eax,eax
c0027398:	83 fa 1e             	cmp    edx,0x1e
c002739b:	77 40                	ja     c00273dd <__fixsfsi+0x60>
c002739d:	89 c8                	mov    eax,ecx
c002739f:	0d 00 00 00 80       	or     eax,0x80000000
c00273a4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273a9:	29 d1                	sub    ecx,edx
c00273ab:	d3 e8                	shr    eax,cl
c00273ad:	eb 2e                	jmp    c00273dd <__fixsfsi+0x60>
c00273af:	31 c0                	xor    eax,eax
c00273b1:	81 c2 81 00 00 00    	add    edx,0x81
c00273b7:	78 24                	js     c00273dd <__fixsfsi+0x60>
c00273b9:	83 fa 1e             	cmp    edx,0x1e
c00273bc:	7e 09                	jle    c00273c7 <__fixsfsi+0x4a>
c00273be:	83 fa 1f             	cmp    edx,0x1f
c00273c1:	75 18                	jne    c00273db <__fixsfsi+0x5e>
c00273c3:	85 c9                	test   ecx,ecx
c00273c5:	75 14                	jne    c00273db <__fixsfsi+0x5e>
c00273c7:	89 c8                	mov    eax,ecx
c00273c9:	0d 00 00 00 80       	or     eax,0x80000000
c00273ce:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273d3:	29 d1                	sub    ecx,edx
c00273d5:	d3 e8                	shr    eax,cl
c00273d7:	f7 d8                	neg    eax
c00273d9:	eb 02                	jmp    c00273dd <__fixsfsi+0x60>
c00273db:	31 c0                	xor    eax,eax
c00273dd:	5d                   	pop    ebp
c00273de:	c3                   	ret    

c00273df <__fixunssfsi>:
c00273df:	55                   	push   ebp
c00273e0:	89 e5                	mov    ebp,esp
c00273e2:	53                   	push   ebx
c00273e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273e6:	89 d3                	mov    ebx,edx
c00273e8:	c1 fb 17             	sar    ebx,0x17
c00273eb:	83 eb 7f             	sub    ebx,0x7f
c00273ee:	31 c0                	xor    eax,eax
c00273f0:	83 fb 1f             	cmp    ebx,0x1f
c00273f3:	77 18                	ja     c002740d <__fixunssfsi+0x2e>
c00273f5:	89 d0                	mov    eax,edx
c00273f7:	c1 e0 08             	shl    eax,0x8
c00273fa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00273ff:	0d 00 00 00 80       	or     eax,0x80000000
c0027404:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027409:	29 d9                	sub    ecx,ebx
c002740b:	d3 e8                	shr    eax,cl
c002740d:	5b                   	pop    ebx
c002740e:	5d                   	pop    ebp
c002740f:	c3                   	ret    

c0027410 <__cmpsf2>:
c0027410:	55                   	push   ebp
c0027411:	89 e5                	mov    ebp,esp
c0027413:	57                   	push   edi
c0027414:	56                   	push   esi
c0027415:	53                   	push   ebx
c0027416:	83 ec 24             	sub    esp,0x24
c0027419:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002741c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002741f:	e8 4f 10 00 00       	call   c0028473 <__truncdfsf2>
c0027424:	5a                   	pop    edx
c0027425:	59                   	pop    ecx
c0027426:	89 c3                	mov    ebx,eax
c0027428:	c1 e8 17             	shr    eax,0x17
c002742b:	0f b6 f0             	movzx  esi,al
c002742e:	89 d8                	mov    eax,ebx
c0027430:	c1 e8 1f             	shr    eax,0x1f
c0027433:	31 c6                	xor    esi,eax
c0027435:	c1 e3 08             	shl    ebx,0x8
c0027438:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002743b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002743e:	e8 30 10 00 00       	call   c0028473 <__truncdfsf2>
c0027443:	83 c4 10             	add    esp,0x10
c0027446:	89 c1                	mov    ecx,eax
c0027448:	c1 e9 17             	shr    ecx,0x17
c002744b:	0f b6 c9             	movzx  ecx,cl
c002744e:	89 c7                	mov    edi,eax
c0027450:	c1 ef 1f             	shr    edi,0x1f
c0027453:	89 ca                	mov    edx,ecx
c0027455:	31 fa                	xor    edx,edi
c0027457:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002745a:	c1 e0 08             	shl    eax,0x8
c002745d:	89 c2                	mov    edx,eax
c002745f:	89 d8                	mov    eax,ebx
c0027461:	09 d0                	or     eax,edx
c0027463:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027468:	09 f0                	or     eax,esi
c002746a:	75 08                	jne    c0027474 <__cmpsf2+0x64>
c002746c:	31 c0                	xor    eax,eax
c002746e:	39 f9                	cmp    ecx,edi
c0027470:	75 0c                	jne    c002747e <__cmpsf2+0x6e>
c0027472:	eb 29                	jmp    c002749d <__cmpsf2+0x8d>
c0027474:	b8 01 00 00 00       	mov    eax,0x1
c0027479:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002747c:	7f 1f                	jg     c002749d <__cmpsf2+0x8d>
c002747e:	83 c8 ff             	or     eax,0xffffffff
c0027481:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027484:	7c 17                	jl     c002749d <__cmpsf2+0x8d>
c0027486:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002748c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027492:	b8 01 00 00 00       	mov    eax,0x1
c0027497:	39 d3                	cmp    ebx,edx
c0027499:	77 02                	ja     c002749d <__cmpsf2+0x8d>
c002749b:	19 c0                	sbb    eax,eax
c002749d:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274a0:	5b                   	pop    ebx
c00274a1:	5e                   	pop    esi
c00274a2:	5f                   	pop    edi
c00274a3:	5d                   	pop    ebp
c00274a4:	c3                   	ret    

c00274a5 <__eqsf2>:
c00274a5:	55                   	push   ebp
c00274a6:	89 e5                	mov    ebp,esp
c00274a8:	83 ec 24             	sub    esp,0x24
c00274ab:	6a 01                	push   0x1
c00274ad:	83 ec 0c             	sub    esp,0xc
c00274b0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274b3:	e8 df 10 00 00       	call   c0028597 <__extendsfdf2>
c00274b8:	83 c4 10             	add    esp,0x10
c00274bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274be:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274c1:	52                   	push   edx
c00274c2:	50                   	push   eax
c00274c3:	50                   	push   eax
c00274c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274c7:	e8 cb 10 00 00       	call   c0028597 <__extendsfdf2>
c00274cc:	59                   	pop    ecx
c00274cd:	59                   	pop    ecx
c00274ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274d1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274d4:	52                   	push   edx
c00274d5:	50                   	push   eax
c00274d6:	e8 35 ff ff ff       	call   c0027410 <__cmpsf2>
c00274db:	83 c4 20             	add    esp,0x20
c00274de:	c9                   	leave  
c00274df:	c3                   	ret    

c00274e0 <__nesf2>:
c00274e0:	eb c3                	jmp    c00274a5 <__eqsf2>

c00274e2 <__gtsf2>:
c00274e2:	55                   	push   ebp
c00274e3:	89 e5                	mov    ebp,esp
c00274e5:	83 ec 24             	sub    esp,0x24
c00274e8:	6a ff                	push   0xffffffff
c00274ea:	83 ec 0c             	sub    esp,0xc
c00274ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274f0:	e8 a2 10 00 00       	call   c0028597 <__extendsfdf2>
c00274f5:	83 c4 10             	add    esp,0x10
c00274f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274fb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274fe:	52                   	push   edx
c00274ff:	50                   	push   eax
c0027500:	50                   	push   eax
c0027501:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027504:	e8 8e 10 00 00       	call   c0028597 <__extendsfdf2>
c0027509:	59                   	pop    ecx
c002750a:	59                   	pop    ecx
c002750b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002750e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027511:	52                   	push   edx
c0027512:	50                   	push   eax
c0027513:	e8 f8 fe ff ff       	call   c0027410 <__cmpsf2>
c0027518:	83 c4 20             	add    esp,0x20
c002751b:	c9                   	leave  
c002751c:	c3                   	ret    

c002751d <__gesf2>:
c002751d:	eb c3                	jmp    c00274e2 <__gtsf2>

c002751f <__ltsf2>:
c002751f:	eb 84                	jmp    c00274a5 <__eqsf2>

c0027521 <__lesf2>:
c0027521:	eb 82                	jmp    c00274a5 <__eqsf2>

c0027523 <__adddf3>:
c0027523:	55                   	push   ebp
c0027524:	89 e5                	mov    ebp,esp
c0027526:	57                   	push   edi
c0027527:	56                   	push   esi
c0027528:	53                   	push   ebx
c0027529:	83 ec 24             	sub    esp,0x24
c002752c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002752f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027532:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027535:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027538:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002753b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002753e:	89 c8                	mov    eax,ecx
c0027540:	89 ce                	mov    esi,ecx
c0027542:	c1 fe 14             	sar    esi,0x14
c0027545:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027548:	89 fb                	mov    ebx,edi
c002754a:	89 fa                	mov    edx,edi
c002754c:	c1 e2 0b             	shl    edx,0xb
c002754f:	c1 e0 0b             	shl    eax,0xb
c0027552:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027557:	c1 eb 15             	shr    ebx,0x15
c002755a:	09 d8                	or     eax,ebx
c002755c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002755f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027562:	c1 fe 14             	sar    esi,0x14
c0027565:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027568:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002756b:	89 f3                	mov    ebx,esi
c002756d:	c1 e3 0b             	shl    ebx,0xb
c0027570:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027573:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027576:	c1 e3 0b             	shl    ebx,0xb
c0027579:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002757f:	c1 ee 15             	shr    esi,0x15
c0027582:	09 f3                	or     ebx,esi
c0027584:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027587:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002758a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002758d:	0f 88 5f 02 00 00    	js     c00277f2 <__adddf3+0x2cf>
c0027593:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027596:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027599:	85 db                	test   ebx,ebx
c002759b:	0f 8e c7 00 00 00    	jle    c0027668 <__adddf3+0x145>
c00275a1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00275a8:	75 1a                	jne    c00275c4 <__adddf3+0xa1>
c00275aa:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275ad:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00275b0:	0f 84 b2 05 00 00    	je     c0027b68 <__adddf3+0x645>
c00275b6:	4b                   	dec    ebx
c00275b7:	75 23                	jne    c00275dc <__adddf3+0xb9>
c00275b9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00275bc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275bf:	e9 99 00 00 00       	jmp    c002765d <__adddf3+0x13a>
c00275c4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275c7:	f7 d6                	not    esi
c00275c9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275cf:	0f 84 93 05 00 00    	je     c0027b68 <__adddf3+0x645>
c00275d5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275dc:	83 fb 1f             	cmp    ebx,0x1f
c00275df:	7e 42                	jle    c0027623 <__adddf3+0x100>
c00275e1:	83 fb 3f             	cmp    ebx,0x3f
c00275e4:	0f 8f 7e 05 00 00    	jg     c0027b68 <__adddf3+0x645>
c00275ea:	83 e3 1f             	and    ebx,0x1f
c00275ed:	89 d9                	mov    ecx,ebx
c00275ef:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275f2:	d3 ef                	shr    edi,cl
c00275f4:	31 db                	xor    ebx,ebx
c00275f6:	85 c9                	test   ecx,ecx
c00275f8:	74 15                	je     c002760f <__adddf3+0xec>
c00275fa:	be 20 00 00 00       	mov    esi,0x20
c00275ff:	29 ce                	sub    esi,ecx
c0027601:	89 f1                	mov    ecx,esi
c0027603:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027606:	d3 e6                	shl    esi,cl
c0027608:	31 db                	xor    ebx,ebx
c002760a:	85 f6                	test   esi,esi
c002760c:	0f 95 c3             	setne  bl
c002760f:	31 c9                	xor    ecx,ecx
c0027611:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027615:	0f 95 c1             	setne  cl
c0027618:	09 cf                	or     edi,ecx
c002761a:	09 fb                	or     ebx,edi
c002761c:	01 da                	add    edx,ebx
c002761e:	83 d0 00             	adc    eax,0x0
c0027621:	eb 3a                	jmp    c002765d <__adddf3+0x13a>
c0027623:	bf 20 00 00 00       	mov    edi,0x20
c0027628:	29 df                	sub    edi,ebx
c002762a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002762d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027630:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027633:	d3 e6                	shl    esi,cl
c0027635:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027638:	88 d9                	mov    cl,bl
c002763a:	d3 ef                	shr    edi,cl
c002763c:	09 fe                	or     esi,edi
c002763e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027641:	88 d9                	mov    cl,bl
c0027643:	d3 ef                	shr    edi,cl
c0027645:	89 fb                	mov    ebx,edi
c0027647:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002764a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002764d:	d3 e7                	shl    edi,cl
c002764f:	85 ff                	test   edi,edi
c0027651:	0f 95 c1             	setne  cl
c0027654:	0f b6 c9             	movzx  ecx,cl
c0027657:	09 ce                	or     esi,ecx
c0027659:	01 f2                	add    edx,esi
c002765b:	11 d8                	adc    eax,ebx
c002765d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027660:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027663:	e9 52 01 00 00       	jmp    c00277ba <__adddf3+0x297>
c0027668:	0f 84 d5 00 00 00    	je     c0027743 <__adddf3+0x220>
c002766e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027671:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027674:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027677:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002767a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027681:	75 20                	jne    c00276a3 <__adddf3+0x180>
c0027683:	89 d6                	mov    esi,edx
c0027685:	09 c6                	or     esi,eax
c0027687:	0f 84 db 04 00 00    	je     c0027b68 <__adddf3+0x645>
c002768d:	4b                   	dec    ebx
c002768e:	75 29                	jne    c00276b9 <__adddf3+0x196>
c0027690:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027693:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027696:	01 d1                	add    ecx,edx
c0027698:	11 c6                	adc    esi,eax
c002769a:	89 f0                	mov    eax,esi
c002769c:	89 ca                	mov    edx,ecx
c002769e:	e9 17 01 00 00       	jmp    c00277ba <__adddf3+0x297>
c00276a3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276a6:	f7 d6                	not    esi
c00276a8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276ae:	0f 84 b4 04 00 00    	je     c0027b68 <__adddf3+0x645>
c00276b4:	0d 00 00 00 80       	or     eax,0x80000000
c00276b9:	83 fb 1f             	cmp    ebx,0x1f
c00276bc:	7e 48                	jle    c0027706 <__adddf3+0x1e3>
c00276be:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276c1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276c4:	83 fb 3f             	cmp    ebx,0x3f
c00276c7:	0f 8f 9b 04 00 00    	jg     c0027b68 <__adddf3+0x645>
c00276cd:	83 e3 1f             	and    ebx,0x1f
c00276d0:	89 d9                	mov    ecx,ebx
c00276d2:	89 c7                	mov    edi,eax
c00276d4:	d3 ef                	shr    edi,cl
c00276d6:	31 db                	xor    ebx,ebx
c00276d8:	85 c9                	test   ecx,ecx
c00276da:	74 12                	je     c00276ee <__adddf3+0x1cb>
c00276dc:	be 20 00 00 00       	mov    esi,0x20
c00276e1:	29 ce                	sub    esi,ecx
c00276e3:	89 f1                	mov    ecx,esi
c00276e5:	d3 e0                	shl    eax,cl
c00276e7:	31 db                	xor    ebx,ebx
c00276e9:	85 c0                	test   eax,eax
c00276eb:	0f 95 c3             	setne  bl
c00276ee:	31 c0                	xor    eax,eax
c00276f0:	85 d2                	test   edx,edx
c00276f2:	0f 95 c0             	setne  al
c00276f5:	09 c7                	or     edi,eax
c00276f7:	09 fb                	or     ebx,edi
c00276f9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276fc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276ff:	01 da                	add    edx,ebx
c0027701:	83 d6 00             	adc    esi,0x0
c0027704:	eb 39                	jmp    c002773f <__adddf3+0x21c>
c0027706:	be 20 00 00 00       	mov    esi,0x20
c002770b:	29 de                	sub    esi,ebx
c002770d:	89 c7                	mov    edi,eax
c002770f:	89 f1                	mov    ecx,esi
c0027711:	d3 e7                	shl    edi,cl
c0027713:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027716:	89 d7                	mov    edi,edx
c0027718:	88 d9                	mov    cl,bl
c002771a:	d3 ef                	shr    edi,cl
c002771c:	89 f9                	mov    ecx,edi
c002771e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027721:	09 cf                	or     edi,ecx
c0027723:	88 d9                	mov    cl,bl
c0027725:	d3 e8                	shr    eax,cl
c0027727:	89 f1                	mov    ecx,esi
c0027729:	d3 e2                	shl    edx,cl
c002772b:	85 d2                	test   edx,edx
c002772d:	0f 95 c2             	setne  dl
c0027730:	0f b6 d2             	movzx  edx,dl
c0027733:	09 d7                	or     edi,edx
c0027735:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027738:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002773b:	01 fa                	add    edx,edi
c002773d:	11 c6                	adc    esi,eax
c002773f:	89 f0                	mov    eax,esi
c0027741:	eb 77                	jmp    c00277ba <__adddf3+0x297>
c0027743:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027746:	46                   	inc    esi
c0027747:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002774a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027750:	75 41                	jne    c0027793 <__adddf3+0x270>
c0027752:	89 d3                	mov    ebx,edx
c0027754:	09 c3                	or     ebx,eax
c0027756:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002775d:	75 27                	jne    c0027786 <__adddf3+0x263>
c002775f:	85 db                	test   ebx,ebx
c0027761:	0f 84 fb 03 00 00    	je     c0027b62 <__adddf3+0x63f>
c0027767:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002776a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002776d:	0f 84 f5 03 00 00    	je     c0027b68 <__adddf3+0x645>
c0027773:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027776:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027779:	85 c0                	test   eax,eax
c002777b:	0f 89 91 03 00 00    	jns    c0027b12 <__adddf3+0x5ef>
c0027781:	e9 85 03 00 00       	jmp    c0027b0b <__adddf3+0x5e8>
c0027786:	85 db                	test   ebx,ebx
c0027788:	0f 85 da 03 00 00    	jne    c0027b68 <__adddf3+0x645>
c002778e:	e9 cf 03 00 00       	jmp    c0027b62 <__adddf3+0x63f>
c0027793:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027796:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027799:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002779c:	f7 d1                	not    ecx
c002779e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277a4:	0f 84 70 03 00 00    	je     c0027b1a <__adddf3+0x5f7>
c00277aa:	d1 ea                	shr    edx,1
c00277ac:	89 c1                	mov    ecx,eax
c00277ae:	c1 e1 1f             	shl    ecx,0x1f
c00277b1:	09 ca                	or     edx,ecx
c00277b3:	d1 e8                	shr    eax,1
c00277b5:	e9 6f 03 00 00       	jmp    c0027b29 <__adddf3+0x606>
c00277ba:	85 c0                	test   eax,eax
c00277bc:	0f 89 67 03 00 00    	jns    c0027b29 <__adddf3+0x606>
c00277c2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00277c5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277c8:	f7 d1                	not    ecx
c00277ca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277d0:	0f 84 44 03 00 00    	je     c0027b1a <__adddf3+0x5f7>
c00277d6:	89 d1                	mov    ecx,edx
c00277d8:	d1 e9                	shr    ecx,1
c00277da:	83 e2 01             	and    edx,0x1
c00277dd:	09 ca                	or     edx,ecx
c00277df:	89 c1                	mov    ecx,eax
c00277e1:	c1 e1 1f             	shl    ecx,0x1f
c00277e4:	09 ca                	or     edx,ecx
c00277e6:	d1 e8                	shr    eax,1
c00277e8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00277ed:	e9 37 03 00 00       	jmp    c0027b29 <__adddf3+0x606>
c00277f2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277f5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277fb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00277fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027801:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027807:	29 de                	sub    esi,ebx
c0027809:	85 f6                	test   esi,esi
c002780b:	0f 8e bd 00 00 00    	jle    c00278ce <__adddf3+0x3ab>
c0027811:	85 db                	test   ebx,ebx
c0027813:	75 17                	jne    c002782c <__adddf3+0x309>
c0027815:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027818:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002781b:	0f 84 47 03 00 00    	je     c0027b68 <__adddf3+0x645>
c0027821:	4e                   	dec    esi
c0027822:	75 20                	jne    c0027844 <__adddf3+0x321>
c0027824:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027827:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002782a:	eb 5b                	jmp    c0027887 <__adddf3+0x364>
c002782c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002782f:	f7 d3                	not    ebx
c0027831:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027837:	0f 84 2b 03 00 00    	je     c0027b68 <__adddf3+0x645>
c002783d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027844:	83 fe 1f             	cmp    esi,0x1f
c0027847:	7e 49                	jle    c0027892 <__adddf3+0x36f>
c0027849:	83 fe 3f             	cmp    esi,0x3f
c002784c:	0f 8f 16 03 00 00    	jg     c0027b68 <__adddf3+0x645>
c0027852:	83 e6 1f             	and    esi,0x1f
c0027855:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027858:	89 f1                	mov    ecx,esi
c002785a:	d3 ef                	shr    edi,cl
c002785c:	31 db                	xor    ebx,ebx
c002785e:	85 f6                	test   esi,esi
c0027860:	74 13                	je     c0027875 <__adddf3+0x352>
c0027862:	b9 20 00 00 00       	mov    ecx,0x20
c0027867:	29 f1                	sub    ecx,esi
c0027869:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002786c:	d3 e6                	shl    esi,cl
c002786e:	31 db                	xor    ebx,ebx
c0027870:	85 f6                	test   esi,esi
c0027872:	0f 95 c3             	setne  bl
c0027875:	31 c9                	xor    ecx,ecx
c0027877:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002787b:	0f 95 c1             	setne  cl
c002787e:	09 cf                	or     edi,ecx
c0027880:	09 fb                	or     ebx,edi
c0027882:	29 da                	sub    edx,ebx
c0027884:	83 d8 00             	sbb    eax,0x0
c0027887:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002788a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002788d:	e9 aa 01 00 00       	jmp    c0027a3c <__adddf3+0x519>
c0027892:	bf 20 00 00 00       	mov    edi,0x20
c0027897:	29 f7                	sub    edi,esi
c0027899:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002789c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002789f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278a2:	d3 e3                	shl    ebx,cl
c00278a4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278a7:	89 f1                	mov    ecx,esi
c00278a9:	d3 ef                	shr    edi,cl
c00278ab:	09 fb                	or     ebx,edi
c00278ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278b0:	89 f1                	mov    ecx,esi
c00278b2:	d3 ef                	shr    edi,cl
c00278b4:	89 fe                	mov    esi,edi
c00278b6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278b9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278bc:	d3 e7                	shl    edi,cl
c00278be:	85 ff                	test   edi,edi
c00278c0:	0f 95 c1             	setne  cl
c00278c3:	0f b6 c9             	movzx  ecx,cl
c00278c6:	09 cb                	or     ebx,ecx
c00278c8:	29 da                	sub    edx,ebx
c00278ca:	19 f0                	sbb    eax,esi
c00278cc:	eb b9                	jmp    c0027887 <__adddf3+0x364>
c00278ce:	0f 84 cd 00 00 00    	je     c00279a1 <__adddf3+0x47e>
c00278d4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00278d7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278da:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278dd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278e1:	75 1b                	jne    c00278fe <__adddf3+0x3db>
c00278e3:	89 d6                	mov    esi,edx
c00278e5:	09 c6                	or     esi,eax
c00278e7:	0f 84 7b 02 00 00    	je     c0027b68 <__adddf3+0x645>
c00278ed:	4b                   	dec    ebx
c00278ee:	75 24                	jne    c0027914 <__adddf3+0x3f1>
c00278f0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278f6:	29 d1                	sub    ecx,edx
c00278f8:	19 c6                	sbb    esi,eax
c00278fa:	89 ca                	mov    edx,ecx
c00278fc:	eb 61                	jmp    c002795f <__adddf3+0x43c>
c00278fe:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027901:	f7 d6                	not    esi
c0027903:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027909:	0f 84 59 02 00 00    	je     c0027b68 <__adddf3+0x645>
c002790f:	0d 00 00 00 80       	or     eax,0x80000000
c0027914:	83 fb 1f             	cmp    ebx,0x1f
c0027917:	7e 4d                	jle    c0027966 <__adddf3+0x443>
c0027919:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002791c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002791f:	83 fb 3f             	cmp    ebx,0x3f
c0027922:	0f 8f 40 02 00 00    	jg     c0027b68 <__adddf3+0x645>
c0027928:	83 e3 1f             	and    ebx,0x1f
c002792b:	89 d9                	mov    ecx,ebx
c002792d:	89 c7                	mov    edi,eax
c002792f:	d3 ef                	shr    edi,cl
c0027931:	31 db                	xor    ebx,ebx
c0027933:	85 c9                	test   ecx,ecx
c0027935:	74 12                	je     c0027949 <__adddf3+0x426>
c0027937:	be 20 00 00 00       	mov    esi,0x20
c002793c:	29 ce                	sub    esi,ecx
c002793e:	89 f1                	mov    ecx,esi
c0027940:	d3 e0                	shl    eax,cl
c0027942:	31 db                	xor    ebx,ebx
c0027944:	85 c0                	test   eax,eax
c0027946:	0f 95 c3             	setne  bl
c0027949:	31 c0                	xor    eax,eax
c002794b:	85 d2                	test   edx,edx
c002794d:	0f 95 c0             	setne  al
c0027950:	09 c7                	or     edi,eax
c0027952:	09 fb                	or     ebx,edi
c0027954:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027957:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002795a:	29 da                	sub    edx,ebx
c002795c:	83 de 00             	sbb    esi,0x0
c002795f:	89 f0                	mov    eax,esi
c0027961:	e9 d6 00 00 00       	jmp    c0027a3c <__adddf3+0x519>
c0027966:	be 20 00 00 00       	mov    esi,0x20
c002796b:	29 de                	sub    esi,ebx
c002796d:	89 c7                	mov    edi,eax
c002796f:	89 f1                	mov    ecx,esi
c0027971:	d3 e7                	shl    edi,cl
c0027973:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027976:	89 d7                	mov    edi,edx
c0027978:	88 d9                	mov    cl,bl
c002797a:	d3 ef                	shr    edi,cl
c002797c:	89 f9                	mov    ecx,edi
c002797e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027981:	09 cf                	or     edi,ecx
c0027983:	88 d9                	mov    cl,bl
c0027985:	d3 e8                	shr    eax,cl
c0027987:	89 f1                	mov    ecx,esi
c0027989:	d3 e2                	shl    edx,cl
c002798b:	85 d2                	test   edx,edx
c002798d:	0f 95 c2             	setne  dl
c0027990:	0f b6 d2             	movzx  edx,dl
c0027993:	09 d7                	or     edi,edx
c0027995:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027998:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002799b:	29 fa                	sub    edx,edi
c002799d:	19 c6                	sbb    esi,eax
c002799f:	eb be                	jmp    c002795f <__adddf3+0x43c>
c00279a1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279a4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00279a7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00279ad:	75 6a                	jne    c0027a19 <__adddf3+0x4f6>
c00279af:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279b3:	75 58                	jne    c0027a0d <__adddf3+0x4ea>
c00279b5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279b8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00279bb:	89 d6                	mov    esi,edx
c00279bd:	09 c6                	or     esi,eax
c00279bf:	75 17                	jne    c00279d8 <__adddf3+0x4b5>
c00279c1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279c4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279c7:	85 db                	test   ebx,ebx
c00279c9:	0f 85 99 01 00 00    	jne    c0027b68 <__adddf3+0x645>
c00279cf:	31 ff                	xor    edi,edi
c00279d1:	31 c9                	xor    ecx,ecx
c00279d3:	e9 90 01 00 00       	jmp    c0027b68 <__adddf3+0x645>
c00279d8:	85 db                	test   ebx,ebx
c00279da:	0f 84 88 01 00 00    	je     c0027b68 <__adddf3+0x645>
c00279e0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00279e3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00279e6:	85 c0                	test   eax,eax
c00279e8:	79 10                	jns    c00279fa <__adddf3+0x4d7>
c00279ea:	31 c9                	xor    ecx,ecx
c00279ec:	f7 da                	neg    edx
c00279ee:	0f 95 c1             	setne  cl
c00279f1:	01 c8                	add    eax,ecx
c00279f3:	f7 d8                	neg    eax
c00279f5:	e9 2f 01 00 00       	jmp    c0027b29 <__adddf3+0x606>
c00279fa:	31 ff                	xor    edi,edi
c00279fc:	31 c9                	xor    ecx,ecx
c00279fe:	89 c3                	mov    ebx,eax
c0027a00:	09 d3                	or     ebx,edx
c0027a02:	0f 84 60 01 00 00    	je     c0027b68 <__adddf3+0x645>
c0027a08:	e9 05 01 00 00       	jmp    c0027b12 <__adddf3+0x5ef>
c0027a0d:	31 ff                	xor    edi,edi
c0027a0f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a14:	e9 4f 01 00 00       	jmp    c0027b68 <__adddf3+0x645>
c0027a19:	89 c1                	mov    ecx,eax
c0027a1b:	89 d0                	mov    eax,edx
c0027a1d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a20:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a23:	89 ca                	mov    edx,ecx
c0027a25:	85 c9                	test   ecx,ecx
c0027a27:	79 2c                	jns    c0027a55 <__adddf3+0x532>
c0027a29:	31 c9                	xor    ecx,ecx
c0027a2b:	f7 d8                	neg    eax
c0027a2d:	0f 95 c1             	setne  cl
c0027a30:	01 ca                	add    edx,ecx
c0027a32:	f7 da                	neg    edx
c0027a34:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a37:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a3a:	eb 19                	jmp    c0027a55 <__adddf3+0x532>
c0027a3c:	85 c0                	test   eax,eax
c0027a3e:	0f 89 e5 00 00 00    	jns    c0027b29 <__adddf3+0x606>
c0027a44:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a49:	89 c1                	mov    ecx,eax
c0027a4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a4e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a51:	89 d0                	mov    eax,edx
c0027a53:	89 ca                	mov    edx,ecx
c0027a55:	85 d2                	test   edx,edx
c0027a57:	74 59                	je     c0027ab2 <__adddf3+0x58f>
c0027a59:	0f bd da             	bsr    ebx,edx
c0027a5c:	83 f3 1f             	xor    ebx,0x1f
c0027a5f:	88 d9                	mov    cl,bl
c0027a61:	d3 e2                	shl    edx,cl
c0027a63:	bf 20 00 00 00       	mov    edi,0x20
c0027a68:	89 f9                	mov    ecx,edi
c0027a6a:	29 d9                	sub    ecx,ebx
c0027a6c:	89 c6                	mov    esi,eax
c0027a6e:	d3 ee                	shr    esi,cl
c0027a70:	09 d6                	or     esi,edx
c0027a72:	88 d9                	mov    cl,bl
c0027a74:	d3 e0                	shl    eax,cl
c0027a76:	89 c2                	mov    edx,eax
c0027a78:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a7b:	25 ff 07 00 00       	and    eax,0x7ff
c0027a80:	39 d8                	cmp    eax,ebx
c0027a82:	7f 22                	jg     c0027aa6 <__adddf3+0x583>
c0027a84:	29 c3                	sub    ebx,eax
c0027a86:	43                   	inc    ebx
c0027a87:	88 d9                	mov    cl,bl
c0027a89:	d3 ea                	shr    edx,cl
c0027a8b:	29 df                	sub    edi,ebx
c0027a8d:	89 f9                	mov    ecx,edi
c0027a8f:	89 f0                	mov    eax,esi
c0027a91:	d3 e0                	shl    eax,cl
c0027a93:	09 c2                	or     edx,eax
c0027a95:	89 f0                	mov    eax,esi
c0027a97:	88 d9                	mov    cl,bl
c0027a99:	d3 e8                	shr    eax,cl
c0027a9b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a9e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027aa4:	eb 6f                	jmp    c0027b15 <__adddf3+0x5f2>
c0027aa6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027aa9:	29 d8                	sub    eax,ebx
c0027aab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027aae:	89 f0                	mov    eax,esi
c0027ab0:	eb 59                	jmp    c0027b0b <__adddf3+0x5e8>
c0027ab2:	85 c0                	test   eax,eax
c0027ab4:	74 6a                	je     c0027b20 <__adddf3+0x5fd>
c0027ab6:	0f bd c8             	bsr    ecx,eax
c0027ab9:	83 f1 1f             	xor    ecx,0x1f
c0027abc:	d3 e0                	shl    eax,cl
c0027abe:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ac1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ac7:	83 c1 20             	add    ecx,0x20
c0027aca:	39 cb                	cmp    ebx,ecx
c0027acc:	7f 35                	jg     c0027b03 <__adddf3+0x5e0>
c0027ace:	29 d9                	sub    ecx,ebx
c0027ad0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027ad3:	83 fe 1f             	cmp    esi,0x1f
c0027ad6:	7e 09                	jle    c0027ae1 <__adddf3+0x5be>
c0027ad8:	83 e9 1f             	sub    ecx,0x1f
c0027adb:	d3 e8                	shr    eax,cl
c0027add:	89 c3                	mov    ebx,eax
c0027adf:	eb 11                	jmp    c0027af2 <__adddf3+0x5cf>
c0027ae1:	b9 20 00 00 00       	mov    ecx,0x20
c0027ae6:	29 f1                	sub    ecx,esi
c0027ae8:	89 c3                	mov    ebx,eax
c0027aea:	d3 e3                	shl    ebx,cl
c0027aec:	89 f1                	mov    ecx,esi
c0027aee:	d3 e8                	shr    eax,cl
c0027af0:	89 c2                	mov    edx,eax
c0027af2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027af5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027afa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027afd:	89 d0                	mov    eax,edx
c0027aff:	89 da                	mov    edx,ebx
c0027b01:	eb 26                	jmp    c0027b29 <__adddf3+0x606>
c0027b03:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b06:	29 cf                	sub    edi,ecx
c0027b08:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b0b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b10:	eb 17                	jmp    c0027b29 <__adddf3+0x606>
c0027b12:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b15:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b18:	eb 0f                	jmp    c0027b29 <__adddf3+0x606>
c0027b1a:	31 d2                	xor    edx,edx
c0027b1c:	31 c0                	xor    eax,eax
c0027b1e:	eb 09                	jmp    c0027b29 <__adddf3+0x606>
c0027b20:	89 c2                	mov    edx,eax
c0027b22:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b29:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b2c:	c1 e1 14             	shl    ecx,0x14
c0027b2f:	89 c3                	mov    ebx,eax
c0027b31:	c1 eb 0b             	shr    ebx,0xb
c0027b34:	09 d9                	or     ecx,ebx
c0027b36:	89 d3                	mov    ebx,edx
c0027b38:	c1 eb 0b             	shr    ebx,0xb
c0027b3b:	c1 e0 15             	shl    eax,0x15
c0027b3e:	09 d8                	or     eax,ebx
c0027b40:	89 c7                	mov    edi,eax
c0027b42:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b48:	0f 95 c0             	setne  al
c0027b4b:	89 c6                	mov    esi,eax
c0027b4d:	09 f3                	or     ebx,esi
c0027b4f:	83 e3 01             	and    ebx,0x1
c0027b52:	c1 ea 0a             	shr    edx,0xa
c0027b55:	21 da                	and    edx,ebx
c0027b57:	89 f8                	mov    eax,edi
c0027b59:	01 d0                	add    eax,edx
c0027b5b:	83 d1 00             	adc    ecx,0x0
c0027b5e:	89 c7                	mov    edi,eax
c0027b60:	eb 06                	jmp    c0027b68 <__adddf3+0x645>
c0027b62:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b65:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b68:	89 f8                	mov    eax,edi
c0027b6a:	89 ca                	mov    edx,ecx
c0027b6c:	83 c4 24             	add    esp,0x24
c0027b6f:	5b                   	pop    ebx
c0027b70:	5e                   	pop    esi
c0027b71:	5f                   	pop    edi
c0027b72:	5d                   	pop    ebp
c0027b73:	c3                   	ret    

c0027b74 <__subdf3>:
c0027b74:	55                   	push   ebp
c0027b75:	89 e5                	mov    ebp,esp
c0027b77:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b7a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b7d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b83:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027b86:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027b89:	5d                   	pop    ebp
c0027b8a:	e9 94 f9 ff ff       	jmp    c0027523 <__adddf3>

c0027b8f <__negdf2>:
c0027b8f:	55                   	push   ebp
c0027b90:	89 e5                	mov    ebp,esp
c0027b92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027b95:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b98:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b9e:	5d                   	pop    ebp
c0027b9f:	c3                   	ret    

c0027ba0 <__muldf3>:
c0027ba0:	55                   	push   ebp
c0027ba1:	89 e5                	mov    ebp,esp
c0027ba3:	57                   	push   edi
c0027ba4:	56                   	push   esi
c0027ba5:	53                   	push   ebx
c0027ba6:	83 ec 24             	sub    esp,0x24
c0027ba9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027baf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bb2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bb5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027bb8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027bbb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bbe:	89 c8                	mov    eax,ecx
c0027bc0:	c1 f8 14             	sar    eax,0x14
c0027bc3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027bc6:	89 f8                	mov    eax,edi
c0027bc8:	89 fb                	mov    ebx,edi
c0027bca:	c1 e3 0b             	shl    ebx,0xb
c0027bcd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027bd0:	c1 e1 0b             	shl    ecx,0xb
c0027bd3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027bd9:	c1 e8 15             	shr    eax,0x15
c0027bdc:	09 c1                	or     ecx,eax
c0027bde:	89 d6                	mov    esi,edx
c0027be0:	89 d0                	mov    eax,edx
c0027be2:	c1 f8 14             	sar    eax,0x14
c0027be5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027be8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027beb:	89 c3                	mov    ebx,eax
c0027bed:	c1 e3 0b             	shl    ebx,0xb
c0027bf0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027bf3:	c1 e6 0b             	shl    esi,0xb
c0027bf6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027bfc:	c1 e8 15             	shr    eax,0x15
c0027bff:	09 c6                	or     esi,eax
c0027c01:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c04:	25 ff 07 00 00       	and    eax,0x7ff
c0027c09:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c0c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c0f:	25 ff 07 00 00       	and    eax,0x7ff
c0027c14:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c17:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c1a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c1d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c24:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c27:	40                   	inc    eax
c0027c28:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c2d:	0f 85 8d 00 00 00    	jne    c0027cc0 <__muldf3+0x120>
c0027c33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c36:	09 c8                	or     eax,ecx
c0027c38:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c3c:	74 44                	je     c0027c82 <__muldf3+0xe2>
c0027c3e:	85 c0                	test   eax,eax
c0027c40:	0f 85 31 02 00 00    	jne    c0027e77 <__muldf3+0x2d7>
c0027c46:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c49:	40                   	inc    eax
c0027c4a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c4f:	75 13                	jne    c0027c64 <__muldf3+0xc4>
c0027c51:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c54:	09 f1                	or     ecx,esi
c0027c56:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c5a:	74 22                	je     c0027c7e <__muldf3+0xde>
c0027c5c:	85 c9                	test   ecx,ecx
c0027c5e:	0f 85 0d 02 00 00    	jne    c0027e71 <__muldf3+0x2d1>
c0027c64:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c68:	0f 89 09 02 00 00    	jns    c0027e77 <__muldf3+0x2d7>
c0027c6e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c71:	05 00 00 00 80       	add    eax,0x80000000
c0027c76:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c79:	e9 f9 01 00 00       	jmp    c0027e77 <__muldf3+0x2d7>
c0027c7e:	85 c9                	test   ecx,ecx
c0027c80:	eb 2e                	jmp    c0027cb0 <__muldf3+0x110>
c0027c82:	85 c0                	test   eax,eax
c0027c84:	74 20                	je     c0027ca6 <__muldf3+0x106>
c0027c86:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027c89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c8c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c8f:	c1 ef 1f             	shr    edi,0x1f
c0027c92:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027c95:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027c98:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c9b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c9e:	09 f9                	or     ecx,edi
c0027ca0:	78 1e                	js     c0027cc0 <__muldf3+0x120>
c0027ca2:	89 c3                	mov    ebx,eax
c0027ca4:	eb e0                	jmp    c0027c86 <__muldf3+0xe6>
c0027ca6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ca9:	f7 d0                	not    eax
c0027cab:	a9 ff 07 00 00       	test   eax,0x7ff
c0027cb0:	75 b2                	jne    c0027c64 <__muldf3+0xc4>
c0027cb2:	31 ff                	xor    edi,edi
c0027cb4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027cbb:	e9 b7 01 00 00       	jmp    c0027e77 <__muldf3+0x2d7>
c0027cc0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cc3:	40                   	inc    eax
c0027cc4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cc9:	75 57                	jne    c0027d22 <__muldf3+0x182>
c0027ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027cce:	09 f0                	or     eax,esi
c0027cd0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cd4:	74 23                	je     c0027cf9 <__muldf3+0x159>
c0027cd6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027cda:	0f 89 91 01 00 00    	jns    c0027e71 <__muldf3+0x2d1>
c0027ce0:	85 c0                	test   eax,eax
c0027ce2:	0f 85 89 01 00 00    	jne    c0027e71 <__muldf3+0x2d1>
c0027ce8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027ceb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027cf1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cf4:	e9 7e 01 00 00       	jmp    c0027e77 <__muldf3+0x2d7>
c0027cf9:	85 c0                	test   eax,eax
c0027cfb:	75 0c                	jne    c0027d09 <__muldf3+0x169>
c0027cfd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d01:	0f 89 6a 01 00 00    	jns    c0027e71 <__muldf3+0x2d1>
c0027d07:	eb df                	jmp    c0027ce8 <__muldf3+0x148>
c0027d09:	01 f6                	add    esi,esi
c0027d0b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d0e:	c1 ea 1f             	shr    edx,0x1f
c0027d11:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d14:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d17:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d1a:	09 d6                	or     esi,edx
c0027d1c:	78 04                	js     c0027d22 <__muldf3+0x182>
c0027d1e:	89 c3                	mov    ebx,eax
c0027d20:	eb e7                	jmp    c0027d09 <__muldf3+0x169>
c0027d22:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d28:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d2e:	89 c8                	mov    eax,ecx
c0027d30:	f7 e6                	mul    esi
c0027d32:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d35:	89 c7                	mov    edi,eax
c0027d37:	89 c8                	mov    eax,ecx
c0027d39:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d3c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d3f:	89 c1                	mov    ecx,eax
c0027d41:	89 f0                	mov    eax,esi
c0027d43:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d46:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d49:	89 c6                	mov    esi,eax
c0027d4b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d4e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d51:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d54:	31 c0                	xor    eax,eax
c0027d56:	01 f1                	add    ecx,esi
c0027d58:	0f 92 c0             	setb   al
c0027d5b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d5e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d61:	83 d6 00             	adc    esi,0x0
c0027d64:	01 c7                	add    edi,eax
c0027d66:	83 d6 00             	adc    esi,0x0
c0027d69:	01 ca                	add    edx,ecx
c0027d6b:	0f 92 c1             	setb   cl
c0027d6e:	0f b6 c9             	movzx  ecx,cl
c0027d71:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027d74:	83 d6 00             	adc    esi,0x0
c0027d77:	01 cf                	add    edi,ecx
c0027d79:	83 d6 00             	adc    esi,0x0
c0027d7c:	31 c9                	xor    ecx,ecx
c0027d7e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027d81:	0f 95 c1             	setne  cl
c0027d84:	09 cf                	or     edi,ecx
c0027d86:	85 f6                	test   esi,esi
c0027d88:	78 0c                	js     c0027d96 <__muldf3+0x1f6>
c0027d8a:	01 f6                	add    esi,esi
c0027d8c:	89 f8                	mov    eax,edi
c0027d8e:	c1 e8 1f             	shr    eax,0x1f
c0027d91:	09 c6                	or     esi,eax
c0027d93:	01 ff                	add    edi,edi
c0027d95:	4b                   	dec    ebx
c0027d96:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027d9c:	0f 8f 85 00 00 00    	jg     c0027e27 <__muldf3+0x287>
c0027da2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027da8:	85 db                	test   ebx,ebx
c0027daa:	0f 8f 84 00 00 00    	jg     c0027e34 <__muldf3+0x294>
c0027db0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027db3:	7c 79                	jl     c0027e2e <__muldf3+0x28e>
c0027db5:	ba 01 00 00 00       	mov    edx,0x1
c0027dba:	29 da                	sub    edx,ebx
c0027dbc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027dc2:	83 fa 1f             	cmp    edx,0x1f
c0027dc5:	7e 30                	jle    c0027df7 <__muldf3+0x257>
c0027dc7:	83 fa 20             	cmp    edx,0x20
c0027dca:	75 0b                	jne    c0027dd7 <__muldf3+0x237>
c0027dcc:	31 c0                	xor    eax,eax
c0027dce:	85 ff                	test   edi,edi
c0027dd0:	0f 95 c0             	setne  al
c0027dd3:	89 c7                	mov    edi,eax
c0027dd5:	eb 1a                	jmp    c0027df1 <__muldf3+0x251>
c0027dd7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027dda:	89 f0                	mov    eax,esi
c0027ddc:	d3 e0                	shl    eax,cl
c0027dde:	09 f8                	or     eax,edi
c0027de0:	0f 95 c0             	setne  al
c0027de3:	0f b6 c0             	movzx  eax,al
c0027de6:	89 c7                	mov    edi,eax
c0027de8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ded:	29 d9                	sub    ecx,ebx
c0027def:	d3 ee                	shr    esi,cl
c0027df1:	09 f7                	or     edi,esi
c0027df3:	31 db                	xor    ebx,ebx
c0027df5:	eb 3b                	jmp    c0027e32 <__muldf3+0x292>
c0027df7:	83 c3 1f             	add    ebx,0x1f
c0027dfa:	89 f0                	mov    eax,esi
c0027dfc:	88 d9                	mov    cl,bl
c0027dfe:	d3 e0                	shl    eax,cl
c0027e00:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e03:	89 f8                	mov    eax,edi
c0027e05:	88 d1                	mov    cl,dl
c0027e07:	d3 e8                	shr    eax,cl
c0027e09:	89 c1                	mov    ecx,eax
c0027e0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e0e:	09 c8                	or     eax,ecx
c0027e10:	88 d9                	mov    cl,bl
c0027e12:	d3 e7                	shl    edi,cl
c0027e14:	31 db                	xor    ebx,ebx
c0027e16:	85 ff                	test   edi,edi
c0027e18:	0f 95 c3             	setne  bl
c0027e1b:	89 df                	mov    edi,ebx
c0027e1d:	09 c7                	or     edi,eax
c0027e1f:	88 d1                	mov    cl,dl
c0027e21:	d3 ee                	shr    esi,cl
c0027e23:	31 db                	xor    ebx,ebx
c0027e25:	eb 0d                	jmp    c0027e34 <__muldf3+0x294>
c0027e27:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e2c:	eb 02                	jmp    c0027e30 <__muldf3+0x290>
c0027e2e:	31 db                	xor    ebx,ebx
c0027e30:	31 ff                	xor    edi,edi
c0027e32:	31 f6                	xor    esi,esi
c0027e34:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e37:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e3a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e3f:	09 c3                	or     ebx,eax
c0027e41:	c1 e3 14             	shl    ebx,0x14
c0027e44:	89 f0                	mov    eax,esi
c0027e46:	c1 e8 0b             	shr    eax,0xb
c0027e49:	09 c3                	or     ebx,eax
c0027e4b:	89 f8                	mov    eax,edi
c0027e4d:	c1 e8 0b             	shr    eax,0xb
c0027e50:	c1 e6 15             	shl    esi,0x15
c0027e53:	09 c6                	or     esi,eax
c0027e55:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e5b:	0f 95 c1             	setne  cl
c0027e5e:	09 c8                	or     eax,ecx
c0027e60:	83 e0 01             	and    eax,0x1
c0027e63:	c1 ef 0a             	shr    edi,0xa
c0027e66:	21 c7                	and    edi,eax
c0027e68:	01 f7                	add    edi,esi
c0027e6a:	83 d3 00             	adc    ebx,0x0
c0027e6d:	89 da                	mov    edx,ebx
c0027e6f:	eb 03                	jmp    c0027e74 <__muldf3+0x2d4>
c0027e71:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e74:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e77:	89 f8                	mov    eax,edi
c0027e79:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e7c:	83 c4 24             	add    esp,0x24
c0027e7f:	5b                   	pop    ebx
c0027e80:	5e                   	pop    esi
c0027e81:	5f                   	pop    edi
c0027e82:	5d                   	pop    ebp
c0027e83:	c3                   	ret    

c0027e84 <__divdf3>:
c0027e84:	55                   	push   ebp
c0027e85:	89 e5                	mov    ebp,esp
c0027e87:	57                   	push   edi
c0027e88:	56                   	push   esi
c0027e89:	53                   	push   ebx
c0027e8a:	83 ec 2c             	sub    esp,0x2c
c0027e8d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027e90:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027e93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e96:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027e99:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027e9c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027e9f:	89 ce                	mov    esi,ecx
c0027ea1:	89 c8                	mov    eax,ecx
c0027ea3:	c1 f8 14             	sar    eax,0x14
c0027ea6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ea9:	89 f8                	mov    eax,edi
c0027eab:	89 fb                	mov    ebx,edi
c0027ead:	c1 e3 0b             	shl    ebx,0xb
c0027eb0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027eb3:	c1 e6 0b             	shl    esi,0xb
c0027eb6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027ebc:	c1 e8 15             	shr    eax,0x15
c0027ebf:	09 c6                	or     esi,eax
c0027ec1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027ec4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027ec7:	89 c2                	mov    edx,eax
c0027ec9:	c1 fa 14             	sar    edx,0x14
c0027ecc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027ecf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ed2:	89 de                	mov    esi,ebx
c0027ed4:	c1 e6 0b             	shl    esi,0xb
c0027ed7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027eda:	c1 e0 0b             	shl    eax,0xb
c0027edd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027ee2:	c1 eb 15             	shr    ebx,0x15
c0027ee5:	09 d8                	or     eax,ebx
c0027ee7:	89 c2                	mov    edx,eax
c0027ee9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027eec:	25 ff 07 00 00       	and    eax,0x7ff
c0027ef1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027ef4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ef7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027efd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f00:	29 d8                	sub    eax,ebx
c0027f02:	05 ff 03 00 00       	add    eax,0x3ff
c0027f07:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f0a:	46                   	inc    esi
c0027f0b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f11:	0f 85 a5 00 00 00    	jne    c0027fbc <__divdf3+0x138>
c0027f17:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f1a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f1d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f21:	74 2a                	je     c0027f4d <__divdf3+0xc9>
c0027f23:	85 f6                	test   esi,esi
c0027f25:	0f 85 cc 02 00 00    	jne    c00281f7 <__divdf3+0x373>
c0027f2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f2e:	40                   	inc    eax
c0027f2f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f34:	75 26                	jne    c0027f5c <__divdf3+0xd8>
c0027f36:	85 db                	test   ebx,ebx
c0027f38:	74 22                	je     c0027f5c <__divdf3+0xd8>
c0027f3a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f3d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f40:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f43:	09 d0                	or     eax,edx
c0027f45:	0f 85 ac 02 00 00    	jne    c00281f7 <__divdf3+0x373>
c0027f4b:	eb 63                	jmp    c0027fb0 <__divdf3+0x12c>
c0027f4d:	85 f6                	test   esi,esi
c0027f4f:	75 22                	jne    c0027f73 <__divdf3+0xef>
c0027f51:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f54:	40                   	inc    eax
c0027f55:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f5a:	74 36                	je     c0027f92 <__divdf3+0x10e>
c0027f5c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f60:	0f 89 91 02 00 00    	jns    c00281f7 <__divdf3+0x373>
c0027f66:	89 f8                	mov    eax,edi
c0027f68:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f6e:	e9 80 02 00 00       	jmp    c00281f3 <__divdf3+0x36f>
c0027f73:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f76:	01 f6                	add    esi,esi
c0027f78:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f7b:	c1 ef 1f             	shr    edi,0x1f
c0027f7e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f81:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027f84:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027f87:	09 f7                	or     edi,esi
c0027f89:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027f8c:	78 2e                	js     c0027fbc <__divdf3+0x138>
c0027f8e:	89 c8                	mov    eax,ecx
c0027f90:	eb e1                	jmp    c0027f73 <__divdf3+0xef>
c0027f92:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f95:	09 d0                	or     eax,edx
c0027f97:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027f9b:	74 0f                	je     c0027fac <__divdf3+0x128>
c0027f9d:	85 c0                	test   eax,eax
c0027f9f:	74 bb                	je     c0027f5c <__divdf3+0xd8>
c0027fa1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fa4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fa7:	e9 4b 02 00 00       	jmp    c00281f7 <__divdf3+0x373>
c0027fac:	85 c0                	test   eax,eax
c0027fae:	75 ac                	jne    c0027f5c <__divdf3+0xd8>
c0027fb0:	31 ff                	xor    edi,edi
c0027fb2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027fb7:	e9 3b 02 00 00       	jmp    c00281f7 <__divdf3+0x373>
c0027fbc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fbf:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027fc2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027fc8:	75 6b                	jne    c0028035 <__divdf3+0x1b1>
c0027fca:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fcd:	09 d6                	or     esi,edx
c0027fcf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fd3:	74 28                	je     c0027ffd <__divdf3+0x179>
c0027fd5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fd8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fdb:	85 f6                	test   esi,esi
c0027fdd:	0f 85 14 02 00 00    	jne    c00281f7 <__divdf3+0x373>
c0027fe3:	31 ff                	xor    edi,edi
c0027fe5:	31 c9                	xor    ecx,ecx
c0027fe7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fea:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027fed:	0f 89 04 02 00 00    	jns    c00281f7 <__divdf3+0x373>
c0027ff3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027ff8:	e9 fa 01 00 00       	jmp    c00281f7 <__divdf3+0x373>
c0027ffd:	85 f6                	test   esi,esi
c0027fff:	75 1b                	jne    c002801c <__divdf3+0x198>
c0028001:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028004:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028007:	25 00 00 00 80       	and    eax,0x80000000
c002800c:	31 c9                	xor    ecx,ecx
c002800e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028013:	89 cf                	mov    edi,ecx
c0028015:	89 c1                	mov    ecx,eax
c0028017:	e9 db 01 00 00       	jmp    c00281f7 <__divdf3+0x373>
c002801c:	01 d2                	add    edx,edx
c002801e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028021:	c1 eb 1f             	shr    ebx,0x1f
c0028024:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028027:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002802a:	8d 48 01             	lea    ecx,[eax+0x1]
c002802d:	09 da                	or     edx,ebx
c002802f:	78 04                	js     c0028035 <__divdf3+0x1b1>
c0028031:	89 c8                	mov    eax,ecx
c0028033:	eb e7                	jmp    c002801c <__divdf3+0x198>
c0028035:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028038:	81 ce 00 00 00 80    	or     esi,0x80000000
c002803e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028044:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028047:	39 d6                	cmp    esi,edx
c0028049:	77 0d                	ja     c0028058 <__divdf3+0x1d4>
c002804b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002804e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028051:	72 1b                	jb     c002806e <__divdf3+0x1ea>
c0028053:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028056:	75 16                	jne    c002806e <__divdf3+0x1ea>
c0028058:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002805b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002805e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028061:	83 de 00             	sbb    esi,0x0
c0028064:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028067:	ba 01 00 00 00       	mov    edx,0x1
c002806c:	eb 02                	jmp    c0028070 <__divdf3+0x1ec>
c002806e:	31 d2                	xor    edx,edx
c0028070:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028077:	31 ff                	xor    edi,edi
c0028079:	01 ff                	add    edi,edi
c002807b:	89 d1                	mov    ecx,edx
c002807d:	c1 e9 1f             	shr    ecx,0x1f
c0028080:	09 cf                	or     edi,ecx
c0028082:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028085:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028088:	89 da                	mov    edx,ebx
c002808a:	89 f3                	mov    ebx,esi
c002808c:	8d 34 36             	lea    esi,[esi+esi*1]
c002808f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028092:	c1 e9 1f             	shr    ecx,0x1f
c0028095:	09 ce                	or     esi,ecx
c0028097:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002809a:	01 c9                	add    ecx,ecx
c002809c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002809f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280a2:	85 db                	test   ebx,ebx
c00280a4:	78 29                	js     c00280cf <__divdf3+0x24b>
c00280a6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00280a9:	72 07                	jb     c00280b2 <__divdf3+0x22e>
c00280ab:	75 3c                	jne    c00280e9 <__divdf3+0x265>
c00280ad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280b0:	77 37                	ja     c00280e9 <__divdf3+0x265>
c00280b2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280b5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00280b8:	31 d2                	xor    edx,edx
c00280ba:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00280bd:	0f 97 c2             	seta   dl
c00280c0:	29 d6                	sub    esi,edx
c00280c2:	89 d9                	mov    ecx,ebx
c00280c4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00280c7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280ca:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00280cd:	eb 17                	jmp    c00280e6 <__divdf3+0x262>
c00280cf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280d2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280d5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280d8:	0f 97 c1             	seta   cl
c00280db:	0f b6 c9             	movzx  ecx,cl
c00280de:	29 ce                	sub    esi,ecx
c00280e0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00280e3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00280e6:	83 ca 01             	or     edx,0x1
c00280e9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00280ec:	75 8b                	jne    c0028079 <__divdf3+0x1f5>
c00280ee:	c1 e7 09             	shl    edi,0x9
c00280f1:	89 d1                	mov    ecx,edx
c00280f3:	c1 e9 17             	shr    ecx,0x17
c00280f6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00280f9:	09 f3                	or     ebx,esi
c00280fb:	0f 95 c3             	setne  bl
c00280fe:	0f b6 db             	movzx  ebx,bl
c0028101:	c1 e2 09             	shl    edx,0x9
c0028104:	09 d3                	or     ebx,edx
c0028106:	89 ca                	mov    edx,ecx
c0028108:	09 fa                	or     edx,edi
c002810a:	78 0c                	js     c0028118 <__divdf3+0x294>
c002810c:	01 d2                	add    edx,edx
c002810e:	89 d9                	mov    ecx,ebx
c0028110:	c1 e9 1f             	shr    ecx,0x1f
c0028113:	09 ca                	or     edx,ecx
c0028115:	01 db                	add    ebx,ebx
c0028117:	48                   	dec    eax
c0028118:	3d fe 07 00 00       	cmp    eax,0x7fe
c002811d:	0f 8f 83 00 00 00    	jg     c00281a6 <__divdf3+0x322>
c0028123:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028129:	85 c0                	test   eax,eax
c002812b:	0f 8f 82 00 00 00    	jg     c00281b3 <__divdf3+0x32f>
c0028131:	83 f8 cc             	cmp    eax,0xffffffcc
c0028134:	7c 77                	jl     c00281ad <__divdf3+0x329>
c0028136:	be 01 00 00 00       	mov    esi,0x1
c002813b:	29 c6                	sub    esi,eax
c002813d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028143:	83 fe 1f             	cmp    esi,0x1f
c0028146:	7e 2f                	jle    c0028177 <__divdf3+0x2f3>
c0028148:	83 fe 20             	cmp    esi,0x20
c002814b:	75 0a                	jne    c0028157 <__divdf3+0x2d3>
c002814d:	85 db                	test   ebx,ebx
c002814f:	0f 95 c3             	setne  bl
c0028152:	0f b6 db             	movzx  ebx,bl
c0028155:	eb 1a                	jmp    c0028171 <__divdf3+0x2ed>
c0028157:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002815a:	89 d7                	mov    edi,edx
c002815c:	d3 e7                	shl    edi,cl
c002815e:	89 f9                	mov    ecx,edi
c0028160:	09 d9                	or     ecx,ebx
c0028162:	0f 95 c3             	setne  bl
c0028165:	0f b6 db             	movzx  ebx,bl
c0028168:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002816d:	29 c1                	sub    ecx,eax
c002816f:	d3 ea                	shr    edx,cl
c0028171:	09 d3                	or     ebx,edx
c0028173:	31 c0                	xor    eax,eax
c0028175:	eb 3a                	jmp    c00281b1 <__divdf3+0x32d>
c0028177:	83 c0 1f             	add    eax,0x1f
c002817a:	89 d7                	mov    edi,edx
c002817c:	88 c1                	mov    cl,al
c002817e:	d3 e7                	shl    edi,cl
c0028180:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028183:	89 df                	mov    edi,ebx
c0028185:	89 f1                	mov    ecx,esi
c0028187:	d3 ef                	shr    edi,cl
c0028189:	89 f9                	mov    ecx,edi
c002818b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002818e:	09 cf                	or     edi,ecx
c0028190:	88 c1                	mov    cl,al
c0028192:	d3 e3                	shl    ebx,cl
c0028194:	85 db                	test   ebx,ebx
c0028196:	0f 95 c3             	setne  bl
c0028199:	0f b6 db             	movzx  ebx,bl
c002819c:	09 fb                	or     ebx,edi
c002819e:	89 f1                	mov    ecx,esi
c00281a0:	d3 ea                	shr    edx,cl
c00281a2:	31 c0                	xor    eax,eax
c00281a4:	eb 0d                	jmp    c00281b3 <__divdf3+0x32f>
c00281a6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00281ab:	eb 02                	jmp    c00281af <__divdf3+0x32b>
c00281ad:	31 c0                	xor    eax,eax
c00281af:	31 db                	xor    ebx,ebx
c00281b1:	31 d2                	xor    edx,edx
c00281b3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00281b6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00281b9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00281bf:	09 c8                	or     eax,ecx
c00281c1:	c1 e0 14             	shl    eax,0x14
c00281c4:	89 d1                	mov    ecx,edx
c00281c6:	c1 e9 0b             	shr    ecx,0xb
c00281c9:	09 c8                	or     eax,ecx
c00281cb:	89 c6                	mov    esi,eax
c00281cd:	89 d9                	mov    ecx,ebx
c00281cf:	c1 e9 0b             	shr    ecx,0xb
c00281d2:	c1 e2 15             	shl    edx,0x15
c00281d5:	09 ca                	or     edx,ecx
c00281d7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00281dd:	0f 95 c0             	setne  al
c00281e0:	09 c1                	or     ecx,eax
c00281e2:	83 e1 01             	and    ecx,0x1
c00281e5:	c1 eb 0a             	shr    ebx,0xa
c00281e8:	21 cb                	and    ebx,ecx
c00281ea:	01 d3                	add    ebx,edx
c00281ec:	89 d8                	mov    eax,ebx
c00281ee:	83 d6 00             	adc    esi,0x0
c00281f1:	89 f2                	mov    edx,esi
c00281f3:	89 c7                	mov    edi,eax
c00281f5:	89 d1                	mov    ecx,edx
c00281f7:	89 f8                	mov    eax,edi
c00281f9:	89 ca                	mov    edx,ecx
c00281fb:	83 c4 2c             	add    esp,0x2c
c00281fe:	5b                   	pop    ebx
c00281ff:	5e                   	pop    esi
c0028200:	5f                   	pop    edi
c0028201:	5d                   	pop    ebp
c0028202:	c3                   	ret    

c0028203 <__floatsidf>:
c0028203:	55                   	push   ebp
c0028204:	89 e5                	mov    ebp,esp
c0028206:	56                   	push   esi
c0028207:	53                   	push   ebx
c0028208:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002820b:	85 db                	test   ebx,ebx
c002820d:	7e 15                	jle    c0028224 <__floatsidf+0x21>
c002820f:	0f bd cb             	bsr    ecx,ebx
c0028212:	83 f1 1f             	xor    ecx,0x1f
c0028215:	d3 e3                	shl    ebx,cl
c0028217:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002821d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028222:	eb 21                	jmp    c0028245 <__floatsidf+0x42>
c0028224:	b8 00 00 00 00       	mov    eax,0x0
c0028229:	ba 00 00 00 00       	mov    edx,0x0
c002822e:	74 2a                	je     c002825a <__floatsidf+0x57>
c0028230:	f7 db                	neg    ebx
c0028232:	0f bd cb             	bsr    ecx,ebx
c0028235:	83 f1 1f             	xor    ecx,0x1f
c0028238:	d3 e3                	shl    ebx,cl
c002823a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028240:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028245:	29 c8                	sub    eax,ecx
c0028247:	c1 e0 14             	shl    eax,0x14
c002824a:	89 c1                	mov    ecx,eax
c002824c:	89 de                	mov    esi,ebx
c002824e:	c1 ee 0b             	shr    esi,0xb
c0028251:	09 f1                	or     ecx,esi
c0028253:	89 ca                	mov    edx,ecx
c0028255:	c1 e3 15             	shl    ebx,0x15
c0028258:	89 d8                	mov    eax,ebx
c002825a:	5b                   	pop    ebx
c002825b:	5e                   	pop    esi
c002825c:	5d                   	pop    ebp
c002825d:	c3                   	ret    

c002825e <__floatunsidf>:
c002825e:	55                   	push   ebp
c002825f:	89 e5                	mov    ebp,esp
c0028261:	56                   	push   esi
c0028262:	53                   	push   ebx
c0028263:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028266:	85 db                	test   ebx,ebx
c0028268:	74 2a                	je     c0028294 <__floatunsidf+0x36>
c002826a:	0f bd cb             	bsr    ecx,ebx
c002826d:	83 f1 1f             	xor    ecx,0x1f
c0028270:	d3 e3                	shl    ebx,cl
c0028272:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028278:	b8 1e 04 00 00       	mov    eax,0x41e
c002827d:	29 c8                	sub    eax,ecx
c002827f:	c1 e0 14             	shl    eax,0x14
c0028282:	89 c1                	mov    ecx,eax
c0028284:	89 de                	mov    esi,ebx
c0028286:	c1 ee 0b             	shr    esi,0xb
c0028289:	09 f1                	or     ecx,esi
c002828b:	89 ca                	mov    edx,ecx
c002828d:	c1 e3 15             	shl    ebx,0x15
c0028290:	89 d8                	mov    eax,ebx
c0028292:	eb 04                	jmp    c0028298 <__floatunsidf+0x3a>
c0028294:	31 c0                	xor    eax,eax
c0028296:	31 d2                	xor    edx,edx
c0028298:	5b                   	pop    ebx
c0028299:	5e                   	pop    esi
c002829a:	5d                   	pop    ebp
c002829b:	c3                   	ret    

c002829c <__fixdfsi>:
c002829c:	55                   	push   ebp
c002829d:	89 e5                	mov    ebp,esp
c002829f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282a2:	89 d1                	mov    ecx,edx
c00282a4:	c1 e1 0b             	shl    ecx,0xb
c00282a7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00282b0:	c1 e8 15             	shr    eax,0x15
c00282b3:	09 c1                	or     ecx,eax
c00282b5:	c1 fa 14             	sar    edx,0x14
c00282b8:	78 1f                	js     c00282d9 <__fixdfsi+0x3d>
c00282ba:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00282c0:	31 c0                	xor    eax,eax
c00282c2:	83 fa 1e             	cmp    edx,0x1e
c00282c5:	77 40                	ja     c0028307 <__fixdfsi+0x6b>
c00282c7:	89 c8                	mov    eax,ecx
c00282c9:	0d 00 00 00 80       	or     eax,0x80000000
c00282ce:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282d3:	29 d1                	sub    ecx,edx
c00282d5:	d3 e8                	shr    eax,cl
c00282d7:	eb 2e                	jmp    c0028307 <__fixdfsi+0x6b>
c00282d9:	31 c0                	xor    eax,eax
c00282db:	81 c2 01 04 00 00    	add    edx,0x401
c00282e1:	78 24                	js     c0028307 <__fixdfsi+0x6b>
c00282e3:	83 fa 1e             	cmp    edx,0x1e
c00282e6:	7e 09                	jle    c00282f1 <__fixdfsi+0x55>
c00282e8:	83 fa 1f             	cmp    edx,0x1f
c00282eb:	75 18                	jne    c0028305 <__fixdfsi+0x69>
c00282ed:	85 c9                	test   ecx,ecx
c00282ef:	75 14                	jne    c0028305 <__fixdfsi+0x69>
c00282f1:	89 c8                	mov    eax,ecx
c00282f3:	0d 00 00 00 80       	or     eax,0x80000000
c00282f8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282fd:	29 d1                	sub    ecx,edx
c00282ff:	d3 e8                	shr    eax,cl
c0028301:	f7 d8                	neg    eax
c0028303:	eb 02                	jmp    c0028307 <__fixdfsi+0x6b>
c0028305:	31 c0                	xor    eax,eax
c0028307:	5d                   	pop    ebp
c0028308:	c3                   	ret    

c0028309 <__fixunsdfsi>:
c0028309:	55                   	push   ebp
c002830a:	89 e5                	mov    ebp,esp
c002830c:	53                   	push   ebx
c002830d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028310:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028313:	89 d3                	mov    ebx,edx
c0028315:	c1 fb 14             	sar    ebx,0x14
c0028318:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002831e:	31 c0                	xor    eax,eax
c0028320:	83 fb 1f             	cmp    ebx,0x1f
c0028323:	77 1d                	ja     c0028342 <__fixunsdfsi+0x39>
c0028325:	89 d0                	mov    eax,edx
c0028327:	c1 e0 0b             	shl    eax,0xb
c002832a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002832f:	c1 e9 15             	shr    ecx,0x15
c0028332:	09 c8                	or     eax,ecx
c0028334:	0d 00 00 00 80       	or     eax,0x80000000
c0028339:	b9 1f 00 00 00       	mov    ecx,0x1f
c002833e:	29 d9                	sub    ecx,ebx
c0028340:	d3 e8                	shr    eax,cl
c0028342:	5b                   	pop    ebx
c0028343:	5d                   	pop    ebp
c0028344:	c3                   	ret    

c0028345 <__cmpdf2>:
c0028345:	55                   	push   ebp
c0028346:	89 e5                	mov    ebp,esp
c0028348:	57                   	push   edi
c0028349:	56                   	push   esi
c002834a:	53                   	push   ebx
c002834b:	83 ec 0c             	sub    esp,0xc
c002834e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028351:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028354:	89 ca                	mov    edx,ecx
c0028356:	c1 ea 14             	shr    edx,0x14
c0028359:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002835f:	89 cb                	mov    ebx,ecx
c0028361:	c1 fb 1f             	sar    ebx,0x1f
c0028364:	31 da                	xor    edx,ebx
c0028366:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028369:	89 df                	mov    edi,ebx
c002836b:	c1 e7 0b             	shl    edi,0xb
c002836e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028371:	c1 e1 0b             	shl    ecx,0xb
c0028374:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002837a:	c1 eb 15             	shr    ebx,0x15
c002837d:	09 d9                	or     ecx,ebx
c002837f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028382:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028385:	89 ce                	mov    esi,ecx
c0028387:	c1 ee 14             	shr    esi,0x14
c002838a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028390:	89 cb                	mov    ebx,ecx
c0028392:	c1 fb 1f             	sar    ebx,0x1f
c0028395:	31 de                	xor    esi,ebx
c0028397:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002839a:	89 df                	mov    edi,ebx
c002839c:	c1 e7 0b             	shl    edi,0xb
c002839f:	c1 e1 0b             	shl    ecx,0xb
c00283a2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283a8:	c1 eb 15             	shr    ebx,0x15
c00283ab:	09 d9                	or     ecx,ebx
c00283ad:	89 d3                	mov    ebx,edx
c00283af:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283b5:	43                   	inc    ebx
c00283b6:	83 fb 01             	cmp    ebx,0x1
c00283b9:	77 08                	ja     c00283c3 <__cmpdf2+0x7e>
c00283bb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283be:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00283c1:	75 68                	jne    c002842b <__cmpdf2+0xe6>
c00283c3:	89 f3                	mov    ebx,esi
c00283c5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283cb:	43                   	inc    ebx
c00283cc:	83 fb 01             	cmp    ebx,0x1
c00283cf:	77 06                	ja     c00283d7 <__cmpdf2+0x92>
c00283d1:	89 fb                	mov    ebx,edi
c00283d3:	09 cb                	or     ebx,ecx
c00283d5:	75 54                	jne    c002842b <__cmpdf2+0xe6>
c00283d7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00283da:	09 f8                	or     eax,edi
c00283dc:	09 c8                	or     eax,ecx
c00283de:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00283e1:	75 12                	jne    c00283f5 <__cmpdf2+0xb0>
c00283e3:	8d 42 01             	lea    eax,[edx+0x1]
c00283e6:	83 f8 01             	cmp    eax,0x1
c00283e9:	77 0a                	ja     c00283f5 <__cmpdf2+0xb0>
c00283eb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00283ee:	31 c0                	xor    eax,eax
c00283f0:	83 fb 01             	cmp    ebx,0x1
c00283f3:	76 36                	jbe    c002842b <__cmpdf2+0xe6>
c00283f5:	b8 01 00 00 00       	mov    eax,0x1
c00283fa:	39 f2                	cmp    edx,esi
c00283fc:	7f 2d                	jg     c002842b <__cmpdf2+0xe6>
c00283fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028403:	7c 26                	jl     c002842b <__cmpdf2+0xe6>
c0028405:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028408:	77 07                	ja     c0028411 <__cmpdf2+0xcc>
c002840a:	72 16                	jb     c0028422 <__cmpdf2+0xdd>
c002840c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002840f:	76 0a                	jbe    c002841b <__cmpdf2+0xd6>
c0028411:	89 d0                	mov    eax,edx
c0028413:	c1 f8 1f             	sar    eax,0x1f
c0028416:	83 c8 01             	or     eax,0x1
c0028419:	eb 10                	jmp    c002842b <__cmpdf2+0xe6>
c002841b:	b8 00 00 00 00       	mov    eax,0x0
c0028420:	73 09                	jae    c002842b <__cmpdf2+0xe6>
c0028422:	89 d0                	mov    eax,edx
c0028424:	c1 f8 1f             	sar    eax,0x1f
c0028427:	83 e0 02             	and    eax,0x2
c002842a:	48                   	dec    eax
c002842b:	83 c4 0c             	add    esp,0xc
c002842e:	5b                   	pop    ebx
c002842f:	5e                   	pop    esi
c0028430:	5f                   	pop    edi
c0028431:	5d                   	pop    ebp
c0028432:	c3                   	ret    

c0028433 <__eqdf2>:
c0028433:	55                   	push   ebp
c0028434:	89 e5                	mov    ebp,esp
c0028436:	50                   	push   eax
c0028437:	6a 01                	push   0x1
c0028439:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002843c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002843f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028442:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028445:	e8 fb fe ff ff       	call   c0028345 <__cmpdf2>
c002844a:	83 c4 18             	add    esp,0x18
c002844d:	c9                   	leave  
c002844e:	c3                   	ret    

c002844f <__nedf2>:
c002844f:	eb e2                	jmp    c0028433 <__eqdf2>

c0028451 <__gtdf2>:
c0028451:	55                   	push   ebp
c0028452:	89 e5                	mov    ebp,esp
c0028454:	50                   	push   eax
c0028455:	6a ff                	push   0xffffffff
c0028457:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002845a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002845d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028460:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028463:	e8 dd fe ff ff       	call   c0028345 <__cmpdf2>
c0028468:	83 c4 18             	add    esp,0x18
c002846b:	c9                   	leave  
c002846c:	c3                   	ret    

c002846d <__gedf2>:
c002846d:	eb e2                	jmp    c0028451 <__gtdf2>

c002846f <__ltdf2>:
c002846f:	eb c2                	jmp    c0028433 <__eqdf2>

c0028471 <__ledf2>:
c0028471:	eb c0                	jmp    c0028433 <__eqdf2>

c0028473 <__truncdfsf2>:
c0028473:	55                   	push   ebp
c0028474:	89 e5                	mov    ebp,esp
c0028476:	57                   	push   edi
c0028477:	56                   	push   esi
c0028478:	53                   	push   ebx
c0028479:	83 ec 0c             	sub    esp,0xc
c002847c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002847f:	89 d1                	mov    ecx,edx
c0028481:	c1 f9 14             	sar    ecx,0x14
c0028484:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028487:	89 df                	mov    edi,ebx
c0028489:	c1 e7 0b             	shl    edi,0xb
c002848c:	89 d0                	mov    eax,edx
c002848e:	c1 e0 0b             	shl    eax,0xb
c0028491:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028496:	c1 eb 15             	shr    ebx,0x15
c0028499:	09 d8                	or     eax,ebx
c002849b:	89 cb                	mov    ebx,ecx
c002849d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00284a3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00284a9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00284af:	0f 86 9e 00 00 00    	jbe    c0028553 <__truncdfsf2+0xe0>
c00284b5:	85 db                	test   ebx,ebx
c00284b7:	75 0a                	jne    c00284c3 <__truncdfsf2+0x50>
c00284b9:	c1 fa 17             	sar    edx,0x17
c00284bc:	30 d2                	xor    dl,dl
c00284be:	e9 84 00 00 00       	jmp    c0028547 <__truncdfsf2+0xd4>
c00284c3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00284c9:	83 fe 83             	cmp    esi,0xffffff83
c00284cc:	7d 4b                	jge    c0028519 <__truncdfsf2+0xa6>
c00284ce:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00284d3:	29 f1                	sub    ecx,esi
c00284d5:	83 f9 1f             	cmp    ecx,0x1f
c00284d8:	7f 6b                	jg     c0028545 <__truncdfsf2+0xd2>
c00284da:	0d 00 00 00 80       	or     eax,0x80000000
c00284df:	89 c3                	mov    ebx,eax
c00284e1:	d3 eb                	shr    ebx,cl
c00284e3:	be 01 00 00 00       	mov    esi,0x1
c00284e8:	d3 e6                	shl    esi,cl
c00284ea:	4e                   	dec    esi
c00284eb:	21 f0                	and    eax,esi
c00284ed:	09 f8                	or     eax,edi
c00284ef:	0f 95 c0             	setne  al
c00284f2:	0f b6 c0             	movzx  eax,al
c00284f5:	09 c3                	or     ebx,eax
c00284f7:	89 d9                	mov    ecx,ebx
c00284f9:	c1 e9 08             	shr    ecx,0x8
c00284fc:	f6 c3 7f             	test   bl,0x7f
c00284ff:	0f 95 c0             	setne  al
c0028502:	09 c8                	or     eax,ecx
c0028504:	83 e0 01             	and    eax,0x1
c0028507:	c1 eb 07             	shr    ebx,0x7
c002850a:	21 c3                	and    ebx,eax
c002850c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028512:	09 d1                	or     ecx,edx
c0028514:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028517:	eb 76                	jmp    c002858f <__truncdfsf2+0x11c>
c0028519:	83 c6 80             	add    esi,0xffffff80
c002851c:	7e 1d                	jle    c002853b <__truncdfsf2+0xc8>
c002851e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028524:	75 0b                	jne    c0028531 <__truncdfsf2+0xbe>
c0028526:	09 f8                	or     eax,edi
c0028528:	74 09                	je     c0028533 <__truncdfsf2+0xc0>
c002852a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002852f:	eb 02                	jmp    c0028533 <__truncdfsf2+0xc0>
c0028531:	31 c0                	xor    eax,eax
c0028533:	c1 fa 17             	sar    edx,0x17
c0028536:	80 ca ff             	or     dl,0xff
c0028539:	eb 0e                	jmp    c0028549 <__truncdfsf2+0xd6>
c002853b:	c1 fa 1f             	sar    edx,0x1f
c002853e:	c1 e2 08             	shl    edx,0x8
c0028541:	09 ca                	or     edx,ecx
c0028543:	eb 04                	jmp    c0028549 <__truncdfsf2+0xd6>
c0028545:	31 d2                	xor    edx,edx
c0028547:	31 c0                	xor    eax,eax
c0028549:	c1 e2 17             	shl    edx,0x17
c002854c:	c1 e8 08             	shr    eax,0x8
c002854f:	09 d0                	or     eax,edx
c0028551:	eb 3c                	jmp    c002858f <__truncdfsf2+0x11c>
c0028553:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028559:	89 ca                	mov    edx,ecx
c002855b:	c1 fa 0b             	sar    edx,0xb
c002855e:	c1 e2 08             	shl    edx,0x8
c0028561:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028564:	31 db                	xor    ebx,ebx
c0028566:	85 ff                	test   edi,edi
c0028568:	0f 95 c3             	setne  bl
c002856b:	09 d8                	or     eax,ebx
c002856d:	89 c3                	mov    ebx,eax
c002856f:	c1 eb 08             	shr    ebx,0x8
c0028572:	a8 7f                	test   al,0x7f
c0028574:	0f 95 c2             	setne  dl
c0028577:	89 d6                	mov    esi,edx
c0028579:	09 de                	or     esi,ebx
c002857b:	83 e6 01             	and    esi,0x1
c002857e:	c1 e8 07             	shr    eax,0x7
c0028581:	21 f0                	and    eax,esi
c0028583:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028586:	09 ca                	or     edx,ecx
c0028588:	c1 e2 17             	shl    edx,0x17
c002858b:	09 da                	or     edx,ebx
c002858d:	01 d0                	add    eax,edx
c002858f:	83 c4 0c             	add    esp,0xc
c0028592:	5b                   	pop    ebx
c0028593:	5e                   	pop    esi
c0028594:	5f                   	pop    edi
c0028595:	5d                   	pop    ebp
c0028596:	c3                   	ret    

c0028597 <__extendsfdf2>:
c0028597:	55                   	push   ebp
c0028598:	89 e5                	mov    ebp,esp
c002859a:	57                   	push   edi
c002859b:	56                   	push   esi
c002859c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002859f:	89 d1                	mov    ecx,edx
c00285a1:	c1 f9 17             	sar    ecx,0x17
c00285a4:	c1 e2 08             	shl    edx,0x8
c00285a7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00285ad:	89 c8                	mov    eax,ecx
c00285af:	80 e4 f8             	and    ah,0xf8
c00285b2:	8d 71 01             	lea    esi,[ecx+0x1]
c00285b5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00285bb:	75 27                	jne    c00285e4 <__extendsfdf2+0x4d>
c00285bd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00285c3:	75 18                	jne    c00285dd <__extendsfdf2+0x46>
c00285c5:	85 d2                	test   edx,edx
c00285c7:	74 20                	je     c00285e9 <__extendsfdf2+0x52>
c00285c9:	41                   	inc    ecx
c00285ca:	01 d2                	add    edx,edx
c00285cc:	79 fb                	jns    c00285c9 <__extendsfdf2+0x32>
c00285ce:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00285d4:	29 c8                	sub    eax,ecx
c00285d6:	05 81 03 00 00       	add    eax,0x381
c00285db:	eb 0c                	jmp    c00285e9 <__extendsfdf2+0x52>
c00285dd:	05 00 07 00 00       	add    eax,0x700
c00285e2:	eb 05                	jmp    c00285e9 <__extendsfdf2+0x52>
c00285e4:	05 80 03 00 00       	add    eax,0x380
c00285e9:	c1 e0 14             	shl    eax,0x14
c00285ec:	89 c1                	mov    ecx,eax
c00285ee:	89 d0                	mov    eax,edx
c00285f0:	c1 e8 0b             	shr    eax,0xb
c00285f3:	09 c1                	or     ecx,eax
c00285f5:	c1 e2 15             	shl    edx,0x15
c00285f8:	89 d0                	mov    eax,edx
c00285fa:	89 ca                	mov    edx,ecx
c00285fc:	5e                   	pop    esi
c00285fd:	5f                   	pop    edi
c00285fe:	5d                   	pop    ebp
c00285ff:	c3                   	ret    

c0028600 <fabs>:
c0028600:	83 ec 0c             	sub    esp,0xc
c0028603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028607:	89 04 24             	mov    DWORD PTR [esp],eax
c002860a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002860e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028613:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028617:	dd 04 24             	fld    QWORD PTR [esp]
c002861a:	83 c4 0c             	add    esp,0xc
c002861d:	c3                   	ret    
c002861e:	66 90                	xchg   ax,ax

c0028620 <lrint>:
c0028620:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028624:	83 ec 04             	sub    esp,0x4
c0028627:	db 1c 24             	fistp  DWORD PTR [esp]
c002862a:	58                   	pop    eax
c002862b:	c3                   	ret    

c002862c <lrintf>:
c002862c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028630:	83 ec 04             	sub    esp,0x4
c0028633:	db 1c 24             	fistp  DWORD PTR [esp]
c0028636:	58                   	pop    eax
c0028637:	c3                   	ret    

Disassembly of section .init:

c0028638 <_init>:
c0028638:	55                   	push   ebp
c0028639:	89 e5                	mov    ebp,esp
c002863b:	e8 d8 7a fd ff       	call   c0000118 <frame_dummy>
c0028640:	e8 63 e0 ff ff       	call   c00266a8 <__do_global_ctors_aux>
c0028645:	5d                   	pop    ebp
c0028646:	c3                   	ret    

Disassembly of section .fini:

c0028647 <_fini>:
c0028647:	55                   	push   ebp
c0028648:	89 e5                	mov    ebp,esp
c002864a:	e8 59 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002864f:	5d                   	pop    ebp
c0028650:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028652 <Computer::~Computer()>:
c0028652:	83 ec 0c             	sub    esp,0xc
c0028655:	ba 88 a1 02 c0       	mov    edx,0xc002a188
c002865a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002865e:	89 10                	mov    DWORD PTR [eax],edx
c0028660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028664:	83 ec 0c             	sub    esp,0xc
c0028667:	50                   	push   eax
c0028668:	e8 d1 bb fe ff       	call   c001423e <Device::~Device()>
c002866d:	83 c4 10             	add    esp,0x10
c0028670:	90                   	nop
c0028671:	83 c4 0c             	add    esp,0xc
c0028674:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028676 <Computer::~Computer()>:
c0028676:	83 ec 0c             	sub    esp,0xc
c0028679:	83 ec 0c             	sub    esp,0xc
c002867c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028680:	e8 cd ff ff ff       	call   c0028652 <Computer::~Computer()>
c0028685:	83 c4 10             	add    esp,0x10
c0028688:	83 ec 08             	sub    esp,0x8
c002868b:	68 ec 01 00 00       	push   0x1ec
c0028690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028694:	e8 cd a7 fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0028699:	83 c4 10             	add    esp,0x10
c002869c:	83 c4 0c             	add    esp,0xc
c002869f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00286a0 <idleCommon()>:
c00286a0:	83 ec 0c             	sub    esp,0xc
c00286a3:	e8 1a 57 ff ff       	call   c001ddc2 <lockScheduler()>
c00286a8:	e8 51 5a ff ff       	call   c001e0fe <schedule()>
c00286ad:	83 c4 0c             	add    esp,0xc
c00286b0:	e9 0f 57 ff ff       	jmp    c001ddc4 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00286b6 <LinkedList<UnixFile>::~LinkedList()>:
c00286b6:	90                   	nop
c00286b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00286b8 <LinkedList<UnixFile>::LinkedList()>:
c00286b8:	83 ec 0c             	sub    esp,0xc
c00286bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286fb:	83 ec 0c             	sub    esp,0xc
c00286fe:	68 46 a4 02 c0       	push   0xc002a446
c0028703:	e8 3e a8 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0028708:	83 c4 10             	add    esp,0x10
c002870b:	90                   	nop
c002870c:	83 c4 0c             	add    esp,0xc
c002870f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028710 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028710:	83 ec 0c             	sub    esp,0xc
c0028713:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028718:	75 10                	jne    c002872a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002871a:	83 ec 0c             	sub    esp,0xc
c002871d:	68 60 a4 02 c0       	push   0xc002a460
c0028722:	e8 c0 1e ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0028727:	83 c4 10             	add    esp,0x10
c002872a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028730:	85 c0                	test   eax,eax
c0028732:	74 34                	je     c0028768 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028738:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002873b:	85 c0                	test   eax,eax
c002873d:	74 29                	je     c0028768 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002873f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028743:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028746:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002874a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002874d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028751:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028755:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002875f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028766:	eb 65                	jmp    c00287cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876c:	8b 00                	mov    eax,DWORD PTR [eax]
c002876e:	85 c0                	test   eax,eax
c0028770:	75 4b                	jne    c00287bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028776:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028779:	85 c0                	test   eax,eax
c002877b:	75 40                	jne    c00287bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002877d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028785:	89 10                	mov    DWORD PTR [eax],edx
c0028787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002878f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028796:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028799:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287a7:	85 c0                	test   eax,eax
c00287a9:	74 22                	je     c00287cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287ab:	83 ec 0c             	sub    esp,0xc
c00287ae:	68 82 a4 02 c0       	push   0xc002a482
c00287b3:	e8 2f 1e ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c00287b8:	83 c4 10             	add    esp,0x10
c00287bb:	eb 10                	jmp    c00287cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287bd:	83 ec 0c             	sub    esp,0xc
c00287c0:	68 8c a4 02 c0       	push   0xc002a48c
c00287c5:	e8 1d 1e ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c00287ca:	83 c4 10             	add    esp,0x10
c00287cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287d4:	8d 50 01             	lea    edx,[eax+0x1]
c00287d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287de:	90                   	nop
c00287df:	83 c4 0c             	add    esp,0xc
c00287e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00287e4 <LinkedList<UnixFile>::getFirstElement()>:
c00287e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00287ec <LinkedList<UnixFile>::removeFirst()>:
c00287ec:	83 ec 0c             	sub    esp,0xc
c00287ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00287f5:	85 c0                	test   eax,eax
c00287f7:	75 12                	jne    c002880b <LinkedList<UnixFile>::removeFirst()+0x1f>
c00287f9:	83 ec 0c             	sub    esp,0xc
c00287fc:	68 98 a4 02 c0       	push   0xc002a498
c0028801:	e8 e1 1d ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0028806:	83 c4 10             	add    esp,0x10
c0028809:	eb 7e                	jmp    c0028889 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002880b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028812:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028815:	85 c0                	test   eax,eax
c0028817:	74 10                	je     c0028829 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028819:	83 ec 0c             	sub    esp,0xc
c002881c:	68 e3 a4 02 c0       	push   0xc002a4e3
c0028821:	e8 c1 1d ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0028826:	83 c4 10             	add    esp,0x10
c0028829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882d:	8b 00                	mov    eax,DWORD PTR [eax]
c002882f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028832:	85 c0                	test   eax,eax
c0028834:	75 33                	jne    c0028869 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028844:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002884b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028852:	83 f8 01             	cmp    eax,0x1
c0028855:	74 21                	je     c0028878 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028857:	83 ec 0c             	sub    esp,0xc
c002885a:	68 bc a4 02 c0       	push   0xc002a4bc
c002885f:	e8 83 1d ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0028864:	83 c4 10             	add    esp,0x10
c0028867:	eb 0f                	jmp    c0028878 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886d:	8b 00                	mov    eax,DWORD PTR [eax]
c002886f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028876:	89 10                	mov    DWORD PTR [eax],edx
c0028878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002887f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028886:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028889:	83 c4 0c             	add    esp,0xc
c002888c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002888e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002888e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028892:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028895:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028896 <DriverlessDevice::~DriverlessDevice()>:
c0028896:	ba 24 ac 02 c0       	mov    edx,0xc002ac24
c002889b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002889f:	89 10                	mov    DWORD PTR [eax],edx
c00288a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288a5:	50                   	push   eax
c00288a6:	e8 93 b9 fe ff       	call   c001423e <Device::~Device()>
c00288ab:	83 c4 04             	add    esp,0x4
c00288ae:	90                   	nop
c00288af:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00288b0 <DriverlessDevice::~DriverlessDevice()>:
c00288b0:	83 ec 0c             	sub    esp,0xc
c00288b3:	83 ec 0c             	sub    esp,0xc
c00288b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288ba:	e8 d7 ff ff ff       	call   c0028896 <DriverlessDevice::~DriverlessDevice()>
c00288bf:	83 c4 10             	add    esp,0x10
c00288c2:	83 ec 08             	sub    esp,0x8
c00288c5:	68 58 01 00 00       	push   0x158
c00288ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288ce:	e8 93 a5 fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c00288d3:	83 c4 10             	add    esp,0x10
c00288d6:	83 c4 0c             	add    esp,0xc
c00288d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00288da <LinkedList<Device>::addElement(Device*)>:
c00288da:	83 ec 0c             	sub    esp,0xc
c00288dd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00288e2:	75 10                	jne    c00288f4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00288e4:	83 ec 0c             	sub    esp,0xc
c00288e7:	68 60 a4 02 c0       	push   0xc002a460
c00288ec:	e8 f6 1c ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c00288f1:	83 c4 10             	add    esp,0x10
c00288f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00288fa:	85 c0                	test   eax,eax
c00288fc:	74 3a                	je     c0028938 <LinkedList<Device>::addElement(Device*)+0x5e>
c00288fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028902:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028905:	85 c0                	test   eax,eax
c0028907:	74 2f                	je     c0028938 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028910:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028914:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002891a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028922:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028929:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002892c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028936:	eb 68                	jmp    c00289a0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893c:	8b 00                	mov    eax,DWORD PTR [eax]
c002893e:	85 c0                	test   eax,eax
c0028940:	75 4e                	jne    c0028990 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028949:	85 c0                	test   eax,eax
c002894b:	75 43                	jne    c0028990 <LinkedList<Device>::addElement(Device*)+0xb6>
c002894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028951:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028955:	89 10                	mov    DWORD PTR [eax],edx
c0028957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002895f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028966:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028969:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028977:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002897a:	85 c0                	test   eax,eax
c002897c:	74 22                	je     c00289a0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002897e:	83 ec 0c             	sub    esp,0xc
c0028981:	68 82 a4 02 c0       	push   0xc002a482
c0028986:	e8 5c 1c ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c002898b:	83 c4 10             	add    esp,0x10
c002898e:	eb 10                	jmp    c00289a0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028990:	83 ec 0c             	sub    esp,0xc
c0028993:	68 8c a4 02 c0       	push   0xc002a48c
c0028998:	e8 4a 1c ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c002899d:	83 c4 10             	add    esp,0x10
c00289a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289a7:	8d 50 01             	lea    edx,[eax+0x1]
c00289aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289b1:	90                   	nop
c00289b2:	83 c4 0c             	add    esp,0xc
c00289b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00289b6 <LinkedList<Device>::LinkedList()>:
c00289b6:	83 ec 0c             	sub    esp,0xc
c00289b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289f9:	83 ec 0c             	sub    esp,0xc
c00289fc:	68 46 a4 02 c0       	push   0xc002a446
c0028a01:	e8 40 a5 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0028a06:	83 c4 10             	add    esp,0x10
c0028a09:	90                   	nop
c0028a0a:	83 c4 0c             	add    esp,0xc
c0028a0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a12:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a1c:	85 c0                	test   eax,eax
c0028a1e:	75 0e                	jne    c0028a2e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a27:	85 c0                	test   eax,eax
c0028a29:	75 03                	jne    c0028a2e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a2b:	b0 01                	mov    al,0x1
c0028a2d:	c3                   	ret    
c0028a2e:	b0 00                	mov    al,0x0
c0028a30:	90                   	nop
c0028a31:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a32:	83 ec 0c             	sub    esp,0xc
c0028a35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a39:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a3b:	85 c0                	test   eax,eax
c0028a3d:	75 15                	jne    c0028a54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a3f:	83 ec 0c             	sub    esp,0xc
c0028a42:	68 98 a4 02 c0       	push   0xc002a498
c0028a47:	e8 9b 1b ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0028a4c:	83 c4 10             	add    esp,0x10
c0028a4f:	e9 88 00 00 00       	jmp    c0028adc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a5b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a5e:	85 c0                	test   eax,eax
c0028a60:	0f 95 c0             	setne  al
c0028a63:	84 c0                	test   al,al
c0028a65:	74 10                	je     c0028a77 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028a67:	83 ec 0c             	sub    esp,0xc
c0028a6a:	68 e3 a4 02 c0       	push   0xc002a4e3
c0028a6f:	e8 73 1b ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0028a74:	83 c4 10             	add    esp,0x10
c0028a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a7d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a80:	85 c0                	test   eax,eax
c0028a82:	0f 94 c0             	sete   al
c0028a85:	84 c0                	test   al,al
c0028a87:	74 33                	je     c0028abc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028aa5:	83 f8 01             	cmp    eax,0x1
c0028aa8:	74 21                	je     c0028acb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028aaa:	83 ec 0c             	sub    esp,0xc
c0028aad:	68 bc a4 02 c0       	push   0xc002a4bc
c0028ab2:	e8 30 1b ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0028ab7:	83 c4 10             	add    esp,0x10
c0028aba:	eb 0f                	jmp    c0028acb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ac2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac9:	89 10                	mov    DWORD PTR [eax],edx
c0028acb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028acf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ad2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028adc:	83 c4 0c             	add    esp,0xc
c0028adf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028ae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028ae0:	83 ec 0c             	sub    esp,0xc
c0028ae3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028ae8:	75 10                	jne    c0028afa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028aea:	83 ec 0c             	sub    esp,0xc
c0028aed:	68 60 a4 02 c0       	push   0xc002a460
c0028af2:	e8 f0 1a ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0028af7:	83 c4 10             	add    esp,0x10
c0028afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028afe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b00:	85 c0                	test   eax,eax
c0028b02:	74 34                	je     c0028b38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b0b:	85 c0                	test   eax,eax
c0028b0d:	74 29                	je     c0028b38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b1a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b25:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b2f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b36:	eb 65                	jmp    c0028b9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b3e:	85 c0                	test   eax,eax
c0028b40:	75 4b                	jne    c0028b8d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b49:	85 c0                	test   eax,eax
c0028b4b:	75 40                	jne    c0028b8d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b55:	89 10                	mov    DWORD PTR [eax],edx
c0028b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b5f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b69:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b77:	85 c0                	test   eax,eax
c0028b79:	74 22                	je     c0028b9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b7b:	83 ec 0c             	sub    esp,0xc
c0028b7e:	68 82 a4 02 c0       	push   0xc002a482
c0028b83:	e8 5f 1a ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0028b88:	83 c4 10             	add    esp,0x10
c0028b8b:	eb 10                	jmp    c0028b9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b8d:	83 ec 0c             	sub    esp,0xc
c0028b90:	68 8c a4 02 c0       	push   0xc002a48c
c0028b95:	e8 4d 1a ff ff       	call   c001a5e7 <Krnl::panic(char const*)>
c0028b9a:	83 c4 10             	add    esp,0x10
c0028b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ba4:	8d 50 01             	lea    edx,[eax+0x1]
c0028ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bae:	90                   	nop
c0028baf:	83 c4 0c             	add    esp,0xc
c0028bb2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028bb4 <ACPI::~ACPI()>:
c0028bb4:	83 ec 0c             	sub    esp,0xc
c0028bb7:	ba 6c b5 02 c0       	mov    edx,0xc002b56c
c0028bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc0:	89 10                	mov    DWORD PTR [eax],edx
c0028bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc6:	83 ec 0c             	sub    esp,0xc
c0028bc9:	50                   	push   eax
c0028bca:	e8 6f b6 fe ff       	call   c001423e <Device::~Device()>
c0028bcf:	83 c4 10             	add    esp,0x10
c0028bd2:	90                   	nop
c0028bd3:	83 c4 0c             	add    esp,0xc
c0028bd6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028bd8 <ACPI::~ACPI()>:
c0028bd8:	83 ec 0c             	sub    esp,0xc
c0028bdb:	83 ec 0c             	sub    esp,0xc
c0028bde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028be2:	e8 cd ff ff ff       	call   c0028bb4 <ACPI::~ACPI()>
c0028be7:	83 c4 10             	add    esp,0x10
c0028bea:	83 ec 08             	sub    esp,0x8
c0028bed:	68 68 12 00 00       	push   0x1268
c0028bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bf6:	e8 6b a2 fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0028bfb:	83 c4 10             	add    esp,0x10
c0028bfe:	83 c4 0c             	add    esp,0xc
c0028c01:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c02 <CPU::~CPU()>:
c0028c02:	83 ec 0c             	sub    esp,0xc
c0028c05:	ba 5c b9 02 c0       	mov    edx,0xc002b95c
c0028c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0e:	89 10                	mov    DWORD PTR [eax],edx
c0028c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c14:	83 ec 0c             	sub    esp,0xc
c0028c17:	50                   	push   eax
c0028c18:	e8 21 b6 fe ff       	call   c001423e <Device::~Device()>
c0028c1d:	83 c4 10             	add    esp,0x10
c0028c20:	90                   	nop
c0028c21:	83 c4 0c             	add    esp,0xc
c0028c24:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c26 <CPU::~CPU()>:
c0028c26:	83 ec 0c             	sub    esp,0xc
c0028c29:	83 ec 0c             	sub    esp,0xc
c0028c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c30:	e8 cd ff ff ff       	call   c0028c02 <CPU::~CPU()>
c0028c35:	83 c4 10             	add    esp,0x10
c0028c38:	83 ec 08             	sub    esp,0x8
c0028c3b:	68 98 11 00 00       	push   0x1198
c0028c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c44:	e8 1d a2 fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0028c49:	83 c4 10             	add    esp,0x10
c0028c4c:	83 c4 0c             	add    esp,0xc
c0028c4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c50 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c50:	90                   	nop
c0028c51:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c52 <ThreadControlBlock::ThreadControlBlock()>:
c0028c52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c56:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c61:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c6c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028c73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c77:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028c7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c82:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c8a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028c8e:	90                   	nop
c0028c8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028c90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028c90:	83 ec 0c             	sub    esp,0xc
c0028c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ccc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cd3:	83 ec 0c             	sub    esp,0xc
c0028cd6:	68 46 a4 02 c0       	push   0xc002a446
c0028cdb:	e8 66 a2 fe ff       	call   c0012f46 <Dbg::kprintf(char const*, ...)>
c0028ce0:	83 c4 10             	add    esp,0x10
c0028ce3:	90                   	nop
c0028ce4:	83 c4 0c             	add    esp,0xc
c0028ce7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028ce8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028ce8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028cec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028cef:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028cf0 <Vm::_FPUState::_FPUState()>:
c0028cf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cf4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028cfb:	90                   	nop
c0028cfc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028cfe <PCI::~PCI()>:
c0028cfe:	83 ec 0c             	sub    esp,0xc
c0028d01:	ba d0 c9 02 c0       	mov    edx,0xc002c9d0
c0028d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0a:	89 10                	mov    DWORD PTR [eax],edx
c0028d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d10:	83 ec 0c             	sub    esp,0xc
c0028d13:	50                   	push   eax
c0028d14:	e8 fd ae fe ff       	call   c0013c16 <Bus::~Bus()>
c0028d19:	83 c4 10             	add    esp,0x10
c0028d1c:	90                   	nop
c0028d1d:	83 c4 0c             	add    esp,0xc
c0028d20:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d22 <PCI::~PCI()>:
c0028d22:	83 ec 0c             	sub    esp,0xc
c0028d25:	83 ec 0c             	sub    esp,0xc
c0028d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d2c:	e8 cd ff ff ff       	call   c0028cfe <PCI::~PCI()>
c0028d31:	83 c4 10             	add    esp,0x10
c0028d34:	83 ec 08             	sub    esp,0x8
c0028d37:	68 58 01 00 00       	push   0x158
c0028d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d40:	e8 21 a1 fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0028d45:	83 c4 10             	add    esp,0x10
c0028d48:	83 c4 0c             	add    esp,0xc
c0028d4b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d4c <IDE::~IDE()>:
c0028d4c:	83 ec 0c             	sub    esp,0xc
c0028d4f:	ba 34 cc 02 c0       	mov    edx,0xc002cc34
c0028d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d58:	89 10                	mov    DWORD PTR [eax],edx
c0028d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5e:	83 ec 0c             	sub    esp,0xc
c0028d61:	50                   	push   eax
c0028d62:	e8 c7 b9 fe ff       	call   c001472e <HardDiskController::~HardDiskController()>
c0028d67:	83 c4 10             	add    esp,0x10
c0028d6a:	90                   	nop
c0028d6b:	83 c4 0c             	add    esp,0xc
c0028d6e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028d70 <IDE::~IDE()>:
c0028d70:	83 ec 0c             	sub    esp,0xc
c0028d73:	83 ec 0c             	sub    esp,0xc
c0028d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d7a:	e8 cd ff ff ff       	call   c0028d4c <IDE::~IDE()>
c0028d7f:	83 c4 10             	add    esp,0x10
c0028d82:	83 ec 08             	sub    esp,0x8
c0028d85:	68 70 02 00 00       	push   0x270
c0028d8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d8e:	e8 d3 a0 fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0028d93:	83 c4 10             	add    esp,0x10
c0028d96:	83 c4 0c             	add    esp,0xc
c0028d99:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028d9a <SATABus::~SATABus()>:
c0028d9a:	83 ec 0c             	sub    esp,0xc
c0028d9d:	ba 14 cd 02 c0       	mov    edx,0xc002cd14
c0028da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da6:	89 10                	mov    DWORD PTR [eax],edx
c0028da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dac:	83 ec 0c             	sub    esp,0xc
c0028daf:	50                   	push   eax
c0028db0:	e8 79 b9 fe ff       	call   c001472e <HardDiskController::~HardDiskController()>
c0028db5:	83 c4 10             	add    esp,0x10
c0028db8:	90                   	nop
c0028db9:	83 c4 0c             	add    esp,0xc
c0028dbc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028dbe <SATABus::~SATABus()>:
c0028dbe:	83 ec 0c             	sub    esp,0xc
c0028dc1:	83 ec 0c             	sub    esp,0xc
c0028dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dc8:	e8 cd ff ff ff       	call   c0028d9a <SATABus::~SATABus()>
c0028dcd:	83 c4 10             	add    esp,0x10
c0028dd0:	83 ec 08             	sub    esp,0x8
c0028dd3:	68 64 01 00 00       	push   0x164
c0028dd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ddc:	e8 85 a0 fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0028de1:	83 c4 10             	add    esp,0x10
c0028de4:	83 c4 0c             	add    esp,0xc
c0028de7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028de8 <ATA::~ATA()>:
c0028de8:	83 ec 0c             	sub    esp,0xc
c0028deb:	ba 60 cd 02 c0       	mov    edx,0xc002cd60
c0028df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df4:	89 10                	mov    DWORD PTR [eax],edx
c0028df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dfa:	83 ec 0c             	sub    esp,0xc
c0028dfd:	50                   	push   eax
c0028dfe:	e8 1d ba fe ff       	call   c0014820 <PhysicalDisk::~PhysicalDisk()>
c0028e03:	83 c4 10             	add    esp,0x10
c0028e06:	90                   	nop
c0028e07:	83 c4 0c             	add    esp,0xc
c0028e0a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e0c <ATA::~ATA()>:
c0028e0c:	83 ec 0c             	sub    esp,0xc
c0028e0f:	83 ec 0c             	sub    esp,0xc
c0028e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e16:	e8 cd ff ff ff       	call   c0028de8 <ATA::~ATA()>
c0028e1b:	83 c4 10             	add    esp,0x10
c0028e1e:	83 ec 08             	sub    esp,0x8
c0028e21:	68 7c 01 00 00       	push   0x17c
c0028e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2a:	e8 37 a0 fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0028e2f:	83 c4 10             	add    esp,0x10
c0028e32:	83 c4 0c             	add    esp,0xc
c0028e35:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e36 <ATAPI::~ATAPI()>:
c0028e36:	83 ec 0c             	sub    esp,0xc
c0028e39:	ba 98 cd 02 c0       	mov    edx,0xc002cd98
c0028e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e42:	89 10                	mov    DWORD PTR [eax],edx
c0028e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e48:	83 ec 0c             	sub    esp,0xc
c0028e4b:	50                   	push   eax
c0028e4c:	e8 cf b9 fe ff       	call   c0014820 <PhysicalDisk::~PhysicalDisk()>
c0028e51:	83 c4 10             	add    esp,0x10
c0028e54:	90                   	nop
c0028e55:	83 c4 0c             	add    esp,0xc
c0028e58:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e5a <ATAPI::~ATAPI()>:
c0028e5a:	83 ec 0c             	sub    esp,0xc
c0028e5d:	83 ec 0c             	sub    esp,0xc
c0028e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e64:	e8 cd ff ff ff       	call   c0028e36 <ATAPI::~ATAPI()>
c0028e69:	83 c4 10             	add    esp,0x10
c0028e6c:	83 ec 08             	sub    esp,0x8
c0028e6f:	68 80 01 00 00       	push   0x180
c0028e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e78:	e8 e9 9f fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0028e7d:	83 c4 10             	add    esp,0x10
c0028e80:	83 c4 0c             	add    esp,0xc
c0028e83:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028e84 <SATA::~SATA()>:
c0028e84:	83 ec 0c             	sub    esp,0xc
c0028e87:	ba 4c ce 02 c0       	mov    edx,0xc002ce4c
c0028e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e90:	89 10                	mov    DWORD PTR [eax],edx
c0028e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e96:	83 ec 0c             	sub    esp,0xc
c0028e99:	50                   	push   eax
c0028e9a:	e8 81 b9 fe ff       	call   c0014820 <PhysicalDisk::~PhysicalDisk()>
c0028e9f:	83 c4 10             	add    esp,0x10
c0028ea2:	90                   	nop
c0028ea3:	83 c4 0c             	add    esp,0xc
c0028ea6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ea8 <SATA::~SATA()>:
c0028ea8:	83 ec 0c             	sub    esp,0xc
c0028eab:	83 ec 0c             	sub    esp,0xc
c0028eae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb2:	e8 cd ff ff ff       	call   c0028e84 <SATA::~SATA()>
c0028eb7:	83 c4 10             	add    esp,0x10
c0028eba:	83 ec 08             	sub    esp,0x8
c0028ebd:	68 7c 01 00 00       	push   0x17c
c0028ec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec6:	e8 9b 9f fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0028ecb:	83 c4 10             	add    esp,0x10
c0028ece:	83 c4 0c             	add    esp,0xc
c0028ed1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028ed2 <SATAPI::~SATAPI()>:
c0028ed2:	83 ec 0c             	sub    esp,0xc
c0028ed5:	ba 28 cf 02 c0       	mov    edx,0xc002cf28
c0028eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ede:	89 10                	mov    DWORD PTR [eax],edx
c0028ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee4:	83 ec 0c             	sub    esp,0xc
c0028ee7:	50                   	push   eax
c0028ee8:	e8 33 b9 fe ff       	call   c0014820 <PhysicalDisk::~PhysicalDisk()>
c0028eed:	83 c4 10             	add    esp,0x10
c0028ef0:	90                   	nop
c0028ef1:	83 c4 0c             	add    esp,0xc
c0028ef4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028ef6 <SATAPI::~SATAPI()>:
c0028ef6:	83 ec 0c             	sub    esp,0xc
c0028ef9:	83 ec 0c             	sub    esp,0xc
c0028efc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f00:	e8 cd ff ff ff       	call   c0028ed2 <SATAPI::~SATAPI()>
c0028f05:	83 c4 10             	add    esp,0x10
c0028f08:	83 ec 08             	sub    esp,0x8
c0028f0b:	68 80 01 00 00       	push   0x180
c0028f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f14:	e8 4d 9f fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0028f19:	83 c4 10             	add    esp,0x10
c0028f1c:	83 c4 0c             	add    esp,0xc
c0028f1f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f20 <AVX::~AVX()>:
c0028f20:	83 ec 0c             	sub    esp,0xc
c0028f23:	ba 68 cf 02 c0       	mov    edx,0xc002cf68
c0028f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2c:	89 10                	mov    DWORD PTR [eax],edx
c0028f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f32:	83 ec 0c             	sub    esp,0xc
c0028f35:	50                   	push   eax
c0028f36:	e8 69 b9 fe ff       	call   c00148a4 <FPU::~FPU()>
c0028f3b:	83 c4 10             	add    esp,0x10
c0028f3e:	90                   	nop
c0028f3f:	83 c4 0c             	add    esp,0xc
c0028f42:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f44 <AVX::~AVX()>:
c0028f44:	83 ec 0c             	sub    esp,0xc
c0028f47:	83 ec 0c             	sub    esp,0xc
c0028f4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f4e:	e8 cd ff ff ff       	call   c0028f20 <AVX::~AVX()>
c0028f53:	83 c4 10             	add    esp,0x10
c0028f56:	83 ec 08             	sub    esp,0x8
c0028f59:	68 58 01 00 00       	push   0x158
c0028f5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f62:	e8 ff 9e fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0028f67:	83 c4 10             	add    esp,0x10
c0028f6a:	83 c4 0c             	add    esp,0xc
c0028f6d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f6e <MMX::~MMX()>:
c0028f6e:	83 ec 0c             	sub    esp,0xc
c0028f71:	ba a8 cf 02 c0       	mov    edx,0xc002cfa8
c0028f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7a:	89 10                	mov    DWORD PTR [eax],edx
c0028f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f80:	83 ec 0c             	sub    esp,0xc
c0028f83:	50                   	push   eax
c0028f84:	e8 1b b9 fe ff       	call   c00148a4 <FPU::~FPU()>
c0028f89:	83 c4 10             	add    esp,0x10
c0028f8c:	90                   	nop
c0028f8d:	83 c4 0c             	add    esp,0xc
c0028f90:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028f92 <MMX::~MMX()>:
c0028f92:	83 ec 0c             	sub    esp,0xc
c0028f95:	83 ec 0c             	sub    esp,0xc
c0028f98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f9c:	e8 cd ff ff ff       	call   c0028f6e <MMX::~MMX()>
c0028fa1:	83 c4 10             	add    esp,0x10
c0028fa4:	83 ec 08             	sub    esp,0x8
c0028fa7:	68 58 01 00 00       	push   0x158
c0028fac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb0:	e8 b1 9e fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0028fb5:	83 c4 10             	add    esp,0x10
c0028fb8:	83 c4 0c             	add    esp,0xc
c0028fbb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028fbc <SSE::~SSE()>:
c0028fbc:	83 ec 0c             	sub    esp,0xc
c0028fbf:	ba e8 cf 02 c0       	mov    edx,0xc002cfe8
c0028fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc8:	89 10                	mov    DWORD PTR [eax],edx
c0028fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fce:	83 ec 0c             	sub    esp,0xc
c0028fd1:	50                   	push   eax
c0028fd2:	e8 cd b8 fe ff       	call   c00148a4 <FPU::~FPU()>
c0028fd7:	83 c4 10             	add    esp,0x10
c0028fda:	90                   	nop
c0028fdb:	83 c4 0c             	add    esp,0xc
c0028fde:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028fe0 <SSE::~SSE()>:
c0028fe0:	83 ec 0c             	sub    esp,0xc
c0028fe3:	83 ec 0c             	sub    esp,0xc
c0028fe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fea:	e8 cd ff ff ff       	call   c0028fbc <SSE::~SSE()>
c0028fef:	83 c4 10             	add    esp,0x10
c0028ff2:	83 ec 08             	sub    esp,0x8
c0028ff5:	68 58 01 00 00       	push   0x158
c0028ffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ffe:	e8 63 9e fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0029003:	83 c4 10             	add    esp,0x10
c0029006:	83 c4 0c             	add    esp,0xc
c0029009:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002900a <x87::~x87()>:
c002900a:	83 ec 0c             	sub    esp,0xc
c002900d:	ba 28 d0 02 c0       	mov    edx,0xc002d028
c0029012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029016:	89 10                	mov    DWORD PTR [eax],edx
c0029018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901c:	83 ec 0c             	sub    esp,0xc
c002901f:	50                   	push   eax
c0029020:	e8 7f b8 fe ff       	call   c00148a4 <FPU::~FPU()>
c0029025:	83 c4 10             	add    esp,0x10
c0029028:	90                   	nop
c0029029:	83 c4 0c             	add    esp,0xc
c002902c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002902e <x87::~x87()>:
c002902e:	83 ec 0c             	sub    esp,0xc
c0029031:	83 ec 0c             	sub    esp,0xc
c0029034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029038:	e8 cd ff ff ff       	call   c002900a <x87::~x87()>
c002903d:	83 c4 10             	add    esp,0x10
c0029040:	83 ec 08             	sub    esp,0x8
c0029043:	68 58 01 00 00       	push   0x158
c0029048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002904c:	e8 15 9e fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0029051:	83 c4 10             	add    esp,0x10
c0029054:	83 c4 0c             	add    esp,0xc
c0029057:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029058 <IOAPIC::~IOAPIC()>:
c0029058:	83 ec 0c             	sub    esp,0xc
c002905b:	ba 80 d1 02 c0       	mov    edx,0xc002d180
c0029060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029064:	89 10                	mov    DWORD PTR [eax],edx
c0029066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906a:	83 ec 0c             	sub    esp,0xc
c002906d:	50                   	push   eax
c002906e:	e8 cb b1 fe ff       	call   c001423e <Device::~Device()>
c0029073:	83 c4 10             	add    esp,0x10
c0029076:	90                   	nop
c0029077:	83 c4 0c             	add    esp,0xc
c002907a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002907c <IOAPIC::~IOAPIC()>:
c002907c:	83 ec 0c             	sub    esp,0xc
c002907f:	83 ec 0c             	sub    esp,0xc
c0029082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029086:	e8 cd ff ff ff       	call   c0029058 <IOAPIC::~IOAPIC()>
c002908b:	83 c4 10             	add    esp,0x10
c002908e:	83 ec 08             	sub    esp,0x8
c0029091:	68 68 01 00 00       	push   0x168
c0029096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002909a:	e8 c7 9d fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c002909f:	83 c4 10             	add    esp,0x10
c00290a2:	83 c4 0c             	add    esp,0xc
c00290a5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00290a6 <APIC::~APIC()>:
c00290a6:	83 ec 0c             	sub    esp,0xc
c00290a9:	ba 38 d1 02 c0       	mov    edx,0xc002d138
c00290ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b2:	89 10                	mov    DWORD PTR [eax],edx
c00290b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b8:	83 ec 0c             	sub    esp,0xc
c00290bb:	50                   	push   eax
c00290bc:	e8 ad bc fe ff       	call   c0014d6e <InterruptController::~InterruptController()>
c00290c1:	83 c4 10             	add    esp,0x10
c00290c4:	90                   	nop
c00290c5:	83 c4 0c             	add    esp,0xc
c00290c8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00290ca <APIC::~APIC()>:
c00290ca:	83 ec 0c             	sub    esp,0xc
c00290cd:	83 ec 0c             	sub    esp,0xc
c00290d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290d4:	e8 cd ff ff ff       	call   c00290a6 <APIC::~APIC()>
c00290d9:	83 c4 10             	add    esp,0x10
c00290dc:	83 ec 08             	sub    esp,0x8
c00290df:	68 58 21 00 00       	push   0x2158
c00290e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e8:	e8 79 9d fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c00290ed:	83 c4 10             	add    esp,0x10
c00290f0:	83 c4 0c             	add    esp,0xc
c00290f3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00290f4 <PIC::~PIC()>:
c00290f4:	83 ec 0c             	sub    esp,0xc
c00290f7:	ba d0 d1 02 c0       	mov    edx,0xc002d1d0
c00290fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029100:	89 10                	mov    DWORD PTR [eax],edx
c0029102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029106:	83 ec 0c             	sub    esp,0xc
c0029109:	50                   	push   eax
c002910a:	e8 5f bc fe ff       	call   c0014d6e <InterruptController::~InterruptController()>
c002910f:	83 c4 10             	add    esp,0x10
c0029112:	90                   	nop
c0029113:	83 c4 0c             	add    esp,0xc
c0029116:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029118 <PIC::~PIC()>:
c0029118:	83 ec 0c             	sub    esp,0xc
c002911b:	83 ec 0c             	sub    esp,0xc
c002911e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029122:	e8 cd ff ff ff       	call   c00290f4 <PIC::~PIC()>
c0029127:	83 c4 10             	add    esp,0x10
c002912a:	83 ec 08             	sub    esp,0x8
c002912d:	68 58 21 00 00       	push   0x2158
c0029132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029136:	e8 2b 9d fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c002913b:	83 c4 10             	add    esp,0x10
c002913e:	83 c4 0c             	add    esp,0xc
c0029141:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029142 <APICTimer::~APICTimer()>:
c0029142:	83 ec 0c             	sub    esp,0xc
c0029145:	ba 24 d2 02 c0       	mov    edx,0xc002d224
c002914a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002914e:	89 10                	mov    DWORD PTR [eax],edx
c0029150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029154:	83 ec 0c             	sub    esp,0xc
c0029157:	50                   	push   eax
c0029158:	e8 5d db fe ff       	call   c0016cba <Timer::~Timer()>
c002915d:	83 c4 10             	add    esp,0x10
c0029160:	90                   	nop
c0029161:	83 c4 0c             	add    esp,0xc
c0029164:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029166 <APICTimer::~APICTimer()>:
c0029166:	83 ec 0c             	sub    esp,0xc
c0029169:	83 ec 0c             	sub    esp,0xc
c002916c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029170:	e8 cd ff ff ff       	call   c0029142 <APICTimer::~APICTimer()>
c0029175:	83 c4 10             	add    esp,0x10
c0029178:	83 ec 08             	sub    esp,0x8
c002917b:	68 60 01 00 00       	push   0x160
c0029180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029184:	e8 dd 9c fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c0029189:	83 c4 10             	add    esp,0x10
c002918c:	83 c4 0c             	add    esp,0xc
c002918f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029190 <PIT::~PIT()>:
c0029190:	83 ec 0c             	sub    esp,0xc
c0029193:	ba 74 d2 02 c0       	mov    edx,0xc002d274
c0029198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002919c:	89 10                	mov    DWORD PTR [eax],edx
c002919e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a2:	83 ec 0c             	sub    esp,0xc
c00291a5:	50                   	push   eax
c00291a6:	e8 0f db fe ff       	call   c0016cba <Timer::~Timer()>
c00291ab:	83 c4 10             	add    esp,0x10
c00291ae:	90                   	nop
c00291af:	83 c4 0c             	add    esp,0xc
c00291b2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00291b4 <PIT::~PIT()>:
c00291b4:	83 ec 0c             	sub    esp,0xc
c00291b7:	83 ec 0c             	sub    esp,0xc
c00291ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291be:	e8 cd ff ff ff       	call   c0029190 <PIT::~PIT()>
c00291c3:	83 c4 10             	add    esp,0x10
c00291c6:	83 ec 08             	sub    esp,0x8
c00291c9:	68 5c 01 00 00       	push   0x15c
c00291ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291d2:	e8 8f 9c fe ff       	call   c0012e66 <operator delete(void*, unsigned long)>
c00291d7:	83 c4 10             	add    esp,0x10
c00291da:	83 c4 0c             	add    esp,0xc
c00291dd:	c3                   	ret    
